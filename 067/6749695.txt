#include<bits/stdc++.h>
#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
 
#define rep(i,n)for(int i=0;(i)<(int)(n);i++)
#define REP(i,a,b)for(int i=(int)(a);(i)<=(int)(b);i++)
#define ALL(a)  (a).begin(),(a).end()
#define pb push_back
#define fi first
#define se second
#define sz(x) ((int)x.size())
 
using namespace std;
//using namespace atcoder;
using ld = long double;
using ll = long long;
using P = pair<ll, ll>;
 
template<typename T> bool chmin(T& a, const T& b) { if(a >= b){ a = b; return 1;} return 0; }
template<typename T> bool chmax(T& a, const T& b) { if(a <= b){ a = b; return 1;} return 0; }
 
 
const ll MOD = 998244353;
const ll INF = 1e9;


int main(){
    int n, m;
    while(cin >> n >> m){
        if(n+m == 0)break;
        // input
        vector<int> h(n), w(m);
        rep(i, n)cin >> h[i];
        rep(i, m)cin >> w[i];
        // h,wそれぞれの区間和を列挙
        vector<int> hsum, wsum;
        rep(i, n){
            int sum = 0;
            REP(j, i, n-1){
                sum += h[j];
                hsum.pb(sum);
            }
        }
        rep(i, m){
            int sum = 0;
            REP(j, i, m-1){
                sum += w[j];
                wsum.pb(sum);
            }
        }
        // sort
        sort(ALL(hsum));
        sort(ALL(wsum));
        // 後ろにdummyを入れておる
        // hsum.pb(INF);
        // wsum.pb(INF);
        // 片方決め打ちで同じ値の個数を答えに足す
        int res = 0;
        rep(i, sz(hsum)){
            int lb, ub;
            lb = lower_bound(ALL(wsum), hsum[i]) - wsum.begin();
            ub = upper_bound(ALL(wsum), hsum[i]) - wsum.begin();
            // cout << "lb: " << lb << " ub: " << ub << endl;
            res += ub - lb;
        }
        cout << res << endl;
        // test
        // rep(i, sz(hsum))cout << hsum[i] << " ";cout << endl;
        // rep(i, sz(wsum))cout << wsum[i] << " ";cout << endl;
    }
}

