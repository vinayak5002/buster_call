use std::io;

fn main() {
    let mut nlm = String::new();
    io::stdin().read_line(&mut nlm).ok();
    let nml: Vec<u8> = nlm.trim().split_whitespace().map(|s| s.parse::<u8>().unwrap()).collect();

    let mut matrix_a: Vec<Vec<u32>> = Vec::new();
    let mut matrix_b: Vec<Vec<u32>> = Vec::new();
    let mut matrix_c: Vec<Vec<u32>> = Vec::new();

    for _ in 0..nml[0] {
        let mut input = String::new();
        io::stdin().read_line(&mut input).ok();
        let input: Vec<u32> = input.trim().split_whitespace().map(|s| s.parse::<u32>().unwrap()).collect();
        matrix_a.push(input);
    }

    for _ in 0..nml[1] {
        let mut input = String::new();
        io::stdin().read_line(&mut input).ok();
        let input: Vec<u32> = input.trim().split_whitespace().map(|s| s.parse::<u32>().unwrap()).collect();
        matrix_b.push(input);
    }




    for n in 0..nml[0] {
        let mut row: Vec<u32> = Vec::new();
        for l in 0..nml[2] {
            let mut product: u32 = 0;
            for m in 0..nml[1] {
                product += matrix_a[n as usize][m as usize] * matrix_b[m as usize][l as usize];
            }
            row.push(product);
        }
        matrix_c.push(row);
    }



    for i in 0..matrix_c.len() {
        println!("{}", matrix_c[i].iter().map(|c| c.to_string()).collect::<Vec<String>>().join(" "));
    }




}

