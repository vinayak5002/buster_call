using System;
using System.Collections.Generic;
using System.Linq;

class DS
{
	static void Main()
	{
		var n = int.Parse(Console.ReadLine());
		var a = Console.ReadLine().Split().Select(int.Parse).Select((x, i) => new { x, i }).OrderBy(_ => _.x).Select(_ => _.i).ToArray();

		Console.WriteLine(InversionNumber(n, a));
	}

	static long InversionNumber(int n, int[] a)
	{
		var r = 0L;
		var rsq = new RSQ(n);
		for (int i = 0; i < n; ++i)
		{
			r += rsq[a[i], n];
			rsq.Add(a[i], 1);
		}
		return r;
	}
}

public class RSQ
{
	int n = 1;
	public int Count => n;
	long[] a;

	public RSQ(int count, long[] a0 = null)
	{
		while (n < count) n <<= 1;
		a = new long[n << 1];
		if (a0 != null)
		{
			Array.Copy(a0, 0, a, n, a0.Length);
			for (int i = n - 1; i > 0; --i) a[i] = a[i << 1] + a[(i << 1) | 1];
		}
	}

	public long this[int i]
	{
		get => a[n | i];
		set => Add(i, value - a[n | i]);
	}
	public void Add(int i, long d) { for (i |= n; i > 0; i >>= 1) a[i] += d; }

	public long this[int l, int r]
	{
		get
		{
			var s = 0L;
			for (l |= n, r += n; l < r; l >>= 1, r >>= 1)
			{
				if ((l & 1) != 0) s += a[l++];
				if ((r & 1) != 0) s += a[--r];
			}
			return s;
		}
	}
}

