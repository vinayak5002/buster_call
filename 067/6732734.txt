use std::io::{stdin, BufRead, BufReader};

fn main() {
    let mut input = BufReader::new(stdin());
    let mut buf = String::new();

    loop {
        if let Ok(len) = input.read_line(&mut buf) {
            if len == 0 {
                break;
            }
        }
        let mut params = buf
            .trim()
            .split(' ')
            .map(str::parse::<usize>)
            .map(Result::unwrap);
        let n = params.next().unwrap();
        let m = params.next().unwrap();

        if n == 0 && m == 0 {
            break;
        }

        let mut code_books = vec![0i32; m];

        let mut prev_rms = vec![std::u64::MAX; 256];
        let mut cur_rms = vec![std::u64::MAX; 256];

        for i in 0..m {
            prev_rms[(128 + code_books[i]) as usize] = 0;
        }

        for i in 0..m {
            buf.clear();
            input.read_line(&mut buf).unwrap();
            code_books[i] = buf.trim().parse::<i32>().unwrap();
        }

        for _ in 0..n {
            buf.clear();
            input.read_line(&mut buf).unwrap();
            let signal = buf.trim().parse::<i32>().unwrap();

            for i in 0..256 {
                cur_rms[i] = std::u64::MAX;
            }

            for i in 0..m {
                let code = code_books[i];

                for k in 0..256usize {
                    let val = k as i32;
                    let prev_rms_value = prev_rms[k];

                    if prev_rms_value == std::u64::MAX {
                        continue;
                    }

                    let dsig = (val + code).min(255).max(0);
                    let delta = signal - dsig;

                    let rms = prev_rms_value + delta.pow(2) as u64;
                    cur_rms[dsig as usize] = cur_rms[dsig as usize].min(rms);
                }
            }

            std::mem::swap(&mut prev_rms, &mut cur_rms);
        }

        let mut min_rms = std::u64::MAX;

        for v in prev_rms {
            min_rms = min_rms.min(v);
        }

        println!("{}", min_rms);

        buf.clear();
    }
}

