#include<stdio.h>

#define MAX 100
#define INFTY 2097152
#define WHITE 0
#define GRAY 1
#define BLACK 2
#define true 1
#define false 0

int n, M[MAX][MAX];

int prim()
{
	int i, v, u, minv;
	int d[MAX], p[MAX], color[MAX];
	int sum = 0;
	
	//すべての頂点の訪問回数0として初期化する//
	for( i = 0; i < n; i++ )
	{
		d[i] = INFTY;
		p[i] = -1;
		color[i] = WHITE;
	}
	
	d[0] = 0;
	
	while( true )
	{
		minv = INFTY;
		u = -1;
		for( i = 0; i < n; i++ )
		{
			if( minv > d[i] && color[i] != BLACK )
			{
				u = i;
				minv = d[i];
			}
		}
		
		if( u == -1 )
		{
			break;
		}
		
		color[u] = BLACK;
		
		for( v = 0; v < n; v++ )
		{
			if( color[v] != BLACK && M[u][v] != INFTY  )
			{
				if( d[v] > M[u][v] )
				{
					d[v] = M[u][v];
					p[v] = u;
					color[v] = GRAY;
				}
			}
		}
	}
	
	//頂点と頂点をつなぐ辺がある場合にsumに値を格納していく//
	for( i = 0; i < n; i++ )
	{
		if( p[i] != -1 )
		{
			sum += M[i][p[i]];
		}
	}
		
	return sum;
}

int main( void )
{
	int i, j, e;
	
	scanf( "%d", &n );
	
	for( i = 0; i < n; i++ )
	{
		for( j = 0; j < n; j++ )
		{
			scanf( "%d", &e );
			if( e == -1 )
			{
				e = INFTY;
			}
			M[i][j] = e;
		}
	}
	
	printf( "%d\n", prim() );
	
	return 0;
}

