#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define rep2(i, k, n) for (decltype(n) i = k; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i--)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i--)
#define repr2(i, k, n) for (decltype(n) i = n; i >= k; i--)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret; };
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret; };
template <typename T> using pq_inv = priority_queue<T, vector<T>, greater<T>>;
vector<int> dd4={1, 0, -1, 0, 1};  // 4方位 rep(i,4) nh=h+dd4[i]; nw=w+dd4[i+1];
vector<int> dd8={1, 0, -1, 0, 1, 1,-1, -1, 1};  // 8方位 rep(i,8) nh=h+dd8[i]; nw=w+dd8[i+1];



template <typename T>
struct Edge {
    int from;
    int to;
    T cost;
    Edge(int f, int t, T c) :from(f), to(t), cost(c) {};
    bool operator<(const Edge& e) const{ return cost < e.cost;}
    bool operator>(const Edge& e) const{ return cost > e.cost;}
};


struct UnionFind {
    vector<int> par, siz;
    UnionFind(int n) : par(n, -1), siz(n) {}
    int root(int x) {
        if (par[x] == -1) return x;
        // return root(par[x]);
        return par[x] = root(par[x]);
    }
    bool is_same(int x, int y) {
        return root(x) == root(y);
    }

    bool merge(int x, int y) {
        x = root(x);
        y = root(y);
        if (is_same(x, y)) return false;
        if (y > x) swap(x, y);
        par[y] = x;
        siz[x] += siz[y];
        return true;
    }
    int size(int x) {
        return siz[root(x)];
    }
};


template <typename T>
struct KruskalMST {
    vector<Edge<T>> edge;
    vector<vector<Edge<T>>> mst;
    T mst_cost=0;
    KruskalMST(int n) : mst(n) {}

    void add_edge(int from, int to, T cost) {
        edge.emplace_back(from, to, cost);
    }

    T construct() {
        T total_cost = 0;
        sort(edge.begin(), edge.end());
        UnionFind uf(mst.size());
        for(auto&& e:edge){
            if(uf.is_same(e.from, e.to))continue;
            uf.merge(e.from, e.to);
            mst[e.from].emplace_back(e.from, e.to, e.cost);
            mst[e.to].emplace_back(e.to, e.from, e.cost);
            total_cost += e.cost;
        }
        return total_cost;
    }
};



struct Solver {
    double distance(vector<double>X, vector<double>Y){
        double ret=0;
        rep(i,3) ret+=pow(X[i]-Y[i],2);
        return sqrt(ret);
    }
    vector<vector<double>> distance(vector<vector<double>>& X){
        double EPS=1e-10;
        int n=X.size();
        vector<vector<double>> dist(n,vector<double>(n));
        rep(i,n)rep(j,n){
            double d=distance(X[i],X[j]) ;
            if(d<X[i][3] + X[j][3]+EPS){
                dist[i][j]=0 ;
            }else{
                dist[i][j]=d-(X[i][3]+X[j][3]);
            }
        }
        return dist;
    }
    void solve(int N){
        vector<vector<double>> X(N,vector<double>(4));
        rep(i,N)rep(j,4) cin >> X[i][j];
        auto dist = distance(X);
        KruskalMST<double> mst(N);
        for(int i=0; i<N; i++)for(int j=i+1; j<N; j++){
            mst.add_edge(i,j,dist[i][j]);
        }
        cout << fixed << setprecision(3)  << mst.construct() << endl;
                
    };
};

int main() {
    std::cin.tie(nullptr);
    // cin >> T;
    while(true){
        int i;
        cin >> i;
        if(i==0)break;
        Solver solver;
        solver.solve(i);
    }
    return 0;
}


