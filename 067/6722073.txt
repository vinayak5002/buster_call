#include <algorithm>
#include <cassert>
#include <cstddef>
#include <cstdint>
#include <iomanip>
#include <iostream>
#include <utility>
#include <vector>

namespace luz {

  using isize = std::ptrdiff_t;
  using usize = std::size_t;

  using i32 = std::int32_t;
  using i64 = std::int64_t;
  using u32 = std::uint32_t;
  using u64 = std::uint64_t;
  
} // namespace luz

namespace luz {

  struct rep {
    struct itr {
      usize i;
      constexpr itr(const usize i) noexcept : i(i) {}
      void operator++() noexcept { ++i; }
      constexpr usize operator*() const noexcept { return i; }
      constexpr bool operator!=(const itr x) const noexcept { return i != x.i; }
    };
    const itr f, l;
    constexpr rep(const usize f, const usize l) noexcept
      : f(std::min(f, l)), l(l) {}
    constexpr auto begin() const noexcept { return f; }
    constexpr auto end() const noexcept { return l; }
  };

  struct rrep {
    struct itr {
      usize i;
      constexpr itr(const usize i) noexcept : i(i) {}
      void operator++() noexcept { --i; }
      constexpr usize operator*() const noexcept { return i; }
      constexpr bool operator!=(const itr x) const noexcept { return i != x.i; }
    };
    const itr f, l;
    constexpr rrep(const usize f, const usize l) noexcept
      : f(l - 1), l(std::min(f, l) - 1) {}
    constexpr auto begin() const noexcept { return f; }
    constexpr auto end() const noexcept { return l; }
  };

} // namespace luz

namespace luz {

  void set_fast_ios() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
  }

} // namespace luz

namespace luz {

  void io_set(usize precision) {
    std::cout << std::fixed << std::setprecision(precision);
    std::cerr << std::fixed << std::setprecision(precision);
  }

} // namespace luz

namespace luz {

  template< typename T = i64 > T input() {
    T tmp;
    std::cin >> tmp;
    return tmp;
  }

} // namespace luz

namespace luz {

  template< typename T >
  std::ostream &operator<<(std::ostream &os, std::vector< T > &vs) {
    for (usize i: rep(0, vs.size())) {
      os << vs[i] << (i + 1 != vs.size() ? " " : "");
    }
    return os;
  }

  template< typename T >
  std::istream &operator>>(std::istream &is, std::vector< T > &vs) {
    for (T &v: vs) {
      is >> v;
    }
    return is;
  }

} // namespace luz

namespace luz {

  template< typename T1, typename T2 >
  std::ostream &operator<<(std::ostream &os, std::pair < T1, T2 > &p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
  }

  template< typename T1, typename T2 >
  std::istream &operator>>(std::istream &is, std::pair< T1, T2 > &p) {
    is >> p.first >> p.second;
    return is;
  }

} // namespace luz

namespace luz {

  template <typename T>
  std::vector<T> make_vector(usize a, T b) {
    return std::vector<T>(a, b);
  }

  template <typename... Ts>
  auto make_vector(usize a, Ts... ts) {
    return std::vector<decltype(make_vector(ts...))>(a, make_vector(ts...));
  }

} // namespace luz

namespace luz {

  template <typename T1, typename T2>
  inline bool chmax(T1 &a, T2 b) {
    return a < b and (a = b, true);
  }

  template <typename T1, typename T2>
  inline bool chmin(T1 &a, T2 b) {
    return a > b and (a = b, true);
  }

} // namespace luz

using namespace std;

#include <complex>
#include <cmath>
#include <istream>
#include <ostream>

// base
namespace geometry {
  using namespace std;
  using real_number = long double;

  const real_number PI = acosl(-1);

  inline static real_number &eps() {
    static real_number EPS = 1e-10;
    return EPS;
  }

  static void set_eps(real_number EPS) {
    eps() = EPS;
  }

  inline int sign(real_number r) {
    set_eps(1e-10);
    if (r < -eps()) return -1;
    if (r > +eps()) return +1;
    return 0;
  }

  inline bool equals(real_number r1, real_number r2) {
    return sign(r1 - r2) == 0;
  }
}

// point
namespace geometry {
  using point = complex< real_number >;
  using points = vector< point >;

  istream &operator>>(istream &is, point &p) {
    real_number x, y;
    is >> x >> y;
    p = point(x, y);
    return is;
  }

  ostream &operator<<(ostream &os, const point &p) {
    return os << p.real() << " " << p.imag();
  }

  point operator*(const point &p, const real_number &k) {
    return point(p.real() * k, p.imag() * k);
  }

  point rotate(const real_number &theta, const point &p) {
    return point(cos(theta) * p.real() + sin(-theta) * p.imag(),
                 sin(theta) * p.real() + cos(-theta) * p.imag());
  }

  bool equals(const point &a, const point &b) {
    return equals(a.real(), b.real()) and equals(a.imag(), b.imag());
  }
}

using geometry::operator>>;
using geometry::operator<<;

// circle
namespace geometry {
  struct circle {
    point p;
    real_number r;
    circle() {}
    circle(point p, real_number r) : p(p), r(r) {}
  };

  using circles = vector< circle >;
}

// line 
namespace geometry {
  struct line {
    point a, b;

    line() = default;
    line(point a, point b) : a(a), b(b) {}
  };

  using lines = vector< line >;
}

namespace geometry {
  lines tangent_cc(circle c1, circle c2) {
    lines ls;
    if (c1.r > c2.r) swap(c1, c2);

    real_number g = norm(c1.p - c2.p);
    if (sign(g) == 0) return ls;

    point u = (c1.p - c2.p) / sqrt(g);
    point v(-u.imag(), u.real());

    for (int s = 1; s >= -1; s -= 2) {
      real_number h = (c1.r * s + c2.r) / sqrt(g);
      if (sign(1 - norm(h)) == 0) {
        ls.emplace_back(c2.p + u * c2.r, c2.p + (u + v) * c2.r);
      } else if (sign(1 - norm(h)) > 0) {
        point uu = u * h;
        point vv = v * sqrt(1 - norm(h));
        ls.emplace_back(c2.p + (uu + vv) * c2.r, c1.p - (uu + vv) * c1.r * s);
        ls.emplace_back(c2.p + (uu - vv) * c2.r, c1.p - (uu - vv) * c1.r * s);
      }
    }

    return ls;
  }
}

// product
namespace geometry {
  real_number cross(const point &a, const point &b) {
    return a.real() * b.imag() - a.imag() * b.real();
  }

  real_number dot(const point &a, const point &b) {
    return a.real() * b.real() + a.imag() * b.imag();
  }
}

// projection
namespace geometry {
  point projection(const line &l, const point &p) {
    real_number t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);
    return l.a + (l.a - l.b) * t;
  }
}

namespace geometry {
  real_number distance_lp(const line &l, const point &p) {
    point pr = projection(l, p);
    return abs(pr - p);
  }
}

using namespace geometry;

namespace luz {

  void solve(int n) {
    circles originals(n);
    std::vector< real_number > ms(n);
    circles cs;

    for (usize i: rep(0, n)) {
      real_number x, y;
      real_number r, m;
      std::cin >> x >> y >> r >> m;

      cs.emplace_back(point(x, y), r + m);
      cs.emplace_back(point(x, y), r);
      originals[i] = circle(point(x, y), r);
      ms[i] = m;
    }

    int ans = 1;
    for (usize i: rep(0, cs.size())) {
      for (usize j: rep(i + 1, cs.size())) {
        lines ls = tangent_cc(cs[i], cs[j]);

        for (const line &l: ls) {

          int cnt = 0;
          for (usize ci: rep(0, n)) {
            const circle &c = originals[ci];
            real_number d = distance_lp(l, c.p);

            if (sign(d - c.r) >= 0 and sign(c.r + ms[ci] - d) >= 0) {
              cnt++;
            }
          }

          chmax(ans, cnt);
          
        }
      }
    }

    cout << ans << endl;
  }

  void main_() {
    int n;

    while (std::cin >> n, n) {
      solve(n);
    }
  }

} // namespace luz

int main() {
  luz::set_fast_ios();
  luz::io_set(15);

  luz::main_();
}

