#include "bits/stdc++.h"
#include <numeric>
//#include <atcoder/all>
using namespace std;
//using namespace atcoder;

// clang-format off
/* accelration */
// 高速バイナリ生成
#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
// cin cout の結びつけ解除, stdioと同期しない(入出力非同期化)
// cとstdの入出力を混在させるとバグるので注意
struct Fast { Fast() { std::cin.tie(0); ios::sync_with_stdio(false); } } fast;

/* alias */
using ull = unsigned long long;
using ll = long long;
using vi = vector<int>;
using vl = vector<long>;
using vll = vector<long long>;
using vvi = vector<vi>;
using vvl = vector<vl>;
using vvll = vector<vll>;
using vs = vector<string>;
using pii = pair<int, int>;
using vb = vector<bool>;
using vvb = vector<vb>;

/* define short */
#define pb push_back
// #define mp make_pair
#define all(obj) (obj).begin(), (obj).end()
#define YESNO(bool) if(bool){cout<<"YES"<<endl;}else{cout<<"NO"<<endl;}
#define yesno(bool) if(bool){cout<<"yes"<<endl;}else{cout<<"no"<<endl;}
#define YesNo(bool) if(bool){cout<<"Yes"<<endl;}else{cout<<"No"<<endl;}

/* REP macro */
#define reps(i, a, n) for (ll i = (a); i < (ll)(n); ++i)
#define rep(i, n) reps(i, 0, n)
#define rrep(i, n) reps(i, 1, n + 1)
#define repd(i,n) for(ll i=n-1;i>=0;i--)
#define rrepd(i,n) for(ll i=n;i>=1;i--)
#define repsd(i, n, a) for(ll i=n;i>=a;i--)
#define fore(i,a) for(auto &i:a)

/* debug */
// 標準エラー出力を含む提出はrejectされる場合もあるので注意
#define debug(x) cerr << "\033[33m(line:" << __LINE__ << ") " << #x << ": " << x << "\033[m" << endl;

/* func */
inline int in_int() { int x; cin >> x; return x; }
inline ll in_ll() { ll x; cin >> x; return x; }
inline string in_str() { string x; cin >> x; return x; }
// search_length: 走査するベクトル長の上限(先頭から何要素目までを検索対象とするか、1始まりで)
template <typename T> inline bool vector_finder(std::vector<T> vec, T element, unsigned int search_length) {
    auto itr = std::find(vec.begin(), vec.end(), element);
    size_t index = std::distance(vec.begin(), itr);
    if (index == vec.size() || index >= search_length) { return false; }
    else { return true; }
}
template <typename T> inline void print(const vector<T>& v, string s = " ")
{
    rep(i, v.size()) cout << v[i] << (i != (ll)v.size() - 1 ? s : "\n");
}
template <typename T, typename S> inline void print(const pair<T, S>& p)
{
    cout << p.first << " " << p.second << endl;
}
template <typename T> inline void print(const T& x) { cout << x << "\n"; }
inline void printd(double x) { cout << fixed << setprecision(8) << x << endl; }
template <typename T, typename S> inline void print(const vector<pair<T, S>>& v)
{
    for (auto&& p : v) print(p);
}
// 第一引数と第二引数を比較し、第一引数(a)をより大きい/小さい値に上書き
template <typename T> inline bool chmin(T& a, const T& b) { bool compare = a > b; if (a > b) a = b; return compare; }
template <typename T> inline bool chmax(T& a, const T& b) { bool compare = a < b; if (a < b) a = b; return compare; }
// gcd lcm
// C++17からは標準実装
// template <typename T> T gcd(T a, T b) {if (b == 0)return a; else return gcd(b, a % b);}
// template <typename T> inline T lcm(T a, T b) {return (a * b) / gcd(a, b);}
// clang-format on

// グラフテンプレート
template< typename T >
struct edge {
    int src, to;
    T cost;

    edge(int to, T cost) : src(-1), to(to), cost(cost) {}

    edge(int src, int to, T cost) : src(src), to(to), cost(cost) {}

    edge& operator=(const int& x) {
        to = x;
        return *this;
    }

    operator int() const { return to; }
};

template< typename T >
using Edges = vector< edge< T > >;
template< typename T >
using WeightedGraph = vector< Edges< T > >;
using UnWeightedGraph = vector< vector< int > >;
template< typename T >
using Matrix = vector< vector< T > >;

// 定数
const ll INF = 1ll << 60, invINF = -(1ll << 60);
const vi dd({ -1,0,1,0,-1 });
const ll MOD = 1000000007;
const double PI = acos(-1);

// 最大公約数
ll gcd(ll a, ll b) {
    if (!b) return a;
    if (a % b == 0) return b;
    else return gcd(b, a % b);
}

// 最小公倍数
ll lcm(ll a, ll b) {
    return a * b / gcd(a, b);
}


//using mint = modint1000000007;


// 座標圧縮 (破壊的)
void comp(vector<int>& a) {
    set<int>s(a.begin(), a.end());
    map<int, int>d;
    int cnt = 0;
    for (auto x : s)d[x] = cnt++;
    for (auto& x : a)x = d[x];
}

int main() {
    ll n;
    cin >> n;
    vll x1(n), y1(n), x2(n), y2(n), X(2*n), Y(2*n);
    rep(i, n) {
        cin >> x1[i] >> y1[i] >> x2[i] >> y2[i];
        X[i] = x1[i];
        X[n + i] = x2[i];
        Y[i] = y1[i];
        Y[n + i] = y2[i];
    }

    sort(X.begin(), X.end());
    sort(Y.begin(), Y.end());
    X.erase(unique(X.begin(), X.end()), X.end());
    Y.erase(unique(Y.begin(), Y.end()), Y.end());

    ll m = 2 * n;
    vvll field(m + 1, vll(m + 1));
    rep(i, n) {
        x1[i] = lower_bound(X.begin(), X.end(), x1[i]) - X.begin();
        x2[i] = lower_bound(X.begin(), X.end(), x2[i]) - X.begin();
        y1[i] = lower_bound(Y.begin(), Y.end(), y1[i]) - Y.begin();
        y2[i] = lower_bound(Y.begin(), Y.end(), y2[i]) - Y.begin();
        field[x1[i]][y1[i]]++;
        field[x2[i]][y1[i]]--;
        field[x1[i]][y2[i]]--;
        field[x2[i]][y2[i]]++;
    }

    ll ans = 0;
    rep(i, m) rep(j, m) field[i + 1][j] += field[i][j];
    rep(i, m) rep(j, m) field[i][j + 1] += field[i][j];
    rep(i, X.size()) rep(j, Y.size()) {
        if (field[i][j]) {
            ans += (X[i + 1] - X[i]) * (Y[j + 1] - Y[j]);
        }
    }
    print(ans);



}


