#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>
#include <iomanip>
#include <bitset>
#include <functional>
#include <queue>
#include <stack>
#include <utility>
#include <numeric>
#include <set>
#include <map>

using namespace std;

using ll = long long;
using ull = unsigned long long;
using ld = long double;
using uint = unsigned;
using vi = vector<int>;
using vl = vector<long>;
using vll = vector<long long>;
using vvi = vector<vi>;
using vvl = vector<vl>;
using vvll = vector<vll>;
using vc = vector<char>;
using vs = vector<string>;
using vb = vector<bool>;
using pii = pair<int, int>;
using pcc = pair<char, char>;
using pll = pair<ll, ll>;
using pdd = pair<ld, ld>;
using vpii = vector<pii>;
using vpll = vector<pll>;

#define rep(i, n) for (ll i = 0; i < ll(n); i++)
#define repback(i, n) for (ll i = n-1; i >= 0; i--)
#define REP(i, a, b) for (ll i = a; i < ll(b); i++)
#define REPBACK(i, a, b) for (ll i = a-1; i >= ll(b); i--)
#define all(x) (x).begin(), (x).end()
#define debug(x) cout << "debug:" << x << endl

static const double pi = acos(-1.0);
const long long INFL = pow(10,18);
const int INF = pow(10,9);
const int mod1 = 1000000007;
const int mod2 = 998244353;
const vi dx = {1,0,-1,0};
const vi dy = {0,1,0,-1};
const vi dx2 = {0, 1, 0, -1, 1, -1, 1, -1};
const vi dy2 = {1, 0, -1, 0, 1, 1, -1, -1};

int main(){
    int n; cin >> n;
    vvi graph(n+1,vi(0));
    rep(i,n){
        int u,k; cin >> u >> k;
        rep(j,k){
            int v; cin >> v;
            graph[u].push_back(v);
        }
    }

    vi dist(n+1,-1);
    dist[1] = 0;
    queue<int> q;
    q.push(1);

    while(!q.empty()){
        int now = q.front(); q.pop();
        for(auto x:graph[now]){
            if(dist[x] == -1){
                dist[x] = dist[now] + 1;
                q.push(x);
            }
        } 
    }

    for(int i=1; i<n+1; i++) cout << i << " " << dist[i] << endl;

}
