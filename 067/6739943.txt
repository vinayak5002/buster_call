#include<iostream>
#include<cstring>
#include<cstdlib>
using namespace std;

struct Node {
    int key;
    Node *prev, *next;
};

struct Node *nil;

void init() {
    nil = (Node *)malloc(sizeof(Node));
    nil->next = nil;
    nil->prev = nil;
}

void insert(int key) {
    Node *x = (Node *)malloc(sizeof(Node));
    x->next = nil->next;
    nil->next->prev = x;
    nil->next = x;
    x->prev = nil;
}

Node* listSearch(int key) {
    Node *cur = nil->next;
    while(cur != nil && cur->key != key) {
        cur = cur->next;
    }
    return cur;
}

void deleteNode(Node *t) {
    if(t == nil) {
        return;
    }
    t->prev->next = t->next;
    t->next->prev = t->prev;
    free(t);
}

void deleteFirst() {
    deleteNode(nil->next);
}

void deleteLast() {
    deleteNode(nil->prev);
}

void deleteKey(int key) {
    deleteNode(listSearch(key));
}

void printList() {
    Node *cur = nil->next;
    int isf = 1;
    while(1) {
        if(cur == nil) {
            break;
        }
        if(isf == 0) {
            print(" ");
        }
        printf("%d", cur->key);
        cur = cur->next;
        isf = 0;
    }
    printf("\n");
}

int main() {
    int n,key;
    string command;
    init();

    cin >> n;
    for(int i=0; i<n; i++) {

        cin >> command;
        if(command == "insert") {
            cin >> key;
            insert(key);
        }
        else if(command == "delete") {
            cin >> key;
            deleteKey(key);
        }
        else if(command == "deleteFirst") {
            deleteFirst();
        }
        else if(command =="deleteLast") {
            deleteLast();
        }
    }

    printList();
    return 0;
}
