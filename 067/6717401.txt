# from cmath import inf
# import math
# import sys
# import re
# import copy
# from re import A

# from itertools import combinations
# from itertools import permutations

# import bisect

# import numpy as np


def input_strmat(lines=1):
    dat = []
    for l in range(lines):
        dat += [list(input().split())]
    return dat


def input_str(lines=1):
    if lines == 1:
        return list(input().split())
    dat =[list(input().split())[0]  for l in range(lines)]
    return dat


def input_intmat(lines=1):
    dat = [    list(  map(int, input().split())  )   for l in range(lines) ]
    return  dat


def input_floatmat(lines=1):
    dat = [  list(  map(float, input().split())  )   for l in range(lines) ]
    return  dat


def input_int(lines=1):
    if lines == 1:
        return list(map(int, input().split()))
    dat = [   list(map(int, input().split()))[0]  for l in range(lines)  ]
    return dat

def binsearch(search_value: int,sorted_list) -> bool:
    left_index: int = 0
    right_index: int = len(sorted_list) - 1
    while left_index <= right_index:
        middle_index: int = (left_index + right_index) // 2
        middle_value: int = sorted_list[middle_index]

        if search_value < middle_value:
            right_index = middle_index - 1
            continue
        if search_value > middle_value:
            left_index = middle_index + 1
            continue
        return True
    return False


[n] = input_int()
A = input_int()
[q] = input_int()
M = input_int()

sums= [ sum(  [  A[i] for i in range(n)  if sel>>i&1 ==1]  )   for sel in range(2**n)  ]
sums= sorted(sums)

for m in M:
    if binsearch(m,sums):
        print("yes")
    else:
        print("no")
