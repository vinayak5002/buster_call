
import sys
sys.setrecursionlimit(100000)

class disjointSet():
    def __init__(self, size):
        self.fatherNode = {}
        self.sizeOfFather = {}
        for i in range(size):
            self.fatherNode[str(i)] = i
            self.sizeOfFather[str(i)] = 1;

    def find_father(self, node):
        father = self.fatherNode[node]

        # 若目标是自己的父,说明自己是一个组
        if node != father:
            father = self.find_father(node)
        self.fatherNode[node] = father
        return father

    def same(self, node_a, node_b):
        # 查看两个节点是不是在一个集合里面
        return self.find_father(node_a) == self.find_father(node_b)

    """合并"""

    def union(self, node_a, node_b):
        if node_a or node_b is None:
            return
        if self.same(node_a, node_b):
            return

        a_head = self.find_head(node_a)
        b_head = self.find_head(node_b)

        size_a = self.sizeOfFather(node_a)
        size_b = self.sizeOfFather(node_b)
        if size_a >= size_b:
            self.fatherNode[b_head] = self.find_father(a_head)
            self.sizeOfFather[a_head] = size_a + size_b
        else:
            self.fatherNode[a_head] = self.find_father(b_head)
            self.sizeOfFather[b_head] = size_a + size_b


size, amountOfOperation = input().split(" ")

disjointSet_ = disjointSet(int(size))

for i in range(int(amountOfOperation)):
    operation,node_a,node_b = input().split(" ")
    disjointSet_.union(node_a, node_b) if operation == 0 else print(disjointSet_.same(node_a, node_b))

