using System;
using System.Collections.Generic;
using System.Linq;

class B
{
	static void Main()
	{
		var r = new List<string>();
		var h = Console.ReadLine().Split().Select(int.Parse).ToArray();
		int n = h[0], q = h[1];
		var ps = new int[h[0]].Select(_ => Console.ReadLine().Split()).Select(x => Tuple.Create(x[0], int.Parse(x[1])));

		var queue = new LQueue<Tuple<string, int>>();
		foreach (var p in ps) queue.Push(p);

		var t = 0;
		while (queue.Count > 0)
		{
			var v = queue.Pop();
			if (v.Item2 <= q)
			{
				r.Add($"{v.Item1} {t += v.Item2}");
			}
			else
			{
				t += q;
				queue.Push(Tuple.Create(v.Item1, v.Item2 - q));
			}
		}
		Console.WriteLine(string.Join("\n", r));
	}
}

// singly linked list
[System.Diagnostics.DebuggerDisplay(@"Count = {Count}")]
public class LQueue<T> : IEnumerable<T>
{
	[System.Diagnostics.DebuggerDisplay(@"\{{Item}\}")]
	class Node
	{
		public T Item;
		public Node Next;
	}

	Node First;
	Node Last;
	public int Count { get; private set; }

	public T Top => First != null ? First.Item : throw new InvalidOperationException("There are no items.");

	public T Pop()
	{
		var item = Top;
		if ((First = First.Next) == null) Last = null;
		--Count;
		return item;
	}

	public void Push(T item)
	{
		var node = new Node { Item = item };
		Last = (Last == null) ? (First = node) : (Last.Next = node);
		++Count;
	}

	System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
	public IEnumerator<T> GetEnumerator() { for (var n = First; n != null; n = n.Next) yield return n.Item; }
}

