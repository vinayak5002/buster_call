#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, s, t) for (int i = (int)(s); i < (int)(t); ++i)
#define revrep(i, t, s) for (int i = (int)(t)-1; i >= (int)(s); --i)
#define all(x) begin(x), end(x)
template <typename T> bool chmax(T& a, const T& b) { return a < b ? (a = b, 1) : 0; }
template <typename T> bool chmin(T& a, const T& b) { return a > b ? (a = b, 1) : 0; }

template <typename T, typename U>
ostream& operator<<(ostream& os, const pair<T, U>& p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
}
template <typename T>
ostream& operator<<(ostream& os, const vector<T>& v) {
    for (int i = 0; i < (int) v.size(); ++i) os << v[i] << " ";
    return os;
}

std::vector<int> prefix_function(const std::string& s) {
    const int n = s.size();
    std::vector<int> ret(n);
    int len = 0;
    for (int i = 1; i < n; ++i) {
        if (s[i] == s[len]) {
            ++len;
            ret[i] = len;
        } else {
            if (len != 0) {
                len = ret[len - 1];
                --i;
            } else {
                ret[i] = 0;
            }
        }
    }
    return ret;
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);

    while (true) {
        string s;
        cin >> s;
        if (s == "#") break;
        string q;
        cin >> q;
        const int n = q.size();

        auto pf = prefix_function(q);
        vector<vector<pair<int, int>>> transition(n, vector<pair<int, int>>(26));
        rep(i,0,n) {
            rep(c,0,26) {
                if (c == q[i]-'A') {
                    if (i == n-1) {
                        transition[i][c] = {pf[i], 1};
                    } else {
                        transition[i][c] = {i+1, 0};
                    }
                } else if (i > 0) {
                    transition[i][c] = transition[pf[i-1]][c];
                }
            }
            // cout << transition[i] << endl;
        }

        auto merge = [&](auto& a, auto& b) {
            vector<pair<int, ll>> c(n);
            rep(i,0,n) {
                auto [j1, m1] = a[i];
                auto [j2, m2] = b[j1];
                c[i] = {j2, m1+m2};
            }
            return c;
        };

        int k = 0;
        auto dfs = [&](auto& dfs) -> vector<pair<int, ll>> {
            vector<pair<int, ll>> nxt(n);
            rep(i,0,n) nxt[i] = {i, 0};
            while (k < s.size() && s[k] != ')') {
                ll m = 1;
                if ('0' <= s[k] && s[k] <= '9') {
                    string num = "";
                    while (k < s.size() && '0' <= s[k] && s[k] <= '9') num += s[k++];
                    m = stoll(num);
                }
                vector<pair<int, ll>> res(n), doubling(n);
                rep(i,0,n) res[i] = {i, 0};
                if (s[k] == '(') {
                    ++k;
                    doubling = dfs(dfs);
                    assert(s[k] == ')');
                    ++k;
                } else {
                    char c = s[k++] - 'A';
                    rep(i,0,n) doubling[i] = transition[i][c];
                }
                while (m) {
                    if (m & 1) {
                        res = merge(res, doubling);
                    }
                    doubling = merge(doubling, doubling);
                    m >>= 1;
                }
                nxt = merge(nxt, res);
            }
            return nxt;
        };

        auto ans = dfs(dfs);
        cout << ans[0].second << endl;
    }
}
