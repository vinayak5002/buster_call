//  3_C:双方向連結リスト


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct node{
    unsigned int key;
    struct node *next;
    struct node *prev;
};

typedef struct node * NodePointer;

NodePointer nil;

NodePointer listSearch(int key){
    
    //* your code
    
    NodePointer p = nil->next;
    
    while (p != nil) {
        
        if (key == p->key)
            return p;
        
        p = p->next;
    }
    
    return nil;
    
    //*/
    
}

void init(void){
    nil = malloc(sizeof(struct node));
    nil->next = nil;
    nil->prev = nil;
}

void printList(void){   //リストを表示
    NodePointer cur = nil->next;
    int isf = 1;
    while(1){   //無限ループ
        if ( cur == nil ) break;
        if ( isf == 0)  printf(" ");
        printf("%d", cur->key);
        cur = cur->next;
        isf = 0;
    }
    printf("\n");
}

void deleteNode(NodePointer t){
    
  //* your code
    
    t->prev->next = t->next;
    t->next->prev = t->prev;
    
    //*/
    
}

void deleteFirst(void){
    NodePointer t = nil->next;
    if ( t == nil ) return;
    deleteNode(t);
}

void deleteLast(void){
    
  //* your code
    
    NodePointer t = nil->prev;
    if ( t == nil ) return;
    deleteNode(t);
    
   //*/
    
}

void delete(int key){
    
  //* your code
    
    NodePointer t = listSearch(key);
    if ( t == nil ) return;
    deleteNode(t);
    
    //*/
    
}


void insert(int key){
    NodePointer x;
    x = malloc(sizeof(struct node));
    
    x->key = key;
    
    //* your code
    
    x->next = nil->next;
    x->next->prev = x;
    x->prev = nil;
    nil->next = x;
    
    //*/
}

int main(){
    int key, n, i;
    int size = 0;
    char com[20];
    int np = 0, nd = 0;
    
    scanf("%d", &n);
    init();
    
    for ( i = 0; i < n; i++ ){
      
        scanf("%s%d", com, &key);
      
        if ( com[0] == 'i' ) {
            insert(key);
            np++; size++;
        }else if ( com[0] == 'd' ) {
            if (strlen(com) > 6){
                if ( com[6] == 'F' )
                    deleteFirst();
                else if ( com[6] == 'L' )
                    deleteLast();
            } else {
                delete(key);
                nd++;
            }
            size--;
        }
  }
    
  printList();
    
  return 0;
}

