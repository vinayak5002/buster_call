#!/usr/bin/env python3

import sys

DEBUG = False


def read(t):
    return t(sys.stdin.readline().rstrip())


def read_list(t, sep=" "):
    return [t(s) for s in sys.stdin.readline().rstrip().split(sep)]


def dprint(*args, **kwargs):
    if DEBUG:
        print(*args, **kwargs)
    return


INF = 300_000_000
MAX_VALID_COST = 20_000_000


class Vertex:
    def __init__(self, id):
        self.id = id
        self.edges = []
        self.total_cost = INF
        self.prev_edge_in_path = None


class Edge:
    def __init__(self, src, dest, cost):
        self.src = src
        self.dest = dest
        self.cost = cost


def is_reachable(v):
    return v.total_cost <= MAX_VALID_COST


def main():
    max_v, max_e, r = read_list(int)
    vertices = [Vertex(i) for i in range(max_v)]
    edges = []
    for _ in range(max_e):
        s, t, d = read_list(int)
        edge = Edge(vertices[s], vertices[t], d)
        vertices[s].edges.append(edge)
        edges.append(edge)
    vertices[r].total_cost = 0

    for _ in vertices:
        for e in edges:
            src = e.src
            dest = e.dest
            cost = src.total_cost + e.cost
            if cost < dest.total_cost:
                dest.total_cost = cost
                dest.prev_edge_in_path = src

    for e in edges:
        if is_reachable(e.src) and e.src.total_cost + e.cost < e.dest.total_cost:
            print("NEGATIVE CYCLE")
            return

    for v in vertices:
        if MAX_VALID_COST <= v.total_cost:
            print("INF")
        else:
            print(v.total_cost)


if __name__ == "__main__":
    main()

