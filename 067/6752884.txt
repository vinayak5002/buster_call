#include<bits/stdc++.h>
using namespace std;

struct UnionFind{
  vector<int> par,siz;
  UnionFind(int n):par(n,-1),siz(n,1){}
  int root(int x){
    if(par[x] == -1) return x;
    else return par[x] = root(par[x]);
  }
  bool issame(int x,int y){
    if(root(x) == root(y)) return true;
    else return false;
  }
  bool unite(int x,int y){
    x = root(x);
    y = root(y);
    if(x == y) return false;
    if(siz[x] < siz[y]) swap(x,y);
    par[y] = x;
    siz[x] += siz[y];
    return true;
  }
  int size(int x){
    return siz[root(x)];
  }
};

int main(){
  for(;;){
    int N,M;
    cin >> N >> M;
    if(N == 0) break;
    UnionFind uf(N);
    vector<pair<int,pair<int,int>>> E(M);
    for(int i=0;i<M;i++){
      int a,b,d;
      char c1,c2;
      cin >> a >> c1 >> b >> c2 >> d;
      E[i] = make_pair(d,make_pair(a,b));
    }
    sort(E.begin(),E.end());
    int ans = -N+1;
    for(int i=0;i<M;i++){
      int d = E[i].first;
      int a = E[i].second.first;
      int b = E[i].second.second;
      if(!uf.issame(a,b)){
        ans += d/100;
        uf.unite(a,b);
      }
    }
    cout << ans << endl;
  }
}
