#include <iostream>
using namespace std;

int N, M, C, S, G;
int P[25], Q[25][55], R[25][55];
int DIST[25][105][105]; // 会社ごとに最短距離（後に運賃に変換）を隣接行列で管理.
int FARE[105][105]; // 最安の運賃を管理.
int f[25][10010]; // 会社ごとの距離0~10000における運賃を管理.
const int inf = 100000000;

void Warshall(int K[105][105]) {
    for (int k = 1; k < N + 1; k++) {
        for (int i = 1; i < N + 1; i++) {
            for (int j = 1; j < N + 1; j++) {
                if (K[i][j] > K[i][k] + K[k][j]) K[i][j] = K[i][k] + K[k][j];
            }
        }
    }
}

// i会社の距離dにおける運賃を返す.
int calc_fare(int i, int d) {
    if (d <= 10000) return f[i][d];
    else return f[i][10000] + (d - 10000) * R[i][P[i]-1];
}

int main() {
    while (1) {
        cin >> N >> M >> C >> S >> G;
        if (N == 0 && M == 0 && C == 0 && S == 0 && G == 0) break;

        // 初期化
        for (int i = 1; i < C + 1; i++) {
            for (int j = 1; j < N + 1; j++) {
                for (int k = 1; k < N + 1; k++) {
                    DIST[i][j][k] = inf;
                    if (j == k) DIST[i][j][k] = 0;
                }
            }
        }

        int X, Y, D, CMP;
        for (int i = 0; i < M ; i++) {
            cin >> X >> Y >> D >> CMP;
            DIST[CMP][X][Y] = min(DIST[CMP][X][Y], D);
            DIST[CMP][Y][X] = min(DIST[CMP][Y][X], D);
        }
        for (int i = 1; i < C + 1; i++) cin >> P[i];
        for (int i = 1; i < C + 1; i++) {
            for (int j = 0; j < P[i] - 1; j++) cin >> Q[i][j];
            Q[i][P[i] - 1] = inf;
            for (int j = 0; j < P[i]; j++) cin >> R[i][j];

            int z = 0, sum = 0;
            for (int j = 0; j <10001; j++) {
                f[i][j] = sum;
                if (j >= Q[i][z]) z++;
                sum += R[i][z];
            }
        }

        for (int i = 1; i < C + 1; i++) {
            Warshall(DIST[i]);
            for (int j = 1; j < N + 1; j++) {
                for (int k = 1; k < N + 1; k++) {
                    DIST[i][j][k] = calc_fare(i, DIST[i][j][k]); // 距離を料金に変換
                }
            }
        }

        // 会社を合わせて考える.
        // 初期化
        for (int i = 1; i < N + 1; i++) {
            for (int j = 1; j < N + 1; j++) {
                FARE[i][j] = inf;
            }
        }
        for (int i = 1; i < C + 1; i++) {
            for (int j = 1; j < N + 1; j++) {
                for (int k = 1; k < N + 1; k++) {
                    FARE[j][k] = min(FARE[j][k], DIST[i][j][k]);
                }
            }
        }
        Warshall(FARE);

        if (FARE[S][G] == inf) cout << "-1" << endl;
        else cout << FARE[S][G] << endl;
    }
}
