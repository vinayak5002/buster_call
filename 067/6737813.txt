#include <stdlib.h>
#include <stdio.h>
#include <string.h>

typedef struct Node{
    int key;
    struct Node *prev, *next;
}Node;

Node *nil;

Node* ListSearch(int key){
    Node *cur = nil->next;
    while (cur != nil && cur->key != key){
        cur = cur->next;
    }
    return cur;
}

void init() {
    nil = (Node *)malloc(sizeof(Node)); 
    nil->next = nil;
    nil->prev = nil;
}

void printlist(){
    Node *cur = nil->next;
    int list = 0;
    while(1){
        if(cur == nil)break;
        if(list++ > 0)printf(" ");
        printf("%d", cur->key);
        cur = cur->next;
    }
    printf("/n");
}

void deleteNode(Node *t) {
    if(t==nil)return;
    t->prev->next = t->next; 
    t->next->prev = t->prev; 
    free(t);
}

void insert(int key) {
    Node *x = (Node *)malloc(sizeof(Node)); 
    x->key = key;
    x->next = nil->next;
    nil->next->prev = x;
    nil->next = x;
    x->prev = nil;
}

void deleteFirst() {
    deleteNode(nil->next);
}

void deleteLast() {
    deleteNode(nil->prev);
}

void deleteKey(int key) {
    deleteNode(ListSearch(key));
}

int main(){
    int key, n, i;
    int size = 0;
    char com[0];
    int np = 0,nd = 0;
    scanf("%d", &n);
    init();
    for ( i = 0; i < n; i++){
        scanf("%s%d", com , &key);
        if(com[0] == 'i'){
            insert(key);
            np++;
            size++;
        }
        else if(com[0] == 'd'){
            if(strlen(com) > 6){
                if(com[6] == 'F'){
                    deleteFirst();
                }
                else if(com[6] == 'L'){
                    deleteLast();
                }
            }
            else{
                deleteKey(key);
                nd++;
            }
            size--;
        }
    }
    printlist();

    return 0;
}

