using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using AtCoder;
using static System.Math;

namespace OtherCoder
{
    internal static class TheProgram
    {
        private static void Main(string[] args)
        {
            checked
            {
                int n = Si();
                int q = Si();

                SqrtDecomposition<long> sd = new SqrtDecomposition<long>(Enumerable.Repeat(0L, n).ToArray(), false,
                    ((l, l1) => l + l1), ((l, l1, l2) => l - l1 + l2));
                
                Loop(q, () =>
                {
                    int num = Si();
                    int x = Si();
                    int y = Si();
                    if (num == 0)
                    {
                        sd.Update(x-1, y);
                    }
                    else
                    {
                        Answerer.Build(sd.QueryValue(x-1,y-1).Sum());
                    }
                });
                
                Answerer.OutBuild();
            }
        }

        #region Utility

        private const int InfinityInt = Common.InfinityInt;
        private const long Infinity = Common.Infinity;
        private static readonly StreamScanner Scanner = new StreamScanner(Console.OpenStandardInput());
        private static int Si() => Scanner.Integer();
        private static long Sl() => Scanner.Long();
        private static string Ss() => Scanner.Scan();
        private static int[] Sai(int count) => Scanner.ArrayInt(count);
        private static long[] Sal(int count) => Scanner.ArrayLong(count);
        private static int[][] Sqi(int yCount, int xCount) => Scanner.SquareInt(yCount, xCount);
        private static long[][] Sql(int yCount, int xCount) => Scanner.SquareLong(yCount, xCount);
        private static string[] Sss(int count) => Enumerable.Repeat(0, count).Select(_ => Ss()).ToArray();
        private static T[] Make<T>(int n, Func<T> creator) => Enumerable.Repeat(0, n).Select(_ => creator()).ToArray();

        private static void Loop(long n, Action action)
        {
            for (int i = 0; i < n; i++)
            {
                action();
            }
        }

        #endregion
    }
    
    public static class Common
    {
        public const int InfinityInt = 1 << 29;
        public const long Infinity = (long) 1 << 60;
    }
    
    public class StreamScanner
    {
        private const int Size = 1024 * 16;

        public StreamScanner(Stream stream)
        {
            str = stream;
        }

        private readonly Stream str;
        private readonly byte[] buf = new byte[Size];
        private int len, ptr;
        public bool IsEof { get; private set; }

        private byte Read()
        {
            if (IsEof) throw new EndOfStreamException();
            if (ptr >= len)
            {
                ptr = 0;
                if ((len = str.Read(buf, 0, Size)) <= 0)
                {
                    IsEof = true;
                    return 0;
                }
            }

            return buf[ptr++];
        }

        public char Char()
        {
            byte b = 0;
            do b = Read();
            while (b < 33 || 126 < b);
            return (char) b;
        }

        public string Scan()
        {
            var sb = new StringBuilder();
            for (char b = Char(); b >= 33 && b <= 126; b = (char) Read())
                sb.Append(b);
            return sb.ToString();
        }

        public string ScanIncludeSpace()
        {
            var sb = new StringBuilder();
            for (char b = Char(); b >= 32 && b <= 126; b = (char) Read())
                sb.Append(b);
            return sb.ToString();
        }

        public long Long()
        {
            long ret = 0;
            byte b = 0;
            bool ng = false;
            do b = Read();
            while (b != '-' && (b < '0' || '9' < b));
            if (b == '-')
            {
                ng = true;
                b = Read();
            }

            for (; true; b = Read())
            {
                if (b < '0' || '9' < b)
                    return ng ? -ret : ret;
                else ret = ret * 10 + b - '0';
            }
        }

        public int Integer()
        {
            return (int) Long();
        }

        public double Double()
        {
            return double.Parse(Scan(), CultureInfo.InvariantCulture);
        }

        /// <summary> 数値読み込み </summary>
        public long[] ArrayLong(int count = 0)
        {
            long[] scan = new long[count];
            for (int i = 0; i < count; i++)
            {
                scan[i] = Long();
            }

            return scan;
        }

        /// <summary> 数値読み込み </summary>
        public int[] ArrayInt(int count = 0)
        {
            int[] scan = new int[count];
            for (int i = 0; i < count; i++)
            {
                scan[i] = Integer();
            }

            return scan;
        }

        public long[][] SquareLong(int row, int col)
        {
            long[][] scan = new long[row][];
            for (int i = 0; i < row; i++)
            {
                scan[i] = ArrayLong(col);
            }

            return scan;
        }

        public int[][] SquareInt(int row, int col)
        {
            int[][] scan = new int[row][];
            for (int i = 0; i < row; i++)
            {
                scan[i] = ArrayInt(col);
            }

            return scan;
        }
    }
    
    public class Answerer
    {

        public static StringBuilder sb;

        public static void Build<T>(T item) => Build(item, "\n");
        public static void BuildByLine<T>(T item) => Build(item, "\n");
        public static void BuildBySpace<T>(T item) => Build(item, " ");
        public static void Build<T>(T item, string splitter)
        {
            if (sb != null)
            {
                sb.Append(splitter);
            }
            else
            {
                sb = new StringBuilder();
            }
            sb.Append(item);
        }

        public static void OutBuild()
        {
            Console.WriteLine(sb);
        }
        
        /// <summary> Yes出力 </summary>
        public static void Yes() => Console.WriteLine("Yes");
        
        /// <summary> No出力 </summary>
        public static void No() => Console.WriteLine("No");
        
        /// <summary> Yes/No型出力 </summary>
        public static void YesNo(bool condition)
        {
            Console.WriteLine(condition ? "Yes" : "No");
        }

        /// <summary> 一括出力 </summary>
        public static void OutAllLine<T>(IEnumerable<T> items)
        {
            var sb = new StringBuilder();
            foreach (T result in items)
            {
                sb.Append(result + "\n");
            }

            if (sb.Length == 0)
            {
                Console.WriteLine();
                return;
            }

            sb = sb.Remove(sb.Length - 1, 1);
            Console.WriteLine(sb);
        }

        public static void OutEachSpace<T>(IEnumerable<T> items)
        {
            var sb = new StringBuilder();
            foreach (T result in items)
            {
                sb.Append(result + " ");
            }

            if (sb.Length == 0)
            {
                Console.WriteLine();
                return;
            }
            
            sb = sb.Remove(sb.Length - 1, 1);
            Console.WriteLine(sb);
        }
    }

    class SqrtDecomposition<T>
    {
        private readonly SqrtBucket[] buckets;
        private readonly int bucketSize;

        public SqrtDecomposition(T[] array, bool isBuildSet, Func<T, T, T> indexOperation, Func<T, T, T, T> allOperation)
        {
            var size = array.Length;
            bucketSize = (int)Sqrt(size);
            var bucketLength = (int)MathPlus.CeilingLong(size, bucketSize);
            buckets = Enumerable.Repeat(0, bucketLength)
                .Select(_ => new SqrtBucket(isBuildSet, indexOperation, allOperation)).ToArray();
            for (int i = 0; i < size; i++)
            {
                buckets[i / bucketSize].Create(array[i]);
            }
        }

        public void Update(int index, T value)
        {
            int bucketIndex = index / bucketSize;
            int innerIndex = index % bucketSize;
            buckets[bucketIndex].Update(value, innerIndex);
        }

        public IEnumerable<T> QueryValue(int l, int r)
        {
            int leftBucket = l / bucketSize;
            int leftIndex = l % bucketSize;
            int rightBucket = r / bucketSize;
            int rightIndex = l % bucketSize;

            if (leftBucket == rightBucket)
            {
                foreach (var value in buckets[leftBucket].GetValues(leftIndex, rightIndex))
                {
                    yield return value;
                }
                yield break;
            }

            foreach (var value in buckets[leftBucket].GetValues(leftIndex, bucketSize))
            {
                yield return value;
            }
            for (int i = leftIndex + 1; i <= rightIndex - 1; i++)
            {
                yield return buckets[i].Value;
            }
            foreach (var value in buckets[rightBucket].GetValues(0, rightIndex))
            {
                yield return value;
            }
        }
        
        public IEnumerable<Set<T>> QuerySet(int l, int r)
        {
            int leftBucket = l / bucketSize;
            int leftIndex = l % bucketSize;
            int rightBucket = r / bucketSize;
            int rightIndex = l % bucketSize;

            var s = new Set<T>(true);
            if (leftBucket == rightBucket)
            {
                foreach (var value in buckets[leftBucket].GetValues(leftIndex, rightIndex))
                {
                    s.Add(value);
                }
                yield return s;
                yield break;
            }

            foreach (var value in buckets[leftBucket].GetValues(leftIndex, bucketSize))
            {
                s.Add(value);
            }
            foreach (var value in buckets[rightBucket].GetValues(0, rightIndex))
            {
                s.Add(value);
            }
            yield return s;
            for (int i = leftIndex + 1; i <= rightIndex - 1; i++)
            {
                yield return buckets[i].BucketSet;
            }
        }

        class SqrtBucket
        {
            private readonly Func<T, T, T> indexOperation;
            private readonly Func<T, T, T, T> allOperation;
            public T Value { get; private set; }
            public Set<T> BucketSet { get; private set; }
            private readonly bool isBuildSet;
            private readonly List<T> bucket = new List<T>();

            public SqrtBucket(bool isBuildSet, Func<T, T, T> indexOperation, Func<T, T, T, T> allOperation)
            {
                this.isBuildSet = isBuildSet;
                this.indexOperation = indexOperation;
                this.allOperation = allOperation;
                if (isBuildSet)
                {
                    BucketSet = new Set<T>(true);
                }
            }

            public void Create(T value)
            {
                bucket.Add(value);
                Value = bucket.Count == 1 ? value : allOperation(Value, default, value);
            }

            public void Update(T value, int index)
            {
                var old = bucket[index];
                bucket[index] = indexOperation(old, value);
                Value = allOperation(Value, old, value);
            }

            public IEnumerable<T> GetValues(int left, int right)
            {
                var max = Math.Min(bucket.Count - 1, right);
                for (int i = left; i <= max; i++)
                {
                    yield return bucket[i];
                }
            }
        }
    }
}
