#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pb(...) emplace_back(__VA_ARGS__)
#define mp(a, b) make_pair(a, b)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define rep(i, n) for (int i = 0; i < (n); i++)
#define rep2(i, n) for (int i = (int)n - 1; i >= 0; i--)
#define REP(i, l, r) for (int i = l; i < (r); i++)
#define REP2(i, l, r) for (int i = (int)r - 1; i >= (l); i--)
#define siz(x) (ll) x.size()
template <class T>
using rque = priority_queue<T, vector<T>, greater<T>>;

template <class T>
bool chmin(T &a, const T &b) {
    if (b < a) {
        a = b;
        return 1;
    }
    return 0;
}

template <class T>
bool chmax(T &a, const T &b) {
    if (b > a) {
        a = b;
        return 1;
    }
    return 0;
}

template <class T>
void print(vector<T> a) {
    if (a.empty())
        cout << '\n';
    else {
        for (int i = 0; i < a.size(); i++)
            cout << a[i] << (i + 1 == a.size() ? '\n' : ' ');
    }
}

// __int128_t gcd(__int128_t a, __int128_t b) {
//     if (a == 0)
//         return b;
//     if (b == 0)
//         return a;
//     __int128_t cnt = a % b;
//     while (cnt != 0) {
//         a = b;
//         b = cnt;
//         cnt = a % b;
//     }
//     return b;
// }

long long extGCD(long long a, long long b, long long &x, long long &y) {
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    long long d = extGCD(b, a % b, y, x);
    y -= a / b * x;
    return d;
}

struct UnionFind {
    vector<ll> data;
    int num;

    UnionFind(int sz) {
        data.assign(sz, -1);
        num = sz;
    }

    bool unite(int x, int y) {
        x = find(x), y = find(y);
        if (x == y)
            return (false);
        if (data[x] > data[y])
            swap(x, y);
        data[x] += data[y];
        data[y] = x;
        num--;
        return (true);
    }

    int find(int k) {
        if (data[k] < 0)
            return (k);
        return (data[k] = find(data[k]));
    }

    ll size(int k) {
        return (-data[find(k)]);
    }

    bool same(int x, int y) {
        return find(x) == find(y);
    }

    int operator[](int k) {
        return find(k);
    }
};

template <int mod>
struct Mod_Int {
    int x;

    Mod_Int() : x(0) {
    }

    Mod_Int(long long y) : x(y >= 0 ? y % mod : (mod - (-y) % mod) % mod) {
    }

    static int get_mod() {
        return mod;
    }

    Mod_Int &operator+=(const Mod_Int &p) {
        if ((x += p.x) >= mod)
            x -= mod;
        return *this;
    }

    Mod_Int &operator-=(const Mod_Int &p) {
        if ((x += mod - p.x) >= mod)
            x -= mod;
        return *this;
    }

    Mod_Int &operator*=(const Mod_Int &p) {
        x = (int)(1LL * x * p.x % mod);
        return *this;
    }

    Mod_Int &operator/=(const Mod_Int &p) {
        *this *= p.inverse();
        return *this;
    }

    Mod_Int &operator++() {
        return *this += Mod_Int(1);
    }

    Mod_Int operator++(int) {
        Mod_Int tmp = *this;
        ++*this;
        return tmp;
    }

    Mod_Int &operator--() {
        return *this -= Mod_Int(1);
    }

    Mod_Int operator--(int) {
        Mod_Int tmp = *this;
        --*this;
        return tmp;
    }

    Mod_Int operator-() const {
        return Mod_Int(-x);
    }

    Mod_Int operator+(const Mod_Int &p) const {
        return Mod_Int(*this) += p;
    }

    Mod_Int operator-(const Mod_Int &p) const {
        return Mod_Int(*this) -= p;
    }

    Mod_Int operator*(const Mod_Int &p) const {
        return Mod_Int(*this) *= p;
    }

    Mod_Int operator/(const Mod_Int &p) const {
        return Mod_Int(*this) /= p;
    }

    bool operator==(const Mod_Int &p) const {
        return x == p.x;
    }

    bool operator!=(const Mod_Int &p) const {
        return x != p.x;
    }

    Mod_Int inverse() const {
        assert(*this != Mod_Int(0));
        return pow(mod - 2);
    }

    Mod_Int pow(long long k) const {
        Mod_Int now = *this, ret = 1;
        for (; k > 0; k >>= 1, now *= now) {
            if (k & 1)
                ret *= now;
        }
        return ret;
    }

    friend ostream &operator<<(ostream &os, const Mod_Int &p) {
        return os << p.x;
    }

    friend istream &operator>>(istream &is, Mod_Int &p) {
        long long a;
        is >> a;
        p = Mod_Int<mod>(a);
        return is;
    }
};

ll mpow2(ll x, ll n, ll mod) {
    ll ans = 1;
    x %= mod;
    while (n != 0) {
        if (n & 1)
            ans = ans * x % mod;
        x = x * x % mod;
        n = n >> 1;
    }
    ans %= mod;
    return ans;
}

ll modinv2(ll a, ll mod) {
    ll b = mod, u = 1, v = 0;
    while (b) {
        ll t = a / b;
        a -= t * b;
        swap(a, b);
        u -= t * v;
        swap(u, v);
    }
    u %= mod;
    if (u < 0)
        u += mod;
    return u;
}

ll devide_int(ll a, ll b) {
    return (a >= 0 ? a / b : (a - b + 1) / b);
}

// constexpr int mod = 1000000007;
constexpr int mod = 998244353;
// constexpr int mod = 31607;
using mint = Mod_Int<mod>;

mint mpow(mint x, ll n) {
    bool rev = n < 0;
    n = abs(n);
    mint ans = 1;
    while (n != 0) {
        if (n & 1)
            ans *= x;
        x *= x;
        n = n >> 1;
    }
    return (rev ? ans.inverse() : ans);
}

// ----- library -------
// S:吸い上げ前, T:吸い上げ後
template <typename Data, typename S, typename T>
struct ReRooting {

    struct Node {
        int to, rev;
    };

    using F1 = function<S(S, T)>;
    using F2 = function<S(S, S)>;
    using F3 = function<T(S, Data)>;

    vector<Data> data;
    vector<vector<Node>> g;
    vector<vector<S>> ldp, rdp;
    vector<int> lptr, rptr;
    const F1 f1;
    const F2 f2;
    const F3 f3;
    const S ident;
    vector<unordered_map<int, int>> id;

    ReRooting(vector<Data> v, const F1 &f1, const F2 &f2, const F3 &f3, const S &ident) : data(v), g(v.size()), ldp(v.size()), rdp(v.size()), lptr(v.size()), rptr(v.size()), id(v.size()), f1(f1), f2(f2), f3(f3), ident(ident) {}

    void add_edge(int u, int v) {
        id[u][v] = g[u].size();
        id[v][u] = g[v].size();
        g[u].emplace_back((Node){v, (int)g[v].size()});
        g[v].emplace_back((Node){u, (int)g[u].size() - 1});
    }

    S dfs(int idx, int par) {
        while (lptr[idx] != par && lptr[idx] < g[idx].size()) {
            auto &e = g[idx][lptr[idx]];
            ldp[idx][lptr[idx] + 1] = f1(ldp[idx][lptr[idx]], f3(dfs(e.to, e.rev), data[e.to]));
            ++lptr[idx];
        }
        while (rptr[idx] != par && rptr[idx] >= 0) {
            auto &e = g[idx][rptr[idx]];
            rdp[idx][rptr[idx]] = f1(rdp[idx][rptr[idx] + 1], f3(dfs(e.to, e.rev), data[e.to]));
            --rptr[idx];
        }
        if (par < 0)
            return rdp[idx][0];
        return f2(ldp[idx][par], rdp[idx][par + 1]);
    }

    vector<T> solve() {
        for (int i = 0; i < g.size(); i++) {
            ldp[i].assign(g[i].size() + 1, ident);
            rdp[i].assign(g[i].size() + 1, ident);
            lptr[i] = 0;
            rptr[i] = (int)g[i].size() - 1;
        }
        vector<T> ret;
        for (int i = 0; i < g.size(); i++) {
            ret.push_back(f3(dfs(i, -1), data[i]));
        }
        return ret;
    }

    vector<S> solve2() {
        for (int i = 0; i < g.size(); i++) {
            ldp[i].assign(g[i].size() + 1, ident);
            rdp[i].assign(g[i].size() + 1, ident);
            lptr[i] = 0;
            rptr[i] = (int)g[i].size() - 1;
        }
        vector<S> ret;
        for (int i = 0; i < g.size(); i++) {
            ret.push_back(dfs(i, -1));
        }
        return ret;
    }

    T query(int idx, int par) {
        return f3(dfs(idx, id[idx][par]), data[idx]);
    }

    S query2(int idx, int par) {
        return dfs(idx, id[idx][par]);
    }
};
// ----- library -------

int main() {
    ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    cout << fixed << setprecision(15);

    while (1) {
        string s;
        cin >> s;
        if (s == "-1")
            break;
        stack<int> l, c;
        int r = -1;
        int n = s.length();
        vector<int> idx(n);
        int ct = 0;
        rep(i, n) {
            if (s[i] == '(') {
                l.push(ct);
                idx[i] = ct++;
            } else if (s[i] == ')') {
                idx[i] = c.top();
                c.pop();
            } else if (s[i] == '+' || s[i] == '-') {
                if (!l.empty()) {
                    idx[i] = l.top();
                    c.push(l.top());
                    l.pop();
                } else {
                    if(r == -1)
                        r = ct, idx[i] = ct++;
                    else
                        idx[i] = r;
                }
            } else
                idx[i] = ct++;
        }
        // print(idx);
        using Data = pair<bool, int>;
        using S = vector<pair<int, int>>;
        using T = pair<int, int>;
        S ident = vector<pair<int, int>>();
        auto f1 = [](S s, T t) {
            s.pb(t);
            return s;
        };
        auto f2 = [](S s1, S s2) {
            s1.insert(s1.end(), all(s2));
            return s1;
        };
        auto f3 = [](S s, Data d) {
            vector<pair<int, int>> dp(3, {0, 0}), ndp(3);
            dp[1] = {1e9, -1e9};
            for(auto &e : s) {
                rep(i, 2) ndp[i] = {1e9, -1e9};
                chmin(ndp[0].first, dp[0].first - e.second);
                chmax(ndp[0].second, dp[0].second - e.first);
                chmin(ndp[1].first, dp[1].first - e.second);
                chmax(ndp[1].second, dp[1].second - e.first);
                chmin(ndp[1].first, dp[0].first + e.first);
                chmax(ndp[1].second, dp[0].second + e.second);
                ndp[2].first = dp[2].first + e.first;
                ndp[2].second = dp[2].second + e.second;
                swap(dp, ndp);
            }
            return mp(dp[d.first ? 1 : 2].first + d.second, dp[d.first ? 1 : 2].second + d.second);
        };
        vector<Data> x(ct);
        rep(i, n) if(s[i] != '(' && s[i] != ')') x[idx[i]].first = (s[i] == '-'), x[idx[i]].second = (s[i] == '+' || s[i] == '-' ? 0 : s[i] - '0');
        ReRooting<Data, S, T> g(x, f1, f2, f3, ident);
        bool fr = false;
        rep(i, n) {
            if (s[i] == '+' || s[i] == '-') {
                if(idx[i] != r || !fr)
                    g.add_edge(idx[i], idx[i - 1]);
                g.add_edge(idx[i], idx[i + 1]);
                if(idx[i] == r)
                    fr = true;
            }
        }
        int ans = -1e9;
        auto res = g.solve();
        rep(i, n) if(s[i] == '+' || s[i] == '-') chmax(ans, res[idx[i]].second);
        cout << ans << '\n';
    }
}
