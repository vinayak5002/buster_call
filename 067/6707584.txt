#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef unsigned long long int ull;
#define chmin(x,y) x = min(x,y)
#define chmax(x,y) x = max(x,y)
#define BIG_NUM 2000000000
#define HUGE_NUM 4000000000000000000 //オーバーフローに注意
#define MOD 1000000007
#define EPS 0.000000001


#define SIZE 305

enum Type{
	from_S,
	from_T,
};

struct State{
	State(int arg_row,int arg_col,int arg_sum_dist){

		row = arg_row;
		col = arg_col;
		sum_dist = arg_sum_dist;
	}
	State(){

		row = col = sum_dist = 0;
	}
	bool operator<(const struct State& arg) const{

		return sum_dist > arg.sum_dist; //昇順(PQ)
	}

	int row,col,sum_dist;
};

int H,W;
int M;
int d_row[4] = {-1,0,0,1},d_col[4] = {0,-1,1,0};
int min_dist[SIZE][SIZE][2];
int STOP[SIZE][SIZE];
char buf[SIZE][SIZE];

bool rangeCheck(int row,int col){

	return row >= 0 && row <= H-1 && col >= 0 && col <= W-1;
}

void calc_dist(int base_T,int from_r,int from_c,int to_r,int to_c,Type type){

	for(int row = 0; row < H; row++){
		for(int col = 0; col < W; col++){

			min_dist[row][col][type] = BIG_NUM;
		}
	}

	min_dist[from_r][from_c][type] = base_T;
	priority_queue<State> Q;

	Q.push(State(from_r,from_c,0));

	while(!Q.empty()){

		State state = Q.top();
		Q.pop();

		if(state.sum_dist > min_dist[state.row][state.col][type]){

			continue;
		}

		for(int i = 0; i < 4; i++){

			int adj_row = state.row+d_row[i];
			int adj_col = state.col+d_col[i];
			if(!rangeCheck(adj_row,adj_col) || buf[adj_row][adj_col] == '#'){

				continue;
			}

			int next_dist = state.sum_dist+1;
			if(next_dist >= STOP[adj_row][adj_col])continue;

			if(min_dist[adj_row][adj_col][type] > next_dist){

				min_dist[adj_row][adj_col][type] = next_dist;
				Q.push(State(adj_row,adj_col,next_dist));
			}
		}
	}
}

int main(){

	scanf("%d %d",&H,&W);


	int s_row,s_col,t_row,t_col;

	for(int row = 0; row < H; row++){

		scanf("%s",buf[row]);
		for(int col = 0; col < W; col++){
			if(buf[row][col] == 'S'){

				s_row = row;
				s_col = col;

			}else if(buf[row][col] == 'V'){

				t_row = row;
				t_col = col;
			}
		}
	}

	for(int row = 0; row < H; row++){
		for(int col = 0; col < W; col++){

			STOP[row][col] = BIG_NUM;
		}
	}

	scanf("%d",&M);

	for(int i = 0; i < M; i++){

		int a,b,t;

		scanf("%d %d %d",&a,&b,&t);
		a--;
		b--;

		chmin(STOP[a][b],t);
	}

	//スタート→ゴール
	calc_dist(0,s_row,s_col,t_row,t_col,from_S);

	if(min_dist[t_row][t_col][from_S] == BIG_NUM){

		printf("No\n");
		return 0;
	}

	//ゴール→スタート
	calc_dist(min_dist[t_row][t_col][from_S],t_row,t_col,s_row,s_col,from_T);
	if(min_dist[s_row][s_col][from_T] == BIG_NUM){

		printf("No\n");
		return 0;
	}

	printf("Yes\n");

	return 0;
}

