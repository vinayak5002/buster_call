#define SUITS 4
#define VALUES 9
#define N_MAX 36
#define CHAR_MAX 3
#include<stdio.h>
#include<string.h>

void getStringArray (int n, char a[N_MAX][CHAR_MAX]);
void copyStringArray (int n, char x[N_MAX][CHAR_MAX], char y[N_MAX][CHAR_MAX]);
void printStringArray (int n, char a[N_MAX][CHAR_MAX]);
void swap (char x[CHAR_MAX], char y[CHAR_MAX]);
int BubbleSort (int n, char a[N_MAX][CHAR_MAX]);
int SelectionSort (int n, char a[N_MAX][CHAR_MAX]);
int isStable (int n, char x[N_MAX][CHAR_MAX], char y[N_MAX][CHAR_MAX]);

int main ()
{
    int num=0;
    int i=0;
    char sequence[N_MAX][CHAR_MAX]={"\0"};
    char copy[N_MAX][CHAR_MAX]={"\0"};
    scanf("%d",&num);
    getStringArray(num,sequence);
    copyStringArray(num,copy,sequence);
    
    BubbleSort(num,sequence);
    printStringArray(num,sequence);
    if (isStable(num,copy,sequence))
    {
        printf("Stable\n"); 
    }
    else
    {
        printf("Not stable\n");
    }

    copyStringArray(num,sequence,copy);
    SelectionSort(num,sequence);
    printStringArray(num,sequence);
    if (isStable(num,copy,sequence))
    {
        printf("Stable\n"); 
    }
    else
    {
        printf("Not stable\n");
    }

    return 0;
}

/*Function reading a string array*/
void getStringArray (int n, char a[N_MAX][CHAR_MAX])
{
    int i=0;

    for (i=0;i<n;i++)
    {
        scanf("%s",&a[i]);
    }

    return;
}

/*Function copying the string array y to x*/
void copyStringArray (int n, char x[N_MAX][CHAR_MAX], char y[N_MAX][CHAR_MAX])
{
    int i=0;

    for (i=0;i<n;i++)
    {
        strcpy(x[i],y[i]);
    }

    return;
}

/*Function printing out a string array*/
void printStringArray (int n, char a[N_MAX][CHAR_MAX])
{
    int i=0;

    for (i=0;i<n;i++)
    {
        if (i!=n-1)
        {
            printf("%s ",a[i]);
        }
        else
        {
            printf("%s\n",a[i]);
        }
    }
    
    return;
}

/*Function swapping 2 strings*/
void swap (char x[CHAR_MAX], char y[CHAR_MAX])
{
    char temp[CHAR_MAX]={"\0"};

    strcpy(temp,x);
    strcpy(x,y);
    strcpy(y,temp);

    return;
}

/*Function of Bubble Sort*/
int BubbleSort (int n, char a[N_MAX][CHAR_MAX])
{   
    int i=0;
    int j=0;
    int count=0;

    for (i=0;i<n;i++)
    {   
        for (j=n-1;j>i;j--)
        {
            if (a[j][1]<a[j-1][1])
            {
                swap(a[j],a[j-1]);
                count++;
            }
        }
    }

    return count;
}

/*Function of Selection Sort*/
int SelectionSort (int n, char a[N_MAX][CHAR_MAX])
{   
    int i=0;
    int j=0;
    int count=0;
    int mini=0;

    for (i=0;i<n;i++)
    {   
        mini = i;
        for (j=i;j<n;j++)
        {
            if (a[j][1]<a[mini][1])
            {
                mini = j;
            }
        }
        if (a[i][1]>a[mini][1])
        {
            swap(a[i],a[mini]);
            count++;
        }    
    }

    return count;
}

int isStable (int n, char x[N_MAX][CHAR_MAX], char y[N_MAX][CHAR_MAX])
{
    int result=1;
    int i=0;
    int j=0;
    int count_x=0;
    int count_y=0;
    char order_x[SUITS+1]={'\0'};
    char order_y[SUITS+1]={'\0'};

    /*Loop for values*/
    for (i=1;i<=VALUES;i++)
    {
        /*Loop for cards*/
        for (j=0;j<n;j++)
        {
            count_x=0;
            count_y=0;
            if (x[j][1]==i+48)
            {
                order_x[count_x]=x[j][0];
                count_x++;
            }
            if (y[j][1]==i+48)
            {
                order_y[count_y]=y[j][0];
                count_y++;
            }
        }
        if (strcmp(order_x,order_y))
        {
            result=0;
            break;
        }
    }
    return result;
}

