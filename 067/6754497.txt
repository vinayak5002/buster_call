from collections import deque

class Node:
  def __init__(self, key):
    self.key = key
    self.prev = None
    self.next = None

class DoublyLinkedList:
  def __init__(self):
    self.nil = Node(None) # 番兵
    self.nil.prev = self.nil
    self.nil.next = self.nil 

  def insert(self, key):
    new = Node(key)
    new.next = self.nil.next
    self.nil.next.prev = new
    self.nil.next = new
    new.prev = self.nil

  def listSearch(self, key):
    cur = self.nil.next
    while cur != self.nil and cur.key != key:
      cur = cur.next
    return cur

  def delete(self, t):
    if t == self.nil:
      return
    t.prev.next = t.next
    t.next.prev = t.prev

  def deleteFirst(self):
    self.delete(self.nil.next)

  def deleteLast(self):
    self.delete(self.nil.prev)

  def show(self):
    s = []
    c = self.nil.next
    while(c != self.nil):
        s.append(c.key)
        c = c.next
    print(*s)

def string_to_int(s):
    try:
        # 数字の文字列を式として評価し出力する。
        temp = int(eval(str(s)))
        # 評価結果が整数の場合は、変換結果を返す。
        if type(temp) == int:
            return temp
    except:
        # 非数字の文字列をそのまま返す。
        return s

def is_int(s):
    try:
        int(s)
    except ValueError:
        return False
    else:
        return True

if __name__ == "__main__":
    s = input()
    if is_int(s):
        i = string_to_int(s)
        b = [[]* 2]* i

        que = deque([])
        cnt = 0
        for s in range(i):
            tmp = input()
            b[cnt - 1] = []
            b[cnt - 1] = tmp.split()
            command = b[cnt - 1][0]
            if command != "deleteFirst" and command != "deleteLast":
                key = b[cnt - 1][1]
            d = {'command' : command, 'key' : key}
            que.append(d)
            cnt += 1

print()
dll = DoublyLinkedList()
while i > 0:
  p = que.popleft()

  tmp_command = p.get("command")
  tmp_key = int(p.get("key"))
  #print(tmp_command, tmp_key)
  i -= 1 #popleftする度にマイナス1

  if tmp_command == "insert":
    #print(f"insert {tmp_key}")
    dll.insert(tmp_key)
    #dll.show()
  elif tmp_command == "delete":
    #print(f"delete {tmp_key}")
    dll.delete(dll.listSearch(tmp_key))
    #dll.show()
  elif tmp_command == "deleteFirst":
    #print(f"deleteFirst")
    dll.deleteFirst()
    #dll.show()
  elif tmp_command == "deleteLast":
    #print(f"deleteLast")
    dll.deleteLast()
    #dll.show()
  else:
    print("f{tmp_command} command error")

dll.show()

