#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <math.h>

typedef struct{
	int suf[7]; // suf[0]は使わない
	// N   5
	// W 4 1 3 6 E
	// S   2
}dice;

void dice_turn(dice* a, char code); // dice a:さいころ, char code:方角(NEWS) に回す
void dice_key_top(dice* a, int key); // dice a:さいころ, int key:さいころの目 keyがトップに来るよう回転
int dice_values(dice* a, dice* b); // dice a, bを回転させて一致すれば1,しなければ0を返す

int main(){
	char buf[4000];
	char *p;
	int dice_tmp[7];
	int n;
	dice d[100];

	// 【入力】n
	fgets(buf, sizeof(buf) - 1, stdin);
	sscanf(buf, "%d", &n);
	// 【入力】dice
	for (int i = 0; i < n; i++){
		fgets(buf, sizeof(buf) - 1, stdin);
		sscanf(buf, "%d %d %d %d %d %d", &dice_tmp[1], &dice_tmp[2], &dice_tmp[3],
			&dice_tmp[4], &dice_tmp[5], &dice_tmp[6]);
		for (int j = 1; j <= 7; j++){
			d[i].suf[j] = dice_tmp[j];
		}
	}
	// 【処理】
	int flag = 0;
	for (int i = 0; i < n-1; i++){
		for (int j = i+1; j < n; j++){
			int flag_tmp;
			flag_tmp = dice_values(&d[i], &d[j]);
			//printf("%d\n", flag_tmp);
			flag = flag | flag_tmp;
		}
	}
	// 【出力】
	if (flag == 0){
		printf("Yes\n");
	}
	else {
		printf("No\n");
	}

	return 0;
}

void dice_turn(dice* a, char code){
	int tmp;
	switch (code){
	case 'N':
		tmp = (*a).suf[1];
		(*a).suf[1] = (*a).suf[2];
		(*a).suf[2] = (*a).suf[6];
		(*a).suf[6] = (*a).suf[5];
		(*a).suf[5] = tmp;
		break;
	case 'E':
		tmp = (*a).suf[1];
		(*a).suf[1] = (*a).suf[4];
		(*a).suf[4] = (*a).suf[6];
		(*a).suf[6] = (*a).suf[3];
		(*a).suf[3] = tmp;
		break;
	case 'W':
		tmp = (*a).suf[1];
		(*a).suf[1] = (*a).suf[3];
		(*a).suf[3] = (*a).suf[6];
		(*a).suf[6] = (*a).suf[4];
		(*a).suf[4] = tmp;
		break;
	case 'S':
		tmp = (*a).suf[1];
		(*a).suf[1] = (*a).suf[5];
		(*a).suf[5] = (*a).suf[6];
		(*a).suf[6] = (*a).suf[2];
		(*a).suf[2] = tmp;
		break;
	defaults:; // nothing
	}
}

void dice_key_top(dice* a, int key){
	// key値がaのどこにあるか探す
	int a_key;
	for (int i = 1; i <= 6; i++){
		if ((*a).suf[i] == key){
			a_key = i;
		}
	}
	// key値がトップに来るようにa回転
	if (a_key == 1){
		; // nothing
	}
	else if (a_key == 2){
		dice_turn(a, 'N');
	}
	if (a_key == 3){
		dice_turn(a, 'W');
	}
	else if (a_key == 4){
		dice_turn(a, 'E');
	}
	else if (a_key == 5){
		dice_turn(a, 'S');
	}
	else if (a_key == 6){
		dice_turn(a, 'W');
		dice_turn(a, 'W');
	}
}

int dice_values(dice* a, dice* b){
	int flag = 1; // 1:一致 0:不一致
	int pattern[7][7] =
	{ { 0 },
	{ 0, 0, 3, 5, 2, 4, 0 },
	{ 0, 4, 0, 1, 6, 0, 3 },
	{ 0, 2, 6, 0, 0, 1, 5 },
	{ 0, 5, 1, 0, 0, 6, 2 },
	{ 0, 3, 0, 6, 1, 0, 4 },
	{ 0, 0, 4, 2, 5, 3, 0 } };
	// 【処理】一つしかない面の数字を探す(key値)
	int key[6] = { 0 };
	int key_len = 0;
	for (int i = 1; i <= 6; i++){
		int cnt = 0;
		for (int j = 1; j <= 6; j++){
			if ((*a).suf[i] == (*a).suf[j]) cnt++;
		}
		if (cnt == 1) {
			key[key_len] = (*a).suf[i];
			key_len++;
		}
	}
	// 【処理】key[0]がトップに来るように回転
	dice_key_top(a, key[0]);
	dice_key_top(b, key[0]);
	// 【判定】裏面の数字合ってるか
	int a_back, b_back;
	for (int i = 0; i < key_len; i++){
		for (int j = 1; j <= 6; j++){
			if ((*a).suf[j] == key[i])	a_back = (*a).suf[7 - j];
			if ((*b).suf[j] == key[i])	b_back = (*b).suf[7 - j];
		}
		if (a_back != b_back) {
			flag = 0;
			break;
		}
	}
	// 【判定】dice aの側面合ってるか(11_B) 
	int top, front;
	top = (*b).suf[1];
	front = (*b).suf[2];
	for (int j = 1; j <= 6; j++){
		if (top == (*a).suf[j]) top = j;
		if (front == (*a).suf[j]) front = j;
	}
	if ((*b).suf[pattern[1][2]] != (*a).suf[pattern[top][front]]){
		flag = 0;
	}
	return flag;
}
