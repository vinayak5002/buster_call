#include <stdio.h>
#include <stdlib.h>

#define NIL NULL

struct node
{
    struct node *right;
    struct node *left;
    struct node *parent;
    int key;
};

typedef struct node * Node;

Node root;

Node treeMinimum(Node x)
{
    while(x->left != NIL)
    {
        x = x->left;
    }
    return x;
}

Node treeSearch(Node unit, int k)
{
    while(unit != NIL && k != unit->key)
    {
        if(k < unit->key)
        {unit = unit->left;}
        else
        {unit = unit->right;}
    }
    return unit;
}

Node treeSuccessor(Node x)
{
    if(x->right != NIL)
    {return treeMinimum(x->right);}
    Node y = x->parent;
    while(y != NIL && x == y->right)
    {
        x = y;
        y = y->parent;
    }
    return y;
}

void treeDelete(Node unit)
{
    Node del; // 削除するノード
    Node child; // del の子ノード
    
    //削除する節点を決める
    if(unit->left == NIL || unit->right == NIL)
    {del = unit;}
    else
    {del = treeSuccessor(unit);}

    // del の子ノード child を決める
    if(del->left != NIL)
    {child = del->left;}
    else
    {child = del->right;}

    if(child != NIL)
    {
        child->parent = del->parent;
    }

    if(del->parent == NIL)
    {root = child;}
    else
    {
        if(del == del->parent->left)
        {
            del->parent->left = child;
        }
        else
        {
            del->parent->right = child;
        }
    }

    if(del != unit)
    {
        unit->key = del->key;
    }

    free(del);
}

void insert(int k)
{
    Node y = NIL;
    Node x = root;
    Node z;

    z = malloc(sizeof(struct node));
    z->key = k;
    z->left = NIL;
    z->right = NIL;

    while(x != NIL)
    {
        y = x;
        if(z->key < x->key)
        {
            x = x->left;
        }
        else
        {
            x = x->right;
        }
    }

    z->parent = y;
    if(y == NIL)
    {
        root = z;
    }
    else
    {
        if(z->key < y->key)
        {
            y->left = z;
        }
        else
        {
            y->right = z;
        }
    }
}

void inorder(Node u)
{
    if(u == NIL){return;}
    inorder(u->left);
    printf(" %d", u->key);
    inorder(u->right);
}
void preorder(Node u)
{
    if(u == NIL){return;}
    printf(" %d", u->key);
    preorder(u->left);
    preorder(u->right);
}

int main(void)
{
    int n, i, x;
    char com[20];
    scanf("%d", &n);

    for ( i = 0; i < n; i++ )
    {
        scanf("%s", com);
        if ( com[0] == 'f' )// find入力によるノード検索
        {
            scanf("%d", &x);
            Node result = treeSearch(root, x);
            if ( result != NIL ) printf("yes\n");
            else printf("no\n");
        }
        else if ( com[0] == 'i' )// insert入力によるノード追加
        {
            scanf("%d", &x);
            insert(x);
        }
        else if ( com[0] == 'p' )// print入力による表示
        {
            inorder(root);
            printf("\n");
            preorder(root);
            printf("\n");
        }
        else if ( com[0] == 'd' )// delete入力によるノード削除
        {
            scanf("%d", &x);
            treeDelete(treeSearch(root, x));
        }
    }

    return 0;
}
