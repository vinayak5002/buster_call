#define FACE_NUM 6
#define VALUE_MAX 100
#define VALUE_MIN 0
#define Q_MAX 24
#define Q_MIN 1
#include<stdio.h>

/*Initialization for an int array*/
void initialize (int a[FACE_NUM]);
/*Error check for an input value*/
void checkValue (int a);
/*Error check for the question number*/
void checkQNum (int a);
/*Get an array from console input*/
void getArray (int a[FACE_NUM]);
/*Get the questions from console input*/
void getQuestion (int n, int v[Q_MAX], int w[Q_MAX]);
/*Solve */
int solveQuestion (int v[FACE_NUM], int a, int b);

int main()
{
    int values[FACE_NUM];               /*Define a variable storing the input array*/
    initialize(values);                 /*Initialize the int array variable*/
    getArray(values);                   /*Read the input and store the values into the variable*/

    int q_num=0;
    scanf("%d",&q_num);
    int topface[q_num];
    int frontface[q_num];
    int rightface[q_num];
    initialize(topface);
    initialize(frontface);
    initialize(rightface);

    getQuestion(q_num,topface,frontface);

    /*Output the results*/
    int q_index=0;                             /*Loop variable for questions*/
    for(q_index=0;q_index<q_num;q_index++)
    {
        rightface[q_index]=solveQuestion(values,topface[q_index],frontface[q_index]);
        printf("%d\n",rightface[q_index]);
    }

    return 0;
}

/*The function that initialize an integer array to be zeros*/
void initialize (int a[FACE_NUM])
{
    int i=0;
    for (i=0;i<FACE_NUM;i++)
    {
        a[i]=0;
    }
    return;
}

/*The function checking an input value if it fits the constraints*/
void checkValue (int a)
{
    if (a>VALUE_MAX)
    {
        printf("ERROR: The input value must be less than or equal to %d.\n",VALUE_MAX);
        exit(0);
    }
    else if (a<VALUE_MIN)
    {
        printf("ERROR: The input value must be greater than or equal to %d.\n",VALUE_MIN);
        exit(0);
    }
    return;
}

/*The function checking if the question number fits the constraints*/
void checkQNum (int a)
{
    if (a>Q_MAX)
    {
        printf("ERROR: The question number must be less than or equal to %d.\n",Q_MAX);
        exit(0);
    }
    else if (a<Q_MIN)
    {
        printf("ERROR: The question number must be greater than or equal to %d.\n",Q_MIN);
        exit(0);
    }
    return;   
}

/*The function that read the input array*/
void getArray (int a[FACE_NUM])
{
    int i=0;
    for (i=0;i<FACE_NUM;i++)
    {
        scanf("%d",&a[i]);
        /*Error check for the input value*/
        checkValue(a[i]);
    }
    return;
}

/*The function that read the questions from the input*/
void getQuestion (int n, int v[Q_MAX], int w[Q_MAX])
{
    int i=0;
    for (i=0;i<n;i++)
    {
        scanf("%d %d", &v[i], &w[i]);
    }
    return;
}

/*The function that output the solution to the question*/
int solveQuestion (int v[FACE_NUM], int a, int b)
{
    int result=0;                   /*A variable for storing the value on the right face (i.e. the solution)*/
    int identifier=1000*a+b;        /*A variable to identify the dice condition*/

    /*The condition that v[0] is on the right face*/
    int condition0= (identifier==1000*v[1]+v[2] || identifier==1000*v[2]+v[4] 
                    || identifier==1000*v[4]+v[3] || identifier==1000*v[3]+v[1]);
    
    /*The condition that v[1] is on the right face*/
    int condition1= (identifier==1000*v[0]+v[3] || identifier==1000*v[3]+v[5] 
                    || identifier==1000*v[5]+v[2] || identifier==1000*v[2]+v[0]);
    
    /*The condition that v[2] is on the right face*/
    int condition2= (identifier==1000*v[0]+v[1] || identifier==1000*v[1]+v[5] 
                    || identifier==1000*v[5]+v[4] || identifier==1000*v[4]+v[0]);

    /*The condition that v[3] is on the right face*/
    int condition3= (identifier==1000*v[0]+v[4] || identifier==1000*v[4]+v[5] 
                    || identifier==1000*v[5]+v[1] || identifier==1000*v[1]+v[0]);

    /*The condition that v[4] is on the right face*/
    int condition4= (identifier==1000*v[0]+v[2] || identifier==1000*v[2]+v[5] 
                    || identifier==1000*v[5]+v[3] || identifier==1000*v[3]+v[0]);

    /*The condition that v[5] is on the right face*/
    int condition5= (identifier==1000*v[1]+v[3] || identifier==1000*v[3]+v[4] 
                    || identifier==1000*v[4]+v[2] || identifier==1000*v[2]+v[1]);

    if (condition0)
    {
        result=v[0];
    }
    else if (condition1)
    {
        result=v[1];
    }
    else if (condition2)
    {
        result=v[2];
    }
    else if (condition3)
    {
        result=v[3];
    }
    else if (condition4)
    {
        result=v[4];
    }
    else if (condition5)
    {
        result=v[5];
    }
    else
    {
        result=-1;          /*If there is no solution to the question*/
    }
    return result;
}
