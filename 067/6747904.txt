#include <algorithm>
#include <bitset>
//#include <cmath>
//#include <complex>
#include <cctype>
#include <cstdio>
#include <cstdint>
#include <deque>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <climits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>
#include <unordered_set>
#include <unordered_map>

using namespace std;
int64_t INF = LLONG_MAX;

template <typename T>
void print1(T &target, bool one_line_flag = false)
{
    if (one_line_flag)
    {
        for (auto itr = target.begin(); itr != target.end(); itr++)
        {
            if (itr != target.begin())
                cout << " ";
            cout << *itr;
        }
        cout << endl;
    }
    else
    {
        for (auto tmp : target)
        {
            cout << tmp << endl;
        }
    }
}
template <typename T>
void print1(pair<T, T> &target, bool one_line_flag = false)
{
    if (one_line_flag)
    {
        cout << target.first << " " << target.second << endl;
    }
    else
    {
        cout << target.first << endl;
        cout << target.second << endl;
    }
}

template <typename T>
void print2(T target)
{
    for (auto itr = target.begin(); itr != target.end(); itr++)
    {
        print1(*itr, true);
    }
}

template <typename T>
void print_map1(T target)
{
    for (auto itr = target.begin(); itr != target.end(); itr++)
    {
        cout << "[" << itr->first << "] " << itr->second << endl;
    }
}

template <typename T>
void print_map2(T target)
{
    for (auto itr = target.begin(); itr != target.end(); itr++)
    {
        cout << "[" << itr->first << "] ";
        print1(itr->second, true);
    }
}

int main()
{
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    while (1)
    {
        int n, m;
        cin >> n >> m;

        if (n == 0 && m == 0)
            break;

        vector<int> sum(n, 0);

        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                int p;
                cin >> p;
                sum.at(j) += p;
            }
        }

        sort(sum.begin(), sum.end());

        cout << *sum.rbegin() << endl;
    }

    return 0;
}

