#include <iostream>
#include <stack>
#include <queue>
#include <map>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <cstring>
#include <set>
#include <iomanip>
#define inf  0x7f7f7f7f
using namespace std;
typedef long long ll;
ll read()
{
    ll x=0,f=1; char c=getchar();
    while(c<'0'||c>'9'){if(c=='-') f=-1;c=getchar();}
    while(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+c-'0';c=getchar();}
    return f*x;
}
ll gcd(ll a, ll b)
{
    if (b == 0) return a;
    else return gcd(b, a % b);
}
bool isprime(ll x)
{
    for (ll i = 2; i * i <= x; i++)
    {
        if (x % i == 0) return false;
    }
    return true;
}
ll fast_power(ll a, ll b, ll mod)
{
    ll res = 1LL;
    while (b)
    {
        if (b & 1)
            res = res * a % mod;
        a = a * a % mod;
        b >>= 1LL;
    }
    return res;
}

ll f[200005], h[200005], cnt;
bool vis[2000005];
int find(int x)
{
    int y = x;
    while (f[y] != y) y = f[y];
    return y;
}
struct edge
{
    ll v, w, next;
}e[200005];
void add(ll u, ll v, ll w)
{
    e[++cnt].v = v;
    e[cnt].w = w;
    e[cnt].next = h[u];
    h[u] = cnt;
}

int sg[200005]; //需初始化为-1
int SG(int p, int a[], int n) //数组a需要排序
{
    bool v[1000] = {0};
    for (int i = 1; i <= n; i++)
    {
        int t = p - a[i];
        if (t < 0) break;
        if (sg[t] == -1) sg[t] = SG(t, a, n);
        v[sg[t]] = 1;
    }
    for (int i = 0; ; i++)
    {
        if (!v[i]) return i;
    }
}

struct matrix
{
    ll g[15][15];
    ll line, row;
};
matrix matrix_multiple(matrix A, matrix B, ll mod)
{
    matrix C;
    C.line = A.line, C.row = B.row;
    memset(C.g, 0, sizeof(C.g));
    for (int i = 1; i <= A.line; i++)
    {
        for (int j = 1; j <= A.row; j++)
        {
            for (int k = 1; k <= B.row; k++)
            {
                C.g[i][j] += A.g[i][k] * B.g[k][j];
                C.g[i][j] %= mod;
            }
        }
    }
    return C;
}
matrix matrix_I(int n)
{
    matrix A;
    A.line = A.row = n;
    memset(A.g, 0, sizeof(A.g));
    for (int i = 1; i <= n; i++)
    {
        A.g[i][i] = 1;
    }
    return A;
}
matrix matrix_fast_power(matrix A, ll b, ll mod)
{
    matrix res = matrix_I(10);
    while (b)
    {
        if (b & 1)
            res = matrix_multiple(res, A, mod);
        A = matrix_multiple(A, A, mod);
        b >>= 1LL;
    }
    return res;
}


int Partition(int a[], int l, int r, int mid)
{
    int p;
    for (int i = l; i <= r; i++)
    {
        if (a[i] == mid)
        {
            p = i;
            break;
        }
    }
    swap(a[p], a[l]);
    int key = a[l];
    while (l < r)
    {
        while (a[r] >= key && l < r)
            r--;
        if (l < r)
            a[l] = a[r];
        while (a[l] <= key && l < r)
            l++;
        if (l < r)
            a[r] = a[l];
    }
    a[l] = key;
    return l;
}
int select(int a[], int l, int r, int goal)
{
    if (r - l < 75)
    {
        sort(a + l, a + r + 1);
        return a[l + goal];
    }
    int groupNum = (l - r - 4) / 5;
    for (int i = 0; i <= groupNum; i++)
    {
        int start = l + 5 * i;				
		int end = start + 4;					
		for (int j = 0; j < 3; j++)				
		{
            for (int k = start; k < end - j; k++)
			{
                if (a[k] > a[k + 1])
                    swap(a[k], a[k+1]);
            }
        }
		swap(a[l + i], a[start + 2]);
    }
    int mid = select(a, l, l + groupNum, (groupNum + 1) / 2);
    int p = Partition(a, l, r, mid);
    int n = p - l;
    if (n == goal) return a[p];
    else if (n > goal) return select(a, l, p - 1, goal);
    else return select(a, p + 1, r, goal - n - 1);
}

int a[1005][1005];
void print(int n)
{
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= n + (n & 1); j++)
        {
            if (a[i][j] > n) cout << "0 ";
            else cout << a[i][j] << " ";
        }
        cout << "\n";
    }
    cout << "\n";
}
void schedule(int n)
{
    if (n == 1)
    {
        a[1][1] = 1;
        return;
    }
    if (n & 1) n++;
    int m = n / 2;
    schedule(m);
    for (int i = 1; i <= m; i++)
    {
        for (int j = 1; j <= m + 1; j++)
        {
            if (a[i][j] > m)
            {
                a[i + m][j] = i;
                a[i][j] = i + m;
                int c = i + m + 1;
                print(n);
                for (int k = m + 2; (m & 1) && k <= n; k++, c++)
                {
                    if (c == i + m) c++;
                    if (c > n) c -= m;
                    a[i][k] = c;
                    a[c][k] = i;
                }
            }
            else
            {
                a[i + m][j] = a[i][j] + m;
                if (((m & 1) == 0) || (m == 1))
                {
                    a[i + m][j + m] = a[i][j];
                    a[i][j + m] = a[i + m][j];
                }
            }
        }
    }
}

int n;
int p[105], dp[105][105], s[105][105];
void mul(int n, int *p, int (*dp)[105], int (*s)[105])
{
    for (int r = 2; r <= n; r++)
    {
        for (int i = 1; i <= n - r + 1; i++)
        {
            int j = i + r - 1;
            dp[i][j] = dp[i + 1][j] + p[i] * p[i + 1] * p[j + 1];
            s[i][j] = i;
            for (int k = i + 1; k < j; k++)
            {
                int t = dp[i][k] + dp[k + 1][j] + p[i] * p[k + 1] * p[j + 1];
                if (t < dp[i][j])
                {
                    dp[i][j] = t;
                    s[i][j] = k;
                }
            }
        }
    }
}
void traceback(int l, int r)
{
    if (l == r) 
    {
        cout << "A" << l;
        return;
    }
    else
    {
        cout << "(";
        traceback(l, s[l][r]);
        traceback(s[l][r] + 1, r);
        cout << ")";
    }
}
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(0), std::cout.tie(0);

    cin >> n;
    for (int i = 1; i <= n; i++)
    {
        int x, y;
        cin >> x >> y;
        p[i] = x;
        if (i == n) p[i + 1] = y;
    }
    mul(n, p, dp, s);
    cout << dp[1][n] << "\n";
    //traceback(1, n);
    return 0;
}
