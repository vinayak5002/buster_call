#include <bits/stdc++.h>
using namespace std;
// #include <atcoder/all>
// using namespace atcoder;
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define rep1(i, n) for (int i = 1; i < (int)(n+1); i++)
// using ll = long long;
// using P = pair<int,int>;
// using mint = modint1000000007;
// using Graph = vector<vector<int>>;

// https://qiita.com/e869120/items/eb50fdaece12be418faa#2-1-%E6%B0%B4%E8%89%B2%E3%82%B3%E3%83%BC%E3%83%80%E3%83%BC%E3%81%A7%E8%A6%81%E6%B1%82%E3%81%95%E3%82%8C%E3%82%8B-4-%E3%81%A4%E3%81%AE%E3%81%93%E3%81%A8
// https://manabitimes.jp/math
// https://qiita.com/e869120/items/eb50fdaece12be418faa#2-3-%E5%88%86%E9%87%8E%E5%88%A5%E5%88%9D%E4%B8%AD%E7%B4%9A%E8%80%85%E3%81%8C%E8%A7%A3%E3%81%8F%E3%81%B9%E3%81%8D%E9%81%8E%E5%8E%BB%E5%95%8F%E7%B2%BE%E9%81%B8-100-%E5%95%8F

#ifdef D_BITSET
{
  stringstream ss;
  ss << bitset<100>(9); // <bitwidth>
  string s = ss.str(); // "00001001"
}
#endif

#ifdef D_NEXT_PERMUTATION
{
  vector<int> v = {1,2,3}; // sorted vector
  do{

  }while(next_permutation(v.begin(),v.end()));
}
#endif

#ifdef D_TUPLE
{
  vector<tuple<int, int, string>> vt;
  vt.push_back(make_tuple(3,2,'abc'));
}
#endif

#ifdef D_BINARY_SEARCH
{
  vector<int>::iterator iter_lower, iter_upper;
  long idx_lower, idx_uppwer;

  iter_lower = lower_bound(vec.begin(), vec.end(), key); // for sorted vector, most left index with value >= key
  idx_lower = distance(vec.begin(), iter_lower);
  val_lower = *iter_lower;

  iter_upper = upper_bound(vec.begin(), vec.end(), key); // for sorted vector, most left index with value >  key
  idx_upper = distance(vec.begin(), iter_upper);
  val_upper = *iter_upper;

  binary_search(vec.begin(), vec.end(), key); // returns true or false

  // if key > max(vec), return vec.size()
}
#endif

#ifdef D_MAP
{
  map<key_type, val_type> mp;
  mp[key] = val;
  mp.find(key); //+++ return iterator
  mp.erase(key);
  mp.size();
  mp.count();
  mp.begin(); //+++ iterator for minimum of key
              //+++ mp.begin()->first for key, mp.begin()->second for val
  mp.rbegin(); //+++ iterator for maximum of key
}
#endif

#ifdef D_MATH
{
  //+++  ( x + y ) = ( x ^ y ) + 2 * ( x & y ) ;
}
#endif

#ifdef D_GRAPH
{
  int N, M;         //+++ N-points, M-lines
  cin >> N >> M ;
  Graph G(N);
  for (int i=0;i<M;i++){
    int A, B;  //+++ from-to
    cin >> A >> B ;
    G[A].push_back(B);
    G[B].push_back(A); //+++ only for no-directional graph
  }
}
#endif

#ifdef D_STRING
{
  string s;
  s.substr(i, k);   //+++ s[i:i+k]
  s.find(t);        //+++  
  s.replace(i,k,t); //+++ for s[i:], sed 's/k/t/g'
  s.insert(i,t);    //+++ s[:i-1] + t + s[i:]
}
#endif

#ifdef D_PAIR_ARRAY
{
  int N1, X, Y;
  vector<pair<int, int>> A(N1);
  A.at(i).first  = X ;
  A.at(i).second = Y ;
}
#endif

#ifdef D_ARRAY
{
  vector<int> v;
  vector<int>::iterator v_max, v_min, v_remove, v_dup;
  long long sum ;
  v_max = max_element(v.begin(), v.end());
  v_min = min_element(v.begin(), v.end());
  size_t v_max_idx = distance(v.begin(), v_max);
  sum = accumulate(v.begin, v.end(), 0LL); // first_iter, last_iter, init
  cout << *v_max << endl;
  cout << *v_min << endl;

  //+++ for remove (ある値を削除する)
  v_remove = remove(v.begin(), v.end(), 3); //+++ remove 3
  v.erase(v_remove, v.end());

  //+++ for duplicate element remove (重複要素をなくす)
  sort(v.begin(), v.end());
  v_dup = unique(v.begin(),v.end());
  v.erase(v_dup, v.end());

  //+++ for string
  vector<string> v2 = {"aaa", "bbb", "ccc"};
  string concatenate = accumulate(v2.begin(),v2.end(),string());
  //+++ for insert, erase
  v2.insert(v2.begin(),"zzz");
  v2.erase(v2.begin());

  

}
#endif

#ifdef D_2D_ARRAY
{
  int N2,M2;
  vector<vector<int>> A(N2, vector<int>(M2,0));
}
#endif

#ifdef D_GCD
// 最大公約数 a>b
long long GCD (long long a, long long b){
  if ( b==0 ) return a;
  else return GCD(b, a%b) ;
}
// 最小公倍数 a>b
long long LCM (long long a, long long b){
  return a /GCD(a,b) * b ;
}
// 素数判定
bool isPrime(long long N){
  if ( N==1 ) return false;
  for (long long i = 2; i*i <= N ; ++i ){
    if ( N % i == 0 ) return false ;
  }
  return true;
}
// 約数列挙
vector<long long> enum_divisors(long long N){
  vector<long long> res;
  for (long long i = 1; i*i <= N; ++i){
    if ( N%i == 0 ){
      res.push_back(i);
      if ( N/i != i ) res.push_back(N/i) ;
    }
  }
  sort(res.begin(), res.end());
  return res; 
}
// 素因数分解
vector<pair<long long, long long> > prime_factorize(long long N) {
    vector<pair<long long, long long> > res;
    for (long long a = 2; a * a <= N; ++a) {
        if (N % a != 0) continue;
        long long ex = 0; // 指数

        // 割れる限り割り続ける
        while (N % a == 0) {
            ++ex;
            N /= a;
        }

        // その結果を push
        res.push_back({a, ex});
    }

    // 最後に残った数について
    if (N != 1) res.push_back({N, 1});
    return res;
}
#endif

#ifdef D_UNION_FIND
struct UnionFind {
    vector<int> par; // par[i]:iの親の番号　(例) par[3] = 2 : 3の親が2

    UnionFind(int N) : par(N) { //最初は全てが根であるとして初期化
        for(int i = 0; i < N; i++) par[i] = i;
    }

    int root(int x) { // データxが属する木の根を再帰で得る：root(x) = {xの木の根}
        if (par[x] == x) return x;
        return par[x] = root(par[x]);
    }

    void unite(int x, int y) { // xとyの木を併合
        int rx = root(x); //xの根をrx
        int ry = root(y); //yの根をry
        if (rx == ry) return; //xとyの根が同じ(=同じ木にある)時はそのまま
        par[rx] = ry; //xとyの根が同じでない(=同じ木にない)時：xの根rxをyの根ryにつける
    }

    bool same(int x, int y) { // 2つのデータx, yが属する木が同じならtrueを返す
        int rx = root(x);
        int ry = root(y);
        return rx == ry;
    }
};

{
  UnionFind tree(N);
  
}
#endif

int main() {

  int n ;
  cin >> n ;

  vector<int> A(n);
  for (int i=0;i<n;i++){
    cin >> A.at(i);
  }
  sort(A.begin(), A.end());

  int q ;
  cin >> q ;

  vector<int> S(1<<n, -1);
  for (int j=0; j<q; j++){
    int m ;
    cin >> m ;
    int pat = 0;
    bool match = false ;
    while ( pat < (1<<n) ){
      int sum = 0;
      if ( S.at(pat) >= 0 ){
        sum = S.at(pat) ;
      }
      else {
        for ( int i=0; i<n; i++){
          if ( pat&(1<<i) ) sum+=A.at(i) ;
        }
        S.at(pat) = sum ;
      }
      if ( sum == m ){
        match = true;
        break;
      }
      pat++;
    }
    if ( match ) cout << "yes" << endl;
    else cout << "no" << endl;
  }

  return 0;
}

