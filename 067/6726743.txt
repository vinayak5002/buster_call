#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <iostream>
#include <stack>
#include <queue>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <cmath>
#include<sstream>
#include<list>
#include<iomanip>
#include <cstdlib>
#include <cstring>
#include <stack>
#include <bitset>
#include <cassert>
#include <stdlib.h>
#include <stdio.h>
using namespace std;
const int INF = 1000000000;
const long long LINF = 3e18 + 7;
const int MAX_N = 10010;
const int MAX_W = 1000010;
const int MAX_ARRAYK = 100000;
double PI = 3.14159265358979323846;
//using ll = long long;

long long cost[MAX_N][MAX_N]; // cost[u][v]はe=(u,v)のコスト（存在しない場合はINF, ただし、cost[i][i] = 0）
int V, E;

void warshall_floyd() {

	for (int k = 0; k < V; k++) {
		for (int i = 0; i < V; i++) {
			for (int j = 0; j < V; j++) {
				cost[i][j] = min(cost[i][j], cost[i][k] + cost[k][j]);
			}
		}
	}
}


int main() {


	while (true) {
		V = 10;
		cin >> E;
		if (E == 0) {
			break;
		}
		for (int i = 0; i < V; i++) {
			for (int j = 0; j < V; j++) {
				cost[i][j] = LINF;
			}
			cost[i][i] = 0;
		}

		V = 0;
		for (int i = 0; i < E; i++) {
			int u, v;
			long long c;
			cin >> u >> v >> c;
			cost[u][v] = c;
			cost[v][u] = c;
			V = max(V, u);
			V = max(V, v);
		}
		V++;

		warshall_floyd();

		int ans = INF;
		int idx = 0;
		for (int i = 0; i < V; i++) {
			int sum1 = 0;
			for (int j = 0; j < V; j++) {
				sum1 += cost[i][j];
			}
			if (ans > sum1) {
				idx = i;
				ans = sum1;
			}
		}
		cout << idx << " " << ans << endl;
	}

	return 0;
}
