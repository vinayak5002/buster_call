#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pb(...) emplace_back(__VA_ARGS__)
#define mp(a, b) make_pair(a, b)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define rep(i, n) for (int i = 0; i < (n); i++)
#define rep2(i, n) for (int i = (int)n - 1; i >= 0; i--)
#define REP(i, l, r) for (int i = l; i < (r); i++)
#define REP2(i, l, r) for (int i = (int)r - 1; i >= (l); i--)
#define siz(x) (ll) x.size()
template <class T>
using rque = priority_queue<T, vector<T>, greater<T>>;

template <class T>
bool chmin(T &a, const T &b) {
    if (b < a) {
        a = b;
        return 1;
    }
    return 0;
}

template <class T>
bool chmax(T &a, const T &b) {
    if (b > a) {
        a = b;
        return 1;
    }
    return 0;
}

template <class T>
void print(vector<T> a) {
    if (a.empty())
        cout << '\n';
    else {
        for (int i = 0; i < a.size(); i++)
            cout << a[i] << (i + 1 == a.size() ? '\n' : ' ');
    }
}

// __int128_t gcd(__int128_t a, __int128_t b) {
//     if (a == 0)
//         return b;
//     if (b == 0)
//         return a;
//     __int128_t cnt = a % b;
//     while (cnt != 0) {
//         a = b;
//         b = cnt;
//         cnt = a % b;
//     }
//     return b;
// }

long long extGCD(long long a, long long b, long long &x, long long &y) {
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    long long d = extGCD(b, a % b, y, x);
    y -= a / b * x;
    return d;
}

struct UnionFind {
    vector<int> data;
    int num;

    UnionFind(int sz) {
        data.assign(sz, -1);
        num = sz;
    }

    bool unite(int x, int y) {
        x = find(x), y = find(y);
        if (x == y)
            return (false);
        if (data[x] > data[y])
            swap(x, y);
        data[x] += data[y];
        data[y] = x;
        num--;
        return (true);
    }

    int find(int k) {
        if (data[k] < 0)
            return (k);
        return (data[k] = find(data[k]));
    }

    int size(int k) {
        return (-data[find(k)]);
    }

    bool same(int x, int y) {
        return find(x) == find(y);
    }

    int operator[](int k) {
        return find(k);
    }
};

template <int mod>
struct Mod_Int {
    int x;

    Mod_Int() : x(0) {
    }

    Mod_Int(long long y) : x(y >= 0 ? y % mod : (mod - (-y) % mod) % mod) {
    }

    static int get_mod() {
        return mod;
    }

    Mod_Int &operator+=(const Mod_Int &p) {
        if ((x += p.x) >= mod)
            x -= mod;
        return *this;
    }

    Mod_Int &operator-=(const Mod_Int &p) {
        if ((x += mod - p.x) >= mod)
            x -= mod;
        return *this;
    }

    Mod_Int &operator*=(const Mod_Int &p) {
        x = (int)(1LL * x * p.x % mod);
        return *this;
    }

    Mod_Int &operator/=(const Mod_Int &p) {
        *this *= p.inverse();
        return *this;
    }

    Mod_Int &operator++() {
        return *this += Mod_Int(1);
    }

    Mod_Int operator++(int) {
        Mod_Int tmp = *this;
        ++*this;
        return tmp;
    }

    Mod_Int &operator--() {
        return *this -= Mod_Int(1);
    }

    Mod_Int operator--(int) {
        Mod_Int tmp = *this;
        --*this;
        return tmp;
    }

    Mod_Int operator-() const {
        return Mod_Int(-x);
    }

    Mod_Int operator+(const Mod_Int &p) const {
        return Mod_Int(*this) += p;
    }

    Mod_Int operator-(const Mod_Int &p) const {
        return Mod_Int(*this) -= p;
    }

    Mod_Int operator*(const Mod_Int &p) const {
        return Mod_Int(*this) *= p;
    }

    Mod_Int operator/(const Mod_Int &p) const {
        return Mod_Int(*this) /= p;
    }

    bool operator==(const Mod_Int &p) const {
        return x == p.x;
    }

    bool operator!=(const Mod_Int &p) const {
        return x != p.x;
    }

    Mod_Int inverse() const {
        assert(*this != Mod_Int(0));
        return pow(mod - 2);
    }

    Mod_Int pow(long long k) const {
        Mod_Int now = *this, ret = 1;
        for (; k > 0; k >>= 1, now *= now) {
            if (k & 1)
                ret *= now;
        }
        return ret;
    }

    friend ostream &operator<<(ostream &os, const Mod_Int &p) {
        return os << p.x;
    }

    friend istream &operator>>(istream &is, Mod_Int &p) {
        long long a;
        is >> a;
        p = Mod_Int<mod>(a);
        return is;
    }
};

ll mpow2(ll x, ll n, ll mod) {
    ll ans = 1;
    x %= mod;
    while (n != 0) {
        if (n & 1)
            ans = ans * x % mod;
        x = x * x % mod;
        n = n >> 1;
    }
    ans %= mod;
    return ans;
}

ll modinv2(ll a, ll mod) {
    ll b = mod, u = 1, v = 0;
    while (b) {
        ll t = a / b;
        a -= t * b;
        swap(a, b);
        u -= t * v;
        swap(u, v);
    }
    u %= mod;
    if (u < 0)
        u += mod;
    return u;
}

ll divide_int(ll a, ll b) {
    return (a >= 0 ? a / b : (a - b + 1) / b);
}

constexpr int mod = 1000000007;
// constexpr int mod = 998244353;
// constexpr int mod = 31607;
using mint = Mod_Int<mod>;

mint mpow(mint x, ll n) {
    bool rev = n < 0;
    n = abs(n);
    mint ans = 1;
    while (n != 0) {
        if (n & 1)
            ans *= x;
        x *= x;
        n = n >> 1;
    }
    return (rev ? ans.inverse() : ans);
}

// ----- library -------
using Real = long double;
using Point = complex<Real>;

const Real EPS = 1e-7; // ここは適宜調節する
const Real pi = acos(-1.0);
const Real INF = 1e3;

int sgn(Real a) {
    return (a < -EPS) ? -1 : (a > EPS) ? 1 : 0;
} // 符号関数

bool eq(Real a, Real b) {
    return sgn(b - a) == 0;
}

Point operator*(const Point &p, const Real &d) {
    return Point(real(p) * d, imag(p) * d);
}

Point operator/(const Point &p, const Real &d) {
    return p * (1 / d);
}

istream &operator>>(istream &is, Point &p) {
    Real a, b;
    is >> a >> b;
    p = Point(a, b);
    return is;
}

ostream &operator<<(ostream &os, const Point &p) {
    return os << real(p) << ' ' << imag(p);
}

bool compare_x(const Point &p, const Point &q) {
    if (!eq(real(p), real(q)))
        return real(p) < real(q);
    return imag(p) < imag(q);
}

bool compare_y(const Point &p, const Point &q) {
    if (!eq(imag(p), imag(q)))
        return imag(p) < imag(q);
    return real(p) < real(q);
}

struct Line {
    Point a, b;
    Line() {
    }
    Line(Point a, Point b) : a(a), b(b) {
    }

    friend ostream &operator<<(ostream &os, Line &l) {
        return os << l.a << ' ' << l.b;
    }

    friend istream &operator>>(istream &is, Line &l) {
        return is >> l.a >> l.b;
    }
};

struct Segment : Line {
    Segment() {
    }
    Segment(Point a, Point b) : Line(a, b) {
    }
};

struct Circle {
    Point p;
    Real r;
    Circle() {
    }
    Circle(Point p, Real r) : p(p), r(r) {
    }
};

Point rotate(const Point &p, const Real &t) {
    return p * Point(cos(t), sin(t));
}

Real dot(const Point &p, const Point &q) {
    return real(p) * real(q) + imag(p) * imag(q);
}

Real det(const Point &p, const Point &q) {
    return real(p) * imag(q) - imag(p) * real(q);
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C&lang=ja
int ccw(const Point &a, Point b, Point c) { // 線分 ab に対する c の位置関係
    b = b - a, c = c - a;
    if (sgn(det(b, c)) == 1)
        return +1; // COUNTER_CLOCKWISE
    if (sgn(det(b, c)) == -1)
        return -1; // CLOCKWISE
    if (dot(b, c) < 0.0)
        return +2; // ONLINE_BACK
    if (norm(b) < norm(c))
        return -2; // ONLINE_FRONT
    return 0;      // ON_SEGMENT
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A&lang=ja
bool parallel(const Line &a, const Line &b) { // 平行判定
    return eq(det(a.b - a.a, b.b - b.a), 0.0);
}

bool orthogonal(const Line &a, const Line &b) { // 垂直判定
    return eq(dot(a.b - a.a, b.b - b.a), 0.0);
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A&lang=ja
Point projection(const Line &l, const Point &p) { // 垂線の足
    Real t = dot(p - l.a, l.b - l.a) / norm(l.b - l.a);
    return l.a + (l.b - l.a) * t;
}

Point projection(const Segment &s, const Point &p) {
    Real t = dot(p - s.a, s.b - s.a) / norm(s.b - s.a);
    return s.a + (s.b - s.a) * t;
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B&lang=ja
Point reflection(const Line &l, const Point &p) { // 線対称の位置にある点
    return p + (projection(l, p) - p) * 2.0;
}

bool intersect(const Line &l, const Point &p) { // 交点を持つか判定
    return abs(ccw(l.a, l.b, p)) != 1;
}

bool intersect(const Segment &s, const Point &p) {
    return ccw(s.a, s.b, p) == 0;
}

bool intersect(const Line &l, const Line &m) {
    if (!eq(det(l.b - l.a, m.b - m.a), 0.0))
        return true;
    return eq(det(l.b - l.a, m.b - l.a), 0.0);
}

bool intersect(const Line &l, const Segment &s) {
    return sgn(det(l.b - l.a, s.a - l.a) * det(l.b - l.a, s.b - l.a)) <= 0;
}

Real distance(const Line &l, const Point &p);

bool intersect(const Circle &c, const Line &l) {
    return sgn(c.r - distance(l, c.p)) >= 0;
}

bool intersect(const Circle &c, const Point &p) {
    return eq(abs(p - c.p), c.r);
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B&lang=ja
bool intersect(const Segment &s, const Segment &t) {
    if (ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) > 0)
        return false;
    return ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0;
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A&lang=ja
int intersect(Circle c1, Circle c2) { // 共通接線の本数
    if (c1.r < c2.r)
        swap(c1, c2);
    Real d = abs(c1.p - c2.p);
    int a = sgn(d - c1.r - c2.r);
    if (a >= 0)
        return 3 + a;
    return 1 + sgn(d - c1.r + c2.r);
}

Real distance(const Point &p, const Point &q) { // 最短距離
    return abs(q - p);
}

Real distance(const Line &l, const Point &p) {
    return abs(p - Point(projection(l, p)));
}

// https://atcoder.jp/contests/arc042/tasks/arc042_b
Real distance(const Segment &s, const Point &p) {
    Point h = projection(s, p);
    if (intersect(s, h))
        return abs(h - p);
    return min(abs(s.a - p), abs(s.b - p));
}

Real distance(const Line &l, const Line &m) {
    return intersect(l, m) ? 0.0 : distance(l, m.a);
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D&lang=ja
Real distance(const Segment &s, const Segment &t) {
    if (intersect(s, t))
        return 0.0;
    return min({distance(s, t.a), distance(s, t.b), distance(t, s.a), distance(t, s.b)});
}

Real distance(const Line &l, const Segment &s) {
    if (intersect(l, s))
        return 0.0;
    return min(distance(l, s.a), distance(l, s.b));
}

// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C&lang=ja
vector<Point> crosspoint(const Line &l, const Line &m) {
    vector<Point> ret;
    if (!intersect(l, m))
        return ret;
    Real A = det(l.b - l.a, m.b - m.a);
    Real B = det(l.b - l.a, l.b - m.a);
    if (eq(A, 0.0) && eq(B, 0.0)) {
        ret.push_back(m.a);
    } else {
        ret.push_back(m.a + (m.b - m.a) * B / A);
    }
    return ret;
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C&lang=ja
vector<Point> crosspoint(const Segment &s, const Segment &t) {
    return crosspoint(Line(s), Line(t));
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_D&lang=ja
vector<Point> crosspoint(const Circle &c, const Line &l) {
    Point h = projection(l, c.p);
    Point e = (l.b - l.a) / abs(l.b - l.a);
    vector<Point> ret;
    if (!intersect(c, l))
        return ret;
    if (eq(distance(l, c.p), c.r)) {
        ret.push_back(h);
    } else {
        Real base = sqrt(c.r * c.r - norm(h - c.p));
        ret.push_back(h + e * base), ret.push_back(h - e * base);
    }
    return ret;
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_E&lang=ja
vector<Point> crosspoint(const Circle &c1, const Circle &c2) {
    Real d = abs(c1.p - c2.p);
    Real a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));
    Real t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());
    vector<Point> ret;
    if (!intersect(c1, c2))
        return ret;
    if (eq(a, 0.0)) {
        ret.push_back(Point(c1.p + rotate(Point(c1.r, 0.0), t)));
    } else {
        Point p1 = c1.p + rotate(Point(c1.r, 0.0), t + a);
        Point p2 = c1.p + rotate(Point(c1.r, 0.0), t - a);
        ret.push_back(p1), ret.push_back(p2);
    }
    return ret;
}

vector<Point> cut(vector<Point> p, const Line &l, bool border = true) { // 多角形に切り取られる区間
    int n = p.size();
    p.push_back(p[0]), p.push_back(p[1]);
    vector<Point> ret;
    for (int i = 0; i < n; i++) {
        if (!eq(distance(l, p[i]), 0) && !eq(distance(l, p[i + 1]), 0)) {
            Segment s(p[i], p[i + 1]);
            if (eq(distance(l, s), 0)) {
                auto res = crosspoint(l, s);
                ret.pb(res[0]);
            }
        }
        if (eq(distance(l, p[i + 1]), 0)) {
            if ((eq(distance(l, p[i]), 0) || eq(distance(l, p[i + 2]), 0)) && !border)
                continue;
            Segment s(p[i], p[i + 2]);
            if (eq(distance(l, s), 0))
                ret.pb(p[i + 1]);
        }
    }
    return ret;
}

vector<Point> rectangle(const Segment &s, const Real r) { // sを軸とした幅rの長方形
    Point diff = (s.a - s.b) * Point(0, 1);
    diff *= r / sqrt(norm(diff));
    return vector<Point>{s.a + diff, s.a - diff, s.b - diff, s.b + diff};
}

Line vertical_bisector(const Point &p, const Point &q) { // 垂直二等分線
    Line l;
    l.a = (p + q) * 0.5;
    l.b = l.a + rotate(q - p, pi * 0.5);
    return l;
}

Circle Apollonius(const Point &p, const Point &q, const Real &a, const Real &b) { // アポロニウスの円
    Point p1 = (p * b + q * a) / (a + b), p2 = (-p * b + q * a) / (a - b);
    Circle c;
    c.p = (p1 + p2) * 0.5;
    c.r = abs(p1 - p2) * 0.5;
    return c;
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_A&lang=ja
Real area(const vector<Point> &p) { // 多角形の面積
    Real ret = 0.0;
    int n = p.size();
    for (int i = 0; i < n; i++)
        ret += det(p[i], p[(i + 1) % n]);
    return abs(ret * 0.5);
}

// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_3_C&lang=ja
int in_polygon(const vector<Point> &p, const Point &q) { // IN:2, ON:1, OUT:0
    int n = p.size();
    int ret = 0;
    for (int i = 0; i < n; i++) {
        Point a = p[i] - q, b = p[(i + 1) % n] - q;
        if (eq(det(a, b), 0.0) && sgn(dot(a, b)) <= 0)
            return 1;
        if (imag(a) > imag(b))
            swap(a, b);
        if (sgn(imag(a)) <= 0 && sgn(imag(b)) == 1 && sgn(det(a, b)) == 1)
            ret ^= 2;
    }
    return ret;
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_F&lang=ja
vector<Point> tangent(const Circle &c, const Point &p) { // 点 p を通る円 c の接線と c の接点
    return crosspoint(c, Circle(p, sqrt(norm(p - c.p) - c.r * c.r)));
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_G&lang=ja
vector<Line> tangent(Circle c1, Circle c2) { // 共通接線
    vector<Line> ret;
    if (c1.r < c2.r)
        swap(c1, c2);
    Real r = abs(c2.p - c1.p);
    if (eq(r, 0.0))
        return ret;
    Point u = (c2.p - c1.p) / r;
    Point v = rotate(u, pi * 0.5);
    for (Real s : {1.0, -1.0}) {
        Real h = (c1.r + c2.r * s) / r;
        if (eq(abs(h), 1.0)) {
            ret.emplace_back(c1.p + u * c1.r, c1.p + (u + v) * c1.r);
        } else if (abs(h) < 1.0) {
            Point uu = u * h, vv = v * sqrt(1.0 - h * h);
            ret.emplace_back(c1.p + (uu + vv) * c1.r, c2.p - (uu + vv) * c2.r * s);
            ret.emplace_back(c1.p + (uu - vv) * c1.r, c2.p - (uu - vv) * c2.r * s);
        }
    }
    return ret;
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A&lang=ja
vector<Point> convex_hull(vector<Point> p) { // 凸包
    sort(begin(p), end(p), compare_x);
    p.erase(unique(begin(p), end(p)), end(p));
    int n = p.size(), k = 0;
    if (n == 1)
        return p;
    vector<Point> ch(2 * n);
    for (int i = 0; i < n; ch[k++] = p[i++]) {
        while (k >= 2 && sgn(det(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1])) <= 0)
            k--;
    }
    for (int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {
        while (k >= t && sgn(det(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1])) <= 0)
            k--;
    }
    ch.resize(k - 1);
    return ch;
}

// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_5_A&lang=ja
Real closest_pair(vector<Point> p) { // 最近点対の距離
    if (p.size() <= 1)
        return 1e18;
    sort(begin(p), end(p), compare_x);
    vector<Point> memo(p.size());

    function<Real(int, int)> rec = [&](int l, int r) {
        if (r - l <= 1)
            return Real(1e18);
        int m = (l + r) >> 1;
        Real x = real(p[m]);
        Real ret = min(rec(l, m), rec(m, r));
        inplace_merge(p.begin() + l, p.begin() + m, p.begin() + r, compare_y);
        int cnt = 0;
        for (int i = l; i < r; i++) {
            if (abs(real(p[i]) - x) >= ret)
                continue;
            for (int j = 0; j < cnt; j++) {
                Point d = p[i] - memo[cnt - j - 1];
                if (imag(d) >= ret)
                    break;
                ret = min(ret, abs(d));
            }
            memo[cnt++] = p[i];
        }
        return ret;
    };

    return rec(0, p.size());
}
// ----- library -------

int main() {
    ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    cout << fixed << setprecision(15);

    int n;
    cin >> n;
    vector<int> p(n + 1), t(n + 1), ap(n + 1);
    vector<bool> f(n + 1);
    rep(i, n + 1) cin >> p[i] >> t[i], ap[i] = abs(p[i]), f[i] = p[i] >= 0;
    vector<Real> pr(n + 1), tr(n + 1);
    rep(i, n + 1) pr[i] = pi * ap[i] / 180, tr[i] = pi * t[i] / 180;
    vector<Real> r(n + 1), phi(n + 1);
    rep(i, n + 1) r[i] = (ap[i] == 90 ? 0 : ap[i] == 0 ? INF : (Real)1 / tan(pr[i]));
    vector<pair<Segment, bool>> ls;
    rep(i, n) {
        int i1 = i + 1, i2 = (i + 2 > n ? 1 : i + 2);
        Point p1(r[i1] * cos(tr[i1]), r[i1] * sin(tr[i1])), p2(r[i2] * cos(tr[i2]), r[i2] * sin(tr[i2]));
        if (f[i1] == f[i2])
            ls.pb(Segment(p1, p2), f[i1]);
        else {
            bool fl = fmod((pi * 2 + tr[i2] - tr[i1]), pi * 2) > pi;
            Real le = (fl ? tr[i2] : tr[i1]), ri = (fl ? tr[i1] : tr[i2]);
            Real x1 = sin(p[i1] + pi / 2) * cos(t[i1]), y1 = sin(p[i1] + pi / 2) * sin(t[i1]);
            Real x2 = sin(p[i2] + pi / 2) * cos(t[i2]), y2 = sin(p[i2] + pi / 2) * sin(t[i2]);
            while (1) {
                Real diff = fmod(pi * 2 + ri - le, pi * 2);
                if (diff < EPS)
                    break;
                Real ml = (le * 2 + ri) / 3, mr = (le + ri * 2) / 3;
                Real vl = (x1 + x2) * cos(ml) + (y1 + y2) * sin(ml);
                Real vr = (x1 + x2) * cos(mr) + (y1 + y2) * sin(mr);
                if (vl < vr)
                    ri = mr;
                else
                    le = ml;
            }
            ls.pb(Segment(p1, Point(INF * cos(le), INF * sin(le))), f[i1]);
            ls.pb(Segment(Point(INF * cos(le), INF * sin(le)), p2), f[i2]);
        }
    }
    vector<pair<Segment, bool>> l0;
    Point a = ls[0].first.a, b = ls[0].first.b;
    Point g = (a + b) / 2 + rotate(b - a, -pi / 2) * EPS;
    Point s(r[0] * cos(t[0]), r[0] * sin(t[0]));
    Real rg = distance(g, Point(0, 0)), tg = atan(g.imag() / g.real()), pg = atan((Real)1 / rg);
    if (tg > pi)
        tg -= pi * 2;
    if (f[0] == ls[0].second)
        l0.pb(Segment(s, g), f[0]);
    else {
        bool fl = fmod((pi * 2 + tg - tr[0]), pi * 2) > pi;
        Real le = (fl ? tg : tr[0]), ri = (fl ? tr[0] : tg);
        Real x1 = sin(pr[0] + pi / 2) * cos(tr[0]), y1 = sin(pr[0] + pi / 2) * sin(tr[0]);
        Real x2 = sin(pg + pi / 2) * cos(tg), y2 = sin(pg + pi / 2) * sin(tg);
        while (1) {
            Real diff = fmod(pi * 2 + ri - le, pi * 2);
            if (diff < EPS)
                break;
            Real ml = (le * 2 + ri) / 3, mr = (le + ri * 2) / 3;
            Real vl = (x1 + x2) * cos(ml) + (y1 + y2) * sin(ml);
            Real vr = (x1 + x2) * cos(mr) + (y1 + y2) * sin(mr);
            if (vl < vr)
                ri = mr;
            else
                le = ml;
        }
        l0.pb(Segment(s, Point(INF * cos(le), INF * sin(le))), f[0]);
        l0.pb(Segment(Point(INF * cos(le), INF * sin(le)), g), ls[0].second);
    }
    int cnt = 0;
    for (auto u : ls) {
        for (auto v : l0)
            cnt ^= (intersect(u.first, v.first) & (u.second == v.second));
    }
    cout << (cnt ? "Yes" : "No") << '\n';
}

