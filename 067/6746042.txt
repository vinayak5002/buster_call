#include<stdio.h>
long long int h[500005], l;
long long int c[500005];
long long int n, p, q;
int comp_h(long long int a, long long int b)
{
	if (c[h[a]] - h[a] * p > c[h[b]] + h[b] * p)
		return 1;
	else
		return -1;
}
void swap_h(long long int a, long long int b)
{
	long long int f = h[a];
	h[a] = h[b];
	h[b] = f;
	return;
}
void push(long long int ne)
{
	h[l] = ne;
	long long int p = l;
	l++;
	for (; p > 0; p = (p - 1) / 2)
		if (comp_h((p - 1) / 2, p) > 0)
			swap_h((p - 1) / 2, p);
	return;
}
long long int pop()
{
	l--;
	swap_h(0, l);
	long long int p = 0;
	for (;;)
	{
		if (2 * p + 2 < l)
		{
			if (comp_h(2 * p + 1, 2 * p + 2) > 0)
			{
				if (comp_h(p, 2 * p + 2) > 0)
					swap_h(p, 2 * p + 2);
				p = 2 * p + 2;
			}
			else
			{
				if (comp_h(p, 2 * p + 1) > 0)
					swap_h(p, 2 * p + 1);
				p = 2 * p + 1;
			}
		}
		else if (2 * p + 1 < l)
		{
			if (comp_h(p, 2 * p + 1) > 0)
				swap_h(p, 2 * p + 1);
			p = 2 * p + 1;
		}
		else
			break;
	}
	return h[l];
}
int main()
{
	scanf("%lld %lld %lld", &n, &p, &q);
	long long int i, j;
	for (i = 0; i < n; i++)
		scanf("%lld", &c[i]);
	l = 0;
	for (i = 0; i < n; i++)
		push(i);
	long long int ans, v;
	v = 0;
	for (i = 0; i < n; i++)
		v += c[i];
	ans = v;
	for (i = 0; i < n; i++)
	{
		j = pop();
		v -= c[j];
		v += (q - j + 2 * i) * p;
		if (ans < v)
			ans = v;
	}
	printf("%lld\n", ans);
	return 0;
}
