#include <bits/stdc++.h>
using namespace std;
#define rep(i, n) for(int i=0;i<(int)(n);i++)
#define rep2(i, s, n) for(int i=(s);i<(int)(n);i++)
#define reprev(i, n) for(int i=(int(n-1));i>=0;i--)
#define reprev2(i, s, e) for(int i=(int(s));i>=(int)(e);i--)


struct Card {
    char mark;
    int value;
};

vector<Card> bubbleSort(vector<Card> cards, int n){
    rep(i, n){
        reprev2(j, n-1, i+1){
            if(cards[j].value < cards[j-1].value) swap(cards[j], cards[j-1]);
        }
    }
    return cards;
}

vector<Card> selectionSort(vector<Card> cards, int n){
    rep(i, n){
        int minj = i;
        reprev2(j, n-1, i+1){
            if(cards[j].value < cards[minj].value) minj = j;
        }
        swap(cards[i], cards[minj]);
    }
    return cards;
}

bool isStable(vector<Card> bubblesorted, vector<Card> selectionsortecd, int n){
    bool flag = true;
    rep(i, n){
        if(bubblesorted[i].mark != selectionsortecd[i].mark){
            flag = false;
            break;
        }
    }
    return flag;
}

int main(){
    int n;
    cin >> n;
    vector<Card> cards(n);
    rep(i, n) {
        string now;
        cin >> now;
        cards[i].mark = now[0];
        cards[i].value = now[1] - '0';
    }

    vector<Card> bubblesorted = bubbleSort(cards, n);
    rep(i, n){
        if(i != n-1) cout << bubblesorted[i].mark << bubblesorted[i].value << " ";
        else cout << bubblesorted[i].mark << bubblesorted[i].value << endl;
    }
    cout << "Stable" << endl;

    vector<Card> selectionsorted = selectionSort(cards, n);
    rep(i, n){
        if(i != n-1) cout << selectionsorted[i].mark << selectionsorted[i].value << " ";
        else cout << selectionsorted[i].mark << selectionsorted[i].value << endl;
    }
    if(isStable(bubblesorted, selectionsorted, n)) cout << "Stable" << endl;
    else cout << "Not stable" << endl;
}
