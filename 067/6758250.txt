#include <iostream>
#include <vector>
using namespace std;

// グラフ構造体
struct Graph {
    // 辺の構造体
    // rev: 逆辺(to, from) が G[to] の中で何番目の要素か
    // cap: 辺(from, to) の容量
    struct Edge {
        int rev, from, to, cap;
        // Constructor
        Edge(int r, int f, int t, int c) : rev(r), from(f), to(t), cap(c) {}
    };

    // 隣接リスト
    vector<vector<Edge>> list;

    // N: 頂点数
    // Constructor
    Graph(int N = 0) : list(N) {}

    // グラフの頂点数取得
    size_t size() {
        return list.size();
    }

    // Graph インスタンス G として，G.list[v] を G[v] と書ける処理
    vector<Edge> &operator [] (int i) {
        return list[i];
    }

    // 辺e = (u, v) の逆辺(v, u) の取得
    Edge& redge(const Edge & e) {
        return list[e.to][e.rev];
    }

    // 辺e = (u, v) に流量f のフローを流す
    // e = (u, v) の流量が f だけ減少
    // 逆辺(v, u) のフローが増える
    void run_flow(Edge &e, int f) {
        e.cap -= f;
        redge(e).cap += f;
    }

    // 頂点from から 頂点to へ 容量 cap の辺を張る
    // to から from へも容量 0 の辺を張る
    void addedge(int from, int to, int cap) {
        int fromrev = (int)list[from].size();       // 逆辺が何番目か取得するために現在の配列のサイズを取得
        int torev = (int)list[to].size();
        list[from].emplace_back(Edge(torev, from, to, cap));
        list[to].emplace_back(Edge(fromrev, to, from, 0));      // 逆側に容量0の辺を張っておく
    }
};

struct FordFulkerson {
    static const int INF = 1 << 30;
    vector<bool> seen;

    FordFulkerson() {}

    // 残余グラフ上で s-t パスを見つける (DFS)
    // 返り値は s-t パス上の容量の最小値 (ないなら0
    // f: s から v へ到達した過程の各辺の容量の最小値
    int fodfs(Graph &G, int v, int t, int f) {
        // 終端 t に到達したらリターン
        if (v == t) return f;

        // DFS
        seen[v] = true;
        for (auto &e : G[v]) {
            if (seen[e.to]) continue;

            // 容量0の辺は実際には存在しないので飛ばす
            if (e.cap == 0) continue;

            // s-t パスを探す
            // 見つかったら flow はパス上の最小容量
            // 見つからなかったら f = 0
            int flow = fodfs(G, e.to, t, min(f, e.cap));

            // s-t パスが見つからなかったら次の辺を試す
            if (flow == 0) continue;

            // 辺 e に容量 flow のフローを流す
            G.run_flow(e, flow);

            // s-t パスが見つかったのなら際小容量を返す
            return flow;
        }

        // s-t パスが見つからなかった
        return 0;
    }

    // グラフ G の s-t 間の最大流量を求める
    // リターン時に G は残余グラフになっている
    int solve(Graph &G, int s, int t) {
        int res = 0;

        // 残余グラフに s-t パスがなくなるまで反復
        while (true) {
            seen.assign((int)G.size(), 0);
            int flow = fodfs(G, s, t, INF);

            // s-t パスが見つからなかったら終了
            if (flow == 0) return res;

            // 答えを加算
            res += flow;
        }

        // no reach
        return 0;
    }
};

int main() {
    // グラフの入力 N:頂点数 M:辺数
    int N, M; cin >> N >> M;
    Graph G(N);
    for (int i = 0; i < M; ++i) {
        int u, v, c; cin >> u >> v >> c;
        G.addedge(u, v, c);
    }

    // Ford Fulkerson
    FordFulkerson ff;
    int s = 0, t = N-1;
    cout << ff.solve(G, s, t) << endl;

    return 0;
}
