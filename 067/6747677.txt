#include <stdio.h>

#define N 100
#define white 0
#define gray 1
#define black 2

int n, M[N][N];
int color[N], d[N], f[N], tt;

// 再帰関数による深さ優先探索
void dfs_visit(int u)
{
	int v;
	color[u] = gray;
	d[u] = ++tt; // 最初の訪問
	for(v = 0; v < n; v++)
	{
		if(M[u][v] == 0) { continue; }
		if(color[v] == white) { dfs_visit(v); }
	}
	color[u] = black;
	f[u] = ++tt; // 訪問の完了
}


void dfs()
{
	int u;
	
	//初期化
	for(u = 0; u < n; u++)
	{
		color[u] = white;
	}
	tt = 0;
	
	// 未訪問の u を始点として深さ優先探索
	for(u = 0; u < n; u++)
	{
		if(color[u] == white){ dfs_visit(u); }
	}
	
	for(u = 0; u < n; u++)
	{
		printf("%d %d %d\n", u + 1, d[u], f[u]);
	}
}


int main (void)
{
	scanf("%d", &n);
	
	int i, j;
	for(i = 0; i < n; i++)
	{
		for(j = 0; j < n; j++)
		{
			M[i][j] = 0;
		}
	}
	
	int u, k, v;
	for(int i = 0; i < n; i++)
	{
		scanf("%d %d", &u, &k);
		u--; // 0 オリジンへ変換
		for(j = 0; j < k; j++)
		{
			scanf("%d", &v);
			v--; // 0 オリジンへ変換
			M[u][v] = 1; // u と v の間に辺を張る
		}
	}
	
	dfs();
	
	return 0;
}

