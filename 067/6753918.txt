#include <bits/stdc++.h>
#include <chrono>
#include <thread>
////#include <atcoder/all>

//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vd = vector<double>;
using vvd = vector<vd>;
using vvvd = vector<vvd>;
#define all(A) A.begin(),A.end()
#define ALL(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll gcd(ll(a), ll(b)) {
    if (b == 0)return a;
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}

ll Eulers_phi(ll n) {
    ll res = 0;
    ll N = n;
    vll P;
    for (ll p = 2; p * p <= N; p++) {
        if (N % p == 0) {
            P.push_back(p);
            while (N % p == 0)N /= p;
        }
    }
    if (N != 1)P.push_back(N);

    N = P.size();
    rep(bit, (1 << N)) {
        ll k = 1;
        ll t = 0;
        rep(i, N) {
            if (bit & (1 << i)) {
                k *= P[i];
                t++;
            }
        }
        res += (t % 2 == 0 ? 1 : -1) * n / k;
    }
    return res;

}

string dfs(string S) {
    string res = "";
    ll L = -1;
    ll k = 0;
    rep(i, S.size()) {
        if (S[i] == '[') {
            ll k = 0;
            for (ll j = i; j <S.size(); j++) {
                if (S[j] == '[')k++;
                if (S[j] == ']') {
                    k--;
                    if (k != 0)continue;
                    string K = dfs(S.substr(i + 1, j - i - 1));
                    reverse(all(K));
                    res = res + K;
                    i = j;
                    break;
                }
            }
        }
        else res.push_back(S[i]);
    }

    return res;

}



int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    while (1) {
        string S;
        cin >> S;
        if (S == ".")return 0;
        string T = "";
        ll k = 0;
        rep(i, S.size()) {
            if (S[i] == '+')k++;
            else if (S[i] == '-')k--;
            else if (S[i] == '[' || S[i] == ']') {
                T.push_back(S[i]);
                k = 0;
            }
            else if (S[i] == '?') {
                T.push_back(S[i]);
                k = 0;
            }
            else {
                T.push_back((S[i]-'A' + k+260000)%26+'A');
                k = 0;
            }
        }


        string AN = dfs(T);
        rep(i, AN.size()) {
            if (AN[i] == '?')AN[i] = 'A';
        }
        cout << AN << endl;

    }

}
