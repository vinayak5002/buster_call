#include <bits/stdc++.h>
#include <chrono>
#include <thread>
////#include <atcoder/all>

//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vd = vector<double>;
using vvd = vector<vd>;
using vvvd = vector<vvd>;
#define all(A) A.begin(),A.end()
#define ALL(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll gcd(ll(a), ll(b)) {
    if (b == 0)return a;
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}

ll Eulers_phi(ll n) {
    ll res = 0;
    ll N = n;
    vll P;
    for (ll p = 2; p * p <= N; p++) {
        if (N % p == 0) {
            P.push_back(p);
            while (N % p == 0)N /= p;
        }
    }
    if (N != 1)P.push_back(N);

    N = P.size();
    rep(bit, (1 << N)) {
        ll k = 1;
        ll t = 0;
        rep(i, N) {
            if (bit & (1 << i)) {
                k *= P[i];
                t++;
            }
        }
        res += (t % 2 == 0 ? 1 : -1) * n / k;
    }
    return res;

}

map<string, ll> M;

bool OK = 1;
ll dfs(string S) {
    ll res = 0;
    ll N = S.size();
    rep(i, N) {
        ll d = 0;
        ll R = i;
        if (S[i] <= 'Z' && S[i] >= 'A') {
            string G = "";
            if (S.size() > 1 && (S[i + 1] <= 'z' && S[i + 1] > 'a')) {
                G = S.substr(i, 2);
                R = i + 1;
            }
            else {
                G = S.substr(i, 1);
                R = i;
            }
            if (!M.count(G)) {
                OK = 0;
                return res;
            }
            d = M[G];
        }
        else if (S[i] == '(') {
            ll L = i;
            ll k = 0;
            for (ll j = i; j < N; j++) {
                if (S[j] == '(')k++;
                else if (S[j] == ')') {
                    k--;
                    if (k == 0) {
                        d = dfs(S.substr(L + 1, j - L - 1));
                        R = j;
                        break;
                    }
                }
            }
        }
        else continue;
        ll b = 1;
        if (S.size() > R + 1) {
            if ('0' <= S[R + 1] && S[R + 1] <= '9') {
                b = S[R + 1] - '0';
                R++;
                if (S.size() > R + 1) {
                    if ('0' <= S[R + 1] && S[R + 1] <= '9') {
                        b = b * 10 + S[R + 1] - '0';
                        R++;
                    }
                }
            }
        }
        res += d * b;
        i = R;
    }


    return res;
}


int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);


    while (1) {
        ll N;
        cin >> N;
        if (N == 0)return 0;
        vector<string> S(N);
        rep(i, N)cin >> S[i];
        vector<bool> D(N, 1);
        rep(i, N) {
            rep(j, N) {
                if (i == j)continue;
                for (ll k = 0; k < ll(S[j].size()) - ll(S[i].size())+1; k++) {
                    if (S[j].substr(k, S[i].size()) == S[i]) {
                        D[i] = 0;
                    }
                }
            }
        }
        vector<string> T;
        rep(i, N) {
            if (D[i])T.push_back(S[i]);
        }
        N = T.size();
        S = T;
        vvll DP((1 << N), vll(N, 1e18));
        rep(i, N) {
            DP[(1 << i)][i] = T[i].size();
        }

        vvll Z(N, vll(N,0));
        rep(i, N)rep(j, N) {
            rep(k, S[j].size()) {
                if (k == 0)continue;
                if (S[i].size()<k)break;
                string P = S[i].substr(S[i].size() - k, k);
                string Q = S[j].substr(0, k);
                if (P == Q) {
                    Z[i][j] = k;
                }
            }
        }
        rep(bit, (1 << N)) {
            if (bit == 0)continue;
            rep(j, N) {
                if (!(bit & (1 << j)))continue;
                rep(n, N) {
                    if (bit & (1 << n))continue;
                    chmin(DP[bit + (1 << n)][n], DP[bit][j]+ll(T[n].size()) - Z[j][n]);
                }
            }
        }
        ll an = 1e18;
        rep(i, N)chmin(an, DP[(1 << N) - 1][i]);
        cout << an << endl;
    }

}
