#include <bits/stdc++.h>
////#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vd = vector<double>;
using vvd = vector<vd>;
using vvvd = vector<vvd>;
#define all(A) A.begin(),A.end()
#define ALL(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;
/*
template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}*/

ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}
#include<complex>
//#define mod 1000000007
using ll = long long;
const int INF = 1000000000;
const ll LINF = 1001002003004005006ll;
int dx[] = { 1,0,-1,0 }, dy[] = { 0,1,0,-1 };
// ll gcd(ll a,ll b){return b?gcd(b,a%b):a;}
template<class T>bool chmax(T& a, const T& b) { if (a < b) { a = b; return true; }return false; }
template<class T>bool chmin(T& a, const T& b) { if (b < a) { a = b; return true; }return false; }


template<typename T>
ostream& operator<<(ostream& os, const vector<T>& v) {
    for (int i = 0; i < (int)v.size(); i++) os << v[i] << (i + 1 == (int)v.size() ? "" : " ");
    return os;
}
template<typename T>
istream& operator>>(istream& is, vector<T>& v) {
    for (T& x : v)is >> x;
    return is;
}

using Real = double;
const Real EPS = 1e-12;
const Real pi = acosl(-1);

// Point
using Point = complex<Real>;
istream& operator>>(istream& is, Point& p) {
    Real a, b;
    is >> a >> b;
    p = Point(a, b);
    return is;
}
ostream& operator<<(ostream& os, Point& p) {
    return os << fixed << setprecision(12) << p.real() << ' ' << p.imag();
}
inline bool eq(Real a, Real b) {
    return fabs(a - b) < EPS;
}
Point operator*(const Point& p, const Real& d) {
    return Point(real(p) * d, imag(p) * d);
}

// Line
struct Line {
    Point p1, p2;
    Line() = default;
    Line(Point p1, Point p2) :p1(p1), p2(p2) {}
    //Ax + By = C
    Line(Real A, Real B, Real C) {
        if (eq(A, 0))     p1 = Point(0, C / B), p2 = Point(1, C / B);
        else if (eq(B, 0))p1 = Point(C / A, 0), p2 = Point(C / A, 1);
        else            p1 = Point(0, C / B), p2 = Point(C / A, 0);
    }
};

// Segment
struct Segment :Line {
    Segment() = default;
    Segment(Point p1, Point p2) :Line(p1, p2) {}
};
struct Circle {
    Point center;
    Real r;
    Circle() = default;
    Circle(Point center, Real r) :center(center), r(r) {}
};

// Polygon
using Polygon = vector<Point>;
//#line 1 "Geometry/Rotate.cpp"
Point rotate(Real theta, Point p) {
    return Point(cos(theta) * real(p) - sin(theta) * imag(p), sin(theta) * real(p) + cos(theta) * imag(p));
}
// Dot
Real dot(Point a, Point b) {
    return real(a) * real(b) + imag(a) * imag(b);
}
// Cross
Real cross(Point a, Point b) {
    return real(a) * imag(b) - imag(a) * real(b);
}
int ccw(Point a, Point b, Point c) {
    b -= a; c -= a;
    if (cross(b, c) > EPS)       return  1;//COUNTER CLOCKWISE
    else if (cross(b, c) < -EPS) return -1;//CLOCKWISE
    else if (dot(b, c) < 0)      return  2;//c--a--b ONLINE BACK
    else if (norm(b) < norm(c)) return -2;//a--b--c ONLINE FRONT
    else                     return  0;//a--c--b ON SEGMENT
}
//#line 1 "Geometry/Projection.cpp"
// Projection (Requires: dot)
Point projection(Line l, Point p) {
    // ベクトルl乗に点pからおろした垂線の足
    Real k = dot(l.p1 - l.p2, p - l.p1) / norm(l.p1 - l.p2);
    return l.p1 + (l.p1 - l.p2) * k;
}
Point projection(Segment l, Point p) {
    Real k = dot(l.p1 - l.p2, p - l.p1) / norm(l.p1 - l.p2);
    return l.p1 + (l.p1 - l.p2) * k;
}
//#line 1 "Geometry/Intersect.cpp"
// Intersect (Requires : ccw, Dots, Cross, Projection)
bool intersect(Line l, Point p) {
    return abs(ccw(l.p1, l.p2, p)) != 1;
}
//直線の交差判定，外積
bool intersect(Line l1, Line l2) {
    return abs(cross(l1.p2 - l1.p1, l2.p2 - l2.p1)) > EPS || abs(cross(l1.p2 - l1.p1, l2.p2 - l1.p1)) < EPS;
}
//線分に点が乗るかの判定，ccw
bool intersect(Segment s, Point p) {
    return ccw(s.p1, s.p2, p) == 0;
}

bool intersect(Segment s, Segment t) {
    return ccw(s.p1, s.p2, t.p1) * ccw(s.p1, s.p2, t.p2) <= 0 && ccw(t.p1, t.p2, s.p1) * ccw(t.p1, t.p2, s.p2) <= 0;
}
Real dis(Segment s, Point p) {
    Point r = projection(s, p);
    if (intersect(s, r)) return abs(r - p);
    return min(abs(s.p1 - p), abs(s.p2 - p));
}
Real dis(Polygon poly, Point p) {
    Real ret = -10;
    int n = (int)poly.size();
    for (int i = 0; i < n; i++) {
        Real d = dis(Segment(poly[i], poly[(i + 1) % n]), p);
        if (ret < 0) ret = d;
        else      ret = min(ret, d);
    }
    return ret;
}
Real dis(Segment a, Segment b) {
    if (intersect(a, b)) return 0;
    return min({ dis(a,b.p1),dis(a,b.p2),dis(b,a.p1),dis(b,a.p2) });
}

int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    while (1) {
        ll N;
        cin >> N;
        //cout << N << endl;
        if (N == 0)return 0;
        double SX, SY, EX, EY;
        cin >> SX >> SY >> EX >> EY;
        Segment cource(Point(SX, SY), Point(EX, EY));
        vector<pair<Real, Real>> E(N);
        double L = 0.0, R = 1e9;
        bool INN = 1;
        rep(i, N) {
            //cout << i << " " << N << "P" << endl;
            double a1, a2, a3, a4, a5;
            cin >> a1 >> a2 >> a3 >> a4 >> a5;
            E[i] = { dis(cource,Point{a1,a2}),a5 };
            chmin(E[i].first, dis(cource, Point{ a1,a4 }));
            chmin(E[i].first, dis(cource, Point{ a3,a4 }));
            chmin(E[i].first, dis(cource, Point{ a3,a2 }));
            Polygon P = { Point(a1,a2),Point(a1,a4),Point(a3,a4),Point(a3,a2) };
            chmin(E[i].first, dis(P, Point(SX, SY)));
            chmin(E[i].first, dis(P, Point(EX, EY)));
            if (a1 < SX && a2 < SY && SX < a3 && SY < a4)INN = 0;
            if (a1 < EX && a2 < EY && EX < a3 && EY < a4)INN = 0;
            //if (INN == 0)cout << "ERR" << endl;
            if (intersect(cource, Segment(Point(a1, a2), Point(a1, a4))))INN = 0;
            if (intersect(cource, Segment(Point(a1, a4), Point(a3, a4))))INN = 0;
            if (intersect(cource, Segment(Point(a3, a4), Point(a3, a2))))INN = 0;
            if (intersect(cource, Segment(Point(a3, a2), Point(a1, a2))))INN = 0;
            //cout << i<<" "<<E[i].first << endl;
            if (E[i].first < EPS) {
                INN = 0;
            }
        }
        if (!INN) {
            cout << 0 << endl;
            continue;
        }
        while (R - L > EPS) {
            double mid = (R + L) / 2.0;

            bool C = 1;
            rep(i, N) {
                if (mid < E[i].second) {
                    if (E[i].first < mid + EPS)C = 0;
                }
                else {
                    Real d = mid - E[i].second;
                    if (E[i].first < sqrt(mid * mid - d * d))C = 0;
                }
            }
            if (C == 0)R = mid;
            else L = mid;
        }
        cout<<fixed<<setprecision(16);
        cout << R << endl;
    }
}
