#include <cstdio>
#include <cstdlib>
#include <cstring>

//リストノードの構造体
struct Node {
    int key;
    Node *next, *prev;
};

Node *nil;

//番兵を作成(初期化)
void init() {
    nil = (Node *)malloc(sizeof(Node));
    nil->next = nil;
    nil->prev = nil;
}

//検索する要素のノードを返す
Node* listSearch(int key) {
    Node *cur = nil->next;
    while (cur != nil && cur->key != key)
    {
        cur = cur->next;
    }
    return cur;
}

//現在のリストを表示
void printList() {
    Node *cur = nil->next;
    int isf = 0;
    while (1) {
        if (cur == nil) break;
        if (isf++ > 0) printf(" ");
        printf("%d", cur->key);
        cur = cur->next;
    }
    printf("\n");
}

//要素の挿入
void insert(int key) {
    Node *x = (Node *)malloc(sizeof(Node));
    x->key = key;
    //番兵の直後に要素を追加
    x->next = nil->prev;
    nil->next->prev = x;
    nil->next = x;
    x->prev = nil;
}

//要素の削除
void deleteNode(Node *t) {
    if (t == nil) return; //番兵なら削除しない
    t->prev->next = t->next;
    t->next->prev = t->prev;
    free(t);
}

//番兵の直後の要素を削除
void deleteFirst() {
    deleteNode(nil->next);
}

//番兵の直前の要素を削除
void deleteLast() {
    deleteNode(nil->prev);
}

//検索した要素を削除
void deleteKey(int key) {
    deleteNode(listSearch(key));
}

int main() {
    int n, i, key;
    char com[20];
    int size = 0;
    int np = 0, nd = 0;
    scanf("%d", &n);
    init();
    for (i=0; i<n; i++) {
        scanf("%s%d", com, &key);
        //insert
        if (com[0] == 'i') {
            { insert(key); np++; size++;}
        }
        else if (com[0] == 'd') {
            if (strlen(com) > 6) {
                //deleteFirst
                if (com[6] == 'F') deleteFirst();
                //deleteLast
                else if (com[6] == 'L') deleteLast();
            } else {
                //deleteKey
                deleteKey(key); nd++;
            }
        }
        //printList();
    }

    printList();

    return 0;
}
