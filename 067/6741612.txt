import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Review {
    static void maxHeapify(int[] heap, int heapSize, int cur) {
        int left = 2 * cur;
        int right = 2 * cur + 1;
        int largest = cur;
        if (left <= heapSize && heap[left] > heap[largest]) {
            largest = left;
        }
        if (right <= heapSize && heap[right] > heap[largest]) {
            largest = right;
        }

        if (largest != cur) {
            int tmp = heap[cur];
            heap[cur] = heap[largest];
            heap[largest] = tmp;
            maxHeapify(heap, heapSize, largest);
        }
    }

    static void buildMaxHeap(int[] heap) {
        int n = heap.length - 1;
        for (int i = n / 2; i >= 1; i--) {
            maxHeapify(heap, n, i);
        }
    }

    static void heapSort(int[] heap) {
        int n = heap.length - 1;
        for (int i = n / 2; i >= 1; i--) {
            buildMaxHeap(heap);
        }

        int currentHeapSize = n;
        while (currentHeapSize >= 1) {
            int tmp = heap[1];
            heap[1] = heap[currentHeapSize];
            heap[currentHeapSize] = tmp;
            currentHeapSize--;
            maxHeapify(heap, currentHeapSize, 1);
        }
    }

    static void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int[] heap = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            heap[i] = s.nextInt();
        }

        heapSort(heap);

        /*
        for (int i = 2; i <= n; i++) {
            int tmp = heap[i-1];
            heap[i-1] = heap[i];
            heap[i] = tmp;

            int cur = i - 1;
            int parent = (i - 1) / 2;
            while (parent >= 1 && heap[parent] < heap[cur]) {
                tmp = heap[parent];
                heap[parent] = heap[cur];
                heap[cur] = tmp;

                cur = parent;
                parent = parent / 2;
            }
        }
        */
        int heapSize = 1;
        while (heapSize < n) {
            int i = heapSize;
            while (i >= 2) {
                swap(heap, i / 2, i);
                i /= 2;
            }

            heapSize++;
            swap(heap, 1, heapSize);
        }

        System.out.println(
            Arrays.stream(heap).skip(1).boxed().map(String::valueOf)
                .collect(Collectors.joining(" "))
        );

        s.close();
    }
}

