#include <stdio.h>
#include <stdlib.h>
#define LEN 262144 / 2048

int compare(const void *p_data1, const void *p_data2)
{
    int ret;
    const int *p_short1 = p_data1;
    const int *p_short2 = p_data2;

    if (*p_short1 < *p_short2)
    {
        ret = -1;
    }
    else if (*p_short1 > *p_short2)
    {
        ret = 1;
    }
    else
    {
        ret = 0;
    }

    return ret;
}

void swap(int A[], int i, int j)
{
    int temp = A[i];
    A[i] = A[j];
    A[j] = temp;
}

void maxHeapify(int A[], int i, int n)
{
    int largest;
    int l = 2 * i;
    int r = l + 1;
    if (l <= n && A[l] > A[i])
    {
        largest = l;
    }
    else
    {
        largest = i;
    }

    if (r <= n && A[r] > A[largest])
    {
        largest = r;
    }

    if (largest != i)
    {
        swap(A, i, largest);
        maxHeapify(A, largest, n);
    }
}
int is_left(int now, int target)
{
    int amari;
    while (target != now)
    {
        amari = target % 2;
        target /= 2;
    }

    if (amari == 1)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}

void heap_insert(int A[], int i, int number, int n)
{
    int temp = A[i];
    A[i] = number;
    if (i == n)
    {
        return;
    }
    else if (is_left(i, n))
    {
        heap_insert(A, i * 2, temp, n);
    }
    else
    {
        heap_insert(A, i * 2 + 1, temp, n);
    }
}
void build(int A[], int n)
{
    if (n == 1)
    {
        return;
    }
    swap(A, 1, 2);
    if (n == 2)
    {
        return;
    }
    else
    {
        int temp;
        for (int i = 3; i <= n; i++)
        {
            temp = A[i];
            A[i] = A[i - 1];
            heap_insert(A, 1, temp, i - 1);
        }
    }
}

// メモ
// 最小値を常に最後尾におくようなヒープを構成する．

int main(void)
{
    int N;
    int A[LEN] = {12000};

    scanf("%d", &N);
    for (int i = 1; i <= N; i++)
    {
        scanf("%d", &A[i]);
    }
    qsort(&A[1], N, sizeof(int), compare);
    build(A, N);

    printf("%d", A[1]);
    for (int i = 2; i <= N; i++)
    {
        printf(" %d", A[i]);
    }
    printf("\n");

    return 0;
}
