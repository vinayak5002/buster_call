#include<bits/stdc++.h>
#define int ll
#define rep(i, N) for(int i = 0; i < (int)N; ++i)
#define rep1(i, N) for(int i = 1; i <= (int)N; ++i)
#define per(i, N) for(int i = N-1; i >= 0; --i)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define bit(n, k) ((n) >> k)
#define pcnt(n) (__builtin_popcount(n))
#define TakAo(ans) ans ? cout << "Takahashi\n" : cout << "Aoki\n"
#define YesNo(ans) ans ? cout << "Yes\n" : cout << "No\n"
#define endl '\n'
#define fi first
#define se second
#define mkpr make_pair
#define mktpl make_tuple
#define eb emplace_back

using namespace std;
using ll = int64_t;
using ull = uint64_t;
using ld = long double;
using point = struct{ ll x, y; };
template<class T> using max_heap = priority_queue<T>;
template<class T> using min_heap = priority_queue<T, vector<T>, greater<T>>;
template<class T> using vec = vector<T>;
template<class T> using vvec = vec<vec<T>>;
template<class T> using vvvec = vec<vvec<T>>;
template<class T> using vvvvec = vvec<vvec<T>>;

constexpr ld EPS = 1e-10;
constexpr int INF = 1001001001;
constexpr ll LINF = 1001001001001001001ll;
constexpr ll MOD = (1) ? 998244353 : 1e9+7;
constexpr int NIL = -1;
constexpr int pm[2] = {1, -1};
constexpr int dy[4] = {0, 1, 0, -1};
constexpr int dx[4] = {1, 0, -1, 0};

ll cel(ll a, ll b){ return (a + b - 1) / b;}
ll Gcd(ll a, ll b){ return b ? Gcd(b, a % b) : abs(a);}
template<class T> T powi(T x, ll exp){
    return exp > 0 ? (exp & 1 ? x : 1) * powi(x * x, exp >> 1) : 1;
}
ll modpow(ll x, ll exp, ll mod){
    x %= mod;
    return exp > 0 ? (exp & 1 ? x : 1) * modpow(x * x, exp >> 1, mod) % mod : 1;
}
template<class T> bool chmin(T &a, T b){ return a > b ? (a = b, true) : 0;}
template<class T>bool chmax(T &a, T b){ return a < b ? (a = b, true) : 0;}

using Pair = pair<int, int>;
using Tpl = tuple<int, int, int>;

class min_cost_flow{
    using edge = struct{ int to, cap, cost, rev; };
    const int64_t Inf = 100100100100100100;
    int N;
    vector<vector<edge>> G;
    vector<int64_t> dist;
    vector<int> prev_v, prev_e;

    public:
    min_cost_flow(int n) : N(n), G(n), dist(n), prev_v(n), prev_e(n) {}

    void add_edge(int from, int to, int cap, int cost){
        G[from].emplace_back(edge{to, cap, cost, (int)G[to].size()});
        G[to].emplace_back(edge{from, 0, -cost, (int)G[from].size() - 1});
    }

    // bellman-ford
    int solve(int s, int t, int f){
        int res = 0;

        while(f > 0){
            fill(dist.begin(), dist.end(), Inf);
            dist[s] = 0;
            bool update = 1;

            while(update){
                update = 0;
                for(int v = 0; v < N; v++){
                    if(dist[v] == Inf) continue;
                    for(int i = 0; i < (int)G[v].size(); i++){
                        edge &e = G[v][i];
                        if(e.cap > 0 && dist[e.to] > dist[v] + e.cost){
                            dist[e.to] = dist[v] + e.cost;
                            prev_v[e.to] = v;
                            prev_e[e.to] = i;
                            update = 1;
                        }
                    }
                }
            }

            if(dist[t] == Inf) return -1;

            int d = f;
            for(int v = t; v != s; v = prev_v[v]){
                d = min((int64_t)d, G[prev_v[v]][prev_e[v]].cap);
            }
            f -= d;
            res += d * dist[t];
            for(int v = t; v != s; v = prev_v[v]){
                edge &e = G[prev_v[v]][prev_e[v]];
                e.cap -= d;
                G[v][e.rev].cap += d;
            }
        }
        return res;
    }
};

void Main(){
    int V, E, F; cin >> V >> E >> F;
    min_cost_flow mcf(V);
    rep(i, E){
        int u, v, c, d; cin >> u >> v >> c >> d;
        mcf.add_edge(u, v, c, d);
    }
    cout << mcf.solve(0, V - 1, F) << endl;
}
 
signed main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    Main();
    return 0;
}

