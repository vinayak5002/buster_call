class DisjointSet:
    def __init__(self, value):
        self.parent = self
        self.rank = 0
        self.diff_weight = 0
        self.value = value
    
def union_(x, y, weight):
    weight += find_weight(x)
    weight -= find_weight(y)
    x = find_set(x)
    y = find_set(y)
    if x == y:
        return False
    if x.rank < y.rank:
        x, y = y, x
        weight = -weight
    elif x.rank == y.rank:
        x.rank += 1
    y.parent = x
    y.diff_weight = weight


def find_set(x):
    if x != x.parent:
        root = find_set(x.parent)
        x.diff_weight += x.parent.diff_weight
        x.parent = root
    
    return x.parent

def find_weight(x):
    find_set(x)
    return x.diff_weight

def find_diff(x, y):
    w_x = find_weight(x)
    w_y = find_weight(y)
    if x.parent != y.parent:
        return '?'
    return w_y - w_x

if __name__ == "__main__":
    n_nodes, n_queries = [int(e) for e in input().split()]
    nodes = []
    for i in range(n_nodes):
        nodes.append(DisjointSet(i))

    commands = []
    for _ in range(n_queries):
        inputs = [int(e) for e in input().split()]
        commands.append(inputs)

    for command in commands:
        if command[0] == 0:
            union_(nodes[command[1]], nodes[command[2]], command[3])
        elif command[0] == 1:
            print(find_diff(nodes[command[1]], nodes[command[2]]))

