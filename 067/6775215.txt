#line 1 "a.cpp"
#ifdef LOCAL
#define _GLIBCXX_DEBUG
#endif  // LOCAL

#include <bits/stdc++.h>

#line 1 "SPJ-Library/atcoder/segtree.hpp"



#line 7 "SPJ-Library/atcoder/segtree.hpp"

#line 1 "SPJ-Library/atcoder/internal_bit.hpp"



#ifdef _MSC_VER
#include <intrin.h>
#endif

namespace atcoder {

namespace internal {

// @param n `0 <= n`
// @return minimum non-negative `x` s.t. `n <= 2**x`
int ceil_pow2(int n) {
    int x = 0;
    while ((1U << x) < (unsigned int)(n)) x++;
    return x;
}

// @param n `1 <= n`
// @return minimum non-negative `x` s.t. `(n & (1 << x)) != 0`
constexpr int bsf_constexpr(unsigned int n) {
    int x = 0;
    while (!(n & (1 << x))) x++;
    return x;
}

// @param n `1 <= n`
// @return minimum non-negative `x` s.t. `(n & (1 << x)) != 0`
int bsf(unsigned int n) {
#ifdef _MSC_VER
    unsigned long index;
    _BitScanForward(&index, n);
    return index;
#else
    return __builtin_ctz(n);
#endif
}

}  // namespace internal

}  // namespace atcoder


#line 9 "SPJ-Library/atcoder/segtree.hpp"

namespace atcoder {

template <class S, S (*op)(S, S), S (*e)()> struct segtree {
  public:
    segtree() : segtree(0) {}
    explicit segtree(int n) : segtree(std::vector<S>(n, e())) {}
    explicit segtree(const std::vector<S>& v) : _n(int(v.size())) {
        log = internal::ceil_pow2(_n);
        size = 1 << log;
        d = std::vector<S>(2 * size, e());
        for (int i = 0; i < _n; i++) d[size + i] = v[i];
        for (int i = size - 1; i >= 1; i--) {
            update(i);
        }
    }

    void set(int p, S x) {
        assert(0 <= p && p < _n);
        p += size;
        d[p] = x;
        for (int i = 1; i <= log; i++) update(p >> i);
    }

    S get(int p) const {
        assert(0 <= p && p < _n);
        return d[p + size];
    }

    S prod(int l, int r) const {
        assert(0 <= l && l <= r && r <= _n);
        S sml = e(), smr = e();
        l += size;
        r += size;

        while (l < r) {
            if (l & 1) sml = op(sml, d[l++]);
            if (r & 1) smr = op(d[--r], smr);
            l >>= 1;
            r >>= 1;
        }
        return op(sml, smr);
    }

    S all_prod() const { return d[1]; }

    template <bool (*f)(S)> int max_right(int l) const {
        return max_right(l, [](S x) { return f(x); });
    }
    template <class F> int max_right(int l, F f) const {
        assert(0 <= l && l <= _n);
        assert(f(e()));
        if (l == _n) return _n;
        l += size;
        S sm = e();
        do {
            while (l % 2 == 0) l >>= 1;
            if (!f(op(sm, d[l]))) {
                while (l < size) {
                    l = (2 * l);
                    if (f(op(sm, d[l]))) {
                        sm = op(sm, d[l]);
                        l++;
                    }
                }
                return l - size;
            }
            sm = op(sm, d[l]);
            l++;
        } while ((l & -l) != l);
        return _n;
    }

    template <bool (*f)(S)> int min_left(int r) const {
        return min_left(r, [](S x) { return f(x); });
    }
    template <class F> int min_left(int r, F f) const {
        assert(0 <= r && r <= _n);
        assert(f(e()));
        if (r == 0) return 0;
        r += size;
        S sm = e();
        do {
            r--;
            while (r > 1 && (r % 2)) r >>= 1;
            if (!f(op(d[r], sm))) {
                while (r < size) {
                    r = (2 * r + 1);
                    if (f(op(d[r], sm))) {
                        sm = op(d[r], sm);
                        r--;
                    }
                }
                return r + 1 - size;
            }
            sm = op(d[r], sm);
        } while ((r & -r) != r);
        return 0;
    }

  private:
    int _n, size, log;
    std::vector<S> d;

    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }
};

}  // namespace atcoder


#line 8 "a.cpp"

#pragma region debug

#pragma region output
template <typename T1, typename T2>
std::ostream &std::operator<<(std::ostream &os, const std::pair<T1, T2> &p) {
    os << p.first << " " << p.second;
    return os;
}
template <class T>
std::ostream &std::operator<<(std::ostream &os, const std::vector<T> &v) {
    for (int i = 0; i < (int)v.size(); i++) {
        if (i) os << " ";
        os << v[i];
    }
    return os;
}
#pragma endregion

#pragma region view

namespace viewer {
template <typename T>
void view(const T e) {
    std::cerr << e;
}

template <typename T, typename U>
void view(const std::pair<T, U> &p) {
    std::cerr << "(";
    view(p.first);
    std::cerr << ", ";
    view(p.second);
    std::cerr << ")";
}

template <typename T>
void view(const std::set<T> &s) {
    if (s.empty()) {
        std::cerr << "{ }";
        return;
    }
    std::cerr << "{ ";
    for (auto &t : s) {
        view(t);
        std::cerr << ", ";
    }
    std::cerr << "\b\b }";
}

template <typename T>
void view(const std::unordered_set<T> &s) {
    if (s.empty()) {
        std::cerr << "{ }";
        return;
    }
    std::cerr << "{ ";
    for (auto &t : s) {
        view(t);
        std::cerr << ", ";
    }
    std::cerr << "\b\b }";
}

template <typename T>
void view(const std::vector<T> &v) {
    if (v.empty()) {
        std::cerr << "{ }";
        return;
    }
    std::cerr << "{ ";
    for (const auto &e : v) {
        view(e);
        std::cerr << ", ";
    }
    std::cerr << "\b\b }";
}

template <typename T>
void view(const std::vector<std::vector<T>> &vv) {
    std::cerr << "{\n";
    for (const auto &v : vv) {
        std::cerr << "\t";
        view(v);
        std::cerr << '\n';
    }
    std::cerr << "}";
}

template <typename T, typename U>
void view(const std::vector<std::pair<T, U>> &v) {
    std::cerr << "{\n";
    for (const auto &c : v) {
        std::cerr << "\t(";
        view(c.first);
        std::cerr << ", ";
        view(c.second);
        std::cerr << ")\n";
    }
    std::cerr << "}";
}

template <typename T, typename U>
void view(const std::map<T, U> &m) {
    std::cerr << "{\n";
    for (const auto &t : m) {
        std::cerr << "\t[";
        view(t.first);
        std::cerr << "] : ";
        view(t.second);
        std::cerr << '\n';
    }
    std::cerr << "}";
}

template <typename T, typename U>
void view(const std::unordered_map<T, U> &m) {
    std::cerr << "{\n";
    for (const auto &t : m) {
        std::cerr << "\t[";
        view(t.first);
        std::cerr << "] : ";
        view(t.second);
        std::cerr << '\n';
    }
    std::cerr << "}";
}
}  // namespace viewer

#pragma endregion

// when debugging : g++ foo.cpp -DLOCAL
#ifdef LOCAL
void debug_out() {}
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    viewer::view(H);
    std::cerr << ", ";
    debug_out(T...);
}
#define debug(...)                                                \
    do {                                                          \
        std::cerr << __LINE__ << " [" << #__VA_ARGS__ << "] : ["; \
        debug_out(__VA_ARGS__);                                   \
        std::cerr << "\b\b]\n";                                   \
    } while (0)
#define dump(x)                                      \
    do {                                             \
        std::cerr << __LINE__ << " " << #x << " : "; \
        viewer::view(x);                             \
        std::cerr << '\n';                           \
    } while (0)

#else
#define debug(...) (void(0))
#define dump(x) (void(0))
#endif

#pragma endregion

using namespace std;
using namespace atcoder;

using ll = long long;

const int INF = 1001001001;

int op(int a, int b) { return min(a, b); }

int e() { return INF; }

int main() {
    int W;
    cin >> W;
    vector<int> As(W);
    for (int i = 0; i < W; i++) {
        cin >> As[i];
    }

    W += 4;
    As.insert(As.begin(), {0, -1});
    As.insert(As.end(), {-1, 0});

    vector<int> left(W, INF), right(W, INF);
    for (int i = 0; i < W; i++) {
        if (As[i] < 0) {
            left[i] = abs(As[i]) + i;
            right[i] = abs(As[i]) - i;
        }
    }

    segtree<int, op, e> seg_left(left), seg_right(right);

    set<int> s;
    for (int i = 0; i < W; i++) {
        if (As[i] == 0) {
            s.insert(i);
        }
    }

    debug(s);

    int answer = 0;
    for (int i = 2; i < W - 2; i++) {
        auto r = *(s.lower_bound(i));
        auto l = *(--(s.lower_bound(i)));
        debug(l, i, r);
        if (As[i] > 0) {
            int tmp = As[i];
            // debug(seg_left.prod(l, i + 1), seg_right.prod(i, r + 1));
            int left_close = seg_left.prod(l, i + 1) - i;
            int right_close = seg_right.prod(i, r + 1) + i;
            debug(left_close, right_close);
            int close = max(left_close, right_close);
            tmp = min(tmp, close);
            tmp = max(tmp, 0);
            debug(i, tmp);
            answer += tmp;
        }
    }

    cout << answer << endl;

    return 0;
}

