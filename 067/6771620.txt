import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        List<LinkedList<Integer>> linkedLists = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            s.nextInt();
            int k = s.nextInt();
            LinkedList<Integer> linkedList = new LinkedList<>();
            for (int j = 0; j < k; j++) {
                linkedList.push(s.nextInt());
            }
            linkedLists.add(linkedList);
        }

        boolean[] stacked = new boolean[n + 1];
        int time = 1;
        int[] stackedTime = new int[n + 1];
        int[] searchCompletedTime = new int[n + 1];
        Stack<Integer> stack = new Stack<>();
        stack.push(1);
        stackedTime[1] = time;
        while(!stack.empty()) {
            time++;

            int visiting = stack.peek();
            LinkedList<Integer> linkedList = linkedLists.get(visiting - 1);
            int next = -1;
            while (!linkedList.isEmpty()) {
                int nextCandidate = linkedList.pollFirst();
                if (stacked[nextCandidate]) {
                    continue;
                } else {
                    next = nextCandidate;
                    stackedTime[next] = time;
                    stack.push(next);
                    stacked[next] = true;
                    break;
                }
            }

            if (next == -1) {
                searchCompletedTime[visiting] = time;
                stack.pop();
            }
        }

        for (int i = 1; i <=n; i++) {
            System.out.println(String.format("%d %d %d",
                i, stackedTime[i], searchCompletedTime[i]));
        }
        s.close();
    }
}

