#include<iostream>
using namespace std;

struct Node{
    int key;
    Node *prev, *next;
};

Node *nil;

// 番兵作成
void init(){
    nil = (Node *)malloc(sizeof(Node)); //メモリ確保
    nil->next = nil;
    nil->prev = nil;
}

Node * listSearch(int key){
    Node *cur = nil->next;
    while(cur != nil && cur->key != key){
        cur = cur->next;
    }
    return cur;
}

// 要素挿入
void insertNode(int key){
    Node *x =(Node *)malloc(sizeof(Node)); //メモリ確保
    x->key = key;

    x->next = nil->next;
    nil->next->prev = x;
    nil->next = x;
    x->prev = nil;
}

// 要素削除
void deleteNode(Node *t){
    if(t!=nil){ //tが番兵以外のときは処理する
        t->prev->next = t->next;
        t->next->prev = t->prev;
        free(t); //メモリ解放
    }
}

// 先頭要素削除
void deleteFirst(){
    deleteNode(nil->next);
}

// 末尾要素削除
void deleteLast(){
    deleteNode(nil->prev);
}

// 指定要素削除
void deleteKey(int key){
    deleteNode(listSearch(key));
}

// リストの表示
void showList(){
    Node *cur = nil->next;
    int isf = 0;
    while(1){
        if(cur==nil) break;
        if(isf++ > 0) cout << " ";
        cout << cur->key;
        cur = cur->next;
    }
    cout << endl;
}

int main(){
    int key, n, i;
    int size = 0;
    char com[20];
    int np = 0, nd = 0;
    cin >> n;

    init();

    for(i=0;i<n;i++){
        scanf("%s%d",com,&key);

        if(com[0] =='i'){
            insertNode(key);
            np++;
            size++;
        }else if(com[0] =='d'){
            if(com[6] == 'F') deleteFirst();
            else if(com[6] == 'L') deleteLast();
            else deleteKey(key); nd++;
        }
        size--;
    }

    showList();

    return 0;
}
