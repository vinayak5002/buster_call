#include<bits/stdc++.h>
using namespace std;

struct Arc{
    int id, source, target;

    Arc(int id, int source, int target): id(id), source(source), target(target){}

    // 出力
    friend ostream &operator<<(ostream &os, const Arc &a) {
        return os << "id: " << a.id << ", source: " << a.source << ", target: " << a.target;
    }
};

struct Digraph{
    using A=Arc;
    vector<vector<A>> inc_out, inc_in;
    vector<A> arc;

    Digraph(int N=0){
        inc_out.resize(N);
        inc_in.resize(N);
    }

    // 頂点数
    int order(){return inc_out.size();}

    // 辺の数
    int size(){return arc.size();}

    // 出次数
    inline int out_degree(int v){return inc_out[v].size();}

    // 入次数
    inline int in_degree(int v){return inc_in[v].size();}

    // 頂点を1個追加する.
    int add_vertex(){
        inc_in.emplace_back(vector<A>());
        inc_out.emplace_back(vector<A>());
        return inc_in.size()-1;
    }

    // 頂点をk個追加する.
    vector<int> add_vertices(int k){
        vector<int> I;
        for (; k--; k>=0){
            I.emplace_back(add_vertex());
        }
        return I;
    }

    // 有向辺 uv を加える.
    int add_arc(int u, int v){
        int i=size();
        A a(i,u,v);

        inc_out[u].emplace_back(a);
        inc_in[v].emplace_back(a);
        arc.emplace_back(a);
        return i;
    }

    // 有向辺 a を加える.
    inline int add_arc(const Arc &a){return add_arc(a.source, a.target);}

    // walk を加える.
    vector<int> add_walk(const vector<int> &walk){
        vector<int> J;
        for (int i=0; i<(int)walk.size()-1; i++){
            J.emplace_back(add_arc(walk[i], walk[i+1]));
        }
        return J;
    }

    inline Arc get_arc(int j){return arc[j];}

    // cycle を加える.
    vector<int> add_cycle(const vector<int> &cycle){
        vector<int> J=add_walk(cycle);
        J.emplace_back(add_arc(cycle.back(),cycle.front()));
        return J;
    }


    // 2 頂点 u,v 間の距離を求める.
    int distance(int u, int v){
        if (u==v) return 0;

        vector<int> T(order(),-1); T[u]=0;
        deque<int> Q{u};

        while (!Q.empty()){
            int x=Q.front(); Q.pop_front();

            for (A &a:inc_out[x]){
                int t=a.target;
                if (T[t]==-1){
                    T[t]=T[x]+1;
                    Q.push_back(t);

                    if (t==v) return T[t];
                }
            }
        }

        return -1;
    }

    // 頂点 u からの距離を求める.
    vector<int> distance_all(int u){
        vector<int> T(order(),-1); T[u]=0;
        deque<int> Q{u};

        while (!Q.empty()){
            int x=Q.front(); Q.pop_front();

            for (A &a:inc_out[x]){
                int t=a.target;
                if (T[t]==-1){
                    T[t]=T[x]+1;
                    Q.push_back(t);
                }
            }
        }

        return T;
    }

    // u-v 間の最短路を求める (存在しない場合, []).
    vector<int> shortest_path(int u, int v){
        if (u==v) return vector<int>{u};

        vector<int> T(order(),-1);
        deque<int> Q{u};

        while (!Q.empty()){
            int x=Q.front(); Q.pop_front();

            for (auto &a:inc_out[x]){
                int y=a.target;
                if (T[y]==-1){
                    T[y]=x;
                    Q.push_back(y);

                    if (y==v){
                        vector<int> P{v};
                        int b=v;
                        while (b!=u){
                            b=T[b];
                            P.emplace_back(b);
                        }
                        reverse(P.begin(), P.end());
                        return P;
                    }
                }
            }
        }
        return vector<int>{};
    }
};

struct Topological_Sort{
    bool feasible;
    vector<int> sort,index;

    Topological_Sort(Digraph &D){
        int N=D.order(), K=0;

        deque<int> Q;
        vector<int> T(N,0), S;
        for (int i=0; i<N; i++){
            T[i]=D.in_degree(i);
            if (T[i]==0) Q.push_back(i);
        }

        while (!Q.empty()){
            int x=Q.front(); Q.pop_front();
            K++;
            S.emplace_back(x);

            for (auto &a: D.inc_out[x]){
                int y=a.target;
                if (--T[y]==0) Q.push_back(y);
            }
        }

        if (feasible=(K==N)){
            sort=S;
            index=vector<int>(N,0);
            for (int i=0; i<N; i++){index[sort[i]]=i;}
        }else{
            sort=vector<int>{};
            index=vector<int>{};
        }
    }
};

int main(){
    int N,M; cin >> N >> M;

    int s,t;
    Digraph D(N);
    for (int j=0; j<M; j++){
        scanf("%d%d",&s,&t);
        D.add_arc(s,t);
    }

    Topological_Sort T(D);
    for (auto v: T.sort) cout << v << "\n";
}

