#include<iostream>
#include<algorithm>
#include<map>
#include<queue>
#include<stack>
#include<set>
#include<bitset>
#include<vector>
#include<string>

#define rep(i,n) for(int i=0;i<(n);i++)
using namespace std;
using ll=long long;
using P=pair<int,int>;
using P_S=pair<int,string>;

int N;
int Non=-2000000001;

struct Node{
    int id,key,parent_key,left_key,right_key;

    Node()
    {   
        key=left_key=right_key=parent_key=Non;
    }
};

struct Heap{
    Node heap[260];

    void input(int n,int num){
        heap[n+1].key=num;
        heap[n+1].id=n;
    }

    void construct_tree()
    {
        for(int i=1;i<=N;i++){
            heap[i].parent_key=heap[i/2].key;
            if(2*i<=N) heap[i].left_key=heap[2*i].key;
            if(2*i+1<=N) heap[i].right_key=heap[2*i+1].key;          
        }
    }

    void print_info()
    {
        for(int i=1;i<=N;i++){
            string info;
            info+="node "+to_string(heap[i].id)+":";
            info+=" key = "+to_string(heap[i].key)+",";
            if(heap[i].parent_key!=Non) info+=" parent key = "+to_string(heap[i].parent_key)+",";
            if(heap[i].left_key!=Non) info+=" left key = "+to_string(heap[i].left_key)+",";
            if(heap[i].right_key!=Non) info+=" right key = "+to_string(heap[i].right_key)+",";     
            info+=" ";
            cout<<info<<endl;     
        }
    }
};

int main()
{
    cin>>N;
    Heap h;
    rep(i,N){
        int a;
        cin>>a;
        h.input(i,a);
    }

    h.construct_tree();
    h.print_info();
}
