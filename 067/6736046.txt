using System;


class Program
{
    static void Main()
    {
        
        int n = int.Parse(Console.ReadLine()); //回転数を取得
        int R_count = 0;                       //文字列　R　がいくつか
        int G_count = 0;                       //文字列　G　がいくつか
        int B_count = 0;                       //文字列　B　がいくつか
        string tmp;                            //昇順ソートの為の変数
        int count1 = 0;                        //値が == の時カウントプラス
        int count2 = 0;                        //値が 1違う時カウントプラス
        int count_sum = 0;                     //count1かcount2が2になったときカウントプラス３なら条件を満たす
        int[] tmp_three = new int[2];
        int[] tmp_three2 = new int[2];
        int tmp_num = 0;



        for (int i = 0; i < n; i++) {
            string[] num = Console.ReadLine().Split(' ');
            string[] rgb = Console.ReadLine().Split(' ');

            for(int j = 0; j < 9; j++) {      //色を識別
                if(rgb[j] == "R") {
                    R_count++;
                }

                if(rgb[j] == "G") {
                    G_count++;
                }

                if(rgb[j] == "B") {
                    B_count++;
                }
            }

            string[,] R = new string[2,R_count];   //識別した色をもとに配列を初期化
            string[,] G = new string[2, G_count];
            string[,] B = new string[2, B_count];

            R_count = 0;
            G_count = 0;
            B_count = 0;


            //--------------配列に色と数字を入れる-----------------//

            for (int j = 0; j < 9; j++) {           
                if(rgb[j] == "R") {
                    R[0, R_count] = num[j];
                    R[1,R_count] = rgb[j];
                    R_count++;
                }

                if(rgb[j] == "G") {
                    G[0, G_count] = num[j];
                    G[1, G_count] = rgb[j];
                    G_count++;
                }

                if(rgb[j] == "B") {
                    B[0, B_count] = num[j];
                    B[1, B_count] = rgb[j];
                    B_count++;
                }
            }

            //--------------昇順に配列をソート-----------------------//

            for(int j = 0; j < R_count; j++) {
                for(int k = j + 1; k < R_count; k++) {
                    if (int.Parse(R[0,j]) > int.Parse(R[0,k])) {
                        tmp = R[0, j];
                        R[0,j] = R[0,k];
                        R[0,k] = tmp;

                        tmp = R[1, j];
                        R[1, j] = R[1, k];
                        R[1, k] = tmp;
                    }
                }
            }

            for(int j = 0; j < G_count; j++) {
                for(int k = j + 1; k < G_count; k++) {
                    if (int.Parse(G[0,j]) > int.Parse(G[0,k])) {
                        tmp = G[0, j];
                        G[0,j] = G[0,k];
                        G[0,k] = tmp;

                        tmp = G[1, j];
                        G[1, j] = G[1, k];
                        G[1, k] = tmp;
                    }
                }
            }

            for(int j = 0; j < B_count; j++) {
                for(int k = j + 1; k < B_count; k++) {
                    if (int.Parse(B[0,j]) > int.Parse(B[0,k])) {
                        tmp = B[0, j];
                        B[0,j] = B[0,k];
                        B[0,k] = tmp;

                        tmp = B[1, j];
                        B[1, j] = B[1, k];
                        B[1, k] = tmp;
                    }
                }
            }

            //--------------値が同じか、値が1違うか判別-----------------------//

            for (int j = 0; j < R_count; j++) {
                tmp_num = int.Parse(R[0,j]);
                Num_Color(R, tmp_three, tmp_three2, tmp_num, R_count, count1, count2, count_sum, j);

                //string[,] ary, int[] tmp_three, int[] tmp_three2, int tmp_num, int color_count, int count1, int count2, int count_sum, int j
                count1 = 0;
                count2 = 0;
            }

            count1 = 0;
            count2 = 0;

            for (int j = 0; j < G_count; j++) {
                tmp_num = int.Parse(G[0,j]);
                Num_Color(G, tmp_three, tmp_three2, tmp_num, G_count, count1, count2, count_sum, j);
                count1 = 0;
                count2 = 0;
                
            }

            count1 = 0;
            count2 = 0;

            for (int j = 0; j < B_count; j++) {
                tmp_num = int.Parse(B[0,j]);
                Num_Color(B, tmp_three, tmp_three2, tmp_num, B_count, count1, count2, count_sum, j);
                count1 = 0;
                count2 = 0;
            }

            count1 = 0;
            count2 = 0;

            R_count = 0;
            G_count = 0;
            B_count = 0;

            //--------------結果を出力-----------------------//

            if (count_sum == 3) {
                Console.WriteLine(1);
            } else {
                Console.WriteLine(0);
            }

            count_sum = 0;
        }
    }

    static void Num_Color(string[,] ary, int[] three, int[] three2, int ttmp_num, int ccolor_count, int count11, int count22, int ccount_sum, int j) {
        for(int k = 0; k < ccolor_count; k++) {
                    if (ary[0,j] == ary[0,k] && j != k && ary[0,k] != "0" && ary[0,j] != "0") {
                        three[count11] = k;
                        count11++;
                        if (count11 == 2) { 
                            ary[0, three[0]] = "0";
                            ary[0, three[1]] = "0";
                            ary[0, j] = "0";
                            ccount_sum++;
                            break;
                        }
                    } else if(ttmp_num + 1 == int.Parse(ary[0, k]) && j != k && ary[0, k] != "0" && ary[0, j] != "0") {
                        ttmp_num = int.Parse(ary[0, k]);
                        three2[count22] = k;
                        count22++;
                        if (count22 == 2) { 
                            ary[0, three2[0]] = "0";
                            ary[0, three2[1]] = "0";
                            ary[0, j] = "0";
                            ccount_sum++;
                            break;
                        }
                    } 
                }
    }
}
