#include<bits/stdc++.h>
using namespace std;
struct dsu {
  public:
    dsu() : _n(0) {}
    explicit dsu(int n) : _n(n), parent_or_size(n, -1) {}

    int merge(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        int x = leader(a), y = leader(b);
        if (x == y) return x;
        if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);
        parent_or_size[x] += parent_or_size[y];
        parent_or_size[y] = x;
        return x;
    }

    bool same(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        return leader(a) == leader(b);
    }

    int leader(int a) {
        assert(0 <= a && a < _n);
        if (parent_or_size[a] < 0) return a;
        return parent_or_size[a] = leader(parent_or_size[a]);
    }

    int size(int a) {
        assert(0 <= a && a < _n);
        return -parent_or_size[leader(a)];
    }

    std::vector<std::vector<int>> groups() {
        std::vector<int> leader_buf(_n), group_size(_n);
        for (int i = 0; i < _n; i++) {
            leader_buf[i] = leader(i);
            group_size[leader_buf[i]]++;
        }
        std::vector<std::vector<int>> result(_n);
        for (int i = 0; i < _n; i++) {
            result[i].reserve(group_size[i]);
        }
        for (int i = 0; i < _n; i++) {
            result[leader_buf[i]].push_back(i);
        }
        result.erase(
            std::remove_if(result.begin(), result.end(),
                           [&](const std::vector<int>& v) { return v.empty(); }),
            result.end());
        return result;
    }

  private:
    int _n;
    // root node: -1 * component size
    // otherwise: parent
    std::vector<int> parent_or_size;
};
int main(){
  while(true){
    int m, n, p;
    cin >> m >> n >> p;
    p--;
    if(m == 0 && n == 0 && p == -1) break;
    vector<int> a(n), b(n);
    bool flag = false;
    vector<int> cnt(m);
    cnt[p] = 1;
    for(int i = 0; i < n; i++){
      cin >> a[i] >> b[i];
      a[i]--; b[i]--;
      if(a[i] == p || b[i] == p){
        flag = true;
        cnt[a[i]] = 1;
        cnt[b[i]] = 1;
      }
      if(flag){
        if(cnt[a[i]]) cnt[b[i]] = 1;
        if(cnt[b[i]]) cnt[a[i]] = 1;
      }
    }
    int ans = 0;
    for(int i = 0; i < m; i++) ans += cnt[i];
    cout << ans << endl;
  }
  return 0;
}
