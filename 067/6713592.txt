#define _USE_MATH_DEFINES
#include<bits/stdc++.h>
#include<unordered_map>

using namespace std;
#define LP(I,S,G) for (long long int I = (S); I < (G); I++)
#define IN(X) 	for (int in = 0; in < X.size(); in++)cin >> X[in]
#define OUT(X) 	for (int in = 0; in < X.size(); in++)cout << X[in]<<" "
#define SORT(X) sort((X).begin(), (X).end())
#define CSORT(X,Y) sort(X.begin(), X.end(),Y)
#define COPY(X,Y) copy(X.begin(), X.end(), Y.begin())
#define ALL(X,Y) for (auto X = (Y).begin(); X != (Y).end(); X++)
#define FULL(a)  (a).begin(),(a).end()
#define BFS(Q,S) for(Q.push(S);Q.size()!=0;Q.pop())
typedef long long int ll;
typedef unsigned long long int ull;
long long int M = pow(10, 9) + 7;


int dx[] = { 0,-1,0,1 }, dy[] = { -1,0,1,0 };

ll MAX(ll A, ll B) { return ((A) > (B) ? (A) : (B)); }
ll MIN(ll A, ll B) { return ((A) < (B) ? (A) : (B)); }
long long int xor128() {
	static long long int x = 123456789, y = 362436069, z = 521288629, w = 88675123;
	long long int t = (x ^ (x << 11));
	x = y; y = z; z = w;
	return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
}

struct HashPair {
	//注意 constがいる
	template<class T1, class T2>
	size_t operator()(const pair<T1, T2> &p) const {
		//first分をハッシュ化する
		auto hash1 = hash<T1>{}(p.first);
		//second分をハッシュ化する
		auto hash2 = hash<T2>{}(p.second);
		//重複しないようにハッシュ処理
		size_t seed = 0;
		seed ^= hash1 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		seed ^= hash2 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		return seed;
	}
};
template<class I1, class I2>
istream& operator>>(istream& s, pair<I1, I2>& in) {
	s >> in.first >> in.second;
	return s;
}



int main() {
	ll k;
	cin >> k;
	vector<vector<ll>> t(8, vector<ll>(8, 0));
	vector<ll> yt(8, -1);
	LP(i, 0, k) {
		ll x, y;
		cin >> x >> y;
		yt[x] = y;
		LP(i, 0, 8) {
			t[i][y] = 1;
			t[x][i] = 1;
		}
		LP(i, -8, 9) {
			if (x + i < 0 || y + i < 0 || x + i >= 8 || y + i >= 8)continue;
			t[x + i][y + i] = 1;
		}
		LP(i, -8, 9) {
			if (x + i < 0 || y - i < 0 || x + i >= 8 || y - i >= 8)continue;
			t[x + i][y - i] = 1;
		}
	}
	vector<ll> p(8);
	LP(i, 0, 8)p[i] = i;
	do {
		vector<vector<ll>> ct = t;
		vector<ll> cy = yt;
		bool ok = 1;
		LP(i, 0, 8) {
			if (cy[i] == -1) {
				cy[i] = p[i];
				if (ct[i][cy[i]] == 1) {
					ok = 0;

					break;
				}
			}
			else if (cy[i] != p[i]) {
				ok = 0;
				break;
			}
			
			ll x = i, y = cy[i];
			LP(i, 0, 8) {
				ct[i][y] = 1;
				ct[x][i] = 1;
			}
			LP(i, -8, 9) {
				if (x + i < 0 || y + i < 0 || x + i >= 8 || y + i >= 8)continue;
				ct[x + i][y + i] = 1;
			}
			LP(i, -8, 9) {
				if (x + i < 0 || y - i < 0 || x + i >= 8 || y - i >= 8)continue;
				ct[x + i][y - i] = 1;
			}
		}
		if (ok) {
			LP(i, 0, 8) {
				LP(k, 0, 8) {
					if (k == cy[i])cout << 'Q';
					else cout << '.';
				}
				cout << "\n";
			}
			return 0;
		}
	} while (next_permutation(FULL(p)));
	return 0;
}

