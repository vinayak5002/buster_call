#include <iostream>
#include <algorithm>
#include <cmath>
#include <numeric>
#include <iomanip>
#include <string>
#include <array>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <queue>
using namespace std;
#define rep(x,to) for(int x=0;x<to;++x)
#define rep2(x,from,to) for(int x=from;x<to;++x)
typedef long long ll;
typedef unsigned long long ull;
 
struct UnionFind {
  vector<int> par;

  UnionFind(int n) : par(n) {
    for (int i = 0; i < n; i++) {
      par[i] = i;
    }
  }

  int find(int x) {
    if (par[x] == x)
      return x;
    else {
      par[x] = find(par[x]);
      return par[x];
    }
  }

  void unite(int x, int y) {
    x = find(x);
    y = find(y);
    par[y] = x;
  }
  
  bool same(int x, int y) {
    x = find(x);
    y = find(y);
    return x == y;
  }
};

struct Edge{
  int a, b, cost;
  
  bool operator<(const Edge& o) { 
    return cost < o.cost; 
  }
};

struct Graph{
  // 頂点数
  int n;
  // 辺集合
  vector<Edge> es;
  
  int kruskal() {
    sort(es.begin(), es.end());
    
    UnionFind uf(n);
    int min_cost = 0;
    rep(ei, (int)es.size()) {
      Edge &e = es[ei];
      if(!uf.same(e.a, e.b)) {
        // 辺を追加しても閉路ができないなら、その辺を採用する
        min_cost += e.cost;
        uf.unite(e.a, e.b);
      }
    }
    return min_cost;
  }
};

int main() {
  int m;
  Graph g;
  cin >> g.n >> m;
  rep(i,m) {
    Edge e;
    cin >> e.a >> e.b >> e.cost;
    g.es.push_back(e);
  }
  cout << g.kruskal() << endl; 
}
