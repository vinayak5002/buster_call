#include "bits/stdc++.h"
using namespace std;

typedef complex<double> xy_t;

double dot_product(xy_t a, xy_t b){
    return (conj(a)*b).real();
}

double cross_product(xy_t a, xy_t b){
    return (conj(a)*b).imag();
}

xy_t projection(xy_t p, xy_t b){//pのb方向への投影
    return b*dot_product(p,b)/norm(b);
}

const double eps = 1e-11; 
// 2本のベクトルが作る三角形の面積がこれ以下なら0とみなせる，とする．
//数値誤差があるので，並行であってもぴったり0になるとは限らない！
double x[4], y[4];
int n;

int main(){
    cin >> n;
    for(int t=0; t<n;t++){
        for(int i=0; i<4; i++){
            cin >> x[i] >> y[i];
        }
        xy_t a[2] = {
            xy_t(x[0], y[0]) - xy_t(x[1], y[1]),
            xy_t(x[2], y[2]) - xy_t(x[3], y[3]),
        };

        bool p = abs(cross_product(a[0], a[1])) < eps;
        cout << (p ? "YES" : "NO") << endl;//こんな書き方ができる．

    }
}


