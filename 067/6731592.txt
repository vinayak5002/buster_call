#include <bits/stdc++.h>  
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef queue<int> qi;
typedef priority_queue<int> pqi;
typedef priority_queue<int, vector<int>, greater<int>> mpqi;
typedef pair<int, int> pi;
typedef vector<ll> vl;
#define mp make_pair
#define pb push_back
#define MAX_N 200005
ll INF = 1e18;
#define md107 1000000007
#define rep(i, a, b) for (int i = (int)(a); i <= (int)(b); i++)
#define rrep(i, a, b) for (int i = (int)(a); i >= (int)(b); i--)
typedef vector<vector<int>> vvi;
int n;
void solve(){
    while (true)
    {
        string s1; string s2;
        cin >> s1;
        if (s1 == ".") {
            break;
        } 
        cin >> s2; 
        if (s1 == s2) {
            cout << "IDENTICAL" << endl;
            continue;
        }
        int cnt = 0;
        int l1 = s1.length();
        int l2 = s2.length();
        int cnt1 = 0;
        int cnt2 = 0;
        string tmp = "";
        vector<string> a;
        vector<string> b;
        for (auto c : s1) {
            if (c == '\"') {
                a.pb(tmp);
                tmp = "";
            } else {
                tmp.push_back(c);
            }
        }
        tmp = "" ; 
        for (auto c : s2) {
            if (c == '\"') {
                b.pb(tmp);
                tmp = "";
            } else {
                tmp.push_back(c);
            }
        }
        if (a.size() != b.size()) {
            cout << "DIFFERENT" << endl;
            continue;
        }
        
        int j = 0;
        int diff = 0;
        int flag = 0;
        for (auto x : a) {
            if (x != b[j]) {
                if (j % 2 == 0) {
                    flag++;
                } else {
                    diff++;
                }
            }
            j++;
        }
        if (flag || diff > 1) {
            cout << "DIFFERENT" << endl;
            continue;
        }
            
        cout << "CLOSE" << endl;

    }
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
    return 0;
}
