#include<bits/stdc++.h>
//#include<atcoder/dsu>
using namespace std;
//using namespace atcoder;

// https://algo-method.com/tasks/553/editorial
template<class T> T pow_mod(T A, T N, T M) {
    T res = 1 % M;
    A %= M;
    while (N) {
        if (N & 1) res = (res * A) % M;
        A = (A * A) % M;
        N >>= 1;
    }
    return res;
}

bool is_prime(long long N) {
    if (N <= 1) return false;
    if (N == 2 || N == 3) return true;
    if (N % 2 == 0) return false;
    vector<long long> A = {2, 325, 9375, 28178, 450775,
                           9780504, 1795265022};
    long long s = 0, d = N - 1;
    while (d % 2 == 0) {
        ++s;
        d >>= 1;
    }
    for (auto a : A) {
        if (a % N == 0) return true;
        long long t, x = pow_mod<__int128_t>(a, d, N);
        if (x != 1) {
            for (t = 0; t < s; ++t) {
                if (x == N - 1) break;
                x = __int128_t(x) * x % N;
            }
            if (t == s) return false;
        }
    }
    return true;
}

// Pollard のロー法
long long gcd(long long A, long long B) {
    A = abs(A), B = abs(B);
    if (B == 0) return A;
    else return gcd(B, A % B);
}
    
long long pollard(long long N) {
    if (N % 2 == 0) return 2;
    if (is_prime(N)) return N;

    auto f = [&](long long x) -> long long {
        return (__int128_t(x) * x + 1) % N;
    };
    long long step = 0;
    while (true) {
        ++step;
        long long x = step, y = f(x);
        while (true) {
            long long p = gcd(y - x + N, N);
            if (p == 0 || p == N) break;
            if (p != 1) return p;
            x = f(x);
            y = f(f(y));
        }
    }
}

vector<long long> prime_factorize(long long N) {
    if (N == 1) return {};
    long long p = pollard(N);
    if (p == N) return {p};
    vector<long long> left = prime_factorize(p);
    vector<long long> right = prime_factorize(N / p);
    left.insert(left.end(), right.begin(), right.end());
    sort(left.begin(), left.end());
    return left;
}

void solve(){
    while(1){
        long long n;
        cin >> n;
        if(n == 0) return;
        auto pl = prime_factorize(n);
        set<long long> div;
        div.insert(1);
        pl.push_back(-1);
        long long bp = pl[0];
        int cnt = 0;
        for(auto p:pl){
            if(bp != p){
                long long times = bp;
                set<long long> add;
                while(cnt){
                    cnt--;                    
                    for(auto d:div){
                        add.insert(d * times);
                    }
                    times *= bp;
                }
                for(auto a:add) div.insert(a);
                bp = p;
            }
            cnt++;
        }
        vector<long long> divs;
        for(auto d:div) divs.push_back(d);
        sort(divs.begin(), divs.end());
        long long ans = n + 2;
        map<long long, long long> two;
        for(auto d:divs){
            long long sq = sqrtl(d);
            auto it = lower_bound(divs.begin(), divs.end(), sq);
            two[d] = (*it) + d / (*it);
            ans = min(ans, two[d] + n / d);
        }
        cout << ans << "\n";


    }
}

int main(){	
	cin.tie(0)->sync_with_stdio(0);
    int t;
    t = 1;
    // cin >> t;
    while(t--) solve();
}

