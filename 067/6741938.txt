#define FACE_NUM 6
#define VALUE_MAX 100
#define VALUE_MIN 0
#define COM_MAX 100
#define COM_MIN 0
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

/*Initialization for an int array*/
void initialize (int a[FACE_NUM]);
/*Get an array from console input*/
void getArray (int a[FACE_NUM]);
/*Operation of rolling to the E direction*/
void rolltoE (int a[FACE_NUM]);
/*Operation of rolling to the N direction*/
void rolltoN (int a[FACE_NUM]);
/*Operation of rolling to the S direction*/
void rolltoS (int a[FACE_NUM]);
/*Operation of rolling to the W direction*/
void rolltoW (int a[FACE_NUM]);
/*Processing all the input commands on the input array*/
void process(int a[FACE_NUM], char str[COM_MAX+1]);

int main()
{
    int values[FACE_NUM];               /*Define a variable storing the input array*/
    initialize(values);                 /*Initialize the int array variable*/
    getArray(values);                   /*Read the input and store the values into the variable*/

    char commands[COM_MAX+1]={'\0'};    /*Define a variable storing the input commands*/
    scanf("%s",commands);               /*Read the input commands*/
    
    /*Error check for commands length*/
    if (strlen(commands) > COM_MAX)
    {
        printf("ERROR: The number of commands must be less than or equal to 100.\n");
        exit(0);
    }
    else if (strlen(commands) < COM_MIN)
    {
        printf("ERROR: The number of commands must be greater than or equal to 0.\n");
        exit(0);       
    }

    process(values,commands);
    printf("%d\n",values[0]);

    return 0;
}

void initialize (int a[FACE_NUM])
{
    int i=0;
    for (i=0;i<FACE_NUM;i++)
    {
        a[i]=0;
    }
    return;
}

void getArray (int a[FACE_NUM])
{
    int i=0;
    for (i=0;i<FACE_NUM;i++)
    {
        scanf("%d",&a[i]);
        /*Error check for the input value*/
        if (a[i]>VALUE_MAX)
        {
            printf("ERROR: The input value must be less than or equal to 100.\n");
            exit(0);
        }
        else if (a[i]<VALUE_MIN)
        {
            printf("ERROR: The input value must be greater than or equal to 0.\n");
        }
    }
    return;
}

void rolltoE (int a[FACE_NUM])
{
    int temp_arr[6]={0,0,0,0,0,0};
    temp_arr[0]=a[3];
    temp_arr[1]=a[1];
    temp_arr[2]=a[0];
    temp_arr[3]=a[5];
    temp_arr[4]=a[4];
    temp_arr[5]=a[2];
    
    int i=0;
    for(i=0;i<FACE_NUM;i++)
    {
        a[i]=temp_arr[i];
    }
    return;
}

void rolltoN (int a[FACE_NUM])
{
    int temp_arr[6]={0,0,0,0,0,0};
    temp_arr[0]=a[1];
    temp_arr[1]=a[5];
    temp_arr[2]=a[2];
    temp_arr[3]=a[3];
    temp_arr[4]=a[0];
    temp_arr[5]=a[4];

    int i=0;
    for(i=0;i<FACE_NUM;i++)
    {
        a[i]=temp_arr[i];
    }
    return;
}

void rolltoS (int a[FACE_NUM])
{
    int temp_arr[6]={0,0,0,0,0,0};
    temp_arr[0]=a[4];
    temp_arr[1]=a[0];
    temp_arr[2]=a[2];
    temp_arr[3]=a[3];
    temp_arr[4]=a[5];
    temp_arr[5]=a[1];

    int i=0;
    for(i=0;i<FACE_NUM;i++)
    {
        a[i]=temp_arr[i];
    }
    return;
}

void rolltoW (int a[FACE_NUM])
{
    int temp_arr[6]={0,0,0,0,0,0};
    temp_arr[0]=a[2];
    temp_arr[1]=a[1];
    temp_arr[2]=a[5];
    temp_arr[3]=a[0];
    temp_arr[4]=a[4];
    temp_arr[5]=a[3];

    int i=0;
    for(i=0;i<FACE_NUM;i++)
    {
        a[i]=temp_arr[i];
    }
    return;
}

void process(int a[FACE_NUM], char str[COM_MAX+1])
{
    int i=0;
    while (str[i]!='\0')
    {   
        switch (str[i])
        {
            case 'E':
            rolltoE(a);
            break;

            case 'N':
            rolltoN(a);
            break;

            case 'S':
            rolltoS(a);
            break;

            case 'W':
            rolltoW(a);
            break;

            default:
            printf("ERROR: Invalid command included.\n");
            exit(1);
        }
        i++;
    }
    return;
}


