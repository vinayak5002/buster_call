#define BUF_SIZE 1024

#include <stdio.h>
#include <string.h>

struct dice {
	int up;
	int south;
	int east;
	int west;
	int north;
	int down;
};

void roll_south(struct dice *d) {
	int tmp;
	tmp = d->south;
	d->south = d->up;
	d->up = d->north;
	d->north = d->down;
	d->down = tmp;
}

void roll_east(struct dice *d) {
	int tmp;
	tmp = d->east;
	d->east = d->up;
	d->up = d->west;
	d->west = d->down;
	d->down = tmp;
}

void roll_west(struct dice *d) {
	int tmp;
	tmp = d->west;
	d->west = d->up;
	d->up = d->east;
	d->east = d->down;
	d->down = tmp;
}

void roll_north(struct dice *d) {
	int tmp;
	tmp = d->north;
	d->north = d->up;
	d->up = d->south;
	d->south = d->down;
	d->down = tmp;
}



int main(void)
{
	char buf[BUF_SIZE];
	char command;
	int up, south, east, west, north, down;

	fgets(buf, sizeof(buf) - 1, stdin);
	sscanf(buf, "%d %d %d %d %d %d", &up, &south, &east, &west, &north, &down);
	struct dice d = { up, south, east, west, north, down };
	fgets(buf, sizeof(buf) - 1, stdin);
	while(strcmp(buf, "\n")) {
		sscanf(buf, "%c%[^\0]", &command, buf);
		switch (command) {
		case 'E':
			roll_east(&d);
			break;
		case 'W':
			roll_west(&d);
			break;
		case 'S':
			roll_south(&d);
			break;
		case 'N':
			roll_north(&d);
			break;
		default:
			break;
		}
	}
	printf("up:%d\n", d.up);

	return 0;
}
