INF = 2**31 - 1 # 2147483647

n, q = map(int, input().split())

N = 2 # init N to calculate the size of the tree 
# size of the tree is power of 2
while N < n: 
    N *= 2

d = [INF for _ in range(0, 2 * N - 1)]
lazy = [INF for _ in range(0, 2 * N - 1)]

def lazy_evaluation(k): 
    if lazy[k] != INF: 
        d[k] = lazy[k]
        if k < N - 1: 
            lazy[k * 2 + 1] = lazy[k]
            lazy[k * 2 + 2] = lazy[k]
        lazy[k] = INF
    
def update(a, b, k, l, r, x): 
    if r <= a or b <= l:
        return 
    lazy_evaluation(k)
    if a <= l and r <= b:
        lazy[k] = x
    else: 
        update(a, b, k * 2 + 1, l, (l + r) // 2, x)
        update(a, b, k * 2 + 2, (l + r) // 2, r, x)
        d[k] = min(d[k * 2 + 1], d[k * 2 + 2])
    lazy_evaluation(k)

def query(a, b, k, l, r): 
    if r <= a or b <= l: 
        return INF
    lazy_evaluation(k)
    if a <= l and r <= b: 
        return d[k]
    vl = query(a, b, k * 2 + 1, l, (l + r) // 2)
    vr = query(a, b, k * 2 + 2, (l + r) // 2, r)
    return min(vl, vr)

def update_range(a, b, x): 
    update(a, b + 1, 0, 0, N, x)

def find(k): 
    return query(k, k+1, 0, 0, N)

for _ in range(q): 
    temp = tuple(map(int, input().split()))   
    if temp[0] == 0:
        update(temp[1], temp[2] + 1, 0, 0, N, temp[3])
    elif temp[0] == 1:
        print(query(temp[1], temp[1] + 1, 0, 0, N))
