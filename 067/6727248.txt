#include <stdio.h>

#define MAX 100
#define WHITE 0
#define GRAY 1
#define BLACK 2

int data[MAX][MAX];
int f[MAX];
int d[MAX];
int color[MAX];
int n, tt;

//再帰による深さ優先探索
void dfs_visit(int u)
{
    int v;
    color[u] = GRAY;
    d[u] = ++tt;
    for (v = 0; v < n; v++)
    {
        if (data[u][v] == 0)
        {
            continue;
        }
        if (color[v] == WHITE)
        {
            dfs_visit(v);
        }
    }

    color[u] = BLACK;
    f[u] = ++tt;
}

//深さ優先探索の初期化と実行
void dfs()
{
    int u;
    //訪問判別配列の初期化
    for (u = 0; u < n; u++)
    {
        color[u] = WHITE;
    }

    tt = 0;

    //深さ優先探索の実行
    for (u = 0; u < n; u++)
    {
        if (color[u] == WHITE)
        {
            dfs_visit(u);
        }
    }

    for (u = 0; u < n; u++)
    {
        printf("%d %d %d\n", u + 1, d[u], f[u]);
    }
}

int main(void)
{
    //変数の宣言
    int k, u, i, j, v;

    //データ数の取得
    scanf("%d", &n);

    //構造体配列の初期化
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            data[i][j] = 0;
        }
    }

    //データの格納
    for (i = 0; i < n; i++)
    {
        scanf("%d %d", &u, &k); //頂点番号と出次数の取得

        u--;

        for (j = 0; j < k; j++)
        {
            scanf("%d", &v); //隣接頂点番号の格納
        }
        v--;
        data[u][v] = 1;
    }

    dfs();

    return 0;
}
