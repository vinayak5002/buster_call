#include <iostream>
#include <cmath>
#include <climits>
using namespace std;


const int INF = INT_MAX; // 2^31-1
const int N = 100005 * 10;

int D[N];
int lazy[N];
int n, q;

void initRMQ(int n_){
    n=1;
    while(n < n_){
        n *= 2;
    }

    for(int i=0; i<2*n-1; i++){
        D[i] = INF;
    }
}


void lazy_evaluate(int k){
    if(lazy[k] != INF){
        D[k] = lazy[k];
        if(k < n-1){
            lazy[2*k+1] = lazy[k];
            lazy[2*k+2] = lazy[k];
        }
        lazy[k] = INF;
    }
}


void update(int a,int b,int k,int l,int r,int x){

  lazy_evaluate(k);

  if(r<=a||b<=l)return;
  if(a<=l&&r<=b)lazy[k]=x;
  else{
  update(a,b,k*2+1,l,(l+r)/2,x);
  update(a,b,k*2+2,(l+r)/2,r,x);
  D[k] = min(D[k*2+1], D[k*2+2]);
  }

  lazy_evaluate(k);
}

// [a,b)までを探索
int query(int a, int b, int k, int l, int r){
  if(r<=a || b<=l) return INF;

  lazy_evaluate(k);

  if(a<=l && r<=b) return D[k];


  int vl, vr;
  vl = query(a, b, k*2+1, l, (l + r)/2);
  vr = query(a, b, k*2+2, (l + r)/2, r);
  return min(vl, vr);
  
}

// [a,b]までを探索
int find(int a, int b){
    return query(a, b+1, 0, 0, n);
}


int main(){

    cin >> n >> q;

    initRMQ(n);

    for(int i=0; i<q; i++){
        int com;
        cin >> com;
        if(com==0){
            int s, t, x;
            cin >> s >> t >> x;
            update(s, t+1, 0, 0, n, x);

        }else if(com==1){
            int s, t;
            cin >> s >> t;
            cout << find(s, t) << endl;
        }
    }

    return 0;
}
