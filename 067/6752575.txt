#!/usr/bin/env pypy3
from collections import Counter, deque, defaultdict
from itertools import permutations, combinations, accumulate, product, chain
from functools import lru_cache
from bisect import bisect, bisect_left, insort, insort_left
from heapq import heapify, heappush, heappop
from array import array
from decimal import Decimal
from copy import deepcopy
from pprint import pprint
from string import ascii_uppercase, ascii_lowercase, ascii_letters
from math import factorial, floor, ceil, sqrt, log, log2, log10
import math
import sys
sys.setrecursionlimit(1<<30)

read = sys.stdin.read
readline = sys.stdin.readline
readlines = sys.stdin.readlines

def DFS(S, v):

    global dp

    if dp[S][v] != -1:
        return dp[S][v]

    if S == 1 << v:
        return R[0][v]

    SS = S & ~(1 << v)
    res = INF

    for i in range(V):
        if R[i][v] == INF:
            continue
        if SS & (1 << i):
            res = min(res, DFS(SS, i) + R[i][v])

    dp[S][v] = res
    return res


if __name__ == '__main__':
    V, E = map(int, readline().split())
    INF = 1 << 30
    R = [[INF] * V for _ in range(V)]
    for i in range(V):
        R[i][i] = 0
    for _ in range(E):
        s, t, d = map(int, readline().split())
        R[s][t] = d

    dp = [[-1] * V for _ in range(1 << V)]
    ANS = DFS((1<<V)-1, 0)

    print(ANS if ANS != INF else -1)

