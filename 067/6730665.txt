n = int(input())
nodes = []
for i in range(n):
    node = list(map(int, input().split(' ')))
    node = node[:2] + [[*node[2:]]]
    nodes.append(node)

# nodes = [[0, 0, []], [1, 3, [2, 3, 0]], [2, 0, []], [3, 0, []]]
# n = 4

def main(nodes, n):
    graph = [[-1, 0, []] for i in range(n)]
    for i in range(n):
        # write children
        id_ = i 
        graph[id_][2] = nodes[i][2]
        for j in graph[id_][2]:
            # set parent
            graph[j][0] = id_
            
    # find out root node
    root = next((i for i in graph if i[0] == -1), False)
    if root == False:
        raise Exception('Invalid data structure.')
        
    print(root)
    
    def setDepth(node, depth=0):
        # recursively set depth 
        node[1] = depth
        for i in node[2]:
            setDepth(graph[i], depth+1)
    setDepth(root)
    
    #output
    for i in range(n):
        node = graph[i]
        status = 'internal node'
        if node[0] == -1:
            status = 'root'
        elif node[2] == []:
            status = 'leaf'
        print(f'node {i}: parent = {node[0]}, depth = {node[1]}, {status}, {node[2]}')
main(nodes, n)
