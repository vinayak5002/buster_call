/**
 *    author:  otera
**/
#include<bits/stdc++.h>
using namespace std;

// #define int long long

using ll = long long;
using ld = long double;
using ull = unsigned long long;
using int128_t = __int128_t;
#define repa(i, n) for(int i = 0; i < n; ++ i)
#define repb(i, a, b) for(int i = a; i < b; ++ i)
#define repc(i, a, b, c) for(int i = a; i < b; i += c)
#define overload4(a, b, c, d, e, ...) e
#define overload3(a, b, c, d, ...) d
#define rep(...) overload4(__VA_ARGS__, repc, repb, repa)(__VA_ARGS__)
#define rep1a(i, n) for(int i = 0; i <= n; ++ i)
#define rep1b(i, a, b) for(int i = a; i <= b; ++ i)
#define rep1c(i, a, b, c) for(int i = a; i <= b; i += c)
#define rep1(...) overload4(__VA_ARGS__, rep1c, rep1b, rep1a)(__VA_ARGS__)
#define rev_repa(i, n) for(int i=n-1;i>=0;i--)
#define rev_repb(i, a, b) assert(a > b);for(int i=a;i>b;i--)
#define rev_rep(...) overload3(__VA_ARGS__, rev_repb, rev_repa)(__VA_ARGS__)
#define rev_rep1a(i, n) for(int i=n;i>=1;i--)
#define rev_rep1b(i, a, b) assert(a >= b);for(int i=a;i>=b;i--)
#define rev_rep1(...) overload3(__VA_ARGS__, rev_rep1b, rev_rep1a)(__VA_ARGS__)
typedef pair<int, int> P;
typedef pair<ll, ll> LP;
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define eb emplace_back
#define fr first
#define sc second
#define all(c) c.begin(),c.end()
#define rall(c) c.rbegin(), c.rend()
#define lb(c, x) distance((c).begin(), lower_bound(all(c), (x)))
#define ub(c, x) distance((c).begin(), upper_bound(all(c), (x)))
#define Sort(a) sort(all(a))
#define Rev(a) reverse(all(a))
#define Uniq(a) sort(all(a));a.erase(unique(all(a)),end(a))
#define si(c) (int)(c).size()
inline ll popcnt(ull a){ return __builtin_popcountll(a); }
#define kth_bit(x, k) ((x>>k)&1)
#define unless(A) if(!(A))
ll intpow(ll a, ll b){ ll ans = 1; while(b){ if(b & 1) ans *= a; a *= a; b /= 2; } return ans; }
ll intpow(ll a, ll b, ll m) {ll ans = 1; while(b){ if(b & 1) (ans *= a) %= m; (a *= a) %= m; b /= 2; } return ans; }
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
#define INT(...) int __VA_ARGS__;in(__VA_ARGS__)
#define LL(...) ll __VA_ARGS__;in(__VA_ARGS__)
#define ULL(...) ull __VA_ARGS__;in(__VA_ARGS__)
#define STR(...) string __VA_ARGS__;in(__VA_ARGS__)
#define CHR(...) char __VA_ARGS__;in(__VA_ARGS__)
#define DBL(...) double __VA_ARGS__;in(__VA_ARGS__)
#define LD(...) ld __VA_ARGS__;in(__VA_ARGS__)
#define vec(type,name,...) vector<type>name(__VA_ARGS__)
#define VEC(type,name,size) vector<type>name(size);in(name)
#define vv(type,name,h,...) vector<vector<type>>name(h,vector<type>(__VA_ARGS__))
#define VV(type,name,h,w) vector<vector<type>>name(h,vector<type>(w));in(name)
#define vvv(type,name,h,w,...) vector<vector<vector<type>>>name(h,vector<vector<type>>(w,vector<type>(__VA_ARGS__)))
template <class T> using vc = vector<T>;
template <class T> using vvc = vector<vc<T>>;
template <class T> using vvvc = vector<vvc<T>>;
template <class T> using vvvvc = vector<vvvc<T>>;
template <class T> using pq = priority_queue<T>;
template <class T> using pqg = priority_queue<T, vector<T>, greater<T>>;
template <class T, class U> using umap = unordered_map<T, U>;
template<class T> void scan(T& a){ cin >> a; }
template<class T> void scan(vector<T>& a){ for(auto&& i : a) scan(i); }
void in(){}
template <class Head, class... Tail> void in(Head& head, Tail&... tail){ scan(head); in(tail...); }
void print(){ cout << ' '; }
template<class T> void print(const T& a){ cout << a; }
template<class T> void print(const vector<T>& a){ if(a.empty()) return; print(a[0]); for(auto i = a.begin(); ++i != a.end(); ){ cout << ' '; print(*i); } }
int out(){ cout << '\n'; return 0; }
template<class T> int out(const T& t){ print(t); cout << '\n'; return 0; }
template<class Head, class... Tail> int out(const Head& head, const Tail&... tail){ print(head); cout << ' '; out(tail...); return 0; }
#define CHOOSE(a) CHOOSE2 a
#define CHOOSE2(a0,a1,a2,a3,a4,x,...) x
#define debug_1(x1) cout<<#x1<<": "<<x1<<endl
#define debug_2(x1,x2) cout<<#x1<<": "<<x1<<", "#x2<<": "<<x2<<endl
#define debug_3(x1,x2,x3) cout<<#x1<<": "<<x1<<", "#x2<<": "<<x2<<", "#x3<<": "<<x3<<endl
#define debug_4(x1,x2,x3,x4) cout<<#x1<<": "<<x1<<", "#x2<<": "<<x2<<", "#x3<<": "<<x3<<", "#x4<<": "<<x4<<endl
#define debug_5(x1,x2,x3,x4,x5) cout<<#x1<<": "<<x1<<", "#x2<<": "<<x2<<", "#x3<<": "<<x3<<", "#x4<<": "<<x4<<", "#x5<<": "<<x5<<endl
#ifdef DEBUG
#define debug(...) CHOOSE((__VA_ARGS__,debug_5,debug_4,debug_3,debug_2,debug_1,~))(__VA_ARGS__)
#define dump(...) { print(#__VA_ARGS__); print(":"); out(__VA_ARGS__); }
#else
#define debug(...)
#define dump(...)
#endif

struct io_setup {
    io_setup(int precision = 20) {
        ios::sync_with_stdio(false);
        cin.tie(0);
        cout << fixed << setprecision(precision);
    }
} io_setup_ {};

template <typename T, std::enable_if_t<std::is_integral_v<T>, std::nullptr_t> = nullptr>
struct Rational {
    T num, den;

    Rational() : Rational(0) {}
    Rational(T n) : num(n), den(1) {}
    Rational(T n, T d) {
        if (n == 0) {
            assert(d != 0);
            num = 0, den = 1;
        } else {
            T g = std::gcd(n, d);
            n /= g, d /= g;
            if (d < 0) n = -n, d = -d;
            num = n, den = d;
        }
    }

    // l > 0 -> 1, l = 0 -> 0, l < 0 -> -1
    int signum() const {
        return -1 + (num >= 0) + (num > 0);
    }

    // l > r -> 1, l = r -> 0, l < r -> -1
    static int compare(const Rational &l, const Rational &r) {
        auto pow_m1 = [](bool x) { return -int(x) | 1; };
        const int sgn_l = l.signum(), sgn_r = r.signum();
        if (l.num == 0) return -sgn_r;
        if (r.num == 0) return +sgn_l;
        if ((sgn_l ^ sgn_r) < 0) return sgn_l;
        T nl = std::abs(l.num), dl = l.den, nr = std::abs(r.num), dr = r.den;
        bool rev = sgn_l < 0;
        for (; dl and dr; rev = -rev) {
            T ql = nl / dl, qr = nr / dr;
            if (ql != qr) return pow_m1((ql < qr) xor rev);
            T rl = nl % dl, rr = nr % dr;
            nl = dl, dl = rl;
            nr = dr, dr = rr;
        }
        return dl or dr ? pow_m1((dr > 0) xor rev) : 0;
    }
    
    friend bool operator<(const Rational &l, const Rational &r) {
        return compare(l, r) < 0;
    }
    friend bool operator>(const Rational &l, const Rational &r) {
        return compare(l, r) > 0;
    }
    friend bool operator<=(const Rational &l, const Rational &r) {
        return compare(l, r) <= 0;
    }
    friend bool operator>=(const Rational &l, const Rational &r) {
        return compare(l, r) >= 0;
    }
    friend bool operator==(const Rational &l, const Rational &r) {
        return compare(l, r) == 0;
    }
    friend bool operator!=(const Rational &l, const Rational &r) {
        return compare(l, r) != 0;
    }

    Rational operator+() const {
        return *this;
    }
    Rational operator-() const {
        return Rational(-num, den);
    }
    friend Rational operator+(const Rational &l, const Rational &r) {
        T lcm = l.den / std::gcd(l.den, r.den) * r.den;
        return Rational(l.num * (lcm / l.den) + r.num * (lcm / r.den), lcm);
    }
    friend Rational operator-(const Rational &l, const Rational &r) {
        T lcm = l.den / std::gcd(l.den, r.den) * r.den;
        return Rational(l.num * (lcm / l.den) - r.num * (lcm / r.den), lcm);
    }
    friend Rational operator*(const Rational &l, const Rational &r) {
        T g1 = std::gcd(l.num, r.den);
        T g2 = std::gcd(l.den, r.num);
        return Rational((l.num / g1) * (r.num / g2), (l.den / g2) * (r.den / g1));
    }
    friend Rational operator/(const Rational &l, const Rational &r) {
        return l * r.inv();
    }
    Rational& operator+=(const Rational &r) {
        *this = *this + r;
        return *this;
    }
    Rational& operator-=(const Rational &r) {
        *this = *this - r;
        return *this;
    }
    Rational& operator*=(const Rational &r) {
        *this = *this * r;
        return *this;
    }
    Rational& operator/=(const Rational &r) {
        *this = *this / r;
        return *this;
    }
    Rational inv() const {
        return Rational(den, num);
    }
    Rational abs() const {
        return Rational(std::abs(num), den);
    }
};

template <typename T>
std::ostream& operator<<(std::ostream &out, const Rational<T> &r) {
    return out << r.num << '/' << r.den;
}

namespace internal::gauss_jordan {
    template <typename T, typename EqZero>
    std::pair<size_t, size_t> pivoting(const std::vector<std::vector<T>>& Ab, const size_t i, EqZero equals_zero) {
        const size_t n = Ab.size(), m = Ab[0].size() - 1;
        size_t mse = m, pivot = n;
        for (size_t row = i; row < n; ++row) {
            const auto& v = Ab[row];
            size_t col = std::find_if_not(v.begin(), v.begin() + mse, equals_zero) - v.begin();
            if (col < mse) mse = col, pivot = row;
        }
        return { mse, pivot };
    }

    template <typename T> constexpr T add_fp_arithmetic(T x, T y) { return x + y; }
    template <typename T> constexpr T add_inv_fp_arithmetic(T x) { return 0 - x; }
    template <typename T> constexpr T mul_fp_arithmetic(T x, T y) { return x * y; }
    template <typename T> constexpr T mul_inv_fp_arithmetic(T x) { return 1 / x; }
}

template <typename T, T(*add_fp)(T, T), T(*add_inv_fp)(T), T(*mul_fp)(T, T), T(*mul_inv_fp)(T)>
struct GaussianElimination {
    GaussianElimination(std::vector<std::vector<T>> A, const std::vector<T>& b, const T& zero = T(0), const T& one = T(1)) {
        size_t n = A.size();
        for (size_t i = 0; i < n; ++i) A[i].push_back(b[i]);
        solve(zero, one, A);
    }
    std::vector<T> get_solution() const { return _basis[0]; }
private:
    std::vector<T> _x0;
    std::vector<std::vector<T>> _basis;
    bool _empty = false;

    void solve(const T& zero, const T& one, std::vector<std::vector<T>>& Ab) {
        using namespace internal::gauss_jordan;
        auto equals_zero = [&](const T& v) {
            if constexpr (std::is_floating_point_v<T>) return std::abs(v) < 1e-9;
            else return v == zero;
        };
        const size_t n = Ab.size(), m = Ab[0].size() - 1;
        for (size_t i = 0; i < n; ++i) {
            auto [mse, pivot] = pivoting(Ab, i, equals_zero);
            if (pivot == n) break;
            Ab[i].swap(Ab[pivot]);
            T mse_val_inv = mul_inv_fp(Ab[i][mse]);
            for (size_t row = i + 1; row < n; ++row) if (not equals_zero(Ab[row][mse])) {
                T coef = add_inv_fp(mul_fp(Ab[row][mse], mse_val_inv));
                for (size_t col = mse; col <= m; ++col) Ab[row][col] = add_fp(Ab[row][col], mul_fp(coef, Ab[i][col]));
            }
        }
        size_t basis_num = m;
        std::vector<char> down(m, false);
        _x0.assign(m, zero);
        for (size_t i = n; i-- > 0;) {
            size_t mse = m + 1;
            for (size_t col = 0; col <= m; ++col) if (not equals_zero(Ab[i][col])) {
                mse = col;
                break;
            }
            if (mse < m) {
                T mse_val_inv = mul_inv_fp(Ab[i][mse]);
                for (size_t row = 0; row < i; ++row) if (not equals_zero(Ab[row][mse])) {
                    T coef = add_inv_fp(mul_fp(Ab[row][mse], mse_val_inv));
                    for (size_t col = mse; col <= m; ++col) Ab[row][col] = add_fp(Ab[row][col], mul_fp(coef, Ab[i][col]));
                }
                for (size_t col = mse; col <= m; ++col) Ab[i][col] = mul_fp(Ab[i][col], mse_val_inv);
                _x0[mse] = Ab[i][m];
                down[mse] = true;
                --basis_num;
            } else if (mse == m) {
                _empty = true;
                return;
            }
        }
        _basis.assign(basis_num, std::vector<T>(m));
        int basis_id = 0;
        for (size_t j = 0; j < m; ++j) if (not down[j]) {
            for (size_t j2 = 0, i = 0; j2 < m; ++j2) _basis[basis_id][j2] = down[j2] ? Ab[i++][j] : zero;
            _basis[basis_id++][j] = add_inv_fp(one);
        }
    }
};

template <typename T>
using GaussianEliminationArithmetic = GaussianElimination<
    T,
    internal::gauss_jordan::add_fp_arithmetic, internal::gauss_jordan::add_inv_fp_arithmetic,
    internal::gauss_jordan::mul_fp_arithmetic, internal::gauss_jordan::mul_inv_fp_arithmetic>;

using GaussianEliminationRational = GaussianEliminationArithmetic<Rational<long long>>;

template <typename T>
std::vector<T>& operator+=(std::vector<T> &a, const std::vector<T> &b) {
    int n = a.size();
    for (int i = 0; i < n; ++i) a[i] += b[i];
    return a;
}
template <typename T>
std::vector<T> operator+(const std::vector<T> &a, const std::vector<T> &b) {
    std::vector<T> c = a;
    c += b;
    return c;
}
template <typename T>
std::vector<T>& operator*=(std::vector<T> &a, const T& b) {
    int n = a.size();
    for (int i = 0; i < n; ++i) a[i] *= b;
    return a;
}
template <typename T>
std::vector<T>& operator*(const std::vector<T> &a, const T& b) {
    std::vector<T> c = a;
    c *= b;
    return c;
}

vector<vector<int>> concat(vector<vector<int>> a, const vector<vector<int>> &b) {
    vector<vector<int>> ret = a;
    for(vector<int> v: b) {
        ret.emplace_back(v);
    }
    return ret;
}

bool upper_letter(char c) {
    return ('A' <= c && c <= 'Z');
}

vector<string> atoms;
map<string, int> mp;
int sz;

int number(int &i, const string& s);
string atom(int &i, const string & s);
int atom_id(int &i, const string &s);

vector<int> molecule(int &i, const string &s);
vector<int> group(int &i, const string &s);
vector<int> unit_group(int &i, const string &s);

vector<vector<int>> molecule_sequence(int &i, string s);
pair<vector<vector<int>>, vector<vector<int>>> chemical_equation(int &i, string s);

vector<int> molecule(int &i, const string &s) {
    vector<int> ret = group(i, s);
    for(;i < (int)s.size() && (s[i] == '(' || upper_letter(s[i])); ) {
        ret += molecule(i, s);
    }
    return ret;
}

vector<int> group(int &i, const string &s) {
    vector<int> ret = unit_group(i, s);
    if(i < (int)s.size() && isdigit(s[i])) {
        int num = number(i, s);
        ret *= num;
    }
    return ret;
}

vector<int> unit_group(int &i, const string &s) {
    if(s[i] == '(') {
        ++ i;
        vector<int> mole = molecule(i, s);
        ++ i;
        return mole;
    } else if(upper_letter(s[i])) {
        int val = atom_id(i, s);
        vector<int> ret(sz, 0);
        ret[val] ++;
        return ret;
    } else {
        // debug(s[i]);
        assert(false);
    }
}

int number(int &i, const string& s) {
    int ret = 0;
    for(;i < (int)s.size() && isdigit(s[i]);) {
        ret *= 10;
        ret += s[i] - '0';
        ++ i;
    }
    return ret;
}

int atom_id(int &i, const string &s) {
    return mp[atom(i, s)];
}

string atom(int &i, const string &s) {
    string ret = "";
    assert('A' <= s[i] && s[i] <= 'Z');
    ret += s[i];
    if(i + 1 < (int)s.size() && 'a' <= s[i + 1] && s[i + 1] <= 'z') {
        ret += s[i + 1];
        i += 2;
    } else {
        ++ i;
    }
    return ret;
}

vector<vector<int>> molecule_sequence(int &i, string s) {
    vector<int> mole = molecule(i, s);
    vector<vector<int>> ret;
    ret.emplace_back(mole);
    if(i < (int)s.size() && s[i] == '+') {
        ++ i;
        vector<vector<int>> mole_seq = molecule_sequence(i, s);
        ret = concat(ret, mole_seq);
    }
    return ret;
}

pair<vector<vector<int>>, vector<vector<int>>> chemical_equation(int &i, string s) {
    vector<vector<int>> mole_seq1 = molecule_sequence(i, s);
    // debug(s[i]);
    assert(s[i] == '-');
    assert(s[i + 1] == '>');
    i += 2;
    vector<vector<int>> mole_seq2 = molecule_sequence(i, s);
    assert(s[i] == '.');
    return make_pair(mole_seq1, mole_seq2);
}

void solve() {
    string s;
    while(cin >> s) {
        if(s == ".") break;
        int n = (int)s.size();
        // atomsを計算するパート
        rep(i, n) {
            if('A' <= s[i] && s[i] <= 'Z') {
                int j = i;
                atoms.emplace_back(atom(j, s));
            }
        }
        Uniq(atoms);
        sz = si(atoms);
        rep(i, sz) {
            mp[atoms[i]] = i;
        }
        // 構文解析をするパート
        int i = 0;
        pair<vvc<int>, vvc<int>> ret = chemical_equation(i, s);
        // 連立方程式を解くパート
        int leftsz = si(ret.fr), rightsz = si(ret.sc);
        int allsz = leftsz + rightsz;
        vvc<Rational<ll>> A(sz, vc<Rational<ll>>(allsz, Rational<ll>{0, 1}));
        rep(i, leftsz) {
            rep(j, sz) {
                A[j][i] += Rational<ll>{ ret.fr[i][j] , 1};
            }
        }
        rep(i, rightsz) {
            rep(j, sz) {
                A[j][i + leftsz] -= Rational<ll>{ ret.sc[i][j] , 1};
            }
        }
        vc<Rational<ll>> b(sz, Rational<ll>{0, 1});
        vc<Rational<ll>> x = GaussianEliminationRational(A, b).get_solution();
        assert(si(x) == allsz);
        vc<ll> ans(allsz);
        ll lcm = 1LL;
        rep(i, allsz) {
            lcm = lcm / __gcd(lcm, x[i].den) * x[i].den;
        }
        rep(i, allsz) {
            ans[i] = -lcm / x[i].den * x[i].num;
        }
        out(ans);
    }
}

signed main() {
    int testcase = 1;
    // in(testcase);
    while(testcase--) solve();
    return 0;
}
