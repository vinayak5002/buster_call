#include<cstdio>
#include<cstdlib>
#include<cstring>

struct Node {
    int key;
    Node *next, *prev;
};

Node *nil; //番兵

Node* listSearch(int key) {
    Node *cur = nil->next; //番兵の次の要素から辿る
    while ( cur != nil && cur->key != key ) { //番兵ではないかつ値が一致していないとき
        cur = cur->next; //curは次の要素に移る
    }
    return cur;
}

void init() { //双方向リストの初期化
    nil = ( Node * )malloc(sizeof(Node)); //mallocは指定したサイズだけメモリを動的に確保する関数。
    nil->next = nil;
    nil->prev = nil;
}

void printList() {
    Node *cur = nil->next;
    int isf = 0;
    while ( 1 ) {
        if ( cur == nil ) break;
        if ( isf++ > 0 ) printf (" ");
        printf("%d", cur->key);
        cur = cur->next;
    }
    printf("\n");
}

void deleteNode(Node *t) {
    if ( t == nil ) return; //tが番兵なら処理しない。
    t->prev->next = t->next;
    t->next->prev = t->prev;
    free(t);
}

void deleteFirst() {
    deleteNode(nil->next);
}

void deleteLast(){
    deleteNode(nil->prev);
}
void deleteKey(int key) { //検索したノードを削除する。
    deleteNode(listSearch(key));
}

void insert(int key) {
    Node *x = (Node *)malloc(sizeof(Node));
    x->key = key;
    x->next = nil->next; //番兵の直後に要素を追加。
    nil->next->prev = x;
    nil->next = x;
    x->prev = nil;
}

int main() {
    int key, n, i;
    int size = 0;
    char com[20];
    int np = 0, nd = 0;
    scanf("%d", &n);
    init();
    for( i = 0; i < n; i++ ) {
        scanf("%s%d", com, &key);
        if ( com[0] == 'i' ) { insert(key); np++; size++; }
        else if (com[0] == 'd' ) {
            if ( strlen(com) > 6 ) {
                if ( com[6] == 'F' ) deleteFirst();
                else if ( com[6] == 'L' ) deleteLast();
            }else{
                deleteKey(key); nd++;
            }
            size--;
        }
    }
    printList();

    return 0;
}
