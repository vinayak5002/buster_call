#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

#include <bits/stdc++.h>

#define _overload(_1, _2, _3, _4, name, ...) name
#define _rep1(Itr, N) _rep3(Itr, 0, N, 1)
#define _rep2(Itr, a, b) _rep3(Itr, a, b, 1)
#define _rep3(Itr, a, b, step) for (i64 Itr = a; Itr < b; Itr += step)
#define repeat(...) _overload(__VA_ARGS__, _rep3, _rep2, _rep1)(__VA_ARGS__)
#define rep(...) repeat(__VA_ARGS__)

#define ALL(X) begin(X), end(X)

using namespace std;
using i64 = int64_t;
using u64 = uint64_t;

i64 solve(i64 n, i64 m) {
  vector<i64> s(m);
  vector<vector<i64>> c(m);
  rep(i, m) {
    cin >> s[i];
    i64 k;
    cin >> k;
    c[i].assign(k, 0);
    rep(j, k) {
      cin >> c[i][j];
      c[i][j]--;
    }
  }
  vector<i64> maxscore(n);
  vector<i64> minscore(n);
  rep(i, m) {
    for (auto v : c[i]) {
      maxscore[v] += s[i];
    }
    if (c[i].size() == 1) {
      minscore[c[i][0]] += s[i];
    }
  }

  i64 ans = 0;
  stack<i64> right;
  i64 left = 1ll << 60;
  right.push(1ll << 60);
  for (int i = n - 1; i >= 0; i--) {
    right.push(min(right.top(), minscore[i]));
  }
  rep(i, n) {
    right.pop();
    ans = max(ans, maxscore[i] - min(left, right.top()) + 1);
    left = min(left, minscore[i]);
  }
  return ans;
}

int main() {
  cin.tie(nullptr);
  ios::sync_with_stdio(false);

  i64 n, m;
  while (cin >> n >> m, n > 0) {
    cout << solve(n, m) << endl;
  }

  return 0;
}
