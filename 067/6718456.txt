import java.util.Scanner
import scala.annotation.tailrec

class Card(val order:Int, val pos:Int)
class Hart(override val order:Int, override val pos:Int) extends Card(order, pos) {
  override def toString:String = s"H $order"
}
class Spade(override val order:Int, override val pos:Int) extends Card(order, pos) {
  override def toString:String = s"S $order"
}
class Dia(override val order:Int, override val pos:Int) extends Card(order, pos) {
  override def toString:String = s"D $order"
}
class Clover(override val order:Int, override val pos:Int) extends Card(order, pos) {
  override def toString:String = s"C $order"
}

object Main extends App {
  val sc = new Scanner(System.in)
  val N = sc.nextInt()
  val arr = (for (p <- 0 until N) yield sc.next() match {
    case "H" => new Hart(sc.nextInt(), p)
    case "S" => new Spade(sc.nextInt(), p)
    case "D" => new Dia(sc.nextInt(), p)
    case "C" => new Clover(sc.nextInt(), p)
  }).toArray

  def quickSort(cards:Array[Card]):Array[Card] = {
    def exchange(i:Int, j:Int):Unit = {
      val t = cards(i)
      cards(i) = cards(j)
      cards(j) = t
    }
    def partition(p:Int, r:Int):Int = {
      val x = cards(r)
      @tailrec
      def iterate(i:Int, j:Int):Int = {
        if (j < r) {
          if (cards(j).order <= x.order) {
            exchange(i, j)
            iterate(i+1, j+1)
          } else
            iterate(i, j+1)
        } else {
          exchange(i, r)
          i
        }
      }
      iterate(p, p)
    }
    def iterate(p:Int, r:Int):Unit = {
      if (p < r) {
        val q = partition(p, r)
        iterate(p, q-1)
        iterate(q+1, r)
      } 
    }
    iterate(0, N-1)
    cards
  }

  val result = quickSort(arr)
  var flag = "Stable"
  for (i <- 1 until N if result(i).order == result(i-1).order) {
    if (result(i).pos < result(i-1).pos) flag = "Not stable"
  }
  println(flag)
  println(s"${result.mkString("\n")}")
}
