#include <stdio.h>
#include <math.h> //sin, cosを使うため

struct Point
{
  double x, y;
};

void koch(int n, struct Point a, struct Point b)
{
  if (n == 0) // n = 0になったら終了
  {
    return;
  }

  struct Point s, t, u;
  double th = M_PI * 60.0 / 180.0; //度からラジアンへ単位を変換

  //線を三等分した座標s, t
  s.x = (2.0 * a.x + 1.0 * b.x) / 3.0;
  s.y = (2.0 * a.y + 1.0 * b.y) / 3.0;
  t.x = (1.0 * a.x + 2.0 * b.x) / 3.0;
  t.y = (1.0 * a.y + 2.0 * b.y) / 3.0;
  // 2点s, tを頂点とする正三角形を作成するための座標u
  u.x = (t.x - s.x) * cos(th) - (t.y - s.y) * sin(th) + s.x;
  u.y = (t.x - s.x) * sin(th) + (t.y - s.y) * cos(th) + s.y;

  //線文asに対してkochを呼び出す
  koch(n - 1, a, s);
  printf("%.8f %.8f\n", s.x, s.y);
  //線文suに対してkochを呼び出す
  koch(n - 1, s, u);
  printf("%.8f %.8f\n", u.x, u.y);
  //線文utに対してkochを呼び出す
  koch(n - 1, u, t);
  printf("%.8f %.8f\n", t.x, t.y);
  //線文tbに対してkochを呼び出す
  koch(n - 1, t, b);
}

int main(void)
{
  struct Point a, b;
  int n;

  scanf("%d", &n);

  //座標の初期値(0,0)と(100, 0)
  a.x = 0;
  a.y = 0;
  b.x = 100;
  b.y = 0;

  printf("%.8f %8f\n", a.x, a.y); //最初はどんなnが来ても同じなので出力
  koch(n, a, b);
  printf("%.8f %.8f\n", b.x, b.y); //最後も同じなので出力
}
