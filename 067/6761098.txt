import itertools
import sys
import math
import heapq
from collections import deque, Counter, defaultdict
from sys import stdin
import copy
import bisect
from decimal import Decimal, ROUND_HALF_UP
# from atcoder.dsu import DSU

MOD = 10 ** 9 + 7
int1 = lambda x: int(x) - 1
stinput = lambda: stdin.readline()[:-1]
ii = lambda: int(stinput())  # int input
mi = lambda: map(int, stdin.readline().split())  # map input (int)
li = lambda: list(mi())  # list input (int)
mi1 = lambda: map(int1, stdin.readline().split())  # map input (int)-1
li1 = lambda: list(mi1())  # list input (int)-1
mis = lambda: map(str, stdin.readline().split())  # map input (string)
lis = lambda: list(mis())  # list input (string)

while True:
    N, P = mi()
    if N == -1:
        break
    ans = 0
    cnt = 0
    so_li = []
    if N < 2:
        N = 2
    if N < 4:
        for i in range(1,4):
            if 2 <= N and N < 4:
                so_li.append(N)
                N += 1
    while len(so_li) < P:
        N += 1
        flag = True
        for i in range(2,math.ceil(N**(1/2))+1):
            if N % i == 0:
                flag = False
                break
        if flag:
            so_li.append(N)
    ans_li = []
    for i in range(len(so_li)):
        for j in range(i,len(so_li)):
            ans_li.append(so_li[i]+so_li[j])
    ans_li.sort()
    print(ans_li[P-1])
