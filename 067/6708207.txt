const IINF: i64   = (1 << 31) - 1;
const UINF: usize = 1_000_000_000_000;

#[derive(Debug, Clone)]
pub struct RSQ {
    v: Vec<(i64, usize)>,
}

impl RSQ {
    const SEQ_LEN: usize = 1 << 18;
}

impl Default for RSQ {
    fn default() -> Self {
        RSQ::new()
    }
}

impl RSQ {
    pub fn new() -> Self {
        Self {
            v: vec![(IINF, UINF); 2 * RSQ::SEQ_LEN],
        }
    }

    /// Add `value` to i-th element.
    /// 0-origin.
    pub fn update(&mut self, mut index: usize, value: (i64, usize)) {
        index += RSQ::SEQ_LEN;
        self.v[index] = self.v[index].min(value);

        while index > 0 {
            index /= 2;
            self.v[index] = self.v[index * 2].min(self.v[index * 2 + 1]);
        }
    }

    /// Sum values on `[l, r)`. Note that it is a half-open interval.
    /// 0-origin.
    pub fn min(&self, l: usize, r: usize) -> (i64, usize) {
        self._min(l, r, 0, RSQ::SEQ_LEN, 1)
    }

    fn _min(&self, ql: usize, qr: usize, sl: usize, sr: usize, pos: usize) -> (i64, usize) {
        if qr <= sl || sr <= ql {
            return (IINF, UINF);
        }
        if ql <= sl && sr <= qr {
            return self.v[pos];
        }

        let sm = (sl + sr) / 2;
        let lv = self._min(ql, qr, sl, sm, pos * 2);
        let rv = self._min(ql, qr, sm, sr, pos * 2 + 1);
        lv.min(rv)
    }

    pub fn from(v: Vec<i64>) -> Self {
        let mut rsq = RSQ::new();
        for (index, value) in (0..v.len()).zip(v.into_iter()) {
            let idx = RSQ::SEQ_LEN + index;
            rsq.v[idx] = (value, idx);
        }

        rsq
    }
}


fn main() {
    let mut scanner = Scanner::new();
    let _: usize = scanner.cin();
    let q: usize = scanner.cin();

    let mut st = RSQ::new();
    for _ in 0..q {
        let com: usize = scanner.cin();
        if com == 0 {
            let x: usize = scanner.cin();
            let y: i64 = scanner.cin();
            st.update(x, (y, x));
        }
        else {
            let x: usize = scanner.cin();
            let y: usize = scanner.cin();
            let (ans, _) = st.min(x, y + 1);
            println!("{}", ans);
        }
    }
}


use std::collections::VecDeque;
use std::io::{self, Write};
use std::str::FromStr;

#[allow(dead_code)]
struct Scanner {
    stdin: io::Stdin,
    buffer: VecDeque<String>,
}
#[allow(dead_code)]
impl Scanner {
    fn new() -> Self {
        Self {
            stdin: io::stdin(),
            buffer: VecDeque::new(),
        }
    }

    fn cin<T: FromStr>(&mut self) -> T {
        while self.buffer.is_empty() {
            let mut line = String::new();
            let _ = self.stdin.read_line(&mut line);
            for w in line.split_whitespace() {
                self.buffer.push_back(String::from(w));
            }
        }
        self.buffer.pop_front().unwrap().parse::<T>().ok().unwrap()
    }

    fn usize1(&mut self) -> usize {
        self.cin::<usize>() - 1
    }

    fn chars(&mut self) -> Vec<char> {
        self.cin::<String>().chars().collect()
    }

    fn vec<T: FromStr>(&mut self, n: usize) -> Vec<T> {
        (0..n).map(|_| self.cin()).collect()
    }
}

#[allow(dead_code)]
fn flush() {
    std::io::stdout().flush().unwrap();
}

