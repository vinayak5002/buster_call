import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Main {
	public static void main(String arg[]) {
		Main main = new Main();
		main.Run();
	}
	
	int N = 0;

	ArrayList<Integer> list = new ArrayList<Integer>();
	ArrayList<Integer> list2 = new ArrayList<Integer>();
	
	Integer[] p;
	
	public void Run() {
		
		Scanner scan = new Scanner(System.in);
		
		N = scan.nextInt();
		
		p = new Integer[N];
		Arrays.setAll(p, e -> scan.nextInt());
		
		Arrays.sort(p);
		
//		for(int i = 1;i < Math.pow(2, N) ;i++) {
//			list.clear();
//			
//			for(int j = 0;j < N;j++) {
//				if((1 & i >> j) == 1) {
//					list.add(p[j]);
//				}
//			}
//			
//			int lcm = LCM(list);
//			
//			if(!list2.contains(lcm)) {
//				list2.add(lcm);
//			}
//		}
		
		Function(0);
		
		System.out.println(list2.size() - (p[N - 1] == 1 ? 1 : 0));
		
		scan.close();
	}
	
	void Function(int n) {
		if(n == N) {
			int lcm = LCM(list);
			
			if(!list2.contains(lcm)) {
				list2.add(lcm);
			}
		}else {
			for(int i = 0;i < 2;i++) {
				if(i == 0) {
					list.add(p[n]);
				}
				Function(n + 1);
				if(i == 0) {
					list.remove(list.size() - 1);
				}
			}
		}
	}
	
	int LCM(List<Integer> list) {
		int Ans = 1;
		
		for(Integer x : list) {
			Ans = LCM(x , Ans);
		}
		
		return Ans;
		
	}
	
	int LCM(int a,int b) {
		return (a * b)/GCD(a , b);
	}
	
	int GCD(int a,int b) {
		int A = Math.max(a, b);
		int B = Math.min(a, b);

		int r = A % B;
		
		while(r != 0) {
			A = B;
			B = r;
			r = A % B;
		}
		
		return B;
	}
}
