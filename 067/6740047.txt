#include <iostream>
#include <vector>
#include <string>
#include <queue>
#include <array>
#include <algorithm>
#include <numeric>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <set>
#include <cassert>
#include <iterator>
#include <random>
#include <stack>
#include <climits>
#include <chrono>
#include <iomanip>


int gcd(const int a, const int b) {
	return (b == 0) ? a : gcd(b, a % b);
}
class UnionFind {
	std::vector<int> vec;
public:
	UnionFind(const int size) : vec(size, -1) {};
	int find(const int a) {
		return vec[a] < 0 ? a : vec[a] = find(vec[a]);
	}
	bool same(const int a, const int b) {
		return find(a) == find(b);
	}
	void unite(int a, int b) {
		a = find(a);
		b = find(b);
		if (a == b) return;
		if (vec[a] > vec[b]) std::swap(a, b);
		vec[a] += vec[b];
		vec[b] = a;
	}
};
int main() {
	int n; std::cin >> n;
	std::vector<int> cost(n);
	for (auto& a : cost) {
		std::cin >> a;
	}
	std::vector<int> order_by_cost(n); std::iota(order_by_cost.begin(), order_by_cost.end(), 0);
	std::sort(order_by_cost.begin(), order_by_cost.end(), [&](const auto i, const auto j) {return cost[i] < cost[j]; });
	long long int result{ 0 };
	UnionFind uft(n);
	for (const auto g : order_by_cost) {
		for (auto i = g; i + g + 1 < n; i += g + 1) {
			if (uft.same(i, i + g + 1)) continue;
			uft.unite(i, i + g + 1);
			result += cost[g];
		}
	}
	std::cout << result << '\n';
}

