from itertools import accumulate
import itertools
import sys
sys.setrecursionlimit(10**9)
import math
import heapq
import bisect
from collections import deque, Counter, defaultdict, OrderedDict
from sys import stdin
import copy
from decimal import Decimal
from operator import mul
from functools import reduce


MOD = 10 ** 9 + 7
def int1(x): return int(x) - 1
def stinput(): return stdin.readline()[:-1]
def ii(): return int(stinput())  # int input
def mi(): return map(int, stdin.readline().split())  # map input (int)
def li(): return list(mi())  # lis input (int)
def mi1(): return map(int1, stdin.readline().split())  # map input (int)-1
def li1(): return list(mi1())  # lis input (int)-1
def mis(): return map(str, stdin.readline().split())  # map input (string)
def lis(): return list(mis())  # lis input (string)
def my_lcm(x, y):
    return (x * y) // math.gcd(x, y)
def combnations_count(n, r):
    return math.factorial(n) // (math.factorial(n-r) * math.factorial(r))

while True:
    ans = 0
    cnt = 0
    N = ii()
    if N == 0:
        break
    cnt_li = []
    for i in range(1,N):
        cnt_li.append(i)
    acc_li = list(itertools.accumulate(cnt_li))
    if N in acc_li:
        ans += 1
    for i in range(N-2):
        for j in range(i+1,N-1):
            if acc_li[j] - acc_li[i] == N:
                ans += 1
    print(ans)


