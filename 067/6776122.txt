using System;
using System.Collections.Generic;
using System.Linq;
using CoderLib8.Collections;
using CoderLib8.Graphs.Arrays;

class DS
{
	static int[] Read() => Array.ConvertAll(Console.ReadLine().Split(), int.Parse);
	static void Main()
	{
		var n = Read()[0];
		var map = Array.ConvertAll(new bool[n], _ => Read().Skip(1).ToList());
		var qc = Read()[0];
		var qs = Array.ConvertAll(new bool[qc], _ => Read());

		var tree = new Tree(n, 0, map);
		var st = new RSQ(2 * n);

		Console.SetOut(new System.IO.StreamWriter(Console.OpenStandardOutput()) { AutoFlush = false });
		foreach (var q in qs)
		{
			if (q[0] == 0)
			{
				var (v, w) = (q[1], q[2]);
				var (si, ei) = (tree.TourMap[v][0], tree.TourMap[v].Last());
				st.Add(si, w);
				st.Add(ei + 1, -w);
			}
			else
			{
				var u = q[1];
				var si = tree.TourMap[u][0];
				Console.WriteLine(st[1, si + 1]);
			}
		}
		Console.Out.Flush();
	}
}

namespace CoderLib8.Collections
{
	public class RSQ
	{
		int n = 1;
		public int Count => n;
		long[] a;

		public RSQ(int count, long[] a0 = null)
		{
			while (n < count) n <<= 1;
			a = new long[n << 1];
			if (a0 != null)
			{
				Array.Copy(a0, 0, a, n, a0.Length);
				for (int i = n - 1; i > 0; --i) a[i] = a[i << 1] + a[(i << 1) | 1];
			}
		}

		public long this[int i]
		{
			get => a[n | i];
			set => Add(i, value - a[n | i]);
		}
		public void Add(int i, long d) { for (i |= n; i > 0; i >>= 1) a[i] += d; }

		public long this[int l, int r]
		{
			get
			{
				var s = 0L;
				for (l |= n, r += n; l < r; l >>= 1, r >>= 1)
				{
					if ((l & 1) != 0) s += a[l++];
					if ((r & 1) != 0) s += a[--r];
				}
				return s;
			}
		}
	}
}

namespace CoderLib8.Graphs.Arrays
{
	public class Tree
	{
		static List<int>[] ToMap(int n, int[][] es, bool directed)
		{
			var map = Array.ConvertAll(new bool[n], _ => new List<int>());
			foreach (var e in es)
			{
				map[e[0]].Add(e[1]);
				if (!directed) map[e[1]].Add(e[0]);
			}
			return map;
		}

		public int Count { get; }
		public int Root { get; }
		public List<int>[] Map { get; }
		public int[] Depths { get; }
		public int[] Parents { get; }

		// この Euler Tour では方向を記録しません。
		// order -> vertex
		public List<int> Tour { get; }
		// vertex -> orders
		public List<int>[] TourMap { get; }

		public Tree(int n, int root, int[][] ues) : this(n, root, ToMap(n, ues, false)) { }
		public Tree(int n, int root, List<int>[] map)
		{
			Count = n;
			Root = root;
			Map = map;
			Depths = Array.ConvertAll(Map, _ => -1);
			Parents = Array.ConvertAll(Map, _ => -1);

			Tour = new List<int>();
			TourMap = Array.ConvertAll(Map, _ => new List<int>());

			Depths[root] = 0;
			Dfs(root, -1);
		}

		void Dfs(int v, int pv)
		{
			TourMap[v].Add(Tour.Count);
			Tour.Add(v);

			foreach (var nv in Map[v])
			{
				if (nv == pv) continue;
				Depths[nv] = Depths[v] + 1;
				Parents[nv] = v;
				Dfs(nv, v);

				TourMap[v].Add(Tour.Count);
				Tour.Add(v);
			}
		}
	}
}

