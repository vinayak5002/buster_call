#pragma region template

#include <bits/stdc++.h>

using namespace std;

// clang-format off
using ll  = long long;    using vl   = vector<ll>;  using vvl   = vector<vl>;
using ld  = long double;  using vld  = vector<ld>;  using vvld  = vector<vld>;
using pll = pair<ll, ll>; using vpll = vector<pll>; using vvpll = vector<vpll>;
using vb = vector<bool>; using vvb = vector<vector<bool>>;
using vs = vector<string>;
using mll = map<ll, ll>;
template <class T> using V = vector<T>; template <class T> using VV = V<V<T>>; template <class T> using VVV = V<VV<T>>;
template <class T> using max_heap = priority_queue<T>;
template <class T> using min_heap = priority_queue<T, vector<T>, greater<T>>;
constexpr ll inf = 3001001000100100100LL;
#define endl '\n'

#define  _overload(_1, _2, _3, name, ...) name
#define   rep(...) _overload(__VA_ARGS__,   _rep,   _rep2,)(__VA_ARGS__)
#define  repc(...) _overload(__VA_ARGS__,  _repc,  _repc2,)(__VA_ARGS__)
#define  repr(...) _overload(__VA_ARGS__,  _repr,  _repr2,)(__VA_ARGS__)
#define reprc(...) _overload(__VA_ARGS__, _reprc, _reprc2,)(__VA_ARGS__)
#define   _rep(i,k,n) for(ll i=(k)  , i##_xxxx=(n); i < i##_xxxx; ++i)
#define  _repc(i,k,n) for(ll i=(k)  , i##_xxxx=(n); i <=i##_xxxx; ++i)
#define  _repr(i,k,n) for(ll i=(n)-1, i##_xxxx=(k); i >=i##_xxxx; --i)
#define _reprc(i,k,n) for(ll i=(n)  , i##_xxxx=(k); i >=i##_xxxx; --i)
#define   _rep2(i,n)   _rep(i,0,n)
#define  _repc2(i,n)  _repc(i,1,n)
#define  _repr2(i,n)  _repr(i,0,n)
#define _reprc2(i,n) _reprc(i,1,n)

#define rall(o) rbegin(o), rend(o)
#define  all(o)  begin(o),  end(o)
template <class C> ll sz(const C& c) { return static_cast<ll>(c.size()); }
template <class T, class U> common_type_t<T, U> min(const T& a, const U& b){ return std::min<common_type_t<T, U>>(a,b); }
template <class T, class U> common_type_t<T, U> max(const T& a, const U& b){ return std::max<common_type_t<T, U>>(a,b); }
template <class T, class U> bool chmax(T& m, const U& v){ assert(numeric_limits<T>::max() > v); if (m < v){ m = v; return true; } return false; }
template <class T, class U> bool chmin(T& m, const U& v){ assert(numeric_limits<T>::min() < v); if (v < m){ m = v; return true; } return false; }
template <class T, class U> common_type_t<T, U> cdiv(const T& a, const U& b){ return (a + b - 1) / b; }
template <class T, class U> common_type_t<T, U> rdiv(const T& a, const T& b){ return (a + b / 2) / b; }

template <class T, class S>             string join(const T& v, const S& sep                  ){ stringstream ss; bool f = false; for (const auto& e : v){ if (f) ss << sep; f = true; ss << e;} return ss.str(); }
template <class T, class S, class... U> string join(const T& v, const S& sep, const U& ...args){ stringstream ss; bool f = false; for (const auto& c : v){ if (f) ss << sep; f = true; ss << join(c, args...); } return ss.str(); }
template <class T>            ostream& operator<<(ostream& os, const vector<T>&            seq){ os << '[' << join(seq, ",") << ']'; return os; } template <class T>            ostream& operator<<(ostream& os, const vector<vector<T>>&    seq){ os << '[' << join(seq, ",\n ") << ']'; return os; }
template <class T>            ostream& operator<<(ostream& os, const deque<T>&             seq){ os << '[' << join(seq, ",") << ']'; return os; }
template <class T>            ostream& operator<<(ostream& os, const set<T>&               seq){ os << '{' << join(seq, ",") << '}'; return os; }
template <class T , class TH> ostream& operator<<(ostream& os, const unordered_set<T, TH>& seq){ os << '{' << join(seq, ",") << '}'; return os; }
template <class TK, class TV> ostream& operator<<(ostream& os, const map<TK, TV>&          seq){ os << '{'; bool f = false; for (const auto& e : seq){ if (f) os << ','; f = true; os << e.first << ":" << e.second; } os << '}'; return os; }
template <class T1, class T2> ostream& operator<<(ostream& os, const pair<T1, T2>&          pa){ os << '(' << pa.first << ',' << pa.second << ')'; return os; }

#if LOCAL
#define debug(...) _debug(__VA_ARGS__, __LINE__)
#else
#define debug(...)
#endif
void print() { std::cout << '\n'; }
template <class S>             void  print(const S& a){ std::cout << a << '\n'; }
template <class S>             void _debug(const S& a){ std::cerr << "(L:" << std::setw(3) << a << ")\n"; }
template <class S, class... T> void  print(const S& a, const T&... args){ std::cout << a << ' ';  print(args...); }
template <class S, class... T> void _debug(const S& a, const T&... args){ std::cerr << a << ' '; _debug(args...); }

struct setup_main { setup_main() { std::cin.tie(nullptr); std::ios::sync_with_stdio(false); std::cout << fixed << setprecision(15); } } setup_main_;
// clang-format on
#pragma endregion

/*/ 考察メモ
step1: 構文解析
'['   : 新たな子頂点に入る
digits: その選挙区の人口 
']'   : 親頂点へ移動
隣接リストに記録

step2: 木DP
dp[i] = iで勝つために必要な得票数
c_i = iの子の数
dp[i] = (j: iの子) dp[j]の少ない方から半分(切り上げ)の和
/*/

ll dfs(string& S, ll& it) {
    // debug(S, it);
    if (S[it] == '[') {
        it++;
        vl v;
        while (S[it] != ']') {
            v.push_back(dfs(S, it));
        }

        debug(S, it, v);

        sort(all(v));
        ll c = sz(v);
        ll ret = 0;
        rep(i, c / 2 + 1) {
            ret += v[i];
        }

        it++;
        debug(ret);
        return ret;
    } else {
        string d;
        while (S[it] != ']') {
            d.push_back(S[it]);
            it++;
        }
        return stol(d) / 2 + 1;
    }
}

ll solve(string S) {
    ll it = 0;
    return dfs(S, it);
}


signed main() {
    ll N;
    cin >> N;

    rep(_, N) {
        string S;
        cin >> S;
        cout << solve(S) << endl;
    }
}

