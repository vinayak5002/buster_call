#include <algorithm>
#include <cassert>
#include <climits>
#include <cmath>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <random>
#include <complex>
#include <bitset>
#include <iomanip>
#include <memory>
#include <functional>
#include <stack>
#include <limits>

#define rep(i, n, s) for (int i = (s); i < int(n); i++)
#define per(i, n, s) for (int i = (n) - 1; i >= int(s); i--)
#define MM << " " <<
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)

template <class T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <class T>
using MaxHeap = std::priority_queue<T>;

using ll = long long;
using Pii = std::pair<int, int>;
using Pll = std::pair<ll, ll>;
using Pdd = std::pair<double, double>;

template <class T>
bool chmin(T &a, const T b) {
    if (b < a) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
bool chmax(T &a, const T b) {
    if (a < b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
void vdeb(const std::vector<T> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        if (i == n - 1)
            std::cout << da[i];
        else
            std::cout << da[i] << " ";
    }
    std::cout << std::endl;
}
template<class T>
void vdeb(const std::vector<std::vector<T>> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        // std::cout << i << " : ";
        vdeb(da[i]);
    }
    std::cout << std::endl;
}

using namespace std;

using G = vector<vector<int>>;

int dfs1(G &da,
        vector<int> &parent,
        vector<int> &sz,
        vector<int> &depth,
        int now) {
    sz[now] = 1;
    for(auto &i : da[now]) {
        if(i == parent[now] || parent[i] != -1) continue;
        parent[i] = now;
        depth[i] = depth[now] + 1;
        sz[now] += dfs1(da, parent, sz, depth, i);
    }
    return sz[now];
}

int main(){
    int n, m; cin >> n >> m;
    G da(n, vector<int>(0));
    rep(i,n-1,0) {
        int a, b; cin >> a >> b;
        da[a].emplace_back(b);
        da[b].emplace_back(a);
    }
    vector<int> parent(n, -1);
    vector<int> depth(n);
    vector<int> sz(n);
    vector<int> upp(n);
    vector<vector<int>> st(n);
    parent[0] = -2;
    depth[0] = 0;
    dfs1(da, parent, sz, depth, 0);
    auto dfs2 = [&](auto &&f, int now, int prv = -1) -> void {
        if(sz[now]%2 == 0) upp[now] = depth[now];
        for(auto &i : da[now]) {
            if(i == prv || depth[i] < depth[now]) continue;
            f(f, i, now);
        }
        int co = depth[now], id = -1;
        for(auto &i : da[now]) {
            if(i != prv && upp[now] <= depth[i] && depth[i] < co) {
                co = depth[now];
                id = i;
            }
        }
        if(id != -1) {
            st[id].emplace_back(now);
            int x = parent[now];
            while(x != id) {
                upp[x] = x;
                x = parent[x];
            }
        } else{
            if(prv >= 0) st[prv].emplace_back(now);
        }
    };
    dfs2(dfs2, 0);
    vector<vector<int>> ans;
    int cnt = 0;
    auto dfs3 = [&](auto &&f, int now) -> int {
        sz[now] = 1;
        for(auto &i : st[now]) sz[now] += f(f, i);
        return sz[now];
    };
    auto dfs4 = [&](auto &&f, int now, int g) -> void {
        if(sz[now] % 2 == 0) {
            g = cnt++;
            ans.push_back({});
        }
        ans[g].emplace_back(now);
        for(auto &i : st[now]) f(f, i, g);
    };
    dfs3(dfs3, 0);
    dfs4(dfs4, 0, 0);
    cout << ans.size() << endl;
    for(auto &i : ans) {
        cout << i.size() << " ";
        vdeb(i);
    }
}
