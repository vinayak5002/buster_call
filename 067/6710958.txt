#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#include <tuple>
using namespace std;
struct UnionFind {
    vector<int> par;
    
    UnionFind(int N) : par(N+1) {
        for(int i = 1; i <= N; i++){
            par[i] = i;
        }
    }

    int root(int x) {
        if (par[x] == x) return x;
        return par[x] = root(par[x]);
    }

    void unite(int x, int y) {
        int rx = root(x);
        int ry = root(y);
        if (rx == ry) return;
        par[rx] = ry;
    }

    void decom(int x){
        if(par[x]!=x){
            par[x]=x;
        }
    }

    bool same(int x, int y) {
        int rx = root(x);
        int ry = root(y);
        return rx == ry;
    }
};
int main(){
    int n,m,sum=0;
    cin>>n>>m;
    int edges[m][3]={};
    for(int i=0;i<m;++i){
        cin>>edges[i][0]>>edges[i][1]>>edges[i][2];
    }
    using item=tuple<int,int,int>;
    sort((item*)edges[0],(item*)edges[m],[](item x,item y){
        return get<0>(x)<get<0>(y);
    });
    // for(int i=0;i<m;++i){
    //     cout<<edges[i][0]<<" "<<edges[i][1]<<" "<<edges[i][2]<<endl;
    // }
    UnionFind tree(n);
    for(int i=0;i<m;++i){
        if(!tree.same(edges[i][0],edges[i][1])){
            tree.unite(edges[i][0],edges[i][1]);
            sum+=edges[i][2];
        }
    }
    cout<<sum<<endl;
}
