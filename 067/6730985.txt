#include <bits/extc++.h>

using namespace std;

#define rep(i,n) for(int i=0;i<(n);++i)
#define reps(i,s,n) for(int i=(s);i<=(n);++i)
#define all(x) begin(x), end(x)
#define Fixed fixed << setprecision(12)
#define updiv(a,b) ((a + b - 1) / b)
constexpr int INF  = 0x3f3f3f3f;
constexpr long long LINF = 0x3f3f3f3f3f3f3f3fLL;
constexpr int mod = 1e9+7;
// constexpr int mod = 998244353;

template <class Func>
class FixPoint : Func {
public:
    explicit constexpr FixPoint(Func&& f) noexcept : Func(forward<Func>(f)) {}

    template <class... Args>
    constexpr decltype(auto) operator()(Args&&... args) const {
        return Func::operator()(*this, std::forward<Args>(args)...);
    }
};

template <class Func>
static inline constexpr decltype(auto) makeFixPoint(Func&& f) noexcept {
    return FixPoint<Func>{forward<Func>(f)};
}

template <class A, class B> inline bool chmax(A &a, const B &b) { return b > a && (a = b, true); }
template <class A, class B> inline bool chmin(A &a, const B &b) { return b < a && (a = b, true); }

template <class T> using max_heap = priority_queue<T>;
template <class T> using min_heap = priority_queue<T,vector<T>,greater<T> >;
template <class A, class B> using umap = unordered_map<A,B>;
template <class A, class B> using uset = unordered_set<A,B>;

template <class T> using Set = __gnu_pbds::tree<T, __gnu_pbds::null_type, less<T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;

template <class T> inline void bye(T x) { cout << x << '\n'; exit(0); }

constexpr int dx[] = {1, 0, -1, 0, 1, 1, -1, -1};
constexpr int dy[] = {0, -1, 0, 1, 1, -1, -1, 1};


signed main() {
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);

    int n, m, l;
    while (cin >> n >> m >> l, n) {
        vector<vector<tuple<int, int, int> > > graph(n);

        for (int i = 0; i < m; ++i) {
            int a, b, d, e;
            cin >> a >> b >> d >> e;
            --a, --b;
            graph[a].emplace_back(b, d, e);
            graph[b].emplace_back(a, d, e);
        }

        vector<vector<long long> > res(n, vector<long long>(l + 1, LINF));
        min_heap<tuple<long long, int, int> > pq;

        res[0][l] = 0;
        pq.emplace(0, 0, l);

        while (!pq.empty()) {
            auto [now_cost, now_node, now_money] = pq.top();
            pq.pop();
            if (res[now_node][now_money] < now_cost) continue;
            for (auto [next_node, cost, num] : graph[now_node]) {
                if (now_money >= cost && chmin(res[next_node][now_money - cost], res[now_node][now_money])) {
                    pq.emplace(res[next_node][now_money - cost], next_node, now_money - cost);
                }
                if (chmin(res[next_node][now_money], res[now_node][now_money] + num)) {
                    pq.emplace(res[next_node][now_money], next_node, now_money);
                }
            }
        }
        cout << *min_element(all(res.back())) << '\n';
    }

    return(0);
}


