#pragma region

#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <numeric> // gcd, lcm
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
using namespace std;

using ull = unsigned long long;
using ll = long long;
using vi = vector<int>;
using vll = vector<ll>;
using vvi = vector<vi>;
using vvll = vector<vll>;
using vs = vector<string>;
using pii = pair<int,int>;
using vpii = vector<pii>;

#pragma endregion

const int INF = 1000000000 + 8;

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n, m, r; cin >> n >> m >> r;
    vector<tuple<int,int,int>> e(m);
    for(auto& [s,t,c]: e) cin >> s >> t >> c;

    vi d(n, INF); d[r] = 0;
    int cnt = 0;
    while(cnt < n){
        bool update = false;
        for(auto [s,t,c]: e){
            if(d[s] != INF and d[t] > d[s] + c){
                d[t] = d[s] + c;
                update = true;
            }
        }
        if(not update) break;
        cnt++;
    }
    if(cnt == n) cout << "NEGATIVE CYCLE" << endl;
    else{
        for(int i=0; i<n; ++i){
            if(d[i] == INF) cout << "INF" << endl;
            else cout << d[i] << endl;
        }
    }
    return 0;
}
