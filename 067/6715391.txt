// #define _GLIBCXX_DEBUG
#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define rep2(i, k, n) for (decltype(n) i = k; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i--)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i--)
#define repr2(i, k, n) for (decltype(n) i = n; i >= k; i--)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret; };
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret; };
template <typename T>
using pq_inv = priority_queue<T, vector<T>, greater<T>>;
vector<int> dd4 = {1, 0, -1, 0, 1};                // 4方位 rep(i,4) nh=h+dd4[i]; nw=w+dd4[i+1];
vector<int> dd8 = {1, 0, -1, 0, 1, 1, -1, -1, 1};  // 8方位 rep(i,8) nh=h+dd8[i]; nw=w+dd8[i+1];

vector<string> split(string& str, string delim) {
    vector<string> tokens;
    int spos = 0, epos;
    while ((epos = str.find_first_of(delim, spos)) != string::npos) {
        tokens.push_back(str.substr(spos, epos - spos));
        spos = epos + delim.length();
    }
    if (tokens.size() == 0) tokens.push_back(str);
    return tokens;
}

struct Solver {
    int H, W;
    int idx(int h, int w) {
        return h * W + w;
    }
    void solve(int h, int w) {
        W=w;H=h;
        vector<vector<int>> edge(H * W);
        rep(i, H) {
            rep(j, W - 1) {
                char c;
                cin >> c;
                if (c == '0') {
                    edge[idx(i, j)].push_back(idx(i, j + 1));
                    edge[idx(i, j + 1)].push_back(idx(i, j));
                }
            }
            if (i ==  H-1) break;
            rep(j, W) {
                char c;
                cin >> c;
                if (c == '0') {
                    edge[idx(i, j)].push_back(idx(i + 1, j));
                    edge[idx(i + 1, j)].push_back(idx(i, j));
                }
            }
        }
        vector<int> dist(H * W);
        queue<int> q;
        q.push(0);
        while (!q.empty()) {
            int x = q.front();
            q.pop();
            for (auto&& e : edge[x]) {
                if (dist[e] != 0) continue;
                dist[e] = dist[x] + 1;
                q.push(e);
            }
        }
        cout << (dist[H * W - 1]==0?0:dist[H*W-1]+1) << endl;
    };
};

int main() {
    std::cin.tie(nullptr);
    for (;;) {
        int h,w;
        cin >> w >> h;
        if(h==0 && w==0)break;
        Solver solver;
        solver.solve(h,w);
    }
    return 0;
}


