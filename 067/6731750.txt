import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	public static void main(String[] args) {
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			String[] input = br.readLine().split(" ");
			int count = 0;
			for (int i = 0; i < input.length; i++) {
				if (isNum(input[i])) {
					count++;
				} 
			}
			Stack stack = new Stack(count + 1);
			
			stack.initialize();
			for (int index = 0; index < input.length; index++) {
				if (isNum(input[index])) {
					stack.push(Integer.parseInt(input[index]));
				} else {
					String operator = input[index];
					stack.calc(operator,stack.top,stack.top - 1);
				}
			}
			System.out.println(stack.pop());
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
	static boolean isNum(String number) {
		try {
			Integer.parseInt(number); return true; 
		} catch (NumberFormatException e) {
			return false; 
		}
	}
}

class Stack {

	int top = 0;
	private int max = 0;
	private int[] array = null;
	
	public Stack(int length) {
		this.max = length;
		array = new int[length];
	}
	public void initialize() {
		this.top = 0;
	}
	
	public void push(int x) {
		if (isFull()) {
			System.out.println("エラー：　オーバーフロー");
		}
		top++;
		array[top] = x;
	}
	
	public int pop() {
		if (isEmpty()) {
			System.out.println("エラー：　アンダーフロー");
		}
		top--;
		return array[top + 1];
	}
	
	public boolean isFull() {
		if (top >= max - 1) {
			return true;
		}
		return false;
	}
	
	public boolean isEmpty() {
		if (top == 0) {
			return true;
		}
		return false;
	}
	public void calc(String opereator,int index, int index2) {
		switch (opereator) {
		case "+": {
			array[index2] = array[index] + array[index2];
			top--;
			break;
		}
		case "-": {
			array[index2] = array[index2] - array[index];
			top--;
			break;
		}
		case "*": {
			array[index2] = array[index2] * array[index];
			top--;
			break;
		}
		}
	}
}

