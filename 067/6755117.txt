#include <iostream>
#include <vector>

void input_vertices(std::vector< std::vector<int> > &v){
    int n;
    std::cin >> n;

    v.push_back(std::vector<int>());
    v[0].push_back(n);

    for(int i=1; i<=n; i++){
        int u, k;
        std::cin >> u >> k;
        v.push_back(std::vector<int>());
        v[i].push_back(k);
        for(int j=0; j<k; j++){
            int v_i;
            std::cin >> v_i;
            v[i].push_back(v_i);
        }
    }
}

void dfs(std::vector< std::vector<int> > v, std::vector<int> &d, std::vector<int> &f, int start){
    std::vector<int> stack(1, start);
    int cnt = 0;
    d[start] = ++cnt;
    while(!stack.empty()){
        int last = stack.back();
        bool flag = true;
        for(int i=1; i<=v[last][0]; i++){
            if(d[v[last][i]]>0){
                continue;
            }else{
                stack.push_back(v[last][i]);
                d[stack.back()] = ++cnt;
                flag = false;
            }
        }
        if(flag){
            stack.pop_back();
            f[last] = ++cnt;
        }
    }
}

int main(){
    std::vector< std::vector<int> > v;
    input_vertices(v);
    // for(int i=0; i<v.size(); i++){
    //     for(int j=0; j<v[i].size(); j++){
    //         std::cout << v[i][j] << " ";
    //     }
    //     std::cout << "\n";
    // }
    std::vector<int> d(v.size(), -1);
    std::vector<int> f(v.size(), -1);
    int start = 1;
    dfs(v,d,f,start);
    for(int i=1; i<v.size(); i++){
        std::cout << i << " " << d[i] << " " << f[i] << "endl";
    }
}
