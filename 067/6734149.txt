def depth_first_search_visit(node):
    global n
    global color
    global tt
    global adjacency_directed_matrix
    color[node] = 'gray'
    tt=tt+1
    d[node] = tt
    for i in range(n):
        if adjacency_directed_matrix[node][i] == 0:
            continue
        if color[i] == 'white':
            depth_first_search_visit(i)
    
    color[node] = 'black'
    tt = tt + 1
    f[node] = tt

def depth_first_search():
    global n
    global color
    global tt
    for i in range(n):
        color[i] = 'white'
    tt = 0
    for i in range(n):
        if color[i] == 'white':
            depth_first_search_visit(i)
    for i in range(n):
        print(i+1, d[i], f[i])


tt = 0
color = [0]*5
d = [0]*100
f = [0]*100
n = int(input())
adjacency_directed_matrix = [[0 for i in range(n)] for j in range(n)]

for i in range(n):
    a = list(map(int, input().split()))
    node = a[0]
    degree = a[1]
    node = node -1
    for j in range(degree):
        adjacency_node = a[j+2]
        adjacency_node = adjacency_node - 1
        adjacency_directed_matrix[node][adjacency_node] = 1
        

depth_first_search()




