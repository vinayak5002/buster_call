fn main() {
    let rc: Vec<usize> = read_vec();
    let table: Vec<Vec<usize>> = read_vec2(rc[0] as u32);
    let mut col_sum = vec![0; rc[1] + 1];
    for row in table {
        let mut total = 0;
        for (i, r) in row.iter().enumerate() {
            total += r;
            col_sum[i] += r;
            col_sum[rc[1]] += r;
            print!("{} ", r);
        }
        println!("{}", total);
    }
    let len = col_sum.len() - 1;
    for row in col_sum[..len].iter() {
        print!("{} ", row);
    }
    println!("{}", col_sum[len]);
}

fn read<T: std::str::FromStr>() -> T {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).ok().unwrap();
    s.trim().parse().ok().unwrap()
}

fn read_vec<T: std::str::FromStr>() -> Vec<T> {
    read::<String>()
        .split_whitespace()
        .map(|e| e.parse().ok().unwrap())
        .collect()
}

fn read_vec2<T: std::str::FromStr>(n: u32) -> Vec<Vec<T>> {
    (0..n).map(|_| read_vec()).collect()
}

