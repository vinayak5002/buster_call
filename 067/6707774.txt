#include <iostream>
#include <vector>
#include <string>
#include <queue>

using namespace std;

enum TYPE {
	ROOT, INODE, LEAF
};

class Node {
private:
	int _parent = -1;
	int _depth = -1;
	TYPE _type = TYPE::ROOT;
	vector<int> _children{};

public:
	void SetParent(const int parent) {
		_parent = parent;
	}
	void SetChildren(const int c) {
		_children.push_back(c);
	}
	void SetType(const TYPE t) {
		_type = t;
	}
	void SetDepth(const int d) {
		_depth = d;
	}
	vector<int> GetChildren() const {
		return _children;
	}
	int GetNumChildren() const {
		return _children.size();
	}
	int GetParent() const {
		return _parent;
	}
	TYPE GetType()const {
		return _type;
	}
	string GetTypeString() const {
		switch (_type)
		{
		case ROOT:
			return "root";
		case INODE:
			return "internal node";
		case LEAF:
			return "leaf";
		default:
			return "";
		}
	}
	int GetDepth()const {
		return _depth;
	}
	string GetChildrenString() const {
		if (_children.size() == 0) {
			return "[]";
		}
		string out = "[";
		for (int i = 0; i < _children.size(); i++) {
			out += to_string(_children[i]);
			if (i != _children.size() - 1) {
				out += ", ";
			}
			else {
				out += "]";
			}
		}
		return out;
	}
};

int main() {

	int n;
	cin >> n;
	vector<Node> p(n);

	for (int i = 0; i < n; i++) {
		int id, k;
		cin >> id >> k;

		//set children
		if (k != 0) {
			for (int K = 0; K < k; K++) {
				int c;
				cin >> c;
				p[id].SetChildren(c);
			}

			//set parent
			vector<int> chil = p[id].GetChildren();
			for (int K = 0; K < chil.size(); K++) {
				p[chil[K]].SetParent(id);
				p[chil[K]].SetType(TYPE::INODE);
			}
		}
		else {
			p[id].SetType(TYPE::LEAF);
		}

	}

	//calc depth
	//find parent
	int index = -1;
	for (int i = 0; i < n; i++) {
		if (p[i].GetType() == TYPE::ROOT) {
			index = i;
			break;
		}
	}
	queue<int> q;
	q.push(index);
	p[index].SetDepth(0);
	while (!q.empty()) {
		int tmp = q.front();
		q.pop();
		if (tmp != index) {
			int d = p[p[tmp].GetParent()].GetDepth();
			d++;
			p[tmp].SetDepth(d);
		}

		vector<int> c = p[tmp].GetChildren();
		if (c.size() != 0) {
			for (int i = 0; i < c.size(); i++) {
				q.push(c[i]);
			}
		}
	}

	for (int i = 0; i < n;i++) {
		cout << "node " << i << ": "
			<< "parent = " << p[i].GetParent() << ", "
			<< "depth = " << p[i].GetDepth() << ", "
			<< p[i].GetTypeString() << ", "
			<< p[i].GetChildrenString() << endl;
	}

	return 0;
}
