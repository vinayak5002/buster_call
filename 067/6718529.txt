# https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/3/ALDS1_3_C
class Node(object):
    """Node has key, previous node pointer and next node pointer.

    Args:
        None

    Returns:
        None
    """

    def __init__(self, key: int) -> None:
        """Constructor. If optional args are passed, its set variables.

        Args:
            key (int): Key of node.
            prev_node (Optional[Node], optional): Previous node. Defaults to None.
            next_node (Optional[Node], optional): Next node. Defaults to None.

        Returns:
            None
        """
        from typing import Optional

        self.key = key
        self.prev_node: Optional[Node] = None
        self.next_node: Optional[Node] = None

class DoubleLinkedList(object):
    def __init__(self) -> None:
        from typing import Optional

        self.head_node: Optional[Node] = None
        self.tail_node: Optional[Node] = None
        self.length: int = 0


    def print(self) -> None:
        curt_node = self.head_node
        print(f'Length: {self.length}')

        num = 0
        while curt_node:
            print(f'Number: {num}')
            print(f'Key: {curt_node.key}')
            print(f'Previous node: {curt_node.prev_node}')
            print(f'Next node: {curt_node.next_node}')

            num += 1
            curt_node = curt_node.next_node


    def print_aoj(self) -> None:
        curt_node = self.head_node
        keys: str = ''

        while curt_node:
            keys += str(curt_node.key) + ' '

            curt_node = curt_node.next_node

        print(keys.strip())


    def insert(self, key: int) -> None:
        new_node = Node(key)

        # リストが空
        if self.head_node is None:
            self.head_node = new_node
            self.tail_node = self.head_node
            self.length += 1
            return

        # ヘッドノードを追加されたノードの次に移す
        self.head_node.prev_node = new_node
        new_node.next_node = self.head_node
        self.head_node = new_node
        self.length += 1


    def append(self, key: int) -> None:
        new_node = Node(key)

        # リストが空
        if self.tail_node is None:
            self.tail_node = new_node
            self.head_node = self.tail_node
            self.length += 1
            return

        # テイルノードを追加されたノードの前に移す
        self.tail_node.next_node = new_node
        new_node.prev_node = self.tail_node
        self.tail_node = new_node
        self.length += 1


    def remove(self, key: int) -> None:
        curt_node = self.head_node
        # 削除対象が空ではないヘッドノード
        if curt_node and curt_node.key == key:
            # リストの要素がヘッドノードのみ
            if curt_node.next_node is None:
                del curt_node
                self.head_node = None
                self.tail_node = None
                self.length = 0
                return
            # リストの要素が複数
            else:
                next_node = self.head_node.next_node  # type: ignore
                next_node.prev_node = None  # type: ignore
                curt_node = None
                self.head_node = next_node
                self.length -= 1
                return

        # 削除対象を探す
        while curt_node and curt_node.key != key:
            curt_node = curt_node.next_node

        # リストが空か削除対象が存在しない
        if curt_node is None:
            return

        # 削除対象がリストの末端
        if curt_node.next_node is None:
            prev_node = curt_node.prev_node
            prev_node.next_node = None  # type: ignore
            self.tail_node = prev_node
            curt_node = None
            self.length -= 1
            return
        # 削除対象が非両端
        else:
            prev_node = curt_node.prev_node
            next_node = curt_node.next_node
            prev_node.next_node = next_node  # type: ignore
            next_node.prev_node = prev_node  # type: ignore
            curt_node = None
            self.length -= 1
            return


    def remove_head_node(self) -> None:
        # リストが空
        if self.head_node is None:
            return

        # リストに複数の要素が含まれる
        if 1 < self.length:
            next_node = self.head_node.next_node
            next_node.prev_node = None  # type: ignore
            self.head_node = next_node
            self.length -= 1
        # ヘッドノードのみ
        else:
            self.head_node = None
            self.tail_node = None
            self.length -= 1


    def remove_tail_node(self) -> None:
        # リストが空
        if self.tail_node is None:
            return

        # リストに複数の要素が含まれる
        if 1 < self.length:
            prev_node = self.tail_node.prev_node
            prev_node.next_node = None  # type: ignore
            self.tail_node = prev_node
        # テイルノードのみ
        else:
            self.head_node = None
            self.tail_node = None
            self.length -= 1


def _main():
    from sys import stdin
    from typing import List

    input = stdin.readline
    n = int(input())
    # commands: List[str] = [input()[:-1] for _ in range(n)]

    dll = DoubleLinkedList()

    for command in stdin:
        command = command.split()
        if command[0] == 'deleteFirst':
            dll.remove_head_node()
            continue
        elif command[0] == 'deleteLast':
            dll.remove_tail_node()
            continue

        if command[0] == 'insert':
            dll.insert(int(command[1]))
        elif command[0] == 'delete':
            dll.remove(int(command[1]))

    dll.print_aoj()

if __name__ == '__main__':
    _main()

