/*
Dice IV

Write a program which reads n dices constructed in the same way as Dice I, and determines whether they are all different. For the determination, use the same way as Dice III.

Input
In the first line, the number of dices n is given. In the following n lines, six integers assigned to the dice faces are given respectively in the same way as Dice III.

Output
Print "Yes" if given dices are all different, otherwise "No" in a line.

Constraints
2≤n≤100
0≤ the integer assigned to a face ≤100
Sample Input 1
3
1 2 3 4 5 6
6 2 4 3 5 1
6 5 4 3 2 1
Sample Output 1
No

Sample Input 2
3
1 2 3 4 5 6
6 5 4 3 2 1
5 4 3 2 1 6
Sample Output 2
Yes
*/

#define FACE_NUM 6
#define DICE_MAX 100
#define VALUE_MAX 100
#define VALUE_MIN 0
#include<stdio.h>
#include<stdlib.h>

/*Initialization for an int 2d array*/
void initialize (int n, int a[n][FACE_NUM]);
/*Error check for input values assigned on dices*/
void checkValue (int a);
/*Get all arrays from console input*/
void getAllArrays (int dice_num, int a[dice_num][FACE_NUM]);
/*Copy the array a to the array b*/
void cpArray (int a[FACE_NUM], int b[FACE_NUM]);
/*Roll the dice to the E direction*/
void rolltoE (int a[FACE_NUM]);
/*Roll the dice to the w direction*/
void rolltoW (int a[FACE_NUM]);
/*Roll the dice to the N direction*/
void rolltoN (int a[FACE_NUM]);
/*Roll the dice to the S direction*/
void rolltoS (int a[FACE_NUM]);
/*Roll the dice clockwise*/
void rolltoC (int a[FACE_NUM]);
/*Rotate the dice to an assigned pattern x (0<x<24)*/
void rotate(int x, int a[FACE_NUM]);
/*Check if the input two dices a, b are identical or not,
if yes, print "No" and end the program */
void checkIdentical(int a[FACE_NUM], int b[FACE_NUM]);

int backup[FACE_NUM];       /*The variable backuping the original dice values
                             in order to reset the dice values after a rotation*/


int main()
{
    /*Variable declaration, initialization*/
    int i=0;                            /*Loop variable*/
    int j=0;                            /*Loop variable*/
    int dice_num=0;                     /*The dice number*/
    scanf("%d",&dice_num);              /*Read the input dice number from console*/
    int dice[dice_num][FACE_NUM];       /*The values on the dices*/
    initialize(dice_num,dice);          /*Initialize the dice values*/
    getAllArrays(dice_num,dice);        /*Read the input dice values from console*/  
    

    /*Loop for comparing a dice with all its following dices*/
    for (i=0;i<dice_num;i++)
    {
        for (j=i+1;j<dice_num;j++)
        {   
            /*Check if the dice[i] and the dice[j] are identical, 
            if yes, print No and end the program*/
            checkIdentical(dice[i],dice[j]);
        }
    }
    /*If the loop ends with i==dice_num, all the dices are different*/
    if (i==dice_num)            
    {
        printf("Yes\n");
    }
    return 0;        
}

/*Function that initialize a 2D int array to 0*/
void initialize (int n, int a[n][FACE_NUM])
{
    int i=0;
    int j=0;
    for (i=0;i<n;i++)
    {
        for (j=0;j<FACE_NUM;j++)
        {
            a[i][j]=0;
        }
    }
    return;
}

/*Check if the value assigned on a dice fits the constraint or not*/
void checkValue (int a)
{
    if (a>VALUE_MAX)
    {
        printf("ERROR: The input value must be less than or equal to %d.\n",VALUE_MAX);
        exit(0);
    }
    else if (a<VALUE_MIN)
    {
        printf("ERROR: The input value must be greater than or equal to %d.\n",VALUE_MIN);
        exit(0);
    }
    return;
}

/*Read all the dice values according to the dice number*/
void getAllArrays (int dice_num, int a[dice_num][FACE_NUM])
{
    int i=0;
    int j=0;
    for(i=0;i<dice_num;i++)
    {
        for (j=0;j<FACE_NUM;j++)
        {
            scanf("%d",&a[i][j]);
            /*Error check for the input value*/
            checkValue(a[i][j]);
        }
    }

    return;
}

/*Copy the array a to the array b*/
void cpArray (int a[FACE_NUM], int b[FACE_NUM])
{
    int i=0;
    for(i=0;i<FACE_NUM;i++)
    {
        b[i]=a[i];
    }
    return;
}

/*Changing the dice values by rolling to E direction*/
void rolltoE (int a[FACE_NUM])
{
    int temp_arr[6]={0,0,0,0,0,0};
    temp_arr[0]=a[3];
    temp_arr[1]=a[1];
    temp_arr[2]=a[0];
    temp_arr[3]=a[5];
    temp_arr[4]=a[4];
    temp_arr[5]=a[2];
    
    int i=0;
    for(i=0;i<FACE_NUM;i++)
    {
        a[i]=temp_arr[i];
    }
    return;
}

/*Changing the dice values by rolling to W direction*/
void rolltoW (int a[FACE_NUM])
{
    int temp_arr[6]={0,0,0,0,0,0};
    temp_arr[0]=a[2];
    temp_arr[1]=a[1];
    temp_arr[2]=a[5];
    temp_arr[3]=a[0];
    temp_arr[4]=a[4];
    temp_arr[5]=a[3];

    int i=0;
    for(i=0;i<FACE_NUM;i++)
    {
        a[i]=temp_arr[i];
    }
    return;
}

/*Changing the dice values by rolling to N direction*/
void rolltoN (int a[FACE_NUM])
{
    int temp_arr[6]={0,0,0,0,0,0};
    temp_arr[0]=a[1];
    temp_arr[1]=a[5];
    temp_arr[2]=a[2];
    temp_arr[3]=a[3];
    temp_arr[4]=a[0];
    temp_arr[5]=a[4];

    int i=0;
    for(i=0;i<FACE_NUM;i++)
    {
        a[i]=temp_arr[i];
    }
    return;
}

/*Changing the dice values by rolling to S direction*/
void rolltoS (int a[FACE_NUM])
{
    int temp_arr[6]={0,0,0,0,0,0};
    temp_arr[0]=a[4];
    temp_arr[1]=a[0];
    temp_arr[2]=a[2];
    temp_arr[3]=a[3];
    temp_arr[4]=a[5];
    temp_arr[5]=a[1];

    int i=0;
    for(i=0;i<FACE_NUM;i++)
    {
        a[i]=temp_arr[i];
    }
    return;
}

/*Changing the dice values by rolling clockwise*/
void rolltoC (int a[FACE_NUM])
{
   int temp_arr[6]={0,0,0,0,0,0};
    temp_arr[0]=a[0];
    temp_arr[1]=a[2];
    temp_arr[2]=a[4];
    temp_arr[3]=a[1];
    temp_arr[4]=a[3];
    temp_arr[5]=a[5];

    int i=0;
    for(i=0;i<FACE_NUM;i++)
    {
        a[i]=temp_arr[i];
    }
    return;    
}

/*Rotate the dice to an assigned pattern x (0<=x<=23)*/
void rotate(int x, int a[FACE_NUM])
{
    int i=0;
    /*All the patterns obtained by rotation*/
    char pattern[24][6]=
    {
    "NNNN","C","CC","CCC",
    "N","NC","NCC","NCCC",
    "W","WC","WCC","WCCC",
    "E","EC","ECC","ECCC",
    "S","SC","SCC","SCCC",
    "NN","NNC","NNCC","NNCCC"
    };
    while (pattern[x][i]!='\0')
    {   
        switch (pattern[x][i])
        {
            case 'E':
            rolltoE(a);
            break;

            case 'N':
            rolltoN(a);
            break;

            case 'S':
            rolltoS(a);
            break;

            case 'W':
            rolltoW(a);
            break;

            case 'C':
            rolltoC(a);
            break;

            default:
            break;
        }
        i++;
    }
    return;
}

/*Check two dices are identical or not*/
void checkIdentical(int a[FACE_NUM], int b[FACE_NUM])
{
    int i=0;
    int j=0;

    while (i<24)
    {   
        cpArray(backup,a);          /*Reset the rotating dice*/
        rotate(i,a);
        for (j=0;j<FACE_NUM;j++)
        {   
            if (a[j]!=b[j])
            {
                break;
            }    
        }
        if (j==FACE_NUM)            /*If j==FACE_NUM, the dices are identical*/
        {
            printf("No\n");
            exit(0);
        }
        i++;
    }

    return;
}
