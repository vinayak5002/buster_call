#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, s, t) for (int i = (int)(s); i < (int)(t); ++i)
#define revrep(i, t, s) for (int i = (int)(t)-1; i >= (int)(s); --i)
#define all(x) begin(x), end(x)
template <typename T> bool chmax(T& a, const T& b) { return a < b ? (a = b, 1) : 0; }
template <typename T> bool chmin(T& a, const T& b) { return a > b ? (a = b, 1) : 0; }

template <typename T>
ostream& operator<<(ostream& os, const vector<T>& v) {
    for (int i = 0; i < (int) v.size(); ++i) os << v[i] << " ";
    return os;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);

    while (true) {
        int w, h;
        cin >> w >> h;
        if (w == 0) break;
        vector<vector<int>> grid(2*h-1);
        rep(i,0,2*h-1) {
            if (i % 2 == 0) grid[i].resize(w-1);
            else grid[i].resize(w);
            for (auto& x : grid[i]) cin >> x;
        }
        vector<vector<int>> G(h*w);
        rep(i,0,h) {
            rep(j,0,w-1) {
                if (grid[2*i][j] == 0) {
                    int u = i*w+j;
                    int v = i*w+j+1;
                    G[u].push_back(v);
                    G[v].push_back(u);
                }
            }
            if (i == h - 1) break;
            rep(j,0,w) {
                if (grid[2*i+1][j] == 0) {
                    int u = i*w+j;
                    int v = (i+1)*w+j;
                    G[u].push_back(v);
                    G[v].push_back(u);
                }
            }
        }

        queue<pair<int, int>> que;
        vector<vector<int>> dist(h, vector<int>(w));
        dist[0][0] = 1;
        que.push({0, 0});
        while (!que.empty()) {
            auto [i, j] = que.front();
            que.pop();

            for (auto v : G[i*w+j]) {
                int ni = v/w, nj = v%w;
                if (dist[ni][nj] == 0) {
                    dist[ni][nj] = dist[i][j] + 1;
                    que.push({ni, nj});
                }
            }
        }

        cout << dist[h-1][w-1] << endl;
    }

}
