#include <iostream>
#include <vector>
#include <cmath>
using namespace std;


int INF = pow(2, 31) -1;


class MinSegmentTreeLazy{
    public:
        MinSegmentTreeLazy(int);

        int calcParent(int, int);
        int find(int, int);
        int query(int, int, int, int, int);

        void lazyEvaluate(int);
        void rangeUpdate(int, int, int);
        void rangeUpdateQuery(int, int, int, int, int, int);
        void updateFromLazy(int, int);

    private:
        int n;
        vector<int> D, lazy;
    
};

MinSegmentTreeLazy::MinSegmentTreeLazy(int _n){
    int len;
    n = 1;
    while(n < _n) n *= 2;
    

    len = n*2-1;
    //D = new vector<int>(len);
    //lazy = new vector<int>(len);
    for(int i=0; i<len; i++){
        //D[i] = INF;
        //lazy[i] = INF;
        D.push_back(INF);
        lazy.push_back(INF);
    }
}


int MinSegmentTreeLazy::calcParent(int a, int b){
    return min(a, b);
}

int MinSegmentTreeLazy::find(int a, int b){
    // [a, b]
    return query(a, b+1, 0, 0, n);
}

int MinSegmentTreeLazy::query(int a, int b, int k, int l, int r){
    if (r <= a || b <= l) return INF;

    if(lazy[k] != INF) return lazy[k];

    if (a <= l && r <= b) return D[k];
    
    int mid_i, vl, vr;
    mid_i = (r+l)/2;
    vl = query(a, b, k*2+1, l, mid_i);
    vr = query(a, b, k*2+2, mid_i, r);

    return calcParent(vl, vr);
}


void MinSegmentTreeLazy::lazyEvaluate(int k){
    if (lazy[k] == INF) return;

    D[k] = lazy[k];

    if (k < n-1){
        lazy[k*2+1] = lazy[k];
        lazy[k*2+2] = lazy[k];
    }
    lazy[k] = INF;
}

void MinSegmentTreeLazy::rangeUpdate(int a, int b, int value){
    // [a, b]
    return rangeUpdateQuery(a, b+1, value, 0, 0, n);
}

void MinSegmentTreeLazy::rangeUpdateQuery(int a, int b, int value, int k, int l, int r){
    if (r <= a || b <= l) return;

    if (a <= l && r <= b){
        lazy[k] = value;
        updateFromLazy(k, value);
        return;
    }

    lazyEvaluate(k);

    
    rangeUpdateQuery(a, b, value, k*2+1, l, (r+l)/2);
    rangeUpdateQuery(a, b, value, k*2+2, (r+l)/2, r);
}

void MinSegmentTreeLazy::updateFromLazy(int k, int x){
    int parent_k;
    D[k] = x;

    while (k > 0){
        parent_k = (k-1)/2;
        if (D[k] == D[parent_k]) break;

        k = parent_k;

        lazyEvaluate(k*2+1);
        lazyEvaluate(k*2+1);

        D[k] = calcParent(D[k*2+1], D[k*2+2]);
    }
}


/*

# lazy実装
class MinSegmentTreeLazy:
    INF = 2**31 -1
    updated_d_indices = set()

    def __init__(self, n) -> None:
        self.n = 1
        while self.n < n:
            self.n *= 2# 末端ノード数

        # データの初期化 # 二分木の上層は末端-1の数 ！（知らんかった） + 0indexからより-1
        self.D = [self.INF for _ in range(self.n*2 -1)]
        self.lazy = [self.INF for _ in range(self.n*2 -1)]

    @staticmethod
    def calcParent(x, y):
        #最小求めるより(別の場合はこれを変更... INFの値も適切に変更)
        return min(x, y)


    def update(self, k, x):
        k += self.n -1# 中のノード数
        self.D[k] = x
        # 上層階に反映
        while k > 0:
            k = math.floor((k-1)/2 )#全切り捨て
            self.D[k] = self.calcParent(self.D[k*2+1], self.D[k*2+2])



    # [a, b]
    def find(self, a, b):
        return self.query(a, b+1, 0, 0, self.n)

    # [a, b)
    def query(self, a, b, k, l, r):
        if r <= a or b <= l:# 範囲外
            #print(a, b, k, l, r)
            return self.INF

        if self.lazy[k] != self.INF:
            # rangeで同じ場合、採用
            return self.lazy[k]

        #print(k, l, r)
        #self.lazyEvaluate(k)# 処理溜めていた部分を実行

        # a: 調べたいindex始点, b: 調べたいindex終点, k: 現在のindex, l: 現在のindexが指す始点, r: 現在のindexが指す終点
        if a <= l and r <= b:
            #print(a, b, k, l, r, self.D, self.lazy)
            return self.D[k]
        

        mid_i = math.floor((r+l)/2 )
        vl = self.query(a, b, k*2+1, l, mid_i)# r+1 /2がわからぬ
        vr = self.query(a, b, k*2+2, mid_i, r)
        #print(vl, vr, k)
        return self.calcParent(vl, vr)
        

    #
    def lazyEvaluate(self, k):
        if self.lazy[k] == self.INF:
            # 処理溜め部分はないので何もしない
            return None
        
        self.D[k] = self.lazy[k]# 今の部分を変更
        #print(k)
        if k < self.n -1:
            #末端以外は末端を調べた時用に情報を下へと伝播
            self.lazy[k*2+1] = self.lazy[k]
            self.lazy[k*2+2] = self.lazy[k]

        self.lazy[k] = self.INF# ノード更新、下を調べた場合の結果を伝え終わったので捨てる
        return None
        
    # [a, b]
    def rangeUpdate(self, a, b, value):
        self.rangeUpdateQuery(a, b+1, value, 0, 0, self.n)

    # [a, b)
    def rangeUpdateQuery(self, a, b, value, k, l, r):
        # a: 調べたいindex始点, b: 調べたいindex終点, value: a~bでの値, k: 現在のindex, l: 現在のindexが指す始点, r: 現在のindexが指す終点


        if r <= a or b <= l:# 範囲外
            return None
        if a <= l and r <= b:
            #print(a, b, k, l, r, self.D)
            self.lazy[k] = value# 丸々収まるノードで表現しておく(再帰的にfindで調べるため、利用可能)
            self.updateFromLazy(k, value)
            return 

        # 評価が被らないので子孫に伝播
        self.lazyEvaluate(k)

        mid_i = math.floor((r+l)/2 )
        self.rangeUpdateQuery(a, b, value, k*2+1, l, mid_i)
        self.rangeUpdateQuery(a, b, value, k*2+2, mid_i, r)
        return None

        
    ## lazyに落ちる範囲をアップデートする時、Dを問題1のようにアップデートする
    def updateFromLazy(self, k, x):
        self.D[k] = x

        while k > 0:

            parent_k =  math.floor((k-1)/2)#全切り捨て
            if self.D[k] == self.D[parent_k]:
                    break
            k = parent_k

            self.lazyEvaluate(k*2+1)
            self.lazyEvaluate(k*2+2)
                #flag = False

            self.D[k] = self.calcParent(self.D[k*2+1], self.D[k*2+2])

*/


int main (){
    int n, q;
    MinSegmentTreeLazy *MST; 
    cin >> n >> q;

    MST = new MinSegmentTreeLazy(n);


    for(int i=0; i<q; i++){
        int com;
        cin >> com;

        if(com == 0){
            // 追加
            int s, t, x;
            cin >> s >> t >> x;

            MST->rangeUpdate(s,t,x);
        }
        else if(com == 1){
            // 表示
            int s, t, v;
            cin >> s >> t;

            v = MST->find(s,t);
            cout << v << endl;
        }
    }

    return 0;
}
