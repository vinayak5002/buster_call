//
// Created by jkxy on 2022/6/28.
//
#include <bits/stdc++.h>

using namespace std;
typedef pair<int,int> P;
const int INF=100000000;
int n,m;
char maze[1005][1005]={};
int d[1005][1005]={};
int sx,sy;
int gx,gy;
int dx[4]={-1,0,1,0};
int dy[4]={0,-1,0,1};
int cnt=0;
void bfs(int tar){
    queue<P> que;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            d[i][j]=INF;
        }
    }
    que.push(P(sx,sy));
    d[sx][sy]=0;
    while (que.size()){
        P p=que.front();que.pop();
        if(maze[p.first][p.second]-'0'==tar){
            sx=p.first;sy=p.second;
            cnt+=d[p.first][p.second];
        }
        for (int i = 0; i < 4; ++i) {
            int nx=p.first+dx[i];
            int ny=p.second+dy[i];
            if(nx>=0&&nx<n&&ny>=0&&ny<m&&maze[nx][ny]!='X'&&d[nx][ny]==INF){
                que.push(P(nx,ny));
                d[nx][ny]=d[p.first][p.second]+1;
            }
        }
    }
}
int main(){
    int ans;
    cin>>n>>m>>ans;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cin>>maze[i][j];
            if(maze[i][j]=='S'){
                sx=i;
                sy=j;
            }
        }
    }
    for (int i = 1; i <= ans; ++i) {
        bfs(i);
        cout<<cnt<<endl;
    }


}
