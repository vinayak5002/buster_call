#include <bits/stdc++.h>

namespace std {

template<class Fun>
class y_combinator_result {
	Fun fun_;
public:
	template<class T>
	explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}

	template<class ...Args>
	decltype(auto) operator()(Args &&...args) {
		return fun_(std::ref(*this), std::forward<Args>(args)...);
	}
};

template<class Fun>
decltype(auto) y_combinator(Fun &&fun) {
	return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));
}

} // namespace std

int main() {
	using namespace std;
	ios_base::sync_with_stdio(false), cin.tie(nullptr);

	int N, R; cin >> N >> R;
	vector<int> par(N, -1);
	auto get_par = y_combinator([&](auto self, int i) -> int {
		return par[i] < 0 ? i : (par[i] = self(par[i]));
	});
	auto merge = [&](int a, int b) -> void {
		a = get_par(a);
		b = get_par(b);
		if (a == b) return;
		if (-par[a] < -par[b]) swap(a, b);
		par[a] += par[b];
		par[b] = a;
	};
	for (int i = 0; i < N; i++) {
		int p; cin >> p; p--;
		merge(i, p);
	}

	R = min(R, N-R);
	const int B = 150010;
	assert(R < B);
	bitset<B> poss; poss[0] = true;
	vector<int> sz_freq(R+1);
	for (int i = 0; i < N; i++) {
		if (par[i] < 0) {
			int sz = -par[i];
			if (sz > N-R) { // faster, maybe
				cout << "No" << '\n';
				exit(0);
			}
			if (sz <= R) {
				sz_freq[sz]++;
			}
		}
	}
	for (int s = 1; s <= R; s++) {
		int f = sz_freq[s];
		for (int k = 1; k <= f; k *= 2) {
			poss |= poss << (k * s);
		}
	}
	cout << (poss[R] ? "Yes" : "No") << '\n';

	return 0;
}

