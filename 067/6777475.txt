#include <bits/stdc++.h>
using namespace std ;
#define MAX 2000000002
#define NIL -2000000002
#define INF 2000000002
#define MAXN 123456
#define M 1046527

// const int M = 1e9+7 のようにかく。
//998,244,353がよく使われるのか。
/*組み合わせの数の計算の問題では稀に高速フーリエ変換を用いて計算量を削減する問題が出ます。
通常の高速フーリエ変換では複素数をうまく用いるのですが、ある性質を持つ素数を複素数の代わりに使い
剰余環上で高速フーリエ変換を可能にした高速剰余変換(FMT)というものが存在します。
FMTを想定解にすることで高速フーリエ変換をしてかつ余りを取るといったタイプの問題が出題できるようになります。
性質の良い素数として1+a*2^nの形を取りかつnができるだけ大きい素数が挙げられて
(そのような形の素数を使うと長さ2^nの列に対するFMTができる)、
具体的にな質の良い整数の代表例として998244353=1+119×2^23が挙げられます。*/

typedef long long int ll;
const int debug = 0 ; 
const int debug1 = 0 ; 
#define REP(i,n) for(int i=0; i<(int)n; i++)

//グローバル変数のみに配置できる大きな配列というケースがありえます
//グローバル変数はヒープ、ローカル変数はスタック領域に割り当てられることが多いです
char HT[1046527][14];

int CharToKey (char *s) {
    int res = 0;
    REP(i,strlen(s)){
        if ( s[i] == 'A') { res += pow(5,i)*1; }
        if ( s[i] == 'T') { res += pow(5,i)*2; }
        if ( s[i] == 'G') { res += pow(5,i)*3; }
        if ( s[i] == 'C') { res += pow(5,i)*4; }
    }
    return res ;
}

int h1 (int key) {
    return key % M;
}

int h2 (int key) {
    return key % (M-1) + 1; // h2が0の場合に解消されないから
}

int insert(char *s){
    int key = CharToKey(s);
    REP(i,M) {
        ll hash = ( (ll)h1(key) +(ll)h2(key) *(ll) i ) % (ll)M ;
        if ( strlen(HT[hash]) == 0 ) {
            strcpy(HT[hash], s);
            break; 
        }
    }
    return 0;
}

int find(char *s ) {
    int res = 0;
    int key = CharToKey(s);
    REP(i,M) {
        int hash = h1(key) + h2(key) * i ;
        if ( strcmp(HT[hash], s) == 0 ) { res=1; break;}
        if ( strlen(HT[hash]) == 0 ) {break;}
    }
    return res;
}

//ポインタ渡しと参照渡し
// 参照渡しはC++で追加された
// ポインタ渡しは　通常は&で渡して、*で受ける。（受けたのはポインタ）
// 参照渡しはそのまま渡して、&で受ける。（受けたのは値を参照した値）
// 結果は同じような感じ。

//「配列渡し」は「ポインタ渡し」の一種でポインタ変数を引数として使うことは同じですが
//、呼び出し元の実引数が変数ではなくて配列であるという違いがあります。
// 要するに&をつけない？

int main() {
    int n , m , key;
    int  res =0;

    scanf ("%d",&n);

    char s1[7], s2[15];
    scanf ("%d",&m);
    REP(i,n){ 
        scanf ("%s %s", s1, s2);
        if (strcmp(s1,"insert")==0){
            //printf("insert\n");
            insert(s2);
        }
        else if (strcmp(s1,"find")==0) {
            //printf("find\n");
            printf("%s", find(s2) > 0 ? "yes\n" : "no\n") ;
        }
    }

    return 0;
}


