import java.util.*;
import java.lang.*;
import java.io.*;

class Graph {
	class Edge implements Comparable<Edge>{
		int src, dest, weight;

		public int compareTo(Edge compareEdge){
			return this.weight - compareEdge.weight;
		}
	};

	class subset{
		int parent, rank;
	};

	int V, E;
	Edge edge[]; 

	Graph(int v, int e){
		V = v;
		E = e;
		edge = new Edge[E];
		for (int i = 0; i < e; ++i)
			edge[i] = new Edge();
	}

	int find(subset subsets[], int i){
		if (subsets[i].parent != i)
			subsets[i].parent
				= find(subsets, subsets[i].parent);

		return subsets[i].parent;
	}

	void Union(subset subsets[], int x, int y)
	{
		int xroot = find(subsets, x);
		int yroot = find(subsets, y);

		if (subsets[xroot].rank
			< subsets[yroot].rank)
			subsets[xroot].parent = yroot;
		else if (subsets[xroot].rank
				> subsets[yroot].rank)
			subsets[yroot].parent = xroot;

		else {
			subsets[yroot].parent = xroot;
			subsets[xroot].rank++;
		}
	}

	void MST(){
		Edge result[] = new Edge[V];
		int e = 0;
	    int i = 0;
		for (i = 0; i < V; ++i){
			result[i] = new Edge();
        }
		Arrays.sort(edge);

		subset subsets[] = new subset[V];
		for (i = 0; i < V; ++i)
			subsets[i] = new subset();

		for (int v = 0; v < V; ++v){
			subsets[v].parent = v;
			subsets[v].rank = 0;
		}

		i = 0; 

        while (e < V - 1){
			Edge next_edge = edge[i++];

			int x = find(subsets, next_edge.src);
			int y = find(subsets, next_edge.dest);

			if (x != y) {
				result[e++] = next_edge;
				Union(subsets, x, y);
			}
		}
		int minimumCost = 0;
		for (i = 0; i < e; ++i){
			minimumCost += result[i].weight;
		}
		System.out.println(minimumCost);
	}
}

class Main{
	public static void main(String[] args){
        Scanner sc = new Scanner(System.in); //scans 

		int V = sc.nextInt();
		int E = sc.nextInt();
		Graph graph = new Graph(V, E);

        for(int i=0; i<E; i++){
            int s = sc.nextInt();
            int t = sc.nextInt();
            int w = sc.nextInt();

            graph.edge[i].src = s;
            graph.edge[i].dest = t;
            graph.edge[i].weight = w;
        }
		graph.MST();
	}
}

