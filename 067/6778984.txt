#include <bits/stdc++.h>

using namespace std;

#include <iostream>
#include <optional>
#include <string>

namespace suisen::parsing {
    using State = std::string::const_iterator;

    struct ParseError {
        ParseError(const std::string& message = "") {
            std::cerr << message << std::endl;
        }
    };

    namespace internal {
        void print_rest_of_string(State it) {
            cerr << "Rest string is '";
            while (*it) cerr << *it++;
            cerr << "'" << endl;
        }
    }

    void consume(State& it, char expected) {
        if (*it == expected) {
            *it++;
        } else {
            cerr << "Expected '" << expected << "' but got '" << *it << "'" << endl;
            internal::print_rest_of_string(it);
            throw ParseError{};
        }
    }

    bool in(const State& it, char l, char r) {
        return l <= *it and *it <= r;
    }
    bool is(const State& it, char c) {
        return *it == c;
    }

    void assert_range(const State& it, char lo, char hi) {
        if (in(it, lo, hi)) {
            cerr << "Expected [" << lo << "-" << hi << "] but got '" << *it << "'" << endl;
            internal::print_rest_of_string(it);
            throw ParseError{};
        }
    }
    void assert_exact(const State& it, char c) {
        if (not is(it, c)) {
            cerr << "Expected '" << c << "' but got '" << *it << "'" << endl;
            internal::print_rest_of_string(it);
            throw ParseError{};
        }
    }

    long long nonnegative_number(State& it) {
        long long res = 0;
        assert_range(it, '0', '9');
        while (in(it, '0', '9')) res = res * 10 + (*it++ - '0');
        return res;
    }
    long long number(State& it) {
        long long res = 0;
        bool neg = false;
        while (is(it, '-')) neg = not neg, consume(it, '-');
        while (in(it, '0', '9')) res = res * 10 + (*it++ - '0');
        if (neg) res = -res;
        return res;
    }

    namespace normal_expression {
        namespace internal {
            long long expr(State& it);
            long long term(State& it);
            long long factor(State& it);

            long long expr(State& it) {
                long long res = term(it);
                while (true) {
                    if (*it == '+') {
                        consume(it, '+');
                        res = res + term(it);
                    } else if (*it == '-') {
                        consume(it, '-');
                        res = res - term(it);
                    } else break;
                }
                return res;
            }
            long long term(State& it) {
                long long res = factor(it);
                while (true) {
                    if (*it == '*') {
                        consume(it, '*');
                        res = res * factor(it);
                    } else if (*it == '/') {
                        consume(it, '/');
                        res = res / factor(it);
                    } else break;
                }
                return res;
            }
            long long factor(State& it) {
                bool neg = false;
                while (is(it, '-')) neg = not neg, consume(it, '-');
                long long res;
                if (is(it, '(')) {
                    consume(it, '(');
                    res = expr(it);
                    consume(it, ')');
                } else {
                    res = nonnegative_number(it);
                }
                if (neg) res = -res;
                return res;
            }
        }

        long long parse(State& it) {
            return internal::expr(it);
        }
    }
}
using namespace suisen::parsing;

int n;

int mod(long long x) {
    return (x %= n) < 0 ? x + n : x;
}

vector<int> operator*(const vector<int> &p, const vector<int> &q) {
    vector<int> r(n * n);
    for (int i = 0; i < n * n; ++i) r[i] = q[p[i]];
    return r;
}
vector<int> pow(vector<int> a, long long b) {
    vector<int> res(n * n);
    iota(res.begin(), res.end(), 0);
    for (; b; b >>= 1) {
        if (b & 1) res = res * a;
        a = a * a;
    }
    return res;
}

vector<int> seq(State& it) {
    vector<int> p(n * n);
    iota(p.begin(), p.end(), 0);
    while (*it and *it != ')') {
        vector<int> q(n * n);
        iota(q.begin(), q.end(), 0);
        if (*it == '(') {
            consume(it, '(');
            q = seq(it);
            consume(it, ')');
            long long v = number(it);
            p = p * pow(q, v);
        } else {
            char op = *it++;
            int k = number(it) - 1;
            if (op == 'L') {
                for (int j = 0; j < n - 1; ++j) q[k * n + (j + 1)] = k * n + j;
                q[k * n + 0] = k * n + (n - 1);
            } else if (op == 'R') {
                for (int j = 0; j < n - 1; ++j) q[k * n + j] = k * n + (j + 1);
                q[k * n + (n - 1)] = k * n + 0;
            } else if (op == 'U') {
                for (int i = 0; i < n - 1; ++i) q[(i + 1) * n + k] = i * n + k;
                q[0 * n + k] = (n - 1) * n + k;
            } else if (op == 'D') {
                for (int i = 0; i < n - 1; ++i) q[i * n + k] = (i + 1) * n + k;
                q[(n - 1) * n + k] = 0 * n + k;
            }
            else assert(false);
            p = p * q;
        }
    }
    return p;
}

int main() {
    int l;
    string s;
    cin >> n >> l >> s;
    auto it = s.cbegin();
    auto p = seq(it);

    vector<int> a(n * n);
    for (int i = 0; i < n; ++i) for (int j = 0; j < n; ++j) {
        int v = i * n + j + 1;
        a[p[i * n + j]] = v;
    }

    for (int i = 0; i < n; ++i) for (int j = 0; j < n; ++j) {
        cout << a[i * n + j] << " \n"[j == n - 1];
    }
}


