def same(x, y):
    if find_Root(x) == find_Root(y):
        return 1
    else:
        return 0

def find_Root(x):
    if parent[x] != x:
        parent[x] = find_Root(parent[x])
    return parent[x]


def unite(x, y):
    root_x = find_Root(x)
    root_y = find_Root(y)
    if(root_x == root_y):
        return

    if rank[root_x] >= rank[root_y]:
        parent[root_y] = root_x
        rank[root_x] += rank[root_y]
    else:
        parent[root_x] = root_y
        rank[root_y] += rank[root_x]


V, E = map(int, input().split())
edges = []
for _ in range(E):
    s, t, w = map(int, input().split())
    edges.append((w, s, t))
edges.sort()
parent = list(range(V))
rank = list(range(V))

cost = 0
for edge in edges:
    w, s, t = edge
    if not same(s, t):
        cost += w
        unite(s, t)
print(cost)

