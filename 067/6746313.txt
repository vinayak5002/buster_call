#include<stdio.h>

#define N 100
#define INFTY 1<<21

int M[N][N],n;
int d[N];

void bfs(int s)
{
	queue<int> q;
	q.push(s);
	for(int i = 0; i<n; i++)
	{
		d[i] = INFTY;
	}
		d[s] = 0;
	int u;
	while(!q.empty())
	{
		u = q.front(); q.pop();
		for(int v = 0; v<n; v++)
		{
			if(M[u][v] == 0)continue;
			if(d[v] != INFTY)continue;
			d[v] = d[u] + 1;
			q.push(v);
		}
	}
	for(int i = 0; i<n; i++)
	{
		printf("%d ")
		
void dfs_visit(int u)
{
	int v;
	color[u] = GRAY;
	d[u] = ++tt;
	for(v=0; v<n; v++)
	{
		if(M[u][v] == 0)continue;
		if(color[v] == WHITE)
		{
			dfs_visit(v);
		}
	}
	color[u] = BLACK;
	f[u] = ++tt;
}

void dfs()
{
	int u;
	for(u=0; u<n; u++)color[u] = WHITE;
	tt = 0;
	
	for(u=0; u<n; u++)
	{
		if(color[u] == WHITE) dfs_visit(u);
	}
	for(u=0; u<n; u++)
	{
		printf("%d %d %d\n",u+1, d[u], f[u]);
	}
}
			
int main()
{
	int u, v, k, i, j;
	
	scanf("%d",&n);
	
	for(i=0; i<n; i++)
	{
		for(j=0; j<n; j++)
		{
			M[i][j] = 0;
		}
	}
	
	for(i=0; i<n; i++)
	{
		scanf("%d %d",&u,&k);
		u--;
		for(j=0; j<k; j++)
		{
			scanf("%d",&v);
			v--;
			M[u][v] = 1;
		}
	}
	
	dfs();
	
	return 0;
}

