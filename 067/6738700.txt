#include <bits/stdc++.h>
#define rep(i, st, n) for (ll i = (ll)st; i < (ll)st + (ll)n; i++)
#define repd(i, st, gl, c) for(ll i = ll(st); i <= ll(gl); i += ll(c))
#define rrep(i, st, n) for (ll i = (ll)st; i > (ll)st - (ll)n; i--)
#define rrepd(i, st, gl, c) for(ll i = ll(st); i >= ll(gl); i -= ll(c))
#define fi first
#define se second
#define pb push_back
#define pb push_back
#define mp make_pair
using namespace std;
using ll = long long;
using P = pair<ll, ll>;
using Graph = vector<vector<P>>;
ll a, n, cnt, ans;
const ll inf = 1e18;
priority_queue<P, vector<P>, greater<P>> pq_a;//昇順
Graph G;
vector<ll> dist;

int main(){
    ll e, r;
    cin >> n >> e >> r;
    G.resize(n);
    dist.resize(n, inf);
    dist[r] = 0;
    pq_a.push(mp(dist[r], r));

    ll s, t, d;
    rep(i, 0, e){
        cin >> s >> t >> d;
        G[s].pb(mp(d, t));
    }

    while(!pq_a.empty()){
        auto top = pq_a.top();
        pq_a.pop();
        ll v = top.se;
        ll dist_v = top.fi;
        for(auto c: G[v]){
           ll nv = c.se;
           ll dist_nv = c.fi;
           if(dist[nv] <= dist_v + dist_nv) continue;
           dist[nv] = dist_v + dist_nv;
           pq_a.push(mp(dist[nv], nv)); 
        }

    }
    rep(i, 0, n) {
        if(dist[i] == inf) cout << "INF" << endl;
        else cout << dist[i] << endl;
    }
}
