#include <iostream>

#define SENTINEL 2147483647 // Max int

using namespace std;

void printArray( int arr[], int size );
int merge( int arr[], int left, int mid, int right );
int mergeSort( int arr[], int left, int right );

int main()
{
	int size;
	std::cin >> size;
	int* arr = new int[size];

	for( int i = 0; i < size; i++ )
	{
		std::cin >> arr[i];
	}

	int nComp = mergeSort( arr, 0, size );

	printArray( arr, size );

	cout << nComp << endl;

	delete[] arr;

	return 0;
}

void printArray( int arr[], int size )
{
	if( size == 0 ) return;

	for( int i = 0; i < size - 1; i++ )
	{
		std::cout << arr[i] << ' ';
	}
	std::cout << arr[size - 1] << std::endl;
}

int merge( int arr[], int left, int mid, int right )
{
	int count = 0;
	int n1 = mid - left;
	int n2 = right - mid;
	int* L = new int[n1 + 1];
	int* R = new int[n2 + 1];

	for( int i = 0; i < n1; i++ )
	{
		L[i] = arr[left + i];
	}

	for( int i = 0; i < n2; i++ )
	{
		R[i] = arr[mid + i];
	}

	L[n1] = SENTINEL;
	R[n2] = SENTINEL;

	int i = 0;
	int j = 0;

	for( int k = left; k < right; k++ )
	{
		if( L[i] <= R[j] )
		{
			arr[k] = L[i];
			i++;
		}
		else
		{
			arr[k] = R[j];
			j++;
		}

		count++;
	}

	delete[] L;
	delete[] R;

	return count;
}

int mergeSort( int arr[], int left, int right )
{
	int count = 0;

	if( left + 1 < right )
	{
		int mid = (left + right) / 2;
		count += mergeSort( arr, left, mid );
		count += mergeSort( arr, mid, right );
		count += merge( arr, left, mid, right );
	}

	return count;
}
