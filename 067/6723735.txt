#include <bits/stdc++.h>
////#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vd = vector<double>;
using vvd = vector<vd>;
using vvvd = vector<vvd>;
#define all(A) A.begin(),A.end()
#define ALL(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}


int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    

    while(1){
        ll N,M,L;
        cin>>N>>M>>L;
        if(N==0)return 0;
        vector<vector<pair<ll,ll>>> G(N,vector<pair<ll,ll>>(N,{-1,-1}));
        rep(i,M){
            ll A,B,D,E;
            cin>>A>>B>>D>>E;
            A--;B--;
            G[A][B]={D,E};
            G[B][A]={D,E};
        }
        priority_queue<pair<ll,pair<ll,ll>>,vector<pair<ll,pair<ll,ll>>>,greater<pair<ll,pair<ll,ll>>>> Q;
        vector<vector<bool>> seen(N,vector<bool>(L+1,false));
        Q.push({0,{0,L}});
        vvll DP(N,vll(L+1,1e18));
        rep(l,L+1)DP[0][l]=0;
        while(!Q.empty()){
            auto p=Q.top();
            Q.pop();
            ll cost=p.first;
            ll n=p.second.first;
            ll l=p.second.second;
            if(seen[n][l])continue;
            seen[n][l]=1;
            rep(j,N){
                if(G[n][j].first!=-1){
                    if(l>=G[n][j].first){
                        if(!seen[j][l-G[n][j].first]){
                            if(DP[j][l-G[n][j].first]>cost){
                                DP[j][l-G[n][j].first]=cost;
                                Q.push({cost,{j,l-G[n][j].first}});
                            }
                        }
                    }
                    if(!seen[j][l]){
                        if(DP[j][l]>cost+G[n][j].second){
                            DP[j][l]=cost+G[n][j].second;
                            Q.push({DP[j][l],{j,l}});
                        }
                    }
                }
            }
        }
        ll an=1e18;
        rep(l,L+1)chmin(an,DP[N-1][l]);
        cout<<an<<endl;
    }
    

}

