#define _USE_MATH_DEFINES
#include<bits/stdc++.h>
#include<unordered_map>

using namespace std;
#define LP(I,S,G) for (long long int I = (S); I < (G); I++)
#define IN(X) 	for (int in = 0; in < X.size(); in++)cin >> X[in]
#define OUT(X) 	for (int in = 0; in < X.size(); in++)cout << X[in]<<" "
#define SORT(X) sort((X).begin(), (X).end())
#define CSORT(X,Y) sort(X.begin(), X.end(),Y)
#define COPY(X,Y) copy(X.begin(), X.end(), Y.begin())
#define ALL(X,Y) for (auto X = (Y).begin(); X != (Y).end(); X++)
#define FULL(a)  (a).begin(),(a).end()
#define BFS(Q,S) for(Q.push(S);Q.size()!=0;Q.pop())
typedef long long int ll;
typedef unsigned long long int ull;
long long int M = pow(10, 9) + 7;


int dx[] = { 0,-1,0,1 }, dy[] = { -1,0,1,0 };

ll MAX(ll A, ll B) { return ((A) > (B) ? (A) : (B)); }
ll MIN(ll A, ll B) { return ((A) < (B) ? (A) : (B)); }
long long int xor128() {
	static long long int x = 123456789, y = 362436069, z = 521288629, w = 88675123;
	long long int t = (x ^ (x << 11));
	x = y; y = z; z = w;
	return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
}

struct HashPair {
	//注意 constがいる
	template<class T1, class T2>
	size_t operator()(const pair<T1, T2> &p) const {
		//first分をハッシュ化する
		auto hash1 = hash<T1>{}(p.first);
		//second分をハッシュ化する
		auto hash2 = hash<T2>{}(p.second);
		//重複しないようにハッシュ処理
		size_t seed = 0;
		seed ^= hash1 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		seed ^= hash2 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		return seed;
	}
};
template<class I1, class I2>
istream& operator>>(istream& s, pair<I1, I2>& in) {
	s >> in.first >> in.second;
	return s;
}

bool solve(string& s, ll l, ll r, ll now, vector<bool>& pass) {
	if (s.size() == 1) {
		if (s[0] == 'T')return 1;
		if (s[1] == 'F')return 0;
		return pass[s[0] - 'a'];
	}
	ll op=0;
	bool minus = 0;
	vector<ll> v;
	while (now != r) {
		if (s[now] == '(') {
			ll new_l = now + 1;
			ll new_r = new_l;
			ll cnt = 1;
			while (cnt != 0) {
				if (s[new_r] == '(')cnt++;
				if (s[new_r] == ')')cnt--;
				new_r++;
			}
			new_r--;
			v.push_back(solve(s, new_l, new_r, new_l, pass));
			if (minus) {
				*v.rbegin() = !(*v.rbegin());
				minus = 0;
			}
			now = new_r + 1;
		}
		else if (s[now] == 'T') {
			v.push_back(1);
			if (minus) {
				*v.rbegin() = !(*v.rbegin());
				minus = 0;
			}
			now++;
		}
		else if (s[now] == 'F') {
			v.push_back(0);
			if (minus) {
				*v.rbegin() = !(*v.rbegin());
				minus = 0;
			}
			now++;
		}
		else if(s[now]>='a'&&s[now]<='z'){
			v.push_back(pass[s[now] - 'a']);
			if (minus) {
				*v.rbegin() = !(*v.rbegin());
				minus = 0;
			}
			now++;
		}
		else {
			if (s[now]=='-') {
				if (s[now + 1] == '>') {
					op = 3;
					now += 2;
				}
				else {
					minus = !minus;
					now++;
				}
			}
			else if (s[now] == '*') {
				op = 1;
				now++;
			}
			else if (s[now] == '+') {
				op = 2;
				now++;
			}
		}
	}
	if (op == 0)return v[0];
	if (op == 1)return (v[0] & v[1]);
	else if (op == 2)return (v[0] | v[1]);
	else return((!v[0]) | (v[0] & v[1]));
}

int main() {
	while (1) {
		string s;
		cin >> s;
		if (s == "#")break;
		ll n = s.size();
		string l,r;
		ll c=0;
		bool f = 0;
		while (c != n) {
			if (s[c] != '=') {
				if (f==0)l.push_back(s[c]);
				else r.push_back(s[c]);
			}
			else {
				f = 1;
			}
			c++;
		}
		bool ok = 1;
		LP(x, 0, (1 << 11)) {
			vector<bool> p(11, 0);
			LP(i, 0, 11) {
				if ((x&(1 << i)) != 0)p[i] = 1;
			}
			ll ans_l = solve(l, 0, l.size(), 0, p);
			ll ans_r = solve(r, 0, r.size() , 0, p);
			if (ans_l != ans_r) {
				cout << "NO\n";
				ok = 0;
				break;
			}
		}
		if (ok)cout << "YES\n";
	}

	return 0;
}

