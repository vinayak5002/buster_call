#include <bits/stdc++.h>

using namespace std;

bool is_digit(char c) {
    return '0' <= c and c <= '9';
}

pair<int, long long> solve(const string& s, int r) {
    if (is_digit(s[r - 1])) {
        int l = r - 1;
        while (l > 0 and is_digit(s[l - 1])) --l;
        return { l, stoi(s.substr(l, r - l)) };
    }

    int cnt = 0;
    while (s[r - 1] == '>') ++cnt, --r;

    long long x = -1;
    while (cnt) {
        vector<long long> st;
        if (x >= 0) st.push_back(x);
        while (r - 1 >= 0) {
            if (is_digit(s[r - 1])) {
                int l = r - 1;
                while (l > 0 and is_digit(s[l - 1])) --l;
                st.push_back(stoi(s.substr(l, r - l)));
                r = l;
            } else if (s[r - 1] == '>') {
                auto [l, val] = solve(s, r - 2);
                st.push_back(val);
                r = l;
            } else {
                break;
            }
        }
        long long v = st.back();
        st.pop_back();
        while (st.size()) v >>= min(32LL, st.back()), st.pop_back();
        while (cnt and r - 1 >= 0 and s[r - 1] == '<') {
            v = (v * v) % 1000000007;
            --r, --cnt;
        }
        x = v;
    }
    return { r, x };
}

int main() {
    while (true) {
        string s;
        getline(cin, s);
        if (s == "#") break;
        string t;
        for (char c : s) if (c != ' ' and c != 'S') t += c;
        cout << solve(t, t.size()).second << endl;
    }
}
