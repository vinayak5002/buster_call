#include<stdio.h>
#include<stdlib.h>

struct node{
  struct node *right;
  struct node *left;
  struct node *parent;
  int key;};
  
typedef struct node * Node;
#define NIL NULL //NILにNULLを代入

Node root;

Node treeMinimum(Node x)//二分探索の最小値
{
	while(x->left!=NIL)
	{
		x = x->left;
	}	
	return x;//最小の接点を返す
}

Node find(Node u, int k)//二分探索木の探索
{
	while(u!=NIL && k!=u->key)
	{
		if(k<u->key)//節点kより与えられたkeyが大きい場合左の子
		{
			u=u->left;
		}
		else//それ以外右
		{
			u=u->right;
		}
	}
	
	return u;
}

Node treeSuccessor(Node x)//次接点の探索
{
	if(x->right != NIL)//右の子が存在するとき
	{
		return treeMinimum(x->right);
	}
	Node y = x->parent;
	while( y != NIL && x == y->right)
	{
		x = y;
		y = y->parent;
	}
	return y;
}

void treeDelete(Node z)
{
	Node y;
	Node x;
	
	if(z->left == NIL || z->right == NIL)
	{
		y = z;//zが子を持たないか子を1つ持つ場合は入力接点のz
	}
	
	else 
	{
		y = treeSuccessor(z);//zが子を2つ持つ場合zの次接点
	}
	
	if(y->left != NIL)
	{
		x = y->left;//yに左の子があれば、xはyの左の子
	}
	else 
	{
		x = y->right;//yに左の子がなければ、xはyの右の子
	}
	
	if( x != NIL)
	{
		x->parent = y->parent;//xの親を設定する
	}
	
	if(y->parent == NIL)
	{
		root = x;//yが根の時、xを木の根とする
	}
	
	else
	{
		if( y  == y->parent->left)//yがその親pの左の子なら、pの左の子をxとする。
		{
			y->parent->left = x;
		}
		else//yがその親pの右の子なら、pの右の子をxとする。
		{
			y->parent->right = x;
		}
	}
	
	if( y != z)//zの次節点が削除された場合
	{
		z->key = y->key;//yのデータをzにコピーする
	}
	free(y);
}


void insert(int k)//二分探索に新たに値を挿入
{
  
	Node y = NIL;
  	Node x = root;
  	Node a;

  a = malloc(sizeof(struct node));//左の子がNIL、右の子がNILである接点を受け取る
  a->key = k;
  a->left = NIL;
  a->right = NIL;

	while(x!=NIL){
		y=x;//親を設定
		if(a->key<x->key)
		{
			x=x->left;
		}
		else
		{
			x=x->right;
		}
	}
	a->parent=y;
	
	if(y==NIL)
	{
		root=a;
	}
	else
	{
		if(a->key<y->key)
		{
			y->left=a;//zをyの左の子に
		}
		else
		{
			y->right=a;//zをyの右の子に
		}
	}
}

void inorder(Node u)//中間順巡回2回目で出力
{
	if(u==NIL)
	{
		return;
	}
	
		inorder(u->left);
		printf(" %d",u->key);
		inorder(u->right);
}


void preorder(Node u)//先行順巡回1回目で出力
{
	if(u==NIL)
	{
		return;
	}
	
	printf(" %d",u->key);
	preorder(u->left);
	preorder(u->right);
}

int main(void)
{
  int n, i, x, y;
  char com[20];
  scanf("%d", &n);

  for ( i = 0; i < n; i++ )
	{
   		scanf("%s", com);
		if(com[0]=='f')
		{
			scanf("%d", &x);
			Node t = find(root,x);
			if(t!=NIL)
			{
				printf("yes\n");
			}
				else
				{
					printf("no\n");
				}
		}
			
    	else if ( com[0] == 'i' )
		{
      	scanf("%d", &x);
      	insert(x);
    	}
		else if ( com[0] == 'p' )
		{
      		inorder(root);
      		printf("\n");
     		preorder(root);
      		printf("\n");
    	} 
		else if( com[0] == 'd')
		{
			scanf("%d", &x);
			treeDelete(find(root, x));
		}
	}
  	
  return 0;
}

