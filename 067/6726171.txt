#include <bits/stdc++.h>
////#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vd = vector<double>;
using vvd = vector<vd>;
using vvvd = vector<vvd>;
#define all(A) A.begin(),A.end()
#define ALL(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}

map<char, ll> MP;
ll dfs(string S) {
    ll N = S.size();
    if (N == 1) {
        return MP[S[0]];
    }

    
    if (S[0] == '(') {
        ll k = 1;
        rep(i, N-1) {
            if (S[i + 1] == '(')k++;
            else if (S[i + 1] == ')')k--;
            if (k == 0 && i != N - 2) {
                k = -1e18;
            }
        }
        if(k==0)return dfs(S.substr(1, N - 2));
    }
    ll P = 0;
    rep(i, N) {
        if (S[i] == '(')P++;
        else if (S[i] == ')')P--;
        else if (P == 0 && S[i] == '+') {

            ll A = dfs(S.substr(0, i));
            ll B = dfs(S.substr(i + 1, N - i - 1));
            return max(A, B);
        }
        else if (P == 0 && S[i] == '*') {

            ll A = dfs(S.substr(0, i));
            ll B = dfs(S.substr(i + 1, N - i - 1));
            return min(A, B);
        }
    }
    return 2 - dfs(S.substr(1, N - 1));
}

int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    
    while(1){    ll N,M;
    cin>>N>>M;
    if(N==0)return 0;
    vvll A(N,vll(M));
    rep(i,N)rep(j,M)cin>>A[i][j];
    ll an=0;
    rep(bit,(1<<N)){
        vvll B=A;
        rep(n,N){
            if(bit&(1<<n)){
                rep(j,M)B[n][j]=1-B[n][j];
            }
        }
        ll res=0;
        rep(m,M){
            ll p=0;
            rep(i,N){
                p+=B[i][m];
            }
            res+=max(p,N-p);
        }
        chmax(an,res);
    }
    cout<<an<<endl;

}

}

