// #include<bits/stdc++.h>
#include <iostream>
#include <set>
#include <map>
#include <list>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <vector>
#include <string>
#include <bitset>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <utility>
#include <numeric>
#include <complex>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cassert>
#include <iterator>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <string>

using namespace std;

typedef long long ll;
#define rep(i, n) for(int i = 0; i < (n); i++)
#define pb push_back
const int maxn = 10000;
const int INF32 = 1050000000; // 1'050'000'000
const long long INF64 = 4000000000000000000; // 4'000'000'000'000'000'000
const int MOD7 = 1000000007; // 1'000'000'007
const int MOD9 = 1000000009; // 1'000'000'009
const int mod = MOD7;
const double EPS = 1e-9;

void ERROR(int num) { cout << "ERROR" << num << endl; }
ll gcd(ll a, ll b) { return b ? gcd(b, a%b) : a; }
int dx[8]={-1,0,1,0,1,1,-1,-1};
int dy[8]={0,-1,0,1,1,-1,1,-1};
//std::setprecision

bool is_prime(long long N) {
    if (N == 1) return false;
    for (long long i = 2; i * i <= N; ++i) {
        if (N % i == 0) return false;
    }
    return true;
}


vector<vector<bool>> G(8, vector<bool>(8,0));
set<pair<int, int>> inputS, otherS;

bool check(int row, int col){
    bool ok = true;
    for(auto xy : inputS){
        if(abs(row-xy.first) == abs(col-xy.second) ||
            row == xy.first || col == xy.second){
            ok = false;
            return ok;
        }
    }
    for(auto xy : otherS){
        if(abs(row-xy.first) == abs(col-xy.second) ||
            row == xy.first || col == xy.second){
            ok = false;
            return ok;
        }
    }
    return ok;
}


void dfs(int row){
    if(row == 8){
        for(int i = 0; i < 8; i++){
            for(int j = 0; j < 8; j++){
                if(inputS.count({i,j}) || otherS.count({i,j})) cout << "Q";
                else cout << ".";
            }
            cout << endl;
        }
    } else {
        for(int col = 0; col < 8; col++){
            if(inputS.count({row, col}) != 0){
                dfs(row+1);
            } else {
                if(check(row, col)) {
                    otherS.insert({row, col});
                    dfs(row+1);
                    otherS.erase({row, col});
                }
            }
        }
    }
}


int main(){
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    //===============================
    
    int k;
    cin >> k;
    for(int i = 0; i < k; i++){
        int x, y;
        cin >> x >> y;
        G[x][y] = true;
        inputS.insert({x, y});
    }

    dfs(0);

}


