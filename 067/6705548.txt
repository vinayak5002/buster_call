#include<stdio.h>
#include<stdlib.h>

struct node{
  struct node *right;
  struct node *left;
  struct node *parent;
  int key;
};

typedef struct node * Node;
#define NIL NULL

Node root;

Node minimum(Node x)
{
	for(;;)
	{
		x = x->left;
		if(x->left == NIL) break;
	}
	return x;
}

Node nextnode(Node x)
{
	Node y;
	
	if(x->right != NIL)
	{
		return minimum(x->right);
	}
}

Node find(Node u, int k)
{
	while(u != NIL && k != u->key)
	{
		if(k < u->key)
		{
			u = u->left;
		}
		else
		{
			u = u->right;
		}
	}
	return u;
}

Node Delete(Node z)
{
	Node x, y, c;
	
	if(z->left == NIL || z->right == NIL)
	{
		y = z;
	}
	else
	{
		y = nextnode(z);
	}
	
	if(y->left != NIL)
	{
		x = y->left;
	}
	else
	{
		x = y->right;
	}
	
	if(x != NIL)
	{
		x->parent = y->parent;
	}
	
	if(y->parent == NIL)
	{
		root = x;
	}
	else if(y == y->parent->left)
	{
		c = y->parent;
		c->left = x;
	}
	else
	{
		c = y->parent;
		c->right = x;
	}
	
	if( y != z)
	{
		z->key = y->key;
	}
}

void insert(int k)
{
	Node y = NIL;
	Node x = root;
	Node z;

	z = malloc(sizeof(struct node));
	z->key = k;
	z->left = NIL;
	z->right = NIL;
	
	while(x != NIL)
	{
		y = x;
		if(z->key < x->key)
		{
			x = x->left;
		}
		else
		{
			x = x->right;
		}
	}
	z->parent = y;
  	
	if(y == NIL)
	{
		root = z;
	}
	else if(z->key < y->key)
	{
		y->left = z;
	}
	else
	{
		y->right = z;
	}
}

void inorder(Node u)
{
	if(u == NIL) return;
	inorder(u->left);
	printf(" %d", u->key);
	inorder(u->right);

}
	
void preorder(Node u)
{
	if(u == NIL) return;
	printf(" %d", u->key);
	preorder(u->left);
	preorder(u->right);
}

int main(void)
{
	int n, i, x;
	char com[20];
	Node t;
	
	scanf("%d", &n);

	for(i = 0; i < n; i++)
	{
		scanf("%s", com);
 
		if(com[0] == 'i')
		{
			scanf("%d", &x);
			insert(x);
		}
		else if(com[0] == 'f')
		{
			scanf("%d", &x);
			t = find(root, x);
			if ( t != NIL ) printf("yes\n");
			else printf("no\n");
		}
		else if(com[0] == 'p')
		{
			inorder(root);
			printf("\n");
			preorder(root);
			printf("\n");
		} 
		else if(com[0] == 'd')
		{
			scanf("%d", &x);
			Delete(find(root, x));
		}
	}
	
	return 0;
}

