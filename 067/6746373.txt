#ifndef _GLIBCXX_NO_ASSERT
#include <cassert>
#endif
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <ciso646>
#include <climits>
#include <clocale>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#if __cplusplus >= 201103L
#include <ccomplex>
#include <cfenv>
#include <cinttypes>
#include <cstdbool>
#include <cstdint>
#include <ctgmath>
#include <cwchar>
#include <cwctype>
#endif

// C++
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>

#if __cplusplus >= 201103L
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <typeindex>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#endif

/*
 時間制限 : 1 sec, メモリ制限 : 262144 KB
 蜘蛛の巣上の最短経路

 PCK君は夏休みの自由研究のために、飯森山に生息するミニグモを観察しています。
 ミニグモの巣は図(a)に示すように、
 中心から放射状に均等に並んだN本の線分と、
 これらの線分の上に頂点を持つM個の同心の正N角形の枠から構成されています。
 同心多角形と、そのひとつ外側にある同心多角形との間の、
 放射状の線分に沿って測った間隔は1cmです。
 同心多角形の中心から、一番内側の同心多角形の頂点までの距離も1 cmですが、
 この間に線分は存在しません。
 図はN = 8, M = 4の巣を表しています。
 同心多角形には中心に近い順に1からMまでの番号i、
 放射状の各線分には0からN - 1までの番号jが割り振られており、
 同心多角形iと放射状の線分jの交点の座標を(i, j)で表します。

 ミニグモは、巣を構成する線分を伝って交点間を移動することができ、
 獲物が巣にひっかかると、現在地の交点から目的地の交点まで、
 最短の移動距離で移動します。
 たとえば、図(b)は現在地(3, 3)から目的地(4, 0)への移動経路を表しています。

 研究の結果、PCK君はミニグモの特殊な能力を発見しました。
 ミニグモは現在地から目的地まで移動する間に、
 巣を構成する線分に交差せずに交点を結ぶ新たな線分 （上図では点線で示されている）を
 最大K本まで生成することができるのです。
 たとえば、図(c)は交点(1, 3)から交点(1, 0)へ1本の新たな線分を張った、
 現在地(3, 3)から目的地(4, 0)への移動経路を表します。
 また、図(d)は交点(2, 3)から交点(1, 2)へ張った新たな線分と、
 交点(1, 1)から交点(2, 0)へ張った新たな線分を含む、
 現在地(3, 3)から目的地(4, 0)への移動経路を表します。

 巣の大きさを表す情報、ミニグモの現在地と目的地、
 新たな線分を生成できる最大の回数が与えられる。
 ミニグモが現在地から目的地へ移動するための最短の距離(cm)を求めるプログラムを作成せよ。
 
 入力
 入力は以下の形式で与えられる。
 N  M  K
 rs  ps
 rg  pg

 １行目に放射状の線分の数N(4≤N≤20)、多角形の数M (2≤M≤20)、
 新たな線分を生成できる回数K (0≤K≤10)が与えられる。
 ２行目にミニグモの現在地の座標(rs, ps)を表す２つの整数rs, ps
 (1 ≤ rs ≤ M かつ 0 ≤ ps <N)が与えられる。
 ３行目にミニグモの目的地の座標(rg, pg)を表す２つの整数rg, pg
 (1 ≤ rg ≤ M かつ 0 ≤ pg < N)が与えられる。
 現在地の座標と目的地の座標は異なる(rs ≠ rg またはps ≠ pg )。
 
 出力
 最短の距離を１行に実数で出力する。ただし、誤差がプラスマイナス0.00001を超えてはならない。
 
 入出力例
 入力例１

 8 4 0
 3 3
 4 0

 出力例１
 7.29610059

 入力例２
 8 4 1
 3 3
 4 0

 出力例２
 6.84775907

 入力例３
 8 4 2
 3 3
 4 0

 出力例３
 6.71261838

 */
using namespace std;

int N,M,K;      //線分の数N、多角形の数M、線分育成数K

struct pos{
    double x,y;
};

struct rpk{
    int r,p,k;      //角度ナンバーr、半径の大きさp
    rpk operator + (rpk* op){
        return {this->p + op->p, (this->r + op->r) %  N , this->k + op->k};
    }
};

double lengthMath(double x0, double y0, double x1, double y1){
    return sqrt((x1 - x0)*(x1 - x0) + (y1 - y0)*(y1 - y0));
};

rpk spd[4] = {{-1,0,0},{1,0,0},{0,-1,0},{0,1,0}};
rpk spdsp[4] = {{-1,-1,0},{-1,1,0},{1,-1,0},{1,1,0}};

int main(){
    //入力＆座標入力
    cin >> N >> M >> K;
    vector<vector<pos>> pp(N,vector<pos>(M+1));
    for (int r = 0; r < N; r++){
        for (int p = 0; p <= M; p++){
            pp[r][p].x = p * cos(M_PI * 2 / N * r);
            pp[r][p].y = p * sin(M_PI * 2 / N * r);
        }
    }
    int rs,ps,rg,pg;    //8 4 8 4
    cin >> rs >> ps >> rg >> pg;
    
    //dpを３次元配列で定義
    //初期設定
    const double MAXLENGTH = 10000;
    vector<vector<vector<double>>> dp (N, vector<vector<double>>(M+1,vector<double>(K+1,MAXLENGTH)) );
    
    queue<rpk> que;
    que.push({rs,ps,0});
    dp[rs][ps][0] = 0;      //スタートの場所は０
    
    rpk now,next;
    while (!que.empty()){
        //now = que.top();
        now = que.front();
        que.pop();
        
        //通常ルートの動作
        for (int i = 0; i < 4; i++) {
            next.r = ((now.r + spd[i].r) + N )% N;
            next.p = now.p + spd[i].p;
            next.k = now.k;
            
            if (next.p <= 0 || next.p > M) continue;
            double a = lengthMath(pp[now.r][now.p].x, pp[now.r][now.p].y, pp[next.r][next.p].x, pp[next.r][next.p].y);
            
            if (dp[next.r][next.p][next.k] > a + dp[now.r][now.p][now.k]){
                dp[next.r][next.p][next.k] = a + dp[now.r][now.p][now.k];
                que.push(next);
            }
        }
        //特別ルートの動作
        if (now.k < K){
            //普段の斜めに行く時
            for (int j = 0; j < 4; j++){
                next.r = ((now.r + spdsp[j].r) + N )% N;
                next.p = now.p + spdsp[j].p;
                next.k = now.k + 1;
                
                if (next.p <= 0 || next.p > M) continue;
                double a = lengthMath(pp[now.r][now.p].x, pp[now.r][now.p].y, pp[next.r][next.p].x, pp[next.r][next.p].y);
                
                if (dp[next.r][next.p][next.k] > a + dp[now.r][now.p][now.k]){
                    dp[next.r][next.p][next.k] = a + dp[now.r][now.p][now.k];
                    que.push(next);
                }
            
            }
            //１段目の時は、他の１段目に行ける！！
            if (now.p == 1){
                for (int j = 0; j < M; j++){
                    next.p = now.p;
                    next.r = j;
                    next.k = now.k + 1;
                    double a = lengthMath(pp[now.r][now.p].x, pp[now.r][now.p].y, pp[next.r][next.p].x, pp[next.r][next.p].y);
                    if (dp[next.r][next.p][next.k] > a + dp[now.r][now.p][now.k]){
                        dp[next.r][next.p][next.k] = a + dp[now.r][now.p][now.k];
                        que.push(next);
                    }
                }
            }
        }
    }
    
    double ans = MAXLENGTH;
    for (int i = 0; i <= K; i++){
        ans = min(ans,dp[pg][rg][i]);
    }
    cout << ans << endl;
}

