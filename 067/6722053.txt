#define PROBLEM "https://onlinejudge.u-aizu.ac.jp/courses/library/5/GRL/3/GRL_3_A"
#include <bits/stdc++.h>
using namespace std;
using ll = int64_t;
using ull = uint64_t;
using ld = long double;
constexpr ll MOD = 1e9 + 7;
constexpr ll INF = 1e+18;
constexpr ld EPS = 1e-12L;
constexpr ld PI = 3.14159265358979323846L;

// 辺
template<class T>
class Edge {
  static int nextId;

public:
  const int from, to, id;
  const T cost;
  Edge(int from_, int to_, T cost_): from(from_), to(to_), id(nextId++), cost(cost_) {}
  Edge(int from_, int to_): from(from_), to(to_), id(nextId++), cost(1) {}
};

template<class T>
int Edge<T>::nextId = 0;

template<class T>
ostream &operator<<(ostream &os, const Edge<T> &edge) {
  os << edge.id << ": " << edge.from << " -> " << edge.to << " (" << edge.cost << ")";
  return os;
}

// グラフ(隣接リスト)
template<class Cost = ll, class E = Edge<Cost>>
class GraphL {
  int n, m;
  vector<vector<E>> adj;
  unordered_map<int, vector<Cost>> shortest_path_dist;
  unordered_map<int, vector<int>> shortest_path_parent;

public:
  static const Cost UNREACHABLE = numeric_limits<Cost>::max();
  static const Cost NEGATIVE_CYCLE = numeric_limits<Cost>::min();
  GraphL() {}
  GraphL(int n_): n(n_), m(0), adj(n_) {}

  void addNode() {
    adj.emplace_back();
    n++;
    resetShortest();
  }
  template<class... Args>
  void addEdge(int from, int to, Args... args) {
    adj[from].emplace_back(from, to, args...);
    m++;
    resetShortest();
  }
  // 双方向
  template<class... Args>
  void addBidirectionalEdge(int from, int to, Args... args) {
    adj[from].emplace_back(from, to, args...);
    adj[to].emplace_back(to, from, args...);
    m += 2;
    resetShortest();
  }
  void resetShortest() {
    shortest_path_dist.clear();
    shortest_path_parent.clear();
  }
  vector<E> &operator[](int i) { return adj[i]; }

  // 最短距離
  void dijkstra(int start_node);
  void bellmanFord(int start_node);
  Cost getDist(int from, int to) { return shortest_path_dist[from][to]; }
  vector<int> getShortestPath(int from, int to) {
    vector<int> path;
    for(int cur = to; cur != -1; cur = shortest_path_parent[from][cur]) {
      path.emplace_back(cur);
    }
    reverse(path.begin(), path.end());
    return path;
  }

  // 最小全域森
  Cost prim();

  // 関節点・橋
  pair<vector<int>, vector<pair<int, int>>> lowlink();

  template<class C_, class E_>
  friend std::ostream &operator<<(std::ostream &, const GraphL<C_, E_> &);
};

template<class C_, class E_>
ostream &operator<<(ostream &os, const GraphL<C_, E_> &graph) {
  os << "N = " << graph.n << ", M = " << graph.m << '\n';
  for(const auto &ev: graph.adj) {
    for(const auto &e: ev) {
      os << e << '\n';
    }
  }
  return os;
}

/**
 * Lowlink 関節点・橋の列挙
 * 関節点 削除すると連結成分数が増加する頂点
 * 橋 削除すると連結成分数が増加する辺
 * 返り値；関節点, 橋(from, to)
 * O(V + E log E) (Lowlink + sort)
 * https://algo-logic.info/articulation-points/
 */
template<class Cost, class E>
pair<vector<int>, vector<pair<int, int>>> GraphL<Cost, E>::lowlink() {
  using P = pair<int, int>;
  vector<bool> visited(n, false);
  // ord: 頂点を探索した順番 low: DFS木にない辺を高々1回通って踏める最小のord
  vector<int> ord(n, 0), low(n, 0), articulation_points;
  vector<P> bridges;
  int visit_count = 0;

  auto dfs = [&](auto self, int v, int parent) -> void {
    visited[v] = true;
    low[v] = ord[v] = visit_count++;
    bool is_articular = false;
    int child_count = 0;
    for(auto &e: adj[v]) {
      if(!visited[e.to]) {
        child_count++;
        self(self, e.to, v);
        low[v] = min(low[v], low[e.to]);
        if(parent != -1 && ord[v] <= low[e.to]) {
          is_articular = true;
        }
        if(ord[v] < low[e.to]) {
          bridges.emplace_back(min(v, e.to), max(v, e.to));
        }
      } else if(e.to != parent) {
        low[v] = min(low[v], ord[e.to]);
      }
    }
    if(parent == -1 && child_count >= 2) {
      is_articular = true;
    }
    if(is_articular) {
      articulation_points.emplace_back(v);
    }
  };
  for(int i = 0; i < n; ++i) {
    if(!visited[i]) {
      dfs(dfs, i, -1);
    }
  }
  sort(articulation_points.begin(), articulation_points.end());
  sort(bridges.begin(), bridges.end());
  return {articulation_points, bridges};
}

int main() {
  cin.tie(0);
  ios::sync_with_stdio(false);
  int V, E;
  cin >> V >> E;
  GraphL graph(V);
  for(int i = 0; i < E; ++i) {
    int s, t;
    cin >> s >> t;
    graph.addBidirectionalEdge(s, t);
  }
  auto [aps, bridges] = graph.lowlink();
  for(auto&& ap: aps){
    cout << ap << '\n';
  }
}

