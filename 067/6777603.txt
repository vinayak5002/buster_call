#include <bits/stdc++.h>
using namespace std;
#if __has_include(<atcoder/all>)
    #include <atcoder/all>
using namespace atcoder;
#endif
typedef long long ll;
typedef pair<ll, ll> P;
typedef tuple<ll, ll, ll> T;
#define rep(i, n) for(ll i = 0; i < n; i++)

int main(){
    cin.tie(0);
    ios_base::sync_with_stdio(false);
    while(true){
        int n; cin >> n;
        if(n == 0)break;
        vector<int> a(n);
        rep(i,n)cin >> a[i];
        vector<vector<ll>> dp(n,vector<ll>(n,0));

        vector<vector<bool>> ok(n,vector<bool>(n,false));
        rep(i,n-1){
            if(abs(a[i]-a[i+1]) <= 1){
                ok[i][i+1] = true;
                dp[i][i+1] = 2;
            }
        }
        for(int b=3;b<n;b++){
            for(int l=0;l<n;l++){
                if(b+l >= n)continue;
                //取り除ける区間を全て探す
                if(ok[l+1][l+b-1] && abs(a[l]-a[l+b]) <= 1){
                    ok[l][l+b] = true;
                    dp[l][l+b] = b+1;
                }
                else{
                    for(int k=l;k<l+b;k++){
                        if(ok[l][k] && ok[k+1][l+b]){
                            ok[l][l+b] = true;
                            dp[l][l+b] = b+1;
                        }
                    }
                }
            }
        }
        // for(auto [b,f]:ok)if(f)cout << b.first << " " << b.second << endl;
        for(int b=1;b<n;b++){
            for(int l=0;l<n;l++){
                if(b+l >= n)continue;
                
                for(int k=l;k<l+b;k++){
                    dp[l][l+b] = max(dp[l][l+b],dp[l][k]+dp[k][l+b]);
                }
            }
        }

        // rep(i,n){
        //     rep(j,n){
        //         cout << dp[i][j] << " ";
        //     }
        //     cout << endl;
        // }
        cout << dp[0][n-1] << endl;
        // ll ans = 0;
        // rep(i,n)rep(j,n)ans = max(ans,dp[i][j]);
        // cout << ans << endl;
    }
    
    return 0;
}
// int main(){
//     cin.tie(0);
//     ios_base::sync_with_stdio(false);
//     while(true){
//         int n; cin >> n;
//         if(n == 0)break;
//         vector<int> a(n);
//         rep(i,n)cin >> a[i];
//         vector<vector<ll>> dp(n,vector<ll>(n,0));

//         //ok[l][r] : [l,r)で取り出せるならtrue
//         vector<vector<bool>> ok(n+1,vector<bool>(n+1,false));
//         rep(i,n-1){
//             if(abs(a[i]-a[i+1]) <= 1){
//                 ok[i][i+2] = true;
//                 dp[i][i+2] = 2;
//             }
//         }
//         for(int b=3;b<n;b++){
//             for(int l=0;l<n;l++){
//                 if(b+l >= n)continue;
//                 //取り除ける区間を全て探す
//                 if(ok[l+1][l+b] && abs(a[l]-a[l+b]) <= 1){
//                     ok[l][l+b+1] = true;
//                     dp[l][l+b+1] = b+1;
//                 }
//                 for(int k=l;k<=l+b;k++){
//                     if(ok[l][k] && ok[k+1][l+b+1]){
//                         ok[l][l+b+1] = true;
//                         dp[l][l+b+1] = b+1;
//                     }
//                 }
    
//             }
//         }
//         // for(auto [b,f]:ok)if(f)cout << b.first << " " << b.second << endl;
//         for(int b=3;b<n;b++){
//             for(int l=0;l<n;l++){
//                 if(b+l >= n)continue;
                
//                 for(int k=l;k<=l+b;k++){
//                     dp[l][l+b+1] = max(dp[l][l+b+1],dp[l][k]+dp[k][l+b+1]);
//                 }
//             }
//         }

//         rep(i,n){
//             rep(j,n){
//                 cout << dp[i][j] << " ";
//             }
//             cout << endl;
//         }
//         cout << dp[0][n-1] << endl;
//         // ll ans = 0;
//         // rep(i,n)rep(j,n)ans = max(ans,dp[i][j]);
//         // cout << ans << endl;
//     }
    
//     return 0;
// }
