//  7_B:二分木



#include <stdio.h>

typedef struct{
    int left,right,parent;
}tnode;

tnode T[26];

int depth(int i){
    int d=0;
    while (T[i].parent!=-1) {
        i=T[i].parent;
        d++;
    }
    return d;
}

int height(int i){
    int h1=0,h2=0;
    if(T[i].left!=-1)
        h1=height(T[i].left)+1;
    if(T[i].right!=-1)
        h2=height(T[i].right)+1;
    
    if(h1>h2)
        return h1;
    else
        return h2;
}

int main() {
    int n,i;
    scanf("%d",&n);
    for (i=0; i<n; i++) {
        T[i].parent = -1;
    }
    for (i=0; i<n; i++) {
        int id,l,r;
        scanf("%d %d %d",&id,&l,&r);
        T[id].left=l; T[id].right=r;
        if(l!=-1)T[l].parent=id;
        if(r!=-1)T[r].parent=id;
    }
    
    for (i=0; i<n; i++) {
        printf("node %d: parent = %d, sibling = ",i,T[i].parent);
        if(T[i].parent==-1)
            printf("-1");
        else if(T[T[i].parent].left==i)
            printf("%d",T[T[i].parent].right);
        else
            printf("%d",T[T[i].parent].left);
        
        printf(", degree = ");
        if(T[i].left==-1 && T[i].right==-1)
            printf("0");
        else if (T[i].left!=-1 && T[i].right!=-1)
            printf("2");
        else
            printf("1");
            
        printf(", depth = %d, height = %d, ",depth(i),height(i));
        
        if(T[i].parent==-1)
            printf("root\n");
        else if (T[i].left==-1 && T[i].right==-1)
            printf("leaf\n");
        else
            printf("internal node\n");
    }
    
    return 0;
}


