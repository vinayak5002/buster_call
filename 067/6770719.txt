#include <algorithm>
#include <bitset>
#include <cassert>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>

const long long INF = 1e9;
const long long MOD = 1e9 + 7;
// const long long MOD = 998244353;
const long long LINF = 1e18;
using namespace std;

#define YES(n) cout << ((n) ? "YES" : "NO") << endl
#define Yes(n) cout << ((n) ? "Yes" : "No") << endl
#define POSSIBLE(n) cout << ((n) ? "POSSIBLE" : "IMPOSSIBLE") << endl
#define Possible(n) cout << ((n) ? "Possible" : "Impossible") << endl
#define dump(x) cout << #x << " = " << (x) << endl
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define REP(i, n) for (int i = 0; i < (n); ++i)
#define REPR(i, n) for (int i = n; i >= 0; i--)
#define COUT(x) cout << (x) << endl
#define SCOUT(x) cout << (x) << " "
#define VECCOUT(x)                              \
  for (auto &youso_ : (x))                      \
    cout << right << setw(10) << youso_ << " "; \
  cout << endl
#define ENDL cout << endl
#define CIN(...)   \
  int __VA_ARGS__; \
  CINT(__VA_ARGS__)
#define LCIN(...)        \
  long long __VA_ARGS__; \
  CINT(__VA_ARGS__)
#define SCIN(...)     \
  string __VA_ARGS__; \
  CINT(__VA_ARGS__)
#define VECCIN(x)          \
  for (auto &youso_ : (x)) \
  cin >> youso_
#define mp make_pair
#define PQ priority_queue<long long>
#define PQG priority_queue<long long, V, greater<long long>>

typedef long long ll;
typedef vector<long long> vl;
typedef vector<long long> vi;
typedef vector<bool> vb;
typedef vector<char> vc;
typedef vector<vl> vvl;
typedef vector<vi> vvi;
typedef vector<vb> vvb;
typedef vector<vc> vvc;
typedef pair<long long, long long> pll;

#define COUT(x) cout << (x) << endl
void CINT()
{
}
template <class Head, class... Tail>
void CINT(Head &&head, Tail &&...tail)
{
  cin >> head;
  CINT(move(tail)...);
}
template <class T>
void mod(T &x)
{
  x %= MOD;
  x += MOD;
  x %= MOD;
}

ll GCD(ll a, ll b)
{
  if (b == 0)
    return a;
  else
    return GCD(b, a % b);
}

struct COMB
{
  vl fact, fact_inv, inv;
  void init_nCk(long long SIZE)
  {
    fact.resize(SIZE + 5);
    fact_inv.resize(SIZE + 5);
    inv.resize(SIZE + 5);
    fact.at(0) = fact.at(1) = fact_inv.at(0) = fact_inv.at(1) = inv.at(1) = 1;
    for (long long i = 2; i < SIZE + 5; i++)
    {
      fact.at(i) = fact.at(i - 1) * i % MOD;
      inv.at(i) = MOD - inv.at(MOD % i) * (MOD / i) % MOD;
      fact_inv.at(i) = fact_inv.at(i - 1) * inv.at(i) % MOD;
    }
  }
  long long nCk(long long n, long long k)
  {
    assert(!(n < k));
    assert(!(n < 0 || k < 0));
    return fact.at(n) * (fact_inv.at(k) * fact_inv.at(n - k) % MOD) % MOD;
  }
};
ll extGCD(ll a, ll b, ll &x, ll &y)
{
  if (b == 0)
  {
    x = 1;
    y = 0;
    return a;
  }
  ll d = extGCD(b, a % b, y, x);
  y -= a / b * x;
  return d;
}

void deco(string S, vl &l)
{
  for (int i = 0; i < S.size(); i++)
  {
    int s = i * 4;
    int n;
    if ('0' <= S.at(i) && S.at(i) <= '9')
      n = S.at(i) - '0';
    else
      n = S.at(i) - 'a' + 10;
    for (int j = 0; j < 4; j++)
    {
      l.at(s + j) = (n & 1);
      n /= 2;
    }
  }
}

void Main()
{
  vector<string> S(8);
  VECCIN(S);
  SCIN(CS);
  for (int i = 0; i < 8; i++)
  {
    reverse(S.at(i).begin(), S.at(i).end());
  }
  reverse(CS.begin(), CS.end());
  vvl m(8, vl(32, 0));
  for (int i = 0; i < 8; i++)
  {
    deco(S.at(i), m.at(i));
  }
  vl cs(32, 0);
  deco(CS, cs);
  // for (int i = 0; i < 8; i++)
  // {
  //   for (int j = 0; j < 32; j++)
  //     cout << m.at(i).at(j);
  //   cout << endl;
  // }
  vl sum(32, 0);
  for (int i = 0; i < 8; i++)
    for (int j = 0; j < 32; j++)
      sum.at(j) += m.at(i).at(j);
  vl res(32, 0);
  vl kuri(32, 0);
  // for (int j = 0; j < 32; j++)
  //   cout << sum.at(j);
  // cout << endl;
  // for (int j = 0; j < 32; j++)
  //   cout << cs.at(j);
  // cout << endl;
  for (int i = 0; i < 32; i++)
  {
    // for (int j = 0; j < 32; j++)
    //   cout << sum.at(j);
    // cout << ' ' << i << endl;

    if (((sum.at(i) + kuri.at(i)) % 2) != (cs.at(i) % 2))
    {
      res.at(i) = 1;
      sum.at(i) = 8 - sum.at(i);
    }
    ll count = 1;
    sum.at(i) += kuri.at(i);
    sum.at(i) /= 2;
    while (sum.at(i) != 0 && i + count < 32)
    {
      kuri.at(i + count) += sum.at(i) % 2;
      // dump(i);
      count++;
      sum.at(i) /= 2;
    }
  }
  // for (int j = 0; j < 32; j++)
  //   cout << res.at(j);
  // cout << endl;
  // dump("_____");
  if (true)
  {
    ll ans = 0;
    for (int i = 0; i < 32; i++)
    {
      int now = 31 - i;
      ans *= 2;
      if (res.at(now))
        ans++;
    }
    cout << hex << ans << endl;
  }
}

int main()
{
  cout << fixed << setprecision(15);
  LCIN(N);
  REP(I, N)
  Main();
  return 0;
}
