#include<iostream>

using namespace std;

int g[100][100];   //g[u][v] = 0 : 頂点uから頂点vに隣接していない状態 , g[u][v] = 1 : 頂点uから頂点vに隣接している状態
int v_used[100] = {0};  //v_used[i] = 0 : 頂点iが未探索 , v_used[i] = 1 : 頂点iが探索済み
int e_used[100][100];   //e_used[u][v] = 0 : 辺uvが未探索 , e_used[u][v] = 1 : 辺uvが探索済み
int d[100] = {0};
int f[100] = {0};
vector<int> stack; //stack : 空のスタック

template<typename A, size_t N, typename T>
void Fill(A (&array)[N], const T &val){    //多次元配列の要素を全て0で初期化するための関数
    fill( (T*)array, (T*)(array + N), val );
}

int main(){
    int n;                      //n : Gの頂点数
    cin >> n;
    Fill(g, 0);                 //gを全て0で初期化
    for(int i=1;i<=n;i++){
        int u, k;               //u : 頂点の番号 , k : uの出次数
        cin >> u >> k;
        for(int j=1;j<=k;j++){
            int v;              //v : 頂点uと隣接する頂点の番号
            cin >> v;
            g[u][v] = 1;        //頂点uと頂点vが隣接している状態
        }
    }

    Fill(e_used, 0);            //e_usedを全て0で初期化
    int time = 1;
    d[1] = time;
    time++;
    v_used[1] = 1;                   //開始頂点を探索済みにする
    stack.push_back(1);         //空のスタックに開始頂点vを挿入
    int j = 0;
    int u = stack[j];  //u : スタックの最後尾の頂点
    while(stack.size() != 0){      //スタックが非ゼロ
        int cnt = 0, cnt2 = 0, cnt3 = 0;    //cnt : 頂点uと頂点iが隣接していない数をカウント cnt2 : 頂点uが隣接している頂点の数をカウント cnt3 : 頂点uから探索した数をカウント
        for(int i=1;i<=n;i++){
            if(g[u][i] == 1){   //辺uiが隣接している時
                cnt2++;
                if(e_used[u][i] == 0){   //辺uiが未探索のとき
                    e_used[u][i] = 1;   //辺uiを探索済みにする
                    if(v_used[i] == 0){  //頂点iが未探索の時
                        v_used[i] = 1;  //頂点iが探索済みにする
                        stack.push_back(i);   //スタックにiを挿入
                        u = i;          //uをスタックの最後尾の頂点に更新する
                        d[u] = time;
                        time++;
                        break;
                    }
                    break;
                }else{                  //辺uiが探索済みのとき
                    cnt3++;
                    if(i == n){
                        if(cnt2 == cnt3){    //頂点uが隣接している頂点の数と頂点uから探索した頂点の数が等しいとき、すなわち頂点uから未探索の頂点が存在しない時
                            stack.erase(stack.begin() + stack.size()-1);
                            f[u] = time;
                            time++;
                            u = stack[stack.size()-1];
                            break;
                        }
                    }
                }
            }else{           //辺uiが隣接していないとき
                cnt++;
                if(cnt == n){     //頂点uが隣接していない数cntが頂点の総数nと等しいとき、すなわちどの頂点にも隣接していないとき
                    stack.erase(stack.begin() + stack.size()-1);
                    f[u] = time;
                    time++;
                    u = stack[stack.size()-1];
                    break;
                }
            }
            if(cnt + cnt3 == n){
                stack.erase(stack.begin() + stack.size()-1);
                f[u] = time;
                time++;
                u = stack[stack.size()-1];
                break;
            }
        }
    }
    for(int i=1;i<=n;i++){
		cout << i << " " << d[i] << " " << f[i] << endl;
	}
    return 0;
}
