use std::io;

fn main() {

    let mut data_set: Vec<_> = vec![];
    let mut result_count: Vec<i32> = vec![];
    loop {
        let mut s = String::new();
        io::stdin().read_line(&mut s).expect("Error");
        let line_str: Vec<&str> = s.split_whitespace().collect();
        let n = line_str[0].parse().unwrap_or(0);
        let x = line_str[1].parse().unwrap_or(0);
        if n == 0 && x == 0 {
            break;
        } else {
            let data = vec![n, x];
            data_set.push(data);
        }
    }

    for data in data_set {
        let n = data[0];
        let x = data[1];
        let mut match_num = 0;
        let mut comb = vec![];
        let mut max_num = 1;
        for i in 1..(n) as usize+1 {
            comb.push(i);
            max_num *= 2;
        }
        // println!("{}", max_num);
        // println!("{:?}", comb);
        
        let mut bit_vec: Vec<String> = vec![];
        for j in 1..(max_num as usize) {
            let bit_str = format!("{:>0b}", j).to_string();
            let mut count = 0;
            for k in (&bit_str).chars() {
                if k == '1' {
                    count += 1;
                }
            }
            if count == 3 {
                bit_vec.push(bit_str.clone());
            }
        }

        for bit_column in bit_vec {
            let mut comb_sum = 0;
            for (index, bit) in bit_column.chars().rev().enumerate() {
                if bit == '1' {
                    comb_sum = comb_sum + comb[index];
                }
            }
            if comb_sum == x {
                match_num += 1;
            }
            // println!("{} {} ", comb_sum, bit_column);
        }
        result_count.push(match_num);
        
    }
    for i in result_count {
        println!("{}", i);
    }
}

