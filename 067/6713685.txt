#include <iostream>
#include <vector>
#include <cstdio>
using namespace std;

struct Card {
	char c;
	int val;
};

void BubbleSort(vector<Card>& A)
{
	for (int i = 0; i < A.size(); i++)
	{
		for (int j = A.size() - 1; j > i; j--)
		{
			if (A[j].val < A[j - 1].val)
			{
				swap(A[j], A[j -1]);
			}
		}
	}
}


void SelectionSort(vector<Card>& A)
{
	for (int i = 0; i < A.size(); i++)
	{
		int mini = i;
		for (int j = i; j < A.size(); j++)
		{
			if (A[j].val < A[mini].val)
				mini = j;
		}
		if (mini != i) {
			swap(A[i], A[mini]);
		}
		
	}
}

bool IsStable(vector<Card> A, vector<Card>B)
{
	for (int i = 0; i < A.size(); i++)
	{
		if (A[i].c != B[i].c)return false;
	}
	return true;
}


int main()
{
	int n;
	cin >> n;
	vector<Card> Cards1(n);
	vector<Card> Cards2(n);
	for (int i = 0; i < n; i++)
	{
		cin >> Cards1[i].c >> Cards1[i].val;
	}
	Cards2 = Cards1;
	BubbleSort(Cards1);
	SelectionSort(Cards2);

	for (int i = 0; i < Cards1.size(); i++)
	{
		if (i) cout << " ";
		cout << Cards1[i].c << Cards1[i].val;
	}
	cout << endl << "Stable" << endl;

	for (int i = 0; i < Cards2.size(); i++)
	{
		if (i) cout << " ";
		cout << Cards2[i].c << Cards2[i].val;
	}
	cout << endl;
	if (IsStable(Cards1, Cards2))
	{
		cout << "Stable";
	}
	else
	{
		cout << "Not stable";
	}
	cout << endl;



	return 0;
}
