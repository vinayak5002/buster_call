#include <algorithm>
#include <cassert>
#include <cstddef>
#include <cstdint>
#include <iomanip>
#include <iostream>
#include <utility>
#include <vector>

namespace luz {

  using isize = std::ptrdiff_t;
  using usize = std::size_t;

  using i32 = std::int32_t;
  using i64 = std::int64_t;
  using u32 = std::uint32_t;
  using u64 = std::uint64_t;
  
} // namespace luz

namespace luz {

  struct rep {
    struct itr {
      usize i;
      constexpr itr(const usize i) noexcept : i(i) {}
      void operator++() noexcept { ++i; }
      constexpr usize operator*() const noexcept { return i; }
      constexpr bool operator!=(const itr x) const noexcept { return i != x.i; }
    };
    const itr f, l;
    constexpr rep(const usize f, const usize l) noexcept
      : f(std::min(f, l)), l(l) {}
    constexpr auto begin() const noexcept { return f; }
    constexpr auto end() const noexcept { return l; }
  };

  struct rrep {
    struct itr {
      usize i;
      constexpr itr(const usize i) noexcept : i(i) {}
      void operator++() noexcept { --i; }
      constexpr usize operator*() const noexcept { return i; }
      constexpr bool operator!=(const itr x) const noexcept { return i != x.i; }
    };
    const itr f, l;
    constexpr rrep(const usize f, const usize l) noexcept
      : f(l - 1), l(std::min(f, l) - 1) {}
    constexpr auto begin() const noexcept { return f; }
    constexpr auto end() const noexcept { return l; }
  };

} // namespace luz

namespace luz {

  void set_fast_ios() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
  }

} // namespace luz

namespace luz {

  void io_set(usize precision) {
    std::cout << std::fixed << std::setprecision(precision);
    std::cerr << std::fixed << std::setprecision(precision);
  }

} // namespace luz

namespace luz {

  template< typename T = i64 > T input() {
    T tmp;
    std::cin >> tmp;
    return tmp;
  }

} // namespace luz

namespace luz {

  template< typename T >
  std::ostream &operator<<(std::ostream &os, std::vector< T > &vs) {
    for (usize i: rep(0, vs.size())) {
      os << vs[i] << (i + 1 != vs.size() ? " " : "");
    }
    return os;
  }

  template< typename T >
  std::istream &operator>>(std::istream &is, std::vector< T > &vs) {
    for (T &v: vs) {
      is >> v;
    }
    return is;
  }

} // namespace luz

namespace luz {

  template< typename T1, typename T2 >
  std::ostream &operator<<(std::ostream &os, std::pair < T1, T2 > &p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
  }

  template< typename T1, typename T2 >
  std::istream &operator>>(std::istream &is, std::pair< T1, T2 > &p) {
    is >> p.first >> p.second;
    return is;
  }

} // namespace luz

namespace luz {

  template <typename T>
  std::vector<T> make_vector(usize a, T b) {
    return std::vector<T>(a, b);
  }

  template <typename... Ts>
  auto make_vector(usize a, Ts... ts) {
    return std::vector<decltype(make_vector(ts...))>(a, make_vector(ts...));
  }

} // namespace luz

namespace luz {

  template <typename T1, typename T2>
  inline bool chmax(T1 &a, T2 b) {
    return a < b and (a = b, true);
  }

  template <typename T1, typename T2>
  inline bool chmin(T1 &a, T2 b) {
    return a > b and (a = b, true);
  }

} // namespace luz

using namespace std;
#include <numeric>
/**
 * @brief Suffix Array(接尾辞配列)
 */
template< typename T >
struct SuffixArray : vector< int > {
private:
  vector< int > sa_is(const vector< int > &s) const {
    const int n = (int) s.size();
    vector< int > ret(n);

    vector< int > is_s(n), is_lms(n);
    int m = 0;
    for(int i = n - 2; i >= 0; i--) {
      is_s[i] = (s[i] > s[i + 1]) or (s[i] == s[i + 1] and is_s[i + 1]);
      m += (is_lms[i + 1] = is_s[i] and not is_s[i + 1]);
    }

    auto induced_sort = [&](const vector< int > &lms) {
      int upper = *max_element(s.begin(), s.end());
      vector< int > l(upper + 2), r(upper + 2);
      for(auto &&v: s) {
        ++l[v + 1];
        ++r[v];
      }
      partial_sum(l.begin(), l.end(), l.begin());
      partial_sum(r.begin(), r.end(), r.begin());
      fill(ret.begin(), ret.end(), -1);
      for(int i = (int) lms.size() - 1; i >= 0; i--) {
        ret[--r[s[lms[i]]]] = lms[i];
      }
      for(auto &&v: ret) {
        if(v >= 1 and is_s[v - 1]) ret[l[s[v - 1]]++] = v - 1;
      }
      fill(r.begin(), r.end(), 0);
      for(auto &&v: s) ++r[v];
      partial_sum(r.begin(), r.end(), r.begin());
      for(int k = (int) ret.size() - 1, i = ret[k]; k >= 1; i = ret[--k]) {
        if(i >= 1 and not is_s[i - 1]) {
          ret[--r[s[i - 1]]] = i - 1;
        }
      }
    };

    vector< int > lms;
    lms.reserve(m);
    for(int i = 1; i < n; i++) {
      if(is_lms[i]) lms.push_back(i);
    }

    induced_sort(lms);

    vector< int > new_lms;
    new_lms.reserve(m);
    for(int i = 0; i < n; i++) {
      if(not is_s[ret[i]] and ret[i] > 0 and is_s[ret[i] - 1]) {
        new_lms.push_back(ret[i]);
      }
    }

    auto is_same = [&](int a, int b) {
      if(s[a++] != s[b++]) return false;
      for(;; ++a, ++b) {
        if(s[a] != s[b]) return false;
        if(is_lms[a] or is_lms[b]) return is_lms[a] and is_lms[b];
      }
    };

    int rank = 0;
    ret[n - 1] = 0;
    for(int i = 1; i < m; i++) {
      if(not is_same(new_lms[i - 1], new_lms[i])) ++rank;
      ret[new_lms[i]] = rank;
    }

    if(rank + 1 < m) {
      vector< int > new_s(m);
      for(int i = 0; i < m; i++) {
        new_s[i] = ret[lms[i]];
      }
      auto lms_sa = sa_is(new_s);
      for(int i = 0; i < m; i++) {
        new_lms[i] = lms[lms_sa[i]];
      }
    }

    induced_sort(new_lms);

    return ret;
  }

public:
  T vs;

  explicit SuffixArray(const T &vs, bool compress = false) : vs(vs) {
    vector< int > new_vs(vs.size() + 1);
    if(compress) {
      T xs = vs;
      sort(xs.begin(), xs.end());
      xs.erase(unique(xs.begin(), xs.end()), xs.end());
      for(int i = 0; i < (int) vs.size(); i++) {
        new_vs[i] = std::lower_bound(xs.begin(), xs.end(), vs[i]) - xs.begin() + 1;
      }
    } else {
      auto d = *min_element(vs.begin(), vs.end());
      for(int i = 0; i < (int) vs.size(); i++) {
        new_vs[i] = vs[i] - d + 1;
      }
    }
    auto ret = sa_is(new_vs);
    assign(ret.begin(), ret.end());
  }

  void output() const {
    for(int i = 0; i < size(); i++) {
      cout << i << ":[" << (*this)[i] << "]";
      for(int j = (*this)[i]; j < (int) vs.size(); j++) cout << " " << vs[j];
      cout << "\n";
    }
  }

  bool lt_substr(const string &t, int si = 0, int ti = 0) {
    int sn = (int) vs.size(), tn = (int) t.size();
    while(si < sn && ti < tn) {
      if(vs[si] < t[ti]) return true;
      if(vs[si] > t[ti]) return false;
      ++si, ++ti;
    }
    return si >= sn && ti < tn;
  }

  // t <= s[i,N) なる最小の i を返す O(|t| log |s|)
  int lower_bound(const T &t) {
    int ng = 0, ok = (int) size();
    while(ok - ng > 1) {
      int mid = (ok + ng) / 2;
      if(lt_substr(t, at(mid))) ng = mid;
      else ok = mid;
    }
    return ok;
  }

  // O(|t| log |s|)
  pair< int, int > equal_range(T &t) {
    int low = lower_bound(t);
    int ng = low - 1, ok = (int) size();
    t.back()++;
    while(ok - ng > 1) {
      int mid = (ok + ng) / 2;
      if(lt_substr(t, at(mid))) ng = mid;
      else ok = mid;
    }
    t.back()--;
    return {low, ok};
  }
};

template<>
void SuffixArray< string >::output() const {
  for(int i = 0; i < (int) size(); i++) {
    cout << i << ":[" << (*this)[i] << "] " << vs.substr((*this)[i]) << "\n";
  }
}

template< typename Semigroup, typename F >
struct DisjointSparseTable {
  const F f;
  vector< vector< Semigroup > > st;
  vector< int > lookup;

  DisjointSparseTable(const vector< Semigroup > &v, const F &f) : f(f) {
    int b = 0;
    while((1 << b) <= v.size()) ++b;
    st.resize(b, vector< Semigroup >(v.size(), Semigroup()));
    for(int i = 0; i < v.size(); i++) st[0][i] = v[i];
    for(int i = 1; i < b; i++) {
      int shift = 1 << i;
      for(int j = 0; j < v.size(); j += shift << 1) {
        int t = min(j + shift, (int) v.size());
        st[i][t - 1] = v[t - 1];
        for(int k = t - 2; k >= j; k--) st[i][k] = f(v[k], st[i][k + 1]);
        if(v.size() <= t) break;
        st[i][t] = v[t];
        int r = min(t + shift, (int) v.size());
        for(int k = t + 1; k < r; k++) st[i][k] = f(st[i][k - 1], v[k]);
      }
    }
    lookup.resize(1 << b);
    for(int i = 2; i < lookup.size(); i++) {
      lookup[i] = lookup[i >> 1] + 1;
    }
  }

  Semigroup fold(int l, int r) {
    if(l >= --r) return st[0][l];
    int p = lookup[l ^ r];
    return f(st[p][l], st[p][r]);
  }
};

template< typename SemiGroup, typename F >
DisjointSparseTable< SemiGroup, F > get_disjoint_sparse_table(const vector< SemiGroup >& v, const F& f) {
  return {v, f};
}

namespace luz {

  void main_() {
    std::string s = input<std::string>();

    SuffixArray sa(s);

    auto mnst = get_disjoint_sparse_table(sa, [](int a, int b) { return min(a, b); });
    auto mxst = get_disjoint_sparse_table(sa, [](int a, int b) { return max(a, b); });

    int m = input();
    for (usize _: rep(0, m)) {
      std::string x = input<std::string>();
      std::string y = input<std::string>();

      auto [xl, xr] = sa.equal_range(x);
      auto [yl, yr] = sa.equal_range(y);
      if (std::max(xl, yl) > s.size()) {
        std::cout << 0 << std::endl;
      } else {
        int l = mnst.fold(xl, xr);
        int r = mxst.fold(yl, yr);

        int ans = r - l + y.size();
        if (r + y.size() < l + x.size()) {
          ans = 0;
        }

        if (s.size() < l + x.size()) ans = 0;
        if (s.size() < r + y.size()) ans = 0;

        std::cout << ans << std::endl;
      }
    }

  }

} // namespace luz

int main() {
  luz::set_fast_ios();
  luz::io_set(15);

  luz::main_();
}

