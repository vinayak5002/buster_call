//
#include <stdio.h> #define MAXW 50 #define MAXH 50 int w;
ACM-ICPC2009 国内予選 Problem B */
filename = b.c
コンパイル: cc -o b -O2 b.c
実行方法: ./b < B0.data > B0.result 等
確認方法: diff B0.ans B0.result 等 アルゴリズム:マップをスキャンし、島番号が付けられていない陸地があれば、
その場所から深さ優先探索(DFS)で隣接する陸地に新しい島番号をつける。 最後に付けた島番号から島の個数が分かる。
int h;
int map[MAXH+2][MAXW+2];
// 地図の幅の最大値
// 地図の高さの最大値
// 地図の幅 1 <= w <= 50 // 地図の高さ 1 <= h <= 50
// 地図データ
// 周囲を海で囲むため、幅、高さともに 2 増やしている // 値 0 => 海、値 1 => 島番号無しの陸地
// 値2以上 => 島番号付き陸地
int num; // 島番号(最初の島番号は 2)
// 最終的に num - 1 が求める島の個数となる
label(int row, int column) {
int i,j;
map[row][column] = num;
// 島番号の付いていない隣接陸地に対して、その場所から再帰的に島番号をふる for(i=-1; i<=1; i++) // 上下方向
for(j=-1; j<=1; j++) // 左右方向
// そこが島番号無しの陸地なら、その位置で label を再起的に呼び出す if(map[row+i][column+j] == 1) label(row+i, column+j);
}
main() {
int i,j; while(1){
scanf("%d %d", &w, &h); if(w==0 && h==0) break; for(i=1; i<=h; i++)
// 地図の幅(w)と地図の固さ(h)の入力
// w=0, h=0 なら終了
// 地図データの読み込み
} }
for(j=1; j<=w; j++) scanf("%d", &map[i][j]);
for(j=0; j<=w+1; j++) // map[0][j] = map[h+1][j] = 0;
for(i=1; i<=h; i++)
  map[i][0] = map[i][w+1] = 0;
num = 1; // for(i=1; i<=h; i++) //
  for(j=1; j<=w; j++)
    if(map[i][j] == 1){     //
num++; // label(i,j); //
}
printf("%d\n", num-1); //
地図の周辺は海
// 最上行と最下行を 0(海)とする
// 最左列と最右列を 0(海)とする 島番号を 1 に初期化
地図のスキャン
現在スキャンしている位置が島番号無し陸地なら これは新しい島なので、島番号を増やして、 その場所から DFS で隣接陸地に新島番号を付ける
島の個数は島番号-1
// 深さ優先探索(DFS)で隣接陸地に島番号を付ける
// 現在の場所に島番号をふる
4
