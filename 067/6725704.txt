#include <iostream>
#include <vector>
#include <set>

using namespace std;

int main()
{
    int V, E, r;
    cin >> V >> E >> r;
    vector<vector<pair<int, int> > > G(V, vector<pair<int, int> >(0));
    for (int i = 0; i < E; i++)
    {
        int s, t, d;
        cin >> s >> t >> d;
        G[s].push_back(make_pair(t, d));
    }
    vector<int> ans(V, -1);
    multiset<pair<int, int> > multi;
    multi.insert(make_pair(0, r));
    while (!multi.empty())
    {
        pair<int, int> addV = *multi.begin();
        multi.erase(multi.begin());
        if (ans[addV.second] != -1)
            continue;
        ans[addV.second] = addV.first;
        for (pair<int, int> next : G[addV.second])
        {
            // p.first = nest pos; p.second = weight of e;
            if (ans[next.first] == -1)
            {
                multi.insert(make_pair(ans[addV.second] + next.second, next.first));
            }
        }
    }
    for (int i = 0; i < V; i++)
    {
        if (ans[i] == -1)
        {
            cout << "INF" << endl;
        }
        else
        {
            cout << ans[i] << endl;
        }
    }

    return 0;
}
