#include<bits/stdc++.h>
// #include<atcoder/modint>
using namespace std;
// using namespace atcoder;
const long long MOD = 1000000007;
const long long N = 4000400;
long long fact[N];
long long invfact[N];

long long modpow(long long a, long long b){
	long long ret = 1;
	while(b > 0){
		if(b & 1){
			ret *= a;
			ret %= MOD;
		}
		a *= a;
		a %= MOD;
		b >>= 1;
	}
	return ret;
}

void init(){
	fact[0] = 1;
	for(int i = 1; i < N; i++){
		fact[i] = fact[i - 1] * i % MOD;
	}
	invfact[N - 1] = modpow(fact[N - 1], MOD - 2);
	for(int i = N - 2; i >= 0; i--){
		invfact[i]  =invfact[i + 1] * (i + 1) % MOD;
	}
}

long long nCk(int n, int k){
	if(k < 0 || k > n) return 0;
	return (fact[n] * invfact[k] % MOD) * invfact[n - k] % MOD;
}

long long nHk(int n, int k){
	if(n == 0 && k == 0) return 1;
	return nCk(n + k - 1, k);
}

void solve(){
	init();
	while(1){
		int a, b, c, sx, sy;
		cin >> a >> b >> c >> sx >> sy;
		if(a + b + c == 0) return;
		int abc = a + b + c;
		long long ans = 0;
		for(int cc = 0; cc <= min(sx, sy); cc++){
			long long tmp = nHk(abc, cc);
			tmp *= nHk(a, sx - cc - a) * nHk(b, sy - cc - b) % MOD;
			ans += tmp % MOD;
			ans %= MOD;
		}
		ans *= nCk(abc, a) * nCk(b + c, b) % MOD;
		ans %= MOD;
		cout << ans << "\n";
	}
}

int main(){
    cin.tie(0)->sync_with_stdio(0);
    int t;
    t = 1;
    // cin >> t;
    while(t--) solve();
}
    
    
