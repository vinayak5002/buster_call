
import itertools
import sys
import math
import heapq
from collections import deque, Counter, defaultdict
from sys import stdin
import copy
import bisect
from decimal import Decimal, ROUND_HALF_UP
# from atcoder.dsu import DSU

MOD = 10 ** 9 + 7
int1 = lambda x: int(x) - 1
stinput = lambda: stdin.readline()[:-1]
ii = lambda: int(stinput())  # int input
mi = lambda: map(int, stdin.readline().split())  # map input (int)
li = lambda: list(mi())  # list input (int)
mi1 = lambda: map(int1, stdin.readline().split())  # map input (int)-1
li1 = lambda: list(mi1())  # list input (int)-1
mis = lambda: map(str, stdin.readline().split())  # map input (string)
lis = lambda: list(mis())  # list input (string)

while True:
    N = ii()
    if N == 0:
        break
    flag = False
    if N <= 3:
        print(0)
        continue
    for i in range(2,math.ceil(N**(1/2)+1)):
        if N % i == 0:
            flag = True
            break
    if not flag:
        print(0)
        continue
    tmp1 = N
    tmp2 = N
    while True:
        flag1 = False
        tmp1 -= 1
        for i in range(2,math.ceil(tmp1**(1/2)+1)):
            if tmp1 % i == 0:
                flag1 = True
                break
        if not flag1:
            break
    while True:
        flag2 = False
        tmp2 += 1
        for i in range(2,math.ceil(tmp2**(1/2)+1)):
            if tmp2 % i == 0:
                flag2 = True
                break
        if not flag2:
            break
    print(tmp2 - tmp1)
