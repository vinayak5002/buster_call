use std::borrow::BorrowMut;
use std::collections::HashMap;
use std::io;

fn main() {
    let mut str_vec:Vec<String> = vec![];
    loop {
        let mut s = String::new();
        io::stdin().read_line(&mut s).expect("Error");
        let line = s.trim().to_string();
        if line.is_empty() {
            break;
        } else {
            str_vec.push(line);
        }
    }
    let mut dict: HashMap<String, i32> = HashMap::new();

    let ascii_code_a = 'a' as u8;
    for i in 0..26 {
        let key = (ascii_code_a + i) as char;
        dict.insert(key.to_string().to_owned(), 0);
    }

    for s in str_vec {
        for x in s.chars() {
            if x.is_alphabetic() {
                let key = format!("{}", x.to_lowercase());
                let map_value = dict.entry(key).or_insert(0);
                *map_value += 1;
            }
        }
    }

    for i in 0..26 {
        let key = (ascii_code_a + i) as char;
        let value = dict.entry(key.to_string()).or_insert(0);
        println!("{} : {}", key, value)
    }
}

