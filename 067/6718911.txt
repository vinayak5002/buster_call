#include <bits/stdc++.h>

using namespace std;

using P = pair<int, int>;
using VP = vector<P>;
using Long = long long;

// 面積計算
Long area(VP& v) {
    sort(v.begin(), v.end());
    int max_x = 0, max_y = 0;
    int min_x = 50000, min_y = 50000;

    for (int i = 0; i < 4; ++i) {
        max_x = max(max_x, v[i].first);
        min_x = min(min_x, v[i].first);
        max_y = max(max_y, v[i].second);
        min_y = min(min_y, v[i].second);
    }
    Long outer_area = (max_x - min_x) * (max_y - min_y);
    Long triangle =
        abs(v[0].first - v[1].first) * abs(v[0].second - v[1].second);
    return (outer_area - triangle * 4 / 2);
}
// めぐる式二分探索
bool search(const VP& v, const P& x) {
    int left = -1;
    int right = (int)v.size();
    while (right - left > 1) {
        int mid = (left + right) / 2;
        if (v[mid] == x) {
            return true;
        } else if (v[mid] > x) {
            right = mid;
        } else {
            left = mid;
        }
    }
    return false;
}
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    while (true) {
        int n;
        cin >> n;
        if (n == 0) break;

        VP p;

        for (int i = 0; i < n; ++i) {
            int x, y;
            cin >> x >> y;
            p.push_back(make_pair(x, y));
        }

        sort(p.begin(), p.end());
        Long max_area = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int diff_x = abs(p[i].first - p[j].first);
                int diff_y = abs(p[i].second - p[j].second);
                P left_down =
                    make_pair(p[i].first - diff_y, p[i].second + diff_x);
                if (search(p, left_down)) {
                    P left_up =
                        make_pair(p[j].first - diff_y, p[j].second + diff_x);
                    if (search(p, left_up)) {
                        VP v = {p[i], p[j], left_down, left_up};
                        max_area = max(max_area, area(v));
                    }
                }
            }
        }
        cout << max_area << endl;
    }
    return 0;
}

