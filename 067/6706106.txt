#include <bits/stdc++.h>
using namespace std;

template<typename key_t, typename val_t, class Compair = less<key_t>>
struct FibonacciHeap{
  struct Node;
  using Np = Node *;
  
  struct Node{
    key_t key;
    val_t val;
    Node() = default;
    Node(const key_t &key, const val_t &val): key(key), val(val) {}

    Np p = nullptr, child = nullptr, left = this, right = this;

    size_t degree = 0;  
    bool mark = false;
  };
private:

  Np root;
  size_t sz;
  Compair cmp;

  void insert(Np &p1, Np &p2){
    Np rr = p1->right;
    p1->right = p2; p2->left = p1;
    p2->right = rr; rr->left = p2;
  }

  void merge(Np &p1, Np &p2){
    Np r1 = p1->right, r2 = p2->left;
    p1->right = p2; p2->left = p1;
    r2->right = r1; r1->left = r2;
  }

  vector<Np> get_Np_list(Np r){
    assert(!!r);
    vector<Np> nps;
    Np w = r;
    do{
      nps.push_back(w);
      w = w->right;
    }while(w != r);
    return nps;
  }

  void consolidate(){
    vector<Np> a, nps = get_Np_list(root);

    for(Np w : nps){
      Np x = w;
      size_t d = x->degree;
      
      while(d < a.size() && !!a[d]){
        Np y = a[d];
        if(cmp(y->key, x->key)) swap(x, y);
        heap_link(y, x);
        a[d] = nullptr;
        ++d;
      }

      if(a.size() <= d) a.resize(d + 1, nullptr);
      a[d] = x;
    }
    root = nullptr;
    for(Np x : a){
      if(!x) continue;
      if(!root){
        x->left = x->right = x;
        root = x;
      }else{
        insert(root, x);
        if(cmp(x->key, root->key)) root = x;
      }
    }
    assert(!!root);
  }

  void heap_link(Np &y, Np &x){
    if(y->right != y) delete_node(y);
    if(!x->child) x->child = y;
    else insert(x->child, y);
    y->p = x;
    x->degree += 1;
    y->mark = false;
  }

  void cascading_cut(Np &y){
    Np z = y->p;
    if(!!z){
      if(!y->mark) y->mark = true;
      else{
        cut(y, z);
        cascading_cut(z);
      }
    }
  }

  void erase(Np &x, const key_t &linf){
    decrease(x, linf);
    pop();
  }

  void delete_node(Np &x){
    Np l = x->left, r = x->right;
    l->right = r; r->left = l;
    x->left = x->right = x;
  }

  void cut(Np &x, Np &y){
    if(x->right == x){
      y->child = nullptr;
    }else{
      y->child = x->right;
      delete_node(x);
    }
    y->degree -= 1;
    insert(root, x);
    x->p = nullptr;
    x->mark = false;
  }

public:
  FibonacciHeap(const Compair &cmp = Compair{}): root(nullptr), sz(0), cmp(cmp) {}
  FibonacciHeap(const FibonacciHeap&) = default;
  FibonacciHeap(FibonacciHeap&&) = default;

  FibonacciHeap &operator=(const FibonacciHeap&) = default;
  FibonacciHeap &operator=(FibonacciHeap&&) = default;

  size_t size() const { return sz; }
  bool empty() const { return !sz; }

  pair<key_t, val_t> top() const {
    assert(!!root);
    return {root->key, root->val};
  }

  Np push(const key_t &key, const val_t &val){
    Np x = new Node(key, val);

    if(!root){
      root = x;
    }else{
      insert(root, x);
      if(cmp(key, root->key)) root = x;
    }

    ++sz;
    return x;
  }

  void merge(FibonacciHeap &h2){
    if(!h2.root) return;
    sz += h2.sz;

    if(!root){
      root = h2.root;
      return;
    }
    merge(root, h2.root);
    if(cmp(h2.root->key, root->key)) root = h2.root;
  }

  static FibonacciHeap merge(FibonacciHeap &h1, FibonacciHeap &h2){
    FibonacciHeap h(h1.cmp);
    h.root = h1.root; h.sz = h1.sz;
    h.merge(h2);
    return h;
  }

  pair<key_t, val_t> pop(){
    assert(("can't pop" ,!!root));
    pair<key_t, val_t> res = {root->key, root->val};

    Np c = root->child;

    if(!!c){
      vector<Np> nps = get_Np_list(c);
      for(Np x : nps){
        insert(root, x);
        x->p = nullptr;
      }
    }

    if(root->right == root){
      delete root;
      root = nullptr;
    }else{
      Np z = root;
      root = root->right;
      delete_node(z);
      delete z;
      consolidate();
    }
    --sz;

    return res;
  }

  void decrease(Np &x, const key_t &key){
    assert(!!x);
    assert(!cmp(x->key, key));
    x->key = key;
    Np y = x->p;
    if(!!y && cmp(x->key, y->key)){
      cut(x, y);
      cascading_cut(y);
    }
    if(cmp(x->key, root->key)) root = x;
  }

  static Np get_np() { return nullptr; }
};

template<typename T = int>
struct Edge{
  int src, to; T cost; int idx;
  Edge(){}
  Edge(int src, int to, T cost = -1, int idx = -1): src(src), to(to), cost(cost), idx(idx) {}
  operator int() const { return to; }
};
template<typename T> using Edges = vector<Edge<T>>;

template<typename T = bool>
struct Graph {
  vector<vector<Edge<T>>> g;
  size_t es;
  Graph() {};
  Graph(size_t n): g(n), es(0) {}
  size_t size() const { return g.size(); }
  int deg(int v) const { return int(g[v].size()); }

  vector<Edge<T>> &operator[](int k) { return g.at(k); }
  const vector<Edge<T>> &operator[](int k) const { return g.at(k); }
  vector<Edge<T>> &at(int k) { return g.at(k); }
  const vector<Edge<T>> &at(int k) const { return g.at(k); }

  void add_edge(int src, int to, T cost = 1){
    g[src].emplace_back(src, to, cost, es);
    g[to].emplace_back(to, src, cost, es++);
  }
  void add_directed_edge(int src, int to, T cost = 1){
    g[src].emplace_back(src, to, cost, es++);
  }

  void read(int m, int base = 1, bool weighted = false, bool directed = false, const T &id = 1){
    for (int i = 0; i < m; i++){
      int u, v; cin >> u >> v; u -= base; v -= base;
      T c = id;
      if(weighted) cin >> c;
      if(directed) add_directed_edge(u, v, c);
      else add_edge(u, v, c);
    }
  }
  
  vector<int> topological_order() const {
    int n = int(g.size());
    vector<int> vs, ind(n); vs.reserve(n);
    for(int v = 0; v < n; ++v){
      for(const auto&e : g[v]) ++ind[e];
    }
    queue<int> qu;
    for(int v = 0; v < n; ++v){
      if(ind[v] == 0) qu.push(v);
    }
    while(!qu.empty()){
      int v = qu.front(); qu.pop();
      vs.push_back(v);
      for(auto e : g[v]){
        if(--ind[e] == 0) qu.push(e);
      }
    }
    return vs;
  }
};


template<typename T>
vector<T> Dijkstra(const Graph<T> &g, int s){
  FibonacciHeap<T, int> heap;
  vector nodes(g.size(), heap.get_np());
  vector<T> dist(g.size(), numeric_limits<T>::max());
  nodes[s] = heap.push(0, s); dist[s] = 0;

  while(!heap.empty()){
    auto[d, v] = heap.pop();

    for(auto&&e : g[v]){
      int u = e.to;
      T nd = d + e.cost;
      if(dist[u] <= nd) continue;
      dist[u] = nd;
      if(!nodes[u]){
        nodes[u] = heap.push(nd, u);
      }else{
        heap.decrease(nodes[u], nd);
      }
    }
  }
  return dist;
}



template<typename T>
pair<vector<T>, vector<int>> ShortestPathFasterAlgorithm(const Graph<T> &g, int s){
  int n = int(g.size());
  vector<T> dist(n);
  vector<int> inque(n), cnt(n), state(n);
  stack<int> st;
  st.push(s); inque[s] = cnt[s] = state[s] = 1; 

  while(!st.empty()){
    int v = st.top(); st.pop();
    inque[v] = 0;

    for(auto&e : g[v]){
      if(state[e.to] == 2) continue;

      if(state[v] == 2){
        state[e.to] = 2;
        if(!inque[e.to]){
          inque[e.to] = 1;
          st.push(e.to);
        }
        continue;
      }

      if(state[e.to] && (dist[v] + e.cost >= dist[e.to])) continue;
      dist[e.to] = dist[v] + e.cost;
      state[e.to] = 1;
      if(!inque[e.to]){
        if(n <= ++cnt[e.to]) state[e.to] = 2;
        inque[e.to] = 1;
        st.push(e.to);
      }
    }
  }
  return {dist, state};
}


template<typename T>
vector<vector<T>> Johnson_APSP(const Graph<T> &g){
  int n = int(g.size());
  Graph<T> g_s(n + 1), ng(n);
  for(int v = 0; v < n; ++v){
    for(auto&&e : g[v]) g_s.add_directed_edge(v, e.to, e.cost);
    g_s.add_directed_edge(n, v, 0);
  }
  auto[dist_s, state] = ShortestPathFasterAlgorithm(g_s, n);
  for(int v = 0; v < n; ++v){
    for(auto&&e : g[v]) ng.add_directed_edge(v, e.to, e.cost + dist_s[v] - dist_s[e.to]);
  }
  vector<vector<T>> dist; dist.reserve(n);
  for(int v = 0; v < n; ++v){
    if(state[v] != 2) dist.push_back(Dijkstra(ng, v));
    else dist.push_back({});
    for(int u = 0; u < n; ++u){
      dist[v][u] -= dist_s[v] - dist_s[u];
    }
  }
  return dist;
}

int main() {
  int n, m; cin >> n >> m;
  Graph<int> g(n); g.read(m, 0, 1, 1);
  auto dist = Johnson_APSP(g);

  for(auto&d : dist){
    if(d.empty()){
      cout << "NEGATIVE CYCLE\n";
      return 0;
    }
  }

  auto inf = numeric_limits<int>::max();
  for(auto&d : dist){
    for(int v = 0; v < n; ++v){
      if(d[v] == inf) cout << "INF";
      else cout << d[v];
      cout << " \n"[v+1 == n];
    }
    cout << "\n";
  }
}
