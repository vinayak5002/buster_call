#include <bits/stdc++.h>
using namespace std ;
#define MAX 1000000001
#define NIL -2000000002
#define INF 2000000002
#define MAXN 1401
typedef long long int ll;
const int debug = 0 ; 
const int debug1 = 0 ; 

ll MAP[MAXN][MAXN] ;
ll DP[MAXN][MAXN] ;
int H , W;
ll maxsquare ; 

void init(){
    for (int i=0; i<MAXN; i++) {
        for (int j=0; j<MAXN; j++) {
            DP[i][j] = -1 ;
        }        
    }
    for (int i=0; i<MAXN; i++) {
        MAP[0][i] = 1;      MAP[i][0] = 1;
        DP[0][i]=0 ;  DP[i][0]=0;
    }
}

ll shori(int i, int j){
    // DP[i][j]
    // (i,j)を右下端とする最大正方形の面積を記録
    //
    //
    if ( DP[i][j] >=0 ) {return DP[i][j]; }

    int l, u, lu, tmp ; 
    l = shori(i,j-1);
    u = shori(i-1,j);
    lu = shori(i-1,j-1);

    if ( MAP[i][j] == 1) {DP[i][j]=0;  }
    else { 
       tmp = min(l, min(u,lu ));
        // tmp+1が最大正方形の一辺の長さになる。   
        DP[i][j] = tmp + 1;
        // printf ("DP[%d][%d] = %lld  \n", i, j, DP[i][j] );
        if (maxsquare < DP[i][j]) { maxsquare = DP[i][j]; } ;
    }
    return DP[i][j];
}


int main(){
    init();
    cin >> H >> W ;
    int tmp ; 
    for (int i=1 ; i<= H ; i++){
        for (int j=1 ; j<=W ; j++) {
            cin >> tmp ; MAP[i][j] = tmp ; 
        }
    }
    
   int ans = 0;
   ans = shori( H, W );

   /* if(debug){
        for (int i=1 ; i<len1 ; i++ ) {
            for (int j=1 ; j<len2 ; j++ ) {
                printf ("%lld ", DP[i][j] ) ;
            }
            printf("\n");
        }
        printf("\n");
    }*/
    printf("%lld\n",(ll)pow(maxsquare,2) ) ;
    return 0;
}

/*

編集距離
２つの文字列 s1、s2 の編集距離（レーベンシュタイン距離）を求めて下さい。

編集距離とは、以下３種類の操作によって、１つの文字列を別の文字列に変形するのに必要な手順の最小回数です：

挿入: 文字列に１つの文字を挿入する。
削除: 文字列から１つの文字を削除する。
置換: 文字列の中の１文字を別な文字に置き換える。
入力
s1
s2
２つの文字列 s1, s2 がそれぞれ１行目と２行目に与えられる。文字列はアルファベットの小文字で構成されている。

出力
編集距離を１行に出力する。

制約
1 ≤ s1 の長さ ≤ 1000
1 ≤ s2 の長さ ≤ 1000
入力例 1
acac
acm
出力例 1
2


*/
