import Control.Monad ( forM_, when )
import Data.Maybe ( fromJust )
import qualified Data.ByteString.Char8 as B
import qualified Data.Vector as V

main :: IO ()
main = do
  n  <- readLn
  xv <- fmap (V.fromList . (0:) . map (fst . fromJust . B.readInt) . B.words) B.getLine
  forM_ [1..n] $ \i -> do
    putStr $ "node " ++ show i ++ ": "
    putStr $ "key = " ++ show (xv V.! i) ++ ", "
    putStr $ if i == 1 then "" else "parent key = " ++ show (xv V.! (i `div` 2)) ++ ", "
    putStr $ if (i * 2) > n then "" else "left key = " ++ show (xv V.! (i * 2)) ++ ", "
    putStr $ if (i * 2 + 1) > n then "" else "right key = " ++ show (xv V.! (i * 2 + 1)) ++ ", "
    putStrLn ""
