#define _USE_MATH_DEFINES
#include<bits/stdc++.h>
#include<unordered_map>

using namespace std;
#define LP(I,S,G) for (long long int I = (S); I < (G); I++)
#define IN(X) 	for (int in = 0; in < X.size(); in++)cin >> X[in]
#define OUT(X) 	for (int in = 0; in < X.size(); in++)cout << X[in]<<" "
#define SORT(X) sort((X).begin(), (X).end())
#define CSORT(X,Y) sort(X.begin(), X.end(),Y)
#define COPY(X,Y) copy(X.begin(), X.end(), Y.begin())
#define ALL(X,Y) for (auto X = (Y).begin(); X != (Y).end(); X++)
#define FULL(a)  (a).begin(),(a).end()
#define BFS(Q,S) for(Q.push(S);Q.size()!=0;Q.pop())
typedef long long int ll;
typedef unsigned long long int ull;
long long int M = pow(10, 9) + 7;


int dx[] = { 0,-1,0,1 }, dy[] = { -1,0,1,0 };

ll MAX(ll A, ll B) { return ((A) > (B) ? (A) : (B)); }
ll MIN(ll A, ll B) { return ((A) < (B) ? (A) : (B)); }
long long int xor128() {
	static long long int x = 123456789, y = 362436069, z = 521288629, w = 88675123;
	long long int t = (x ^ (x << 11));
	x = y; y = z; z = w;
	return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
}

struct HashPair {
	//注意 constがいる
	template<class T1, class T2>
	size_t operator()(const pair<T1, T2> &p) const {
		//first分をハッシュ化する
		auto hash1 = hash<T1>{}(p.first);
		//second分をハッシュ化する
		auto hash2 = hash<T2>{}(p.second);
		//重複しないようにハッシュ処理
		size_t seed = 0;
		seed ^= hash1 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		seed ^= hash2 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		return seed;
	}
};
template<class I1, class I2>
istream& operator>>(istream& s, pair<I1, I2>& in) {
	s >> in.first >> in.second;
	return s;
}

int main() {
	ll v, e;
	cin >> v >> e;
	vector<vector<vector<ll>>> dp((1 << v), vector<vector<ll>>(v, vector<ll>(v, LLONG_MAX)));
	LP(i, 0, v) {
		dp[(1 << i)][i][i] = 0;
	}
	vector<vector<pair<ll,ll>>> g(v);
	LP(i, 0, e) {
		ll s, t, d;
		cin >> s >> t >> d;
		g[s].push_back({ t,d });
	}
	LP(x, 0, (1 << v)) {
		LP(i, 0, v) {
			LP(k, 0, v) {
				if (dp[x][i][k] == LLONG_MAX)continue;
				ll size = g[k].size();
				LP(j, 0, size) {
					if((x & (1 << g[k][j].first))==0)dp[(x | (1<<g[k][j].first))][i][g[k][j].first] = MIN(dp[(x | (1<<g[k][j].first))][i][g[k][j].first], dp[x][i][k] + g[k][j].second);
				}
			}
		}
	}
	ll ans = LLONG_MAX;
	LP(i, 0, v) {
		LP(k, 0, v) {
			if (dp[(1 << v) - 1][i][k] != LLONG_MAX) {
				ll size = g[k].size();
				LP(j, 0, size) {
					if (g[k][j].first == i) {
						ans = MIN(ans, dp[(1 << v) - 1][i][k] + g[k][j].second);
					}
				}
			}
		}
	}
	if (ans == LLONG_MAX)ans = -1;
	cout << ans << endl;
	return 0;
}

