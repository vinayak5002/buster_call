using System;
using System.Collections.Generic;
using System.Linq;
using CoderLib8.DataTrees.SBTs;
using CoderLib8.Graphs.Int;

class DBT
{
	static int[] Read() => Array.ConvertAll(Console.ReadLine().Split(), int.Parse);
	static void Main()
	{
		var n = Read()[0];
		var map = Array.ConvertAll(new bool[n], _ => new CoderLib8.Graphs.Int.List<int>(Read().Skip(1)));
		var qc = Read()[0];
		var qs = Array.ConvertAll(new bool[qc], _ => Read());

		var graph = new UGraph(n, map);
		var tree = new UTree(graph, 0);
		var st = new MergeSBT<long>(2 * n, Monoid.Int64_Add);

		Console.SetOut(new System.IO.StreamWriter(Console.OpenStandardOutput()) { AutoFlush = false });
		foreach (var q in qs)
		{
			if (q[0] == 0)
			{
				var (v, w) = (q[1], q[2]);
				var (si, ei) = (tree.Nodes[v].Orders[0], tree.Nodes[v].Orders.Last);
				st[si] += w;
				st[ei + 1] -= w;
			}
			else
			{
				var u = q[1];
				var si = tree.Nodes[u].Orders[0];
				Console.WriteLine(st[1, si + 1]);
			}
		}
		Console.Out.Flush();
	}
}

namespace CoderLib8.Graphs.Int
{
	[System.Diagnostics.DebuggerDisplay(@"Count = {Count}")]
	public class List<T> : IEnumerable<T>
	{
		T[] a;
		int n;
		public int Count => n;

		public T First => a[0];
		public T Last => a[n - 1];
		public T this[int i]
		{
			get => a[i];
			set => a[i] = value;
		}

		public List(IEnumerable<T> items = null, int size = 1)
		{
			a = new T[size];
			if (items != null) foreach (var item in items) Add(item);
		}

		public void Add(T item)
		{
			if (n == a.Length) Expand();
			a[n++] = item;
		}

		void Expand()
		{
			Array.Resize(ref a, a.Length << 1);
		}

		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
		public IEnumerator<T> GetEnumerator() { for (var i = 0; i < n; ++i) yield return a[i]; }
	}

	// 有効な vertex id: [0, n)
	// edge id を利用しません。
	public class UGraph
	{
		public int VertexesCount { get; }
		List<int>[] map;
		public List<int>[] Map => map;

		public UGraph(int n, List<int>[] map)
		{
			VertexesCount = n;
			this.map = map;
		}
		public UGraph(int n) : this(n, Array.ConvertAll(new bool[n], _ => new List<int>())) { }
		public UGraph(int n, int[][] edges, bool directed) : this(n)
		{
			AddEdges(edges, directed);
		}

		public void AddEdge(int from, int to, bool directed)
		{
			map[from].Add(to);
			if (!directed) map[to].Add(from);
		}
		public void AddEdge(int[] e, bool directed) => AddEdge(e[0], e[1], directed);

		public void AddEdges(int[][] edges, bool directed)
		{
			foreach (var e in edges) AddEdge(e[0], e[1], directed);
		}
	}

	public class UTree
	{
		[System.Diagnostics.DebuggerDisplay(@"\{{Id}\}")]
		public class Node
		{
			public int Id;
			public int Depth = -1;
			public List<int> Orders = new List<int>();
			public Node Parent;
		}

		public UGraph Graph { get; }
		public int VertexesCount => Graph.VertexesCount;
		public List<int>[] Map => Graph.Map;

		public Node Root { get; }
		public Node[] Nodes { get; }
		// この Euler tour では方向を記録しません。
		// order -> vertex
		public Node[] TourNodes { get; }

		public UTree(UGraph graph, int root)
		{
			Graph = graph;
			var n = VertexesCount;
			Nodes = new Node[n];
			for (int i = 0; i < n; ++i) Nodes[i] = new Node { Id = i };
			TourNodes = new Node[2 * n - 1];

			Root = Nodes[root];
			Root.Depth = 0;
			Dfs(Root, new Node { Id = -1 });
		}

		int order = -1;
		void Dfs(Node cn, Node pn)
		{
			cn.Orders.Add(++order);
			TourNodes[order] = cn;

			foreach (var nv in Map[cn.Id])
			{
				if (nv == pn.Id) continue;
				var nn = Nodes[nv];
				nn.Depth = cn.Depth + 1;
				nn.Parent = cn;
				Dfs(nn, cn);

				cn.Orders.Add(++order);
				TourNodes[order] = cn;
			}
		}
	}
}

namespace CoderLib8.DataTrees.SBTs
{
	public static class Monoid
	{
		public static Monoid<int> Int32_Add { get; } = new Monoid<int>((x, y) => x + y);
		public static Monoid<long> Int64_Add { get; } = new Monoid<long>((x, y) => x + y);
		public static Monoid<int> Int32_Min { get; } = new Monoid<int>((x, y) => x <= y ? x : y, int.MaxValue);
		public static Monoid<int> Int32_Max { get; } = new Monoid<int>((x, y) => x >= y ? x : y, int.MinValue);

		public static Monoid<int> Int32_ArgMin(int[] a) => new Monoid<int>((x, y) => a[x] <= a[y] ? x : y);

		public static Monoid<int> Int32_Update { get; } = new Monoid<int>((x, y) => x != -1 ? x : y, -1);
	}

	public struct Monoid<T>
	{
		public Func<T, T, T> Op;
		public T Id;
		public Monoid(Func<T, T, T> op, T id = default(T)) { Op = op; Id = id; }
	}

	// leaves-to-root segment binary tree
	[System.Diagnostics.DebuggerDisplay(@"Count = {Count}")]
	public class MergeSBT<TValue>
	{
		[System.Diagnostics.DebuggerDisplay(@"\{{Value}, Count = {Count}\}")]
		public class Node
		{
			public TValue Value;
			public int Count = 1;
			public Node Parent, Left, Right;
		}

		public Monoid<TValue> Merge { get; }
		Node[] Leaves;
		public int Count => Leaves.Length;
		Node Root;

		public MergeSBT(int n, Monoid<TValue> merge, IEnumerable<TValue> items = null)
		{
			Merge = merge;
			var a = items as TValue[] ?? items?.ToArray();
			if (a?.Length < n) throw new ArgumentException("", nameof(items));
			Leaves = new Node[n];
			for (int i = 0; i < n; ++i) Leaves[i] = new Node { Value = a != null ? a[i] : merge.Id };
			Root = CreateSubtree(0, n);
		}

		Node CreateSubtree(int l, int r)
		{
			if (r - l == 1) return Leaves[l];
			var m = (l + r) >> 1;
			var n = new Node
			{
				Count = r - l,
				Left = CreateSubtree(l, m),
				Right = CreateSubtree(m, r),
			};
			n.Left.Parent = n.Right.Parent = n;
			n.Value = Merge.Op(n.Left.Value, n.Right.Value);
			return n;
		}

		public TValue this[int index]
		{
			get => Leaves[index].Value;
			set
			{
				Leaves[index].Value = value;
				for (var n = Leaves[index].Parent; n != null; n = n.Parent)
					n.Value = Merge.Op(n.Left.Value, n.Right.Value);
			}
		}

		public TValue this[int left, int right] => left < right ? GetRange(Root, left, right) : Merge.Id;

		TValue GetRange(Node n, int l, int r)
		{
			if (l <= 0 && n.Count <= r) return n.Value;
			var lc = n.Left.Count;
			if (r <= lc) return GetRange(n.Left, l, r);
			if (lc <= l) return GetRange(n.Right, l - lc, r - lc);
			return Merge.Op(GetRange(n.Left, l, lc), GetRange(n.Right, 0, r - lc));
		}
	}
}


