#include<cstdio>
#include<cstdlib>
#include<cstring>

struct Node {
    int key;
    Node *prev; 
    Node *next;
};

Node *nil;

void init() {
    nil = (Node*)malloc(sizeof(Node));
    nil->next = nil;
    nil->prev = nil;
}

void insert(int key) {
    Node *x = (Node *)malloc(sizeof(Node))
    x->next = nil->next;
    nil->next->prev = x;
    nil->next = x;
    x->prev = nil;
}

Node* Search(int key) {
    Node* cur = nil->next;
    while (cur != nil && cur->key !=) {
        cur = cur->next;
    }
    return cur;
} 

void delete_x(Node *n) {
    if( n == nil )return;
    n->prev->next=n->next;
    n->next->prev=n->prev;
    free(n)
}

void deleteFirst() {
    delete_x(nil->next);
}

void deleteLast() {
    delete_x(nil->prev)
}

void deleteKey(int key) {
    delete_x(Search(int key));
}

void print() {
    Node *cur = nil->next;
    int flg=0;
    while (1) {
        if (cur == nil) break;
        if (flg++ > 0) printf(" ");
        printf("%d", cur->key);
        cur = cur->next;
    }
    printf("\n");
}

int main(){
    int key;
    int x;
    int i;
    int size = 0;
    char com[20];
    int p = 0;
    int d = 0;
    scanf("%d", &x);
    init();
    for ( i=0; i<x; i++){
        scanf("%s%d", com, &key);
        if ( com[0] == 'i') {insert(key); p++; size++;}
        else if (com[0] == 'd') {
            if(strlen(com)>6) {
                if (com[6] == 'F') deleteFirst();
                else if (com[6] == 'L') deleteLast();
            } else {
                deleteKey(key); d++;
            }
            size--;
        }
    }
    print();
    return 0;
}
