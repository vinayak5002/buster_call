#include <bits/stdc++.h>
using namespace std;
//#define _GLIBCXX_DEBUG

using vi = vector<int>;
using vvi = vector<vector<int>>;
using vvvi = vector<vector<vector<int>>>;
using vl = vector<long long>;
using vvl = vector<vector<long long>>;
using vvvl = vector<vector<vector<long long>>>;
using vb = vector<bool>;
using vvb = vector<vector<bool>>;
using vvvb = vector<vector<vector<bool>>>;
using vs = vector<string>;
using vc = vector<char>;
using vvc = vector<vector<char>>;
using vvvc = vector<vector<vector<char>>>;
using vp = vector<pair<int, int>>;
template <class classtype>
using pq  = priority_queue<classtype>;
template <class classtype>
using u_set = unordered_set<classtype>;
template <class classtype1, class classtype2>
using u_map = unordered_map<classtype1, classtype2>;

constexpr long double PI = 3.141592653589793238462643383279502884L;

#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define all(v) v.begin(), v.end()
#define bpp_cnt __builtin_popcount
#define lwb lower_bound


struct dice_type {
  vector<int> dice;

  dice_type() {
    dice = vector<int>(6);
  }

  void dicemove(char direction) {
    if (direction == 'S') swaps(4, 5, 1, 0);
    if (direction == 'N') swaps(0, 1, 5, 4);
    if (direction == 'E') swaps(0, 3, 5, 2);
    if (direction == 'W') swaps(2, 5, 3, 0);
  }

  int sides(int a, int b) const {
    vector<vector<int>> T = {
      {5,4,2,3,5},
      {1,4,6,3,1},
      {1,2,6,5,1},
      {1,5,6,2,1},
      {1,3,6,4,1},
      {2,4,5,3,2}
    };
    return dice[*(find(all(T[find(all(dice), a) - dice.begin()]), find(all(dice), b) - dice.begin() + 1) + 1) - 1];
  }
private:
  void swaps(int i1, int i2, int i3, int i4) {
    swap(dice[i1], dice[i2]);
    swap(dice[i2], dice[i3]);
    swap(dice[i3], dice[i4]);
  }
};



int main() {




auto func = [](int i, int j) {
  if (i == 0 && j == 5) return false;
  if (i == 5 && j == 0) return false;
  if (i == 1 && j == 4) return false;
  if (i == 4 && j == 1) return false;
  if (i == 3 && j == 2) return false;
  if (i == 2 && j == 3) return false;
  return true;
};
 dice_type d1, d2;
 rep(i, 6) cin >> d1.dice[i];
 rep(i, 6) cin >> d2.dice[i];

 int count = 0;
 rep(i1, 6) {
   rep(j1, 6) {
     if (i1 == j1 || !func(i1, j1)) continue;

     rep(i2, 6) {
       rep(j2, 6) {
         if (d1.dice[i1] != d2.dice[i2] || d1.dice[j1] != d2.dice[j2] || i2 == j2 || !func(i2, j2)) continue;

         if (d1.sides(d1.dice[i1], d1.dice[j1]) == d2.sides(d2.dice[i2], d2.dice[j2])) count++;
       }
     }
   }
 }

 if (count == 24) cout << "Yes" << endl;
 else cout << "No" << endl;




















  return 0;
}

