#ifndef LOCAL
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#endif

#include <bits/stdc++.h>
// #include <atcoder/all>
using namespace std;
// using namespace atcoder;
using ll = long long;
using ld = long double;
using uint = unsigned;
using ull = unsigned long long;
using u64 = uint_fast64_t;
using pll = pair<ll, ll>;
using pdd = pair<ld, ld>;
using C = complex<double>;
template <class T> using pq = priority_queue<T, vector<T>, greater<T>>;

const int IINF = 0x1fffffff;
const ll LINF = 0x1fffffffffffffff;
const ll INF = 0x1fffffffffffffff;
const ll MINF = 0x7fffffffffff;
const ll MOD = 1000000007;
const ll MODD = 998244353;
const ld DINF = numeric_limits<ld>::infinity();
const ld EPS = 1e-9;
const ld PI = 3.1415926535897932;
const ll dx[] = {0, 1, 0, -1, 1, -1, 1, -1};
const ll dy[] = {1, 0, -1, 0, 1, 1, -1, -1};

#define overload4(_1, _2, _3, _4, name, ...) name
#define overload3(_1, _2, _3, name, ...) name
#define rep1(n) for (ll i = 0; i < n; ++i)
#define rep2(i, n) for (ll i = 0; i < n; ++i)
#define rep3(i, a, b) for (ll i = a; i < b; ++i)
#define rep4(i, a, b, c) for (ll i = a; i < b; i += c)
#define rep(...) overload4(__VA_ARGS__, rep4, rep3, rep2, rep1)(__VA_ARGS__)
#define rrep1(n) for (ll i = n; i--;)
#define rrep2(i, n) for (ll i = n; i--;)
#define rrep3(i, a, b) for (ll i = b; i-- > (a);)
#define rrep4(i, a, b, c)                                                      \
  for (ll i = (a) + ((b) - (a)-1) / (c) * (c); i >= (a); i -= c)
#define rrep(...)                                                              \
  overload4(__VA_ARGS__, rrep4, rrep3, rrep2, rrep1)(__VA_ARGS__)
#define each1(i, a) for (auto &&i : a)
#define each2(x, y, a) for (auto &&[x, y] : a)
#define each3(x, y, z, a) for (auto &&[x, y, z] : a)
#define each(...) overload4(__VA_ARGS__, each3, each2, each1)(__VA_ARGS__)
#define all1(i) begin(i), end(i)
#define all2(i, a) begin(i), begin(i) + a
#define all3(i, a, b) begin(i) + a, begin(i) + b
#define all(...) overload3(__VA_ARGS__, all3, all2, all1)(__VA_ARGS__)
#define rall1(i) (i).rbegin(), (i).rend()
#define rall2(i, k) (i).rbegin(), (i).rbegin() + k
#define rall3(i, a, b) (i).rbegin() + a, (i).rbegin() + b
#define rall(...) overload3(__VA_ARGS__, rall3, rall2, rall1)(__VA_ARGS__)
// g++ -DDBUG -I . ...
#ifdef DEBUG
inline ll __lg(ull x) { return 63 - __builtin_clzll(x); }
#define debug(...)                                                             \
  {                                                                            \
    print(#__VA_ARGS__);                                                       \
    print(":");                                                                \
    out(__VA_ARGS__);                                                          \
  }
#else
#define debug(...) void(0)
#endif

#define vec vector
#define fi first
#define se second
#define MM << " " <<
#define chmax(x, y) (x = max(x, y))
#define chmin(x, y) (x = min(x, y))
void debug_out() { std::cerr << std::endl; }
template <typename Head, typename... Tail> void debug_out(Head h, Tail... t) {
  std::cerr << " " << h;
  if (sizeof...(t) > 0)
    std::cout << " :";
  debug_out(t...);
}

vector<ll> primes;

vector<bool> Eratosthenes(int N) {
  vector<bool> isprime(N + 1, true);
  isprime[0] = isprime[1] = false;

  for (int p = 2; p <= N; ++p) {
    if (!isprime[p])
      continue;
    primes.push_back(p);
    for (int q = p * 2; q <= N; q += p) {
      isprime[q] = false;
    }
  }
  return isprime;
}

ll calc(ll n) {
  ll res = 0, tmp = n;
  while (n > 0) {
    res += n % 10;
    n /= 10;
  }
  res = (res + tmp) % 100000;
  return res;
}

ll gcd(ll a, ll b) {
  if (a < b) {
    ll tmp = a;
    a = b;
    b = tmp;
  }
  while (b != 0) {
    ll tmp = a % b;
    a = b;
    b = tmp;
  }
  return a;
}

template <typename T> T extgcd(T a, T b, T &x, T &y) {
  T d = a;
  if (b != 0) {
    d = extgcd(b, a % b, y, x);
    y -= (a / b) * x;
  } else {
    x = 1;
    y = 0;
  }
  return d;
}

ll mod_inv(ll a, ll m) {
  ll x, y;
  extgcd(a, m, x, y);
  if (x < 0)
    x += m;
  return x;
}

vector<ll> factors(ll N) {
  vector<ll> res;
  for (long long a = 2; a * a <= N; ++a) {
    if (N % a != 0)
      continue;
    long long ex = 0; // 指数

    // 割れる限り割り続ける
    while (N % a == 0) {
      ++ex;
      N /= a;
    }

    // その結果を push
    res.push_back(a);
  }
  if (N != 1)
    res.push_back(N);
  return res;
}

ll garner(vector<ll> r, vector<ll> m) {
  int n = r.size();
  ll m_prod = 1;      // m_prod には m[i] の積を入れていく
  ll x = r[0] % m[0]; // 最初の条件を満たすような x の初期値
  if (n == 1)
    return x;
  for (int i = 1; i < n; i++) {
    m_prod *= m[i - 1]; // m の累積積を更新
    ll t = ((r[i] - x) * mod_inv(m_prod, m[i])) % m[i];
    if (t < 0)
      t += m[i];     // 負の数の剰余の対策
    x += t * m_prod; // x を更新
  }
  return x;
}

template <std::uint_fast64_t Modulus> class modint {
  using u64 = std::uint_fast64_t;

public:
  u64 a;

  constexpr modint(const u64 x = 0) noexcept : a(x % Modulus) {}
  constexpr u64 &value() noexcept { return a; }
  constexpr const u64 &value() const noexcept { return a; }
  constexpr modint operator+(const modint rhs) const noexcept {
    return modint(*this) += rhs;
  }
  constexpr modint operator-(const modint rhs) const noexcept {
    return modint(*this) -= rhs;
  }
  constexpr modint operator*(const modint rhs) const noexcept {
    return modint(*this) *= rhs;
  }
  constexpr modint operator/(const modint rhs) const noexcept {
    return modint(*this) /= rhs;
  }
  constexpr modint &operator+=(const modint rhs) noexcept {
    a += rhs.a;
    if (a >= Modulus) {
      a -= Modulus;
    }
    return *this;
  }
  constexpr modint &operator-=(const modint rhs) noexcept {
    if (a < rhs.a) {
      a += Modulus;
    }
    a -= rhs.a;
    return *this;
  }
  constexpr modint &operator*=(const modint rhs) noexcept {
    a = a * rhs.a % Modulus;
    return *this;
  }
  constexpr modint &operator/=(modint rhs) noexcept {
    u64 exp = Modulus - 2;
    while (exp) {
      if (exp % 2) {
        *this *= rhs;
      }
      rhs *= rhs;
      exp /= 2;
    }
    return *this;
  }
};

/**
 * @brief 多次元 vector の作成
 * @author えびちゃん
 */

namespace detail {
template <typename Tp, size_t Nb>
auto make_vector(std::vector<size_t> &sizes, Tp const &x) {
  if constexpr (Nb == 1) {
    return std::vector(sizes[0], x);
  } else {
    size_t size = sizes[Nb - 1];
    sizes.pop_back();
    return std::vector(size, make_vector<Tp, Nb - 1>(sizes, x));
  }
}
} // namespace detail

template <typename Tp, size_t Nb>
auto make_vector(size_t const (&sizes)[Nb], Tp const &x = Tp()) {
  std::vector<size_t> s(Nb);
  for (size_t i = 0; i < Nb; ++i)
    s[i] = sizes[Nb - i - 1];
  return detail::make_vector<Tp, Nb>(s, x);
}

modint<MOD> dp[100001];

modint<MOD> dfs(ll n) {
  if (dp[n].value() != 0)
    return dp[n];
  modint<MOD> res = 0;
  rep(i, 1, 10) {
    if (n - i >= 0)
      res += dfs(n - i);
  }
  return dp[n] = res;
}

ll fact(ll n) {
  ll res = 1;
  rep(i, 1, n + 1) res *= i;
  return res;
}

struct Point {
  ld x;
  ld y;
  constexpr Point operator+(const Point rhs) const noexcept {
    Point tmp{0, 0};
    tmp.x = this->x + rhs.x;
    tmp.y = this->y + rhs.y;
    return tmp;
  }
  constexpr Point operator-(const Point rhs) const noexcept {
    Point tmp{0, 0};
    tmp.x = this->x - rhs.x;
    tmp.y = this->y - rhs.y;
    return tmp;
  }
  ld norm() { return x * x + y * y; }
};

double dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }   // 内積
double cross(Point a, Point b) { return a.x * b.y - a.y * b.x; } // 外積

static const int COUNTER_CLOCKWISE = 1;
static const int CLOCKWISE = -1;
static const int ONLINE_BACK = 2;
static const int ONLINE_FRONT = -2;
static const int ON_SEGMENT = 0;

int ccw(Point p0, Point p1, Point p2) {
  Point a = p1 - p0, b = p2 - p0;
  if (cross(a, b) > EPS)
    return COUNTER_CLOCKWISE;
  if (cross(a, b) < -EPS)
    return CLOCKWISE;
  if (dot(a, b) < -EPS)
    return ONLINE_BACK;
  if (a.norm() < b.norm())
    return ONLINE_FRONT;
  return ON_SEGMENT;
}

int main() {
  cin.tie(0);
  ios::sync_with_stdio(0);
  cout << fixed << setprecision(20);

  ll n, m;
  cin >> n >> m;
  ll A, B, C;
  cin >> A >> B >> C;
  ll a[n], b[n], c[n];
  rep(i, 0, n) cin >> a[i] >> b[i] >> c[i];

  ll K = A + B + C;
  ll ans = 0;
  rep(i, max(0LL, A - m), min(A + m, 101LL) + 1) {
    rep(j, max(0LL, B - m), min(B + m, 101LL) + 1) {
      ll k = K - i - j;
      if ((abs(A - i) + abs(B - j) + abs(C - k)) / 2 > m) {
        continue;
      }
      ll wins = 0;
      rep(s, 0, n) {
        ll win = 0;
        win += a[s] < i;
        win += b[s] < j;
        win += c[s] < k;
        if (win >= 2) {
          wins++;
        }
      }
      chmax(ans, wins);
    }
  }
  cout << ans << endl;

  return 0;
}

