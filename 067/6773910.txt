#include <bits/stdc++.h>

using namespace std;
using ll = long long;
template <class T>
using vec = vector<T>;
template <class T>
using vvec = vector<vector<T>>;
template <class T, class U>
using P = pair<T, U>;
#define pb push_back
#define eb emplace_back
#define em emplace
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define rep1(i, n) for (int i = 1; i < (int)(n + 1); i++)
#define repg(i, j, n) for (int i = (int)j; i < (int)(n); i++)
#define repi(i, n) for (int i = (int)(n)-1; i >= 0; i--)
#define repig(i, j, n) for (int i = (int)(n)-1; i >= (int)j; i--)

const ll INF = 1LL << 60;

int main() {
    /*
      dp[k][i][j]=頂点0..kのみを中継頂点として通って良いとした場合の、頂点iからjへの最短路長
      
      漸化式： 0..=kを通っていい場合の最短経路 ＝ min(kを通らない場合の最短経路 or kを通る場合の最短経路)
        dp[k+1][i][j] = min(dp[k][i][j], dp[k][i][k] + dp[k][k][j])
        
      初期化：
        i == j => 0
        辺(i,j) => w(e)
        それ以外 => INF

      実装上、dpは2次元でいける。
    */

    // 頂点番号：0..V
    int V, E;
    cin >> V >> E;
    vvec<ll> dp(V, vec<ll>(V, INF)); // 2次元配列をINFで初期化

    rep(i, E) {
        int a, b;
        ll w;
        cin >> a >> b >> w;
        dp[a][b] = w; // 入力値の重みで初期化
    }
    rep(v, V) dp[v][v] = 0; // 同じノード同士は0で初期化

    // メインの実装
    rep(k, V) {
        rep(i, V) {
            rep(j, V) { dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]); }
        }
    }

    bool neg = false;
    rep(v, V) if (dp[v][v] < 0) neg = true;
    if (neg)
        cout << "NEGATIVE CYCLE" << endl;
    else
        rep(i, V) {
            rep(j, V) {
                if (j) cout << " ";
                if (dp[i][j] < INF / 2)
                    cout << dp[i][j];
                else
                    cout << "INF";
            }
            cout << endl;
        }
}


