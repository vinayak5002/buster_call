#include <bits/stdc++.h>
using namespace std;
#define all(v) (v).begin(), (v).end()

// string getConsStr(string s1) {
//     int i=0;
//     while(true) {
//         string ans;
//         while(true) {
//             if(s1.at(i) == '"') {
//                 while(true) {
//                     i++;
//                     if(s1.at(i) == '"')
//                         break;
//                     ans.push_back(s1.at(i));
//                 }
//             } else {
//                 i++;
//             }
//             if(i >= s1.size())
//                 break;
//         }
//     }
// }

vector<string> split(string str, string del) {
    if(del == "")
        return {str};
    vector<string> result;
    string tstr = str + del;
    long l = tstr.length(), sl = del.length();
    string::size_type pos = 0, prev = 0;

    for(; pos < l && (pos = tstr.find(del, pos)) != string::npos;
        prev = (pos += sl)) {
        result.emplace_back(tstr, prev, pos - prev);
    }
    return result;
}
int main() {
    while(true) {
        int n;
        string s1, s2;
        cin >> s1;
        if(s1 == ".")
            break;
        cin >> s2;
        if(s1 == s2) {
            cout << "IDENTICAL" << endl;
        } else {
            auto x1 = split(s1, "\"");
            auto x2 = split(s2, "\"");
            if(x1.size() == x2.size()) {
                bool isDiff=false;
                for(int i = 0; i < x1.size(); i+=2){
                    if(x1[i]!=x2[i]){
                        isDiff=true;
                    }
                }
                int cnt=0;
                for(int i = 1; i < x1.size(); i+=2){
                    if(x1[i]!=x2[i]){
                        cnt++;
                    }
                }
                if(cnt!=1)isDiff=true;
                if(isDiff){
                    cout << "DIFFERENT" << endl;
                }else{
                    cout << "CLOSE" << endl;
                }
            }else{
                cout << "DIFFERENT" << endl;
            }
        }
    }
    return 0;
}
