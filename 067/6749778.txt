package main

import (
	"bufio"
	"fmt"
	"math"
	"os"
)

/*
Date:2022/6/23
Note:
*/

const size int = 1e3 + 1
const oo ll = 0x3f3f3f3f3f3f3f3f

type ll = int

var (
	n    int
	x, y [size]float64
	dp   [size][size]float64
)

func main() {
	dist := func(i, j int) float64 {
		return math.Hypot(x[i]-x[j], y[i]-y[j])
	}
	_, _ = fmt.Scan(&n)
	for i := 0; i < n; i++ {
		_, _ = fmt.Scan(&x[i], &y[i])
	}
	for j := 1; j < n; j++ {
		for i := 0; i < j; i++ {
			if i == 0 && j == 1 {
				dp[i][j] = dist(i, j)
			} else if i == j-1 {
				dp[i][j] = 1e15
				for k := 0; k < i; k++ {
					dp[i][j] = math.Min(dp[i][j], dp[k][i]+dist(k, j))
				}
			} else {
				dp[i][j] = dp[i][j-1] + dist(j-1, j)
			}
		}
	}
	ans := 1e15
	for i := 0; i < n-1; i++ {
		ans = math.Min(ans, dp[i][n-1]+dist(i, n-1))
	}
	fmt.Printf("%.8f ", ans)
}

var out = bufio.NewWriter(os.Stdout)
var in = bufio.NewReader(os.Stdin)

func readInt(out *ll) error {
	var ans, sign ll = 0, 1
	var read = false
	c, err := in.ReadByte()
	for ; err == nil && (c < '0' || '9' < c); c, err = in.ReadByte() {
		if c == '-' {
			sign = -sign
		}
	}
	for ; err == nil && '0' <= c && c <= '9'; c, err = in.ReadByte() {
		ans = ans<<3 + ans<<1 + ll(c-'0')
		read = true
	}
	if read {
		*out = ans * sign
		return nil
	}
	return err
}

func min(ar ...ll) ll {
	minn := ar[0]
	for _, x := range ar {
		if minn > x {
			minn = x
		}
	}
	return minn
}

func max(ar ...ll) ll {
	maxn := ar[0]
	for _, x := range ar {
		if maxn < x {
			maxn = x
		}
	}
	return maxn
}

func abs(i, j ll) ll {
	ans := i - j
	if ans < 0 {
		ans = -ans
	}
	return ans
}

