#pragma GCC ta g("avx2")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#define DEBUG
#ifdef DEBUG
template <class T, class U>
ostream &operator<<(ostream &os, const pair<T, U> &p) {
    os << '(' << p.first << ',' << p.second << ')';
    return os;
}
template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
    os << '{';
    for(int i = 0; i < (int)v.size(); i++) {
        if(i) { os << ','; }
        os << v[i];
    }
    os << '}';
    return os;
}
void debugg() { cerr << endl; }
template <class T, class... Args>
void debugg(const T &x, const Args &... args) {
    cerr << " " << x;
    debugg(args...);
}
#define debug(...)                                                             \
    cerr << __LINE__ << " [" << #__VA_ARGS__ << "]: ", debugg(__VA_ARGS__)
#define dump(x) cerr << __LINE__ << " " << #x << " = " << (x) << endl
#else
#define debug(...) (void(0))
#define dump(x) (void(0))
#endif
using namespace std;
typedef long long ll;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<char> vc;
typedef vector<string> vs;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef pair<ll,ll> P;
typedef pair<int,int> pii;
typedef vector<P> vpl;
typedef tuple<ll,ll,ll,ll> tapu;
#define rep(i,n) for(int i=0; i<(n); i++)
#define REP(i,a,b) for(int i=(a); i<(b); i++)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
template<typename T1,typename T2> inline bool chmin(T1 &a,T2 b){
	if(a>b){
		a = b; return true;
	}
	else return false;
}
template<typename T1,typename T2> inline bool chmax(T1 &a,T2 b){
	if(a<b){
		a = b; return true;
	}
	else return false;
}
template<typename T> inline void print(T &a){
    int sz = a.size();
    for(auto itr = a.begin(); itr != a.end(); itr++){
		cout << *itr;
        sz--;
        if(sz) cout << " ";
	}
    cout << "\n";
}
template<typename T1,typename T2> inline void print2(T1 a, T2 b){
	cout << a << " " << b << "\n";
}
template<typename T1,typename T2,typename T3> inline void print3(T1 a, T2 b, T3 c){
	cout << a << " " << b << " " << c << "\n";
}
void mark() {cout << "#" << "\n";}
ll pcount(ll x) {return __builtin_popcountll(x);}
// #include <atcoder/convolution>
// using namespace atcoder;
const int inf = (1<<30)-1;
const ll linf = 1LL<<61;
const int MAX = 1020000;
int dy[8] = {0,1,0,-1,1,-1,-1,1};
int dx[8] = {-1,0,1,0,1,-1,1,-1};
const double pi = acos(-1);
const double eps = 1e-9;
const int mod = 1e9 + 7;
//const int mod = 998244353;

struct edge{
	int to, cost, type;
};

int main(){
	while(1){
		int n,p,q; cin >> n >> p >> q;
		if(!n) break;
		vector<vector<edge>> G(n);
		rep(i,p){
			int u,v,w; cin >> u >> v >> w; u--; v--;
			G[u].push_back({v,w,0});
			G[v].push_back({u,w,0});
		}
		rep(i,q){
			int u,v,w; cin >> u >> v >> w; u--; v--;
			G[u].push_back({v,w,1});
			G[v].push_back({u,w,1});
		}
		{
			vector<vvl> dpw(n,vvl(40,vl(2,linf)));
			dpw[0][0][0] = 0;
			priority_queue<tapu,vector<tapu>,greater<tapu>> pq;
			pq.emplace(0,0,0,0);
			while(!pq.empty()){
				auto [d,u,tax,state] = pq.top(); pq.pop();
				if(d > dpw[u][tax][state]) continue;
				for(auto v : G[u]){
					ll nd = d + v.cost;
					int nt = tax;
					if(state == 0 && v.type == 1) nt++;
					if(nt >= 40) continue;
					if(chmin(dpw[v.to][nt][v.type], nd)){
						pq.emplace(nd,v.to,nt,v.type);
					}
				}
			}
			ll ans1 = linf;
			rep(i,40) rep(j,2) chmin(ans1, dpw[n-1][i][j] + (1LL<<i) - 1);
			if(ans1 != linf){
				cout << ans1 % mod << "\n";
				continue;
			}
		}
		{
			vector<vpl> dp(n,vpl(2,{linf,linf}));
			dp[0][0] = {0,0};
			priority_queue<tapu,vector<tapu>,greater<tapu>> pq;
			pq.emplace(0,0,0,0);
			while(!pq.empty()){
				auto [dtax,dwalk,u,state] = pq.top(); pq.pop();
				if(P(dtax,dwalk) > dp[u][state]) continue;
				for(auto v : G[u]){
					P nd{dtax,dwalk};
					nd.second += v.cost;
					if(state == 0 && v.type == 1){
						nd.first++;
					}
					if(chmin(dp[v.to][v.type], nd)){
						pq.emplace(nd.first,nd.second,v.to,v.type);
					}
				}
			}
			P res = min(dp[n-1][0], dp[n-1][1]);
			if(res.first == linf){
				cout << -1 << "\n";
				continue;
			}
			ll ans2 = res.second % mod;
			ll p = 1;
			rep(i,res.first){
				(ans2 += p) %= mod;
				p = p * 2 % mod;
			}
			cout << ans2 << "\n";
		}
		
	}
}
