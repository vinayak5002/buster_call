#include <bits/stdc++.h>

#include <atcoder/all>
#define rep(x, y) for (int x = 0; x < y; x++)
#define rrep(x, y) for (int x = y - 1; x >= 0; x--)
#define orep(x, y) for (int x = 1; x <= y; x++)
#define ll long long
template <class T>
bool chmax(T &a, const T &b) {
  return a < b ? (a = b, 1) : 0;
}
template <class T>
bool chmin(T &a, const T &b) {
  return b < a ? (a = b, 1) : 0;
}
using namespace std;
using namespace atcoder;
using mint = modint1000000007;
using P = pair<int, int>;

bool operator>(const vector<P> &a, const vector<P> &b) {
  if (a.size() != b.size()) {
    return a.size() > b.size();
  }
  rep(i, a.size()) {
    if (a[i].first != b[i].first) {
      return a[i].first > b[i].first;
    }
    if (a[i].second != b[i].second) {
      return a[i].second > b[i].second;
    }
  }
  return true;
}

vector<P> rotate(const vector<P> &a) {
  vector<P> res(a.size());
  rep(i, a.size()) {
    res[i].first = -a[i].second;
    res[i].second = a[i].first;
  }
  return res;
}

vector<P> reverse(const vector<P> &a) {
  int n = a.size();
  vector<P> res(n);
  rep(i, n) {
    res[n - 1 - i].first = a[i].first;
    res[n - 1 - i].second = a[i].second;
  }
  rrep(i, n) {
    res[i].first -= res[0].first;
    res[i].second -= res[0].second;
  }
  return res;
}

bool func() {
  int n;
  cin >> n;
  if (n == 0) return false;

  map<vector<P>, vector<int>> ma;

  int m;
  cin >> m;
  vector<P> original(m);
  rep(i, m) cin >> original[i].first >> original[i].second;
  rrep(i, m) {
    original[i].first -= original[0].first;
    original[i].second -= original[0].second;
  }

  rep(i, n) {
    int m;
    cin >> m;
    vector<P> path(m);
    rep(j, m) cin >> path[j].first >> path[j].second;
    rrep(j, m) {
      path[j].first -= path[0].first;
      path[j].second -= path[0].second;
    }
    ma[path].push_back(i);
  }

  vector<int> ans;
  rep(i, 4) {
    copy(ma[original].begin(), ma[original].end(), back_inserter(ans));
    copy(ma[reverse(original)].begin(), ma[reverse(original)].end(),
         back_inserter(ans));
    original = rotate(original);
  }

  sort(ans.begin(), ans.end());
  ans.erase(std::unique(ans.begin(), ans.end()), ans.end());

  for (auto a : ans) {
    cout << a + 1 << endl;
  }

  cout << "+++++" << endl;
  return true;
}
int main() {
  while (func()) {
  }
}
