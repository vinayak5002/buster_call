// https://algo-logic.info/segment-tree/

#include <iostream>
#include <cmath>
#include <vector>
#include <iterator>
#include <algorithm>

static const int INF = 2147483647;

class Rmq{
    private:
        std::vector<int> D;
        int n;
    public:
        Rmq(int n_){
            n = 1;
            while(n < n_) n *= 2;
            for(int i=0; i< 2*n-1; ++i) this->D.push_back(INF);
        }

        void update(int k, int x){
            k += n-1;
            this->D[k] = x;
            while(k > 0){
                k = (k-1)/2;
                this->D[k] = std::min(this->D[k*2+1],this->D[k*2+2]);
            }
        }

        int findMin(int a, int b){
            return query(a, b+1, 0, 0, this->n);
        }

        int query(int a, int b, int k, int l, int r){
            if (r<=a || b<=l) //case1
                return INF;
            if (a<=l && r<=b) //case2
                return D[k];

            int vl = query(a, b, k*2 + 1, l, (l + r)/2);
            int vr = query(a, b, k*2 + 2, (l + r)/2, r);
            return std::min(vl, vr);
        }

};

int main(){
    int n_, q, com, x, y;
    std::cin >> n_ >> q;
    Rmq rmq = Rmq(n_);

    for(int i=0; i<q; ++i){
        std::cin >> com >> x >> y;
        if(com == 0) rmq.update(x, y);
        else std::cout << rmq.findMin(x, y) << std::endl;

    }
}
