#include<stdio.h>
#define N 100
#define WH 0
#define GR 1
#define BL 2
//未探索ならwh,探索中ならgr,探索済みならbl

int color[N], found[N], finish[N];//colorは各節点の探索状態、foundは各節点の探索開始時間、finishは各節点の探索済み時間
int matrix[N][N], n;//matrixは隣接行列,nは入力した節点数
int time;//時間変数

void dfs_Visit(int x)
{
    int col;//colomn in matrix

    color[x] = GR;//探索開始
    found[x] = ++time;//time+1 を foundに保存
    for(col = 0; col < n; col++)
    {
        if(matrix[x][col] == 0)//xとcolが連結していないならskip
        {
            continue;//skip this loop
        }
        if(color[col] == WH)//xとcolが連結し、colが未探索ならVisit(col)
        {
            dfs_Visit(col);
        }
    }
    color[x] = BL;//xは探索済み
    finish[x] = ++time;//time+1 を finishに保存
}

void dfs()
{
    int i;//for loop
    time = 0;//time初期化
    for(i = 0; i < n; i++)
    {
        color[i] = 0;//color初期化
    }
    for(i = 0; i < n; i++)
    {
        if(color[i] == WH)//全ての未探索節点に対してVisit
        {
            dfs_Visit(i);
        }
    }
}



int main(void)
{
    int i,j;//i,j for loop
    int index1, index2, n_adj;//index1は行、index2は列、 n_adjは今の点が隣接する点の個数
    scanf("%d",&n);//nを読み取る

    for(i = 0; i < n ; i++)
    {
        for(j = 0 ; j < n; j++)
        {
            matrix[i][j] = 0;//行列の初期化
        }
    }

    for(i = 0; i < n ; i++)//入力を読み取る
    {
        scanf("%d %d",&index1, &n_adj);//各行に対して、一つ目の数は今の点の番号(行列の行)、二つ目は今の点が隣接する点の個数
        index1--;//実はindex1の値はiと同じである
        for(j = 0; j < n_adj; j++)//今の点が隣接する点を読み取る
        {
            scanf("%d",&index2);
            index2--;
            matrix[index1][index2] = 1;//該当するところを1にする
        }
    }//index1, index2から１を減らすのは入力が1から始まり、行列は0から始まるからである

    dfs();//探索開始

    for(i = 0; i < n ; i++)
    {
        printf("%d %d %d\n", i + 1, found[i], finish[i]);//節点番号、探索開始時間、探索済み時間を出力
    }

    return 0;
}
