#include<bits/stdc++.h>
using namespace std;
using ll=long long;

vector<int> make_dice(int t,int f){
    vector<int> dice(6);
    dice[0]=f,dice[2]=7-f;
    dice[4]=t,dice[5]=7-t;
    if(f==1&&t==2) dice[1]=1;
    if(f==1&&t==3) dice[1]=3;
    if(f==1&&t==4) dice[1]=5;
    if(f==1&&t==5) dice[1]=2;
    if(f==2&&t==1) dice[1]=4;
    if(f==2&&t==3) dice[1]=1;
    if(f==2&&t==4) dice[1]=6;
    if(f==2&&t==6) dice[1]=3;
    if(f==3&&t==1) dice[1]=2;
    if(f==3&&t==2) dice[1]=6;
    if(f==3&&t==5) dice[1]=1;
    if(f==3&&t==6) dice[1]=5;
    if(f==4&&t==1) dice[1]=5;
    if(f==4&&t==2) dice[1]=1;
    if(f==4&&t==5) dice[1]=6;
    if(f==4&&t==6) dice[1]=2;
    if(f==5&&t==1) dice[1]=3;
    if(f==5&&t==3) dice[1]=6;
    if(f==5&&t==4) dice[1]=1;
    if(f==5&&t==6) dice[1]=4;
    if(f==6&&t==2) dice[1]=4;
    if(f==6&&t==3) dice[1]=2;
    if(f==6&&t==4) dice[1]=5;
    if(f==6&&t==5) dice[1]=3;
    dice[3]=7-dice[1];
    return dice;
}

vector<int> rotate(vector<int> dice,int d){
    if(d==0){
        return {dice[4],dice[1],dice[5],dice[3],dice[2],dice[0]};
    }
    if(d==1){
        return {dice[0],dice[4],dice[2],dice[5],dice[3],dice[1]};
    }
    if(d==2){
        return {dice[5],dice[1],dice[4],dice[3],dice[0],dice[2]};
    }
    if(d==3){
        return {dice[0],dice[5],dice[2],dice[4],dice[1],dice[3]};
    }
    return {};
}

void solve(){
    while(1){
        map<pair<int,int>,int> num,height;
        vector<int> dx={0,-1,0,1},dy={-1,0,1,0};
        int n;
        cin>>n;
        if(n==0){
            break;
        }
        vector<int> t(n),f(n);
        for(int i=0;i<n;i++){
            cin>>t[i]>>f[i];
        }
        for(int i=0;i<n;i++){
            vector<int> dice=make_dice(t[i],f[i]);
            int x=0,y=0,h=height[{x,y}]+1;
            while(1){
                vector<pair<int,int>> possible_move;
                for(int d=0;d<4;d++){
                    if(dice[d]>=4&&h>height[{x+dx[d],y+dy[d]}]+1){
                        possible_move.push_back({dice[d],d});
                    }
                }
                if(possible_move.size()==0){
                    num[{x,y}]=dice[4];
                    height[{x,y}]=h;
                    break;
                }
                sort(possible_move.begin(),possible_move.end(),greater<pair<int,int>>());
                int rd=possible_move[0].second;
                x+=dx[rd],y+=dy[rd];
                h=height[{x,y}]+1;
                dice=rotate(dice,rd);
            }
        }
        vector<int> ans(7,0);
        for(int x=-200;x<=200;x++){
            for(int y=-200;y<=200;y++){
                ans[num[{x,y}]]++;
            }
        }
        for(int i=1;i<=6;i++){
            cout<<ans[i]<<" ";
        }
        cout<<endl;
    }
    return;
}

int main(){
    solve();
    return 0;
}
