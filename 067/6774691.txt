#include<bits/stdc++.h>
using namespace std;


int bfs(vector<vector<int>>&field,int sx,int sy){
   if(field.at(sx).at(sy) == 0)return 0;
   
   int dx[8] = {1,0,-1,0,1,1,-1,-1};
   int dy[8] = {0,1,0,-1,1,-1,-1,1};
   
   queue<pair<int,int>>que;
   

   que.push(make_pair(sx,sy));
   field.at(sx).at(sy) = 0;

   while(que.size()){
      pair<int,int>p = que.front();
      que.pop();
      for(int i = 0;i < 8;i++){
         int nx = p.first + dx[i]; int ny = p.second + dy[i];

         if(0 <= nx && nx < field.size() && 0 <= ny && ny < field.at(0).size() && field.at(nx).at(ny) == 1){
            que.push(make_pair(nx,ny));
            field.at(nx).at(ny) = 0;
         }
      }
   }
   return 1;
} 


int main(){
   int w,h;
   cin >> w >> h;
   
   while(!(w ==0 && h==0)){
      
      vector<vector<int>>field(h,vector<int>(w));
      for(int i = 0;i < h;i++){
         for(int j = 0;j < w;j++){
            cin >> field.at(i).at(j);
         }
      }
      int answer = 0;
      for(int i = 0;i < h;i++){
         for(int j = 0;j < w;j++){
            answer += bfs(field,i,j);
         }
      }
      cout << answer << endl;
      int nw,nh;
      cin >> nw >> nh;
      w = nw;
      h = nh;
   }
}


