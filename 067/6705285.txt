#include <stdio.h>
#include <stdlib.h>

struct node{
  struct node *right;
  struct node *left;
  struct node *parent;
  int key;
};
typedef struct node * Node;
#define NIL NULL

Node root;

Node treeMinimum(Node x){
  if(x->left == NIL){
    return x;
  }else{
    return treeMinimum(x->left);
  }
}

Node treeSearch(Node u, int k){
  if(u == NIL || u->key == k){
    return u;
  }else if(u->key < k){
    return treeSearch(u->right,k);
  }else{
    return treeSearch(u->left,k);
  }
}

Node treeSuccessor(Node x){
  if(x->right != NIL){
    return treeMinimum(x->right);
  }

  Node y = x->parent;
  while(y != NIL && x == y->right){
    x = y;
    y = y->parent;
  }
  return y;

}

void treeDelete(Node z){
  Node y; 
  Node x; 
  if(z->left == NIL && z->right == NIL){
    Node p = z->parent;
    if(p->left == z){
      p->left = NIL;
    }else{
      p->right = NIL;
    }
    free(z);
  }else if(z->left == NIL){
    Node p = z->parent;
    if(p->left == z){
      p->left = z->right;
      z->right->parent = p;
    }else{
      p->right = z->right;
      z->right->parent = p;
    }
    free(z);
  }else if(z->right == NIL){
    Node p = z->parent;
    if(p->left == z){
      p->left = z->left;
      z->left->parent = p;
    }else{
      p->right = z->left;
      z->left->parent = p;
    }
    free(z);
  }else{
    Node y = treeSuccessor(z);
    z->key = y->key;
    treeDelete(y);
  }
}

void insert(int k){
  Node y = NIL;
  Node x = root;
  Node z;

  z = malloc(sizeof(struct node));
  z->key = k;
  z->left = NIL;
  z->right = NIL;

  while(x != NIL){
    y = x;
    if(z->key < x->key){
      x = x->left;
    }else{
      x = x->right;
    }
  }
  z->parent = y;

  if(y == NIL) {
    root = z;
  }else if(z->key < y->key){
    y->left = z;
  }else{
    y->right = z;
  }

}

void inorder(Node u){
  if(u->left != NIL){
    inorder(u->left);
  }
  printf(" %d",u->key);
  if(u->right != NIL){
    inorder(u->right);
  }
}
void preorder(Node u){
  printf(" %d",u->key);
  if(u->left != NIL){
    preorder(u->left);
  }
  if(u->right != NIL){
    preorder(u->right);
  }
}


int main(){
  int n, i, x;
  char com[20];
  scanf("%d", &n);

  for ( i = 0; i < n; i++ ){
    scanf("%s", com);
    if ( com[0] == 'f' ){
      scanf("%d", &x);
      Node t = treeSearch(root, x);
      if ( t != NIL ) printf("yes\n");
      else printf("no\n");
    } else if ( com[0] == 'i' ){
      scanf("%d", &x);
      insert(x);
    } else if ( com[0] == 'p' ){
      inorder(root);
      printf("\n");
      preorder(root);
      printf("\n");
    } else if ( com[0] == 'd' ){
      scanf("%d", &x);
      treeDelete(treeSearch(root, x));
    }
  }

  return 0;
}




