#include<bits/stdc++.h>
using namespace std;
#define MOD 1000000007
//#define MOD 998244353
#define INF 1e18 + 10
#define EPS 1e-9
#define F first
#define S second

#define debug(x) cout<<x<<endl;
#define repi(i,x,n) for(int i=x;i<n;i++)
#define rep(i,n) repi(i,0,n)
#define lp(i,n) repi(i,0,n)
#define repn(i,n) for(int i=n;i>=0;i--)
#define int long long
#define endl "\n"

typedef pair<int,int> PII;
typedef pair<int,string> PIS;
typedef pair<string,int> PSI;

template <typename T>
bool chmax(T &a, const T& b) {
  if (a < b) {
    a = b; 
    return true;
  }
  return false;
}

template <typename T>
bool chmin(T &a, const T& b) {
  if (a > b) {
    a = b;
    return true;
  }
  return false;
}


template <typename T>
struct segtree{
  using F = function< T (T, T) >;
  int size;
  vector<T> seg;
  const F f;
  const T M1;
  segtree(int n,const F f,const T &M1) : f(f), M1(M1) {
    size = 1;
    while(size < n) size<<=1;
    seg.assign(2*size,M1);
  }

  void set(int k,const T &x){
    seg[k+size]=x;
  }
  
  void build(){
    for(int k=size-1;k>0;k++){
      seg[k]=f(seg[2*k + 0],seg[2*k + 1]);
    }
  }

  T update(int a){
    
    a+=size;
    T ret=seg[a];
    while(a>>=1){
      if(ret.F<seg[a].F){
	ret=seg[a];
      }
      
    }
  }

  T query(int a,int b,const T &x){
    T L=x,R=x;
    if(a==b) seg[a+size]=x;
    for(a+=size,b+=size;a<b;a>>=1,b>>=1){
      if(a&1){
	seg[a] = f(L,seg[a]);
	a++;
      }
      if(b&1){
	b--;
	seg[b] = f(seg[b],R);
      }
    }
    return f(L,R);
  }

  T operator[](const int &k) const{
    return seg[k+size];
  }

  
  template< typename C >
  int find_subtree(int a, const C &check, T &M, bool type) {
    while(a < size) {
      T nxt = type ? f(seg[2 * a + type], M) : f(M, seg[2 * a + type]);
      if(check(nxt)) a = 2 * a + type;
      else M = nxt, a = 2 * a + 1 - type;
    }
    return a - size;
  }


  template< typename C >
  int find_first(int a, const C &check) {
    T L = M1;
    if(a <= 0) {
      if(check(f(L, seg[1]))) return find_subtree(1, check, L, false);
      return -1;
    }
    int b = size;
    for(a += size, b += size; a < b; a >>= 1, b >>= 1) {
      if(a & 1) {
        T nxt = f(L, seg[a]);
        if(check(nxt)) return find_subtree(a, check, L, false);
        L = nxt;
        ++a;
      }
    }
    return -1;
  }

  template< typename C >
  int find_last(int b, const C &check) {
    T R = M1;
    if(b >= size) {
      if(check(f(seg[1], R))) return find_subtree(1, check, R, true);
      return -1;
    }
    int a = size;
    for(b += size; a < b; a >>= 1, b >>= 1) {
      if(b & 1) {
        T nxt = f(seg[--b], R);
        if(check(nxt)) return find_subtree(b, check, R, true);
        R = nxt;
      }
    }
    return -1;
  }
};

PII calc(const PII &a,const PII &b){
  if(a.F>b.F) return a;
  else return b;
}
      

signed main(){
  cin.tie(0);	
  ios::sync_with_stdio(false);
  int n,q;
  cin>>n>>q;
  PII ini={-1,2147483647};
  segtree<PII> seg(n,calc,ini);
  rep(i,q){
    int a,b,c;
    cin>>a;
    if(a==0){
      int d;
      cin>>b>>c>>d;
      seg.query(b,c,{i,d});
    }else{
      cin>>b;
      cout<<seg[b].S<<endl;
    }
    /*rep(i,1){
      cout<<seg[i].F<<" "<<seg[i].S<<endl;
      }*/
  }


  


  return 0;
}

