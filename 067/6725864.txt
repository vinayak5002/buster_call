class Queue(object):
  def __init__(self):
    self.__list = []
    self.head = 0
    self.tail = 0
    #self.count = 0

  def get(self, item):
    self.__list[int(time)]

  def enqueue(self, item):
    self.__list.append(item)

    self.tail += 1
    #print(f"head={self.head}, tail={self.tail}, Queue = {self.__list}")

  def dequeue(self):
    if self.head == self.tail:
      self.head = 0
      self.tail = 0

    elif self.tail - self.head == 1:
      rtn = self.__list.pop(0)
      #self.__list.pop(self.head - self.count)
      #self.count += 1
      self.head = 0
      self.tail = 0
    elif self.tail - self.head > 1:
      rtn = self.__list.pop(0)
      #self.__list.pop(self.head - self.count)
      #self.count += 1
      self.head += 1
    #print(f"head={self.head}, tail={self.tail}, Queue = {self.__list}, rtn = {rtn}")
    return rtn

  def is_empty(self):
    return self.__list ==[]

  def size(self):
    return len(self.__list)

if __name__ == "__main__":
  Q = Queue()
  #s.enqueue(5)
  #s.dequeue()

for s in range(1):
  s = input()
  a = s.split()
  n = int(a[0])
  q = int(a[1])
  #print(n, q)

b = [[]* 2]* n # 2: p1 〜 p5 一列目、int(a[0]): p1 〜 p5 行数
cnt = 0
for s in range(n):
  tmp = input()
  b[cnt - 1] = []
  b[cnt - 1] = tmp.split()
  name = b[cnt - 1][0]
  time = b[cnt - 1][1]
  #print(name, int(time))
  #d1 = {'k1': 1, 'k2': 2}
  d = {'name' : name, 'time' : time}
  Q.enqueue(d)
  #{“name”:プロセス名,”t”:処理時間}をキューに追加する(enqueue)。
  cnt += 1
  
print("")
i = n
elaps = 0 #経過時間
while i > 0:
  p = Q.dequeue()
  tmp_name = p.get("name")
  tmp_time = int(p.get("time"))
  #print(tmp_name, tmp_time)
  i -= 1 #dequeueする度にマイナス1

  c = min(tmp_time, q)
  elaps += c
  tmp_time -= c
  if tmp_time > 0:
    Q.enqueue({'name' : tmp_name, 'time' : tmp_time})
    i += 1 #enqueueする度にプラス1
  else:
    print(tmp_name, elaps)

