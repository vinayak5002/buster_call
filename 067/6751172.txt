import sys
class Graph():
    def __init__(self,size):
        self.size = size
        self.v = []
        self.e = []
        for i in range(self.size):
            self.v.append(None)
            self.e.append([])
    def addVertex(self,v):
        if(self.v[v.id] == None):
            self.v[v.id] = v
        else:
            self.v[v.id].id = v.id
            self.v[v.id].cost = v.cost
        return self.v[v.id]
    def addEdge(self,start,end,cost):
        start = self.addVertex(start)
        end = self.addVertex(end)
        newEdge = Edge(start,end)
        newEdge.setCost(cost)
        edges = self.e[start.id]
        edges.append(newEdge)
        self.e[start.id] = edges
    def getVertex(self):
        return self.v
    def getAdj(self,v):
        adj = []
        for e in self.e[v.id]:
            adj.append(e.end)
        return adj   
    def setShortestCost(self,start_id):
        self.notFinished = []
        self.finish_flag = []
        for v in self.v:
            v.setCost(sys.maxsize)
            self.notFinished.append(v)
            self.finish_flag.append(False)
        self.v[start_id].cost = 0
        while(self.notFinished != []):
            self.dijkstra()
        del self.notFinished
        del self.finish_flag
    def dijkstra(self):
        min_i = 0
        for i in range(len(self.notFinished)):
            if(self.notFinished[min_i].cost > self.notFinished[i].cost):
                min_i = i
        min_v = self.notFinished[min_i]
        self.notFinished.pop(min_i)
        self.finish_flag[min_v.id] = True
        for e in self.e[min_v.id]:
            newcost = min_v.cost + e.cost
            if(e.end.cost > newcost and self.finish_flag[e.end.id] == False):
                e.end.cost = newcost
            
class Vertex():
    def __init__(self,id = 0):
        self.id = id
        self.cost = 0
    def setCost(self,cost):
        self.cost = cost
    def __repr__(self):
        return str(self.id)
class Edge():
    def __init__(self,start,end):
        self.start = start
        self.end = end
        self.cost = 0
    def setCost(self,cost):
        self.cost = cost
    def __str__(self):
        return "[start,end] = ["+str(self.start.id)+","+str(self.end.id)+"]"

n = int(input())
graph = Graph(n)
for i in range(n):
    inp = list(map(int,input().split()))
    id = inp[0]
    adj_id = inp[2::2]
    cost = inp[3::2]
    for j in range(inp[1]):
        graph.addEdge(Vertex(id),Vertex(adj_id[j]),cost[j])

graph.setShortestCost(start_id=0)
for v in graph.getVertex():
    print(v,v.cost)

