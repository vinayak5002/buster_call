#include <iostream>
#include <vector>
#include <array>
#include <cmath>
#include <functional>

std::vector<int> simple_eratosthenes(const long long size) {
    std::vector<bool> data;
    data.resize(size);
    for (int i = 0; i < data.size(); i++) {
	data.at(i) = false;
    }
    data[0] = true;
    data[1] = true;
    for (long long s = 2; s*s <= size;) {
	for (long long i = s*s; i < size; i+=s) {
	    data[i] = true;
	}
	s++;
	while (data[s]) {
	    s++;
	}
    }
    std::vector<int> result;
    for (size_t i = 0; i < data.size(); i++) {
	if (!data[i]) {
	    result.push_back(i);
	}
    }
    return result;
}

std::vector<unsigned long long> factor(const std::vector<int>& primes, const unsigned long long num) {
    std::vector<unsigned long long> result;
    unsigned long long tmp = num;
    int idx = 0;
    while (tmp != 1) {
	for (int i = idx; i < primes.size(); i++) {
	    if (tmp%primes.at(i) == 0) {
		result.push_back(primes.at(i));
		tmp/=primes.at(i);
		idx = i;
		break;
	    }
	}
	if (tmp == num) {
	    result.push_back(tmp);
	    tmp/=tmp;
	}
    }
    return result;
}

int main() {
    auto primes = simple_eratosthenes(std::sqrt(std::pow(10,15)));
    while (true) {
	unsigned long long num;
	std::cin >> num;
	if (num == 0) {
	    break;
	}
	auto fct = factor(primes, num);
	unsigned long long a = 1, b = 1, c = 1;
	for (int i = fct.size()-1; i >= 0; i--) {
	    if (a <= b && a <= c) {
		a*=fct.at(i);
	    } else if (b <= a && b <= c) {
		b*=fct.at(i);
	    } else if (c <= a && c <= b) {
		c*=fct.at(i);
	    }
	}
	std::cout << a+b+c << std::endl;
    }
    return 0;
}

