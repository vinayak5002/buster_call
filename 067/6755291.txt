class UnionFind(object):
    def __init__(self, size):
        self.parent = [-1] * size

    def union(self, x, y):
        x, y = self.root(x), self.root(y)
        if x == y:
            return False
        if self.parent[x] > self.parent[y]:
            x, y = y, x
        self.parent[x] += self.parent[y]
        self.parent[y] = x
        return True

    def root(self, x):
        if self.parent[x] < 0:
            return x
        self.parent[x] = self.root(self.parent[x])
        return self.parent[x]

    def same(self, x, y):
        return self.root(x) == self.root(y)

    def size(self, x):
        return - self.parent[self.root(x)]

    def group_count(self):
        return [p < 0 for p in self.parent].count(True)


def solve(N):
    if N == 1:
        return 0
    data = []
    for _ in range(N):
        d = list(map(int, input().split()))
        data.append(set(d[1:]))

    collectable = [{i} for i in range(N)]
    for day in range(1, 31):
        available = []
        for id, person in enumerate(data):
            if day in person:
                available.append(id)
        for i in available:
            for j in available:
                collectable[i] |= collectable[j]
        for collection in collectable:
            if len(collection) == N:
                return day
    return -1


def main():
    result = []
    while True:
        N = int(input())
        if N == 0:
            break
        result.append(solve(N))
    print(*result, sep="\n")


if __name__ == '__main__':
    main()
