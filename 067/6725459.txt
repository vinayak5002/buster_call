#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <cstring>
#include <numeric>
#include <algorithm>
#include <functional>
#include <fstream>
#include <array>
#include <map>
#include <queue>
#include <time.h>

#include <limits.h>
#include <set>
#include <stack>
#include <random>
#include <complex>
#include <unordered_map>
#include <assert.h>
#include <bitset>
#include <unordered_set>
#define rep(i, s, n) for (int i = (s); (n) > i; i++)
#define REP(i, n) rep(i, 0, n)
#define RANGE(x, a, b) (min(a, b) <= (x) && (x) <= max(a, b)) // hei
#define DUPLE(a, b, c, d) (RANGE(a, c, d) || RANGE(b, c, d) || RANGE(c, a, b) || RANGE(d, a, b))
#define INCLU(a, b, c, d) (RANGE(a, c, d) && (b, c, d))
#define PW(x) ((x) * (x))
#define ALL(x) (x).begin(), (x).end()
#define RALL(x) (x).rbegin(), (x).rend()
#define MODU 998244353LL
#define bitcheck(a, b) ((a >> b) & 1)
#define bitset(a, b) (a |= (1 << b))
#define bitunset(a, b) (a &= ~(1 << b))
#define MP(a, b) make_pair((a), (b))
#define Manh(a, b) (abs((a).first-(b).first) + abs((a).second - ((b).second))
#define pritnf printf
#define scnaf scanf
#define itn int
#define PI 3.141592653589

#define izryt bool
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
template <typename A, size_t N, typename T>
void Fill(A (&array)[N], const T &val)
{
    std::fill((T *)array, (T *)(array + N), val);
}

//[a, b)
#define Getsum(ar, a, b) (ar[b] - ar[a])
#define INF 10000000000000000LL

struct Edge
{
    int from, to;
    ll w;
    bool operator<(const Edge &rhs) const
    {
        return MP(w, MP(from, to)) < MP(rhs.w, MP(rhs.from, rhs.to));
    }
};
typedef vector<vector<Edge>> Graph;
typedef unsigned long long ull;

#define isValid(y, x) (y >= 0 && y < n && x >= 0 && x < m)

ll mod_pow(ll x, ll n, ll mod)
{
    ll res = 1;
    while (n > 0)
    {
        if (n & 1)
            res = (res * x) % mod;
        x = (x * x) % mod;
        n >>= 1;
    }
    return res;
}

int main ()  {
    int n;
    cin >> n;

    vector<set<int>> stonesV(n), stonesH(n);
    vector<int> as(n);
    REP(i,n) {
        int r,c;
        cin >> r >> c;
        r--;c--;
        stonesH[r].insert(c);
        stonesV[c].insert(r);

        as[r] = c;
    }
    
    REP(i,n) {
        if(stonesH[i].size() != 1 || stonesV[i].size() != 1) {
            cout << "-1" << endl;
            return 0;
        }
    }


    vector<int> al(n);
    int count = 0;
    REP(start, n) {
        if(al[start] == 0) {
            count++;
            int cur = start;
            do{
                al[cur] = 1;
                cur = as[cur];
            } while(cur != start);
        }
    }

    cout << n - count<< endl;

    return 0;
}

