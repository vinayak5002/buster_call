#include <iostream>
#include <vector>
using namespace std;
using ll = long long;
const ll INF = (1ll << 31) - 1;

struct LazySegmentTree {
  int n;
  vector<ll> node, lazy;

  LazySegmentTree(vector<ll> vec) {
    int siz = vec.size();
    n = 1;
    while (n < siz) {
      n *= 2;
    }
    node.assign(2 * n - 1, INF);
    lazy.assign(2 * n - 1, INF);
    for (int i = 0; i < siz; i++) 
      node.at(i + n - 1) = vec.at(i);
    for (int i = n - 2; i >= 0; i--)
      node.at(i) = min(node.at(i * 2 + 1), node.at(i * 2 + 2));
  }

  void eval(int k) {
    if (lazy.at(k) < INF) {
      node.at(k) = lazy.at(k);
      if (k < n - 1) {
	lazy.at(k * 2 + 1) = lazy.at(k);
	lazy.at(k * 2 + 2) = lazy.at(k);
      }
    }
    lazy.at(k) = INF;
  }
  
  void update(int a, int b, ll x, int k = 0, int l = 0, int r = -1) {
    eval(k);
    if (r < 0)
      r = n;
    if (a >= r || b <= l)
      return;
    else if (a <= l && b >= r) {
      lazy.at(k) = x;
      eval(k);
    }
    else {
      update(a, b, x, k * 2 + 1, l, (l + r) / 2);
      update(a, b, x, k * 2 + 2, (l + r) / 2, r);
      node.at(k) = min(node.at(k * 2 + 1), node.at(k * 2 + 2));
    }
  }

  ll getmin(int a, int b, int k = 0, int l = 0, int r = -1) {
    eval(k);
    if (r < 0)
      r = n;
    if (a >= r || b <= l)
      return INF;
    else if (a <= l && b >= r)
      return node.at(k);
    else {
      ll v1 = getmin(a, b, k * 2 + 1, l, (l + r) / 2);
      ll v2 = getmin(a, b, k * 2 + 2, (l + r) / 2, r);
      return min(v1, v2);
    }
  }
};

int main() {
  int n, q;
  cin >> n >> q;
  vector<ll> vec(n, INF);
  LazySegmentTree ruq(vec);
  for (int i = 0; i < q; i++) {
    int c, s, t;
    cin >> c >> s >> t;
    t++;
    if (c == 0) {
      ll x;
      cin >> x;
      ruq.update(s, t, x);
    }
    else {
      cout << ruq.getmin(s, t) << endl;
    }
  }
}
