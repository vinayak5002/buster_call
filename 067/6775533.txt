#include <bits/extc++.h>

using namespace std;

#define rep(i,n) for(int i=0;i<(n);++i)
#define reps(i,s,n) for(int i=(s);i<=(n);++i)
#define all(x) begin(x), end(x)
#define Fixed fixed << setprecision(12)
#define updiv(a,b) ((a + b - 1) / b)
constexpr int32_t INF  = 0x3f3f3f3f;
constexpr int64_t LINF = 0x3f3f3f3f3f3f3f3fLL;
constexpr int mod = 1e9+7;
// constexpr int mod = 998244353;

template <class Func>
class FixPoint : Func {
public:
    explicit constexpr FixPoint(Func&& f) noexcept : Func(forward<Func>(f)) {}

    template <class... Args>
    constexpr decltype(auto) operator()(Args&&... args) const {
        return Func::operator()(*this, std::forward<Args>(args)...);
    }
};

template <class Func>
static inline constexpr decltype(auto) makeFixPoint(Func&& f) noexcept {
    return FixPoint<Func>{forward<Func>(f)};
}

template <class A, class B> inline bool chmax(A &a, const B &b) { return b > a && (a = b, true); }
template <class A, class B> inline bool chmin(A &a, const B &b) { return b < a && (a = b, true); }

template <class T> using max_heap = priority_queue<T>;
template <class T> using min_heap = priority_queue<T,vector<T>,greater<T> >;
template <class A, class B> using umap = unordered_map<A,B>;
template <class A, class B> using uset = unordered_set<A,B>;

template <class T> using Set = __gnu_pbds::tree<T, __gnu_pbds::null_type, less<T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;

template <class T> inline void bye(T x) { cout << x << '\n'; exit(0); }

constexpr int dx[] = {1, 0, -1, 0, 1, 1, -1, -1};
constexpr int dy[] = {0, -1, 0, 1, 1, -1, -1, 1};


signed main() {
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);

    int n;
    while (cin >> n, n) {
        vector<vector<int> > ok(30);
        vector<vector<bool> > schedule(n, vector<bool>(30));
        for (int i = 0; i < n; ++i) {
            int f;
            cin >> f;
            for (int j = 0; j < f; ++j) {
                int x;
                cin >> x;
                ok[x - 1].emplace_back(i);
                schedule[i][x - 1] = true;
            }
        }

        int res = INF;

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < 30; ++j) {
                vector<vector<bool> > visited(n, vector<bool>(30));
                queue<pair<int, int> > que;

                visited[i][j] = true;
                que.emplace(i, j);
                while (!que.empty()) {
                    auto [cn, ct] = que.front();
                    que.pop();
                    if (schedule[cn][ct]) {
                        for (auto nxt : ok[ct]) {
                            if (!visited[nxt][ct]) {
                                visited[nxt][ct] = true;
                                que.emplace(nxt, ct);
                            }
                        }
                    }
                    if (ct != 0 && !visited[cn][ct - 1]) {
                        visited[cn][ct - 1] = true;
                        que.emplace(cn, ct - 1);
                    }
                }
                int cnt = 0;
                for (int k = 0; k < n; ++k) {
                    for (int l = 0; l < 30; ++l) {
                        if (visited[k][l]) {
                            ++cnt;
                            break;
                        }
                    }
                }
                if (cnt == n) {
                    chmin(res, j + 1);
                }
            }
        }

        if (res == INF) {
            cout << -1 << '\n';
        } else {
            cout << res << '\n';
        }
    }

    return(0);
}
