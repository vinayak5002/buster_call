#include <bits/stdc++.h>
using namespace std;
using ll = long long;

const ll sup = 1e15;

vector<int> input(int n) {
    vector<int> res(n);
    for (auto& x : res) cin >> x;
    return res;
}

inline int clamp(int x, int v) {
    if (x + v > 255) return 255;
    if (x + v < 0) return 0;
    return x + v;
}

inline ll p2(int x) {
    return x*x;
}

ll solve(int n, int m) {
    auto cs = input(m), xs = input(n);
    vector<vector<ll>> dp(256, vector<ll>(n + 1, sup));
    dp[128].front() = 0;

    for (int j = 0 ; j < n ; j++) for (int i = 0 ; i <= 255 ; i++) {
        if (dp[i][j] == sup) continue;
        for (auto c : cs) dp[clamp(i, c)][j + 1] = min(dp[clamp(i, c)][j + 1], dp[i][j] + p2(xs[j] - clamp(i, c)));
    }

    ll res = sup;
    for (int i = 0 ; i <= 255 ; i++) res = min(res, dp[i].back());
    return res;
}

int main() {
    while(1) {
        int n, m; cin >> n >> m;
        if (!n) break;
        cout << solve(n, m) << endl;
    }
}

