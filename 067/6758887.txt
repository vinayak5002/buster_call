#include <bits/stdc++.h>
using namespace std ;
#define MAX 1000000001
#define NIL -2000000002
#define INF 1e9
#define MAXN 20
typedef long long int ll;
const int debug = 0 ; 
const int debug1 = 0 ; 
#define REP(i,n) for(int i=0; i<(int)n; i++)

struct vertex {
    int con;
    vector<pair<int,int>> edge; // cost, to

};
int DP[1<<MAXN][MAXN] ; // DP[Sの部分集合][最後に訪問する頂点]
int G[MAXN][MAXN];
vertex VS[MAXN];

ll V, E;
ll ans;
int S;

void init() {
    REP (i,1<<MAXN) REP (j,MAXN) {DP[i][j] = INF; }
    REP (i,MAXN) REP (j,MAXN) {G[i][j]=INF;}
    // G[0][0]=0;
    DP[0][0] = 0 ;
}


int calc_cost(int u, int v){
    if (u==v) {return 0;}
    int res = INF;
    for (int i=0; i<VS[u].edge.size() ; i++) {
        if ( VS[u].edge[i].second == v ) {res= VS[u].edge[i].first;  } 
    }
    // printf( "calc_cost : %d -> %d : %d  \n", u, v, res );
    return res;
}   

int rec() {  
    // 集合Sの要素をすべて使って0から最後にvに至る経路のうち最小コスト
    // ただし最初の 0 を含まない。
    // 最終的に　DP[(1<<V)-1][0] がほしい。
    for (int k=0; k< (1<<V) ; k++) { //kは集合Sを表す
        int res = INF;
        for (int v=0 ; v<V ; v++) { //vは到着点
            if ( k & (1<<v) ) { continue; } // kにvが含まれていたら重複訪問

            for (int u=0; u<V; u++) { //uは経由地点
                int tmp ;
                DP [k | (1<< v)][v] = min (DP [k | (1<< v)][v] , DP[k][u] +G[u][v] ) ; 
                //各uに対してtmpを求めて、最小値をとる。
            }
            //printf( "DP[%d][%d] = %d \n", k | (1<< l), l, res ); 
        }
    } 
    return 0;
}

int main(){
    cin >> V >> E ;
    //頂点の番号は 0からV-1; 
    ll tmp ,tmp2 , tmp3; 
    init();
    for (int i=1 ; i<= E ; i++){
        cin >> tmp >> tmp2 >> tmp3 ;
        VS[tmp].edge.push_back(make_pair(tmp3, tmp2));
        G[tmp][tmp2]=tmp3;
    }
    rec();
    ans = DP[(1<<V)-1][0] ;
    if (ans == INF) {ans = -1;}
    printf("%lld\n",ans ) ;
    
    /*REP (i, 1<<V) {
        cout << i << " : " ;
        REP (j, V) { cout << DP[i][j]<< " "; }
        cout << endl; }
    */
    return 0;
}


