#include <bits/stdc++.h>
#define rep(i,cc,n) for(int i=cc;i<=n;++i)
#define drep(i,cc,n) for(int i=cc;i>=n;--i)
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }
const long long INF = 1LL <<60;
const long long  MOD = 1000000007;
typedef long long ll;
using namespace std;

/* dijkstra(G,s,dis)
    入力：グラフ G, 開始点 s, 距離を格納する dis
    計算量：O(|E|log|V|)
    副作用：dis が書き換えられる
*/

struct edge {
    ll to;
    ll cost;
};
using Graph = vector<vector<edge>>;
using P = pair<ll, int>;

void dijkstra(const Graph &G, int s, vector<ll> &dist){
    int n = G.size();
    dist.resize(n, INF); //スタート地点からすべての頂点に対しての距離を無限で初期化
    priority_queue<P, vector<P>, greater<P>> pq; //まだ決定していない頂点に対しての距離が小さい順に並べる
    dist[s] = 0; //スタート地点の距離を0にする
    pq.emplace(dist[s], s);

    //キューが空っぽになったら全部の頂点が決定する
    while(!pq.empty()){
        P p = pq.top();
        pq.pop();

        int v = p.second;
        if(dist[v] < p.first) continue;
        for(auto &e : G[v]){
            if(dist[e.to] > dist[v] + e.cost){
                dist[e.to] = dist[v] + e.cost;
                pq.emplace(dist[e.to], e.to);
            }
        }
    }
}

int main(){
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);

    int v, e, r;
    cin >> v >> e >> r;

    Graph g(v);
    for(int i = 0; i < e; i++){
        int s, t, d;
        cin >> s >> t >> d;

        g[s].push_back({t, d});
    }

    vector<ll> dist;
    dijkstra(g, r, dist);

    for(int i = 0; i < v; i++){
        if(dist[i] == INF) cout << "INF" << endl;
        else cout << dist[i] << endl;
    }

    return 0;
} 
