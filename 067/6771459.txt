#include <bits/stdc++.h>
using namespace std;

namespace {
    const int SIZE = 3;
    const int SIZE2 = SIZE * SIZE;
    vector<int> target(SIZE2);  // the target grid
    vector<vector<int>> md = vector<vector<int>>(SIZE2, vector<int>(SIZE2));
    // {UP, DOWN, LEFT, RIGHT}
    const vector<int> dx = {0, 0, -1, 1};
    const vector<int> dy = {1, -1, 0, 0};
}  // namespace

struct Puzzle {
    vector<int> grid = vector<int>(SIZE2);
    int blank;  // the index which points the blank cell
    int g = 0;  // the cost from the start node to this node
    int h;      // the estimated cost from this node to the goal node
    int f;      // the estimated total cost from the start node to the goal node
    bool operator>(const Puzzle &other) const {
        // compare the estimated total cost
        return f > other.f;
    }
};

// set the target grid
void setTarget();
// convert vector<int> to uint64_t
uint64_t vtoull(vector<int> &grid);
// Breadth-first Search
int dfs(Puzzle puzzle, int limit);

int main() {
    // get the default grid
    Puzzle input;
    for (int i = 0; i < SIZE2; i++) {
        cin >> input.grid.at(i);
        if (input.grid.at(i) == 0) {
            input.grid.at(i) = SIZE2;
            input.blank = i;
        }
    }

    setTarget();

    // output the answer
    int ans;
    for (int i = 0; i < 30; i++) {
        ans = dfs(input, i);
        if (ans != -1) {
            break;
        }
    }
    if (ans == -1) {
        cout << "There is no solution." << endl;
    } else {
        cout << ans << endl;
    }
}

void setTarget() {
    for (int i = 0; i < SIZE2; i++) {
        target.at(i) = i + 1;
    }
    return;
}

uint64_t vtoull(vector<int> &grid) {
    // consider a vector as a SIZE2-decimal number
    uint64_t num = 0;
    for (int i = 0; i < SIZE2; i++) {
        num *= SIZE2;
        num += grid.at(i);
    }
    return num;
}

int dfs(Puzzle puzzle, int limit) {
    unordered_set<uint64_t> us;
    stack<Puzzle> s;
    Puzzle tmp1, tmp2;
    // us.insert(vtoull(puzzle.grid));
    s.push(puzzle);

    while (!s.empty()) {
        tmp1 = s.top();
        s.pop();
        if (tmp1.grid == target) {
            return tmp1.g;
        }
        int blank_x = tmp1.blank % SIZE;
        int blank_y = tmp1.blank / SIZE;
        for (int i = 0; i < 4; i++) {
            int next_x = blank_x + dx[i];
            int next_y = blank_y + dy[i];
            if (next_x < 0 || next_y < 0 || next_x >= SIZE || next_y >= SIZE) {
                // if the blank cell is NOT in the grid
                continue;
            }
            tmp2 = tmp1;
            tmp2.blank = next_x + next_y * SIZE;
            swap(tmp2.grid.at(tmp1.blank), tmp2.grid.at(tmp2.blank));
            // if (!us.count(vtoull(tmp2.grid))) {
            //  if the grid is NOT already checked
            tmp2.g++;
            if (tmp2.g <= limit) {
                // us.insert(vtoull(tmp2.grid));
                s.push(tmp2);
            }
        }
    }
    return -1;
}
