def maxHeapify(dic,i):
    global H
    largest=i
    if 2*i in dic:
        l=2*i
        if l<=H and dic[l]>dic[i]:
            largest=l
        else:
            largest=i
    if 2*i+1 in dic:
        r=2*i+1
    #左の子、自分、右の子で最大のnodeを選ぶ
        if r<=H and dic[r]>dic[largest]:
            largest=r
    if not largest==i:
        dic[i],dic[largest]=dic[largest],dic[i]
        maxHeapify(dic,largest)
        
# def buildMaxHeap(dic,H):
#     for i in range(H//2,0,-1):
#         maxHeapify(dic,i,H)
#     return dic


# def dicbuild(A,H):
#     dic={}
#     for i in range(H):
#         dic[i+1]={"key":A[i]}

#     for i in range(1,H+1):
#         if 2*i in dic:
#             dic[i]["left"]=2*i
#         if 2*i+1 in dic:
#             dic[i]["right"]=2*i+1
#         if i//2 in dic:
#             dic[i]["parent"]=i//2
#     return dic

def heapIncreaseKey(A,i,key):
    A[i]=key
    while i>1 and A[i//2]<A[i]:
        A[i],A[i//2]=A[i//2],A[i]
        i=i//2
    return A
        
def extractMax(A):
    global H
    max=A[1]
    A[1]=A[H]
    H-=1
    maxHeapify(A,1) #maxheapに直す
    return max
        
# buildMaxHeap(dic) #maxHeap構築

# S,x=input().split()
# x=int(x)
H=0
A={}
while True:
    S=input().split()
    # print(S)
    if S[0]=="end":
        break
    elif S[0]=="insert":
        H+=1
        A=heapIncreaseKey(A,H,int(S[1]))
        # print(A)
    else:
        # dic=buildMaxHeap(dicbuild(A,H),H) #maxHeap構築
        # # print(dic)
        # print(dic[1]["key"])
        # H=H-1
        # A.remove(dic[1]["key"])
        # dic={}
        print(extractMax(A))
