#include <bits/stdc++.h>
using namespace std;
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define reps(i,start,end) for(int i = start; i < (int)(end); i++)
#define ll long long
#define print(t) cout << t << endl
#define all(a)  (a).begin(),(a).end()
// << std::fixed << std::setprecision(0)
const ll INF = 1LL << 60;

template<class T> void chmin(T& a, T b){
 if(a > b){
  a = b;
 }
}

template<class T> void chmax(T& a, T b){
 if(a < b){
  a = b;
 }
}

template<class Tp>
bool zero (const Tp &x) {
    return x == 0;
}

template<class Tp, class... Args>
bool zero (const Tp &x, const Args& ...args) {
    return zero(x) and zero(args...);
}

bool isFind(queue<pair<int,int>> u, pair<int,int> s){
  bool isThere = false;
  rep(i,(int)u.size()){
    int k = u.front().first;
    int l = u.front().second;
    u.pop();
    u.push({k,l});
    if(k == s.first && l == s.second){
      isThere = true;
    }
  }
  return isThere;
}

int main(){
  while(true){
    int w,h;
    cin >> w >> h;
    if(zero(w,h))break;
    vector<vector<char>> tile(h+2,vector<char> (w+2));
    rep(i,h+2){
      rep(j,w+2){
        if(i == 0 || i == h+1){
          tile[i][j] = '#';
        }else if(j == 0 || j == w+1){
          tile[i][j] = '#';
        }else{
          cin >> tile[i][j];
        }
      }
    }
    int cnt = 0;
    rep(i,h+2){
      rep(j,w+2){
        if(tile[i][j] == '@'){
          queue<pair<int,int>> que;
          que.push({i,j});
          while(!que.empty()){
            int Hnow = que.front().first;
            int Wnow = que.front().second;
            que.pop();

            if(tile[Hnow+1][Wnow] == '.'){
              if(!isFind(que,{Hnow+1,Wnow})){
                que.push({Hnow+1,Wnow});
              }
            }
            if(tile[Hnow-1][Wnow] == '.'){
              if(!isFind(que,{Hnow-1,Wnow})){
                que.push({Hnow-1,Wnow});
              }
            }
            if(tile[Hnow][Wnow+1] == '.'){
              if(!isFind(que,{Hnow,Wnow+1})){
                que.push({Hnow,Wnow+1});
              }
            }
            if(tile[Hnow][Wnow-1] == '.'){
              if(!isFind(que,{Hnow,Wnow-1})){
                que.push({Hnow,Wnow-1});
              }
            }
            tile[Hnow][Wnow] = '#';
            cnt++;
          }
        }
      }
    }
    cout << cnt << endl;
  }

}

