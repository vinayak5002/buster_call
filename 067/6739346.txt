# A complete working Python
# program to demonstrate all
# insertion methods
 
# A linked list node
class Node:
 
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None
 
# Class to create a Doubly Linked List
class DoublyLinkedList:
 
    # Constructor for empty Doubly Linked List
    def __init__(self):
        self.head = None
 
    # Given a reference to the head of a list and an
    # integer, inserts a new node on the front of list
    def push(self, new_data):
 
        # 1. Allocates node
        # 2. Put the data in it
        new_node = Node(new_data)
 
        # 3. Make next of new node as head and
        # previous as None (already None)
        new_node.next = self.head
 
        # 4. change prev of head node to new_node
        if self.head is not None:
            self.head.prev = new_node
 
        # 5. move the head to point to the new node
        self.head = new_node
 
    # Given a node as prev_node, insert a new node after
    # the given node
    def insertAfter(self, prev_node, new_data):
 
        # 1. Check if the given prev_node is None
        if prev_node is None:
            print("the given previous node cannot be NULL")
            return
 
        # 2. allocate new node
        # 3. put in the data
        new_node = Node(new_data)
 
        # 4. Make net of new node as next of prev node
        new_node.next = prev_node.next
 
        # 5. Make prev_node as previous of new_node
        prev_node.next = new_node
 
        # 6. Make prev_node ass previous of new_node
        new_node.prev = prev_node
 
        # 7. Change previous of new_nodes's next node
        if new_node.next:
            new_node.next.prev = new_node
 
    # Given a reference to the head of DLL and integer,
    # appends a new node at the end
    def append(self, new_data):
 
        # 1. Allocates node
        # 2. Put in the data
        new_node = Node(new_data)
 
        # 3. This new node is going to be the last node,
        # so make next of it as None
        # (It already is initialized as None)
 
        # 4. If the Linked List is empty, then make the
        # new node as head
        if self.head is None:
            self.head = new_node
            return
 
        # 5. Else traverse till the last node
        last = self.head
        while last.next:
            last = last.next
 
        # 6. Change the next of last node
        last.next = new_node
 
        # 7. Make last node as previous of new node
        new_node.prev = last
 
        return
 
    # This function prints contents of linked list
    # starting from the given node
    def printList(self, node):
 
        print("\nTraversal in forward direction")
        while node:
            print(" {}".format(node.data))
            last = node
            node = node.next
 
        print("\nTraversal in reverse direction")
        while last:
            print(" {}".format(last.data))
            last = last.prev
 
# Driver program to test above functions
 
 
# Start with empty list
llist = DoublyLinkedList()
 
# Insert 6. So the list becomes 6->None
llist.append(6)
 
# Insert 7 at the beginning.
# So linked list becomes 7->6->None
llist.push(7)
 
# Insert 1 at the beginning.
# So linked list becomes 1->7->6->None
llist.push(1)
 
# Insert 4 at the end.
# So linked list becomes 1->7->6->4->None
llist.append(4)
 
# Insert 8, after 7.
# So linked list becomes 1->7->8->6->4->None
llist.insertAfter(llist.head.next, 8)
 
print ("Created DLL is: ")
llist.printList(llist.head)
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)
Output
Created DLL is: 
Traversal in forward direction 
 1  7  8  6  4 
Traversal in reverse direction 
 4  6  8  7  1 
Alternate method by using constructor call
However there is another method which uses constructor call inside the node class in order to minimize the memory allocation work. It also minimizes the number of lines of code.

// Divyansh Mishra --> divyanshmishra101010
#include <iostream>
using namespace std;
 
 
class node{
    public:
    node* prev;
    int data;
    node* next;
     
     
    node(int value){  // A constructor is called here
        prev=NULL;      // By default previous pointer is pointed to NULL
        data=value;   // value is assigned to the data
        next=NULL;    // By default next pointer is pointed to NULL
    }
};
 
 
void insert_at_head(node* &head, int value){
     
    node* n = new node(value);
    n->next=head;
 
    if(head!=NULL){
        head->prev=n;
    }
     
    head=n;
}
 
 
void insert_at_tail(node* &head, int value){
     
    if(head==NULL){
        insert_at_head(head, value);
        return;
    }
     
    node* n = new node(value);
    node* temp=head;
         
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
    n->prev=temp;
}
 
 
void display(node* head){
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" --> ";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}
 
 
int main()
{
    node* head=NULL;      // declaring an empty doubly linked list
   
    insert_at_tail(head,1);
    insert_at_tail(head,2);
    insert_at_tail(head,3);
    insert_at_tail(head,4);
    insert_at_tail(head,5);
     
      cout<<"After insertion at tail: ";
    display(head);
     
      cout<<"After insertion at head: ";
    insert_at_head(head,0);
     
    display(head);
      return 0;
