#include<iostream>
#include <fstream>
#include <queue>
using namespace std;
int H,W,N;
char map [100][100];
struct pos{
	int x;
	int y;
};
struct status{
	int x;
	int y;
	int step;
	int number;
};
pos fmap[20];
queue <status> que;
int dir[2][4]={{0,1,0,-1},{1,0,-1,0}};


int bfs(){
	while (que.size()>0){

	status cstatus=que.front();
	status tstatus;
	que.pop();
	if (cstatus.x==fmap[cstatus.number].x&&cstatus.y==fmap[cstatus.number].y) return cstatus.step;
	int nx,ny;
	for (int i=0;i<4;i++){
		nx=cstatus.x+dir[0][i];
		ny=cstatus.y+dir[1][i];
		if (nx>=0&&nx<H&&ny>=0&&ny<W){
			if (map[nx][ny]!='X'){
				tstatus=cstatus;
				tstatus.x=nx;
				tstatus.y=ny;
				tstatus.step++;
				que.push(tstatus);
			}
		}
	} 
	}
	return -1;
}
int main(){
//	ifstream fin ("I.1");
	cin>>H>>W>>N;
	int result=0;

	for (int i=0;i<H;i++){
		for (int j=0;j<W;j++){
			cin>>map[i][j];
			int temp=map[i][j]-'0';
			if (temp <= N&&temp>=0){
				fmap[temp].x=i;
				fmap[temp].y=j;
			}else{
				if (map[i][j]=='S'){
					fmap[0].x=i;
					fmap[0].y=j;
					map[i][j]='.';
				}
			}
			
		}
	}
	
	for (int i=0;i<N;i++){
		while (que.size()) que.pop();
		status tstatus;
		tstatus.x=fmap[i].x;
		tstatus.y=fmap[i].y;
		tstatus.step=0;
		tstatus.number=i+1;
		que.push(tstatus);
		int tresult=bfs();
		result+=tresult;
	}
	cout<<result<<endl;

}
