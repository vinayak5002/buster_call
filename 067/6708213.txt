#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
using Pair = pair<ll, int>;
using Graph = vector<vector<Pair>>;
using PQueue = priority_queue<Pair, vector<Pair>, greater<Pair>>;
using Grid = vector<vector<char>>;
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }



int main()
{
    constexpr ll INF = 1e+10;
    int V, E, r;
    cin >> V >> E >> r;
    Graph graph(V);
    for (int i=0; i<E; i++) {
        int s, t, d;
        cin >> s >> t >> d;
        graph[s].push_back({d, t});
    }
    vector<ll> dist(V, INF);
    PQueue pq;
    dist[r] = 0;
    pq.push({0, r});
    while (!pq.empty()) {
        auto top = pq.top(); pq.pop();
        auto s = top.second;
        auto dist_s = top.first;
        if (dist[s] < dist_s)
            continue;
        for (auto pr : graph[s]) {
            auto t = pr.second;
            auto dist_t = dist_s + pr.first;
            if (dist[t] <= dist_t)
                continue;
            dist[t] = dist_t;
            pq.push({dist_t, t});
        }
    }
    for (int i=0; i<V; i++) {
        auto dist_i = dist[i];
        if (dist_i == INF)
            cout << "INF" << endl;
        else
            cout << dist_i << endl;
    }
}
