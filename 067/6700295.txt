#include <bits/stdc++.h>
#ifdef __LOCAL
#define DBG(X) cout << #X << " = " << (X) << endl;
#define SAY(X) cout << (X) << endl;
#else
#define DBG(X)
#define SAY(X)
#define NDEBUG
#endif

using namespace std;

typedef int_fast32_t int32;
typedef int_fast64_t int64;

const int32 inf = 1e9+7;
const int32 MOD = 1000000007;
const int64 llinf = 1e18;

#define YES(n) cout << ((n) ? "YES\n" : "NO\n"  )
#define Yes(n) cout << ((n) ? "Yes\n" : "No\n"  )
#define POSSIBLE(n) cout << ((n) ? "POSSIBLE\n" : "IMPOSSIBLE\n"  )
#define ANS(n) cout << (n) << "\n"
#define REP(i,n) for(int64 i=0;i<(n);++i)
#define FOR(i,a,b) for(int64 i=(a);i<(b);i++)
#define FORR(i,a,b) for(int64 i=(a);i>=(b);i--)
#define all(obj) (obj).begin(),(obj).end()
#define rall(obj) (obj).rbegin(),(obj).rend()
#define fi first
#define se second
#define pb(a) push_back(a)
typedef pair<int32,int32> pii;
typedef pair<int64,int64> pll;

template<class T> inline bool chmax(T& a, T b) {
  if (a < b) { a = b; return true; } return false;
}
template<class T> inline bool chmin(T& a, T b) {
  if (a > b) { a = b; return true; } return false;
}

int32 dy[4] = {0,1,0,-1};
int32 dx[4] = {1,0,-1,0};

void solve(int32 n, int32 m){
  vector<string> c(n);
  REP(i,n)cin >> c[i];
  vector<vector<int32>> visited(n, vector<int32>(m,-1));

  int32 cury = 0, curx = 0;
  int32 curd = 0;
  auto valid = [&](int32 y, int32 x){
    if(y < 0 || n <= y)return false;
    if(x < 0 || m <= x)return false;
    if(c[y][x] == '#')return false;
    return true;
  };
  int32 treasure = 0;
  while(true){
    curd = (curd + 1) % 4;
    REP(_,4){
      if(valid(cury + dy[curd], curx + dx[curd])){
        cury += dy[curd];
        curx += dx[curd];
        break;
      }
      curd = (curd + 3) % 4;
    }
    // cout << cury << " " << curx << endl;
    if(visited[cury][curx] >= 0){
      if(visited[cury][curx] != treasure){
        YES(false);
        return;
      }
    }
    if(cury == n-1 && curx == 0)++treasure;
    if(cury == n-1 && curx == m-1)++treasure;
    if(cury == 0 && curx == m-1)++treasure;
    visited[cury][curx] = treasure;
    if(cury == 0 && curx == 0)break;
  }
  YES(visited[0][0] == 3);
}

int main(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  while(true){
    int32 n,m;
    cin >> n >> m;
    if(n == 0)break;
    solve(n,m);
  }
  return 0;
}
