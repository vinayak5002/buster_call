import sys
input = lambda: sys.stdin.readline().rstrip()

class FenwickTree:
  # interface: 0-indexed

  def __init__(self, n: int):
    "Build a new fenwick tree. / O(N)"
    assert 0 <= n <= 10**8
    self._size = n
    self._tree = [0] * (n+1)
    self._depth = n.bit_length()

  def _sum(self, i):
    "Return sum([0, i)) of a. / O(logN)"
    i += 1  # 1-indexed
    ret = 0
    while i > 0:
      ret += self._tree[i]
      i -= i & -i
    return ret

  def sum(self, l: int, r: int):
    "Return sum([l, r)] of a. / O(logN)"
    assert 0 <= l <= r <= self._size
    return self._sum(r-1) - self._sum(l-1)

  def get(self, i: int):
    "Return a[i]. / O(logN)"
    return self.sum(i, i)

  def add(self, p: int, x) -> None:
    "Add x to a[p]. / O(logN)"
    p += 1  # 1-indexed.
    assert 1 <= p <= self._size
    while p <= self._size:
      self._tree[p] += x
      p += p & -p
    return

  def lower_bound(self, w):
    "Return 累積和がx以上になる最小のindexと、その直前までの累積和 / O(logN)"
    '''
    FenwickTreeを集合として管理
    fw.add(a, 1) -> 集合にaを追加
    fw.add(a,-1) -> 集合からaを削除
    fw.sum(a)    -> aが何番目に小さいかを返す
    fw.lower_bound(w) -> w番目に小さい要素aを変える
    '''
    acc, pos = 0, 0
    for i in range(self._depth, -1, -1):
      k = pos + (1 << i)
      if k <= self.size and acc + self._tree[k] < w:
        acc += self._tree[k]
        pos += 1 << i
    return pos+1, acc

  def __str__(self) -> str:
    # あとで改善する バグは認める
    ret = [[] for _ in range(self._depth+1)]
    for i in range(1, self._size+1):
      a = (i & -i).bit_length()
      print(a, ret)
      print(i, self._tree)
      ret[a].append(' '*(i & -i))
      ret[a].append(self._tree[i])
    s = '<FenwickTree> [\n'
    for i in ret[::-1]:
      s += ''.join(map(str, i)) + '\n'
    return s

class FenwickTreeRangeUpdate:
  "need Class FenwickTree."

  def __init__(self, n):
    self.bit0 = FenwickTree(n+1)
    self.bit1 = FenwickTree(n+1)

  def add(self, p: int, x):
    self.bit0.add(p, x)

  def add(self, l: int, r: int, x):
    r += 1
    self.bit0.add(l, -x*l)
    self.bit0.add(r, x *r)
    self.bit1.add(l, x)
    self.bit1.add(r, -x)

  def sum(self, l: int, r: int):
    r += 1
    return self.bit0._sum(r) + self.bit1._sum(r) * r - self.bit0._sum(l) - self.bit1._sum(l) * l

#  -----------------------  #

n, q = map(int, input().split())

fw = FenwickTreeRangeUpdate(n)

for _ in range(q):
  qu = list(map(int, input().split()))
  if qu[0] == 0:
    s, t, x = qu[1:]
    s -= 1
    t -= 1
    fw.add(s, t, x)
  else:
    i = qu[1]
    i -= 1
    print(fw.sum(i, i))

