class Graph():
    def __init__(self,size):
        self.size = size
        self.v = []
        self.e = []
        for i in range(size): self.v.append(Vertex(i))
    def addVertex(self,v):
        self.v[v.id] = v
    def addEdge(self,v1,v2,cost):
        self.addVertex(v1)
        self.addVertex(v2)
        for i in range(len(self.e)):
            if(cost < self.e[i].cost):
                self.e.insert(i,Edge(v1,v2,cost))
                return
        self.e.append(Edge(v1,v2,cost))
    def getVertex(self):
        return self.v
    def getEdge(self):
        return self.e
    def getAdj(self,v):
        adj = []
        for e in self.e:
            if(v == e.v1): adj.append(e.v2)
            elif(v == e.v2): adj.append(e.v1)
        return adj
    def existClosedPath(self,e):
        self.visited=[]
        for i in range(self.size): self.visited.append(False)
        exist = self.existClosedPath_search(e.v1,start=e.v1,end=e.v2)
        del self.visited
        return exist
    def existClosedPath_search(self,v,start,end):
        self.visited[v.id] = True
        adjs = self.getAdj(v)
        exist = False
        for adj in adjs:
            if(adj == end): return True
            if(self.visited[adj.id] == False):
                exist = self.existClosedPath_search(adj,start,end)
                if(exist): break
        return exist
            
            

class Vertex():
    def __init__(self,id):
        self.id = id
    def __str__(self):
        return "id="+str(self.id)
    def __repr__(self):
        return str(self.id)
    def __eq__(self,other):
        return self.id == other.id
    def __int__(self):
        return self.id

class Edge():
    def __init__(self,v1,v2,cost):
        self.v1 = v1
        self.v2 = v2
        self.cost = cost
    def __str__(self):
        return "[v1,v2]=["+str(self.v1.id)+","+str(self.v2.id)+"] cost="+str(self.cost)

n = int(input())
graph1 = Graph(n)
for i in range(n):
    inp = list(map(int,input().split()))
    for j in range(i+1,n):
        if(inp[j] >= 0):
            graph1.addEdge(Vertex(i),Vertex(j),cost=inp[j])

graph2 = Graph(n)
for e in graph1.getEdge():
    if(graph2.existClosedPath(e) == False):
        graph2.addEdge(e.v1,e.v2,e.cost)
    if(len(graph2.v)-len(graph2.e)== 1):
        break

sum = 0
for e in graph2.getEdge():
    sum += e.cost
print(sum)

