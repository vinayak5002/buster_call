#include <stdio.h>

#define MAX 100

typedef struct
{
    char suit;
    int number;
} data;

data A[MAX];
data B[MAX];
data C[MAX];
int n;

//標準入力からデータを受け取る関数
void getdata()
{
    int i, u;
    char v;
    //データ数の取得
    scanf("%d", &n);

    //データの格納
    for (i = 0; i < n; i++)
    {
        for (int j = 0; j < 2; j++)
        {
            scanf("%c %d", &v, &u);

            A[i].suit = v;
            A[i].number = u;
            B[i].suit = v;
            B[i].number = u;
            C[i].suit = v;
            C[i].number = u;
        }
    }
}

void stablechcker(int k)
{
    int i, j;
    int t = 0;
    int count = 0;
    int check1, check2;
    data ms1[MAX], ms2[MAX];

    for (i = 0; i < n; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            if (C[i].number == C[j].number)
            {
                count++;
                ms1[t].suit = C[i].suit;
                ms1[t].number = C[i].number;
                ms2[t].suit = C[j].suit;
                ms2[t].number = C[j].number;
            }
        }
    }
    if (count != 0)
    {
        for (i = 0; i < n; i++)
        {
            for (j = 0; j < count; j++)
            {
                if (k == 1)
                {
                    if (A[i].number == ms1[j].number && A[i].suit == ms1[j].suit)
                    {

                        check1 = i;
                    }
                    else if (A[i].number == ms2[j].number && A[i].suit == ms2[j].suit)
                    {
                        check2 = i;
                    }
                }
                else
                {
                    if (B[i].number == ms1[j].number && B[i].suit == ms1[j].suit)
                    {

                        check1 = i;
                    }
                    else if (B[i].number == ms2[j].number && B[i].suit == ms2[j].suit)
                    {
                        check2 = i;
                    }
                }
            }
        }
    }
    if (check1 < check2)
    {
        printf("Stable\n");
    }
    else
    {
        printf("Not stable\n");
    }
}

/*
int isStable(int k)
{
    int i, j, a, b;

    for (i = 0; i < n; i++)
    {
        for (j = i + 1; j < n; j++)
        {
            for (a = 0; a < n; a++)
            {
                for (b = a + 1; b < n; b++)
                {
                    if (k == 1)
                    {
                        if (A[i].number == A[j].number && A[i].number == C[b].number && A[j].number == C[a].number)
                        {
                            return 0;
                        }
                    }
                    else
                    {
                        if (B[i].number == B[j].number && B[i].number == C[b].number && B[j].number == C[a].number)
                        {
                            return 0;
                        }
                    }
                }
            }
        }
    }

    return 1;
}
*/

//結果の出力
void output()
{
    int i;

    for (i = 0; i < n; i++)
    {
        printf("%c%d", A[i].suit, A[i].number);
        if (i != n - 1)
        {
            printf(" ");
        }
    }
    printf("\n");
    /*
    if (isStable(1) == 0)
    {
        printf("Stable\n");
    }
    else
    {
        printf("Not stable\n");
    }*/
    stablechcker(1);
    for (i = 0; i < n; i++)
    {
        printf("%c%d", B[i].suit, B[i].number);
        if (i != n - 1)
        {
            printf(" ");
        }
    }
    printf("\n");
    /*
    if (isStable(2) == 0)
    {
        printf("Stable\n");
    }
    else
    {
        printf("Not stable\n");
    }*/
    stablechcker(2);
}

//バブルソート
bubbleSort()
{
    int flag = 1;
    data s;
    //ソートが必要なくなるまで繰り返し
    while (flag)
    {
        flag = 0;
        //右隣の値が自分より大きいなら入れ替えを行う
        for (int j = n - 1; j > 0; j--)
        {
            if (A[j].number < A[j - 1].number)
            {
                s = A[j];
                A[j] = A[j - 1];
                A[j - 1] = s;
                flag = 1;
            }
        }
    }
}

selectionSort()
{
    int i, j;
    int min;

    data s;

    //全てのデータに対して実行
    for (i = 0; i < n; i++)
    {
        //変更するデータの場所の初期化
        min = i;

        // minのデータ以降のデータと大小比較
        for (j = i; j < n; j++)
        {
            if (B[j].number < B[min].number)
            {
                min = j;
            }
        }

        //大小が変わっていればデータの入れ替え
        if (B[i].number != B[min].number)
        {
            s = B[i];
            B[i] = B[min];
            B[min] = s;
        }
    }
}

int main(void)
{
    getdata();

    selectionSort();

    bubbleSort();

    output();

    return 0;
}
