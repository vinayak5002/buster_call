#include<bits/stdc++.h>
using namespace std;

const int N = 3;

static const int dx[4] = {-1, 0, 1, 0};
static const int dy[4] = {0, -1, 0, 1};
static const char dir[4] = {'u', 'l', 'd', 'r'};

string target = "123456780";

string bfs(string str){
	queue<string> Q;
    map<string, string> d;  //从初始状态到状态string移动步骤 
	Q.push(str); 
	d[str] = "";
	string u, v;
	while(!Q.empty()){
		u = Q.front();
		Q.pop();
		if( u == target ) return d[u];
		//空格所在位置 
		int t = u.find("0");
		int sx = t / N;    
		int sy = t % N;
		string ans = d[u];
		for(int r = 0; r < 4; r++){
			int tx = sx + dx[r];
			int ty = sy + dy[r];
			
			if(tx < 0 || ty < 0 || tx >= N || ty >= N) continue;
            v = u; 
			swap(v[t], v[tx * N + ty]);
		//	if(d[v] == ""){             //判断该状态是否在map中，如果不在map中表明是新的状态，入队 
	         if(d.find(v) == d.end())
			   	   d[v] = ans + dir[r];
				   Q.push(v);
			}
			
		}
	}
	
	return "unsolvable";
}
int main(){
	string str;
	char ch;
	for(int i = 0; i < N * N; i++){
		cin >> ch;
		str += ch;
	}
		
	string ans = bfs(str);
	cout << ans.size() << endl;
   	return 0;
} 
