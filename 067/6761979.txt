#include <stdio.h>

#define max_queue 500002
#define END 1000000001//out of range
int main()
{
	
	struct NODE {
		int number;
		struct NODE* pnext;

	};

	struct NODE List[max_queue];
	struct NODE def;
	def.pnext = &def;
	def.number = -2;
	List[max_queue];
	
	List[0].pnext = &List[1];
	List[0].number = -1;
	List[1].pnext = def.pnext;
	List[1].number = END;
	struct NODE* Node_p;
	struct NODE* prev_p;
	int count_list = 1;
	//end of preparation

	int cursor = 1;
	int q;//number of count
	int action;//query arg1
	int x;//query arg2 in insert
	int d;//query arg2 in mode

	//end of initialization
	scanf("%d", &q);

	for (int i = 0; i < q; i++)
	{
		scanf("%d", &action);

		switch (action)
		{
			case 0://insert
				scanf("%d", &x);

				Node_p = &List[0];
				for (int j = 0; j < cursor; j++)
				{
					prev_p = Node_p;
					Node_p = (*Node_p).pnext;//cursorの1個前のアドレス取得
				}
				count_list++;
				List[count_list].pnext = (*prev_p).pnext;//cursorのアドレスをcount_listのアドレスで参照
				(*prev_p).pnext=&List[count_list];//新規の配列にcursorのアドレス代入
				List[count_list].number = x;//新規の配列に今回の数値を代入

				break;
			case 1://move
				scanf("%d", &d);
				cursor += d;
				break;
			case 2://erase
				Node_p = &List[0];
				for (int j = 0; j < cursor; j++)
				{
					prev_p = Node_p;
					Node_p = (*Node_p).pnext;//cursorの1個前のアドレス取得
				}
				if ((*Node_p).number != END)
				{
					(*prev_p).pnext = (*Node_p).pnext;
				}
				break;
		}
	}

	struct NODE *p;
	int k = 0;
	p = List[k].pnext;
	while (1)
	{
	
		if (p->number != END)
		{
			printf("%d\n", p->number);
		}
		else
		{
			//printf("ENDが参照された\n");
			break;
		}
		p = p->pnext;//次のアドレスに移動
	}
}
