#include <iostream>

int calc_parent_idx(int idx)
{
    return idx / 2;
}

int calc_left_idx(int idx)
{
    return idx * 2;
}

int calc_right_idx(int idx)
{
    return idx * 2 + 1;
}

void print_heap_info(int heap_size, int* heap)
{
    for (int i = 1 ; i < heap_size + 1 ; ++i)
    {
        int current = i;
        int parent = calc_parent_idx(current);
        int left = calc_left_idx(current);
        int right = calc_right_idx(current);

        std::cout << "node " << current << ": key = " << heap[current] << ",";

        if (parent > 0)
        {
            std::cout << " parent key = " << heap[parent] << ",";
        }

        if (left <= heap_size)
        {
            std::cout << " left key = " << heap[left] << ",";
        }

        if (right <= heap_size)
        {
            std::cout << " right key = " << heap[right] << ",";
        }

        std::cout << std::endl;
    }

    return;
}

int main()
{
    int heap_size;

    std::cin >> heap_size;

    int heap[heap_size + 1];

    for (int i = 1 ; i < heap_size + 1 ; ++i)
    {
        std::cin >> heap[i];
    }

    print_heap_info(heap_size, heap);

    return 0;
}
