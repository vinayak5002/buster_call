#include <bits/stdc++.h>
using namespace std;
//#define _GLIBCXX_DEBUG

using vi = vector<int>;
using vvi = vector<vector<int>>;
using vvvi = vector<vector<vector<int>>>;
using vl = vector<long long>;
using vvl = vector<vector<long long>>;
using vvvl = vector<vector<vector<long long>>>;
using vb = vector<bool>;
using vvb = vector<vector<bool>>;
using vvvb = vector<vector<vector<bool>>>;
using vs = vector<string>;
using vc = vector<char>;
using vvc = vector<vector<char>>;
using vvvc = vector<vector<vector<char>>>;
using vp = vector<pair<int, int>>;

constexpr long double PI = 3.141592653589793238462643383279502884L;

#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define u_map unordered_map
#define pq priority_queue
#define all(v) v.begin(), v.end()
#define bpp_cnt __builtin_popcount


struct dice_type {
  vector<int> dice;

  dice_type() {
    dice = vector<int>(6);
  }

  void swaps(char direction) {
    if (direction == 'S') {
      swap(dice[5], dice[4]);
      swap(dice[5], dice[1]);
      swap(dice[1], dice[0]);
    }
    if (direction == 'N') {
      swap(dice[1], dice[0]);
      swap(dice[5], dice[1]);
      swap(dice[5], dice[4]);
    }
    if (direction == 'E') {
      swap(dice[0], dice[3]);
      swap(dice[3], dice[5]);
      swap(dice[5], dice[2]);
    }
    if (direction == 'W') {
      swap(dice[5], dice[2]);
      swap(dice[3], dice[5]);
      swap(dice[0], dice[3]);
    }
  }
};



int main() {

















  dice_type d1;
  rep(i, 6) cin >> d1.dice[i];

  string O; cin >> O;
  rep(i, O.size()) {
    d1.swaps(O[i]);
  }

  cout << *d1.dice.begin() << endl;
































  return 0;
}

