class UnionFind:
	def __init__(self,size):
		self.size=size
		self.parent=[-1]*(size+1)
		import sys
		sys.setrecursionlimit(10 ** 6)

	def find(self,x):
		if self.parent[x]==-1:return x
		self.parent[x] = self.find(self.parent[x])
		return self.parent[x]

	def issame(self,x,y):
		return self.find(x)==self.find(y)

	def unite(self,x,y):
		if self.find(x)==self.find(y):return
		self.parent[x]=y

def main():
	n,q=map(int,input().split())
	uf=UnionFind(n)
	for _ in range(q):
		p,a,b=map(int,input().split())
		if p==0:uf.unite(a,b)
		else:print("0" if uf.issame(a,b) else "1")
	# print(uf.parent)
main()

