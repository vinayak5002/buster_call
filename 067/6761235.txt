#include <iostream>
#include <vector>
#define INF 2147483647

using namespace std;
std::vector<int> tree;
std::vector<int> lazy;
int n;

void lazy_evaluate(int k){
    if(lazy[k] != INF){
        tree[k] = lazy[k];
        if(k < n-1){
            lazy[2*k+1] = lazy[k];
            lazy[2*k+2] = lazy[k];
        }
        lazy[k] = INF;
    }
}

void update_query(int a,int b,int x,int k,int l,int r){
    lazy_evaluate(k);
    if(r<=a || b<=l) return;
    else if(a<=l and r<=b){
        lazy[k] = x;
        lazy_evaluate(k);
    }
    else{
        update_query(a, b, x, k*2 + 1, l, (l + r)/2);
        update_query(a, b, x, k*2 + 2, (l + r)/2, r);
        tree[k] = min(tree[k*2+1],tree[k*2+2]);
    }
}

int findmin_query(int a,int b,int k,int l,int r){
    int vl,vr;
    lazy_evaluate(k);
    if(r<=a || b<=l) return INF;
    if(a<=l && r<=b) return tree[k];

    vl = findmin_query(a,b,k*2+1,l,(l+r)/2);
    vr = findmin_query(a,b, k*2+2,(l+r)/2,r);

    return min(vl,vr);
}

void update(int s,int t,int x){
    update_query(s,t+1,x,0,0,n);
}
int findmin(int a, int b){
    return findmin_query(a,b+1,0,0,n);
}

int main(){
    int n_,q;
    int com;
    int s,t,x;
    std::vector<int> ans;
    cin >> n_ >> q;

    n = 1;
    while(n<n_) n*=2;

    for(int i=0;i<2*n-1;i++){
        tree.push_back(INF);
        lazy.push_back(INF);
    }

    for(int i=0;i<q;i++){
        cin >> com;
        if(com==0){
            cin >> s >> t >> x;
            update(s,t,x);
        }
        else if(com == 1){
            cin >> s >> t;
            ans.push_back(findmin(s,t));
        }
    }

    for(int i=0;i<ans.size();i++){
        cout << ans[i] << endl;
    }

    return 0;
}
