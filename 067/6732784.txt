#include "bits/stdc++.h"
#define REP(i, n) for (int i = 0; i < (int)(n); i++)
using namespace std;
typedef long long ll;

class UnionFind{

    int N;
    vector<int> par;
    vector<int> t_rank;

public:

    // n要素で初期化
    UnionFind(int n){
        N = n;
        par.resize(N);
        t_rank.resize(N);
        for(int i=0;i<N;i++){
            par[i] = i;
            t_rank[i] = 0;
        }
    }

    // 木の根を求める
    int find(int x){
        if(par[x] == x) return x;
        else return par[x] = find(par[x]);
    }

    // xとyの属する集合を併合
    void unite(int x,int y){
        x = find(x);
        y = find(y);
        if(x == y) return;
        if(t_rank[x] < t_rank[y]) par[x] = y;
        else{
            par[y] = x;
            if(t_rank[x] == t_rank[y]) t_rank[x]++;
        }
    }

    // xとyが同じ集合に属するか否か
    bool same(int x,int y){
        return find(x) == find(y);
    }
};

int main(){
    int n,q;
    cin >> n >> q;
    vector<int> com(q),x(q),y(q);
    REP(i,q) cin >> com[i] >> x[i] >> y[i];

    UnionFind uf(n);
    REP(i,q){
        if(com[i] == 0) uf.unite(x[i],y[i]);
        else cout << (uf.same(x[i],y[i]) ? 1 : 0) << endl;
    }
    return 0;
}
