#include <bits/extc++.h>

using namespace std;

#define rep(i,n) for(int i=0;i<(n);++i)
#define reps(i,s,n) for(int i=(s);i<=(n);++i)
#define all(x) begin(x), end(x)
#define Fixed fixed << setprecision(12)
#define updiv(a,b) ((a + b - 1) / b)
constexpr int32_t INF  = 0x3f3f3f3f;
constexpr int64_t LINF = 0x3f3f3f3f3f3f3f3fLL;
constexpr int mod = 1e9+7;
// constexpr int mod = 998244353;

template <class Func>
class FixPoint : Func {
public:
    explicit constexpr FixPoint(Func&& f) noexcept : Func(forward<Func>(f)) {}

    template <class... Args>
    constexpr decltype(auto) operator()(Args&&... args) const {
        return Func::operator()(*this, std::forward<Args>(args)...);
    }
};

template <class Func>
static inline constexpr decltype(auto) makeFixPoint(Func&& f) noexcept {
    return FixPoint<Func>{forward<Func>(f)};
}

template <class A, class B> inline bool chmax(A &a, const B &b) { return b > a && (a = b, true); }
template <class A, class B> inline bool chmin(A &a, const B &b) { return b < a && (a = b, true); }

template <class T> using max_heap = priority_queue<T>;
template <class T> using min_heap = priority_queue<T,vector<T>,greater<T> >;
template <class A, class B> using umap = unordered_map<A,B>;
template <class A, class B> using uset = unordered_set<A,B>;

template <class T> using Set = __gnu_pbds::tree<T, __gnu_pbds::null_type, less<T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;

template <class T> inline void bye(T x) { cout << x << '\n'; exit(0); }

constexpr int dx[] = {1, 0, -1, 0, 1, 1, -1, -1};
constexpr int dy[] = {0, -1, 0, 1, 1, -1, -1, 1};


signed main() {
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);

    int n, q;
    cin >> n >> q;

    vector<int> x(n), y(n), z(n), r(n);
    vector<long long> l(n);

    for (int i = 0; i < n; ++i) {
        cin >> x[i] >> y[i] >> z[i] >> r[i] >> l[i];
    }

    auto dist = [&](auto a, auto b, auto c, auto d, auto e, auto f) -> long double {
        return ((long double) powl(a - d, 2) + powl(b - e, 2) + powl(c - f, 2));
    };

    for (int i = 0; i < q; ++i) {
        long long res = 0;
        int sx, sy, sz, dx, dy, dz;
        cin >> sx >> sy >> sz >> dx >> dy >> dz;
        for (int j = 0; j < n; ++j) {
            long double L = 0, R = 1;
            for (int k = 0; k < 500; ++k) {
                if (L > R) break;
                long double lmid = (R - L) / 3 + L;
                long double rmid = (R - L) / 3 * 2 + L;
                long double xl = (dx - sx) * lmid + sx;
                long double yl = (dy - sy) * lmid + sy;
                long double zl = (dz - sz) * lmid + sz;
                long double xr = (dx - sx) * rmid + sx;
                long double yr = (dy - sy) * rmid + sy;
                long double zr = (dz - sz) * rmid + sz;
                if (dist(xl, yl, zl, x[j], y[j], z[j]) >= dist(xr, yr, zr, x[j], y[j], z[j])) {
                    L = lmid;
                } else {
                    R = rmid;
                }
            }
            long double xp = (dx - sx) * L + sx;
            long double yp = (dy - sy) * L + sy;
            long double zp = (dz - sz) * L + sz;
            if ((long long) dist(xp, yp, zp, x[j], y[j], z[j]) <= r[j] * r[j])  {
                res += l[j];
            }
        }
        cout << res << '\n';
    }

    return(0);
}


