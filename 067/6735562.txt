#include<iostream>
#include<algorithm>
#include<stack>
using namespace std;

static const int MAX = 1405;
int G[MAX][MAX], T[MAX][MAX];//T[i][j]:以(i,j) 为右下角的最大矩形 

struct Rectangle{
	int height, pos;
};
/*

*/ 
int getLargestRectangle(int W, int buffer[]) {
  
	int maxRect = 0;
 	stack<Rectangle> s;
 	Rectangle rect;
 	for(int i = 0; i < W; i++){
 		rect.height = buffer[i];
 		rect.pos = i;
 		if(s.empty()){
 			s.push(rect);
		 }
		 else{
		 	if(s.top().height < rect.height)
		 		s.push(rect);
		 	else if(s.top().height > rect.height){
		 		int target = i;
		 		while(!s.empty() && s.top().height >= rect.height){
		 			Rectangle pre = s.top();
		 			s.pop();
		 			int area = pre.height * (i - pre.pos);
		 			maxRect = max(maxRect, area); 
		 			target = pre.pos;
				 }
				 rect.pos = target;
				 s.push(rect);		 		
			 }		 	
		 }
	 }
 	
 	return maxRect;
}
int getLargestRectangle( int H, int W ) {
	//初始化T[i][j]:从第0行到第i行第j列最长矩形 
		
	for( int i = 0; i < H; i++) {
		for( int j = 0; j < W; j++ ) {
			if ( G[i][j] ) 
				T[i][j] = 0;
			else {
				if(i > 0)
					T[i][j] = T[i - 1][j] + 1;
				else 
					T[i][j] =  1;
			}
		}
	}
    //逐行合并邻近的矩形 
    int maxRect = 0;
    for ( int i = 0; i < H; i++) {
    	maxRect = max( maxRect, getLargestRectangle(W, T[i]));
    }

    return maxRect;
}
int main() {
	int H, W;

	cin >> H >> W;
	for( int i = 0; i < H; i++ )
		for( int j =0; j < W; j++ ) 
			cin >> G[i][j];

	cout << getLargestRectangle( H, W ) << endl;
	return 0;

}
