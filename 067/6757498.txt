#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<ll,ll> PP;
//#define MOD 1000000007
#define MOD 998244353
#define INF 2305843009213693951
//#define INF 810114514
#define PI 3.141592653589
#define setdouble setprecision
#define REP(i,n) for(ll i=0;i<(n);++i)
#define OREP(i,n) for(ll i=1;i<=(n);++i)
#define RREP(i,n) for(ll i=(n)-1;i>=0;--i)
#define ALL(v) (v).begin(), (v).end()
#define GOODBYE do { cout << "-1" << endl; return 0; } while (false)
#define MM <<" "<<
#define Endl endl
#define debug true
#define debug2 false

class Dinic{
    /*
    Copyright (c) 2021 0214sh7
    https://github.com/0214sh7/library/
    */
    private:
    struct edge{
        int end;
        long long cap,rev;
        
    };
    
    //const long long INF = (1LL<<61);
    int V;
    std::vector<std::vector<edge>> G;
    std::vector<long long> level;
    std::vector<int> iter;
    
    void Dinic_bfs(int s){
        for(int i=0;i<V;i++){
            level[i]=-1;
        }
        std::queue<int> que;
        level[s]=0;
        que.push(s);
        while(!que.empty()){
            int v=que.front();
            que.pop();
            for(unsigned int i=0;i<G[v].size();i++){
                edge &e = G[v][i];
                if(e.cap>0 && level[e.end]<0){
                    level[e.end]=level[v]+1;
                    que.push(e.end);
                }
            }
        }
    }
    
    long long Dinic_dfs(int v,int t,long long f){
        if(v==t)return f;
        for(int &i=iter[v];i<G[v].size();i++){
            edge &e = G[v][i];
            if(e.cap>0 && level[v]<level[e.end]){
                long long d = Dinic_dfs(e.end,t,std::min(f,e.cap));
                if(d>0){
                    e.cap -= d;
                    G[e.end][e.rev].cap+=d;
                    return d;
                }
            }
        }
        return 0;
    }
    
    public:
    
    void init(int N){
        V = N;
        G.clear();
        G.resize(V);
        level.resize(V);
        iter.resize(V);
    }
    
    Dinic(int N){
        init(N);
    }
    
    void add(int from,int end,long long cap){
        G[from].push_back((edge){end,cap,(long long)G[end].size()});
        G[end].push_back((edge){from,0,(long long)G[from].size()-1});
    }
    
    long long solve(int s,int t){
        long long flow=0;
        while(1){
            Dinic_bfs(s);
            if(level[t]<0){return flow;}
            for(int i=0;i<V;i++){
                iter[i]=0;
            }
            long long f;
            while((f=Dinic_dfs(s,t,INF))>0){
                flow+=f;
            }
        }
    }
    
};

int main(void){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    
    ll N,M;
    cin >> N >> M;
    ll s,t;
    cin >> s >> t;
    s--;t--;
    vector<array<ll,4>> UVDC(M);
    REP(i,M){
        ll u,v,d,c;
        cin >> u >> v >> d >> c;
        u--;v--;
        UVDC[i] = {u,v,d,c};
    }

    ll D[201][201];
    REP(i,N){
        REP(j,N){
            D[i][j] = INF;
        }
        D[i][i] = 0;
    }

    REP(i,M){
        D[UVDC[i][0]][UVDC[i][1]] = UVDC[i][2];
    }

    REP(k,N){
        REP(i,N){
            REP(j,N){
                D[i][j] = min(D[i][j],D[i][k]+D[k][j]);
            }
        }
    }

    Dinic dinitz(N);

    REP(i,M){
        
        ll u = UVDC[i][0],v = UVDC[i][1],d = UVDC[i][2];
        ll c = UVDC[i][3];
        if(D[s][t]==D[s][u]+d+D[v][t]){
            dinitz.add(u,v,c);
        }
    }

    ll Ans = dinitz.solve((int)s,(int)t);
    cout << Ans << endl;

    return 0;
}
