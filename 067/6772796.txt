#include <bits/stdc++.h>
using namespace std;
#ifdef tabr
#include "library/debug.cpp"
#else
#define debug(...)
#endif

template <long long mod>
struct modular {
    long long value;
    modular(long long x = 0) {
        value = x % mod;
        if (value < 0) value += mod;
    }
    modular& operator+=(const modular& other) {
        if ((value += other.value) >= mod) value -= mod;
        return *this;
    }
    modular& operator-=(const modular& other) {
        if ((value -= other.value) < 0) value += mod;
        return *this;
    }
    modular& operator*=(const modular& other) {
        value = value * other.value % mod;
        return *this;
    }
    modular& operator/=(const modular& other) {
        long long a = 0, b = 1, c = other.value, m = mod;
        while (c != 0) {
            long long t = m / c;
            m -= t * c;
            swap(c, m);
            a -= t * b;
            swap(a, b);
        }
        a %= mod;
        if (a < 0) a += mod;
        value = value * a % mod;
        return *this;
    }
    friend modular operator+(const modular& lhs, const modular& rhs) { return modular(lhs) += rhs; }
    friend modular operator-(const modular& lhs, const modular& rhs) { return modular(lhs) -= rhs; }
    friend modular operator*(const modular& lhs, const modular& rhs) { return modular(lhs) *= rhs; }
    friend modular operator/(const modular& lhs, const modular& rhs) { return modular(lhs) /= rhs; }
    modular& operator++() { return *this += 1; }
    modular& operator--() { return *this -= 1; }
    modular operator++(int) {
        modular res(*this);
        *this += 1;
        return res;
    }
    modular operator--(int) {
        modular res(*this);
        *this -= 1;
        return res;
    }
    modular operator-() const { return modular(-value); }
    bool operator==(const modular& rhs) const { return value == rhs.value; }
    bool operator!=(const modular& rhs) const { return value != rhs.value; }
    bool operator<(const modular& rhs) const { return value < rhs.value; }
};
template <long long mod>
string to_string(const modular<mod>& x) {
    return to_string(x.value);
}
template <long long mod>
ostream& operator<<(ostream& stream, const modular<mod>& x) {
    return stream << x.value;
}
template <long long mod>
istream& operator>>(istream& stream, modular<mod>& x) {
    stream >> x.value;
    x.value %= mod;
    if (x.value < 0) x.value += mod;
    return stream;
}

constexpr long long mod = (int) 1e9 + 7;
using mint = modular<mod>;

mint power(mint a, long long n) {
    mint res = 1;
    while (n > 0) {
        if (n & 1) {
            res *= a;
        }
        a *= a;
        n >>= 1;
    }
    return res;
}

vector<mint> fact(1, 1);
vector<mint> finv(1, 1);

mint C(int n, int k) {
    if (n < k || k < 0) {
        return mint(0);
    }
    while ((int) fact.size() < n + 1) {
        fact.emplace_back(fact.back() * (int) fact.size());
        finv.emplace_back(mint(1) / fact.back());
    }
    return fact[n] * finv[k] * finv[n - k];
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    vector<int> c(4);
    for (int i = 0; i < 4; i++) {
        cin >> c[i];
    }
    int m;
    cin >> m;
    vector<string> s;
    string t;
    while (cin >> t) {
        s.emplace_back(t);
    }
    vector<vector<int>> a(m, vector<int>(16));
    map<string, int> mp;
    const string dna = "ATGC";
    auto Get = [&](string w) {
        int res = 0;
        for (char x : w) {
            for (int i = 0; i < 4; i++) {
                if (x == dna[i]) {
                    res |= 1 << i;
                }
            }
        }
        return res;
    };
    for (int i = m - 1; i >= 0; i--) {
        while (s.back().back() != ':') {
            if (s.back().back() == ']') {
                s.back().pop_back();
                s.back().erase(s.back().begin());
                a[i][Get(s.back())]++;
            } else {
                for (int j = 0; j < 16; j++) {
                    a[i][j] += a[mp[s.back()]][j];
                }
            }
            s.pop_back();
        }
        s.back().pop_back();
        mp[s.back()] = i;
        s.pop_back();
    }
    if (*min_element(a[0].begin(), a[0].end()) >= 0 && accumulate(a[0].begin(), a[0].end(), 0) != accumulate(c.begin(), c.end(), 0)) {
        cout << 0 << '\n';
        return 0;
    }
    vector<int> b;
    for (int i = 0; i < 16; i++) {
        for (int j = 0; j < a[0][i]; j++) {
            b.emplace_back(i);
        }
    }
    map<vector<int>, mint> dp;
    dp[{0, 0, 0, 0}] = 1;
    for (int x : b) {
        map<vector<int>, mint> new_dp;
        for (auto [key, val] : dp) {
            for (int i = 0; i < 4; i++) {
                if (~x & (1 << i)) {
                    continue;
                }
                auto nkey = key;
                nkey[i]++;
                new_dp[nkey] += val;
            }
        }
        swap(dp, new_dp);
    }
    cout << dp[c] << '\n';
    return 0;
}
