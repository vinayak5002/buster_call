#include <iostream>
#include <complex>
#include <cassert>
using namespace std;

using Vector2D = complex<double>;

class Circle2D
{
public:
    Vector2D centor;
    double r;
    Circle2D(Vector2D centor, double r) : centor(centor), r(r) {}
};

int circle_intersection(Circle2D a, Circle2D b)
{
    if (a.r < b.r)
    {
        swap(a, b);
    }
    assert(a.r >= b.r);

    double distance = abs(a.centor - b.centor);
    if (distance > a.r + b.r)
        return 4;
    else if (distance == a.r + b.r)
        return 3;
    else if (distance > a.r - b.r)
        return 2;
    else if (distance == a.r - b.r)
        return 1;
    else
        return 0;
}

void solve()
{
    double x1, y1, x2, y2, r1, r2;
    cin >> x1 >> y1 >> r1;
    cin >> x2 >> y2 >> r2;
    Circle2D a(Vector2D(x1, y1), r1);
    Circle2D b(Vector2D(x2, y2), r2);
    cout << circle_intersection(a, b) << endl;
}

signed main()
{
    solve();
    return 0;
}
