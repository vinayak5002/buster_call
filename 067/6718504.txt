#include <bits/stdc++.h>

#ifdef _MSC_VER
#  include <intrin.h>
#else
#  include <x86intrin.h>
#endif

#include <limits>
#include <type_traits>

namespace suisen {
// ! utility
template <typename ...Types>
using constraints_t = std::enable_if_t<std::conjunction_v<Types...>, std::nullptr_t>;
template <bool cond_v, typename Then, typename OrElse>
constexpr decltype(auto) constexpr_if(Then&& then, OrElse&& or_else) {
	if constexpr (cond_v) {
		return std::forward<Then>(then);
	} else {
		return std::forward<OrElse>(or_else);
	}
}

// ! function
template <typename ReturnType, typename Callable, typename ...Args>
using is_same_as_invoke_result = std::is_same<std::invoke_result_t<Callable, Args...>, ReturnType>;
template <typename F, typename T>
using is_uni_op = is_same_as_invoke_result<T, F, T>;
template <typename F, typename T>
using is_bin_op = is_same_as_invoke_result<T, F, T, T>;

template <typename Comparator, typename T>
using is_comparator = std::is_same<std::invoke_result_t<Comparator, T, T>, bool>;

// ! integral
template <typename T, typename = constraints_t<std::is_integral<T>>>
constexpr int bit_num = std::numeric_limits<std::make_unsigned_t<T>>::digits;
template <typename T, unsigned int n>
struct is_nbit { static constexpr bool value = bit_num<T> == n; };
template <typename T, unsigned int n>
static constexpr bool is_nbit_v = is_nbit<T, n>::value;

// ?
template <typename T>
struct safely_multipliable {};
template <>
struct safely_multipliable<int> { using type = long long; };
template <>
struct safely_multipliable<long long> { using type = __int128_t; };
template <>
struct safely_multipliable<unsigned int> { using type = unsigned long long; };
template <>
struct safely_multipliable<unsigned long int> { using type = __uint128_t; };
template <>
struct safely_multipliable<unsigned long long> { using type = __uint128_t; };
template <>
struct safely_multipliable<float> { using type = float; };
template <>
struct safely_multipliable<double> { using type = double; };
template <>
struct safely_multipliable<long double> { using type = long double; };
template <typename T>
using safely_multipliable_t = typename safely_multipliable<T>::type;

template <typename T, typename = void>
struct rec_value_type {
	using type = T;
};
template <typename T>
struct rec_value_type<T, std::void_t<typename T::value_type>> {
	using type = typename rec_value_type<typename T::value_type>::type;
};
template <typename T>
using rec_value_type_t = typename rec_value_type<T>::type;

} // namespace suisen

// ! type aliases
using i128 = __int128_t;
using u128 = __uint128_t;

template <typename T>
using pq_greater = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <typename T, typename U>
using umap = std::unordered_map<T, U>;

// ! macros (capital: internal macro)
#define OVERLOAD2(_1,_2,name,...) name
#define OVERLOAD3(_1,_2,_3,name,...) name
#define OVERLOAD4(_1,_2,_3,_4,name,...) name

#define REP4(i,l,r,s)  for(std::remove_reference_t<std::remove_const_t<decltype(r)>>i=(l);i<(r);i+=(s))
#define REP3(i,l,r)	REP4(i,l,r,1)
#define REP2(i,n)	  REP3(i,0,n)
#define REPINF3(i,l,s) for(std::remove_reference_t<std::remove_const_t<decltype(l)>>i=(l);;i+=(s))
#define REPINF2(i,l)   REPINF3(i,l,1)
#define REPINF1(i)	 REPINF2(i,0)
#define RREP4(i,l,r,s) for(std::remove_reference_t<std::remove_const_t<decltype(r)>>i=(l)+fld((r)-(l)-1,s)*(s);i>=(l);i-=(s))
#define RREP3(i,l,r)   RREP4(i,l,r,1)
#define RREP2(i,n)	 RREP3(i,0,n)

#define rep(...)	OVERLOAD4(__VA_ARGS__, REP4   , REP3   , REP2   )(__VA_ARGS__)
#define rrep(...)   OVERLOAD4(__VA_ARGS__, RREP4  , RREP3  , RREP2  )(__VA_ARGS__)
#define repinf(...) OVERLOAD3(__VA_ARGS__, REPINF3, REPINF2, REPINF1)(__VA_ARGS__)

#define CAT_I(a, b) a##b
#define CAT(a, b) CAT_I(a, b)
#define UNIQVAR(tag) CAT(tag, __LINE__)
#define loop(n) for (std::remove_reference_t<std::remove_const_t<decltype(n)>> UNIQVAR(loop_variable) = n; UNIQVAR(loop_variable) --> 0;)

#define all(iterable) std::begin(iterable), std::end(iterable)
#define input(type, ...) type __VA_ARGS__; read(__VA_ARGS__)

#ifdef LOCAL
#  define debug(...) debug_internal(#__VA_ARGS__, __VA_ARGS__)

template <class T, class... Args>
void debug_internal(const char* s, T&& first, Args&&... args) {
	constexpr const char* prefix = "[\033[32mDEBUG\033[m] ";
	constexpr const char* open_brakets = sizeof...(args) == 0 ? "" : "(";
	constexpr const char* close_brakets = sizeof...(args) == 0 ? "" : ")";
	std::cerr << prefix << open_brakets << s << close_brakets << ": " << open_brakets << std::forward<T>(first);
	((std::cerr << ", " << std::forward<Args>(args)), ...);
	std::cerr << close_brakets << "\n";
}

#else
#  define debug(...) void(0)
#endif

// ! I/O utilities

// __int128_t
std::ostream& operator<<(std::ostream& dest, __int128_t value) {
	std::ostream::sentry s(dest);
	if (s) {
		__uint128_t tmp = value < 0 ? -value : value;
		char buffer[128];
		char* d = std::end(buffer);
		do {
			--d;
			*d = "0123456789"[tmp % 10];
			tmp /= 10;
		} while (tmp != 0);
		if (value < 0) {
			--d;
			*d = '-';
		}
		int len = std::end(buffer) - d;
		if (dest.rdbuf()->sputn(d, len) != len) {
			dest.setstate(std::ios_base::badbit);
		}
	}
	return dest;
}
// __uint128_t
std::ostream& operator<<(std::ostream& dest, __uint128_t value) {
	std::ostream::sentry s(dest);
	if (s) {
		char buffer[128];
		char* d = std::end(buffer);
		do {
			--d;
			*d = "0123456789"[value % 10];
			value /= 10;
		} while (value != 0);
		int len = std::end(buffer) - d;
		if (dest.rdbuf()->sputn(d, len) != len) {
			dest.setstate(std::ios_base::badbit);
		}
	}
	return dest;
}

// pair
template <typename T, typename U>
std::ostream& operator<<(std::ostream& out, const std::pair<T, U>& a) {
	return out << a.first << ' ' << a.second;
}
// tuple
template <unsigned int N = 0, typename ...Args>
std::ostream& operator<<(std::ostream& out, const std::tuple<Args...>& a) {
	if constexpr (N >= std::tuple_size_v<std::tuple<Args...>>) {
		return out;
	} else {
		out << std::get<N>(a);
		if constexpr (N + 1 < std::tuple_size_v<std::tuple<Args...>>) {
			out << ' ';
		}
		return operator<<<N + 1>(out, a);
	}
}
// vector
template <typename T>
std::ostream& operator<<(std::ostream& out, const std::vector<T>& a) {
	for (auto it = a.begin(); it != a.end();) {
		out << *it;
		if (++it != a.end()) out << ' ';
	}
	return out;
}
// array
template <typename T, size_t N>
std::ostream& operator<<(std::ostream& out, const std::array<T, N>& a) {
	for (auto it = a.begin(); it != a.end();) {
		out << *it;
		if (++it != a.end()) out << ' ';
	}
	return out;
}
inline void print() { std::cout << '\n'; }
template <typename Head, typename... Tail>
inline void print(const Head& head, const Tail &...tails) {
	std::cout << head;
	if (sizeof...(tails)) std::cout << ' ';
	print(tails...);
}
template <typename Iterable>
auto print_all(const Iterable& v, std::string sep = " ", std::string end = "\n") -> decltype(std::cout << *v.begin(), void()) {
	for (auto it = v.begin(); it != v.end();) {
		std::cout << *it;
		if (++it != v.end()) std::cout << sep;
	}
	std::cout << end;
}

__int128_t parse_i128(std::string& s) {
	__int128_t ret = 0;
	for (int i = 0; i < int(s.size()); i++) if ('0' <= s[i] and s[i] <= '9') ret = 10 * ret + s[i] - '0';
	if (s[0] == '-') ret = -ret;
	return ret;
}
__uint128_t parse_u128(std::string& s) {
	__uint128_t ret = 0;
	for (int i = 0; i < int(s.size()); i++) if ('0' <= s[i] and s[i] <= '9') ret = 10 * ret + s[i] - '0';
	return ret;
}
// __int128_t
std::istream& operator>>(std::istream& in, __int128_t& v) {
	std::string s;
	in >> s;
	v = parse_i128(s);
	return in;
}
// __uint128_t
std::istream& operator>>(std::istream& in, __uint128_t& v) {
	std::string s;
	in >> s;
	v = parse_u128(s);
	return in;
}
// pair
template <typename T, typename U>
std::istream& operator>>(std::istream& in, std::pair<T, U>& a) {
	return in >> a.first >> a.second;
}
// tuple
template <unsigned int N = 0, typename ...Args>
std::istream& operator>>(std::istream& in, std::tuple<Args...>& a) {
	if constexpr (N >= std::tuple_size_v<std::tuple<Args...>>) {
		return in;
	} else {
		return operator>><N + 1>(in >> std::get<N>(a), a);
	}
}
// vector
template <typename T>
std::istream& operator>>(std::istream& in, std::vector<T>& a) {
	for (auto it = a.begin(); it != a.end(); ++it) in >> *it;
	return in;
}
// array
template <typename T, size_t N>
std::istream& operator>>(std::istream& in, std::array<T, N>& a) {
	for (auto it = a.begin(); it != a.end(); ++it) in >> *it;
	return in;
}
template <typename ...Args>
void read(Args &...args) {
	(std::cin >> ... >> args);
}

// ! integral utilities

// Returns pow(-1, n)
template <typename T>
constexpr inline int pow_m1(T n) {
	return -(n & 1) | 1;
}
// Returns pow(-1, n)
template <>
constexpr inline int pow_m1<bool>(bool n) {
	return -int(n) | 1;
}

// Returns floor(x / y)
template <typename T>
constexpr inline T fld(const T x, const T y) {
	return (x ^ y) >= 0 ? x / y : (x - (y + pow_m1(y >= 0))) / y;
}
template <typename T>
constexpr inline T cld(const T x, const T y) {
	return (x ^ y) <= 0 ? x / y : (x + (y + pow_m1(y >= 0))) / y;
}

template <typename T, suisen::constraints_t<suisen::is_nbit<T, 16>> = nullptr>
__attribute__((target("popcnt"))) constexpr inline int popcount(const T x) { return _mm_popcnt_u32(x); }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 32>> = nullptr>
__attribute__((target("popcnt"))) constexpr inline int popcount(const T x) { return _mm_popcnt_u32(x); }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 64>> = nullptr>
__attribute__((target("popcnt"))) constexpr inline int popcount(const T x) { return _mm_popcnt_u64(x); }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 16>> = nullptr>
constexpr inline int count_lz(const T x) { return x ? __builtin_clz(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 32>> = nullptr>
constexpr inline int count_lz(const T x) { return x ? __builtin_clz(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 64>> = nullptr>
constexpr inline int count_lz(const T x) { return x ? __builtin_clzll(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 16>> = nullptr>
constexpr inline int count_tz(const T x) { return x ? __builtin_ctz(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 32>> = nullptr>
constexpr inline int count_tz(const T x) { return x ? __builtin_ctz(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 64>> = nullptr>
constexpr inline int count_tz(const T x) { return x ? __builtin_ctzll(x) : suisen::bit_num<T>; }
template <typename T>
constexpr inline int floor_log2(const T x) { return suisen::bit_num<T> -1 - count_lz(x); }
template <typename T>
constexpr inline int ceil_log2(const T x) { return floor_log2(x) + ((x & -x) != x); }
template <typename T>
constexpr inline int kth_bit(const T x, const unsigned int k) { return (x >> k) & 1; }
template <typename T>
constexpr inline int parity(const T x) { return popcount(x) & 1; }

// ! container

template <typename T, typename Comparator, suisen::constraints_t<suisen::is_comparator<Comparator, T>> = nullptr>
auto priqueue_comp(const Comparator comparator) {
	return std::priority_queue<T, std::vector<T>, Comparator>(comparator);
}

template <typename Iterable>
auto isize(const Iterable& iterable) -> decltype(int(iterable.size())) {
	return iterable.size();
}

template <typename T, typename Gen, suisen::constraints_t<suisen::is_same_as_invoke_result<T, Gen, int>> = nullptr>
auto generate_vector(int n, Gen generator) {
	std::vector<T> v(n);
	for (int i = 0; i < n; ++i) v[i] = generator(i);
	return v;
}
template <typename T>
auto generate_range_vector(T l, T r) {
	return generate_vector(r - l, [l](int i) { return l + i; });
}
template <typename T>
auto generate_range_vector(T n) {
	return generate_range_vector(0, n);
}

template <typename T>
void sort_unique_erase(std::vector<T>& a) {
	std::sort(a.begin(), a.end());
	a.erase(std::unique(a.begin(), a.end()), a.end());
}

template <typename InputIterator, typename BiConsumer>
auto foreach_adjacent_values(InputIterator first, InputIterator last, BiConsumer f) -> decltype(f(*first++, *last), void()) {
	if (first != last) for (auto itr = first, itl = itr++; itr != last; itl = itr++) f(*itl, *itr);
}
template <typename Container, typename BiConsumer>
auto foreach_adjacent_values(Container c, BiConsumer f) -> decltype(c.begin(), c.end(), void()) {
	foreach_adjacent_values(c.begin(), c.end(), f);
}

// ! other utilities

// x <- min(x, y). returns true iff `x` has chenged.
template <typename T>
inline bool chmin(T& x, const T& y) {
	if (y >= x) return false;
	x = y;
	return true;
}
// x <- max(x, y). returns true iff `x` has chenged.
template <typename T>
inline bool chmax(T& x, const T& y) {
	if (y <= x) return false;
	x = y;
	return true;
}

template <typename T, std::enable_if_t<std::is_integral_v<T>, std::nullptr_t> = nullptr>
std::string bin(T val, int bit_num = -1) {
	std::string res;
	if (bit_num >= 0) {
		for (int bit = bit_num; bit-- > 0;) res += '0' + ((val >> bit) & 1);
	} else {
		for (; val; val >>= 1) res += '0' + (val & 1);
		std::reverse(res.begin(), res.end());
	}
	return res;
}

template <typename T, std::enable_if_t<std::is_integral_v<T>, std::nullptr_t> = nullptr>
std::vector<T> digits_low_to_high(T val, T base = 10) {
	std::vector<T> res;
	for (; val; val /= base) res.push_back(val % base);
	if (res.empty()) res.push_back(T{ 0 });
	return res;
}
template <typename T, std::enable_if_t<std::is_integral_v<T>, std::nullptr_t> = nullptr>
std::vector<T> digits_high_to_low(T val, T base = 10) {
	auto res = digits_low_to_high(val, base);
	std::reverse(res.begin(), res.end());
	return res;
}

template <typename T>
std::string join(const std::vector<T>& v, const std::string& sep, const std::string& end) {
	std::ostringstream ss;
	for (auto it = v.begin(); it != v.end();) {
		ss << *it;
		if (++it != v.end()) ss << sep;
	}
	ss << end;
	return ss.str();
}

namespace suisen {}
using namespace suisen;
using namespace std;

struct io_setup {
	io_setup(int precision = 20) {
		std::ios::sync_with_stdio(false);
		std::cin.tie(nullptr);
		std::cout << std::fixed << std::setprecision(precision);
	}
} io_setup_ {};

// ! code from here

#include <algorithm>
#include <cassert>
#include <vector>

namespace suisen {
template <typename T>
class CoordinateCompressorBuilder {
	public:
		struct Compressor {
			public:
				static constexpr int absent = -1;

				// default constructor
				Compressor() : _xs(std::vector<T>{}) {}
				// Construct from strictly sorted vector
				Compressor(const std::vector<T> &xs) : _xs(xs) {
					assert(is_strictly_sorted(xs));
				}

				// Return the number of distinct keys.
				int size() const {
					return _xs.size();
				}
				// Check if the element is registered.
				bool has_key(const T &e) const {
					return std::binary_search(_xs.begin(), _xs.end(), e);
				}
				// Compress the element. if not registered, returns `default_value`. (default: Compressor::absent)
				int comp(const T &e, int default_value = absent) const {
					const int res = min_geq_index(e);
					return res != size() and _xs[res] == e ? res : default_value;
				}
				// Restore the element from the index.
				T decomp(const int compressed_index) const {
					return _xs[compressed_index];
				}
				// Compress the element. Equivalent to call `comp(e)`
				int operator[](const T &e) const {
					return comp(e);
				}
				// Return the minimum registered value greater than `e`. if not exists, return `default_value`.
				T min_gt(const T &e, const T &default_value) const {
					auto it = std::upper_bound(_xs.begin(), _xs.end(), e);
					return it == _xs.end() ? default_value : *it;
				}
				// Return the minimum registered value greater than or equal to `e`. if not exists, return `default_value`.
				T min_geq(const T &e, const T &default_value) const {
					auto it = std::lower_bound(_xs.begin(), _xs.end(), e);
					return it == _xs.end() ? default_value : *it;
				}
				// Return the maximum registered value less than `e`. if not exists, return `default_value`
				T max_lt(const T &e, const T &default_value) const {
					auto it = std::upper_bound(_xs.rbegin(), _xs.rend(), e, std::greater<T>());
					return it == _xs.rend() ? default_value : *it;
				}
				// Return the maximum registered value less than or equal to `e`. if not exists, return `default_value`
				T max_leq(const T &e, const T &default_value) const {
					auto it = std::lower_bound(_xs.rbegin(), _xs.rend(), e, std::greater<T>());
					return it == _xs.rend() ? default_value : *it;
				}
				// Return the compressed index of the minimum registered value greater than `e`. if not exists, return `compressor.size()`.
				int min_gt_index(const T &e) const {
					return std::upper_bound(_xs.begin(), _xs.end(), e) - _xs.begin();
				}
				// Return the compressed index of the minimum registered value greater than or equal to `e`. if not exists, return `compressor.size()`.
				int min_geq_index(const T &e) const {
					return std::lower_bound(_xs.begin(), _xs.end(), e) - _xs.begin();
				}
				// Return the compressed index of the maximum registered value less than `e`. if not exists, return -1.
				int max_lt_index(const T &e) const {
					return int(_xs.rend() - std::upper_bound(_xs.rbegin(), _xs.rend(), e, std::greater<T>())) - 1;
				}
				// Return the compressed index of the maximum registered value less than or equal to `e`. if not exists, return -1.
				int max_leq_index(const T &e) const {
					return int(_xs.rend() - std::lower_bound(_xs.rbegin(), _xs.rend(), e, std::greater<T>())) - 1;
				}
			private:
				std::vector<T> _xs;
				static bool is_strictly_sorted(const std::vector<T> &v) {
					return std::adjacent_find(v.begin(), v.end(), std::greater_equal<T>()) == v.end();
				}
		};
		CoordinateCompressorBuilder() : _xs(std::vector<T>{}) {}
		explicit CoordinateCompressorBuilder(const std::vector<T> &xs) : _xs(xs) {}
		explicit CoordinateCompressorBuilder(std::vector<T> &&xs) : _xs(std::move(xs)) {}
		template <typename Gen, constraints_t<is_same_as_invoke_result<T, Gen, int>> = nullptr>
		CoordinateCompressorBuilder(const int n, Gen generator) {
			reserve(n);
			for (int i = 0; i < n; ++i) push(generator(i));
		}
		// Attempt to preallocate enough memory for specified number of elements.
		void reserve(int n) {
			_xs.reserve(n);
		}
		// Add data.
		void push(const T &first) {
			_xs.push_back(first);
		}
		// Add data.
		void push(T &&first) {
			_xs.push_back(std::move(first));
		}
		// Add data in the range of [first, last). 
		template <typename Iterator>
		auto push(const Iterator &first, const Iterator &last) -> decltype(std::vector<T>{}.push_back(*first), void()) {
			for (auto it = first; it != last; ++it) _xs.push_back(*it);
		}
		// Add all data in the container. Equivalent to `push(iterable.begin(), iterable.end())`.
		template <typename Iterable>
		auto push(const Iterable &iterable) -> decltype(std::vector<T>{}.push_back(*iterable.begin()), void()) {
			push(iterable.begin(), iterable.end());
		}
		// Add data.
		template <typename ...Args>
		void emplace(Args &&...args) {
			_xs.emplace_back(std::forward<Args>(args)...);
		}
		// Build compressor.
		auto build() {
			std::sort(_xs.begin(), _xs.end()), _xs.erase(std::unique(_xs.begin(), _xs.end()), _xs.end());
			return Compressor {_xs};
		}
		// Build compressor from vector.
		static auto build(const std::vector<T> &xs) {
			return CoordinateCompressorBuilder(xs).build();
		}
		// Build compressor from vector.
		static auto build(std::vector<T> &&xs) {
			return CoordinateCompressorBuilder(std::move(xs)).build();
		}
		// Build compressor from generator.
		template <typename Gen, constraints_t<is_same_as_invoke_result<T, Gen, int>> = nullptr>
		static auto build(const int n, Gen generator) {
			return CoordinateCompressorBuilder<T>(n, generator).build();
		}
	private:
		std::vector<T> _xs;
};

} // namespace suisen

#ifdef _MSC_VER
#  include <intrin.h>
#else
#  include <x86intrin.h>
#endif

#include <cstdint>
#include <iostream>

namespace suisen {
	template <typename T, std::enable_if_t<std::is_integral_v<T>, std::nullptr_t> = nullptr>
	struct all_subset {
		struct all_subset_iter {
			const T s; T t;
			constexpr all_subset_iter(T s) : s(s), t(s + 1) {}
			constexpr auto operator*() const { return t; }
			constexpr auto operator++() {}
			constexpr auto operator!=(std::nullptr_t) { return t ? (--t &= s, true) : false; }
		};
		T s;
		constexpr all_subset(T s) : s(s) {}
		constexpr auto begin() { return all_subset_iter(s); }
		constexpr auto end() { return nullptr; }
	};

	// iterator over T s.t. T is subset of S and |T| = k
	struct all_subset_k {
		struct all_subset_k_iter {
			const uint32_t n, k, s;
			uint32_t t;
			__attribute__((target("avx2")))
			all_subset_k_iter(uint32_t s, uint32_t k) : n(uint32_t(1) << _mm_popcnt_u32(s)), k(k), s(s), t((uint32_t(1) << k) - 1) {}
			__attribute__((target("bmi2")))
			auto operator*() const { return _pdep_u32(t, s); }
			__attribute__((target("bmi")))
			auto operator++() {
				if (k == 0) {
					t = std::numeric_limits<uint32_t>::max();
				} else {
					uint32_t y = t + _blsi_u32(t); // t + (-t & t)
					t = y | ((y ^ t) >> _tzcnt_u32(t << 2));
				}
			}
			auto operator!=(std::nullptr_t) const { return t < n; }
		};
		uint32_t s, k;
		all_subset_k(uint32_t s, uint32_t k) : s(s), k(k) {
			assert(s != std::numeric_limits<uint32_t>::max());
		}
		auto begin() { return all_subset_k_iter(s, k); }
		auto end() { return nullptr; }
	};

	struct all_subset_k_64 {
		struct all_subset_k_iter_64 {
			const uint64_t n, s;
			const uint32_t k;
			uint64_t t;
			__attribute__((target("avx2")))
			all_subset_k_iter_64(uint64_t s, uint32_t k) : n(uint64_t(1) << _mm_popcnt_u64(s)), s(s), k(k), t((uint64_t(1) << k) - 1) {}
			__attribute__((target("bmi2")))
			auto operator*() const { return _pdep_u64(t, s); }
			__attribute__((target("bmi")))
			auto operator++() {
				if (k == 0) {
					t = std::numeric_limits<uint64_t>::max();
				} else {
					uint64_t y = t + _blsi_u64(t);
					t = y | ((y ^ t) >> _tzcnt_u64(t << 2));
				}
			}
			auto operator!=(std::nullptr_t) const { return t < n; }
		};
		uint64_t s;
		uint32_t k;
		all_subset_k_64(uint64_t s, uint32_t k) : s(s), k(k) {
			assert(s != std::numeric_limits<uint64_t>::max());
		}
		auto begin() { return all_subset_k_iter_64(s, k); }
		auto end() { return nullptr; }
	};

	struct all_setbit {
		struct all_setbit_iter {
			uint32_t s;
			all_setbit_iter(uint32_t s) : s(s) {}
			__attribute__((target("bmi")))
			auto operator*() { return _tzcnt_u32(s); }
			__attribute__((target("bmi")))
			auto operator++() { s = __blsr_u32(s); }
			auto operator!=(std::nullptr_t) { return s; }
		};
		uint32_t s;
		all_setbit(uint32_t s) : s(s) {}
		auto begin() { return all_setbit_iter(s); }
		auto end() { return nullptr; }
	};

	struct all_setbit_64 {
		struct all_setbit_iter_64 {
			uint64_t s;
			all_setbit_iter_64(uint64_t s) : s(s) {}
			__attribute__((target("bmi")))
			auto operator*() { return _tzcnt_u64(s); }
			__attribute__((target("bmi")))
			auto operator++() { s = __blsr_u64(s); }
			auto operator!=(std::nullptr_t) { return s; }
		};
		uint64_t s;
		all_setbit_64(uint64_t s) : s(s) {}
		auto begin() { return all_setbit_iter_64(s); }
		auto end() { return nullptr; }
	};
} // namespace suisen

void solve() {
	input(int, n, m);
	if (n == 0 and m == 0) exit(0);

	CoordinateCompressorBuilder<int> builder;

	vector<int> h(n), c(n);
	h[0] = 0, c[0] = 0;
	rep(i, 1, n - 1) read(c[i], h[i]);
	h[n - 1] = 1000, c[n - 1] = 0;

	rep(i, n) builder.push(h[i]);
	const auto cmp = builder.build();
	const int l = cmp.size();
	vector<long long> lev_sets(l);

	rep(i, n) {
		h[i] = cmp[h[i]];
		lev_sets[h[i]] |= 1LL << i;
	}

	vector g(l, vector<vector<pair<int, int>>>(n));
	vector rev_g(l, vector<vector<pair<int, int>>>(n));
	vector<vector<pair<int, int>>> asc(n), rev_dsc(n);
	loop(m) {
		input(int, u, v, w);
		--u, --v;
		if (h[u] < h[v]) {
			asc[u].emplace_back(v, w);
		} else if (h[u] > h[v]) {
			rev_dsc[v].emplace_back(u, w);
		} else {
			g[h[u]][u].emplace_back(v, w);
			rev_g[h[u]][v].emplace_back(u, w);
		}
	}

	static constexpr int inf = numeric_limits<int>::max() / 4;
	vector dp(l, vector(n, vector<int>(n, inf)));
	dp[0][0][0] = 0;
	rep(i, l - 1) {
		vector<vector<int>> dists(n);
		rep(j, n) if (kth_bit(lev_sets[i], j)) {
			vector<int> dist(n, inf);
			pq_greater<pair<int, int>> pq;
			pq.emplace(dist[j] = c[j], j);
			while (pq.size()) {
				auto [du, u] = pq.top();
				pq.pop();
				if (dist[u] != du) continue;
				for (auto [v, w] : g[i][u]) {
					if (chmin(dist[v], du + w + c[v])) {
						pq.emplace(dist[v], v);
					}
				}
			}
			dists[j].swap(dist);
		}
		vector<vector<int>> rev_dists(n);
		rep(k, n) if (kth_bit(lev_sets[i], k)) {
			vector<int> dist(n, inf);
			pq_greater<pair<int, int>> pq;
			pq.emplace(dist[k] = c[k], k);
			while (pq.size()) {
				auto [du, u] = pq.top();
				pq.pop();
				if (dist[u] != du) continue;
				for (auto [v, w] : rev_g[i][u]) {
					if (chmin(dist[v], du + w + c[v])) {
						pq.emplace(dist[v], v);
					}
				}
			}
			rev_dists[k].swap(dist);
		}

		CoordinateCompressorBuilder<int> builder_i;
		for (int v : all_setbit_64(lev_sets[i])) {
			builder_i.push(v);
		}
		const auto cmp_i = builder_i.build();
		const int siz = cmp_i.size();

		vector init_wf(siz, vector<int>(siz, inf));
		rep(cx, siz) init_wf[cx][cx] = 0;
		rep(cx, siz) for (auto [y, w] : g[i][cmp_i.decomp(cx)]) {
			init_wf[cx][cmp_i[y]] = w;
		}

		map<long long, vector<vector<int>>> wfs;
		for (auto s : all_subset(lev_sets[i])) {
			auto wf = init_wf;
			rep(cz, siz) if (kth_bit(s, cmp_i.decomp(cz))) {
				rep(cx, siz) if (kth_bit(s, cmp_i.decomp(cx))) {
					rep(cy, siz) if (kth_bit(s, cmp_i.decomp(cy))) {
						chmin(wf[cx][cy], wf[cx][cz] + wf[cz][cy]);
					}
				}
			}
			wfs[s] = move(wf);
		}

		rep(j, n) rep(k, n) {
			if (dp[i][j][k] == inf) continue;
			assert(h[j] >= i and h[k] >= i);

			if (kth_bit(lev_sets[i], j) and kth_bit(lev_sets[i], k)) {
				const int cj = cmp_i[j], ck = cmp_i[k];
				for (auto s : all_subset(lev_sets[i] & ~((1LL << j) | (1LL << k)))) {
					s |= 1LL << j, s |= 1LL << k;
					
					int fc = 0;
					for (int v : all_setbit_64(s)) fc += c[v];

					const auto &wf = wfs.at(s);
					for (auto x : all_setbit_64(s)) for (auto y : all_setbit_64(s)) {
						const int cx = cmp_i[x], cy = cmp_i[y];
						for (auto [nj, wj] : asc[x]) for (auto [nk, wk] : rev_dsc[y]) {
							chmin(dp[i + 1][nj][nk], dp[i][j][k] + wf[cj][cx] + wf[cy][ck] + fc + wj + wk);
						}
					}
				}
			} else if (kth_bit(lev_sets[i], j)) {
				rep(x, n) if (dists[j][x] != inf) {
					for (auto [nj, w] : asc[x]) {
						chmin(dp[i + 1][nj][k], dp[i][j][k] + dists[j][x] + w);
					}
				}
			} else if (kth_bit(lev_sets[i], k)) {
				rep(y, n) if (rev_dists[k][y] != inf) {
					for (auto [nk, w] : rev_dsc[y]) {
						chmin(dp[i + 1][j][nk], dp[i][j][k] + rev_dists[k][y] + w);
					}
				}
			} else {
				chmin(dp[i + 1][j][k], dp[i][j][k]);
			}
		}
	}

	print(dp[l - 1][n - 1][n - 1] == inf ? -1 : dp[l - 1][n - 1][n - 1]);
	// cout.flush();
}

int main() {
	while (true) solve();
	return 0;
}


