#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <map>
#include <memory>
#include <numeric>
#include <optional>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <tuple>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

/* macro */

#define rep(i, a, n) for (int i = (int)(a); i < (int)(n); i++)
#define rrep(i, a, n) for (int i = ((int)(n - 1)); i >= (int)(a); i--)
#define Rep(i, a, n) for (i64 i = (i64)(a); i < (i64)(n); i++)
#define RRep(i, a, n) for (i64 i = ((i64)(n - i64(1))); i >= (i64)(a); i--)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define Bit(n) (1LL << (n))

/* macro end */

/* template */

namespace ebi {

#ifdef LOCAL
#define debug(...)                                                      \
    std::cerr << "LINE: " << __LINE__ << "  [" << #__VA_ARGS__ << "]:", \
        debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

void debug_out() { std::cerr << std::endl; }

template <typename Head, typename... Tail>
void debug_out(Head h, Tail... t) {
    std::cerr << " " << h;
    if (sizeof...(t) > 0) std::cout << " :";
    debug_out(t...);
}

template <typename T1, typename T2>
std::ostream &operator<<(std::ostream &os, const std::pair<T1, T2> &pa) {
    return os << pa.first << " " << pa.second;
}

template <typename T1, typename T2>
std::istream &operator>>(std::istream &os, std::pair<T1, T2> &pa) {
    return os >> pa.first >> pa.second;
}

template <typename T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &vec) {
    for (std::size_t i = 0; i < vec.size(); i++)
        os << vec[i] << (i + 1 == vec.size() ? "" : " ");
    return os;
}

template <typename T>
std::istream &operator>>(std::istream &os, std::vector<T> &vec) {
    for (T &e : vec) std::cin >> e;
    return os;
}

template <typename T>
std::ostream &operator<<(std::ostream &os, const std::optional<T> &opt) {
    if (opt) {
        os << opt.value();
    } else {
        os << "invalid value";
    }
    return os;
}

using std::size_t;
using i32 = std::int32_t;
using u32 = std::uint32_t;
using i64 = std::int64_t;
using u64 = std::uint64_t;

template <class T, T init>
auto make_vector(int n) {
    return std::vector<T>(n, init);
}

template <class T, T init, typename Head, typename... Tail>
auto make_vector(Head n, Tail... ts) {
    return std::vector(n, make_vector<T, init>(ts...));
}

template <class T>
inline bool chmin(T &a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
inline bool chmax(T &a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
T pow(T x, i64 n) {
    T res = 1;
    while (n > 0) {
        if (n & 1) res = res * x;
        x = x * x;
        n >>= 1;
    }
    return res;
}

template <class T>
T mod_pow(T x, i64 n, i64 mod) {
    T res = 1;
    while (n > 0) {
        if (n & 1) res = (res * x) % mod;
        x = (x * x) % mod;
        n >>= 1;
    }
    return res;
}

template <class T>
T scan() {
    T val;
    std::cin >> val;
    return val;
}

template <class T>
struct Edge {
    int to;
    T cost;
    Edge(int _to, T _cost = 1) : to(_to), cost(_cost) {}
};

template <class T>
struct Graph : std::vector<std::vector<Edge<T>>> {
    using std::vector<std::vector<Edge<T>>>::vector;
    void add_edge(int u, int v, T w, bool directed = false) {
        (*this)[u].emplace_back(v, w);
        if (directed) return;
        (*this)[v].emplace_back(u, w);
    }
};

struct graph : std::vector<std::vector<int>> {
    using std::vector<std::vector<int>>::vector;
    void add_edge(int u, int v, bool directed = false) {
        (*this)[u].emplace_back(v);
        if (directed) return;
        (*this)[v].emplace_back(u);
    }
};

constexpr i64 LNF = std::numeric_limits<i64>::max() / 4;

constexpr int INF = std::numeric_limits<int>::max() / 2;

const std::vector<int> dy = {1, 0, -1, 0, 1, 1, -1, -1};
const std::vector<int> dx = {0, 1, 0, -1, 1, -1, 1, -1};

}  // namespace ebi

namespace ebi {

void main_() {
    int n, k, s;
    while (std::cin >> n >> k >> s, !(n == 0 && k == 0 && s == 0)) {
        std::vector<std::tuple<i64, i64, i64>> ps(n);
        for (auto &[x, y, z] : ps) {
            std::cin >> x >> y >> z;
        }
        if(k == 1) {
            std::cout << i64(s) * i64(s) * 6 << '\n';
            continue;
        }
        Graph<i64> g(n);
        auto f = [&](int i, int j) -> std::vector<std::tuple<i64, i64, i64>> {
            std::vector<std::tuple<i64, i64, i64>> ret;
            auto [x, y, z] = ps[i];
            auto [nx, ny, nz] = ps[j];
            rep(a, 0, 2) {
                rep(b, 0, 2) {
                    rep(c, 0, 2) {
                        int px = nx + s * a;
                        int py = ny + s * b;
                        int pz = nz + s * c;
                        if (x <= px && px <= x + s && y <= py && py <= y + s &&
                            z <= pz && pz <= z + s) {
                            ret.emplace_back(px, py, pz);
                        }
                    }
                }
            }
            return ret;
        };
        rep(i, 0, n) {
            for (int j = i + 1; j < n; j++) {
                auto ret = f(i, j);
                if (ret.size() == 0) continue;
                auto rhs = f(j, i);
                assert(rhs.size() == ret.size());
                ret.insert(ret.end(), all(rhs));

                i64 res = 0;


                if (ret.size() == 2) {
                    auto [x, y, z] = ret[0];
                    auto [nx, ny, nz] = ret[1];
                    res = 2 * (std::abs(nx - x) * std::abs(ny - y) +
                               std::abs(ny - y) * std::abs(nz - z) +
                               std::abs(nz - z) * std::abs(nx - x));
                } else if (ret.size() == 4 || ret.size() == 8) {
                    auto [x, y, z] = ret[0];
                    int idx = ret.size() / 2;
                    while (idx < (int)ret.size()) {
                        auto [nx, ny, nz] = ret[idx];
                        if (x == nx || y == ny || z == nz) {
                            idx++;
                        }
                        else {
                            break;
                        }
                    }
                    auto [nx, ny, nz] = ret[idx];
                    res = 2 * (std::abs(nx - x) * std::abs(ny - y) +
                               std::abs(ny - y) * std::abs(nz - z) +
                               std::abs(nz - z) * std::abs(nx - x));
                } else {
                    assert(0);
                }
                g.add_edge(i, j, res);
            }
        }
        std::vector<int> seen(n, -1);
        i64 ans = -1;
        std::vector<i64> a;
        int root = -1;
        auto dfs = [&](auto &&self, int v, int par = -1) -> void {
            seen[v] = 1;
            for (auto [nv, cost] : g[v]) {
                if (nv == par) continue;
                if(nv == root) {
                    a.emplace_back(cost);
                    continue;
                }
                if (seen[nv] < 0) {
                    a.emplace_back(cost);
                    self(self, nv, v);
                }
            }
            return;
        };
        rep(i, 0, n) {
            if (g[i].size() == 1 && seen[i] < 0) {
                a.clear();
                dfs(dfs, i);
                if ((int)a.size() < k - 1) continue;
                i64 sum = 0;
                rep(j,0,k-1) {
                    sum += a[j];
                }
                chmax(ans, sum);
                int l = 0, r = k-1;
                while(r < (int)a.size()) {
                    sum -= a[l++];
                    sum += a[r++];
                    chmax(ans, sum);
                }
            }
        }
        rep(i,0,n) {
            if(seen[i] < 0) {
                a.clear();
                root = i;
                dfs(dfs, i);
                if((int)a.size() < k-1) continue;
                if((int)a.size() == k) {
                    chmax(ans, std::accumulate(all(a), i64(0)));
                    continue;
                }
                {
                    auto b = a;
                    a.insert(a.end(), all(b));
                }
                i64 sum = 0;
                rep(j,0,k-1) {
                    sum += a[j];
                }
                int l = 0, r = k-1;
                while(r < (int)a.size()) {
                    sum -= a[l++];
                    sum += a[r++];
                    chmax(ans, sum);
                }
            }
        }
        if(ans > 0) {
            ans = i64(s) * i64(s) * 6 * k - ans;
        }
        std::cout << ans << '\n';
    }
}

}  // namespace ebi

int main() {
    std::cout << std::fixed << std::setprecision(15);
    std::cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    int t = 1;
    // std::cin >> t;
    while (t--) {
        ebi::main_();
    }
    return 0;
}
