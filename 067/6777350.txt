#include<stdio.h>

#define MAX 500000
#define INFTY 1000000000

int x;              //比較回数をカウントする変数//
int L[MAX], R[MAX];

void merge( int S[], int n, int left, int mid, int right )
{
	int i, j, k;
	int n1 = mid - left;     //左側の要素の個数を表す変数//
	int n2 = right -mid;     //右側の要素の個数を表す変数//
	
	//配列に要素の代入//
	for( i = 0; i < n1; i++ )
	{
		L[i] = S[left + i];
	}
	for( i = 0; i < n2; i++ )
	{
		R[i] = S[mid + i];
	}
	
	i = 0;
	j = 0;
	
	//番兵の配置//
	L[n1] = INFTY;
	R[n2] = INFTY;
	
	//すべての要素で配列Rと配列Lの比較//
	for( k = left; k < right; k++ )
	{
		x++;                //比較回数のカウント//
		
		if( L[i] <= R[j])
		{
			S[k] = L[i++];
		}
		else
		{
			S[k] = R[j++];
		}
	}
}

void mergeSort( int S[], int n, int left, int right )
{
	int mid; 
	
	if( left+1 < right )
	{
		mid = (left + right)/2;
		mergeSort( S, n, left, mid );
		mergeSort( S, n, mid, right );
		merge( S, n, left, mid, right );
	}
}
	
int main( void )
{
	int n, i;
	int S[MAX];
	
	x = 0;
	
	scanf( "%d", &n );
	
	//配列に全ての要素を入力//
	for( i = 0; i < n; i++ )
	{
		scanf( "%d", &S[i] );
	}
	
	mergeSort( S, n, 0, n );
	
	//配列の全ての要素を出力//
	for( i = 0; i < n-1; i++ )
	{
		printf( "%d ", S[i] );
	}
	printf( "%d\n", S[n-1] );
	
	//比較回数の出力//
	printf( "%d\n", x );

	return 0;
}
