#include <iostream>
#include <queue>
using namespace std;

int V[100][100];
int visited[100];
int D[100];
int n;
int depth = 0;

void bfs(int index){
    queue<int> q;
    q.push(index);
    D[index] = 0;
    while(!q.empty()){
        int next = q.front();
        q.pop();
        for(int i=0;i<n;i++){
            if(V[next][i]==1 && !visited[i]){
                visited[i] = 1;
                D[i] = D[next]+1;
                q.push(i);
            }
        }
    }

}

int main(){
    cin >> n;

    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++) V[i][j] = 0;
    }
    for(int i=0;i<n;i++){
        int a, c;
        cin >> a >> c;
        for(int j=0;j<c;j++){
            int k;
            cin >> k;
            V[a-1][k-1] = 1;
        }
    }

    for(int i=0;i<n;i++) D[i] = -1;
    for(int i=0;i<n;i++) visited[i] = 0;

    bfs(0);
    for(int i=0;i<n;i++) cout << i+1 << " " << D[i] << endl;


    return 0;
}
