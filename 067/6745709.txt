#pragma region

#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <numeric> // gcd, lcm
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
using namespace std;

using ull = unsigned long long;
using ll = long long;
using vi = vector<int>;
using vll = vector<ll>;
using vvi = vector<vi>;
using vvll = vector<vll>;
using vs = vector<string>;
using pii = pair<int,int>;

#pragma endregion

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n; cin >> n;
    vll x1(n), y1(n), x2(n), y2(n), cx(2*n), cy(2*n);
    for(int i=0; i<n; ++i){
        cin >> x1[i] >> y1[i] >> x2[i] >> y2[i];
        cx[2*i] = x1[i], cx[2*i+1] = x2[i];
        cy[2*i] = y1[i], cy[2*i+1] = y2[i];
    }
    sort(cx.begin(), cx.end());
    sort(cy.begin(), cy.end());
    cx.erase(unique(cx.begin(), cx.end()), cx.end());
    cy.erase(unique(cy.begin(), cy.end()), cy.end());
    for(int i=0; i<n; ++i){
        x1[i] = lower_bound(cx.begin(), cx.end(), x1[i]) - cx.begin();
        x2[i] = lower_bound(cx.begin(), cx.end(), x2[i]) - cx.begin();
        y1[i] = lower_bound(cy.begin(), cy.end(), y1[i]) - cy.begin();
        y2[i] = lower_bound(cy.begin(), cy.end(), y2[i]) - cy.begin();
    }
    vvi g(cx.size()+1, vi(cy.size()+1, 0));
    for(int i=0; i<n; ++i){
        g[x1[i]][y1[i]]++; g[x1[i]][y2[i]]--;
        g[x2[i]][y1[i]]--; g[x2[i]][y2[i]]++;
    }
    for(int x=0; x<cx.size(); ++x){
        for(int y=0; y<cy.size(); ++y){
            g[x][y+1] += g[x][y];
        }
    }
    for(int x=0; x<cx.size(); ++x){
        for(int y=0; y<cy.size(); ++y){
            g[x+1][y] += g[x][y];
        }
    }
    ll ans = 0;
    for(int x=0; x<cx.size(); ++x){
        for(int y=0; y<cy.size(); ++y){
            if(g[x][y]) ans += (cx[x+1] - cx[x]) * (cy[y+1] - cy[y]);
        }
    }
    cout << ans << endl;
    return 0;
}
