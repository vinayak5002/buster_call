#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, s, t) for (int i = (int)(s); i < (int)(t); ++i)
#define revrep(i, t, s) for (int i = (int)(t)-1; i >= (int)(s); --i)
#define all(x) begin(x), end(x)
template <typename T> bool chmax(T& a, const T& b) { return a < b ? (a = b, 1) : 0; }
template <typename T> bool chmin(T& a, const T& b) { return a > b ? (a = b, 1) : 0; }

template <typename T, typename U>
ostream& operator<<(ostream& os, const pair<T, U>& p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);

    int N;
    cin >> N;
    vector<pair<ll, ll>> pts(N);
    for (auto& p : pts) cin >> p.first >> p.second;
    map<tuple<ll, ll, ll>, int> cnt;
    // collinear
    set<pair<ll, ll>> st;
    rep(i,1,N) {
        auto [x0, y0] = pts[0];
        auto [xi, yi] = pts[i];
        ll dx = xi-x0, dy = yi-y0;
        if (dy < 0) dx *= -1, dy *= -1;
        assert(dx != 0 || dy != 0);
        ll g = gcd(dx, dy);
        dx /= g;
        dy /= g;
        st.insert({dx, dy});
    }
    if (st.size() == 1) {
        cout << "No" << endl;
        return 0;
    }
    rep(i,0,N) rep(j,i+1,N) {
        auto [xi, yi] = pts[i];
        auto [xj, yj] = pts[j];
        ll dx = xj-xi, dy = yj-yi;
        if (dy < 0) dx *= -1, dy *= -1;
        ll g = gcd(dx, dy);
        dx /= g;
        dy /= g;
        ++cnt[{dx*2, dy*2, dx*(xi+xj)+dy*(yi+yj)}];
    }
    bool ans = false;
    for (auto& p : cnt) {
        if (N % 2 == 0) {
            if (p.second == N/2) {
                ans = true;
                break;
            } else if (p.second == (N-2)/2) {
                auto [a, b, c] = p.first;
                int cnt = 0;
                for (auto [x, y] : pts) {
                    if (a*x+b*y==c) {
                        ++cnt;
                    }
                }
                if (cnt >= 2) {
                    ans = true;
                    break;
                }
            }
        } else {
            if (p.second == (N-1)/2) {
                auto [a, b, c] = p.first;
                int cnt = 0;
                for (auto [x, y] : pts) {
                    if (a*x+b*y==c) {
                        ++cnt;
                    }
                }
                if (cnt >= 1) {
                    ans = true;
                    break;
                }
            }

        }
    }
    cout << (ans ? "Yes" : "No") << endl;
}
