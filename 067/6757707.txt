import sys
input = sys.stdin.readline

from math import sqrt
from collections import deque


def Eratosthenes(n):
    """n未満の素数列挙 """
    if n < 4:
        return [] if n <= 2 else [2]
    n, correction = n - n % 6 + 6, 2 - (n % 6 > 1)
    sieve = [True] * (n // 3)
    for i in range(1, int(sqrt(n)) // 3 + 1):
        if sieve[i]:
            k = 3 * i + 1 | 1
            sieve[k * k // 3::2 * k] = [False] * ((n // 6 - k * k // 6 - 1) // k + 1)
            sieve[k * (k - 2 * (i & 1) + 4) // 3::2 * k] = [False] * \
                ((n // 6 - k * (k - 2 * (i & 1) + 4) // 6 - 1) // k + 1)

    # return [2, 3] + [3 * i + 1 | 1 for i in range(1, n // 3 - correction) if sieve[i]]

    # x が素数か判定したいとき
    is_prime = [False] * n
    is_prime[2] = True
    is_prime[3] = True
    for i in range(1, n // 3 - correction):
        if sieve[i]:
            is_prime[3 * i + 1 | 1] = True
    return is_prime


def find(k):
    for i in range(N):
        for j in range(N):
            if a[i][j] == k:
                return i, j


def debug(arr):
    for i in range(N // 2 - 35, N // 2 + 35):
        for j in range(N // 2 - 35, N // 2 + 35):
            print(str(arr[i][j]).ljust(4), end=" ")
        print()


N = 1005
INF = 10**6 + 10
a = [[INF] * N for _ in range(N)]
x, y = N // 2, N // 2
a[x][y] = 1
y += 1
a[x][y] = 2
for i in range(3, 10**6 + 1):
    if a[x][y - 1] < INF:
        if a[x - 1][y] == INF:
            x -= 1
        else:
            y += 1
    elif a[x + 1][y] < INF:
        if a[x][y - 1] == INF:
            y -= 1
        else:
            x -= 1
    elif a[x][y + 1] < INF:
        if a[x + 1][y] == INF:
            x += 1
        else:
            y -= 1
    else:
        if a[x][y + 1] == INF:
            y += 1
        else:
            x += 1

    a[x][y] = i

es = Eratosthenes(10 ** 6 + 10)
res = []

while True:
    m, n = map(int, input().split())
    if m == n == 0:
        break
    x, y = find(n)
    b = [[0] * N for _ in range(N)]
    c = [[0] * N for _ in range(N)]
    d = [[0] * N for _ in range(N)]

    if es[n]:
        b[x][y] = 1
        c[x][y] = n
    else:
        b[x][y] = 0
    que = deque()
    que.append((x, y))
    while que:
        x, y = que.popleft()
        for i in range(1, -2, -1):
            t = a[x + 1][y + i]
            if t <= m:
                if es[t]:
                    if b[x + 1][y + i] <= b[x][y] + 1:
                        c[x + 1][y + i] = max(t, c[x + 1][y + i])
                    if (b[x + 1][y + i] <= b[x][y] + 1 and d[x + 1][y + i] == 0) or b[x + 1][y + i] < b[x][y] + 1:
                        b[x + 1][y + i] = b[x][y] + 1
                        d[x + 1][y + i] = 1
                        que.appendleft((x + 1, y + i))

                else:
                    if b[x + 1][y + i] <= b[x][y]:
                        c[x + 1][y + i] = max(c[x][y], c[x + 1][y + i])
                    if (b[x + 1][y + i] <= b[x][y] and d[x + 1][y + i] == 0) or b[x + 1][y + i] < b[x][y]:
                        b[x + 1][y + i] = b[x][y]
                        c[x + 1][y + i] = c[x][y]
                        d[x + 1][y + i] = 1
                        que.append((x + 1, y + i))
    # debug(a)
    # print()
    # debug(c)
    # print()
    # debug(b)
    ans = -1
    idx = -1

    for i in range(N):
        for j in range(N):
            if ans == b[i][j]:
                if idx < c[i][j]:
                    idx = c[i][j]
            if ans < b[i][j]:
                ans = b[i][j]
                idx = c[i][j]
    if ans == 0:
        idx = 0

    res.append((ans, idx))


def print2D(matrix):
    print("\n".join(" ".join(map(str, v)) for v in matrix))


print2D(res)

