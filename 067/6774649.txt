// -*- coding:utf-8-unix -*-

// use proconio::input;
// use proconio::marker::{Chars, Usize1};
use std::cmp::Reverse;
use std::collections::{BTreeMap, BTreeSet, BinaryHeap, VecDeque};
use std::io::{stdin, BufRead};

#[allow(unused_macros)]
macro_rules! print_identifier {
    ($($t:expr),*) => {
        $(
            println!("{}=>{:?}", stringify!($t), $t);
        )*
    };
    ($($t:expr),+,) => {
        print_identifier!($($t),*);
    }
}

struct UnionFind {
    ranks: Vec<usize>,
    p: Vec<usize>,
}

impl UnionFind {
    fn new(n: usize) -> Self {
        let mut parents = vec![0; n];
        for i in 0..n {
            parents[i] = i;
        }
        UnionFind {
            ranks: vec![0; n],
            p: parents,
        }
    }
    fn unite(&mut self, x: usize, y: usize) {
        let l = self.find_set(x);
        let r = self.find_set(y);
        self.link(l, r);
    }
    fn link(&mut self, x: usize, y: usize) {
        if self.ranks[x] > self.ranks[y] {
            self.p[y] = x;
        } else {
            self.p[x] = y;
            if self.ranks[x] == self.ranks[y] {
                self.ranks[y] += 1;
            }
        }
    }

    fn same(&mut self, x: usize, y: usize) -> bool {
        self.find_set(x) == self.find_set(y)
    }
    fn find_set(&mut self, x: usize) -> usize {
        if x != self.p[x] {
            self.p[x] = self.find_set(self.p[x]);
        }
        self.p[x]
    }
}

fn main() {
    let stdin = stdin();
    let stdin = stdin.lock();
    let mut scan = Scanner::new(stdin);
    let n: usize = scan.next();
    let q: usize = scan.next();
    let mut u = UnionFind::new(n);
    for _ in 0..q {
        let c: usize = scan.next();
        let x: usize = scan.next();
        let y: usize = scan.next();
        match c {
            0 => {
                u.unite(x, y);
            }
            1 => println!("{}", u.same(x, y) as usize),
            _ => unreachable!(),
        }
    }
}

struct Scanner<R> {
    reader: R,
    buffer: Vec<String>,
}

impl<R> Scanner<R> {
    fn new(reader: R) -> Self {
        Scanner {
            reader,
            buffer: Vec::new(),
        }
    }
}

impl<R> Scanner<R>
where
    R: BufRead,
{
    fn next<T>(&mut self) -> T
    where
        T: std::str::FromStr,
    {
        loop {
            if let Some(token) = self.buffer.pop() {
                return token.parse().ok().expect("Failed to parse");
            }
            let mut input = String::new();
            self.reader.read_line(&mut input).expect("Failed to read");
            self.buffer
                .extend(input.split_whitespace().rev().map(String::from));
        }
    }
}

