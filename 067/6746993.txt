#include <bits/stdc++.h>
using namespace std;

#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

/*struct Fast {
  Fast() {
    std::cin.tie(0);
    ios::sync_with_stdio(false);
  }
} fast;
*/

using Card = vector<pair<char, int>>;

int partition(Card &A, const int p, const int r) {
  const int x = A[r].second;
  int i = p - 1;
  for (int j = p; j < r; j++) {
    if (A[j].second <= x) {
      i++;
      swap(A[i], A[j]);
    }
  }
  swap(A[i + 1], A[r]);
  return i + 1;
}

void quickSort(Card &A, const int p, const int r) {
  if (p < r) {
    const int q = partition(A, p, r);
    quickSort(A, p, q - 1);
    quickSort(A, q + 1, r);
  }
}

void BubbleSort(Card &C, int N) {
  for (int i = 0; i < N; i++) {
    for (int j = N - 1; j > i; j--) {
      if (C[j].second < C[j - 1].second) {
        swap(C[j], C[j - 1]);
      }
    }
  }
}

bool isStable(Card &origin, Card &sorted, int n) {
  BubbleSort(origin, n);
  if (origin != sorted) {
    return false;
  }
  return true;
}

int main() {
  int n;
  scanf("%d", &n);
  Card A(n);
  for (int i = 0; i < n; i++) {
    scanf(" %c %d", &A[i].first, &A[i].second);
  }

  Card origin = A;

  quickSort(A, 0, n - 1);

  if (isStable(origin, A, n)) {
    printf("Stable\n");
  } else {
    printf("Not stable\n");
  }

  for (int i = 0; i < n; i++) {
    printf("%c %d\n", A[i].first, A[i].second);
  }

  return 0;
}

