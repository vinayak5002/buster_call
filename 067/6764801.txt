#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <map>
#include <memory>
#include <numeric>
#include <optional>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <tuple>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

/* macro */

#define rep(i, a, n) for (int i = (int)(a); i < (int)(n); i++)
#define rrep(i, a, n) for (int i = ((int)(n - 1)); i >= (int)(a); i--)
#define Rep(i, a, n) for (i64 i = (i64)(a); i < (i64)(n); i++)
#define RRep(i, a, n) for (i64 i = ((i64)(n - i64(1))); i >= (i64)(a); i--)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define Bit(n) (1LL << (n))

/* macro end */

/* template */

namespace ebi {

#ifdef LOCAL
#define debug(...)                                                      \
    std::cerr << "LINE: " << __LINE__ << "  [" << #__VA_ARGS__ << "]:", \
        debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

void debug_out() { std::cerr << std::endl; }

template <typename Head, typename... Tail>
void debug_out(Head h, Tail... t) {
    std::cerr << " " << h;
    if (sizeof...(t) > 0) std::cout << " :";
    debug_out(t...);
}

template <typename T1, typename T2>
std::ostream &operator<<(std::ostream &os, const std::pair<T1, T2> &pa) {
    return os << pa.first << " " << pa.second;
}

template <typename T1, typename T2>
std::istream &operator>>(std::istream &os, std::pair<T1, T2> &pa) {
    return os >> pa.first >> pa.second;
}

template <typename T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &vec) {
    for (std::size_t i = 0; i < vec.size(); i++)
        os << vec[i] << (i + 1 == vec.size() ? "" : " ");
    return os;
}

template <typename T>
std::istream &operator>>(std::istream &os, std::vector<T> &vec) {
    for (T &e : vec) std::cin >> e;
    return os;
}

template <typename T>
std::ostream &operator<<(std::ostream &os, const std::optional<T> &opt) {
    if (opt) {
        os << opt.value();
    } else {
        os << "invalid value";
    }
    return os;
}

using std::size_t;
using i32 = std::int32_t;
using u32 = std::uint32_t;
using i64 = std::int64_t;
using u64 = std::uint64_t;

template <class T, T init>
auto make_vector(int n) {
    return std::vector<T>(n, init);
}

template <class T, T init, typename Head, typename... Tail>
auto make_vector(Head n, Tail... ts) {
    return std::vector(n, make_vector<T, init>(ts...));
}

template <class T>
inline bool chmin(T &a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
inline bool chmax(T &a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
T pow(T x, i64 n) {
    T res = 1;
    while (n > 0) {
        if (n & 1) res = res * x;
        x = x * x;
        n >>= 1;
    }
    return res;
}

template <class T>
T mod_pow(T x, i64 n, i64 mod) {
    T res = 1;
    while (n > 0) {
        if (n & 1) res = (res * x) % mod;
        x = (x * x) % mod;
        n >>= 1;
    }
    return res;
}

template <class T>
T scan() {
    T val;
    std::cin >> val;
    return val;
}

template <class T>
struct Edge {
    int to;
    T cost;
    Edge(int _to, T _cost = 1) : to(_to), cost(_cost) {}
};

template <class T>
struct Graph : std::vector<std::vector<Edge<T>>> {
    using std::vector<std::vector<Edge<T>>>::vector;
    void add_edge(int u, int v, T w, bool directed = false) {
        (*this)[u].emplace_back(v, w);
        if (directed) return;
        (*this)[v].emplace_back(u, w);
    }
};

struct graph : std::vector<std::vector<int>> {
    using std::vector<std::vector<int>>::vector;
    void add_edge(int u, int v, bool directed = false) {
        (*this)[u].emplace_back(v);
        if (directed) return;
        (*this)[v].emplace_back(u);
    }
};

constexpr i64 LNF = std::numeric_limits<i64>::max() / 4;

constexpr int INF = std::numeric_limits<int>::max() / 2;

const std::vector<int> dy = {1, 0, -1, 0, 1, 1, -1, -1};
const std::vector<int> dx = {0, 1, 0, -1, 1, -1, 1, -1};

}  // namespace ebi

namespace ebi {

void main_() {
    int n,m;
    std::cin >> n >> m;
    std::vector g(n, std::vector<int>(n, INF));
    std::vector<std::tuple<int,int,int>> edges(m);
    for(auto &[s, t, d]: edges) {
        std::cin >> s >> t >> d;
        s--; t--;
        g[s][t] = g[t][s] = d;
    }
    auto bit_dp = [&](int s) -> std::vector<std::vector<int>> {
        std::vector dp(n, std::vector<int>(1<<n, INF));
        std::vector seen(n, std::vector<int>(1<<n, -1));
        seen[s][1<<s] = 1;
        dp[s][1<<s] = 0;
        auto f = [&](auto &&self, int v, int bit) -> int {
            if(seen[v][bit] > 0) return dp[v][bit];
            if(bit == 0) return dp[v][bit];
            rep(i,0,n) {
                if(i == v) continue;
                if((bit >> i) & 1) {
                    if(g[v][i] == INF) continue;
                    chmin(dp[v][bit], self(self, i, bit - (1<<v)) + g[i][v]);
                }
            }
            seen[v][bit] = 1;
            return dp[v][bit];
        };
        rep(i,0,n) {
            rep(bit,0,1<<n) {
                if((bit >> i) & 1) {
                    f(f, i, bit);
                }
            }
        }
        return dp;
    };
    auto dp1 = bit_dp(0);
    auto dpN = bit_dp(n-1);
    rep(i,0,n) {
        rep(bit,0,1<<n) {
            rep(j,0,n) {
                if(!((bit >> j) & 1)) {
                    chmin(dpN[i][bit ^ (1<<j)], dpN[i][bit]);
                }
            }
        }
    }
    std::vector<int> ans(m, INF);
    rep(i,0,m) {
        auto [s, t, d] = edges[i];
        rep(bit, 0, 1<<n) {
            if(dp1[s][bit] == INF || dpN[t][(1<<n) - 1 - bit] == INF) continue;
            chmin(ans[i], dp1[s][bit] + dpN[t][(1<<n) - 1 - bit] + d);
        }
        rep(bit,0,1<<n) {
            if(dp1[t][bit] == INF || dpN[s][(1<<n) - 1 - bit] == INF) continue;
            chmin(ans[i], dp1[t][bit] + dpN[s][(1<<n) - 1 - bit] + d);
        }
    }
    for(auto val: ans) {
        if(val == INF) val = -1;
        std::cout << val << '\n';
    } 
}

}  // namespace ebi

int main() {
    std::cout << std::fixed << std::setprecision(15);
    std::cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    int t = 1;
    // std::cin >> t;
    while (t--) {
        ebi::main_();
    }
    return 0;
}
