# import sys
# import re
# from cmath import inf
# import copy
# from re import A
from itertools import combinations
# from itertools import permutations
# import bisect

# import numpy as np

def input_strmat(lines=1):
    dat = []
    for l in range(lines):
        dat += [list(input().split())]
    return dat


def input_str(lines=1):
    if lines == 1:
        return list(input().split())
    dat = []
    for l in range(lines):
        dat += [list(input().split())[0]]
    return dat


def input_intmat(lines=1):
    dat = []
    for l in range(lines):
        dat += [list(map(int, input().split()))]
    return dat


def input_floatmat(lines=1):
    dat = []
    for l in range(lines):
        dat += [list(map(float, input().split()))]
    return dat


def input_int(lines=1):
    if lines == 1:
        return list(map(int, input().split()))
    dat = []
    for l in range(lines):
        dat += [list(map(int, input().split()))[0]]
    return dat


def dist(a, b):
    return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) ** 0.5

dat=[]
while True:
    [n,x] = input_int()
    if n==0 & x==0:
        break
    dat+=[[n,x]]
# print(dat)

for d in dat:
    c=0
    for i in combinations(range(1,d[0]+1),3):
        if sum(i)==d[1]:
            c+=1
    print(c)


