#include <bits/stdc++.h>
using namespace std;

using pii = pair<int, int>;

namespace {
    const int INF = (1 << 21);
    const int WHITE = 0;
    const int GRAY = 1;
    const int BLACK = 2;

    int n;
    vector<vector<pair<int, int>>> adj;
}  // namespace

void dijkstra();

int main() {
    cin >> n;
    adj = vector<vector<pair<int, int>>>(n);

    int u, k, c, v;
    for (int i = 0; i < n; i++) {
        cin >> u >> k;
        while (k--) {
            cin >> v >> c;
            adj.at(u).push_back(make_pair(v, c));
        }
    }

    dijkstra();
}

void dijkstra() {
    priority_queue<pii, vector<pii>, greater<pii>> pq;
    vector<int> d(n, INF);
    vector<int> color(n, WHITE);

    d.at(0) = 0;
    pq.push(make_pair(0, 0));
    color.at(0) = GRAY;

    while (!pq.empty()) {
        pair<int, int> f = pq.top();
        pq.pop();
        int u = f.second;
        color.at(u) = BLACK;

        for (int j = 0; j < adj.at(u).size(); j++) {
            int v = adj.at(u).at(j).first;
            if (color.at(v) != BLACK) {
                if (d.at(v) > d.at(u) + adj.at(u).at(j).second) {
                    d.at(v) = d.at(u) + adj.at(u).at(j).second;
                    pq.push(make_pair(d.at(v), v));
                    color.at(v) = GRAY;
                }
            }
        }
    }

    for (int i = 0; i < n; i++) {
        cout << i << " " << (d.at(i) == INF ? -1 : d.at(i)) << endl;
    }
}
