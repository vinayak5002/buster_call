#include <iostream> // cout, endl, cin
#include <fstream> //ifstream, ofstream
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <cstdio> // printf
#include <map> // map
#include <queue> // queue, priority_queue
#include <set> // set
#include <stack> // stack
#include <deque> // deque
#include <unordered_map> // unordered_map
#include <unordered_set> // unordered_set
#include <bitset> // bitset
#include <cctype> // isupper, islower, isdigit, toupper, tolower
#include <math.h>
using namespace std;

//変数型のテンプレート
using ll = long long;
using vi = vector<int>;
struct Edge{ int from; int to; int cost; };

//数値のテンプレート
const ll INFL = 9223372036854775807; //1000000007または998244353
const int INFI = 2147483647;

//for文のテンプレート
#define r(i, k, n) for(int i = k; i < n; i++)


int main(void){
    int V, E; cin >> V >> E;
    vector<Edge> edge(E);
    vi vc(V, INFI);
    int s; cin >> s;
    r(i, 0, E) cin >> edge[i].from >> edge[i].to >> edge[i].cost;

    
    vc[s] = 0;
    int i = 0;
    while(1){
        int count = 0;
        r(j, 0, E){
            if(vc[edge[j].from] != INFI && vc[edge[j].to] > vc[edge[j].from] + edge[j].cost){
                vc[edge[j].to] = vc[edge[j].from] + edge[j].cost;
                count++;
            }
        }
        if(count == 0) break;
        i++;
        if(i == V){
            cout << "NEGATIVE CYCLE" << endl;
            return(0);
        }
    }

    r(j, 0, V){
        if(vc[j] == INFI) cout << "INF" << endl;
        else cout << vc[j] << endl;
    }

    return(0);
    
}
