#include<stdio.h>

#define N 100
#define MAX 100
#define INFTY 1<<21

int G[N][N], d[N];
int Q[N], n;
int head, tail;

void initialize(){
	head =0;
	tail =0;
}

int isEmpty(){
	if(head == tail){
		return 1;
	}
	return 0;
}

int isFull(){
	if(head == (tail + 1) % MAX){
		return 1;
	}
	return 0;
}

void enqueue(int x){
	if(isFull() == 1){
		printf("enqueue error\n");
	}
	Q[tail] = x;
	if(tail + 1 == MAX){
		tail = 0;
	}
	else{
		tail++;
	}
}

int dequeue(){
	int x;
	if(isEmpty() == 1){
		printf("dequeue error\n");
	}
	x = Q[head];
	if(head + 1 == MAX){
		head = 0;
	}
	else{
		head++;
	}
	return x;
}


void bfs(int s){
	int i, u, v;
	
	for(i=0; i<n; i++){
		d[i] = INFTY;
	}
	
	enqueue(s);
	d[s]=0;
	
	while(isEmpty() != 1){
		u = dequeue();
		for(v = 0; v < n; v++){
			if(G[u][v] == 0) continue;
			if(d[v] != INFTY) continue;
			d[v] = d[u]+1;
			enqueue(v);;
		}
	}
	for(i=0; i<n; i++){
		printf("%d", i+1);
		if(d[i]==INFTY){
			printf(" -1\n");
		}
		else{
			printf(" %d\n", d[i]);
			}
	}
}

int main(void){
	int i, j, v, w, k;
	initialize();
	
	scanf("%d", &n);
	
	for(i=0; i<n; i++){
		for(j=0; j<n; j++){
			G[i][j] = 0;
		}
	}
	for(i=0; i<n; i++){
		scanf("%d %d", &k, &v);
		k--;
		for(j=0; j<v; j++){
			scanf("%d", &w);
			w--;
			G[k][w] = 1;
		}
	}
	bfs(0);
	return 0;
}
	
