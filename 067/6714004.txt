import heapq
import math
import sys
import string
from collections import deque, Counter, defaultdict
from itertools import permutations, accumulate, groupby
from copy import deepcopy
from decimal import Decimal
# import numpy as np

# sys.setrecursionlimit(10 ** 7)
readline = sys.stdin.readline

ii = lambda : int(readline())
mi = lambda : map(int,readline().split())
li = lambda : list(map(int,readline().split()))

int1 = lambda x: int(x)-1

ii1 = lambda : int1(readline())
mi1 = lambda : map(int1,readline().split())
li1 = lambda : list(map(int1,readline().split()))

MOD = 10 ** 9 + 7
INF = 2 ** 63 - 1
# MOD = 998244353

# ------------------------------

while True:
    W,H=mi()
    if H==W==0:
        break
    S=[input() for i in range(H)]
    G=[[] for _ in range(H*W)]
    for i in range(H):
        for j in range(W):
            if S[i][j]!="#":
                if S[i][j]=="@":
                    s=i*W+j
                if i>0:
                    if S[i-1][j]!="#":
                        G[i*W+j].append((i-1)*W+j)
                if i<H-1:
                    if S[i+1][j]!="#":
                        G[i*W+j].append((i+1)*W+j)
                if j>0:
                    if S[i][j-1]!="#":
                        G[i*W+j].append(i*W+(j-1))
                if j<W-1:
                    if S[i][j+1]!="#":
                        G[i*W+j].append(i*W+(j+1))
    todo=[s]
    seen=[False]*(H*W)
    while todo:
        tmp=todo.pop()
        for i in G[tmp]:
            if not seen[i]:
                seen[i]=True
                todo.append(i)
    print(sum(seen))
