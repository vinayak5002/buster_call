#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#include <map>
#include <tuple>
using namespace std;
struct edge{
    edge(){}
    edge(int x,int y,int z){
        s=x;
        t=y;
        w=z;
    }
    int s;
    int t;
    int w;
    bool judge=0;
};
int main(){
    int n,m,s,t,w,sum=0;
    cin>>n>>m;
    vector<vector<edge>> connect(n);
    map<tuple<int,int,int>,edge> heap;
    for(int i=0;i<m;++i){
        cin>>s>>t>>w;
        connect[s].push_back(edge(s,t,w));
        connect[t].push_back(edge(s,t,w));
    }
    bool flag[n]={1};
    int nextv=0;
    for(int i=1;i<n;++i){
        for(edge x:connect[nextv]){
            if(flag[x.t]+flag[x.s]==1){
                heap[make_tuple(x.w,x.s,x.t)]=x;
            }
        }
        sum+=begin(heap)->second.w;
        if(flag[begin(heap)->second.s]){
            nextv=begin(heap)->second.t;
            flag[nextv]=1;
        }else{
            nextv=begin(heap)->second.s;
            flag[nextv]=1;
        }
        for(edge x:connect[nextv]){
            if(flag[x.t]+flag[x.s]==2){
                heap.erase(make_tuple(x.w,x.s,x.t));
            }
        }        

    }
    cout<<sum<<endl;
}
// 9 16
// 0 1 10
// 1 2 15
// 0 3 3
// 1 3 8 
// 1 4 6
// 2 4 1
// 2 5 7
// 3 4 14
// 4 5 5
// 3 6 2
// 3 7 16
// 4 7 9
// 4 8 13
// 5 8 4
// 6 7 12
// 7 8 11
