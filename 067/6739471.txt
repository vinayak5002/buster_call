from bisect import bisect_left, bisect_right
from heapq import heapify, heappop, heappush
import sys
input = sys.stdin.readline

inf = 10 ** 9

def slv(N, M, C, S, G):
    com_sta = [[] for _ in range(C)]
    for _ in range(M):
        x, y, d, c = map(int, input().split())
        com_sta[c - 1].append((x - 1, y - 1, d))
        com_sta[c - 1].append((y - 1, x - 1, d))
    p = list(map(int, input().split()))
    cdp = [[inf] * N for _ in range(N)]
    for i in range(N):
        cdp[i][i] = 0
    for c in range(C):
        q = [0] + list(map(int, input().split()))
        r = list(map(int, input().split()))
        f = [0]
        now = 0
        for i in range(p[c] - 1):
            now += (q[i + 1] - q[i]) * r[i]
            f.append(now)
        dp = [[inf] * N for _ in range(N)]
        for i in range(N):
            dp[i][i] = 0
        for x, y, d in com_sta[c]:
            dp[x][y] = min(dp[x][y], d)
            dp[y][x] = min(dp[y][x], d)
        for k in range(N):
            for i in range(N - 1):
                for j in range(i + 1, N):
                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])
                    dp[j][i] = min(dp[j][i], dp[j][k] + dp[k][i])
        for i in range(N - 1):
            for j in range(i + 1, N):
                if dp[i][j] >= inf:
                    continue
                idx = bisect_right(q, dp[i][j]) - 1
                cdp[i][j] = min(cdp[i][j], f[idx] + (dp[i][j] - q[idx]) * r[idx])
                cdp[j][i] = min(cdp[j][i], f[idx] + (dp[j][i] - q[idx]) * r[idx])
    edges = [[] for i in range(N)]
    for i in range(N):
        for j in range(N):
            if i != j and cdp[i][j] < inf:
                edges[i].append((j, cdp[i][j]))
    dist = [inf] * N
    dist[S - 1] = 0
    hq = [(0, S - 1)]
    done = [0] * N
    while hq:
        _, now = heappop(hq)
        if done[now]:
            continue
        done[now] = True
        for nxt, cost in edges[now]:
            if dist[nxt] > dist[now] + cost:
                dist[nxt] = dist[now] + cost
                heappush(hq, (dist[nxt], nxt))
    ans = dist[G - 1]
    if ans >= inf:
        print(-1)
    else:
        print(ans)

while True:
    N, M, C, S, G = map(int, input().split())
    if N == M == C == S == G == 0:
        exit()
    else:
        slv(N, M, C, S, G)

