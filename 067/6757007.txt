#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, s, t) for (int i = (int)(s); i < (int)(t); ++i)
#define revrep(i, t, s) for (int i = (int)(t)-1; i >= (int)(s); --i)
#define all(x) begin(x), end(x)
template <typename T> bool chmax(T& a, const T& b) { return a < b ? (a = b, 1) : 0; }
template <typename T> bool chmin(T& a, const T& b) { return a > b ? (a = b, 1) : 0; }

class UnionFind {
public:
    UnionFind() = default;
    explicit UnionFind(int n) : data(n, -1) {}

    int find(int x) {
        if (data[x] < 0) return x;
        return data[x] = find(data[x]);
    }

    void unite(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) return;
        if (data[x] > data[y]) std::swap(x, y);
        data[x] += data[y];
        data[y] = x;
    }

    bool same(int x, int y) {
        return find(x) == find(y);
    }

    int size(int x) {
        return -data[find(x)];
    }

private:
    std::vector<int> data;
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);

    int V;
    cin >> V;
    vector<string> a(V);
    for (auto& x : a) cin >> x;
    int rem = V*(V-1)/2;
    int r = 0;
    UnionFind uf(V);
    rep(i,0,V) rep(j,i+1,V) {
        if (a[i][j] == 'Y') {
            --rem;
            --r;
            uf.unite(i, j);
        }
    }
    vector<int> cnt(2);
    rep(i,0,V) if (uf.find(i) == i) {
        ++cnt[uf.size(i) % 2];
        r += uf.size(i) * (uf.size(i)-1) / 2;
    }
    r %= 2;

    map<tuple<int, int, int>, bool> memo;
    auto dfs = [&](auto& dfs, int cnt0, int cnt1, int r) -> bool {
        if (cnt0 + cnt1 == 2) {
            if (r) return true;
            else return false;
        }
        if (memo.count({cnt0, cnt1, r})) return memo[{cnt0, cnt1, r}];
        bool win = false;
        if (r) win |= !dfs(dfs, cnt0, cnt1, 0);
        if (cnt0 > 0) win |= !dfs(dfs, cnt0-1, cnt1, (r+1)%2);
        if (cnt1 > 1) win |= !dfs(dfs, cnt0+1, cnt1-2, r);
        return memo[{cnt0, cnt1, r}] = win;
    };

    cout << (dfs(dfs, cnt[0], cnt[1], r) ? "Taro" : "Hanako") << endl;
}
