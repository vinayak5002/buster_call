#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
#define ms(x, n) memset(x,n,sizeof(x));
typedef  long long LL;
const LL maxn = 100010;
const int NIL = -1;


struct node{    //左子右兄弟表示法
    int p, l, r;
}T[maxn];
int D[maxn]; //所有节点的深度
void print(int u){
    //打印u节点的相关信息
    printf("node %d: parent = %d, depth = %d, ", u, T[u].p, D[u]);
    if(T[u].p==NIL) printf("root, ");
    else if(T[u].l==NIL) printf("leaf, ");
    else printf("internal node, ");

    printf("[");
    for(int i = T[u].l, j = 0; i!=NIL; i=T[i].r, j++){
        if(j==0) printf("%d", i);
        else printf(", %d", i);
    }
    printf("]\n");
}
void setDepth(int u, int p){
    D[u] = p;
    if(T[u].r!=NIL) setDepth(T[u].r, p);
    if(T[u].l!=NIL) setDepth(T[u].l, p+1);
}
int main()
{
    int id, k, cur, l, N, root;
    cin >> N;
    for(int i = 0; i <= N; i++)
        T[i].l = T[i].r = T[i].p = NIL; //初始化

    for(int i = 1; i <= N; i++){
        cin >> id >> k;
        for(int j = 1; j <= k; j++){
            cin >> cur;
            if(j==1) T[id].l = cur;
            else T[l].r = cur;
            l = cur;
            T[cur].p = id;
        }
    }
    for(int i = 0; i < N; i++)
        if(T[i].p==NIL) root = i;

    setDepth(root, 0);
    for(int i = 0; i < N; i++)
        print(i);

	return 0;
}

