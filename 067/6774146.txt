#include <bits/stdc++.h>
using namespace std;
const long double INF = 1000;
const long double PI = acos(-1);
struct point{
  long double x, y;
  point(){
  }
  point(long double x, long double y): x(x), y(y){
  }
  point operator -(point P){
    return point(x - P.x, y - P.y);
  }
};
long double abs(point P){
  return sqrt(P.x * P.x + P.y * P.y);
}
long double dist(point P, point Q){
  return abs(Q - P);
}
long double angle(point P){
  long double ans = atan2(P.y, P.x);
  if (ans < 0){
    ans += PI;
  }
  return ans;
}
pair<long double, long double> get_min(long double s, long double c, long double a, long double L, long double R){
  long double A = hypot(s, c);
  long double t = atan2(c, s);
  pair<long double, long double> ans = make_pair(INF, 0);
  long double t1 = -PI / 2 - t;
  if (L <= t1 && t1 <= R){
    ans = min(ans, make_pair(A + a, t1));
  }
  long double t2 = 3 * PI / 2 - t;
  if (L <= t2 && t2 <= R){
    ans = min(ans, make_pair(A + a, t2));
  }
  ans = min(ans, make_pair(A * sin(L + t) + a, L));
  ans = min(ans, make_pair(A * sin(R + t) + a, R));
  return ans;
}
pair<long double, long double> get_max(long double s, long double c, long double a, long double L, long double R){
  long double A = hypot(s, c);
  long double t = atan2(c, s);
  pair<long double, long double> ans = make_pair(0, 0);
  long double t1 = PI / 2 - t;
  if (L <= t1 && t1 <= R){
    ans = max(ans, make_pair(A + a, t1));
  }
  ans = max(ans, make_pair(A * sin(L + t) + a, L));
  ans = max(ans, make_pair(A * sin(R + t) + a, R));
  return ans;
}
int main(){
  cout << fixed << setprecision(20);
  while (true){
    int n;
    cin >> n;
    if (n == 0){
      break;
    }
    vector<point> P(n);
    for (int i = 0; i < n; i++){
      cin >> P[i].x >> P[i].y;
    }
    vector<long double> T;
    T.push_back(0);
    T.push_back(PI);
    for (int i = 0; i < n; i++){
      for (int j = i + 1; j < n; j++){
        long double t = PI - angle(P[j] - P[i]);
        T.push_back(t);
        long double d = dist(P[i], P[j]);
        if (d > 2.1){
          long double p = asin(2 / d);
          T.push_back(fmod(t + p, PI));
          T.push_back(fmod(t - p + PI, PI));
        }
      }
    }
    sort(T.begin(), T.end());
    int cnt = T.size();
    pair<long double, long double> mn = make_pair(INF, 0);
    pair<long double, long double> mx = make_pair(0, 0);
    for (int i = 0; i < cnt - 1; i++){
      long double t = (T[i] + T[i + 1]) / 2;
      vector<pair<long double, int>> R;
      for (int j = 0; j < n; j++){
        R.push_back(make_pair(P[j].x * sin(t) + P[j].y * cos(t) - 1, ~j));
        R.push_back(make_pair(P[j].x * sin(t) + P[j].y * cos(t) + 1, j));
      }
      sort(R.begin(), R.end());
      long double s = 0, c = 0, a = 0;
      int cnt = 0;
      for (int j = 0; j < n * 2; j++){
        int id = R[j].second;
        int add = -1;
        if (id < 0){
          add = 1;
          id = ~id;
        }
        if (cnt == 0){
          s -= P[id].x;
          c -= P[id].y;
          a++;
        }
        cnt += add;
        if (cnt == 0){
          s += P[id].x;
          c += P[id].y;
          a++;
        }
      }
      mn = min(mn, get_min(s, c, a, T[i], T[i + 1]));
      mx = max(mx, get_max(s, c, a, T[i], T[i + 1]));
    }
    cout << mn.second << endl;
    cout << mx.second << endl;
  }
}
