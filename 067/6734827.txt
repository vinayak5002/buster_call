#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll INF = (1LL << 60);
struct edge{
    int to;
    ll w;
    edge(int t, ll we){
        to = t;
        w = we;
    }
};

vector<ll> dijkstra(vector< vector < edge > >G, int st, int N){
    vector<ll> dist(N, INF);
    dist[st] = 0;

    priority_queue<pair<ll, int>, vector<pair<ll, int> >, greater<pair<ll, int> > > pq;
    pq.push(make_pair(0, st));

    while(!pq.empty()){
        auto t = pq.top();
        pq.pop();

        int v = t.second;
        ll w = t.first;
        if(dist[v] < w) continue;

        for(auto e:G[v]){
            int to = e.to;
            ll c = e.w;

            if(dist[v] + c < dist[to]){
                dist[to] = dist[v] + c;
                pq.push(make_pair(dist[to], to));
            }
        }
    }

    return dist;

}

int main(){
    int N, M, r;
    cin >> N >> M >> r;
    vector<vector<edge>>G(N, vector<edge>());

    for(int i=0;i<M;i++){
        int a,b; ll c;
        cin >> a >> b >> c;
        --a;--b;
        G[a].push_back(edge(b, c));
        G[b].push_back(edge(a, c));

    }

    auto dist = dijkstra(G, r, N);

    for(int i=0;i<N;i++){
        if(dist[i]==INF)cout << "INF" << endl;
        else cout << dist[i] << endl;
    }



    return 0;
}
