#include<stdio.h>
long long int par[100005], sum[100005], cnt[100005];
long long int root(long long int n)
{
	if (par[n] != n)
		par[n] = root(par[n]);
	return par[n];
}
void uni(long long int x, long long int y)
{
	x = root(x);
	y = root(y);
	if (x == y)
		return;
	par[x] = y;
	sum[y] += sum[x];
	cnt[y] += cnt[x];
	return;
}
long long int gcd(long long int a, long long int b)
{
	long long int r = a % b;
	while (r > 0)
	{
		a = b;
		b = r;
		r = a % b;
	}
	return b;
}
long long int lcm(long long int a, long long int b)
{
	return a / gcd(a, b) * b;
}
long long int ss;
long long int seg_lcm[400005];
long long int get_lcm(long long int l, long long int r)
{
	l += ss - 1;
	r += ss - 1;
	long long int res = 1;
	while (l < r)
	{
		res = lcm(res, seg_lcm[l]);
		res = lcm(res, seg_lcm[r]);
		l /= 2;
		r = r / 2 - 1;
	}
	if(l==r)
		res = lcm(res, seg_lcm[l]);
	return res;
}
long long int prime;
long long int modpow(long long int a, long long int n, long long int p)
{
	long long int res = 1;
	for (; n > 0; n /= 2, a = a * a % p)
		if (n % 2 > 0)
			res = res * a % p;
	return res;
}
long long int seg[400005];
long long int get_sum(long long int l, long long int r)
{
	l += ss - 1;
	r += ss - 1;
	long long int res = 0;
	while (l < r)
	{
		if (l % 2 == 0)
			res = (res + seg[l]) % prime;
		l /= 2;
		if (r % 2 > 0)
			res = (res + seg[r]) % prime;
		r = r / 2 - 1;
	}
	if (l == r)
		res = (res + seg[l]) % prime;
	return res;
}
int main()
{
	long long int n, q;
	scanf("%lld %lld", &n, &q);
	long long int i, j;
	long long int p[100005];
	for (i = 0; i < n; i++)
	{
		scanf("%lld", &p[i]);
		p[i]--;
	}
	for (i = 0; i < n; i++)
	{
		par[i] = i;
		cnt[i] = 1;
		sum[i] = i + 1;
	}
	for (i = 0; i < n; i++)
		uni(i, p[i]);
	for (ss = 1; ss < n; ss *= 2);
	for (i = 0; i < 2 * ss - 1; i++)
		seg_lcm[i] = 1;
	for (i = 0; i < n; i++)
		seg_lcm[i + ss - 1] = cnt[root(i)];
	for (i = ss - 2; i >= 0; i--)
		seg_lcm[i] = lcm(seg_lcm[2 * i + 1], seg_lcm[2 * i + 2]);
	for (i = 0; i < 2 * ss - 1; i++)
		seg[i] = 0;
	prime = 1000000007;
	for (i = 0; i < n; i++)
		seg[i + ss - 1] = sum[root(i)] * modpow(cnt[root(i)], prime - 2, prime) % prime;
	for (i = ss - 2; i >= 0; i--)
		seg[i] = (seg[2 * i + 1] + seg[2 * i + 2]) % prime;
	long long int L, R;
	for (i = 0; i < q; i++)
	{
		scanf("%lld %lld", &L, &R);
		L--;
		R--;
		printf("%lld\n", get_lcm(L, R) % prime * get_sum(L, R) % prime);
	}
	return 0;
}
