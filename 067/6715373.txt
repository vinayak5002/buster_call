// #define _GLIBCXX_DEBUG
#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define rep2(i, k, n) for (decltype(n) i = k; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i--)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i--)
#define repr2(i, k, n) for (decltype(n) i = n; i >= k; i--)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret; };
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret; };
template <typename T> using pq_inv = priority_queue<T, vector<T>, greater<T>>;
vector<int> dd4={1, 0, -1, 0, 1};  // 4方位 rep(i,4) nh=h+dd4[i]; nw=w+dd4[i+1];
vector<int> dd8={1, 0, -1, 0, 1, 1,-1, -1, 1};  // 8方位 rep(i,8) nh=h+dd8[i]; nw=w+dd8[i+1];

struct Piece{
    int h,w;
    int size;
    Piece(int h, int w): h(h), w(w){
        size=h*w;
    }
    vector<Piece> cut(int s){
        vector<Piece> ret;
        int side=(s%(h+w)<=w)?0:1;
        if(side==0){
            int len=s%(h+w);
            ret.emplace_back(h,len);
            ret.emplace_back(h,w-len);
        }else{
            int len=s%(h+w)-w;
            ret.emplace_back(len,w);
            ret.emplace_back(h-len,w);
        }
        sort(ret.begin(), ret.end());
        return ret;
    };
    bool operator<(const Piece& p) const{return size<p.size;}
    bool operator>(const Piece& p) const{return size>p.size;}
};

struct PieceManager{
    deque<Piece> q;
    void cut(int idx, int s){
        Piece p = this->get(idx);
        this->erase(idx);
        vector<Piece> ret = p.cut(s);
        for(auto&& x:ret) q.push_back(x);
    }
    void add(Piece p){
        q.push_back(p);
    }
    
    Piece get(int idx){
        return q[idx-1];
    }
    
    void erase(int idx){
        q.erase(q.begin()+idx-1);
    }
};
struct Solver {
    void solve(int n, int w, int d){
        PieceManager pm;
        pm.add(Piece(d,w));
        rep(i,n){
            int p,s;
            cin >> p >> s;
            pm.cut(p,s);
        }
        vector<Piece> ans;
        rep(i,pm.q.size()) ans.push_back(pm.q[i]);
        sort(ans.begin(), ans.end());
        for(auto&& a:ans) cout << a.size << ' ';
        cout << endl;
    };
};

int main() {
    std::cin.tie(nullptr);
    // cin >> T;
    for(;;){
        int n,w,d;
        cin >> n >> w >> d;
        if(n==0 && w==0 && d==0)break;
        Solver solver;
        solver.solve(n,w,d);
    }
    return 0;
}


