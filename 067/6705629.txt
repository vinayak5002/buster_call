#include<stdio.h>
#include<stdlib.h>

struct node{//節の定義
  struct node *right;
  struct node *left;
  struct node *parent;
  int key;
};
typedef struct node * Node;
#define NIL NULL
                                                                                                                                
Node root;


Node treeMinimum(Node x)
{//最小値の探索
	while(x->left != NIL)
	{
		x = x->left;
	}
    return x;
}

/*Node treeMaximum(Node x){


}
*/
Node treeSearch(Node x, int k)
{//データの探索
	while(x != NIL && k != x->key)//キーが存在しない時NIL
	{
		if(k < x->key)
		{
			x = x->left;//キーが小さければ、左の子
		}
        else
		{
			x = x->right;//それ以外右の子
        }
    }
    return x;
}
Node treeSuccessor(Node x)
{
	Node y;
	if(x->right != NIL)
	{
		return treeMinimum(x->right);
	}
	y = x->parent;
	while(y != NIL && x == y->right)
	{
		x = y; 
		y = y->parent;
	}
	return y;
}
void treeDelete(Node z)//データを削除
{//最小値の削除
	Node x;//yの子
	Node y;//削除の対象
	if(z->left == NIL || z->right == NIL)
	{
		y = z;
	}
	else
	{
		y = treeSuccessor(z);
	}
	if(y->left != NIL)
	{
		x = y->left;
	}
	else
	{
		x = y->right;
	}
	
	if(x != NIL)
	{
		x->parent = y->parent;
	}
	if(y->parent == NIL)
	{
		root = x;
	}
	else if(y == y->parent->left)
	{
		y->parent->left = x;
	}
    else
	{
		y->parent->right = x;
	}
	
	if(y != z)
	{
		z->key = y->key;
	}
}
void insert(int k)//節点ｚを挿入する位置を根を支店として探す。
{
	Node y = NIL;//xの親
	Node x = root;
	Node z;
	
	z = malloc(sizeof(struct node));
	z->key = k;
	z->left = NIL;
	z->right = NIL;
	
	while(x != NIL)//zのキーが現在の節点xのキーを考える
	{
		y = x;
		if(x->key > z->key)
		{
			x = x->left;//xのキーより小さい時xの左の子へ移動
      	}
      else
		{//xの右の子を次の節点xとする（木の葉に向かって挿入）
			x = x->right;//右へ移動
      	}
	}
	z->parent = y;//親の候補押して1つ前の節点yを保留
	if(y == NIL)//NILについたらループを出る。
	{
		root = z;
	}
	else
	{
		if(z->key < y->key)
		{
			y->left = z;//ｙがzの親
		}
      else
		{
			y->right = z;//zをyの右の子にする
		}
	}
}

void inorder(Node u)
{
	if(u == NIL)
	{
        return;
    }
    inorder(u->left);
    printf(" %d", u->key);
    inorder(u->right);
}

void preorder(Node u)
{
	if(u == NIL)
	{
		return;
    }
    printf(" %d", u->key);
    preorder(u->left);
    preorder(u->right);
}


int main()
{
	int n, i, x;
	char com[20];
	scanf("%d", &n);
	
	for ( i = 0; i < n; i++ )
	{
		scanf("%s", com);
		if ( com[0] == 'f' )
		{
			scanf("%d", &x);
			Node t = treeSearch(root, x);
			if ( t != NIL )
			{
				printf("yes\n");
			}
			else
			{
				printf("no\n");
			}
		}
		if ( com[0] == 'i' )
		{
			scanf("%d", &x);
			insert(x);
		}
		else if ( com[0] == 'p' )
		{
			inorder(root);
			printf("\n");
			preorder(root);
			//printf("\n");
		} 
		else if ( com[0] == 'd' )
		{
			scanf("%d", &x);
			treeDelete(treeSearch(root, x));
		}
	}
	
  return 0;
}
