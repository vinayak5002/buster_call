import os
import sys
from io import BytesIO, IOBase
 
BUFSIZE = 8192
 
 
class FastIO(IOBase):
    newlines = 0
 
    def __init__(self, file):
        self._fd = file.fileno()
        self.buffer = BytesIO()
        self.writable = "x" in file.mode or "r" not in file.mode
        self.write = self.buffer.write if self.writable else None
 
    def read(self):
        while True:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            if not b:
                break
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines = 0
        return self.buffer.read()
 
    def readline(self):
        while self.newlines == 0:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            self.newlines = b.count(b"\n") + (not b)
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines -= 1
        return self.buffer.readline()
 
    def flush(self):
        if self.writable:
            os.write(self._fd, self.buffer.getvalue())
            self.buffer.truncate(0), self.buffer.seek(0)
 
 
class IOWrapper(IOBase):
    def __init__(self, file):
        self.buffer = FastIO(file)
        self.flush = self.buffer.flush
        self.writable = self.buffer.writable
        self.write = lambda s: self.buffer.write(s.encode("ascii"))
        self.read = lambda: self.buffer.read().decode("ascii")
        self.readline = lambda: self.buffer.readline().decode("ascii")
 
 
sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)
input = lambda: sys.stdin.readline().rstrip("\r\n")

while 1:
    n = int(input())
    if n == 0:
        break
    A = list(map(int, input().split()))
    tot = sum(A)
    tf = [[False] * (tot // 2 + 1) for _ in range(tot + 1)] 
    tf[0][0] = True
    tot = 0
    for a in A:
        tot += a
        for i in range(tot, -1, -1):
            ma = min(i, tot - i)
            for j in range(ma, -1, -1):
                if i >= a:
                    if i - a >= j:
                        tf[i][j] |= tf[i - a][j]
                    else:
                        tf[i][j] |= tf[j][i - a]
                    if j >= a:
                        tf[i][j] |= tf[i][j - a]
    ans = 0
    for i in range(tot // 3, tot + 1):
        for j in range(i, tot + 1):
            if j > 2 * i:
                break
            if tf[i][j - i]:
                ans = max(ans, min(i, j - i, tot - j))
    print(ans)

