//  8_A:二分探索木1



#include <stdio.h>
#include <stdlib.h>

struct node{
  struct node *right;
  struct node *left;
  struct node *parent;
  int key;
};

typedef struct node * Node;
#define NIL NULL

Node root;

Node treeMinimum(Node x){

    return 0;
}

Node treeMaximum(Node x){

    return 0;
}

Node treeSearch(Node u, int k){

    return 0;
}

Node treeSuccessor(Node x){

    return 0;
}

void treeDelete(Node z){
  Node y; // node to be deleted
  Node x; // child of y



}

void insert(int k){
    Node y = NIL;
    Node x = root;
    Node z;

    z = malloc(sizeof(struct node));
    z->key = k;
    z->left = NIL;
    z->right = NIL;

    while (x!=NIL) {
        y = x;
        if (z->key < x->key)
            x = x->left;
        else
            x = x->right;
    }
    z->parent = y;

    if(y==NIL)
        root = z;
    else if(z->key < y->key)
        y->left = z;
    else
        y->right = z;

}

void Inorder(Node u){
    if(u==NIL) return;
    Inorder(u->left);
    printf(" %d",u->key);
    Inorder(u->right);
}
void Preorder(Node u){
    if(u==NIL) return;
    printf(" %d",u->key);
    Preorder(u->left);
    Preorder(u->right);
}


int main(){
    int n, i, x;
    char com[20];
    scanf("%d", &n);

    for ( i = 0; i < n; i++ ){
          
        scanf("%s", com);
          
        if ( com[0] == 'f' ){
            scanf("%d", &x);
            Node t = treeSearch(root, x);
            if ( t != NIL )printf("yes\n");
            else printf("no\n");
        } else if ( com[0] == 'i' ){
            scanf("%d", &x);
            insert(x);
        } else if ( com[0] == 'p' ){
            Inorder(root);
            printf("\n");
            Preorder(root);
            printf("\n");
        } else if ( com[0] == 'd' ){
            scanf("%d", &x);
            treeDelete(treeSearch(root, x));
        }
        
    }

    return 0;
}

