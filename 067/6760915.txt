#include <bits/stdc++.h>

#define rep(i, x, n) for (int i = (x); i < (n); i++)
#define reps(i, x, n) for (int i = (x); i <= (n); i++)
#define lol long long
#define SUM(n) ((n) + 1) * (n) / 2 // 1〜nまでの総和を求める式
#define mp make_pair
#define fi first
#define se second
#define pu push_back
#define SYOU(x) fixed << setprecision(x + 1) //小数点桁数を指定する
#define abs(x, y) max(x, y) - min(x, y)
#define all(v) v.begin(), v.end()
#define UPDigit(a, b) (a + b - 1) / b //小数点切り上げ
const int INF = 0x3f3f3f3f;
const long long LINF = 0x3f3f3f3f3f3f3f3fLL;
const int mod = int(998244353);
const int MOD = int(1e9 + 7);
using namespace std;
using pii = pair<int, int>;
typedef vector<int> vit;
//八方向を見るのに使うと便利(楽)
const int dy[] = {0, 1, 0, -1, -1, 1, 1, -1};
const int dx[] = {1, 0, -1, 0, 1, 1, -1, -1};

signed main(void)
{
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    int n;
    while(cin >> n, n != 0){
        vector<int> vec(n + 5), sum(n + 5, 0);
        string s;
        reps(i, 1, n){
            cin >> s;
            vec[i] = s.size();
            sum[i] += sum[i - 1] + vec[i];
        }
        int sub[] = {5, 12, 17, 24, 31};
        reps(front, 1, n){
            int cnt = 0;
            rep(i, 0, 5){
                int low = front, high = n + 1, mid;
                while(high - low > 1){
                    mid = (low + high) / 2;
                    if(sum[mid] - sum[front - 1] <= sub[i]){
                        low = mid;
                    } else {
                        high = mid;
                    }
                }
                if(sum[low] - sum[front - 1] == sub[i]){
                    cnt ++;
                }
            }
            if(cnt == 5){
                cout << front << '\n';
                break;
            }
        }
    }
    return 0;
}
