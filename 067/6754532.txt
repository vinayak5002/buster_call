#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, s, t) for (int i = (int)(s); i < (int)(t); ++i)
#define revrep(i, t, s) for (int i = (int)(t)-1; i >= (int)(s); --i)
#define all(x) begin(x), end(x)
template <typename T> bool chmax(T& a, const T& b) { return a < b ? (a = b, 1) : 0; }
template <typename T> bool chmin(T& a, const T& b) { return a > b ? (a = b, 1) : 0; }

template <int mod>
class Modint {
    using mint = Modint;
    static_assert(mod > 0, "Modulus must be positive");

public:
    static constexpr int get_mod() noexcept { return mod; }

    constexpr Modint(long long y = 0) noexcept : x(y >= 0 ? y % mod : (y % mod + mod) % mod) {}

    constexpr int value() const noexcept { return x; }

    constexpr mint& operator+=(const mint& r) noexcept { if ((x += r.x) >= mod) x -= mod; return *this; }
    constexpr mint& operator-=(const mint& r) noexcept { if ((x += mod - r.x) >= mod) x -= mod; return *this; }
    constexpr mint& operator*=(const mint& r) noexcept { x = static_cast<int>(1LL * x * r.x % mod); return *this; }
    constexpr mint& operator/=(const mint& r) noexcept { *this *= r.inv(); return *this; }

    constexpr mint operator-() const noexcept { return mint(-x); }

    constexpr mint operator+(const mint& r) const noexcept { return mint(*this) += r; }
    constexpr mint operator-(const mint& r) const noexcept { return mint(*this) -= r; }
    constexpr mint operator*(const mint& r) const noexcept { return mint(*this) *= r; }
    constexpr mint operator/(const mint& r) const noexcept { return mint(*this) /= r; }

    constexpr bool operator==(const mint& r) const noexcept { return x == r.x; }
    constexpr bool operator!=(const mint& r) const noexcept { return x != r.x; }

    constexpr mint inv() const noexcept {
        int a = x, b = mod, u = 1, v = 0;
        while (b > 0) {
            int t = a / b;
            std::swap(a -= t * b, b);
            std::swap(u -= t * v, v);
        }
        return mint(u);
    }

    constexpr mint pow(long long n) const noexcept {
        mint ret(1), mul(x);
        while (n > 0) {
            if (n & 1) ret *= mul;
            mul *= mul;
            n >>= 1;
        }
        return ret;
    }

    friend std::ostream& operator<<(std::ostream& os, const mint& r) {
        return os << r.x;
    }

    friend std::istream& operator>>(std::istream& is, mint& r) {
        long long t;
        is >> t;
        r = mint(t);
        return is;
    }

private:
    int x;
};

using mint = Modint<(int) 1e9+7>;

template <typename T>
ostream& operator<<(ostream& os, const vector<T>& v) {
    for (int i = 0; i < (int) v.size(); ++i) {
        os << v[i];
        if (i < (int) v.size() - 1) os << " ";
    }
    return os;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);

    int n, m;
    cin >> n >> m;
    vector<int> s(n);
    for (auto& x : s) cin >> x;

    int l = 0;
    int y = 0;
    vector<mint> ans(n+1);
    ans[0] = 1;
    rep(i,0,n) {
        chmax(y, s[i]);
        if (y != i + 1) continue;
        // cout << i+1 << endl;
        // cout << vector<mint>(s.begin()+l, s.begin()+i+1) << endl;
        if (l == i) {
            auto nans = ans;
            rep(j,0,n) nans[j+1] += ans[j];
            ans.swap(nans);
            l = i + 1;
            continue;
        }
        pair<int, int> mi(1e9, 0), ma(0, 0);
        rep(j,l,i+1) {
            chmin(mi, {s[j], j});
            chmax(ma, {s[j], j});
        }
        int a, b;
        if (mi.second < ma.second) {
            rep(j,l,mi.second-1) {
                if (s[j] > s[j+1]) {
                    cout << 0 << endl;
                    return 0;
                }
            }
            rep(j,ma.second+1,i) {
                if (s[j] > s[j+1]) {
                    cout << 0 << endl;
                    return 0;
                }
            }
            a = mi.second - l;
            rep(j,mi.second+1,ma.second) {
                if (s[mi.second-1] > s[j] && s[j] > s[ma.second+1]) {
                    cout << 0 << endl;
                    return 0;
                }
                if (s[j] > s[ma.second+1]) ++a;
            }
            b = i + 1 - l - a;
        } else {
            if (ma.second + 1 < mi.second) {
                cout << 0 << endl;
                return 0;
            }
            rep(j,l,ma.second-1) {
                if (s[j] > s[j+1]) {
                    cout << 0 << endl;
                    return 0;
                }
            }
            rep(j,mi.second+1,i) {
                if (s[j] > s[j+1]) {
                    cout << 0 << endl;
                    return 0;
                }
            }
            a = ma.second - l + 1;
            b = i - mi.second + 1;
        }
        vector<mint> nans(n+1);
        rep(j,0,n) {
            if (j+a <= n) nans[j+a] += ans[j];
            if (j+b <= n) nans[j+b] += ans[j];
        }
        ans.swap(nans);
        l = i + 1;
    }
    mint x = 0;
    rep(j,n-m,m+1) {
        x += ans[j];
    }
    cout << x << endl;
}
