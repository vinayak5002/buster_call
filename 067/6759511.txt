#include <iostream>
#include <cmath>
#include <climits>
using namespace std;


const int INF = INT_MAX; // 2^31-1
const int N = 1000005;

int D[N];
int n, q;

void initRMQ(int n_){
    n=1;

    while(n < n_){
        n *= 2;
    }

    for(int i=0; i<2*n-1; i++){
        D[i] = INF;
    }
}

void update(int k, int x){
    k += n-1;
    D[k] = x;
    while(k>0){
        k = (k-1)/2;
        D[k] = min(D[k*2+1], D[k*2+2]);
    }
}

// [a,b)
int query(int a, int b, int k, int l, int r){
    if(r<=a || b<=l) return INF;
    if(a<=l && r<=b) return D[k];

    int vl, vr;
    vl = query(a, b, k*2+1, l, (l + r)/2);
    vr = query(a, b, k*2+2, (l + r)/2, r);
    return min(vl, vr);
}

// [a,b]
int find(int a, int b){
    return query(a, b+1, 0, 0, n);
}


int main(){

    cin >> n >> q;

    initRMQ(n);

    for(int i=0; i<q; i++){
        int com;
        cin >> com;
        if(com==0){
            int j, x;
            cin >> j >> x;
            update(j, x);

        }else if(com==1){
            int x, y;
            cin >> x >> y;
            cout << find(x, y) << endl;
        }
    }

    return 0;
}
