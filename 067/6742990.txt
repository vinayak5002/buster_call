#include <iostream>
#include <random>
#include <regex>
using namespace std;

int digit(const string &s, int &cur) {
    return (int)s[cur++] - '0';
}

// return digit (else -1)
int node(const string &s, int &sum, int &neg, int &cur) {
    char c = s[cur];
    if ('0' <= c && c <= '9') {
        int d = digit(s, cur);
        sum += d;
        return d;
    } else {
        int l = node(s, sum, neg, ++cur);
        char op = s[cur];
        int r = node(s, sum, neg, ++cur);
        ++cur;
        cerr << "node op=" << op << " l=" << l << " r=" << r << endl;
        if (op == '-' && l >= 0 && r >= 0) {
            neg += min(l, r);
        }
        return -1;
    } 
}

int solve(const string &s) {
    // if (s.length() == 5) {
    //     if (s[1] == '+') return (s[0] - '0') + (s[2] - '0') + (s[4] - '0');
    //     else             return (s[0] - '0') - (s[2] - '0') - (s[4] - '0');
    // } else {
    int sum = 0, neg = 0, cur = 0;
    vector<int> d(3);
    d[0] = node(s, sum, neg, cur);
    char op = s[cur];
    d[1] = node(s, sum, neg, ++cur);
    d[2] = node(s, sum, neg, ++cur);
    sort(d.begin(), d.end(), greater<int>());
    cerr << "top op=" << op << " a=" << d[0] << " b=" << d[1] << " c=" << d[2] << endl;
    if (op == '-' && d[1] >= 0) neg += d[2] >= 0 ? d[2] : d[1];
    
    if (s.length() == 5) {
        if (op == '+') return d[0] + d[1] + d[2];
        else if (op == '-') return d[0] - d[1] - d[2];
    } else {
        cerr << "sum=" << sum << " neg=" << neg << endl;
        return sum - 2 * neg;
    }
    // }
}

int main(void) {
    string s;
    while (true) {
        cin >> s;
        if (s == "-1") break;
        int ans = solve(s);
        cout << ans << endl;
    }
    return 0;
}
