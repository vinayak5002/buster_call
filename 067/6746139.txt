// 2022-05-30 update

#include <iostream>
#include <iomanip>
#include <algorithm>
#include <vector>
#include <cmath>
#include <set>
#include <map>
#include <unordered_map>
#include <string>
#include <sstream>
#include <climits>
#include <bitset>
#include <deque>
#include <cassert>
#include <list>
#include <queue>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

constexpr double PI = 3.141592653589793;
// const ll MOD = 998244353;
constexpr ll MOD = 1'000'000'007;
bool DEBUG = true;

// Vecterの中身を表示
void print(const std::vector<ll>& v)
{
	std::for_each(v.begin(), v.end(), [](int x)
		{ std::cout << x << " "; });
	std::cout << std::endl;
}

void print(const std::vector<int>& v)
{
	std::for_each(v.begin(), v.end(), [](int x)
		{ std::cout << x << " "; });
	std::cout << std::endl;
}

// 1~Nまでの総和を求める
ll sum_from_1_to_N(ll N)
{
	if (N < 1LL)
	{
		return 0;
	}

	if ((N & 1) == 0) // even
	{
		return N / 2 * (N + 1);
	}
	else // odd
	{
		return (N + 1) / 2 * N;
	}
}

// 1~Nまでの総和を求める
ll sum_from_A_to_B(ll A, ll B)
{
	return sum_from_1_to_N(B) - sum_from_1_to_N(A);
}

// a^bを求める
ll intPOW(int a, int b)
{
	ll number = 1LL;
	for (int i = 2; i <= b; i++)
	{
		number *= a;
	}
	return number;
}

// c(n, m)を求める
ll combination(ll n, ll m)
{
	ll up = 2;
	ll down = 2;
	for (int i = n; i > n - m; i--)
	{
		up *= i;
	}

	for (int i = m; i >= 2; i--)
	{
		down *= i;
	}

	return up / down;
}

// a,bの最大公約数を求める
long long GCD(long long a, long long b)
{
	if (b == 0)
		return a;
	else
		return GCD(b, a % b);
}

//最小公倍数
ll LCM(ll a, ll b)
{
	return a * b / GCD(a, b);
}

//素数判定, P->true, not_P->false
bool check_Prime(ll N)
{
	if (N == 2)
		return true;

	if (N == 1 || (N & 1) == 0)
		return false;

	for (ll i = 3; i <= sqrt(N); i += 2)
	{
		if (N % i == 0)
			return false;
	}
	return true;
}

//エラストステネス and 高速素因数分解
// prime->IsPrime[i]=i; not prime ->最小の素因数
vector<int> Eratosthenes(size_t max_number)
{
	vector<int> IsPrime(max_number + 1);

	// tableの初期化
	for (int i = 1; i < IsPrime.size(); ++i)
	{
		IsPrime[i] = i;
	}

	for (int i = 2; i <= sqrt(max_number); ++i)
	{
		for (int j = i; j <= max_number; j += i)
		{
			if (IsPrime[j] == j)
			{
				IsPrime[j] = i;
			}
		}
	}
	return IsPrime;
}


int main()
{
	int N;
	cin >> N;
	
	bool flag = true;
	vector<int> R(N),C(N),P(N);

	for (int i = 0; i < N; ++i)
	{
		int r, c;
		cin >> r >> c;
		--r;
		--c;
		R[r]++;
		C[c]++;
		P[r] = c;

		if (R[r] > 1 || C[c] > 1)
		{
			flag = false;
		}
	}

	if (flag == false)
	{
		puts("-1");
		return 0;
	}

	int cnt = 0;
	for (int i = 0; i < N; ++i)
	{
		if (P[i] == i)
		{
			continue;
		}
		
		for (int j = i + 1; j < N; ++j)
		{
			if (P[j] == i)
			{
				swap(P[i], P[j]);
				cnt++;
			}
		}
	}
	cout << cnt << endl;
}
