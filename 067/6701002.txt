//Dijkstra's algorithm
//ヒープを用いた時の計算量はO(ElogV),線形探索をした場合はO(V^2)
//基本的にはヒープを用いたほうが高速だが、密グラフ（E≒V^2)の場合のみ注意
//「単一始点最短路問題」に適用出来、計算量も抑えめだが、負辺があるとダメ
//このアルゴリズムが上手くいくのは「負辺を含まない」（から現時点でヒープ内で最小の距離の頂点がこれ以上更新される可能性がなく最短距離として確定させてよい）ことがポイント
//幅優先探索の「距離が小さいもの優先」版ともいえる（「最良優先探索」）

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>
#include <iomanip>
#include <bitset>
#include <functional>
#include <queue>
#include <stack>
#include <utility>
#include <numeric>
#include <set>
#include <map>

using namespace std;

using ll = long long;
using ull = unsigned long long;
using ld = long double;
using uint = unsigned;
using vi = vector<int>;
using vl = vector<long>;
using vll = vector<long long>;
using vvi = vector<vi>;
using vvl = vector<vl>;
using vvll = vector<vll>;
using vc = vector<char>;
using vs = vector<string>;
using vb = vector<bool>;
using pii = pair<int, int>;
using pcc = pair<char, char>;
using pll = pair<ll, ll>;
using pdd = pair<ld, ld>;
using vpii = vector<pii>;

#define rep(i, n) for (ll i = 0; i < ll(n); i++)
#define repback(i, n) for (ll i = n-1; i >= 0; i--)
#define REP(i, a, b) for (ll i = a; i < ll(b); i++)
#define REPBACK(i, a, b) for (ll i = a-1; i >= ll(b); i--)
#define all(x) (x).begin(), (x).end()
#define debug(x) cout << "debug:" << x << endl

static const double pi = acos(-1.0);
const long long INFL = pow(10,17);
const int INF = pow(10,8);
const int mod1 = 1000000007;
const vi dx = {1,0,-1,0};
const vi dy = {0,1,0,-1};
const vi dx2 = {0, 1, 0, -1, 1, -1, 1, -1};
const vi dy2 = {1, 0, -1, 0, 1, 1, -1, -1};

//辺を表す型
struct edge{
    int to;
    long long w;
    //メンバ初期化リスト
    edge(int to, long long w): to(to), w(w) {}
};

//重み付きグラフを表す型
using graph = vector<vector<edge> >;

int main(){
    //入力の受け取り
    int V,E,r; cin >> V >> E >> r;
    graph g(V);
    rep(i,E){
        int s,t,d; cin >> s >> t >> d;
        g[s].push_back(edge(t,d));
    }

    //ダイクストラ法
    vll dist(V,INFL);
    dist[r] = 0;

    //(始点からの（現時点での）距離、頂点番号)のペアを要素としたヒープをつくる
    priority_queue<pair<ll, int>, //要素の型
                   vector<pair<ll, int> >, //内部コンテナ
                   greater<pair<ll, int> > //昇順に変更（小さいものから取り出したい）
                   > q; 
    q.push(make_pair(dist[r], r));

    //ダイクストラ法の反復を開始
    while(!q.empty()){
        //v:使用済みでない頂点のうち、dist[v]が最小の頂点
        //d:vに対するキー(距離)値
        int v = q.top().second;
        ll d = q.top().first;
        q.pop();

        //d>dist[v]の時は、ヒープに入っている経路が最短でないのでスルー(このように、この実装法だと一つの頂点に対して複数の距離がヒープ内にpushされてしまってることがあるのに注意)
        if(d>dist[v]) continue;

        //頂点Vを始点とした各辺の緩和
        for(auto e:g[v]){
            if(dist[v]+e.w < dist[e.to]){
                //更新があるならヒープに新たに挿入＆更新
                dist[e.to] = dist[v]+e.w;
                q.push(make_pair(dist[e.to], e.to));
            }
        }
    }

    //結果の出力
    rep(v,V){
        if(dist[v]<INFL) cout << dist[v] << endl;
        else cout << "INF" << endl;
    }

}
