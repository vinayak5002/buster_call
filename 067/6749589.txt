fn main() {
    let nml: Vec<usize> = read_vec();
    let n = nml[0];
    let m = nml[1];
    let l = nml[2];
    let a: Vec<Vec<i64>> = read_vec2(n);
    let b: Vec<Vec<i64>> = read_vec2(m);
    let mut c = vec![vec![0; l]; n];
    for i in 0..n {
        for j in 0..l {
            c[i][j] = mul(&a, &b, i, j);
            if l - 1 == j {
                println!("{}", c[i][j]);
            } else {
                print!("{} ", c[i][j])
            }
        }
    }
}

fn mul(a: &Vec<Vec<i64>>, b: &Vec<Vec<i64>>, ti: usize, tj: usize) -> i64 {
    let mut total = 0;
    for i in 0..b.len() {
        total += a[ti][i] * b[i][tj];
    }
    total
}

fn read<T: std::str::FromStr>() -> T {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).ok().unwrap();
    s.trim().parse().ok().unwrap()
}

fn read_vec<T: std::str::FromStr>() -> Vec<T> {
    read::<String>()
        .split_whitespace()
        .map(|e| e.parse().ok().unwrap())
        .collect()
}

fn read_vec2<T: std::str::FromStr>(n: usize) -> Vec<Vec<T>> {
    (0..n).map(|_| read_vec()).collect()
}

