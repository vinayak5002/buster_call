#include<iostream>
#include<vector>

#define INF 2147483647

void initRMQ(int n);
void update(int k, int n);
int findMin(int a,int b);
int query(int a, int b, int k, int l, int r);


int n;
std::vector<int> D((100000*2)+1,INF);

int main(){
    int n_,q;
    std::cin>>n_>>q;
    initRMQ(n_);

    for(int i = 0;i<q;i++){
        int cmd;
        std::cin>>cmd;
        if(cmd==0){ //update
            int k,v;
            std::cin>>k>>v;
            update(k,v);
        }
        if(cmd==1){// findMin
            int a,b;
            std::cin>>a>>b;
            std::cout<<findMin(a,b)<<std::endl;
        }

    }
    return 0;

}

void initRMQ(int n_){
    n=1;
    while(n < n_){
        n*=2;
    }

    for(int i=0;i<2*n-1;i++){
        D[i]=INF;
    }
}

void update(int k, int x){
    k += n-1; // convert array index to tree index 
    D[k] = x;
    while(k > 0){
            k = (k - 1)/2;
            D[k] = std::min(D[k*2+1], D[k*2+2]);
    }
}
int findMin(int a,int b){
    return query(a, b+1, 0, 0, n);
}

int query(int a, int b, int k, int l, int r){
    if(r<=a || b<=l) return INF; //case1 return INF
    if(a<=l && r<=b) return D[k]; //case2 return D[k]
    // case 3
    int vl = query(a, b, k*2 + 1, l, (l + r)/2);
    int vr = query(a, b, k*2 + 2, (l + r)/2, r);
    return std::min(vl, vr);
}
