#define _USE_MATH_DEFINES
#include<bits/stdc++.h>
#include<unordered_map>

using namespace std;
#define LP(I,S,G) for (long long int I = (S); I < (G); I++)
#define IN(X) 	for (int in = 0; in < X.size(); in++)cin >> X[in]
#define OUT(X) 	for (int in = 0; in < X.size(); in++)cout << X[in]<<" "
#define SORT(X) sort((X).begin(), (X).end())
#define CSORT(X,Y) sort(X.begin(), X.end(),Y)
#define COPY(X,Y) copy(X.begin(), X.end(), Y.begin())
#define ALL(X,Y) for (auto X = (Y).begin(); X != (Y).end(); X++)
#define FULL(a)  (a).begin(),(a).end()
#define BFS(Q,S) for(Q.push(S);Q.size()!=0;Q.pop())
typedef long long int ll;
typedef unsigned long long int ull;
long long int M = pow(10, 9) + 7;


int dx[] = { 0,-1,0,1 }, dy[] = { -1,0,1,0 };

ll MAX(ll A, ll B) { return ((A) > (B) ? (A) : (B)); }
ll MIN(ll A, ll B) { return ((A) < (B) ? (A) : (B)); }
long long int xor128() {
	static long long int x = 123456789, y = 362436069, z = 521288629, w = 88675123;
	long long int t = (x ^ (x << 11));
	x = y; y = z; z = w;
	return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
}

struct HashPair {
	//注意 constがいる
	template<class T1, class T2>
	size_t operator()(const pair<T1, T2> &p) const {
		//first分をハッシュ化する
		auto hash1 = hash<T1>{}(p.first);
		//second分をハッシュ化する
		auto hash2 = hash<T2>{}(p.second);
		//重複しないようにハッシュ処理
		size_t seed = 0;
		seed ^= hash1 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		seed ^= hash2 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		return seed;
	}
};
template<class I1, class I2>
istream& operator>>(istream& s, pair<I1, I2>& in) {
	s >> in.first >> in.second;
	return s;
}

ll solve(string& s, ll l, ll r, ll now,vector<ll>& pass) {
	if (s.size() == 1) {
		return pass[s[0] - 'a'];
	}
	char op = s[l];
	now++;
	vector<ll> v;
	while (now != r) {
		if (s[now] == '[') {
			ll new_l = now + 1;
			ll new_r = new_l;
			ll cnt = 1;
			while (cnt != 0) {
				new_r++;
				if (s[new_r] == '[')cnt++;
				if (s[new_r] == ']')cnt--;
			}
			v.push_back(solve(s, new_l, new_r, new_l, pass));
			now = new_r+ 1;
		}
		else {
			v.push_back(pass[s[now] - 'a']);
			now++;
		}
	}
	if (op == '+')return (v[0] | v[1]);
	if (op == '*')return (v[0] & v[1]);
	if (op == '^')return (v[0] ^ v[1]);
}

int main() {
	while (1) {
		string s;
		cin >> s;
		if (s == ".")break;
		int n = s.size();
		string p;
		cin >> p;
		vector<ll> pass(4);
		LP(i, 0, 4)pass[i] = p[i] - '0';
		ll res = solve(s, 1, n - 1, 1, pass);
		cout << res << " ";
		ll cnt = 0;
		LP(v, 0, 10) {
			LP(w, 0, 10) {
				LP(x, 0, 10) {
					LP(y, 0, 10) {
						vector<ll> sp = { v,w,x,y };
						ll sr = solve(s, 1, n-1, 1, sp);
						if (res == sr)cnt++;
					}
				}
			}
		}
		cout << cnt << "\n";
	}
	return 0;
}

