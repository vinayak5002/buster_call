#include <iostream>
#include <vector>

using namespace std;
//グラフの変数
using Graph = vector<vector<int> >;

bool dfs(Graph graph, int point, bool searched[])
{
    //探索済みの点を探索した、つまりサイクルがあったならreturn
    if(searched[point] == true)
        return true;
    else
        searched[point] = true;    

    int next_edge = 0;      //次の辺の添字
    int next_point;         //次の点の添字
    vector<int> edge;

    edge = graph[point];    //探索点の辺を得る

    while(1)
    {
        //探索する辺がないならその点の探索終了
        if(edge.size() == next_edge)
            break;

        next_point = edge[next_edge];

        if(dfs(graph, next_point, searched))
            return true;

        //次の辺を探索する
        next_edge++;
    }

    searched[point] = false;    //未探索状態に戻す

    return false;
}

int main()
{
    int v, e; //vは点の数、eは辺の数
    int start, end;
    bool isCyclic;

    cin >> v;
    cin >> e;

    Graph graph(v);
    bool searched[v];   //探索済みの点をtrue、未探索の点をfalseで保持する

    //各点を未探索で初期化
    for(int i = 0; i < v; i++)
        searched[i] = false;

    //グラフの初期化
    for(int i = 0; i < e; i++)
    {
        cin >> start >> end;
        graph[start].push_back(end);
    }

    //グラフの探索
    isCyclic = dfs(graph, start, searched);

    if(isCyclic)
        cout << 1 << endl;  //サイクルあり
    else
        cout << 0 << endl;  //サイクルなし
}
