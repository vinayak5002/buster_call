
#define SUITS 4         /*The number of suits*/
#define VALUES 9        /*The number of card values*/
#define N_MAX 36        /*The number of total cards*/
#define CHAR_MAX 3      /*The string length of a card (e.g., H3, S7, D9)*/
#include<stdio.h>
#include<string.h>

/**/
void getStringArray (int n, char a[N_MAX][CHAR_MAX]);
void copyStringArray (int n, char x[N_MAX][CHAR_MAX], char y[N_MAX][CHAR_MAX]);
void printStringArray (int n, char a[N_MAX][CHAR_MAX]);
void swap (char x[CHAR_MAX], char y[CHAR_MAX]);
int BubbleSort (int n, char a[N_MAX][CHAR_MAX]);
int SelectionSort (int n, char a[N_MAX][CHAR_MAX]);
int isStable (int n, char x[N_MAX][CHAR_MAX], char y[N_MAX][CHAR_MAX]);

int main ()
{
    /*Variables*/
    int num=0;                                  /*Size of the sequence*/
    char sequence[N_MAX][CHAR_MAX]={"\0"};      /*The input sequence*/
    char copy[N_MAX][CHAR_MAX]={"\0"};          /*The backup sequence used to reset the sorted sequence*/
    /*Read the size and the elements of the sequence from input*/
    scanf("%d",&num);
    getStringArray(num,sequence);

    /*Create a backup sequence called 'copy'*/
    copyStringArray(num,copy,sequence);
    
    /*Perform bubble sort and print the results*/
    BubbleSort(num,sequence);
    printStringArray(num,sequence);
    if (isStable(num,copy,sequence))
    {
        printf("Stable\n"); 
    }
    else
    {
        printf("Not stable\n");
    }

    /*Reset the sequence to the original one*/
    copyStringArray(num,sequence,copy);

    /*Perform selection sort and print the results*/
    SelectionSort(num,sequence);
    printStringArray(num,sequence);
    if (isStable(num,copy,sequence))
    {
        printf("Stable\n"); 
    }
    else
    {
        printf("Not stable\n");
    }

    return 0;
}

/*Function reading a string array*/
void getStringArray (int n, char a[N_MAX][CHAR_MAX])
{
    int i=0;        /*loop index*/

    for (i=0;i<n;i++)
    {
        scanf("%s",&a[i]);
    }

    return;
}

/*Function copying the string array y to x (x and y must have the same size)*/
void copyStringArray (int n, char x[N_MAX][CHAR_MAX], char y[N_MAX][CHAR_MAX])
{
    int i=0;        /*loop index*/

    /*Loop through all string elements and make the copy for every string element*/
    for (i=0;i<n;i++)
    {
        strcpy(x[i],y[i]);
    }

    return;
}

/*Function printing out a string array*/
void printStringArray (int n, char a[N_MAX][CHAR_MAX])
{
    int i=0;        /*loop index*/

    /*Loop through all string elements and print the string elements*/
    for (i=0;i<n;i++)
    {
        if (i!=n-1)                 /*if the element is not the last one, print it with a space*/
        {
            printf("%s ",a[i]);
        }
        else                        /*if it is the last one, print it with a new line*/
        {
            printf("%s\n",a[i]);
        }
    }
    
    return;
}

/*Function swapping 2 strings x and y*/
void swap (char x[CHAR_MAX], char y[CHAR_MAX])
{
    char temp[CHAR_MAX]={"\0"};     /*A temporal string used for swapping*/

    /*Swap x and y*/
    strcpy(temp,x);
    strcpy(x,y);
    strcpy(y,temp);

    return;
}

/*Function of Bubble Sort*/
int BubbleSort (int n, char a[N_MAX][CHAR_MAX])
{   
    int i=0;
    int j=0;
    int count=0;

    for (i=0;i<n;i++)
    {   
        for (j=n-1;j>i;j--)
        {
            if (a[j][1]<a[j-1][1])
            {
                swap(a[j],a[j-1]);
                count++;
            }
        }
    }

    return count;
}

/*Function of Selection Sort*/
int SelectionSort (int n, char a[N_MAX][CHAR_MAX])
{   
    int i=0;
    int j=0;
    int count=0;
    int mini=0;

    for (i=0;i<n;i++)
    {   
        mini = i;
        for (j=i;j<n;j++)
        {
            if (a[j][1]<a[mini][1])
            {
                mini = j;
            }
        }
        if (a[i][1]>a[mini][1])
        {
            swap(a[i],a[mini]);
            count++;
        }    
    }

    return count;
}

/*
The function checking the sorted array is stable or not.

*/
int isStable (int n, char x[N_MAX][CHAR_MAX], char y[N_MAX][CHAR_MAX])
{
    int result=1;                   /*The return value: 1 for true and 0 for false*/
    int i=0;                        /*loop index*/
    int j=0;
    int count_x=0;                  /*counting the cards with the same values*/
    int count_y=0;
    char order_x[SUITS+1]={'\0'};   /*A string storing the suits in the sequence order*/
    char order_y[SUITS+1]={'\0'};  

    /*Loop for values*/
    for (i=1;i<=VALUES;i++)
    {
        count_x=0;
        count_y=0;
        /*Loop for cards*/
        for (j=0;j<n;j++)
        {
            if (x[j][1]==i+48)
            {
                order_x[count_x]=x[j][0];
                count_x++;
            }
            if (y[j][1]==i+48)
            {
                order_y[count_y]=y[j][0];
                count_y++;
            }
        }
        /*if the order of x and y are not the same, the sorted sequence is not stable.*/
        if (strcmp(order_x,order_y))
        {
            result=0;
            break;
        }
    }
    return result;
}

