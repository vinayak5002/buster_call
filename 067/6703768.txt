import java.io.*;
class Main
{
    static int count = 0;
    static int infty = 1000000001;
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String str_n = br.readLine();
        String[] str_S = br.readLine().split("\\s");
        int n = Integer.parseInt(str_n);
        int[] S = new int[n];
        for(int i=0; i<n; i++){
            S[i] = Integer.parseInt(str_S[i]);
        }
        mergeSort(S, 0, n-1);
        StringBuilder sb = new StringBuilder();
        for(int j=0; j<n; j++){
            if(j<n-1){
                sb.append(S[j]);
                sb.append("\\s");
            }else{
                sb.append(S[j]);
            }
        }
        System.out.println(sb);
        System.out.println(count);
    }
    
    static void merge(int[] A, int left, int mid, int right)
    {
        int n1 = mid -left;
        int n2 = right - mid;
        int[] L = new int[n1+1];
        int[] R = new int[n2+2];
        
        for(int i=0; i<n1; i++){
            L[i] = A[left + i];
        }
        for(int j=0; j<=n2; j++){
            R[j] = A[mid + j];
        }
        L[n1] = R[n2+1] = infty;
        int i, j;
        i = j = 0;
        
        for(int k = left; k < right; k++){
            if(L[i] <= R[j]){
                A[k] = L[k];
                i++;
            }else{
                A[k] = R[j];
                j++;
            }
            count++;
        }
    }
    
    static void mergeSort(int[] S, int left, int right)
    {
        if(left + 1 < right){
            int mid = (left + right)/2;
            mergeSort(S, left, mid);
            mergeSort(S, mid, right);
            merge(S, left, mid, right);
        }
    }
}
