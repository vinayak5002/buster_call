use std::io;

fn main() {
    let mut s = String::new();
    io::stdin().read_line(&mut s).expect("Error");
    let nm_str_list: Vec<&str> = s.split_whitespace().collect();
    let n = nm_str_list[0].parse().unwrap_or(0);
    let m = nm_str_list[1].parse().unwrap_or(0);

    // 求めたいもの
    // a[i][j] * b[j]
    let mut a_vec: Vec<_> = vec![];

    // 行列Aの取得
    for i in 0..n as usize {
        let mut a_vec_str = String::new();
        io::stdin().read_line(&mut a_vec_str).expect("Error");
        let a_row_str_vec: Vec<&str> = a_vec_str.split_whitespace().collect();
        let mut a_row_vec: Vec<i32> = vec![];
        for j in a_row_str_vec {
            a_row_vec.push(j.parse().unwrap_or(0))
        }
        a_vec.push(a_row_vec);
    }
    // ベクトルbの取得
    let mut b_vec: Vec<i32> = vec![];
    for i in 0..m as usize {
        let mut b_vec_value_str = String::new();
        io::stdin().read_line(&mut b_vec_value_str).expect("Error");
        let b_vec_value = b_vec_value_str.trim().parse().unwrap_or(0);
        b_vec.push(b_vec_value);
    }

    let mut c: Vec<i32> = vec![];
    for i in 0..n as usize {
        let mut c_column_sum = 0;
        for j in 0..m as usize {
            let product = a_vec[i][j] * b_vec[j];
            c_column_sum = c_column_sum + product;
        }
        c.push(c_column_sum);
    }

    for i in c {
        println!("{}", i);
    }

}

