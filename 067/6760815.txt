#include <bits/stdc++.h>

#include <boost/multiprecision/cpp_dec_float.hpp>
#include <boost/multiprecision/cpp_int.hpp>

namespace mp = boost::multiprecision;

using Bint = mp::cpp_int;
using Bfloat = mp::number<mp::cpp_dec_float<1024>>;

using namespace std;

struct UnionFind {
  vector<int> d;
  UnionFind(int n) : d(n, -1) {}
  int root(int x) {
    if (d[x] < 0) return x;
    return d[x] = root(d[x]);
  }
  bool unite(int x, int y) {
    x = root(x);
    y = root(y);
    if (x == y) return false;
    if (d[x] > d[y]) swap(x, y);
    d[x] += d[y];
    d[y] = x;
    return true;
  }
  bool same(int x, int y) { return root(x) == root(y); }
  int size(int x) { return -d[root(x)]; }
};

typedef long long ll;
typedef unsigned long long ul;
typedef long double ld;
#define rep(i, n) for (int i = 0; i < n; i++)

int main() {
  while (1) {
    ll ans = 1000000000;
    int n;
    cin >> n;
    if (n == 0) {
      return 0;
    }
    vector<ll> a;
    for (int i = 0; i < n; i++) {
      ll aa;
      cin >> aa;
      a.push_back(aa);
    }
    sort(a.begin(), a.end());
    for (int i = 0; i < n - 1; i++) {
      ans = min(ans, abs(a.at(i) - a.at(i + 1)));
    }
    cout << ans << endl;
  }
}
