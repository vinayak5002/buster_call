//    https://onlinejudge.u-aizu.ac.jp/problems/GRL_5_A
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Scanner;


public class Main {

	public static void main(String[] args) {
		//入力受け取り
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();

		//隣接リスト
		//[自分のノード][隣接しているノードたち][隣接しているノードまでの距離, 隣接しているノード番号]
		ArrayList<ArrayList<ArrayList<Integer>>> rel = new ArrayList<ArrayList<ArrayList<Integer>>>();
		for (int i = 0; i < n; i++) rel.add(new ArrayList<ArrayList<Integer>>());
		for (int i = 0; i < n-1; i++) {
			//エッジ情報を受け取り隣接リスト構築(無向グラフ)
			int s = sc.nextInt();
			int t = sc.nextInt();
			int w = sc.nextInt();
			rel.get(s).add(new ArrayList<Integer>(List.of(w, t)));
			rel.get(t).add(new ArrayList<Integer>(List.of(w, s)));
		}

		//ダイクストラ法で使う優先度付きキュー
		PriorityQueue<ArrayList<Integer>> queue = new PriorityQueue<>(new Comparator<List<Integer>>() {
			@Override
			public int compare(List a, List b) {
				return (int)a.get(0) > (int)b.get(0) ? 1 : a.get(0) == b.get(0) ? 0 : -1;
			}
		});

		//探索可フラグ
		boolean[] flags = new boolean[n];
		Arrays.fill(flags, true);
		
		//0番目のノードをキューに入れる
		queue.add(new ArrayList<Integer>(List.of(0, 0)));
		
		//初期位置からの最短距離の配列
		int[] distFromStart = new int[n];
		Arrays.fill(distFromStart, Integer.MAX_VALUE);
		
		//キューが無くなるまで
		while (!queue.isEmpty()) {
			//現在地をキューから受け取り探索済みにして距離を更新
			ArrayList<Integer> now = queue.poll();
			flags[now.get(1)] = false;
			distFromStart[now.get(1)] = now.get(0);

			//現在地と隣接しているノードを探索し探索可なら優先度付きキューに入れる
			for (ArrayList<Integer> i : rel.get(now.get(1))) {
				if (flags[i.get(1)]){
					queue.add(new ArrayList<Integer>(List.of(i.get(0) + distFromStart[now.get(1)], i.get(1))));
				}
			}
		}
		
		//初期位置から一番離れているノード番号を見つける
		int maxIndexNum = 0;
		for (int i : distFromStart) maxIndexNum = Math.max(i, maxIndexNum);
		int nextSearch = 0;
		for (int i = 0; i < n; i++) nextSearch = distFromStart[i] == maxIndexNum ? i : nextSearch;
		
		//初期位置から一番離れたノードをキューに入れる
		queue.add(new ArrayList<Integer>(List.of(0, nextSearch)));
		
		//前回使った内容を初期化
		Arrays.fill(flags, true);
		Arrays.fill(distFromStart, Integer.MAX_VALUE);
		
		//前回と同じようにダイクストラ法で探索
		while (!queue.isEmpty()) {
			ArrayList<Integer> now = queue.poll();
			flags[now.get(1)] = false;
			distFromStart[now.get(1)] = now.get(0);
			for (ArrayList<Integer> i : rel.get(now.get(1))) {
				if (flags[i.get(1)]){
					queue.add(new ArrayList<Integer>(List.of(i.get(0) + distFromStart[now.get(1)], i.get(1))));
				}
			}
		}

		//初期位置から一番離れているノードをから最長の距離が答え(木の直径)
		int ans = 0;
		for (int i : distFromStart) ans = Math.max(i, ans);
		System.out.println(ans);
	}
}
