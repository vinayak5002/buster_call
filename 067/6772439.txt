#include <bits/stdc++.h>
using namespace std;
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define reps(i,start,end) for(int i = start; i < (int)(end); i++)
#define ll long long
#define print(t) cout << t << endl
#define all(a)  (a).begin(),(a).end()
// << std::fixed << std::setprecision(0)
const ll INF = 1LL << 60;

template<class T> void chmin(T& a, T b){
 if(a > b){
  a = b;
 }
}

template<class T> void chmax(T& a, T b){
 if(a < b){
  a = b;
 }
}

template<class Tp>
bool zero (const Tp &x) {
    return x == 0;
}

template<class Tp, class... Args>
bool zero (const Tp &x, const Args& ...args) {
    return zero(x) and zero(args...);
}
int new_a(int a, int l){
  vector<int>vec(l,0);
  string s = to_string(a);
  rep(i,(int)s.size()){
    vec[i] = s[i] - '0';
  }
  auto Rvec = vec;
  sort(all(vec));
  sort(all(Rvec));
  reverse(all(Rvec));
  int small = 0;
  int big = 0;
  for(int i = l-1;i>=0;i--){
    small += vec[i] * pow(10,(l-i-1));
    big += Rvec[i] * pow(10,(l-i-1));
  }
  return (big -small);
}
int main(){
  while(true){
    int a,l;cin >> a >> l;
    if(zero(a,l))break;
    vector<int> aset;
    int count = 0;
    while(aset.empty() ||find(all(aset),a) == aset.end()){
      aset.push_back(a);
      a = new_a(a,l);
      // cout<< a << endl;
      count++;
    }
    int cnt = 0;
    for(auto p:aset){
      if(p == a){
        break;
      }
      cnt++;
    }
    cout << cnt << " "<< a << " "<< count - cnt << endl;
  }
}

