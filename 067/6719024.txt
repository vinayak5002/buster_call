#line 1 "a.cpp"
#define PROBLEM "https://onlinejudge.u-aizu.ac.jp/courses/library/6/NTL/2/NTL_2_C"
#line 2 "/home/kuhaku/home/github/algo/lib/template/template.hpp"
#pragma GCC target("sse4.2,avx2,bmi2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
template <class T, class U>
bool chmax(T &a, const U &b) {
    return a < (T)b ? a = (T)b, true : false;
}
template <class T, class U>
bool chmin(T &a, const U &b) {
    return (T)b < a ? a = (T)b, true : false;
}
constexpr int64_t INF = 1000000000000000003;
constexpr int Inf = 1000000003;
constexpr int MOD = 1000000007;
constexpr int MOD_N = 998244353;
constexpr double EPS = 1e-7;
constexpr double PI = M_PI;
#line 3 "/home/kuhaku/home/github/algo/lib/math/modint.hpp"

/**
 * @brief modint
 * @see https://github.com/ei1333/library/blob/master/math/combinatorics/mod-int.cpp
 *
 * @tparam mod 法
 */
template <int mod = MOD_N>
struct ModInt {
    static constexpr int get_mod() noexcept { return mod; }

    constexpr ModInt() noexcept : x(0) {}
    constexpr ModInt(int y) noexcept : x(y >= 0 ? y % mod : (mod - 1 - ~y % mod)) {}
    constexpr ModInt(std::int64_t y) noexcept : x(y >= 0 ? y % mod : (mod - 1 - ~y % mod)) {}

    constexpr ModInt &operator+=(const ModInt &rhs) noexcept {
        if ((this->x += rhs.x) >= mod) this->x -= mod;
        return *this;
    }
    constexpr ModInt &operator-=(const ModInt &rhs) noexcept {
        if ((this->x += mod - rhs.x) >= mod) this->x -= mod;
        return *this;
    }
    constexpr ModInt &operator*=(const ModInt &rhs) noexcept {
        this->x = (int)(1LL * this->x * rhs.x % mod);
        return *this;
    }
    constexpr ModInt &operator/=(const ModInt &rhs) noexcept {
        *this *= rhs.inverse();
        return *this;
    }

    constexpr ModInt &operator++() noexcept {
        if ((++(this->x)) >= mod) this->x -= mod;
        return *this;
    }
    constexpr ModInt operator++(int) noexcept {
        ModInt tmp(*this);
        this->operator++();
        return tmp;
    }
    constexpr ModInt &operator--() noexcept {
        if ((this->x += mod - 1) >= mod) this->x -= mod;
        return *this;
    }
    constexpr ModInt operator--(int) noexcept {
        ModInt tmp(*this);
        this->operator--();
        return tmp;
    }

    constexpr ModInt operator-() const noexcept { return ModInt(-this->x); }
    constexpr ModInt operator+(const ModInt &rhs) const noexcept { return ModInt(*this) += rhs; }
    constexpr ModInt operator-(const ModInt &rhs) const noexcept { return ModInt(*this) -= rhs; }
    constexpr ModInt operator*(const ModInt &rhs) const noexcept { return ModInt(*this) *= rhs; }
    constexpr ModInt operator/(const ModInt &rhs) const noexcept { return ModInt(*this) /= rhs; }

    constexpr bool operator==(const ModInt &rhs) const noexcept { return this->x == rhs.x; }
    constexpr bool operator!=(const ModInt &rhs) const noexcept { return this->x != rhs.x; }

    explicit operator int() const noexcept { return x; }

    constexpr ModInt inverse() const noexcept {
        int a = x, b = mod, u = 1, v = 0, t;
        while (b > 0) {
            t = a / b;
            swap(a -= t * b, b);
            swap(u -= t * v, v);
        }
        return ModInt(u);
    }

    constexpr ModInt pow(std::int64_t n) const noexcept { return ModInt(*this).pow_self(n); }
    constexpr ModInt &pow_self(std::int64_t n) noexcept {
        ModInt res(1);
        for (; n > 0; n >>= 1) {
            if (n & 1) res *= *this;
            *this *= *this;
        }
        *this = res;
        return *this;
    }

    friend std::istream &operator>>(std::istream &is, ModInt &rhs) {
        std::int64_t t;
        is >> t;
        rhs = ModInt<mod>(t);
        return (is);
    }
    friend std::ostream &operator<<(std::ostream &os, const ModInt &rhs) { return os << rhs.x; }

  private:
    int x;
};
#line 3 "/home/kuhaku/home/github/algo/lib/fft/ntt.hpp"

template <int mod, int primitive_root>
struct NTT {
    using mint = ModInt<mod>;
    const int get_mod() const { return mod; }
    template <class T>
    void _ntt(vector<T> &a, bool inv) {
        int N = a.size();
        static bool is_first = true;
        static array<mint, 30> vbw, vibw;
        if (is_first) {
            is_first = false;
            for (int i = 0; i < 30; ++i) {
                vbw[i] = mint(primitive_root).pow((mod - 1) >> (i + 1));
                vibw[i] = vbw[i].inverse();
            }
        }
        for (int i = 0, j = 1; j < N - 1; ++j) {
            for (int k = N >> 1; k > (i ^= k); k >>= 1)
                ;
            if (i > j) swap(a[i], a[j]);
        }
        for (int k = 0, t = 1; t < N; ++k, t <<= 1) {
            mint bw = vbw[k];
            if (inv) bw = vibw[k];
            for (int i = 0; i < N; i += t * 2) {
                mint w = 1;
                for (int j = 0; j < t; ++j) {
                    int l = i + j, r = i + j + t;
                    mint c = a[l], d = w * a[r];
                    a[l] = int(c + d);
                    a[r] = int(c - d);
                    w *= bw;
                }
            }
        }
        if (inv) {
            int m = int(mint(N).inverse());
            for (int i = 0; i < N; ++i) a[i] = T(1LL * a[i] * m % mod);
        }
    }

    template <class T>
    void convolution_self(vector<T> &a, vector<T> b) {
        int n = a.size() + b.size() - 1;
        int N = 1;
        while (N < n) N <<= 1;
        a.resize(N), b.resize(N);

        _ntt(a, false), _ntt(b, false);

        for (int i = 0; i < N; ++i) a[i] = T(1LL * a[i] * b[i] % mod);

        _ntt(a, true);
        a.resize(n);
    }

    template <class T>
    vector<T> convolution(const vector<T> &a, const vector<T> &b) {
        vector<T> res = a;
        convolution_self(res, b);
        return res;
    }
};

using NTT_N = NTT<MOD_N, 3>;
#line 3 "/home/kuhaku/home/github/algo/lib/data_structure/bigint.hpp"

/**
 * @brief 多倍長整数
 *
 * @see https://qiita.com/square1001/items/1aa12e04934b6e749962
 * @see http://yamatyuu.net/computer/program/long/div/index.html
 */
struct BigInt {
    BigInt() : data(1), sign() {}
    explicit BigInt(std::int64_t x) : data(), sign() {
        if (!x) {
            this->data = std::vector<int>(1);
            return;
        }
        bool flag = x < 0;
        if (x < 0) x = -x;
        std::vector<int> v;
        while (x) {
            v.emplace_back(x % 10);
            x /= 10;
        }
        this->sign = flag;
        this->data = v;
    }
    explicit BigInt(std::string s) : data(s.size()), sign(false) {
        if (s[0] == '-') {
            this->sign = true;
            this->data.pop_back();
        }
        std::reverse(s.begin(), s.end());
        for (int i = 0; i < (int)s.size() - int(this->sign); ++i) {
            this->data[i] = s[i] - '0';
        }
    }
    explicit BigInt(const std::vector<int> &v) : data(v) { this->format(); }
    explicit BigInt(const std::vector<int> &v, bool flag) : data(v), sign(flag) {
        this->format();
    }

    BigInt &operator+=(const BigInt &rhs) {
        if (this->sign == rhs.sign) add(this->data, rhs.data);
        else sub(this->data, rhs.data);
        this->format();
        return *this;
    }
    BigInt &operator-=(const BigInt &rhs) {
        if (sign == rhs.sign) sub(this->data, rhs.data);
        else add(this->data, rhs.data);
        this->format();
        return *this;
    }
    BigInt &operator*=(const BigInt &rhs) {
        this->mul(this->data, rhs.data);
        this->sign ^= rhs.sign;
        this->format();
        return *this;
    }
    BigInt &operator*=(int rhs) {
        this->mul(this->data, rhs);
        return *this;
    }
    BigInt &operator/=(const BigInt &rhs) {
        assert(!rhs.is_zero());
        if (this->abs_less(rhs)) return (*this = BigInt());
        if (this->size() < 9) return (*this = BigInt(this->to_int() / rhs.to_int()));
        if (rhs.size() < 8) return (*this /= rhs.to_int());
        std::vector<int> v = rhs.data;
        int k = 10 / (1 + v.back());
        *this *= k;
        this->mul(v, k);
        int d = this->size() - v.size();
        std::vector<int> u(this->data.end() - v.size() + 1, this->data.end());
        std::vector<int> ans(d + 1);
        for (int i = d; i >= 0; --i) {
            u.insert(u.begin(), this->data[i]);
            if (u.size() > v.size()) {
                int x = 0, y = 0;
                for (int j = 0; j < 3; ++j) x = x * 10 + u[(int)u.size() - 1 - j];
                for (int j = 0; j < 2; ++j) y = y * 10 + v[(int)v.size() - 1 - j];
                int z = x / y - 1;
                auto cp = v;
                this->mul(cp, z);
                this->sub(u, cp);
                ans[i] = z;
            }
            if (!this->less(u, v)) {
                this->sub(u, v);
                ++ans[i];
            }
        }

        return (*this = BigInt(ans, this->sign != rhs.sign));
    }
    BigInt &operator/=(int rhs) {
        bool flag = rhs < 0;
        if (rhs < 0) rhs = -rhs;
        int x = 0;
        std::vector<int> ans(this->size());
        for (int i = this->size() - 1; i >= 0; --i) {
            x = x * 10 + this->data[i];
            ans[i] = x / rhs;
            x -= ans[i] * rhs;
        }
        return (*this = BigInt(ans, this->sign != flag));
    }
    BigInt &operator%=(const BigInt &rhs) {
        assert(!rhs.is_zero());
        if (this->abs_less(rhs)) return *this;
        if (this->size() < 9) return (*this = BigInt(this->to_int() % rhs.to_int()));
        if (rhs.size() < 8) return (*this %= rhs.to_int());
        std::vector<int> v = rhs.data;
        int k = 10 / (1 + v.back());
        *this *= k;
        this->mul(v, k);
        int d = this->size() - v.size();
        std::vector<int> u(this->data.end() - v.size() + 1, this->data.end());
        for (int i = d; i >= 0; --i) {
            u.insert(u.begin(), this->data[i]);
            if (u.size() > v.size()) {
                int x = 0, y = 0;
                for (int j = 0; j < 3; ++j) x = x * 10 + u[(int)u.size() - 1 - j];
                for (int j = 0; j < 2; ++j) y = y * 10 + v[(int)v.size() - 1 - j];
                int z = x / y - 1;
                auto cp = v;
                this->mul(cp, z);
                this->sub(u, cp);
            }
            if (!this->less(u, v)) this->sub(u, v);
        }

        this->div(u, k);
        return (*this = BigInt(u, this->sign != rhs.sign));
    }
    BigInt &operator%=(int rhs) {
        bool flag = rhs < 0;
        if (rhs < 0) rhs = -rhs;
        int x = 0;
        for (int i = this->size() - 1; i >= 0; --i) {
            x = x * 10 + this->data[i];
            int k = x / rhs;
            x -= k * rhs;
        }
        return (*this = (this->sign != flag ? BigInt(-x) : BigInt(x)));
    }

    BigInt &operator>>=(int rhs) {
        this->data.erase(this->data.begin(), this->data.begin() + rhs);
        return *this;
    }
    BigInt &operator<<=(int rhs) {
        this->data.insert(this->data.begin(), rhs, 0);
        return *this;
    }

    BigInt operator-() const {
        BigInt res = *this;
        if (!res.is_zero()) res.sign = !res.sign;
        return res;
    }
    BigInt operator+(const BigInt &rhs) const { return BigInt(*this) += rhs; }
    BigInt operator-(const BigInt &rhs) const { return BigInt(*this) -= rhs; }
    BigInt operator*(const BigInt &rhs) const { return BigInt(*this) *= rhs; }
    BigInt operator*(int rhs) const { return BigInt(*this) *= rhs; }
    BigInt operator/(const BigInt &rhs) const { return BigInt(*this) /= rhs; }
    BigInt operator%(const BigInt &rhs) const { return BigInt(*this) %= rhs; }

    bool operator==(const BigInt &rhs) const {
        if (this->sign != rhs.sign) return false;
        if (this->size() != rhs.size()) return false;
        for (int i = 0; i < this->size(); ++i) {
            if (this->data[i] != rhs.data[i]) return false;
        }
        return true;
    }

    bool operator<(const BigInt &rhs) const {
        if (sign != rhs.sign) return sign;
        return this->abs_less(rhs);
    }
    bool operator>(const BigInt &rhs) const { return rhs < *this; }
    bool operator<=(const BigInt &rhs) const { return !(*this > rhs); }
    bool operator>=(const BigInt &rhs) const { return !(*this < rhs); }

    friend std::istream &operator>>(std::istream &is, BigInt &rhs) {
        std::string s;
        is >> s;
        rhs = BigInt(s);
        return is;
    }

    friend std::ostream &operator<<(std::ostream &os, const BigInt &rhs) {
        std::string s;
        for (auto i : rhs.data) s.push_back(char(i + '0'));
        if (rhs.sign) s.push_back('-');
        std::reverse(s.begin(), s.end());
        os << s;
        return os;
    }

    inline int size() const { return this->data.size(); }
    inline bool is_zero() const { return this->data.size() == 1 && this->data[0] == 0; }

    int back() const {
        assert(this->size() > 0);
        return this->data.back();
    }

    BigInt abs() const {
        if (!this->sign) return *this;
        return -(*this);
    }
    bool abs_less(const BigInt &rhs) const { return less(this->data, rhs.data); }

  private:
    std::vector<int> data;
    bool sign;

    static bool less(const std::vector<int> &a, const std::vector<int> &b) {
        if (a.size() != b.size()) return a.size() < b.size();
        for (int i = (int)a.size() - 1; i >= 0; --i) {
            if (a[i] != b[i]) return a[i] < b[i];
        }
        return false;
    }

    static void add(std::vector<int> &a, const std::vector<int> &b) {
        int n = std::max(a.size(), b.size());
        a.resize(n);
        for (int i = 0; i < (int)b.size(); ++i) a[i] += b[i];
        format(a);
    }
    static void sub(std::vector<int> &a, const std::vector<int> &b) {
        int n = std::max(a.size(), b.size());
        a.resize(n);
        for (int i = 0; i < (int)b.size(); ++i) a[i] -= b[i];
        format(a);
    }
    static void mul(std::vector<int> &a, const std::vector<int> &b) {
        NTT<469762049, 3> ntt;  // 2^26 * 7 + 1
        ntt.convolution_self(a, b);
        format(a);
    }
    static void mul(std::vector<int> &data, int k) {
        std::for_each(data.begin(), data.end(), [k](auto &x) {
            x *= k;
        });
        format(data);
    }
    static void div(std::vector<int> &data, int k) {
        int x = 0;
        for (int i = (int)data.size() - 1; i >= 0; --i) {
            int r = (10 * x + data[i]) % k;
            data[i] = (10 * x + data[i]) / k;
            x = r;
        }
        format(data);
    }

    static void format(std::vector<int> &data) {
        for (int i = 0;; ++i) {
            if ((int)data.size() == i + 1) {
                if (std::abs(data[i]) <= 9) break;
                else data.emplace_back(0);
            }
            data[i + 1] += data[i] / 10;
            data[i] %= 10;
            if (data[i] < 0) --data[i + 1], data[i] += 10;
        }
        while ((int)data.size() > 1 && data.back() == 0) data.pop_back();
    }

    void format() {
        this->format(this->data);
        if (this->back() < 0) {
            this->inverse();
            this->format();
        }
        if (this->is_zero()) this->sign = false;
    }

    void inverse() {
        this->sign = !this->sign;
        std::for_each(this->data.begin(), this->data.end(), [](auto &x) {
            x = -x;
        });
    }

    int to_int() const { return this->sign ? -this->to_uint() : this->to_uint(); }
    unsigned int to_uint() const {
        int res = 0;
        for (int i = this->size() - 1; i >= 0; --i) res = res * 10 + this->data[i];
        return res;
    }
};
#line 3 "/home/kuhaku/home/github/algo/lib/template/atcoder.hpp"
using ll = int64_t;
using ld = long double;
#define FOR(i, m, n) for (int i = (m); i < int(n); ++i)
#define FORR(i, m, n) for (int i = (m)-1; i >= int(n); --i)
#define FORL(i, m, n) for (int64_t i = (m); i < int64_t(n); ++i)
#define rep(i, n) FOR (i, 0, n)
#define repn(i, n) FOR (i, 1, n + 1)
#define repr(i, n) FORR (i, n, 0)
#define repnr(i, n) FORR (i, n + 1, 1)
#define all(s) (s).begin(), (s).end()
template <class T, class U>
std::istream &operator>>(std::istream &is, std::pair<T, U> &p) {
    is >> p.first >> p.second;
    return is;
}
template <class T>
std::istream &operator>>(std::istream &is, std::vector<T> &v) {
    for (T &i : v) is >> i;
    return is;
}
template <class T, class U>
std::ostream &operator<<(std::ostream &os, const std::pair<T, U> &p) {
    return os << '(' << p.first << ',' << p.second << ')';
}
template <class T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &v) {
    for (auto it = v.begin(); it != v.end(); ++it) {
        os << (it == v.begin() ? "" : " ") << *it;
    }
    return os;
}
template <class Head, class... Tail>
void co(Head &&head, Tail &&...tail) {
    if constexpr (sizeof...(tail) == 0) std::cout << head << '\n';
    else std::cout << head << ' ', co(forward<Tail>(tail)...);
}
template <class Head, class... Tail>
void ce(Head &&head, Tail &&...tail) {
    if constexpr (sizeof...(tail) == 0) std::cerr << head << '\n';
    else std::cerr << head << ' ', ce(forward<Tail>(tail)...);
}
template <typename T, typename... Args>
auto make_vector(T x, int arg, Args... args) {
    if constexpr (sizeof...(args) == 0) return std::vector<T>(arg, x);
    else return std::vector(arg, make_vector<T>(x, args...));
}
void sonic() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
}
void setp(const int n) {
    std::cout << std::fixed << std::setprecision(n);
}
void Yes(bool is_correct = true) {
    std::cout << (is_correct ? "Yes" : "No") << std::endl;
}
void No(bool is_not_correct = true) {
    Yes(!is_not_correct);
}
void YES(bool is_correct = true) {
    std::cout << (is_correct ? "YES" : "NO") << std::endl;
}
void NO(bool is_not_correct = true) {
    YES(!is_not_correct);
}
void Takahashi(bool is_correct = true) {
    std::cout << (is_correct ? "Takahashi" : "Aoki") << std::endl;
}
void Aoki(bool is_not_correct = true) {
    Takahashi(!is_not_correct);
}
#line 4 "a.cpp"

int main(void) {
    sonic();
    BigInt a, b;
    cin >> a >> b;
    co(a * b);

    return 0;
}

