#include <stdio.h>

#define MAX 100 //配列サイズ
//探索の足跡の定義
#define WHITE 0 
#define GRAY 1
#define BLACK 2

int data[MAX][MAX];
int f[MAX];
int d[MAX];
int color[MAX];
int n, tt;

//再帰による深さ優先探索
void dfs_visit(int t)
{
    int i;
    color[t] = GRAY;    //一回目の探索の足跡
    d[t] = ++tt;    //一回目の到達時刻の記録
    for (i = 0; i < n; i++)
    {
        if (data[t][i] == 0)
        {
            continue;
        }
        if (color[i] == WHITE)
        {
            dfs_visit(i);   //再帰呼び出し
        }
    }

    color[t] = BLACK;   //二回目の探索の足跡
    f[t] = ++tt;    //二回目の到達時刻の記録
}

//深さ優先探索の初期化と実行
void dfs()
{
    int i;
    //訪問判別配列の初期化
    for (i = 0; i < n; i++)
    {
        color[i] = WHITE;
    }

    tt = 0;

    //深さ優先探索の実行
    for (i = 0; i < n; i++)
    {
        if (color[i] == WHITE)
        {
            dfs_visit(i);   //探索する関数を実行
        }
    }

    //結果の出力
    for (i = 0; i < n; i++)
    {
        printf("%d %d %d\n", i + 1, d[i], f[i]);
    }
}

int main(void)
{
    //変数の宣言
    int k, u, i, j, v;

    //データ数の取得
    scanf("%d", &n);

    // 2次元配列の初期化
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            data[i][j] = 0;
        }
    }

    //データの格納
    for (i = 0; i < n; i++)
    {
        scanf("%d %d", &u, &k); //頂点番号と出次数の取得

        u--;

        //頂点リストを作製
        for (j = 0; j < k; j++)
        {
            scanf("%d", &v); //隣接頂点番号の格納
            v--;
            data[i][v] = 1;
        }
    }

    //深さ優先探索の関数を実行
    dfs();

    return 0;
}
