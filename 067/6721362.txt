#include <iostream>
#include <unistd.h>
using namespace std;

int root;

struct node{
    int parent;
    int left;
    int right;
    int sibling;
    int degree;
    int depth;
    int height;
};

// void setDepth(int index, int parent, node data[]){
//     if(index==root){
//         data[index].depth = 0;
//     }else{
//         data[index].depth = data[parent].depth + 1;
//     }
//     if(data[index].left!=-1) setDepth(data[index].left, index, data);
//     if(data[index].right!=-1) setDepth(data[index].right, index, data);
// }

// void setHeight(int index, node data[]){
//     //sleep(1);
//     //cout << index << ": l=" << data[index].left << endl;
//     if(data[index].degree==0){
//         data[index].height = 0;
//     }else if(data[index].left!=-1 && data[index].right==-1){
//         setHeight(data[index].left, data);
//         data[index].height = data[data[index].left].height + 1;
//     }else if(data[index].left==-1 && data[index].right!=-1){
//         setHeight(data[index].right, data);
//         data[index].height = data[data[index].right].height + 1;
//     }else{
//         setHeight(data[index].left, data);
//         setHeight(data[index].right, data);
//         data[index].height = max(data[data[index].left].height, data[data[index].right].height) + 1;
//     }
//     // if(data[index].degree==0){
//     //     data[index].height = 0;
//     // }else{
//     //     data[index].height = max(setHeight(data[index].left, data), setHeight(data[index].right, data)) + 1;
//     // }
//     // return data[index].height;
// }

void PrintPreorder(int index, node data[]){
    cout << " " << index;
    if(data[index].left!=-1) PrintPreorder(data[index].left, data);
    if(data[index].right!=-1) PrintPreorder(data[index].right, data);
}

void PrintInorder(int index, node data[]){
    if(data[index].left!=-1) PrintInorder(data[index].left, data);
    cout << " " << index;
    if(data[index].right!=-1) PrintInorder(data[index].right, data);
}

void PrintPostorder(int index, node data[]){
    if(data[index].left!=-1) PrintPostorder(data[index].left, data);
    if(data[index].right!=-1) PrintPostorder(data[index].right, data);
    cout << " " << index;
}

int main(){
    int n;
    cin >> n;
    node data[n];
    for(int i=0;i<n;i++){
        data[i].depth = 0;
        data[i].height = 0;
        data[i].parent = -1;
        data[i].sibling = -1;
        data[i].left = -1;
        data[i].right = -1;
    }
    
    for(int i=0;i<n;i++){
        int id;
        cin >> id;
        cin >> data[id].left >> data[id].right;
        int l = data[id].left;
        int r = data[id].right;
        if(l==-1 && r==-1){
            data[id].degree = 0;
        }else if(l==-1 || r==-1){
            data[id].degree = 1;
        }else{
            data[id].degree = 2;
            data[l].sibling = r;
            data[r].sibling = l;
        }
        if(l!=-1) data[l].parent = id;
        if(r!=-1) data[r].parent = id;
        //cout << data[id].left << endl;
    }

    for(int i=0;i<n;i++){
        if(data[i].parent==-1){
            root = i;
            break;
        }
    }

    cout << "Preorder" << endl;
    PrintPreorder(root, data);
    cout << endl << "Inorder" << endl;
    PrintInorder(root, data);
    cout << endl << "Postorder" << endl;
    PrintPostorder(root, data);
    cout << endl;

    // setDepth(root, -1, data);
    // setHeight(root, data);

    // for(int i=0;i<n;i++){
    //     node temp = data[i];
    //     cout << "node " << i << ": parent = " << temp.parent << ", sibling = " << temp.sibling << ", degree = " << temp.degree << ", depth = " << temp.depth << ", height = " << temp.height;
    //     if(temp.parent==-1){
    //         cout << ", root" << endl;
    //     }else if(temp.degree==0){
    //         cout << ", leaf" << endl;
    //     }else{
    //         cout << ", internal node" << endl;
    //     }
    // }

    return 0;
}
