#include <bits/stdc++.h>
using namespace std;

#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
struct Fast {
    Fast() {
        std::cin.tie(0);
        ios::sync_with_stdio(false);
    }
} fast;

using ull = unsigned long long;
using ll = long long;
using vi = vector<int>;
using vl = vector<long>;
using vll = vector<long long>;
using vvi = vector<vi>;
using vvl = vector<vl>;
using vvll = vector<vll>;
using vs = vector<string>;
using pii = pair<int, int>;

#define all(obj) (obj).begin(), (obj).end()
#define reps(i, a, n) for (ll i = (a); i < (ll)(n); ++i)
#define rep(i, n) reps(i, 0, n)
#define rrep(i, n) reps(i, 1, n + 1)
#define repd(i, n) for (ll i = n - 1; i >= 0; i--)
#define rrepd(i, n) for (ll i = n; i >= 1; i--)
template <typename T>
inline void print(const vector<T>& v, string s = " ") {
    rep(i, v.size()) cout << v[i] << (i != (ll)v.size() - 1 ? s : "\n");
}
template <typename T, typename S>
inline void print(const pair<T, S>& p) {
    cout << p.first << " " << p.second << "\n";
}
template <typename T>
inline void print(const T& x) {
    cout << x << "\n";
}

int main() {
    vll a(4);
    while (1) {
        rep(i, 4) cin >> a[i];

        while (1) {
            ll cnt = 0;
            rep(i, 4) {
                if (a[i] == 0) cnt++;
            }
            if (cnt == 4) return 0;
            if (cnt == 3) break;

            ll mval = 100000, mind = -1;
            rep(i, 4) {
                if (a[i] > 0 && mval > a[i]) {
                    mval = a[i];
                    mind = i;
                }
            }
            rep(i, 4) {
                if (a[i] != 0 && i != mind) a[i] -= mval;
            }
        }
        rep(i, 4) {
            if (a[i] != 0) print(a[i]);
        }
    }
    return 0;
}
