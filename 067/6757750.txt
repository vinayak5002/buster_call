#include <bits/stdc++.h>
using namespace std;

namespace {
    const int SIZE = 4;
    const vector<int> dx = {0, 0, -1, 1};
    const vector<int> dy = {1, -1, 0, 0};
    vector<int> target = vector<int>(SIZE * SIZE);
}  // namespace

struct Puzzle {
    vector<int> grid = vector<int>(SIZE * SIZE);
    int space;
    int count = 0;
};

int bfs(Puzzle puzzle);

int main() {
    Puzzle puzzle;
    for (int i = 0; i < SIZE * SIZE; i++) {
        cin >> puzzle.grid.at(i);
        if (puzzle.grid.at(i) == 0) {
            puzzle.space = i;
        }
        target.at(i) = i + 1;
    }
    target.at(SIZE * SIZE - 1) = 0;

    cout << bfs(puzzle) << endl;
}

int bfs(Puzzle puzzle) {
    queue<Puzzle> q;
    set<vector<int>> s;
    Puzzle tmp1, tmp2;
    q.push(puzzle);

    while (!q.empty()) {
        tmp1 = q.front();
        q.pop();

        if (tmp1.grid == target) {
            return tmp1.count;
        }

        int sx = tmp1.space % SIZE;
        int sy = tmp1.space / SIZE;

        for (int i = 0; i < 4; i++) {
            int tx = sx + dx.at(i);
            int ty = sy + dy.at(i);
            if (tx < 0 || ty < 0 || tx >= SIZE || ty >= SIZE) {
                continue;
            } else {
                tmp2 = tmp1;
                swap(tmp2.grid.at(sx + SIZE * sy),
                     tmp2.grid.at(tx + SIZE * ty));
                if (s.count(tmp2.grid)) {
                    continue;
                } else {
                    s.insert(tmp2.grid);
                    tmp2.space = tx + SIZE * ty;
                    tmp2.count++;
                    q.push(tmp2);
                }
            }
        }
    }
    return -1;
}
