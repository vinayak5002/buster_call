#include<iostream>
using namespace std;

struct Card{
    char suit;
    char value;
};

void swap(struct Card *x, struct Card *y)
{
    Card tmp = *x;
    *x = *y;
    *y = tmp;
}

void BubbleSort(struct Card a[], int N)
{
    for(int i=0; i<N-1; i++){
        for(int j=N-1; j>i; j--){
            if(a[j-1].value > a[j].value)
                swap(&a[j-1], &a[j]);
        }
    }
}

void SelectionSort(struct Card a[], int N)
{
    for(int i=0; i<N-1; i++){
        int min = i;
        for(int j=i+1; j<N; j++){
            if(a[j].value < a[min].value)
                min = j;
        }
        swap(&a[i], &a[min]);
    }
}

void trace(struct Card a[], int N)
{
    for(int i=0; i<N; i++){
        if(i>0) cout << " ";
        cout << a[i].suit << a[i].value;
    }
    cout << endl; 
}

bool isStable(struct Card c1[], struct Card c2[], int N)
{
    for(int i=0; i<N; i++){
        if(c1[i].suit != c2[i].suit)
        return false;
    }
    return true;
}

int main()
{
    Card c1[100], c2[100];
    int N;
    char ch;

    cin >> N;
    for(int i=0; i<N; i++) 
        cin >> c1[i].suit >> c1[i].value;

    for(int i=0; i<N; i++)
        c2[i] = c1[i];

    BubbleSort(c1, N);
    SelectionSort(c2, N);

    trace(c1, N);
    cout << "Stable" << endl;
    trace(c2, N);
    if(isStable(c1, c2, N))
        cout << "Stable" << endl;
    else
        cout << "Not stable" << endl;
    return 0;
}
