#include <bits/stdc++.h>
using namespace std;

#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

using ull = unsigned long long;
using ll = long long;
using vi = vector<int>;
using vll = vector<long long>;
using vvi = vector<vi>;
using vvll = vector<vll>;
using vs = vector<string>;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

#define all(obj) (obj).begin(), (obj).end()
#define reps(i, a, n) for (ll i = (a); i < (ll)(n); ++i)
#define rep(i, n) reps(i, 0, n)
#define repd(i, n) for (ll i = n - 1; i >= 0; i--)
template <typename T>
inline void print(const vector<T>& v, string s = " ") {
    rep(i, v.size()) cout << v[i] << (i != (ll)v.size() - 1 ? s : "\n");
}
template <typename T, typename S>
inline void print(const pair<T, S>& p) {
    cout << p.first << " " << p.second << "\n";
}
template <typename T>
inline void print(const T& x) {
    cout << x << "\n";
}

ll a, b;
bool flag[110];
void solve(ll m, ll n, ll p) {
    flag[p - 1] = true;
    rep(i, n) {
        cin >> a >> b;
        if (flag[a - 1]) flag[b - 1] = true;
        if (flag[b - 1]) flag[a - 1] = true;
    }
    ll ans = 0;
    rep(i, m) if (flag[i]) ans++;
    print(ans);
    rep(i, 110) { flag[i] = false; }
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    ll m, n, p;
    while (1) {
        cin >> m >> n >> p;
        if (m == 0) break;
        solve(m, n, p);
    }
    return 0;
}
