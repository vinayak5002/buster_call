#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>
#include <set>
#include <map>
#include <deque>
#define TEST cout << "TEST" << endl
#define IINF 2147483647
#define LLINF 9223372036854775807
#define AMARI 998244353
using namespace std;

bool deletecheck(int a, int b) {
    if (a == b)return true;
    else if (a - b == 1)return true;
    else if (b - a == 1)return true;
    else return false;
}
/*
int n;
vector<int> dp;
vector<int> w;

void saiki(int i,int j) {
    if (deletecheck(w[i], w[i + j]) == true) {
        dp[i] = 1;
        if (i != 0)saiki(i - 1,i + dp[i] + 1);
        if (i != 1 && i != 0)saiki(i - 2, 1);
    }
}

*/

int main(void) {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    while (1) {
        int n;
        cin >> n;
        if (n == 0)break;
        vector<int> w(n);
        for (int i = 0; i < n; i++)cin >> w[i];
        vector<vector<int>> dp(n, vector<int>(n,0));
        for (int x = 1; x < n; x++) {
            for (int i = 0; i < n; i++) {
                int j = i + x;
                if (j == n)break;
                for (int k = i; k < j; k++) {
                    dp[i][j] = max(dp[i][k] + dp[k + 1][j],dp[i][j] );
                }
                int temp = dp[i + 1][j - 1];
                if( deletecheck(w[i],w[j]) && dp[i + 1][j - 1] >= j-i-1 ) temp+=2;
                dp[i][j] = max(temp,dp[i][j] );
            }
        }
        /*
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int k = i+j;
                if( k == n ) break;
                cout << dp[j][k] << ' ';
            }
            cout << endl;
        }
        cout << "ans:" << dp[0][n - 1] << endl;

        */
       cout<<dp[0][n-1]<<endl;
    }

    /*
    while (1) {
        int n;
        cin >> n;
        if (n == 0)break;
        w.resize(n);
        for (int i = 0; i < n; i++)cin >> w[i];
        dp.resize(n);
        for (int i = 0; i < n - 1; i++) {
            saiki(i,1);
        }
    }
    */
    return 0;
}
