#include<bits/stdc++.h>
using namespace::std;

const int N = 1000 + 5;
const int inf = 1e9;

int n;
int m;
int D[N];
bool vis[N];
vector<tuple<int, int, int>> edges;

bool Bellman(int src){
	for(int i = 0; i < n; i++) D[i] = inf;
	D[src] = 0;
	vis[src] = true;
	int relaxed = 0;
	for(int i = 1; i <= n; i++){
		for(auto e : edges){
			int u, v, w;
			tie(u, v, w) = e;
			if(not vis[u]) continue;
			vis[v] = true;
			if(D[v] > D[u] + w){
				D[v] = D[u] + w;
				relaxed = i;
			}
		}
	}
	return relaxed == n;
}

int main(){
	int r;
	scanf("%d %d %d", &n, &m, &r);
	for(int i = 0; i < m; i++){
		int u, v, w;
		scanf("%d %d %d", &u, &v, &w);
		edges.emplace_back(make_tuple(u, v, w));
	}
	if(Bellman(r)){
		puts("NEGATIVE CYCLE");
		return 0;
	}
	for(int i = 0; i < n; i++){
		if(!vis[i]) puts("INF");
		else printf("%d\n", D[i]);
	}
	return 0;
}
