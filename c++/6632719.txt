#include <iostream>
#include <vector>
#include <string>

typedef struct {
    int id;
    int parent = -1;
    int depth;
    std::vector<int> children;
    std::string type;
} Node;

int calc_depth(Node* nodes, int id)
{
    int depth = 0;
    Node* node = &nodes[id];
    while (node->parent != -1)
    {
        node = &nodes[node->parent];
        ++depth;
    }

    return depth;
}

void calc_depths(int n, Node* nodes)
{
    for (int i = 0 ; i < n ; ++i)
    {
        nodes[i].depth = calc_depth(nodes, i);
    }

    return;
}

void calc_types(int n, Node* nodes)
{
    for (int i = 0 ; i < n ; ++i)
    {
        if (nodes[i].parent == -1)
        {
            nodes[i].type = "root";
        }
        else if (nodes[i].children.size() == 0)
        {
            nodes[i].type = "leaf";
        }
        else
        {
            nodes[i].type = "internal node";
        }
    }

    return;
}

void print_nodes(int n, Node* nodes)
{
    for (int i = 0 ; i < n ; ++i)
    {
        std::cout << "node " << nodes[i].id << ": ";
        std::cout << "parent = " << nodes[i].parent << ", ";
        std::cout << "depth = " << nodes[i].depth << ", ";
        std::cout << nodes[i].type << ", ";
        if ((nodes[i].type == "leaf") || (nodes[i].children.size() == 0))
        {
            std::cout << "[]";
        }
        else
        {
            std::cout << "[";
            for (int j = 0 ; j < nodes[i].children.size() - 1 ; ++j)
            {
                std::cout << nodes[i].children[j] << ", ";
            }
            std::cout << nodes[i].children[nodes[i].children.size()-1] << "]";
        }
        std::cout << std::endl;
    }

    return;
}

int main()
{
    int n;

    std::cin >> n;

    Node nodes[n];

    int id, k, c;
    for (int i = 0 ; i < n ; ++i)
    {
        std::cin >> id;
        nodes[i].id = id;
        std::cin >> k;
        for (int j = 0 ; j < k ; ++j)
        {
            std::cin >> c;
            nodes[i].children.push_back(c);
            nodes[c].parent = id;
        }
    }

    calc_depths(n, nodes);
    calc_types(n, nodes);
    print_nodes(n, nodes);

    return 0;
}
