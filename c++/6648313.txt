#include <bits/stdc++.h>
using std::cin;
using std::getline;
using std::cout;
using std::endl;
using std::string;
using std::bitset;
using std::vector;
using std::array;
using std::stack;
using std::queue;
using std::set;
using std::map;
using std::pair;
using llong = long long;
template<typename T> using nLimits = std::numeric_limits<T>;
#define ALL(a) (a).begin(), (a).end()
#define REP(i, n) for (int i = 0; i < static_cast<int>(n); ++i)
#define RREP(i, n) for (int i = static_cast<int>(n) - 1; i >= 0; --i)
#define FOR(i, a, b) for (int i = static_cast<int>(a); i < static_cast<int>(b); ++i)
#define RFOR(i, a, b) for (int i = static_cast<int>(a) - 1; i >= static_cast<int>(b); --i)
constexpr int INF = 1001001001;
constexpr llong LINF = 1001001001001001001ll;

template<typename T> inline bool chMin(T &a, T b) { return ((a > b) ? (a = b, true) : (false)); }
template<typename T> inline bool chMax(T &a, T b) { return ((a < b) ? (a = b, true) : (false)); }
template<typename T> void printArray(const T* a, const size_t n);

int N_V, N_E;

int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout << std::fixed << std::setprecision(20);

    cin >> N_V >> N_E;
    vector<vector<llong>> cost;
    cost.resize(N_V, vector<llong>(N_V, LINF));
    REP(i, N_V) cost[i][i] = 0;
    REP(i, N_E) {
        int s, t, d;
        cin >> s >> t >> d;
        cost[s][t] = d;
    }

    // vector<vector<int>> cost(N_V, vector<int>(N_V, INF));
    REP(j, N_V) REP(i, N_V) REP(k, N_V) {
        if (cost[i][j] == LINF || cost[j][k] == LINF) continue;
        chMin(cost[i][k], cost[i][j] + cost[j][k]);
    }

    REP(i, N_V) if (cost[i][i] < 0) {
        cout << "NEGATIVE CYCLE\n";
        return 0;
    }

    REP(i, N_V) {
        string s = "";
        REP(j, N_V) {
            if (cost[i][j] < LINF) s += std::to_string(cost[i][j]) + " ";
            else s += "INF ";
        }
        cout << s.substr(0, s.size() - 1) << endl;
    }
}


template<typename T> 
void printArray(const T* a, const size_t n) {
    string s = std::to_string(a[0]);
    FOR(i, 1, n) s += " " + std::to_string(a[i]);
    cout << s + "\n";
}

