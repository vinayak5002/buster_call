#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
vector<bool> GetPrimeTable(int n) {
  vector<bool> IsPrimeNumber(n + 1, true);
  for (int i = 2; i <= n; i++) {
    while (IsPrimeNumber[i] == false) {
      i++;
    }
    for (int j = 2; i * j <= n; j++) {
      IsPrimeNumber[i * j] = false;
    }
  }
  return IsPrimeNumber;
}
int GetPrimeCount(vector<bool> IsPrimeNumber, int n) {
  int Count = 0;
  for (int i = 2; i <= n; i++) {
    if (IsPrimeNumber[i] == true) {
      Count++;
    }
  }
  return Count;
}

int main() {
  vector<int> Input;
  while (true) {
    int Nubmer;
    cin >> Nubmer;
    if (cin.eof() == true)
      break;
    Input.push_back(Nubmer);
  }
  int MaxNumber = *std::max_element(Input.begin(), Input.end());
  vector<bool> IsPrimeNumber = GetPrimeTable(MaxNumber);
  for (int i = 0; i < Input.size(); i++) {
    cout << GetPrimeCount(IsPrimeNumber, Input[i]) << endl;
  }
  return 0;
}


