#include<bits/stdc++.h>
#define fi first
#define se second
#define pb push_back
using namespace std;
typedef long long LL;
typedef double db;
const db pi = acos(-1.0);
const db eps=1e-8;
const int N=200;

int sgn(double x){
    if(fabs(x)<eps) return 0;
    if(x<0) return -1;
    return 1;
}

struct Point{
	db x,y;
	Point(){}
	Point(db _x,db _y){
		x = _x;
		y = _y;
	}
	
	void input(){
		scanf("%lf%lf",&x,&y);
	}
	
	void output(){
		printf("%.10lf %.10lf\n",x,y);
	}
	
	bool operator < (Point b)const{
		return sgn(x-b.x)==0?sgn(y-b.y)<0:x<b.x;
	}
	
	Point operator -(const Point &b)const{
		return Point(x-b.x,y-b.y);
	}
	Point operator +(const Point &b)const{
		return Point(x+b.x,y+b.y);
	}
	db operator ^(const Point &b)const{
		return x*b.y-y*b.x;
	}
	db operator *(const Point &b)const{
		return x*b.x+y*b.y;
	}
	Point operator *(const db &k)const{
		return Point(x*k,y*k);
	}
	Point operator /(const db &k)const{
		return Point(x/k,y/k);
	}
	db len(){
		return hypot(x,y);
	}
	db len2(){
		return x*x+y*y;
	}
};

struct Line{
	Point s,e;
	Line(){}
	Line(Point _s,Point _e){
		s = _s;
		e = _e;
	}
    
    Line(Point p,double angle){
        s=p;
        if(sgn(angle-pi/2) == 0){
            e=(s+Point(0,1));
        }
        else{
            e=(s+Point(1,tan(angle)));
        }
    }
    
    bool parallel(Line v){
        return sgn((e-s)^(v.e-v.s))==0;
    }
    
    int relation(Point p){
        int c =sgn((p-s)^(e-s));
        if(c<0) return 1;
        else if(c>0) return 2;
        else return 3;
    }
    
    int linecrossline(Line v){
        if((*this).parallel(v))
            return v.relation(s)==3;
        return 2;
    }
    
    Point crosspoint(Line v){
        db a1=(v.e-v.s)^(s-v.s);
        db a2=(v.e-v.s)^(e-v.s);
        return Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));
    }
    
	Point lineprog(Point p){
		return s+(((e-s)*((e-s)*(p-s)))/((e-s).len2()));
	}
	Point symmetrypoint(Point p){
		Point q=lineprog(p);
		return Point(2*q.x-p.x,2*q.y-p.y);
	}
};

int main()
{
    int _;
    scanf("%d",&_);
    while(_--)
    {
    	Point p1=Point(),p2=Point(),p3=Point(),p4=Point();
    	p1.input();p2.input();p3.input();p4.input();
    	Line L1=Line(p1,p2),L2=Line(p3,p4);
    	Point p=L1.crosspoint(L2);
    	p.output();
    }
    return 0;
}
