######################
# AtCoderテンプレ
import sys
from collections import deque, defaultdict, Counter
from bisect import bisect, bisect_left, bisect_right, insort_left
from heapq import heappop, heappush, heappushpop, heapify
from itertools import combinations, permutations, accumulate
from math import gcd, ceil, floor, sqrt, factorial
from functools import lru_cache

sys.setrecursionlimit(10**7)
mod = 998244353
MOD = 1000000007
INF = float("inf")
arrays = [(-1, 0), (0, 1), (1, 0), (0, -1)]

input = sys.stdin.readline
def ii(): return int(input())
def fi(): return float(input())
def si(): return input().rstrip()
def mii(): return map(int, input().split())
def mfi(): return map(float, input().split())
def mi1i(): return map(lambda x: int(x) - 1, input().split())

def lmii(): return list(map(int, input().split()))
def lmi1i(): return list(map(lambda x: int(x) - 1, input().split()))
def lmfi(): return list(map(float, input().split()))
def lsi(): return list(input().rstrip())
def lmsi(): return list(map(str, input().split()))

def iir(n): return [int(input()) for _ in range(n)]
def fir(n): return [float(input()) for _ in range(n)]
def isr(n): return [input().rstrip() for _ in range(n)]

def lmiir(n): return [list(map(int, input().split())) for _ in range(n)]
def lmi1ir(n): return [list(map(lambda x: int(x) - 1, input().split())) for _ in range(n)]
def lmfir(n): return [list(map(float, input().split())) for _ in range(n)]
def lsir(n): return [list(input().rstrip()) for _ in range(n)]

def lii_alp(): return list(map(lambda x: ord(x) - 97, input().rstrip()))
def lii_ALP(): return list(map(lambda x: ord(x) - 65, input().rstrip()))
# テンプレここまで
##########################

v, e = mii()
edge = [[-1] * v for _ in range(v)]
for _ in range(e):
    s, t, d = mii()
    edge[s][t] = d

ans = INF
for p_i in permutations(range(v)):
    ans_i = 0
    flag = True
    for i in range(v):
        if edge[p_i[i]][p_i[(i + 1) % v]] == -1:
            flag = False
            break
        else:
            ans_i += edge[p_i[i]][p_i[(i + 1) % v]]
    if flag:
        ans = min(ans_i, ans)

print(-1 if INF else ans)

