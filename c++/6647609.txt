#include <bits/stdc++.h>
using std::cin;
using std::getline;
using std::cout;
using std::endl;
using std::string;
using std::bitset;
using std::vector;
using std::array;
using std::stack;
using std::queue;
using std::priority_queue;
using std::set;
using std::map;
using std::pair;
using llong = long long;
template<typename T> using nLimits = std::numeric_limits<T>;
#define ALL(a) (a).begin(), (a).end()
#define REP(i, n) for (int i = 0; i < static_cast<int>(n); ++i)
#define RREP(i, n) for (int i = static_cast<int>(n) - 1; i >= 0; --i)
#define FOR(i, a, b) for (int i = static_cast<int>(a); i < static_cast<int>(b); ++i)
#define RFOR(i, a, b) for (int i = static_cast<int>(a) - 1; i >= static_cast<int>(b); --i)
constexpr int INF = 1001001001;
constexpr llong LINF = 1001001001001001001ll;

template<typename T> inline bool chMin(T &a, T b) { return ((a > b) ? (a = b, true) : (false)); }
template<typename T> inline bool chMax(T &a, T b) { return ((a < b) ? (a = b, true) : (false)); }
template<typename T> void printArray(const T* a, const size_t n);


int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout << std::fixed << std::setprecision(20);

    int num_v, num_e, r;
    cin >> num_v >> num_e >> r;
    vector<vector<pair<int, int>>> g(num_v);  // s -> (t, dist)
    REP(i, num_e) {
        int s, t, d;
        cin >> s >> t >> d;
        g[s].emplace_back(pair<int, int>(t, d));
    }

    vector<int> dist(num_v, INF);
    dist[r] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, std::greater<pair<int, int>>> q;
    q.push(pair<int, int>(r, 0));
    while (!q.empty()) {
        auto u = q.top();
        q.pop();
        for (auto v : g[u.first]) {
            // if (dist[v.first] != -1) continue;
            if (dist[v.first] > dist[u.first] + v.second) {
                dist[v.first] = dist[u.first] + v.second;
                q.push(v);
            }
        }
    }
    REP(i, num_v) {
        if (dist[i] < INF) cout << dist[i] << endl;
        else cout << "INF" << endl;
    }
}


template<typename T> 
void printArray(const T* a, const size_t n) {
    string s = std::to_string(a[0]);
    FOR(i, 1, n) s += " " + std::to_string(a[i]);
    cout << s + "\n";
}

