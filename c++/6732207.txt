#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;
#define chmin(x,y) x = min(x,y)
#define chmax(x,y) x = max(x,y)
#define rep(i,n) for(int i=0;i<n;i++)
#define fill1(arr,num) fill(arr,arr+sizeof(arr)/sizeof(*arr),num);
#define fill2(arr,num) fill(*arr,*arr+sizeof(arr)/sizeof(**arr),num);
#define fill3(arr,num) fill(**arr,**arr+sizeof(arr)/sizeof(***arr),num);
#define BIG_NUM 2000000000
#define HUGE_NUM 4000000000000000000
#define MOD 1000000007


template<typename T>
struct rmq{
    const T INF=numeric_limits<T>::max();
    int n;
    vector<T> dat;
    rmq(int n_){
        dat.resize(n_*4,INF);
        int x=1;
        while(n_>x){
            x*=2;
        }
        n=x;
    }
    void update(int i,T x){
        i+=n-1;
        dat[i]=x;
        while(i>0){
            i=(i-1)/2;
            dat[i]=min(dat[i*2+1],dat[i*2+2]);
        }
    }
    T find(int a,int b){
        return find_sub(a,b,0,0,n);
    }
    T find_sub(int a,int b,int k,int l,int r){
        if(r<=a||b<=l)return INF;
        if(a<=l&&r<=b)return dat[k];
        T vl=find_sub(a,b,k*2+1,l,(l+r)/2);
        T vr=find_sub(a,b,k*2+2,(l+r)/2,r);
        return min(vl,vr);
    }
};


int main(){
    int n,q;
    cin>>n>>q;
    rmq<int> T(n);
    int com,x,y;
    vector<int> ans;
    rep(i,q){
        cin>>com>>x>>y;
        if(!com){
            T.update(x,y);
        } else{
            ans.push_back(T.find(x,y+1)); 
        }
    }
    for(auto e:ans){
        cout<<e<<endl;
    }
}
