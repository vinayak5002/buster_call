#! /usr/bin/ruby
# coding: utf-8

################################################################
#
#        :ul |(upper-left)
#     |   ...larger_candi
#     |   *    |   *    *
#     | -------*--------
# :val| *      | *    :br(bottom-right)
#     |        |     *...smaller_candi
#     +---------------------
#            :idx
BubbleInfo = Struct.new(:idx, :val, :ul, :br){
  def larger_candi?
    self.ul == 0 && self.br > 0
  end

  def smaller_candi?
    self.br == 0 && self.ul > 0
  end
}
################################################################
#
# index付きマージソートをしながら
#   ・自分より前にある自分より大きい数の個数 (ul)
#   ・自分より後にある自分より小さい数の個数 (br)
# を計算
#
def merge_sort(s, e, idx, wrongs)
  return if e <= s
  m = (s+e)/2
  merge_sort(s, m, idx, wrongs)
  merge_sort(m+1, e, idx, wrongs)

  # merge backward only for wrongs.br
  new_idx = []
  former_p = m
  latter_p = e
  while former_p >= s && latter_p >= m+1
    if wrongs[idx[latter_p]].val >= wrongs[idx[former_p]].val
      new_idx.unshift(idx[latter_p])
      latter_p -= 1
    else
      new_idx.unshift(idx[former_p])
      wrongs[idx[former_p]].br += latter_p - m
      former_p -= 1
    end
  end
  # ignore the above result

  # merge foreward for wrongs.ul
  new_idx = []
  former_p = s
  latter_p = m+1
  while former_p <=m && latter_p <= e
    if wrongs[idx[former_p]].val <= wrongs[idx[latter_p]].val
      new_idx << idx[former_p]
      former_p += 1
    else
      new_idx << idx[latter_p]
      wrongs[idx[latter_p]].ul += m - former_p + 1
      latter_p += 1
    end
  end
  new_idx.concat(idx[former_p..m]).concat(idx[latter_p..e])

  idx[s..e] = new_idx
end
# wrongs = a.map.with_index{|v, i| [i, a[...i].count{|c| c>v}, a[i+1..].count{|c| c<v}]}
################################################################
#
# :ul や :br の極大点のみが交換の候補となる
# ただし，同じval が続く場合は，最初のものが候補となる
#

def get_larger_candi(wrongs, hist)
  candi = [wrongs[0]]

  smallers = 0
  wrongs[1..-1].each{|cur|
    prev = candi[-1]
    if cur.val > prev.val && (cur.idx - prev.idx).abs == 1 # && cur.br == prev.br
      candi << cur 
    elsif cur.val > prev.val && cur.br > prev.br - smallers
      candi << cur 
      smallers = 0
    elsif cur.val > prev.val # && hist[cur.val] > 1
      (cur.idx+1...wrongs.size).each{|i|
        break if wrongs[i].val > cur.val
        if wrongs[i].val == cur.val
          candi << cur 
          smallers = 0
          break
        end
      }
    elsif cur.val < prev.val
      smallers += 1
    end
  }
  # candi << wrongs.max_by{|s| s.val}
  # candi.uniq!

  # 連続した並びは，極大のみ残す
  x = []
  candi.each_cons(2){|l1, l2|
    next if (l2.idx - l1.idx).abs == 1 # && l2.br >= l1.br
    x << l1
  }
  x << candi[-1]
  # return candi
  return x
end

def get_smaller_candi(wrongs, hist)
  rev_wrongs = wrongs.reverse
  candi = [rev_wrongs[0]]

  largers = 0
  rev_wrongs[1..-1].each{|cur|
    prev = candi[-1]
    if cur.val < prev.val && (cur.idx - prev.idx).abs == 1 # && cur.br == prev.br
      candi << cur 
    elsif cur.val < prev.val && cur.ul > prev.ul - largers
      candi << cur
      largers = 0
    elsif cur.val < prev.val # && hist[cur.val] > 1
      (cur.idx-1).downto(0){|i|
        break if wrongs[i].val < cur.val
        if wrongs[i].val == cur.val
          candi << cur
          largers = 0
          break
        end
      }
    elsif cur.val > prev.val
      largers += 1
    end
  }
  # candi << wrongs.min_by{|s| s.val}
  # candi.uniq!

  # 連続した並びは，極大のみ残す
  x = []
  candi.each_cons(2){|l1, l2|
    next if (l2.idx - l1.idx).abs == 1 # && l2.ul >= l1.ul
    x << l1
  }
  x << candi[-1]
  return x
  # return candi
end
################################################################
a = []
n = gets.to_i
n.times{ a << gets.to_i }

s_idx = (0...n).to_a
wrongs = s_idx.map{|i| BubbleInfo.new(i, a[i], 0, 0)}

merge_sort(0, n-1, s_idx, wrongs)
# swap_count = wrongs.sum(&:ul)
swap_count = wrongs.inject(:+)

puts swap_count

if swap_count == 0
  puts 1
  exit
end

rev_idx = s_idx.map.with_index.sort_by{|v, i| v}.map(&:last)

#
# 候補を絞った上で，単調増加する最初のもののみ残す
#

hist = Hash.new(0)
wrongs.each{|v| hist[v.val] += 1}

larger_candi = get_larger_candi(wrongs, hist).select(&:larger_candi?)
smaller_candi = get_smaller_candi(wrongs, hist).select(&:smaller_candi?)

p smaller_candi.size
p larger_candi.size
# pp smaller_candi
# pp larger_candi
# pp smaller_candi[0..4]
# pp smaller_candi[-4..-1]
# pp larger_candi[0..100]
# pp larger_candi[-4..-1]

# 最初の要素を扱うためにダミーを先頭に追加
dummy = BubbleInfo.new(-1, -1, 0, 0)
larger_candi.unshift(dummy)

larger_candi_size = larger_candi.size
cur_dec_array = Array.new(larger_candi_size, 1)
max_dec_array = Array.new(larger_candi_size, 1)

s1 = smaller_candi[0]
cur_dec = -1
cur_dec_array[0] = max_dec_array[0] = -1

larger_candi.each_cons(2).with_index{|(s2_prev, s2), i|
  next if s2.val <= s1.val
  break if s2.idx >= s1.idx
  
  if cur_dec < 0
    cur_dec = 1 + 
      wrongs[s2.idx+1...s1.idx].count{|v| v.val > s1.val && v.val <= s2.val} +
      wrongs[s2.idx+1...s1.idx].count{|v| v.val < s2.val && v.val >= s1.val}
  else
    # wrongs[rev_idx[s2.idx]] と同じ val のものが後ろに続く可能性があるので，
    # s.val > s2.val になるまでループする（merge_sort : 安定なソート）

    # 範囲に入って来る分
    (rev_idx[s2_prev.idx]+1...n).each{|i|
      s = wrongs[s_idx[i]]
      break if s.val > s2.val
      if s.idx > s2.idx && s.idx < s1.idx 
        # s2 と s2_prev の両方からチェック
        cur_dec += 1 if s.val > s2_prev.val # && s.val <= s2.val
        cur_dec += 1 if s.val < s2.val      # && s.val >= s2_prev.val
      end
    }
    # 範囲にから出ていく分
    wrongs[s2_prev.idx+1...s2.idx].each{|s|
      # s1 と s2_prev の両方からチェック
      cur_dec -= 1 if s.val > s1.val && s.val <= s2_prev.val
      cur_dec -= 1 if s.val < s2_prev.val && s.val >= s1.val
    }
  end
  cur_dec_array[i+1] = max_dec_array[i+1] = cur_dec
}

smaller_candi.each_cons(2){|s1_prev, s1|
  imos = Array.new(larger_candi_size, 0)

  s1_prev_idx = s1_prev.idx
  s1_prev_val = s1_prev.val
  s1_idx = s1.idx
  s1_val = s1.val
  
  # 範囲から出ていく分
  wrongs[s1_idx+1...s1_prev_idx].each{|s|
    s_val = s.val
    next if s_val < s1_prev_val
    
    dec_start = larger_candi.bsearch_index{|s2| s2.val >= s_val}
    next if dec_start.nil? || larger_candi[dec_start] == s
    if larger_candi[dec_start].val == s_val
      cur_dec_array[dec_start] -= 1 if s_val != s1_prev_val
      dec_start += 1
    end

    dec_end = larger_candi.bsearch_index{|s2| s2.idx >= s1.idx}

    dec_val = (s_val == s1_prev_val)? 1 : 2

    imos[dec_start] -= dec_val if dec_start < larger_candi.size
    imos[dec_end] += dec_val if ! dec_end.nil?
  }

  # 範囲に加わる分
  (rev_idx[s1_prev_idx]-1).downto(0){|j|
    loc_s_idx = s_idx[j]
    s = wrongs[loc_s_idx]
    s_val = s.val
    break if s_val < s1_val
    next if loc_s_idx >= s1_idx
    
    inc_start = larger_candi.bsearch_index{|s2| s2.val >= s_val}
    next if inc_start.nil? || larger_candi[inc_start] == s
    if larger_candi[inc_start].val == s_val
      cur_dec_array[inc_start] += 1 if s_val != s1_val && s_val != s1_prev_val
      inc_start += 1
    end

    inc_end = larger_candi.bsearch_index{|s2| s2.idx >= loc_s_idx}

    inc_val = (s_val == s1_val || s_val == s1_prev_val)? 1 : 2

    imos[inc_start] += inc_val if inc_start < larger_candi.size
    imos[inc_end] -= inc_val if ! inc_end.nil?
  }

  inc_start = larger_candi.bsearch_index{|s2| s2.val >= s1_val}
  next if inc_start.nil?
  inc_end = larger_candi.bsearch_index{|s2| s2.idx >= s1_idx} || larger_candi.size
  add_val = 0
  (inc_start...inc_end).each{|i|
    add_val += imos[i]
    cur_dec_array[i] += add_val
    max_dec_array[i] = cur_dec_array[i] if cur_dec_array[i] > max_dec_array[i]
  }
}

ans = swap_count - max_dec_array.max

puts "#{ans} #{correct_ans} #{ans == correct_ans}"

