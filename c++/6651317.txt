#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <tuple>
#include <map>
#include <set>
#include <cmath>
#include <bitset>
#include <queue>

using namespace std;

template<class T> inline bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}
template<class T> inline bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

const long long INF = 1LL << 60;
const int INT_INF = 1e9;

using Graph = vector<vector<int>>;

int main(){
    int V, E;
    cin >> V >> E;

    Graph G(V, vector<int>(V, INT_INF));

    for(int ii1=0; ii1<E; ii1++){
        int s, t, d;
        cin >> s >> t >> d;
        G[s][t] = d;
    }

    vector<vector<int>> dp((1<<(V+1))+100, vector<int>(V+10, INT_INF));

    /* スタートは0からと勝手に決める */
    /* スタートから全頂点を一度だけ通ってスタートに戻ってくる閉路(ハミルトン閉路)においては勝手にスタートを決めて良い */
    dp[0][0] = 0;
    for(int bit=0; bit<(1<<V); bit++){
        for(int u=0; u<V; u++){
            if(bit != 0 && !(bit&(1<<u))) continue;
            for(int v=0; v<V; v++){
                if(!(bit & (1<<V))){
                    if(u != v) chmin(dp[bit | (1<<v)][v], dp[bit][u]+G[u][v]);
                }
            }
        }
    }

    if(dp[(1<<V)-1][0] != INT_INF){
        cout << dp[(1<<V)-1][0] << endl;
    }else{
        cout << -1 << endl;
    }

    return 0;
}
