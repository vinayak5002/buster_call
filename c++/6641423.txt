#include<bits/stdc++.h>

using namespace std;

using ll = long long;
using ld = long double;

#define rep(i, a, b) for(ll i = (ll)a; i < (ll)b; i++)
#define irep(i, v) for(auto i = (v).begin(); i != (v).end(); i++)
#define ALL(v) (v).begin(), (v).end()
#define SZ(v) (ll)(v).size()

const ll INF = 1e18;
const ld EPS = 1e-10;
const ll MOD = 1e9 + 7;
const ld PI = M_PI;

class Point{
  public:
    ll x, y;
    ll id;
    Point() {}
    Point(ll x, ll y, ll id): x(x), y(y), id(id) {}
    bool operator < (Point &p) const{
      return id < p.id;
    }
};

bool lessX(const Point &p1, const Point &p2){ return p1.x < p2.x;}
bool lessY(const Point &p1, const Point &p2){ return p1.y < p2.y;}

class kD_tree2{
  private:
    struct Node{
      ll location;
      ll lef, rig;
      Node() {}
      Node(ll lef, ll rig, ll location): lef(lef), rig(rig), location(location) {}
    };
    const ll NIL = -1;
    ll n, root, np = 0;
    vector<Node> nodes;

    ll make2Dtree(ll l, ll r, ll depth){
      if(!(l < r)) return NIL;
      ll mid = (l + r) / 2;
      ll res = np++;

      if(depth % 2 == 0) sort(poi.begin() + l, poi.begin() + r, lessX);
      else sort(poi.begin() + l, poi.begin() + r, lessY);

      nodes[res].location = mid;
      nodes[res].lef = make2Dtree(l, mid, depth + 1);
      nodes[res].rig = make2Dtree(mid + 1, r, depth + 1);

      return res;
    }
  public:
    vector<Point> poi;

    kD_tree2(ll n): n(n){
      poi.resize(n);
      nodes.resize(n, {NIL, NIL, NIL});
    }

    void make(){
      root = make2Dtree(0, n, 0);
    }

    void find(ll sx, ll sy, ll tx, ll ty, vector<Point> &res, ll depth = 0, ll v = -1){
      if(v == -1){
        res.clear();
        v = root;
      }
      ll x = poi[nodes[v].location].x;
      ll y = poi[nodes[v].location].y;

      if(sx <= x && x <= tx && sy <= y && y <= ty){
        res.push_back(poi[nodes[v].location]);
      }

      if(depth % 2 == 0){
        if(nodes[v].lef != NIL){
          if(sx <= x) find(sx, sy, tx, ty, res, depth + 1, nodes[v].lef);
        }
        if(nodes[v].rig != NIL){
          if(x <= tx) find(sx, sy, tx, ty, res, depth + 1, nodes[v].rig);
        }
      }
      else{
        if(nodes[v].lef != NIL){
          if(sy <= y) find(sx, sy, tx, ty, res, depth + 1, nodes[v].lef);
        }
        if(nodes[v].rig != NIL){
          if(y <= ty) find(sx, sy, tx, ty, res, depth + 1, nodes[v].rig);
        }
      }
      if(depth == 0) sort(res.begin(), res.end());
    }
};

int main(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  srand((unsigned)time(NULL));
  cout << fixed << setprecision(20);

  ll n;
  cin >> n;

  kD_tree2 tree(n);
  vector<Point> &p = tree.poi;
  rep(i, 0, n){
      ll x, y;
      cin >> x >> y;
      p[i] = {x, y, i};
  }

  tree.make();

  ll q;
  cin >> q;
  vector<Point> ans;
  while(q--){
      ll sx, sy, tx, ty;
      cin >> sx >> tx >> sy >> ty;
      tree.find(sx, sy, tx, ty, ans);
      rep(i, 0, SZ(ans)) cout << ans[i].id << endl;
      cout << endl;
  }



  return 0;
}

