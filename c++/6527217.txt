#include <bits/stdc++.h>

void dfs(int v, int u, std::vector<std::vector<int>>& graph, std::vector<std::vector<int>>& jmp, std::vector<int>& depth) {
    jmp[v][0] = u;
    for (int i = 1; i < jmp[v].size(); i++) jmp[v][i] = jmp[jmp[v][i - 1]][i - 1];
    for (auto w : graph[v]) {
        if (w == u) continue;
        depth[w] = depth[v] + 1;
        dfs(w, v, graph, jmp, depth);
    }
}

int lca(int v, int w, std::vector<std::vector<int>>& jmp, std::vector<int>& depth) {
    if (depth[v] < depth[w]) std::swap(v, w);
    for (int i = jmp[v].size() - 1; i >= 0; i--) if (depth[jmp[v][i]] >= depth[w]) v = jmp[v][i];
    if (v == w) return v;
    for (int i = jmp[v].size() - 1; i >= 0; i--) {
        if (jmp[v][i] != jmp[w][i]) {
            v = jmp[v][i];
            w = jmp[w][i];
        }
    }
    return jmp[v][0];
}

void solve() {
    int n;
    std::cin >> n;
    std::vector<std::vector<int>> graph(n + 1);
    std::vector<int> in_deg(n + 1, 0);
    for (int i = 1; i <= n; i++) {
        int m;
        std::cin >> m;
        graph[i].resize(m);
        for (auto& v : graph[i]) {
            std::cin >> v;
            v++;
            in_deg[v]++;
        }
    }

    int root = -1;
    for (int i = 1; i <= n; i++) if (!in_deg[i]) root = i;

    int log = 0;
    int pow = 1;
    while (pow * 2 <= n) {
        pow *= 2;
        log++;
    }

    std::vector<std::vector<int>> jmp(n + 1, std::vector<int>(log + 1, 0));
    std::vector<int> depth(n + 1, -1);
    depth[root] = 0;
    dfs(root, 0, graph, jmp, depth);

    int q;
    std::cin >> q;
    while (q--) {
        int v, w;
        std::cin >> v >> w;
        v++;
        w++;
        std::cout << lca(v, w, jmp, depth) - 1 << '\n';
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cout.tie(nullptr);
    std::cin.tie(nullptr);

    solve();

    return 0;
}
