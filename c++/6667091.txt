#include<iostream>
#include<iomanip>
#include<cassert>
#include<math.h>
#include<complex>
#include<algorithm>
#include<utility>
#include<queue>
#include<stack>
#include<string.h>
#include<string>
#include<set>
#include<map>
#include<unordered_map>
#include<functional>
#include<vector>
#include<bitset>
using namespace std;
typedef long long ll;
typedef pair<ll,ll> LL;
const ll INF=2e18;
const ll MOD=1e9+7;
const double EPS=1e-9;
void ChMin(ll& x, ll y){
    x=min(x,y);
}
void ChMax(ll& x, ll y){
    x=max(x,y);
}

ll N,M;
struct Edge{
    ll from,to,cost;
};


int main(){
    while( cin>>N>>M, N!=0 ){
        vector<Edge> edges[2];
        for(int i=0;i<M;i++){
            ll x,y,t;
            string sl;
            cin>>x>>y>>t>>sl;
            edges[sl=="S"].push_back(Edge{x-1,y-1,t});
        }
        ll R;
        cin>>R;
        vector<ll> z(R);
        for(ll i=0;i<R;i++){
            cin>>z[i];
            z[i]--;
        }

        vector< vector<ll> > cost[2]={ vector<vector<ll>>(N,vector<ll>(N)), vector<vector<ll>>(N,vector<ll>(N)) };
        for(ll i=0;i<N;i++){
            for(ll j=0;j<N;j++){
                cost[0][i][j] = cost[1][i][j] = (i==j)?0:INF;
            }
        }
        for(ll i=0;i<2;i++){
            for(auto e:edges[i]){
                cost[i][e.from][e.to] = e.cost;
                cost[i][e.to][e.from] = e.cost;
            }
        }
        for(ll l=0;l<2;l++){
            for(ll k=0;k<N;k++){
                for(ll i=0;i<N;i++){
                    for(ll j=0;j<N;j++){
                        if(cost[l][i][k]+cost[l][k][j] < cost[l][i][j]){
                            cost[l][i][j] = cost[l][i][k] + cost[l][k][j];
                        }
                    }
                }
            }
        }

        vector< vector<ll> > dp(N,vector<ll>(N));
        for(ll i=0;i<N;i++){
            for(ll j=0;j<N;j++){
                dp[i][j] = INF;
            }
        }
        dp[z[0]][z[0]] = 0;
        for(ll i=0;i<R-1;i++){
            // first land
            for(ll to=0;to<N;to++){
                for(ll ship=0;ship<N;ship++){
                    ChMin( dp[to][ship], dp[z[i]][ship] + cost[0][z[i]][to] );
                }
            }
            // sea
            for(ll from=0;from<N;from++){
                for(ll to=0;to<N;to++){
                    ChMin( dp[to][to], dp[from][from] + cost[1][from][to] );
                }
            }
            // second land
            for(ll from=0;from<N;from++){
                for(ll ship=0;ship<N;ship++){
                    ChMin( dp[z[i+1]][ship], dp[from][ship] + cost[0][from][z[i+1]] );
                }
            }
            for(ll v=0;v<N;v++){
                if(v==z[i+1]) continue;
                for(ll ship=0;ship<N;ship++){
                    dp[v][ship] = INF;
                }
            }
        }
        ll ans=INF;
        for(ll ship=0;ship<N;ship++){
            ChMin( ans, dp[z[R-1]][ship] );
        }
        cout<<ans<<endl;        
    }

    return 0;
}
