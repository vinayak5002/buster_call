#define _USE_MATH_DEFINES
#include<bits/stdc++.h>
#include<unordered_map>

using namespace std;
#define LP(I,S,G) for (long long int I = (S); I < (G); I++)
#define IN(X) 	for (int in = 0; in < X.size(); in++)cin >> X[in]
#define OUT(X) 	for (int in = 0; in < X.size(); in++)cout << X[in]<<" "
#define SORT(X) sort((X).begin(), (X).end())
#define CSORT(X,Y) sort(X.begin(), X.end(),Y)
#define COPY(X,Y) copy(X.begin(), X.end(), Y.begin())
#define ALL(X,Y) for (auto X = (Y).begin(); X != (Y).end(); X++)
#define FULL(a)  (a).begin(),(a).end()
#define BFS(Q,S) for(Q.push(S);Q.size()!=0;Q.pop())
typedef long long int ll;
typedef unsigned long long int ull;
long long int M = pow(10, 9) + 7;


int dx[] = { 0,-1,0,1 }, dy[] = { -1,0,1,0 };

ll MAX(ll A, ll B) { return ((A) > (B) ? (A) : (B)); }
ll MIN(ll A, ll B) { return ((A) < (B) ? (A) : (B)); }
long long int xor128() {
	static long long int x = 123456789, y = 362436069, z = 521288629, w = 88675123;
	long long int t = (x ^ (x << 11));
	x = y; y = z; z = w;
	return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
}

struct HashPair {
	//注意 constがいる
	template<class T1, class T2>
	size_t operator()(const pair<T1, T2> &p) const {
		//first分をハッシュ化する
		auto hash1 = hash<T1>{}(p.first);
		//second分をハッシュ化する
		auto hash2 = hash<T2>{}(p.second);
		//重複しないようにハッシュ処理
		size_t seed = 0;
		seed ^= hash1 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		seed ^= hash2 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		return seed;
	}
};
template<class I1, class I2>
istream& operator>>(istream& s, pair<I1, I2>& in) {
	s >> in.first >> in.second;
	return s;
}



int main() {
	vector<ll> table,table2;
	LP(i, 1, 10000) {
		if (i*(i + 1)*(i + 2) / 6 > pow(10, 6))break;
		table.push_back(i*(i + 1)*(i + 2) / 6);
		if ((i*(i + 1)*(i + 2) / 6) % 2 == 1)table2.push_back(i*(i + 1)*(i + 2) / 6);
	}
	ll m = table.size(),m2=table2.size();
	while (1) {
		ll n;
		cin >> n;
		if (n == 0)break;
		vector<vector<ll>> dp1(6, vector<ll>(n + 1, 0));
		dp1[0][0] = 1;
		ll ans = 5;
		LP(i, 0, 5) {
			if (dp1[i][n] == 1) {
				ans = i;
				break;
			}
			LP(k, 0, n) {
				if (dp1[i][k] == 0)continue;
				LP(x, 0, m) {
					if (k + table[x] <= n)dp1[i + 1][k + table[x]] = 1;
				}
			}
		}
		cout << ans << " ";
		vector<ll> dp2(n+1,0);
		dp2[0] = 1;
		LP(i, 0, n) {
			if (dp2[n] == 1) {
				cout << i << "\n";
				break;
			}
			vector<ll> next(n + 1, 0);
			LP(k, 0, n) {
				if (dp2[k] == 0)continue;
				LP(x, 0, m2) {
					if (k + table2[x] <= n)next[k + table2[x]] = 1;
				}
			}
			dp2 = next;
		}
	}
	return 0;
}

