#include <iostream>
#include <vector>
using namespace std;

struct Node
{
	int id;
	int left;
	int right;
	int parent = -1;
	int depth = -1;
	int degree = 0;
	int height;
};

int depth_is(vector<Node>& tree, int id)
{
	if (tree[id].parent == -1)
	{
		return tree[id].depth = 0;
	}

	if (tree[id].depth != -1)
	{
		return tree[id].depth;
	}

	return tree[id].depth = 1 + depth_is(tree, tree[id].parent);
}

int height_is(vector<Node>& tree, int id)
{
	if (tree[id].degree == 0) {
		return tree[id].height = 0;
	}
	int left_height = -1;
	int right_height = -1;

	if (tree[id].left != -1) {
		left_height = 1 + height_is(tree, tree[id].left);
	}

	if (tree[id].right != -1) {
		right_height = 1 + height_is(tree, tree[id].right);
	}
	return tree[id].height = max(left_height, right_height);
}

int main()
{
	int n;
	cin >> n;
	vector<Node> tree(n);

	// Input data
	for (int i = 0; i < n; i++) {
		int id, left, right;
		cin >> id >> left >> right;
		tree[id].id = id;
		tree[id].left = left;
		tree[id].right = right;
		if (left != -1) {
			tree[id].degree++;
			tree[left].parent = id;
		}
		if (right != -1) {
			tree[id].degree++;
			tree[right].parent = id;
		}
	}

	// get depth
	for (int i = 0; i < n; i++) {
		depth_is(tree, i);
	}

	// get height
	for (int i = 0; i < n; i++) {
		if (tree[i].parent == -1)
		{
			height_is(tree, i);
			break;
		}
	}

	for (int i = 0; i < n; i++) {
		cout << "node " << i << ": parent = " << tree[i].parent
			<< ", sibling = ";
		if (tree[i].parent == -1)
		{
			cout << -1;
		}
		else {
			if (tree[tree[i].parent].left == tree[i].id) {
				cout << tree[tree[i].parent].right;
			}
			else if(tree[tree[i].parent].right == tree[i].id){
				cout << tree[tree[i].parent].left;
			}
			else {
				cout << -1;
			}
		}
		cout << ", degree = " << tree[i].degree;
		cout << ", depth = " << tree[i].depth
			<< ", height = " << tree[i].height << ", ";
		if (tree[i].parent == -1) {
			cout << "root";
		}
		else if (tree[i].left == -1 && tree[i].right == -1) {
			cout << "leaf";
		}
		else {
			cout << "internal node";
		}
		cout << endl;
	}

	return 0;
}
