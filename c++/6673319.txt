#include <iostream>
#include <cstring>
#include <algorithm>
#include <map>
#include <queue>

using namespace std;
#define MAX 1000000
typedef struct SqQueue{
	char *base;
	int front;
	int rear;
}SqQueue;
//初始化队列
int InsiQueue(SqQueue &s)
{
	s.base = (char *)malloc(MAX * sizeof(char));
	if(!s.base)
	{
		return 0;
	}
	s.front = 0;
	s.rear = s.front;
	return 1;
}
//入队
int push(SqQueue &s,string e)
{
	if((s.rear + 1) % MAX == s.front)
	{
		cout<<"The queue is full"<<endl;
	}
    for (int i = 0; i < e.length(); i++)
    {
        s.base[s.rear] = e[i];
        s.rear = (s.rear + 1) % MAX;
    }
    return 1;
}
//出队
int pop(SqQueue &s,string &t)
{
 	if(s.front == s.rear)
 	{
 		cout<<"The queue is empty"<<endl;
	}
    for(int i=0;i<9;i++){
        t+= s.base[s.front];
	    s.front = (s.front + 1) % MAX;
    }
	return 1;
} 
//求队列长度
int size(SqQueue s)
{
  	return (s.rear - s.front + MAX) % MAX;
}


string start, ending;

int bfs()
{
    SqQueue s;  
    InsiQueue(s);                                                         
    push(s,start); //将开始状态入队列
    map<string, int> d; //存储该状态下的距离                                   
    d[start] = 0;      //开始状态距离为0
    int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1}; //定义上下左右四个向量

    while (size(s)) //当队列为空时,结束bfs算法
    {
        string t;
        pop(s,t); //取出队头元素,队头元素即取出的前九个字符，命名为t状态
        int distance = d[t]; // t状态下的距离为distance
        if (t == ending)
            return distance; ///当t状态和终止状态相同时找到答案结束bfs,返回答案

        int k = t.find('0');        //找到t状态下空格在一维坐标下的位置
        int x = k / 3, y = k % 3;   //反算t状态下二维坐标下的位置(x,y)
        for (int i = 0; i < 4; i++) //枚举上下左右四个向量
        {
            int a = x + dx[i], b = y + dy[i];       //加上偏移量后点的坐标
            if (a >= 0 && b >= 0 && a < 3 && b < 3) //如果0的位置没有越界
            {
                swap(t[a * 3 + b], t[k]); //交换0的一维坐标下的值
                if (d.count(t) == 0)      //如果该状态并没有被遍历过则在map中无关于t的映射count(t)为0，更新该状态的距离,并入队列
                {
                    d[t] = distance + 1;
                    push(s,t);
                }
                swap(t[a * 3 + b], t[k]); //还原现场,因为还有剩余的向量并没有被枚举过
            }
        }
    }
    return -1; //如果没有找到的话,返回-1
}


int main()
{
    cout<<"Please input the original square matrix: ";
    for (int i = 0; i < 9; i++) //读入开始状态
    {
        char c;
        cin >> c;
        start += c;
    }
    cout<<"Please enter the transformed square matrix: ";
    for (int i = 0; i < 9; i++) //读入终止状态
    {
        char c;
        cin >> c;
        ending += c;
    }
    
    cout << bfs(); //输出答案
    return 0;
}



