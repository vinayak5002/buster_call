#include<iostream>
#include<algorithm>
#include<vector>
#include<string>
#include<cmath>
#include<iomanip>
#include<map>
#include<stack>
#include<queue>
#include<set>
#include<deque>
#include<list>

using namespace std;
using P = pair<int,int>;
using ll = long long;
using ld = long double;

const ld EPS = 1e-10;
const ll MOD = 1000000007LL;
const ll INF = 1LL << 60;
const double PI = M_PI;

////////////////////////////////////////////////////
// 二分探索 整数n が配列arrに含まれるかどうか
// [ arr は昇順に整列済み ]
bool binarySearch( int n, vector<int> arr ){

  int l = 0;
  int r = arr.size();
  while( l < r ){
    int m = ( l + r ) / 2;
    if( arr[m] == n )
      return true;
    else if( arr[m] < n )
      l = m+1;
    else
      r = m;
  }
  return false;

}

////////////////////////////////////////////////////
// 配列を表示する
void print( vector<int> arr ){

  for( int i = 0 ; i < arr.size()-1 ; i++ )
    cout << arr[i] << " ";
  cout << arr[arr.size()-1] << endl;

}


int exhaustive_sum( vector<int> A, int x ){
	
	int res = 0;
	for( int i = 0 ; i < A.size() ; i++ ){
		if( x & 1 )
			res += A[i];
		x >>= 1;
	}
	return res;

}

int main(){

	int n, q, m, tmp;
	vector<int> A;
	vector<int> sum;
	
	cin >> n;
	for( int i = 0 ; i < n ; i++ ){
		cin >> tmp;
		A.push_back(tmp);
	}
	for( int i = 1 ; i < (1 << n) ; i++ )
		sum.push_back( exhaustive_sum(A, i) );
	sort(sum.begin(), sum.end());
	cin >> q;
	for( int i = 0 ; i < q ; i++ ){
		cin >> tmp;
		if( binarySearch(tmp, sum) )
			cout << "yes" << endl;
		else
			cout << "no" << endl;
	}

}

