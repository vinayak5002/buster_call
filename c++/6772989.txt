#include<bits/stdc++.h>
using namespace std;
using ll = long long;

//重み付きUnion_Find(XOR)
struct Weighted_dsu {
    public:
    vector<bool> broken;
    Weighted_dsu() : _n(0) {}
    Weighted_dsu(int n) : _n(n), parent_or_size(n, -1), broken(n, false), diff_weight(n, 0) {}
 
    bool merge(int a, int b, int w) {
        int x = leader(a), y = leader(b);
        if(x == y){
            if(diff(a, b)==w)return true;
            broken[x] = true;
            return false;
        }
        w ^= diff_weight[a], w ^= diff_weight[b];
        if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);
        parent_or_size[x] += parent_or_size[y];
        parent_or_size[y] = x;
        if(broken[y])broken[x] = true;
        diff_weight[y] ^= w;
        return true;
    }
    int diff(int x, int y) {
        leader(x),leader(y);
        return diff_weight[y] ^ diff_weight[x];
    }
    bool same(int a, int b) {
        return leader(a) == leader(b);
    }
    int leader(int a) {
        if (parent_or_size[a] < 0) return a;
        int r = leader(parent_or_size[a]);
        diff_weight[a] ^= diff_weight[parent_or_size[a]];
        return parent_or_size[a] = r;
    }
    int size(int a) {
        return -parent_or_size[leader(a)];
    }
    std::vector<std::vector<int>> groups() {
        std::vector<int> leader_buf(_n), group_size(_n);
        for (int i = 0; i < _n; i++) {
            leader_buf[i] = leader(i);
            group_size[leader_buf[i]]++;
        }
        std::vector<std::vector<int>> result(_n);
        for (int i = 0; i < _n; i++) {
            result[i].reserve(group_size[i]);
        }
        for (int i = 0; i < _n; i++) {
            result[leader_buf[i]].push_back(i);
        }
        result.erase(
            std::remove_if(result.begin(), result.end(),
                           [&](const std::vector<int>& v) { return v.empty(); }),
            result.end());
        return result;
    }
    private:
        int _n;
        std::vector<int> parent_or_size;
        std::vector<int> diff_weight;
};

int main(){
    int N, M;
    while(cin >> N >> M, N){
        Weighted_dsu uf(N);
        bool flag = true;
        for(int i = 0, u, v; i < M; i++){
            cin >> u >> v;
            if(!uf.merge(--u, --v, 1))flag = false;
        }
        vector<int> ans;
        if(flag){
            int cnt = 0;
            for(int i = 0; i < N; i++)cnt += uf.diff(0, i);
            if(cnt % 2 == 0)ans.push_back(cnt / 2);
            if((N - cnt) % 2 == 0)ans.push_back((N - cnt) / 2);
        }
        sort(ans.begin(), ans.end());
        ans.erase(unique(ans.begin(), ans.end()), ans.end());
        cout << ans.size() << '\n';
        for(int i = 0; i < ans.size(); i++){
            cout << ans[i] << '\n';
        }
    }
}
