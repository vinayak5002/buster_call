#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i,n) for (int i = 0; i < (n); ++i)

struct UnionFind {
    vector<int> par; // 各要素の親要素
    UnionFind(int n) {
        par.resize(n);
        for (int i = 0; i < n; i++) par[i] = i;
    }
    int root(int x) {
        if (par[x] == x) return x;
        else return par[x] = root(par[x]);
    }
    bool same(int x, int y) {
        return root(x) == root(y);
    }
    void unite(int x, int y) {
        x = root(x);
        y = root(y);
        if (x == y) return;
        par[x] = y;
    }
};

struct edge {int u, v, cost; };
bool comp(edge &e1, edge &e2) {
    return e1.cost < e2.cost;
}

int main(){
    int V, E;
    cin >> V >> E;
    vector<edge> es(E);
    rep(i,E) cin >> es[i].u >> es[i].v >> es[i].cost;

    sort(es.begin(), es.end(), comp);
    UnionFind uf = UnionFind(V);

    ll ans = 0;
    for (edge &e : es) {
        if (!uf.same(e.u, e.v)) {
            uf.unite(e.u, e.v);
            ans += e.cost;
        }
    }

    cout << ans << endl;
} 
