#include <iostream>
#include <vector>
#include <cassert>

bool isAssign(int P, int k, std::vector<int> &baggage_weight) //※荷物の数だけ繰り返すようにする
{
    int sum_weight = 0; // 1台のトラックに乗せた荷物の総重量
    int count = 1;      //荷物が載せてあるトラックの台数
    for (size_t i = 0; i < baggage_weight.size(); i++)
    {
        sum_weight += baggage_weight[i];
        if (P < sum_weight) // 1台のトラックに乗せた荷物の総重量が最大積載量Pを超えたら
        {
            sum_weight = 0;
            i--;
            count++;
        }
        if (count > k) //荷物が載せてあるトラックの台数が用意したトラックの台数を超えたら
        {
            return false;
        }
    }
    return true; //ここまで来るのは「count==k」かつ「荷物の数だけfor分を繰り返したとき」
}

int main()
{
    int n;                              // n個の荷物
    int k;                              // k台のトラック
    std::vector<int> baggage_weight(n); // 荷物それぞれの重さ
    int gross_weight = 0;               // 全荷物の合計重量
    int max_weight = 0;                 // 全荷物の中での最大重量

    std::cin >> n >> k;
    for (int i = 0; i < n; i++)
    {
        int w; //荷物1つのwkg
        std::cin >> w;
        baggage_weight.push_back(w);
        gross_weight += w;
        if (max_weight < w)
        {
            max_weight = w;
        }
    }

    int P_low = 0;
    gross_weight / k > max_weight ? P_low = gross_weight / k : P_low = max_weight;
    //「総重量/トラックの数」「最も重い荷物の重量」を比較→重いほうが最低限必要な最大積載量

    int P = P_low; //最大積載量/台
    while (1)
    {
        if (isAssign(P, k, baggage_weight) /* ちょうどよく荷物を載せれるか確認する関数 */)
        {
            std::cout << P << std::endl; // Pを表示する
            break;                       // 乗せれたらbreak;
        }
        P++;
    }

    return 0;
}
