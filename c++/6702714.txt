#include <bits/stdc++.h>
//#include <atcoder/all>
using namespace std;
using ll = long long;
using vll = vector<ll>;
using mll = map<ll, ll>;
using pll = pair<ll, ll>;
using vvll = vector<vll>;
using vi = vector<int>;
using vvi = vector<vi>;
using vvvi = vector<vvi>;
using vvvvi = vector<vvvi>;
const int SIZE = 100010;
#define INF 1LL<<60
#define LLINF 1LL<<60
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define rrep(i,a,b) for(int i=a;i>=b;i--)
#define fore(i,a) for(auto &i:a)
#define all(x) (x).begin(),(x).end()
template<class T>bool chmax(T& a, const T& b) { if (a < b) { a = b; return 1; } return 0; }
template<class T>bool chmin(T& a, const T& b) { if (b < a) { a = b; return 1; } return 0; }
//* calculate x^n mod something in O(log n) -- bit operation version
ll mod_pow_bit(ll x, ll n, ll mod){
    ll res = 1;
    while(n>0){
        if( n & 1) res = (__int128)res * x % mod;
        x = (__int128)x * x % mod;
        n >>= 1;
    }
    return res;
}
bool miller_rabin(ll x)
{
    if (x < 3) // 特判1，2
        return x == 2;
    if (x % 2 == 0) // 特判偶数
        return false;
    ll A[] = {2, 325, 9375, 28178, 450775, 9780504, 1795265022}, d = x - 1, r = 0;
    while (d % 2 == 0) // 算出d, r 
        d /= 2, ++r;
    // 或：r = __builtin_ctz(d), d >>= r;
    for (auto a : A)
    {
        ll v = mod_pow_bit(a, d, x); // a^d
        // 如果a^d≡0，说明是a是x的倍数；如果a^d≡1或-1，说明这串数接下来一定都是1，不用继续计算
        if (v <= 1 || v == x - 1) 
            continue;
        for (int i = 0; i < r; ++i)
        {
            v = (__int128)v * v % x; // 同样使用__int128过渡
            if (v == x - 1 && i != r - 1) // 得到-1，说明接下来都是1，可以退出了
            {
                v = 1;
                break;
            }
            // 在中途而非开头得到1，却没有经过-1，说明存在其他数字y≠-1满足y^2≡1，则x一定不是奇素数
            if (v == 1)  
                return false;
        }
        if (v != 1) // 查看是不是以1结尾
            return false;
    }
    return true;
}
int main(){
    int n; cin >> n;
    int ans = 0;
    rep(i, 0, n-1){
        int x; cin >> x;
        if(miller_rabin(x)) ans++;
    }
    cout << ans << endl;
    return 0;
}
