#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline double time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n; cin >> n;
    vector<int> r(n),c(n);
    vector<int> rr(n,-1),cc(n,-1);
    for(int i=0;i<n;i++){
        cin >> r[i] >> c[i];
        r[i]--; c[i]--;
        if(rr[r[i]] != -1 or cc[c[i]] != -1){
            cout << -1 << endl;
            return 0;
        }
        rr[r[i]] = i;
        cc[c[i]] = i;
    }
    int res = 0;
    for(int i=0;i<n;i++){
        int j = rr[i];
        if(r[j] == c[j]) continue;
        int k = cc[i];
        res++;
        swap(c[j],c[k]);
        cc[c[j]] = j;
        cc[c[k]] = k;
    }
    cout << res << endl;
}

