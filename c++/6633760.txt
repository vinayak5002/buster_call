#include<bits/stdc++.h>
#define int ll
#define rep(i, N) for(int i = 0; i < (int)N; ++i)
#define rep1(i, N) for(int i = 1; i <= (int)N; ++i)
#define per(i, N) for(int i = N-1; i >= 0; --i)
#define per1(i, N) for(int i = N; i >= 1; --i)
#define FOR(i, f, t) for(int i = f; i < (int)t; ++i)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define bit(n) (1ll << (n))
#define pcnt(n) (__builtin_popcount(n))
#define TakAo(ans) ans ? cout << "Takahashi\n" : cout << "Aoki\n"
#define YesNo(ans) ans ? cout << "Yes\n" : cout << "No\n"
#define endl '\n'
#define fi first
#define se second
#define mkpr make_pair
#define mktpl make_tuple
#define eb emplace_back

using namespace std;
using ll = int64_t;
using ull = uint64_t;
using ld = long double;
using point = struct{ ll x, y; };
template<class T> using max_heap = priority_queue<T>;
template<class T> using min_heap = priority_queue<T, vector<T>, greater<T>>;
template<class T> using vec = vector<T>;
template<class T> using vvec = vec<vec<T>>;
template<class T> using vvvec = vec<vec<vec<T>>>;
template<class T> using vvvvec = vec<vec<vec<vec<T>>>>;

constexpr ld EPS = 1e-10;
constexpr int INF = 1001001001;
constexpr ll LINF = 1001001001001001001ll;
constexpr int MOD = 1e9+7;
//constexpr ll MOD = 998244353;
constexpr int div2 = (MOD + 1) >> 1;
constexpr int NIL = -1;
constexpr int pm[2] = {1, -1};
constexpr int dy[4] = {0, 1, 0, -1};
constexpr int dx[4] = {1, 0, -1, 0};

ll cel(ll a, ll b){ return (a + b - 1) / b;}
ll Gcd(ll a, ll b){ return b ? Gcd(b, a % b) : a;}
template<class T> T powi(T x, ll exp){
    return exp > 0 ? (exp & 1 ? x : 1) * powi(x * x, exp >> 1) : 1;
}
ll modpow(ll x, ll exp, ll mod){
    x %= mod;
    return exp > 0 ? (exp & 1 ? x : 1) * modpow(x * x, exp >> 1, mod) % mod : 1;
}
template<class T> bool chmin(T &a, T b){ return a > b ? (a = b, true) : 0;}
template<class T> bool chmax(T &a, T b){ return a < b ? (a = b, true) : 0;}

using P = pair<ll, ll>;
using Tpl = tuple<int, int, int, int>;

ld cross(point p1, point p2, point q1, point q2){
    ll a = p2.x - p1.x;
    ll b = -(q2.x - q1.x);
    ll c = q1.x - p1.x;
    ll d = p2.y - p1.y;
    ll e = -(q2.y - q1.y);
    ll f = q1.y - p1.y;

    if(abs(b * d - a * e) < EPS) return NIL;

    // t
    // |res| > 1
    if(abs(b * f - e * c) > abs(b * d - a * e)) return NIL;
    // diff sign
    if(((b * f - e * c) < 0) != ((b * d - a * e) < 0)) return NIL;

    // u
    // |res| > 1
    if(abs(c * d - a * f) > abs(b * d - a * e)) return NIL;
    // diff sign
    if(((c * d - a * f) < 0) != ((b * d - a * e) < 0)) return NIL;
    
    return ld(b * f - e * c) / (b * d - a * e);
}

void Main(){
    int T; cin >> T;
    while(T--){
        point p1, p2; cin >> p1.x >> p1.y >> p2.x >> p2.y;
        int N; cin >> N;
        vec<point> s(N), t(N);
        vec<int> o(N), l(N);
        rep(i, N){
            cin >> s[i].x >> s[i].y >> t[i].x >> t[i].y >> o[i] >> l[i];
        }

        vec<tuple<ld, int, int>> A; // res, o, l
        rep(i, N){
            ld res = cross(p1, p2, s[i], t[i]);
            if(res >= -EPS){
                //cout << i << " " << res << endl;
                A.eb(mktpl(res, o[i], l[i]));
            }
        } 
        sort(all(A));

        int M = A.size();
        int ans = INF;

        int b = 0, val = 0;
        rep(i, M){
            if(get<1>(A[i]) == get<2>(A[i])){
                if(b == 0){
                    val++, b = 1;
                }
            }
            else{
                if(b == 1){
                    val++, b = 0;
                }
            }
        }
        chmin(ans, val);
        b = 1, val = 0;
        rep(i, M){
            if(get<1>(A[i]) == get<2>(A[i])){
                if(b == 0){
                    val++, b = 1;
                }
            }
            else{
                if(b == 1){
                    val++, b = 0;
                }
            }
        }
        chmin(ans, val);

        cout << ans << endl;
    }
}

signed main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    Main();
    return 0;
}

