#include<bits/stdc++.h>

using namespace std;
using ll=long long;

const double EPS=1e-7;

template<typename T>
int sign(T a){return (a<-EPS)?-1:(a>EPS)?1:0;}

template<typename T, typename U>
int cmp(T a, U b){
    /* a<b: -1, a==b: 0, a>b: 1 */
    return sign(a-b);}

template<typename T>
struct Point{
    T x,y;

    Point(): x(0), y(0){}
    Point(T x, T y): x(x), y(y){}

    // マイナス
    Point operator-() const { return Point(-x,-y);}

    // 和
    Point& operator+=(const Point &P){
        x+=P.x; y+=P.y;
        return *this;
    }

    Point operator+(const Point &P) const {return Point(*this)+=P;}

    // 差
    Point& operator-=(const Point &P){
        x-=P.x; y-=P.y;
        return *this;
    }

    Point operator-(const Point &P) const {return Point(*this)-=P;}

    // 積
    Point operator*(const Point &P) const {
        T a=x*P.x-y*P.y, b=x*P.y+y*P.x;
        return Point<T>(a,b);
    }

    //スカラー倍
    Point& operator*=(const T &a){
        x*=a; y*=a;
        return *this;
    }

    Point& operator*(const T &a) const {return Point(*this)*=a;}

    // ノルム
    T norm_2() const {return x*x+y*y;}
    double norm() const {return sqrt(x*x+y*y);}

    // クロス積
    T cross(const Point &P) const {return x*P.y-y*P.x;}
    T det(const Point &P) const {return x*P.y-y*P.x;}

    // ドット積
    T dot(const Point &P) const {return x*P.x+y*P.y;}

    // 角度
    double arg() const {return atan2(y,x);}

    // 比較
    bool operator<(const Point &P){
        if (cmp(x,P.x)) return cmp(x,P.x)<0;
        return cmp(y,P.y)<0;
    }

    // 入力
    friend istream &operator>>(istream &is, Point &P) {is >> P.x >> P.y; return (is);}

    // 出力
    friend ostream &operator<<(ostream &os, const Point &P) {return os << P.x << " " << P.y;}
};

template<typename T, typename U>
Point<U> operator*(const T &a, const Point<U> &P){return Point<U>(a*P.x, a*P.y);}


template<typename T, typename U>
struct Circle{
    Point<T> center;
    U radius;

    Circle<T,U> (const Point<T> &P, const U &r): center(P), radius(r){}

    bool is_on(const Point<T> &P){
        return cmp((P-center).norm(), radius)==0;
    }
};


// 2円の位置関係
template<typename T1, typename T2, typename U1, typename U2>
int Relationship_between_Circle_and_Circle(const Circle<T1,T2> &C, const Circle<U1,U2> &D){
    /*
    4: 離れている
    3: 外接
    2: 交わっている
    1: 内接
    0: 含んでいる
    */
    auto d=(C.center-D.center).norm();
    T2 r=C.radius; U2 s=D.radius;

    int a=cmp(d,r+s);
    if (a==1) return 4;
    if (a==0) return 3;

    int b=cmp(d,abs(r-s));
    if (b==1) return 2;
    if (b==0) return 1;
    return 0;
}

int main(){
	Point<int> p1,p2; int r1,r2;
	cin >> p1 >> r1 >> p2 >> r2;
	Circle<int,int> C1(p1,r1), C2(p2,r2);
	cout << Relationship_between_Circle_and_Circle(C1,C2) << endl;
}

