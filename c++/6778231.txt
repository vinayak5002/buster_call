#include <bits/stdc++.h>

using namespace std;

constexpr long long mod = 1000000007;

long long safe_mod(long long x) {
    return (x %= mod) < 0 ? x + mod : x;
}

int main() {
    string s;
    cin >> s;
    const int n = s.size();

    vector<int> rp(n, -1);
    {
        vector<int> st;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '(') {
                st.push_back(i);
            } else if (s[i] == ')') {
                rp[st.back()] = i;
                st.pop_back();
            }
        }
    }

    auto dfs = [&](auto dfs, int l, int r) -> array<long long, 2> {
        vector<array<long long, 2>> st;
        for (int i = l; i < r;) {
            bool neg = false;
            for (; s[i] == '~'; ++i) neg = not neg;

            auto f = [&](array<long long, 2> t) {
                if (st.empty() or s[i - 1] == '|') {
                    st.push_back(t);
                } else {
                    auto [v0, v1] = st.back();
                    auto [t0, t1] = t;
                    long long a = (v0 + v1) * (t0 + t1) % mod;
                    long long n1 = t1 * v1 % mod;
                    long long n0 = safe_mod(a - n1);
                    st.back() = { n0, n1 };
                }
            };

            if (s[i] == '(') {
                int j = rp[i];
                auto t = dfs(dfs, i + 1, j);
                if (neg) swap(t[0], t[1]);
                f(t);
                i = j + 1;
            } else {
                assert(s[i] == 'x');
                int j = i + 1;
                while ('0' <= s[j] and s[j] <= '9') ++j;
                f({ 1, 1 });
                i = j;
            }
            if (i != r) ++i;
        }
        int len = st.size();
        auto [v0, v1] = st[0];
        for (int i = 1; i < len; ++i) {
            auto [t0, t1] = st[i];
            long long a = (v0 + v1) * (t0 + t1) % mod;
            long long n0 = t0 * v0 % mod;
            long long n1 = safe_mod(a - n0);
            v0 = n0, v1 = n1;
        }
        return { v0, v1 };
    };
    cout << dfs(dfs, 0, n)[1] << endl;
}
