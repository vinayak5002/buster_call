#include <bits/stdc++.h>
typedef long long int ll;
using namespace std;
const int MOD = 1000000007;
typedef pair<ll, ll> P;
const double pi = 3.1415926536;
const int MAX = 2000003;
long long fac[MAX], finv[MAX], inv[MAX];
template<typename T> using min_priority_queue = priority_queue<T, vector<T>, greater<T>>;
void COMinit() {
    fac[0] = fac[1] = 1;
    finv[0] = finv[1] = 1;
    inv[1] = 1;
    for (int i = 2; i < MAX; i++){
        fac[i] = fac[i - 1] * i % MOD;
        inv[i] = MOD - inv[MOD%i] * (MOD / i) % MOD;
        finv[i] = finv[i - 1] * inv[i] % MOD;
    }
}
// 二項係数計算
long long COM(int n, int k){
    if (n < k) return 0;
    if (n < 0 || k < 0) return 0;
    return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;
}
ll gcd(ll x, ll y) {
   if (y == 0) return x;
   else if (y > x) {
       return gcd (y, x); 
   }
   else return gcd(x % y, y);
}

ll pow_mod(ll x, ll n) {
    if (n == 0) {
        return 1;
    }
    if (n % 2) return pow_mod(x, n - 1) * x % MOD;
    else {
        ll tmp = pow_mod(x, n / 2);
        return tmp * tmp % MOD;
    }
}

int main() {
    vector<double> ansl;
    while (true) {
        int n;
        cin >> n;
        if (n == 0) break;
        int k;
        cin >> k;
        k = n - k;
        double x[n];
        double y[n];
        for (int i = 0; i < n; i++) {
            cin >> (double)x[i] >> (double)y[i];
        }
        double par1[n]; // 左側のy切片
        double par2[n];
        vector<pair<double, int>> v1;
        vector<pair<double, int>> v2;
        for (int i = 0; i < n; i++) {
            par1[i] = y[i] - x[i] * sqrt(3);
            par2[i] = y[i] + x[i] * sqrt(3);
            v1.push_back({par1[i], i});
            v2.push_back({par2[i], i});
        }
        double ans = 1e18;
        sort(v1.begin(), v1.end());
        sort(v2.begin(), v2.end());
        for (int i = 0; i < n; i++) {
            int j = 0;
            min_priority_queue<ll> que;
            while (j < n) {
                if (par1[v2[j].second] <= par1[i]) que.push(y[v2[j].second]);
                if (que.size() < k) {
                    j++;
                }
                else if (que.size() == k) {
                    double hi = (par2[v2[j].second] + par1[i]) / 2;
                    double low = que.top();
                    ans = min(ans, (hi - low) * 2 * sqrt(3));
                    j++;
                    que.pop();
                }
            }
        }
        ansl.push_back(ans);
    }
    for (auto x : ansl) cout << setprecision(10) << x << endl; 
    return 0;
}
