#include <bits/stdc++.h>
using namespace std;

void init(){
    cin.tie(0);
    cin.sync_with_stdio(0);
}
typedef long long ll;

int isPrime(long long n){
    if(n<=1) return 0;
    for(long long i=2;i*i<=n;i++){
        if(n%i==0)
            return 0;
    }
    return 1;
}
long long GCD(long long a,long long b){
    if (a == 0) return b;
    GCD(b%a , a);
}
long long LCM(long long a,long long b){
    return (a / GCD(a, b))*b;
}

int checkSemiprime(int num)
{
    int cnt = 0;

    for (int i = 2; cnt < 2 && i * i <= num; ++i)
        while (num % i == 0)
            num /= i, ++cnt;
    if (num > 1)
        ++cnt;

    return cnt == 2;
}
int numOfDivisors(int n){
    int cnt=0;
    for(int i=1;i*i<=n;i++){
        if(n%i==0&&n/i!=i)
            cnt+=2;
        if(n%i==0&&n/i==i)
            cnt++;
    }
    return cnt;
}
bool isLucky(int n){
    while(n>10&&(n%10==4||n%10==7)){
        n/=10;
    }
    if(n==4||n==7) return true;
    else           return false;

}
/*long long n,m;
pair<long long ,long long>arr[100005];
vector<pair<long long ,long long>>v;
void mergeIntervals(){
    sort(arr, arr+n);
    long long index = 0;
    for (long long i=1; i<n; i++)
    {
        if (arr[index].second >=  arr[i].first)
        {
            arr[index].second = max(arr[index].second, arr[i].second);
            arr[index].first = min(arr[index].first, arr[i].first);
        }
        else {
            index++;
            arr[index] = arr[i];
        }
    }
    for (long long i = 0; i <= index; i++)
        v.push_back(make_pair(arr[i].first, arr[i].second));
}
int getIndex(vector<int> v, int K, int z)
{
    auto it = find(v.begin()+z, v.end(), K);

    // If element was found
    if (it != v.end())
    {
        int index = it - v.begin();
        return index;
    }
}
long long summition(long long x){
    return x*(x+1)/2;
}
*/
bool allCharactersSame(string s)
{
    return (s.find_first_not_of(s[0]) == string::npos);
}

int findDigitsOfFactorial(int n)
{
    if (n <= 1)
        return 1;

    double digits = 0;
    for (int i=2; i<=n; i++)
        digits += log10(i);

    return digits + 1;
}
long long nCr(long long n,long r){
    if(r>n) return 0;
    if(r==n) return 1;
    long long ans=1;
    for(long long i=n;i>n-r;i--) ans*=i;
    for(long long i=r;i>=2;i--) ans/=i;

    return ans;
}
long long fact(long long n){
    long  long ans=1;
    for(long long i=2;i<=n;i++) ans*=i;
    return ans;
}

string add(string str1, string str2)
{
    // Before proceeding further, make sure length
    // of str2 is larger.
    if (str1.length() > str2.length())
        swap(str1, str2);

    // Take an empty string for storing result
    string str = "";

    // Calculate length of both string
    int n1 = str1.length(), n2 = str2.length();
    int diff = n2 - n1;

    // Initially take carry zero
    int carry = 0;

    // Traverse from end of both strings
    for (int i=n1-1; i>=0; i--)
    {
        // Do school mathematics, compute sum of
        // current digits and carry
        int sum = ((str1[i]-'0') +
                   (str2[i+diff]-'0') +
                   carry);
        str.push_back(sum%10 + '0');
        carry = sum/10;
    }

    // Add remaining digits of str2[]
    for (int i=n2-n1-1; i>=0; i--)
    {
        int sum = ((str2[i]-'0')+carry);
        str.push_back(sum%10 + '0');
        carry = sum/10;
    }

    // Add remaining carry
    if (carry)
        str.push_back(carry+'0');

    // reverse resultant string
    reverse(str.begin(), str.end());

    return str;
}

//difference between 2 large nums
bool isSmaller(string str1, string str2)
{
    // Calculate lengths of both string
    int n1 = str1.length(), n2 = str2.length();

    if (n1 < n2)
        return true;
    if (n2 < n1)
        return false;

    for (int i = 0; i < n1; i++)
        if (str1[i] < str2[i])
            return true;
        else if (str1[i] > str2[i])
            return false;

    return false;
}

// Function for find difference of larger numbers
string sub(string str1, string str2)
{
    // Before proceeding further, make sure str1
    // is not smaller
    bool f = isSmaller(str1, str2);
    if (f)
        swap(str1, str2);

    // Take an empty string for storing result
    string str = "";

    // Calculate length of both string
    int n1 = str1.length(), n2 = str2.length();

    // Reverse both of strings
    reverse(str1.begin(), str1.end());
    reverse(str2.begin(), str2.end());

    int carry = 0;

    // Run loop till small string length
    // and subtract digit of str1 to str2
    for (int i = 0; i < n2; i++) {
        // Do school mathematics, compute difference of
        // current digits

        int sub
            = ((str1[i] - '0') - (str2[i] - '0') - carry);

        // If subtraction is less then zero
        // we add then we add 10 into sub and
        // take carry as 1 for calculating next step
        if (sub < 0) {
            sub = sub + 10;
            carry = 1;
        }
        else
            carry = 0;

        str.push_back(sub + '0');
    }

    // subtract remaining digits of larger number
    for (int i = n2; i < n1; i++) {
        int sub = ((str1[i] - '0') - carry);

        // if the sub value is -ve, then make it positive
        if (sub < 0) {
            sub = sub + 10;
            carry = 1;
        }
        else
            carry = 0;

        str.push_back(sub + '0');
    }
    while(str.back()=='0' && str.size()>1) str.pop_back();
    if(f) str.push_back('-');
    // reverse resultant string
    reverse(str.begin(), str.end());

    return str;
}
string multiply(string num1, string num2)
{
    int len1 = num1.size();
    int len2 = num2.size();
    if (len1 == 0 || len2 == 0)
    return "0";

    // will keep the result number in vector
    // in reverse order
    vector<int> result(len1 + len2, 0);

    // Below two indexes are used to find positions
    // in result.
    int i_n1 = 0;
    int i_n2 = 0;

    // Go from right to left in num1
    for (int i=len1-1; i>=0; i--)
    {
        int carry = 0;
        int n1 = num1[i] - '0';

        // To shift position to left after every
        // multiplication of a digit in num2
        i_n2 = 0;

        // Go from right to left in num2
        for (int j=len2-1; j>=0; j--)
        {
            // Take current digit of second number
            int n2 = num2[j] - '0';

            // Multiply with current digit of first number
            // and add result to previously stored result
            // at current position.
            int sum = n1*n2 + result[i_n1 + i_n2] + carry;

            // Carry for next iteration
            carry = sum/10;

            // Store result
            result[i_n1 + i_n2] = sum % 10;

            i_n2++;
        }

        // store carry in next cell
        if (carry > 0)
            result[i_n1 + i_n2] += carry;

        // To shift position to left after every
        // multiplication of a digit in num1.
        i_n1++;
    }

    // ignore '0's from the right
    int i = result.size() - 1;
    while (i>=0 && result[i] == 0)
    i--;

    // If all were '0's - means either both or
    // one of num1 or num2 were '0'
    if (i == -1)
    return "0";

    // generate the result string
    string s = "";

    while (i >= 0)
        s += std::to_string(result[i--]);

    return s;
}

int countDifferentBits(int x,int y){
    int cnt=0;
    int z=x^y;
    while(z){
        z = z&(z-1);
        cnt++;
    }
    return cnt;
}
ll ans(ll x){
    if(x%4==0) return x;
    else if(x%4==1) return 1;
    else if(x%4==2) return x+1;
    else if(x%4==3) return 0;
}
bool preceed (pair<double,double> x, pair<double,double>y){
    return ((x.first/x.second)>(y.first/y.second));
}
int main()
{
    init();

    ll n,w; cin>>n>>w;
    pair<double,double>items[n];
    for(ll i=0;i<n;i++)
        cin>>items[i].first>>items[i].second;

    sort(items,items+n,preceed);
    double ans=0.0;
    for(ll i=0;i<n;i++){
        if(w>=items[i].second){
            ans+=items[i].first;
            w-=items[i].second;
        }
        else{
            ans+=w/items[i].second*items[i].first;
            break;
        }
    }
    cout<<ans;
}


