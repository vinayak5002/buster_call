#include <bits/stdc++.h>
//#include <atcoder/all>
using namespace std;

#define all(x) (x).begin(),(x).end()
#define print(x) cout << (x) << '\n'
typedef long long ll;
typedef long double ld;
using P = pair<int,int>;
using pll = pair<ll,ll>;
using Graph = vector<vector<int>>;

//using mint = atcoder :: modint998244353;
//const ll MOD = 1000000007;
//const ll MOD = 998244353;

template <typename T> inline bool chmax(T &a, T b) {return a < b ? a = b, true : false;}
template <typename T> inline bool chmin(T &a, T b) {return a > b ? a = b, true : false;}

template <typename T>
void vin(vector<T> &v) {
    int l = v.size();
    for(int i = 0; i < l; i++) cin >> v[i];
}

template <typename T>
void vout(vector<T> &v) {
    int l = v.size();
    for(int i = 0; i < l; i++) cout << v[i] << " \n"[i == l - 1];
}

void solve(int n) {
    vector<int> c(n);
    vin(c);
    if(c[0] != 1) {
        print("Cannot pay some amount");
        return;
    } else {
        vector<int> dp(2001, 2005);
        dp[0] = 0;
        for(int i = 1; i <= 2000; i++) {
            for(int j = 0; j < n; j++) {
                if(c[j] > i) continue;
                chmin(dp[i], dp[i - c[j]] + 1);
            }
        }
        for(int i = 2000; i >= 1; i--) {
            int t = i;
            int cnt = 0;
            for(int j = n - 1; j >= 0; j--) {
                if(t >= c[j]) {
                    cnt += t / c[j];
                    t -= t / c[j] * c[j];
                }
            }
            if(cnt > dp[i]) {
                print("Cannot use greedy algorithm");
                return;
            }
        }
        print("OK");
        return;
    }
}

int main() {
    cin.tie(0); cout.tie(0);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(18);

    for(int ca = 1; ca <= 1000000000; ca++) {
        int n;  cin >> n;
        if(n == 0) return 0;
        cout << "Case #" << ca << ": ";
        solve(n);
    }
}
