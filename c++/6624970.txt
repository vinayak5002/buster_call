#include <stdio.h>
#include <stdlib.h>



int main(int argc, char *argv[]) {
    int n;
    
    while(scanf("%d\n", &n)!=EOF) {
        if(n<2 || n>255){
            break;
        } 
        int m[n][n];
        
        // getchar();
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                // if(getchar()=='1') m[i][j] = 1;
                // else if (getchar()=='0') m[i][j] = 0;
                m[i][j] = getchar()-48;
            }
            getchar();
        }
        
    // 	for(int i = 0; i < n; i++) {
    // 		for(int j = 0; j < n; j++){	
    // 			printf("%d", m[i][j]); 
    // 		}
    // 		printf("\n");
    // 	}
    	
    	int max = -100, count = 0;
    	// vertical
    // 	printf("z %d\n", max);
    	for(int j = 0; j < n; j++) {
    	    int i = 0;
    	    count = 0;
    	    if(m[i][j]==1) count++;
    	    while(i<n-1){
    	        i++;
    	        if(m[i][j]==1) count++;
    	        else count = 0;
    	        
    	        if(count>max) max = count;
    	    }
    	}
    // 	printf("a %d\n", max);
    	// horizontal
    	for(int i = 0; i < n; i++) {
    	    int j = 0;
    	    count = 0;
    	    if(m[i][j]==1) count++;
    	    while(j<n-1){
    	        j++;
    	        if(m[i][j]==1) count++;
    	        else count = 0;
    	        
    	        if(count>max) max = count;
    	    }
    	}
    // 	printf("b %d\n", max);
    	// diagonal direction
    	for(int i = n-1; i >= 0; i--) {
    	    int j = 0, i_cur;
    	    count = 0;
    	    if(m[i][j]==1) count++;
    	    i_cur = i;
    	    while(i_cur<n-1 && j<n-1){
    	        i_cur++;
    	        j++;
    	        if(m[i_cur][j]==1) count++;
    	        else count = 0;
    	        
    	        if(count>max) max = count;
    	    }
    	}
    // 	printf("c %d\n", max);
    	for(int j = 1; j < n; j++) {
    	    int i = 0, j_cur;
    	    count = 0;
    	    if(m[i][j]==1) count++;
    	    j_cur = j;
    	    while(j_cur<n-1 && i<n-1){
    	        j_cur++;
    	        i++;
    	        if(m[i][j_cur]==1) count++;
    	        else count = 0;
    	        
    	        if(count>max) max = count;
    	    }
    	}
    	
    // 	printf("d %d\n", max);
    	// diagonal direction
    	
    	for(int j = n-1; j >= 0; j--) {
    	    int i = n-1, j_cur;
    	    count = 0;
    	    if(m[i][j]==1) count++;
    	    j_cur = j;
    	    while(j_cur<n-1 && i>=0){
    	        j_cur++;
    	        i--;
    	        if(m[i][j_cur]==1) count++;
    	        else count = 0;
    	        
    	        if(count>max) max = count;
    	    }
    	}
    	
    	for(int i = n-2; i >= 0; i--) {
    	    int j = 0, i_cur;
    	    count = 0;
    	    if(m[i][j]==1) count++;
    	    i_cur = i;
    	    while(i_cur>=0 && j<n-1){
    	        j++;
    	        i_cur--;
    	        if(m[i_cur][j]==1) count++;
    	        else count = 0;
    	        
    	        if(count>max) max = count;
    	    }
    	}
    	

    	printf("%d\n", max);
    }
    
}
