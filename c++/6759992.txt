#include <iostream>
#include <cmath>
#include <climits>
using namespace std;


const int INF = INT_MAX; // 2^31-1
const int N = 100005 * 2 + 1;

int D[N];
int n, q;

void initRMQ(int n_){
    n=1;

    while(n < n_){
        n *= 2;
    }

    for(int i=0; i<2*n-1; i++){
        D[i] = INF;
    }
}


void update(int a,int b,int k,int l,int r,int x){
  if(r<=a||b<=l)return;
  if(a<=l&&r<=b)D[k]=x;
  else{
    if(D[k]!=INF){
      D[k*2+1]= D[k*2+2] =D[k];
      D[k]=INF;
    }

    update(a,b,k*2+1,l,(l+r)/2,x);
    update(a,b,k*2+2,(l+r)/2,r,x);
  }
}

// [a,b)までを探索
int query(int a, int b, int k, int l, int r){
  if(r<=a || b<=l) return INF;
  if(a<=l && r<=b) return D[k];

  else{
    if(D[k]!=INF){
      D[k*2+1]= D[k*2+2] =D[k];
      D[k]=INF;
    }
    int vl, vr;
    vl = query(a, b, k*2+1, l, (l + r)/2);
    vr = query(a, b, k*2+2, (l + r)/2, r);
    return min(vl, vr);
  }
}

// [a,b]までを探索
int find(int a, int b){
    return query(a, b+1, 0, 0, n);
}


int main(){

    cin >> n >> q;

    initRMQ(n);

    for(int i=0; i<q; i++){
        int com;
        cin >> com;
        if(com==0){
            int s, t, x;
            cin >> s >> t >> x;
            update(s, t+1, 0, 0, n, x);

        }else if(com==1){
            int s;
            cin >> s;
            cout << find(s, s) << endl;
        }
    }

    return 0;
}
