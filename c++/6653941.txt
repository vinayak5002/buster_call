#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#define _GLIBCXX_DEBUG
using namespace std;
using std::cout;
using std::cin;
using std::endl;
using ll=long long;
using ld=long double;
ll ILL=2167167167167167167;
const int INF=2100000000;
const ll mod=998244353;
#define rep(i,a) for (ll i=0;i<a;i++)
#define all(p) p.begin(),p.end()
template<class T> using _pq = priority_queue<T, vector<T>, greater<T>>;
template<class T> ll LB(vector<T> &v,T a){return lower_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> ll UB(vector<T> &v,T a){return upper_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> bool chmin(T &a,const T &b){if(a>b){a=b;return 1;}else return 0;}
template<class T> bool chmax(T &a,const T &b){if(a<b){a=b;return 1;}else return 0;}
template<class T> void So(vector<T> &v) {sort(v.begin(),v.end());}
template<class T> void Sore(vector<T> &v) {sort(v.begin(),v.end(),[](T x,T y){return x>y;});}
void yneos(bool a){if(a) cout<<"Yes\n"; else cout<<"No\n";}
template<class T> void vec_out(vector<T> &p){for(int i=0;i<(int)(p.size());i++){if(i) cout<<" ";cout<<p[i];}cout<<"\n";}

namespace po167{
std::vector<std::vector<int>> Lowlink(std::vector<std::vector<int>> &G){
    int n=G.size();
    std::vector<std::vector<int>> p(2,std::vector<int>(n,-1));
    std::vector<int> front(n);
    int k=1;
    std::vector<int> ind(n);
    std::stack<int> s;
    s.push(0);p[0][0]=0,p[1][0]=0;
    while(!s.empty()){
        int a=s.top();
        while(true){
            if(ind[a]==(int)(G[a].size())){
                p[1][front[a]]=std::min(p[1][front[a]],p[1][a]);
                s.pop();
                break;
            }
            int b=G[a][ind[a]];
            ind[a]++;
            if(p[0][b]==-1){
                p[0][b]=k;
                p[1][b]=k;
                front[b]=a;
                k++;
                s.push(b);
                break;
            }
            else if(front[a]!=b){
                if(p[1][a]>p[0][b]) p[1][a]=p[0][b];
            }
        }
    }
    p.push_back(front);
    return p;
}

std::vector<std::pair<int,int>> bridges(std::vector<std::vector<int>> G){
    int n=G.size();
    auto p=Lowlink(G);
    std::vector<std::pair<int,int>> ans;
    for(int i=0;i<n;i++){
        for(int j:G[i]){
            if(p[0][i]<p[0][j]&&p[0][i]<p[1][j]){
                ans.push_back({i,j});
            }
        }
    }
    return ans;
}
//https://onlinejudge.u-aizu.ac.jp/status/users/potato167/submissions/1/GRL_3_A/judge/6651994/C++17
std::vector<int> Articulation_Points(std::vector<std::vector<int>> G){
    int n=G.size();
    auto p=Lowlink(G);
    std::vector<int> ans;
    int tmp=0;
    for(auto x:G[0]){
        if(p[1][x]!=0) tmp++;
    }
    if(tmp>=2) ans.push_back(0);
    for(int i=1;i<n;i++){
        for(int j:G[i]){
            if(i==p[2][j]&&p[0][i]<=p[1][j]){
                ans.push_back(i);
                break;
            }
        }
    }
    return ans;
}
}


void solve();
// oddloop
int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	
	int t=1;
	//cin>>t;
	rep(i,t) solve();
}

void solve(){
	int V,E;
	cin>>V>>E;
	vector<vector<int>> G(V);
	rep(i,E){
		int a,b;
		cin>>a>>b;
		G[a].push_back(b);
		G[b].push_back(a);
	}
	auto B=po167::bridges(G);
	So(B);
	for(auto x:B) cout<<x.first<<" "<<x.second<<"\n";
}

