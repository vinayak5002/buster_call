#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned int ull;
typedef pair<int, int> pil;
const ll ll_INF = 0x3f3f3f3f3f3f3f3f;
const ll ll_MAX = 0x7fffffffffffffff;
const int int_INF = 0x3f3f3f3f;
const int int_MAX = 0x7fffffff;
const double EPS = 1e-7;
const double PI = acos(-1.0);
const int dy[8] = {-1, 0, 1, 0, 1, -1, 1, -1};
const int dx[8] = {0, -1, 0, 1, 1, -1, -1, 1};
#define R register
#define _chmax(a, b) (a = max(a, (b)))
#define _chmin(a, b) (a = min(a, (b)))
#define _abs(a) ((a) > 0 ? (a) : -(a))

inline int fsign(double x) {
    return ((fabs(x) < EPS) ? 0 : ((x < 0) ? -1 : 1));
}
inline ll _r() {
    ll x = 0, f = 1;
    char c = getchar();
    while(c > '9' || c < '0') {
        if(c == '-')
            f = -1;
        c = getchar();
    }
    while(c >= '0' && c <= '9')
        x = (x << 3) + (x << 1) + (c ^ 48), c = getchar();
    return f == -1 ? -x : x;
}

const int MOD = 1e9 + 7;
const int MX = 1000010;
template<typename T>
struct Vector2D {
    T x, y;
    Vector2D() {
        x = y = 0;
    }
    Vector2D(T X, T Y) {
        x = X, y = Y;
    }
    T get_len() {
        return sqrt((double)x * x + y * y);
    }
    Vector2D operator+(const Vector2D& b) const {
        return Vector2D(x + b.x, y + b.y);
    }
    Vector2D operator-(const Vector2D& b) const {
        return Vector2D(x - b.x, y - b.y);
    }
    Vector2D operator*(const double c) const {
        return Vector2D(x * c, y * c);
    }
    Vector2D operator/(const double c) const {
        return Vector2D(x / c, y / c);
    }
    bool operator==(const Vector2D& b) const {
        return fsign(x - b.x) == 0 && fsign(y - b.y) == 0;
    }
    bool operator!=(const Vector2D& b) const {
        return fsign(x - b.x) != 0 || fsign(y - b.y) != 0;
    }
    bool operator<(const Vector2D& b) const {
        if(fsign(x - b.x) == 0)
            return fsign(y - b.y) == -1;
        return fsign(x - b.x) == -1;
    }
    //逆时针旋转theta角
    Vector2D rotate(const double& theta) const {
        Vector2D c;
        c.x = x * cos(theta) - y * sin(theta);
        c.y = y * cos(theta) + x * sin(theta);
        return c;
    }
    //逆时针90度
    Vector2D rotate_inv90() const {
        return Vector2D(-y, x);
    }
    //顺时针90度
    Vector2D rotate_clk90() const {
        return Vector2D(y, -x);
    }
    // 取模的平方
    double norm_square() const {
        return (double)x * x + y * y;
    }
    // 取模
    double norm_sqrt() const {
        return sqrt((double)x * x + y * y);
    }
    //求象限
    friend int quad(const Vector2D<T>& p) {
        return ((p.y < 0) ? 1 : 3) + ((p.x < 0) ^ (p.y < 0));
    }
    //点乘
    friend T dot(const Vector2D<T>& a, const Vector2D<T>& b) {
        return a.x * b.x + a.y * b.y;
    }
    //叉乘
    friend T cross(const Vector2D<T>& a, const Vector2D<T>& b) {
        return a.x * b.y - a.y * b.x;
    }
    //求向量夹角cos
    friend double included_angel(const Vector2D<T>& a, const Vector2D<T>& b) {
        return (dot(a, b)) / (a.norm_sqrt() * b.norm_sqrt());
    }
    //判定两向量关系,<0逆反
    friend int vector_postion(const Vector2D<T>& a, const Vector2D<T>& b) {
        if(fsign(cross(a, b)) == -1)  // a在b的逆时针方向（左侧）
            return -2;
        if(fsign(cross(a, b)) == 1)  // a在b的顺时针方向（右侧）
            return 2;
        if(fsign(dot(a, b)) == -1)  // ab反向
            return -1;
        if(fsign(a.norm_square() - b.norm_square()) == -1)  // ab同向,且b长于a
            return 1;
        else  // ab同向,且b短于a,b在a上
            return 0;
    }
    //判定三点关系(a->b,a->c)
    friend int point_postion(const Vector2D<T>& a, const Vector2D<T>& b, const Vector2D<T>& c) {
        return vector_postion(b - a, c - a);
    }
};
typedef Vector2D<int> Point;
typedef Vector2D<double> Vector2;
//点点式直线
struct Line {
    Vector2 s, t;
    Vector2 normal;  //方向向量
    Line() {
    }
    Line(const Point st, const Point ed) {
        set(st, ed);
    }
    Line(const Vector2 st, const Vector2 ed) {
        set(st, ed);
    }
    void set(const Point a, const Point b) {
        s.x = a.x, s.y = a.y, t.x = b.x, t.y = b.y;
        update_normal();
    }
    void set(const Vector2 a, const Vector2 b) {
        s = a, t = b;
        update_normal();
    }
    void update_normal() {
        normal = t - s;
    }
    bool operator==(Line a) const {
        return same((*this), a);
    }
    bool operator<(Line a) const {
        if(normal != a.normal)
            return normal < a.normal;
        else if(s != a.s)
            return s < a.s;
        return t < a.t;
    }
    friend bool is_vertical(const Line& a, const Line& b) {
        return fsign(dot(a.normal, b.normal)) == 0;
    }
    friend bool is_parallel(const Line& a, const Line& b) {
        return fsign(cross(a.normal, b.normal)) == 0;
    }
    friend bool same(const Line& a, const Line& b) {
        return is_parallel(a, b) && is_parallel(Line(a.s, b.t), Line(b.s, a.t));
    }
    // 求p在直线line上的投影(垂点)
    friend Vector2 projection(Line& line, Vector2& p) {
        double num_t = dot(p - line.s, line.normal) / line.normal.norm_square();
        return line.s + line.normal * num_t;
    }
    // 判定线段是否相交
    friend bool is_corss_seg(Line& a, Line& b) {
        if(point_postion(a.s, a.t, b.s) * point_postion(a.s, a.t, b.t) > 0)
            return 0;
        if(point_postion(b.s, b.t, a.s) * point_postion(b.s, b.t, a.t) > 0)
            return 0;
        return 1;
    }
    // 求线段相交点
    friend Vector2 get_corss_point(Line& a, Line& b) {
        double d1 = fabs(cross(b.normal, a.s - b.s));
        double d2 = fabs(cross(b.normal, a.t - b.t));
        double num_t = d1 / (d1 + d2);
        return a.s + a.normal * num_t;
    }
    // 求点到直线距离
    friend double get_dis_point_line(Line& l, Vector2& p) {
        return fabs(cross(l.normal, p - l.s) / l.normal.norm_sqrt());
    }
    // 求点到线段距离
    friend double get_dis_point_seg(Line& l, Vector2& p) {
        if(fsign(dot(l.normal, p - l.s)) < 0)
            return (p - l.s).norm_sqrt();
        if(fsign(dot(l.normal, p - l.t)) > 0)
            return (p - l.t).norm_sqrt();
        return get_dis_point_line(l, p);
    }
    // 求直线之间的距离
    friend double get_dis_lines(Line& a, Line& b) {
        if(is_corss_seg(a, b))
            return 0;
        return fabs(get_dis_point_line(a, b.t));
    }
    // 求线段之间的距离
    friend double get_dis_segs(Line& a, Line& b) {
        if(is_corss_seg(a, b))
            return 0;
        double dis1 = min(get_dis_point_seg(a, b.s), get_dis_point_seg(a, b.t));
        double dis2 = min(get_dis_point_seg(b, a.s), get_dis_point_seg(b, a.t));
        return min(dis1, dis2);
    }
};
struct Polygon {
    vector<Vector2> poi;
    int point_n;
    void add_point(Vector2 p) {
        poi.push_back(p);
        point_n++;
    }
    void add_point(double x, double y) {
        poi.push_back(Vector2(x, y));
        point_n++;
    }
    void clear() {
        poi.clear();
        point_n = 0;
    }
    //求多边形面积
    double get_S() {
        double res = cross(poi[0], poi[point_n - 1]);
        for(int i = 1; i < point_n; i++) {
            res += cross(poi[i], poi[i - 1]);
        }
        return fabs(res) / 2;
    }
    //判定是否为凸包
    bool is_convex() {
        for(int i = 0; i < point_n; i++) {
            if(point_postion(poi[i], poi[(i + 1) % point_n], poi[(i + 2) % point_n]) == -2)
                return 0;
        }
        return 1;
    }
} poly;
int n;
void Init() {
    poly.clear();
    cin >> n;
    for(int i = 0; i < n; i++) {
        double x, y;
        cin >> x >> y;
        poly.add_point(x, y);
    }
}

void solve() {
    cout << (int)poly.is_convex() << endl;
}
int main() {
    // std::ios::sync_with_stdio(false);
#ifdef LOCAL
    freopen("./Input_data/data.in", "r", stdin);
    freopen("./Output_data/data.out", "w", stdout);
#endif
    int t = 1;
    cout.flags(ios::fixed);
    cout.precision(1);
    while(t--) {
        Init();
        solve();
    }
    return 0;
}
