#include <bits/stdc++.h>
#include <iostream>
using namespace std;

void printVector(vector<int> A)
{
  for (int i = 0; i < A.size(); i++)
  {
    cout << A[i] << " ";
  }
  cout << endl;
}

void merge(vector<long long> &A, int start, int middle, int end, long long &count)
{
  int leftSize = middle - start + 1;
  int rightSize = end - middle + 1;
  vector<long long> left(middle - start + 1);
  vector<long long> right(end - middle + 1);

  for (int i = 0; i < middle - start; i++) {
    left[i] = A[start + i];
  }
  for (int i = 0; i < end - middle; i++) {
    right[i] = A[middle + i];
  }
  left[leftSize - 1] = LLONG_MAX;
  right[rightSize - 1] = LLONG_MAX;

  int i = 0;
  int j = 0;
  for (int k = start; k < end; k++) {
    if (left[i] <= right[j]) {
      A[k] = left[i];
      i++;
    }
    else
    {
      A[k] = right[j];
      count += middle - start - i;
      j++;
    }
  }
}

void countNumberOfInversionsByMerge(vector<long long> &A, int start, int end, long long &count) {
  if (end - start > 1)
  {
    int middle = (start + end) / 2;

    countNumberOfInversionsByMerge(A, start, middle, count);
    countNumberOfInversionsByMerge(A, middle, end, count);
    merge(A, start, middle, end, count);
  }
}

int main()
{
  std::cin.tie(nullptr), std::ios::sync_with_stdio(false);

  int n;
  cin >> n;
  vector<long long> A(n);
  for (int i = 0; i < n; i++)
  {
    cin >> A[i];
  }


  long long count = 0;
  countNumberOfInversionsByMerge(A, 0, A.size(), count);
  cout << count << endl;

  return 0;
}

