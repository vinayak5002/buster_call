#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ull = unsigned long long;
using ld = long double;
using vl = vector<ll>;
template<class T> using vc = vector<T>;
template<class T> using vvc = vector<vector<T>>;

#define eb emplace_back
#define all(x) (x).begin(), (x).end()
#define rep(i, n) for (ll i = 0; i < (n); i++)
#define repr(i, n) for (ll i = (n)-1; i >= 0; i--)
#define repe(i, l, r) for (ll i = (l); i < (r); i++)
#define reper(i, l, r) for (ll i = (r)-1; i >= (l); i--)
#define repa(i,n) for (auto& i: n)

template<class T1, class T2> inline bool chmax(T1 &a, const T2 &b) {if (a<b) { a=b; return 1;} return 0;}
template<class T1, class T2> inline bool chmin(T1 &a, const T2 &b) {if (b<a) { a=b; return 1;} return 0;}

struct init{init(){cin.tie(0);ios::sync_with_stdio(false);cout<<fixed<<setprecision(15);cerr<<fixed<<setprecision(15);}}init_;

template <typename T, typename U> ostream& operator<<(ostream&out,const pair<T, U>&a){return out<<a.first<<' '<<a.second;}
template <typename T> ostream& operator<<(ostream&out, const vector<T>&a){for(auto it=a.begin();it!= a.end();){out<<*it;if(++it!=a.end())out<<' ';}return out;}
template <typename T, size_t N> ostream& operator<<(ostream&out, const array<T, N>&a){for(auto it=a.begin();it!= a.end();){out<<*it;if(++it!=a.end())out<<' ';}return out;}
template <typename T> ostream& operator<<(ostream&out, const set<T>&a){for(auto it=a.begin();it!=a.end();){out<<*it;if(++it!=a.end())out<<' ';}return out;}
template <typename T, typename U> ostream& operator<<(ostream&out, const map<T, U>&a){for(auto it=a.begin();it!=a.end();){out<<*it;if(++it!=a.end())out<<'\n';}return out;}

#ifdef DEBUG
template <class T, class N> void verr(const vector<T>& a, const N& n) { rep(i, n) cerr << a[i] << " "; cerr << endl; }
template <class T, class N, size_t AN> void verr(const array<T, AN>& a, const N& n) { rep(i, n) cerr << a[i] << " "; cerr << endl; }
ll dbgt = 1; void err() { cerr << "passed " << dbgt++ << endl; }
template<class H, class... T> void err(H&& h,T&&... t){ cerr<< h << (sizeof...(t)?" ":"\n") << flush; if(sizeof...(t)>0) err(forward<T>(t)...); }
#else
void err(){}
template <class H, class... T>
void err(H &&h, T &&...t) {}
template <class H, class... T>
void verr(H &&h, T &&...t) {}
#endif

const ll INF = 4e18;
const ld EPS = 1e-11;
const ld PI = acos(-1.0L);
// const ll MOD = 1e9 + 7;
const ll MOD = 998244353;
//--------------------------------------------------------------------------------//
array<int, 4> di = {0, 1, 0, -1}, dj = {1, 0, -1, 0};

struct UnionFind {
private:
    vector<int> par;
    vector<int> count;
    vector<int> rank;
public:
    UnionFind(int N) {
        count.assign(N, 1);
        rank.assign(N, 0);
        par.assign(N, 0);
        rep(i, N) par[i] = i;
    }

    int root(int x) {
        if (par[x] == x)
            return x;
        else {
            par[x] = root(par[x]);
            return par[x];
        }
    }

    void unite(int x, int y) {
        x = root(x), y = root(y);
        if (x == y) return;
        if (rank[x] < rank[y])
            swap(x, y);
        else if (rank[x] == rank[y])
            rank[y]++;
        par[y] = x;
        count[x] += count[y];
        return;
    }

    int size(int x) {
        return count[root(x)];
    }

    bool issame(int x, int y) {
        return root(x) == root(y);
    }
};
using UF = struct UnionFind;


void solve(int H, int W){
    vc<string> C(H);
    rep(i, H) cin >> C[i];
    vvc<int> used(H, vc<int>(W));
    rep(i, H) rep(j, W) {
        if (C[i][j] == '#') used[i][j] = true;
    }

    queue<pair<int, int>> q;
    rep(i, H) rep(j, W) q.emplace(i, j);
    while (!q.empty()) {
        auto [i, j] = q.front();
        q.pop();
        int can = 0, li, lj;
        rep(d, 4) {
            int ti = i + di[d], tj = j + dj[d];
            if (ti < 0 or ti >= H or tj < 0 or tj >= W) continue;
            if (used[ti][tj]) continue;
            can++;
            li = ti, lj = tj;
        }
        if (can == 0) used[i][j] = true;
        if(can == 1) {
            used[i][j] = true;
            q.emplace(li, lj);
        }
    }

    if(used[0][0] or used[0][W - 1] or used[H - 1][0] or used[H - 1][W  - 1]){
        cout << "NO" << endl;
        return;
    }

    UF uf(H * W);
    rep(i, H) rep(j, W) {
        if (used[i][j]) continue;
        rep(d, 2) {
            int ti = i + di[d], tj = j + dj[d];
            if (ti >= H or tj >= W or used[ti][tj]) continue;
            uf.unite(i * W + j, ti * W + tj);
        }
    }

    if(!(uf.issame(0, W - 1) and uf.issame(0, (H - 1) * W) and uf.issame(0, H * W - 1))) {
        cout << "NO" << endl;
        return;
    }

    vvc<int> arrived(H, vc<int>(W));
    int ci = 0, cj = 0, cd = 0;
    auto cango = [&](int i, int j) -> bool {
        if (i < 0 or i >= H or j < 0 or j >= W) return false;
        if (used[i][j]) return false;
        return true;
    };
    do {
        int ld = (cd + 3) % 4;
        int li = ci + di[ld], lj = cj + dj[ld];
        if(cango(li, lj)) {
            ci = li, cj = lj, cd = ld;
            arrived[ci][cj] = true, used[ci][cj] = true;
            continue;
        }
        int fd = cd;
        int fi = ci + di[fd], fj = cj + dj[fd];
        if(cango(fi, fj)) {
            ci = fi, cj = fj, cd = fd;
            arrived[ci][cj] = true, used[ci][cj] = true;
            continue;
        }

        int rd = (cd + 1) % 4;
        int ri = ci + di[rd], rj = cj + dj[rd];
        if(cango(ri, rj)) {
            ci = ri, cj = rj, cd = rd;
            arrived[ci][cj] = true, used[ci][cj] = true;
            continue;
        }

        cout << "NO" << endl;
        return;
    } while (!(ci == 0 and cj == 0));

    if(arrived[0][W - 1] and arrived[H - 1][0] and arrived[H - 1][W - 1]) {
        cout << "YES" << endl;
    }else{
        cout << "NO" << endl;
    }
}

int main() {
    while(true){
        int H, W;
        cin >> H >> W;
        if (H == 0) break;
        solve(H, W);
    }
}
