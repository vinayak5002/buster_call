#include <bits/stdc++.h>
using namespace std;

#ifdef _RUTHEN
#include "debug.hpp"
#else
#define show(...) true
#endif

using ll = long long;
#define rep(i, n) for (int i = 0; i < (n); i++)
template <class T> using V = vector<T>;

void solve(int W, int H) {
    V<V<int>> A(H, V<int>(W));
    rep(i, H) rep(j, W) cin >> A[i][j];
    int sx, sy, gx, gy, cx, cy;
    rep(i, H) rep(j, W) {
        if (A[i][j] == Cargo) {
            cx = i, cy = j;
            A[i][j] = 0;
        }
        if (A[i][j] == Goal) {
            gx = i, gy = j;
            A[i][j] = 0;
        }
        if (A[i][j] == Man) {
            sx = i, sy = j;
            A[i][j] = 0;
        }
    }
    using tp = tuple<int, int, int, int>;
    deque<tp> que;
    const int INF = 1 << 30;
    V<V<V<V<int>>>> dp(H, V<V<V<int>>>(W, V<V<int>>(H, V<int>(W, INF))));
    V<V<V<V<int>>>> seen(H, V<V<V<int>>>(W, V<V<int>>(H, V<int>(W, 0))));
    dp[sx][sy][cx][cy] = 0;
    que.push_back({sx, sy, cx, cy});
    while (!que.empty()) {
        auto [px, py, cx, cy] = que.front();
        que.pop_front();
        if (cx == gx && cy == gy) {
            cout << dp[px][py][cx][cy] << '\n';
            return;
        }
        if (seen[px][py][cx][cy]) continue;
        seen[px][py][cx][cy] = 1;
        rep(k, 4) {
            int npx = px + dx[k], npy = py + dy[k];
            if (!(0 <= npx && npx < H && 0 <= npy && npy < W)) continue;
            // push cargo
            if (npx == cx && npy == cy) {
                int ncx = cx + dx[k], ncy = cy + dy[k];
                if (!(0 <= ncx && ncx < H && 0 <= ncy && ncy < W)) continue;
                if (A[ncx][ncy] != 0) continue;
                dp[npx][npy][ncx][ncy] = dp[px][py][cx][cy] + 1;
                que.push_back({npx, npy, ncx, ncy});
            } else {
                if (A[npx][npy] != 0) continue;
                dp[npx][npy][cx][cy] = dp[px][py][cx][cy];
                que.push_front({npx, npy, cx, cy});
            }
        }
    }
    cout << -1 << '\n';
    return;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int H, W;
    while (cin >> H >> W, !(H == 0 && W == 0)) solve(H, W);
    return 0;
}

