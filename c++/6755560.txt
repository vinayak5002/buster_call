#include <bits/stdc++.h>
using namespace std;
using Table = vector<vector<int>>;
typedef long long ll;
const double PI = acos(-1.0);
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

bool is_3_or_more(const Table &table, int i, int &num)
{
    int cnt[10] = {};
    for (int j=0; j<5; j++)
        ++cnt[table[i][j]];
    int max_cnt = 0;
    for (int i=1; i<10; i++) {
        if (max_cnt < cnt[i]) {
            max_cnt = cnt[i];
            num = i;
        }
    }
    if (max_cnt >= 3)
        return true;
    return false;
}


int clear(int H, Table &table)
{
    int score = 0;
    for (int i=0; i<H; i++) {
        int num = 0;
        if (!is_3_or_more(table, i, num))
            continue;
        for (int j=0; j<5; j++) {
            int cnt = 0;
            int k;
            while ((k = j + cnt) < 5 && table[i][k] == num)
                cnt++;
            if (cnt < 3)
                continue;
            score += num * cnt;
            for (k=j; k<j+cnt; k++) 
                table[i][k] = 0;
        }
    }
    return score;
}


void fall(int H, Table &table)
{
    for (int j=0; j<5; j++) {
        int k = H-1;
        for (int i=H-1; i>=0; --i) {
            if (table[i][j] == 0)
                continue;
            table[k][j] = table[i][j];
            --k;
        }
        for ( ; k>=0; --k)
            table[k][j] = 0;
    }
}


int main()
{
    int H;
    while (cin >> H) {
        if (H == 0)
            return 0;
        Table table(H, vector<int>(5));
        for (int i=0; i<H; i++) {
            for (int j=0; j<5; j++)
                cin >> table[i][j];
        }
        int score = 0;
        int tmp = -1;
        while (tmp != 0) {
            tmp = clear(H, table);
            fall(H, table);
            score += tmp;
        }
        cout << score << endl;
    }
}
