#include<stdio.h>

#define MAX 100005
#define NIL -1

typedef struct {
	int p;
	int l;
	int r;
}Node;

Node T[MAX];

int H[MAX];

//深さ探索//
int rec( Node node )
{
	if( node.p == NIL )
	{
		return 0;
	}
	
	return rec(T[node.p]) + 1;
}

int max( int x, int y )
{
	if( x>y )
	{
		return x;
	}
	
	return y;
}

int setHeight( int id )
{
	int h1 = 0;
	int h2 = 0;
	
	if( T[id].r != NIL )
	{
		h1 = setHeight( T[id].r ) + 1;
	}
	if( T[id].l != NIL )
	{
		h2  = setHeight( T[id].l ) + 1;
	}
	
	return max( h1, h2 );
}


void print( int id )
{
	int i, c;
	int k=0;
	
	printf( "node %d: ", id );
	printf( "parent = %d, ", T[id].p );
	
	//兄弟の判定//
	if( T[T[id].p].r != id )
	{
		printf( "sibling = %d, ", T[T[id].p].r );
	}
	else if( T[T[id].p].l !=id )
	{
		printf( "sibling = %d, ", T[T[id].p].l );
	}
	else
	{
		printf( "sibling = %d, ", NIL );
	}
	
	//子の数//
	if( T[id].l !=NIL )
	{
		k++;
	}
	if( T[id].r != NIL )
	{
		k++;
	}
	
	printf( "degree = %d, ", k);
	
	printf( "depth = %d, ", rec(T[id]) );
	
	printf( "height = %d, ", setHeight( id ) );
	
	if( T[id].p == NIL )
	{
		printf( "root" );
	}
	else if( T[id].l == NIL )
	{
		printf( "leaf" );
	}
	else
	{
		printf( "internal node" );
	}
	printf( "\n" );
	
}	

int main( void )
{
	int n, l, r, i, id;
	
	scanf( "%d", &n );
	
	for( i=0; i<n; i++ )
	{
		T[i].p = NIL;
		T[i].l = NIL;
		T[i].r = NIL;
	}
	
	for( i=0; i<n; i++ )
	{
		scanf( "%d %d %d",&id, &l, &r );
		
		T[id].l = l;
		T[id].r = r;
		
		T[l].p=id;
		T[r].p=id;	
	}
	
		
	for( i = 0; i < n; i++ )
	{
		print(i);
	}
	
	return 0;
}

