#include <iostream>
#include <queue>
#include <vector>

int main() {
    using Edge = std::pair<int, int>;
    using State = std::pair<long long, int>;

    constexpr long long INF = 100100100100100100;

    int v_size, e_size, r;
    std::cin >> v_size >> e_size >> r;
    std::vector edges(v_size, std::vector<Edge>());
    for (int i = 0; i < e_size; ++i) {
        int s, t, d;
        std::cin >> s >> t >> d;
        edges[s].emplace_back(t, d);
    }

    std::vector<long long> weights(v_size, INF);
    weights[r] = 0;
    std::priority_queue<State, std::vector<State>, std::greater<State>> que;
    que.emplace(0, r);
    while (que.size()) {
        auto [w, v] = que.top();
        que.pop();
        if (w != weights[v]) continue;
        for (auto [nv, d] : edges[v]) {
            if (weights[nv] <= weights[v] + d) continue;
            weights[nv] = weights[v] + d;
            que.emplace(weights[nv], nv);
        }
    }

    for (auto w : weights) {
        if (w == INF) {
            std::cout << "INF" << std::endl;
            continue;
        }
        std::cout << w << std::endl;
    }

    return 0;
}

