#include <iostream>
#include <vector>
using namespace std;
using ll = long long;

struct LazySegmentTree {
  int n;
  vector<ll>node, lazy;

  LazySegmentTree(vector<ll> vec) {
    int siz = vec.size();
    n = 1;
    while (n < siz)
      n *= 2;
    node.assign(2 * n - 1, 0);
    for (int i = 0; i < siz; i++)
      node.at(i + n - 1) = vec.at(i);
    for (int i = n - 2; i >= 0; i--)
      node.at(i) = node.at(i * 2 + 1) + node.at(i * 2 + 2);
    lazy.assign(2 * n - 1, 0);
  }

  void eval(int k) {
    if (lazy.at(k) == 0)
      return;
    node.at(k) += lazy.at(k);
    if (k < n - 1) {
      lazy.at(k * 2 + 1) += lazy.at(k) / 2;
      lazy.at(k * 2 + 2) += lazy.at(k) / 2;
    }
    lazy.at(k) = 0;
  }

  void add(int a, int b, ll x, int k = 0, int l = 0, int r = -1) {
    if (r < 0)
      r = n;
    eval(k);
    if (a >= r || b <= l)
      return;
    if (a <= l && b >= r) {
      lazy.at(k) += (ll)(r - l) * x;
      eval(k);
      return;
    }
    else {
      add(a, b, x, 2 * k + 1, l, (r + l) / 2);
      add(a, b, x, 2 * k + 2, (r + l) / 2, r);
      node.at(k) = node.at(k * 2 + 1) + node.at(k * 2 + 2);
      return;
    }
  }

  ll getsum(int a, int b, int k = 0, int l = 0, int r = -1) {
    eval(k);
    if (r < 0)
      r = n;
    if (a >= r || b <= l)
      return 0;
    else if (a <= l && b >= r)
      return node.at(k);
    else {
      ll v1 = getsum(a, b, k * 2 + 1, l, (r + l) / 2);
      ll v2 = getsum(a, b, k * 2 + 2, (r + l) / 2, r);
      return v1 + v2;
    }
  }
  
};

int main() {
  int n, q;
  cin >> n >> q;
  vector<ll> vec;
  vec.assign(n, 0);
  LazySegmentTree lst(vec);
  for (int i = 0; i < q; i++) {
    int c, s, t;
    cin >> c >> s >> t;
    s--;
    if (c == 0) {
      ll x;
      cin >> x;
      lst.add(s, t, x);
    }
    else 
      cout << lst.getsum(s, t) << endl;
  }
}
