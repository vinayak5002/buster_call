#include <bits/stdc++.h>
using namespace std ;
#define MAX 100001
#define NIL -2000000002
#define MAXN 50
int n;
const long long int infty = (1LL<<31) - 1;
long long int A[MAX];

//セグメントツリーで実装し直します。
/* RMQ：[0,n-1] について、区間ごとの最小値を管理する構造体
    update(i,x): i 番目の要素を x に更新。O(log(n))
    query(a,b): [a,b) での最小の要素を取得。O(log(n))
*/
template <typename T>
struct RMQ {
    const T INF = numeric_limits<T>::max();
    int n;         // 葉の数
    vector<T> dat; // 完全二分木の配列
    vector<T> lazy; // 完全二分木の配列
    
    RMQ(int n_) : n(), dat(n_ * 4, 0), lazy(n_ * 4, 0) { // 葉の数は 2^x の形
        int x = 1;
        while (n_ > x) {
            x *= 2;
        }
        n = x;
    }

    void update(int i, T x) {
        i += n-1 ;  // i番目は、配列上では n-1+i 番目に格納されている
        dat[i] += x;
        // printf("upd %d : %d", i, dat[i]);
        while (i > 0) {
            i = (i - 1) / 2;  // parent
            dat[i] = dat[i * 2 + 1] + dat[i * 2 + 2] ;
        }
    }
  
    // k 番目のノードについて遅延評価を行う
    void eval(int k, int l, int r) {

        // 遅延配列が空でない場合、自ノード及び子ノードへの
        // 値の伝播が起こる
        if(lazy[k] != 0) {
            dat[k] += lazy[k];

            // 最下段かどうかのチェックをしよう
            // 子ノードは親ノードの 1/2 の範囲であるため、
            // 伝播させるときは半分にする
            if(r - l > 1) {
                lazy[2*k+1] += lazy[k] / 2;
                lazy[2*k+2] += lazy[k] / 2;
            }

            // 伝播が終わったので、自ノードの遅延配列を空にする
            lazy[k] = 0;
        }
    }

    void add(int a, int b, long long int x, int k=0, int l=0, int r=-1) {
        // aからbまでの部分にxを加算する。k, l, rは上と同じ。
        if(r < 0) r = n;

        // k 番目のノードに対して遅延評価を行う
        eval(k, l, r);

        // 範囲外なら何もしない
        if(b <= l || r <= a) return;
        
        // 完全に被覆しているならば、遅延配列に値を入れた後に評価
        if(a <= l && r <= b) {
            lazy[k] += (r - l) * x;
            eval(k, l, r);
        }

        // そうでないならば、子ノードの値を再帰的に計算して、
        // 計算済みの値をもらってくる
        else {
            add(a, b, x, 2*k+1, l, (l+r)/2);
            add(a, b, x, 2*k+2, (l+r)/2, r);
            dat[k] = dat[2*k+1] + dat[2*k+2];
        }
    }


    T query(int a, int b) { return query_sub(a, b, 0, 0, n); }
    T query_sub(int a, int b, int k, int l, int r) {
        eval(k,l,r);
        if (r <= a || b <= l) {
            return 0;
        } else if (a <= l && r <= b) {
            return dat[k];
        } else {
            T vl = query_sub(a, b, k * 2 + 1, l, (l + r) / 2);
            T vr = query_sub(a, b, k * 2 + 2, (l + r) / 2, r);
            return vl + vr;
        }
    }
};

int main() {
    int q = 0;
    cin >> n >> q ;
    n++;
    RMQ<int> R(n);
    // この問題では、0にダミーがないとうまく動かない
    // nは登場人物の人数、qはクエリ（命令）の個数
    // この時点でn個のノードが成立している。
    for (int i = 0 ; i < q ; i++ ) {
        int a , b, c ,com ;
        cin >> com ;

        if (com == 0) { 
            cin >> a >> b  ; 
            //printf("update %d %d\n",a,b);
            R.update(a, b);
            //printf ("%d\n", R.dat[2]);
        } else if (com == 1)  {
            cin >> a >> b  ;
            //printf("findmin %d %d\n",a,b);
            int ans = R.query(a, b+1) ; 
            printf("%d\n", ans);
        }
    }    
	return 0 ;
}


/*
Range Sum Query
数列 A = {a1,a2,..., an} に対し、次の２つの操作を行うプログラムを作成せよ。

add(i,x): aiにxを加算する。
getSum(s,t): as,as+1,...,atの合計値を出力する。
ただし、ai (i=1,2,...,n)は、0 で初期化されているものとする。

入力
n q
com1 x1 y1
com2 x2 y2
...
comq xq yq
１行目にAの要素数n, クエリの数qが与えられる。続くq行にクエリが与えられる。comは、クエリの種類を示し、'0'がadd(xi,yi)、'1'がgetSum(xi,yi)を表す。

出力
各getSumクエリについて、合計値を１行に出力せよ。

制約
1≤n≤100000
1≤q≤100000
comiが0のとき、1≤xi≤n, 0≤yi≤1000
comiが1のとき、1≤xi≤n, 1≤yi≤n


*/
