#include <bits/stdc++.h>

using namespace std;

using P = pair<int, int>;
using VP = vector<P>;

// 深さ優先探索
bool dfs(const VP& stars, const VP& photo, const P& offset, int now) {
    if (now >= (int)stars.size()) return true;
    P x = make_pair(stars[now].first + offset.first,
                    stars[now].second + offset.second);
    // めぐる式二分探索
    int left = -1;
    int right = (int)photo.size();
    while (right - left > 1) {
        int mid = (left + right) / 2;
        if (photo[mid] == x) {
            return dfs(stars, photo, offset, now + 1);
        } else if (photo[mid] > x) {
            right = mid;
        } else {
            left = mid;
        }
    }
    return false;
}
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    while (true) {
        int m, n;
        cin >> m;
        if (m == 0) break;
        VP stars(m);
        for (int i = 0; i < m; ++i) {
            int x, y;
            cin >> x >> y;
            stars[i] = make_pair(x, y);
        }
        cin >> n;
        VP photo(n);
        for (int i = 0; i < n; ++i) {
            int x, y;
            cin >> x >> y;
            photo[i] = make_pair(x, y);
        }
        sort(stars.begin(), stars.end());
        sort(photo.begin(), photo.end());

        for (int i = 0; i < n; ++i) {
            // 平行移動の量
            P offset = make_pair(photo[i].first - stars[0].first,
                                 photo[i].second - stars[0].second);
            if (dfs(stars, photo, offset, 1)) {
                cout << offset.first << " " << offset.second << endl;
                break;
            }
        }
    }
    return 0;
}

