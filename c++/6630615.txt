#include <bits/stdc++.h>

using namespace std;

const double eps =1e-8;
const double inf =1e20;
const double pi=acos(-1.0);
const int maxp=1010;

int sgn(double x){
    if(fabs(x)<eps) return 0;
    if(x<0) return -1;
    else return 1;
}

inline double sqr(double x){return x*x;}

struct Point{
    double x,y;
    Point(){}
    Point(double _x,double _y){
        x=_x;
        y=_y;
    }
    void input(){
        scanf("%lf %lf",&x,&y);
    }
    void output(){
        printf("%.2lf %.2lf",x,y);
    }
    bool operator == (Point b)const{
        return sgn(x-b.x)==0&&sgn(y-b.y)==0;
    }
    bool operator < (Point b)const{
        return sgn(x-b.x)==0?sgn(y-b.y)<0:x<b.x;
    }
    Point operator - (const Point &b)const{
        return Point(x-b.x,y-b.y);
    }
    double operator ^(const Point &b)const{//叉积
        return x*b.y-y*b.x;
    }
    double operator *(const Point &b)const{//点积
        return x*b.x+y*b.y;
    }
    double len(){
        return hypot(x,y);
    }
    double len2(){
        return x*x+y*y;
    }
    double dist(Point p){
        return hypot(x-p.x,y-p.y);
    }
    Point operator +(const Point &b)const{
        return Point(x+b.x,y+b.y);
    }
    Point operator *(const double &k)const{
        return Point(x*k,y*k);
    }
    Point operator /(const double &k)const {
        return Point(x/k,y/k);
    }
    double rad(Point a,Point b){
        Point p=*this;
        return fabs(atan2(fabs((a-p)^(b-p)),(a-p)*(b-p)));
    }
    Point trunc(double r){//化为长度为r的向量
        double l=len();
        if(!sgn(l)) return *this;
        r/=l;
        return Point(x*r,y*r);
    }
    Point rotleft(){//逆时针转90度
        return Point(-y,x);
    }
    Point rotright(){//顺时针转90度
        return Point(y,-x);
    }
    Point rotate(Point p,double angle){
        Point v=(*this)-p;
        double c=cos(angle),s=sin(angle);
        return Point(p.x+v.x*c-v.y*s,p.y+v.x*s+v.y*c);
    }
};

struct Line{
    Point s,e;
    Line(){}
    Line (Point _s,Point _e){
        s=_s;
        e=_e;
    }
    bool operator ==(Line v){
        return (s==v.s)&&(e==v.e);
    }
    Line(Point p,double angle){//根据一个点和倾角确定直线，0<=angle<pi
        s=p;
        if(sgn(angle-pi/2)==0){
            e=(s+Point(0,1));
        }
        else{
            e=(s+Point(1,tan(angle)));
        }
    }
    Line(double a,double b,double c){//ax+by+c==0
        if(sgn(a)==0){
            s=Point(0,-c/b);
            e=Point(1,-c/b);
        }
        else if(sgn(b)==0){
            s=Point(-c/a,0);
            e=Point(-c/a,1);
        }
        else if(sgn(c)==0){
            s=Point(-c/b,0);
            e=Point(1,(-c-a)/b);
        }
    }
    void input(){
        s.input();
        e.input();
    }
    void adjust(){
        if(e<s) swap(s,e);
    }
    double length(){//求线段长度
        return s.dist(e);
    }
    double angle(){//求直线倾斜角
        double k=atan2(e.y-s.y,e.x-s.x);
        if(sgn(k)<0) k+=pi;
        if(sgn(k-pi)==0) k-=pi;
        return k;
    }
    int relation(Point p){
        int c=sgn((p-s)^(e-s));
        if(c<0) return 1;//在左侧
        else if(c>0) return 2;//在右侧
        else return 3;//在直线上
    }
    bool pointonseg(Point p){//判断点在线段上
        return sgn((p-s)^(e-s))==0&&sgn((p-s)*(p-e))<=0;
    }
    bool parallel(Line v){//两向量平行（对应直线平行或重合）
        return sgn((e-s)^(v.e-v.s))==0;
    }
    int segcrossseg(Line v){//判断线段相交
        int d1=sgn((e-s)^(v.s-s));
        int d2=sgn((e-s)^(v.e-s));
        int d3=sgn((v.e-v.s)^(s-v.s));
        int d4=sgn((v.e-v.s)^(e-v.s));
        if((d1^d2)==-2&&(d3^d4)==-2) return 2;//规范相交
        return (d1==0 && sgn((v.s-s)*(v.s-e))<=0)||
            (d2==0 && sgn((v.e-s)*(v.e-e))<=0)||
            (d3==0 && sgn((s-v.s)*(s-v.e))<=0)||
            (d4==0 && sgn((e-v.s)*(e-v.e))<=0);
            //返回1非规范相交，返回0不相交
    }
    int linecrossseg(Line v){//判断直线与线段相交
        int d1=sgn((e-s)^(v.s-s));
        int d2=sgn((e-s)^(v.e-s));
        if((d1^d2)==-2) return 2;//规范相交
        return (d1==0||d2==0);//返回1非规范相交，返回0不相交
    }
    int linecrossline(Line v){//判断两直线关系
        if((*this).parallel(v)) return v.relation(s)==3;
        return 2;//相交
        //返回0平行，返回1重合
    }
    Point crosspoint(Line v){//两直线交点
        double a1=(v.e-v.s)^(s-v.s);
        double a2=(v.e-v.s)^(e-v.s);
        return Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));
    }
    double dispointtoline(Point p){//点到直线距离
        return fabs((p-s)^(e-s))/length();
    }
    double dispointtoseg(Point p){//点到线段距离
        if(sgn((p-s)*(e-s))<0||sgn((p-e)*(s-e))<0){
            return min(p.dist(s),p.dist(e));
        }
        return dispointtoline(p);
    }
    double dissegtoseg(Line v){//线段到线段距离（相交为0）
        if(segcrossseg(v)!=0) return 0;
        return min(min(dispointtoseg(v.s), dispointtoseg(v.e)),min(v.dispointtoseg(s),v.dispointtoseg(e)));
    }
    Point lineprog(Point p){//p在直线上投影
        return s+(((e-s)*((e-s)*(p-s)))/((e-s).len2()));
    }
    Point symmetrypoint(Point p){
        Point q=lineprog(p);
        return Point(2*q.x-p.x,2*q.y-p.y);
    }
};

struct circle{
    Point p;
    double r;
    circle(){}
    circle(Point _p,double _r){
        p=_p;
        r=_r;
    }
    circle(double x,double y,double _r){
        p=Point(x,y);
        r=_r;
    }
    circle(Point a,Point b,Point c){//三角形外接圆，利用两边中垂线得到圆心
        Line u=Line((a+b)/2,((a+b)/2)+((b-a).rotleft()));
        Line v=Line((b+c)/2,((c+b)/2)+((c-b).rotleft()));
        p=u.crosspoint(v);
        r=p.dist(a);
    }
    circle(Point a,Point b,Point c,bool t){//三角形内切圆，t无用，只是区别于三角形外接圆
        Line u,v;
        double m=atan2(b.y-a.y,b.x-a.x),n=atan2(c.y-a.y,c.x-a.x);
        u.s=a;
        u.e=u.s+Point (cos((n+m)/2),sin((n+m)/2));
        v.s=b;
        m=atan2(a.y-b.y,a.x-b.x),n=atan2(a.y-c.y,a.x-c.x);
        v.e=v.s+Point (cos((n+m)/2),sin((n+m)/2));
        p=u.crosspoint(v);
        r=Line(a,b).dispointtoseg(p);
    }
    void input(){
        p.input();
        scanf("%lf",&r);
    }
    bool operator ==(circle v){
        return (p==v.p)&&sgn(r-v.r)==0;
    }
    bool operator <(circle v)const{
        return ((p<v.p)||((p==v.p)&&sgn(r-v.r)<0));
    }
    double area(){
        return pi*r*r;
    }
    double circumference(){
        return 2*pi*r;
    };
    int relation(Point b){
        double dis=b.dist(p);
        if(sgn(dis-r)<0) return 2;//圆内
        else if(sgn(dis-r)==0) return 1;//圆上
        return 0;//圆外
    }
    int relationseg(Line v){
        double dis=v.dispointtoseg(p);
        if(sgn(dis-r)<0) return 2;//圆内
        else if(sgn(dis-r)==0) return 1;//圆上
        return 0;//圆外
    }
    int relationline(Line v){
        double dis=v.dispointtoline(p);
        if(sgn(dis-r)<0) return 2;//圆内
        else if(sgn(dis-r)==0) return 1;//圆上
        return 0;//圆外
    }
    int relationcircle(circle v){
        double d=p.dist(v.p);
        if(sgn(d-r-v.r)>0) return 5;//相离
        if(sgn(d-r-v.r)==0) return 4;//外切
        double l=fabs(r-v.r);
        if(sgn(d-r-v.r)<0&&sgn(d-l)>0) return 3;//相交
        if(sgn(d-l)==0) return 2;//内切
        if(sgn(d-l)<0) return 1;//内含
    }
    int pointcrosscircle(circle v,Point &p1,Point &p2){
        int rel= relationcircle(v);
        if(rel==1||rel==5) return 0;//没有交点
        double d=p.dist(v.p);
        double l=(d*d+r*r-v.r*v.r)/(2*d);
        double h=sqrt(r*r-l*l);
        Point tmp=p+(v.p-p).trunc(l);
        p1=tmp+((v.p-p).rotleft().trunc(h));
        p2=tmp+((v.p-p).rotright().trunc(h));
        if(rel==2||rel==4) return 1;//一个交点
        return 2;//两个交点
    }
    int pointcrossline(Line v,Point &p1,Point &p2){//直线与圆的交点并返回交点个数
        if(!(*this).relationline(v)) return 0;
        Point a=v.lineprog(p);
        double d=v.dispointtoline(p);
        d=sqrt(r*r-d*d);
        if(sgn(d)==0){
            p1=a;
            p2=a;
            return 1;
        }
        p1=a+(v.e-v.s).trunc(d);
        p2=a-(v.e-v.s).trunc(d);
        return 2;
    }
    int getcircle(Point a,Point b,double r1,circle &c1,circle &c2){//得到过a，b两点半径为r1的两个圆
        circle x(a,r1),y(b,r1);
        int t=x.pointcrosscircle(y,c1.p,c2.p);
        if(!t) return 0;
        c1.r=c2.r=r;
        return t;
    }
    int getcircle(Line u,Point q,double r1,circle &c1,circle &c2){//得到与直线u相切，过点q，半径为r1的圆
        double dis=u.dispointtoline(q);
        if(sgn(dis-r1*2)>0) return 0;
        if(sgn(dis)==0){
            c1.p=q+((u.e-u.s).rotleft().trunc(r1));
            c2.p=q+((u.e-u.s).rotright().trunc(r1));
            c1.r=c2.r=r;
            return 2;
        }
        Line u1=Line((u.s+(u.e-u.s).rotleft().trunc(r1)),(u.e+(u.e-u.s).rotleft().trunc(r1)));
        Line u2=Line((u.s+(u.e-u.s).rotright().trunc(r1)),(u.e+(u.e-u.s).rotright().trunc(r1)));
        circle cc=circle(q,r1);
        Point p1,p2;
        if(!cc.pointcrossline(u1,p1,p2)) cc.pointcrossline(u2,p1,p2);
        c1=circle(p1,r1);
        if(p1==p2){
            c2=c1;
            return 1;
        }
        c2=circle(p2,r1);
        return 2;
    }
    int getcircle(Line u,Line v,double r1,circle &c1,circle &c2,circle &c3,circle &c4){//同时与直线u，v相切，半径为r1的圆
        if(u.parallel(v)) return 0;//两直线平行
        Line u1=Line(u.s+(u.e-u.s).rotleft().trunc(r1),u.e+(u.e-u.s).rotleft().trunc(r1));
        Line u2=Line(u.s+(u.e-u.s).rotright().trunc(r1),u.e+(u.e-u.s).rotright().trunc(r1));
        Line v1=Line(v.s+(v.e-v.s).rotleft().trunc(r1),v.e+(v.e-v.s).rotleft().trunc(r1));
        Line v2=Line(v.s+(v.e-v.s).rotright().trunc(r1),v.e+(v.e-v.s).rotright().trunc(r1));
        c1.r=c2.r=c3.r=c4.r=r;
        c1.p=u1.crosspoint(v1);
        c2.p=u1.crosspoint(v2);
        c3.p=u2.crosspoint(v1);
        c4.p=u2.crosspoint(v2);
        return 4;
    }
    int getcircle(circle cx,circle cy,double r1,circle &c1,circle &c2){//同时与不相交圆cx，cy相切，半径为r1的圆
        circle x(cx.p,r1+cx.r),y(cy.p,r1+cy.r);
        int t=x.pointcrosscircle(y,c1.p,c2.p);
        if(!t) return 0;
        c1.r=c2.r=r;
        return t;
    }
    int tangetline(Point q,Line &u,Line &v){//过一点作圆的切线
        int x=relation(q);
        if(x==2) return 0;
        if(x==1){
            u=Line(q,q+(q-p).rotleft());
            v=u;
            return 1;
        }
        double d=p.dist(q);
        double l=r*r/d;
        double h=sqrt(r*r-l*l);
        u=Line(q,p+((q-p).trunc(l)+(q-p).rotleft().trunc(h)));
        v=Line(q,p+((q-p).trunc(l)+(q-p).rotright().trunc(h)));
        return 2;
    }
    double areacircle(circle v){//两圆相交的面积
        int rel= relationcircle(v);
        if(rel>=4) return 0.0;
        if(rel<=2) return min(area(),v.area());
        double d=p.dist(v.p);
        double hf=(r+v.r+d)/2.0;
        double ss=2*sqrt(hf*(hf-r)*(hf-v.r)*(hf-d));
        double a1=acos((r*r+d*d-v.r*v.r)/(2.0*r*d));
        a1=a1*r*r;
        double a2=acos((v.r*v.r+d*d-r*r)/(2.0*v.r*d));
        a2=a2*r*r;
        return a1+a2-ss;
    }
    double areatriangle(Point a,Point b){
        if(sgn((p-a)^(p-b))==0) return 0.0;
        Point q[5];
        int len=0;
        q[len++]=a;
        Line l(a,b);
        Point p1,p2;
        if(pointcrossline(l,q[1],q[2])==2){
            if(sgn((a-q[1])*(b-q[1]))<0) q[len++]=q[1];
            if(sgn((a-q[2])*(b-q[2]))<0) q[len++]=q[2];
        }
        q[len++]=b;
        if(len==4&&sgn((q[0]-q[1])*(q[2]-q[1]))>0) swap(q[1],q[2]);
        double res=0;
        for(int i=0;i<len-1;i++){
            if(relation(q[i])==0||relation(q[i+1])==0){
                double arg=p.rad(q[i],q[i+1]);
                res+=r*r*arg/2.0;
            }
            else{
                res+=fabs((q[i]-p)^(q[i+1]-p))/2.0;
            }
        }
        return res;
    }
};

struct polygon{
    int n;
    Point p[maxp];
    Line l[maxp];
    void input(int _n){
        n=_n;
        for(int i=0;i<n;i++){
            p[i].input();
        }
    }
    void add(Point q){
        p[n++]=q;
    }
    void getline(){
        for(int i=0;i<n;i++){
            l[i]=Line(p[i],p[i+1%n]);
        }
    }
    struct cmp{
        Point p;
        cmp(const Point &p0){p=p0;}
        bool operator()(const Point &aa,const Point &bb){
            Point a=aa,b=bb;
            int d=sgn((a-p)^(b-p));
            if(d==0){
                return sgn(a.dist(p)-b.dist(p))<0;
            }
            return d>0;
        }
    };
    void norm(){//极角排序
        Point mi=p[0];
        for(int i=1;i<n;i++){
            mi=min(mi,p[i]);
        }
        sort(p,p+n,cmp(mi));
    }
    void getconvex(polygon &convex){//得到凸包（0~n-1）
        sort(p,p+n);
        convex.n=n;
        for(int i=0;i<min(n,2);i++){
            convex.p[i]=p[i];
        }
        if(convex.n==2&&(convex.p[0]==convex.p[1])) convex.n--;
        if(n<=2) return ;
        int &top=convex.n;
        top=1;
        for(int i=2;i<n;i++){
            while(top&&sgn((convex.p[top]-p[i])^(convex.p[top-1]-p[i]))<=0){
                top--;
            }
            convex.p[++top]=p[i];
        }
        int tmp=top;
        convex.p[++top]=p[n-2];
        for(int i=n-3;i>=0;i--){
            while(top!=tmp&&sgn((convex.p[top]-p[i])^(convex.p[top-1]-p[i]))<=0){
                top--;
            }
            convex.p[++top]=p[i];
        }
        if(convex.n==2&&(convex.p[0]==convex.p[1])){
            convex.n--;
        }
        convex.norm();
    }
    void Graham(polygon &convex){//另一种得到凸包
        norm();
        int &top=convex.n;
        top=0;
        if(n==1){
            convex.p[0]=p[0];
            return ;
        }
        if(n==2){
            top=2;
            convex.p[0]=p[0];
            convex.p[1]=p[1];
            if(convex.p[0]==convex.p[1]) top--;
            return ;
        }
        convex.p[0]=p[0];
        convex.p[1]=p[1];
        top=2;
        for(int i=2;i<n;i++){
            while(top>1&&sgn((convex.p[top-1]-convex.p[top-2])^(p[i]-convex.p[top-2]))<=0){
                top--;
            }
            convex.p[top++]=p[i];
        }
        if(convex.n==2&&(convex.p[0]==convex.p[1])){
            convex.n--;
        }
    }
    int isconvex(){
        int s[2];
        memset(s,0,sizeof(s));
        for(int i=0;i<n;i++){
            int j=(i+1)%n;
            int k=(j+1)%n;
            s[sgn((p[j]-p[i])^(p[k]-p[i]))+1]=1;
            if(s[0]&&s[2]) return 0;
        }

        return 1;
    }
    int relationpoint(Point q){//判断点和任意多边形的关系
        for(int i=0;i<n;i++){
            if(p[i]==q) return 3;//点上
        }
        getline();
        for(int i=0;i<n;i++){
            if(l[i].pointonseg(q)) return 2;//边上
        }
        int cnt=0;
        for(int i=0;i<n;i++){
            int j=(i+1)%n;
            int k=sgn((q-p[j])^(p[i]-p[j]));
            int u=sgn(p[i].y-q.y);
            int v=sgn(p[j].y-q.y);
            if(k>0&&u<0&&v>=0) cnt++;
            if(k<0&&v<0&&u>=0) cnt--;
        }
        return cnt!=0;//1 内部，0 外部
    }
    void convexcut(Line u,polygon &po){//直线u切割凸多边形左侧
        int &top=po.n;
        top=0;
        for(int i=0;i<n;i++){
            int d1=sgn((u.e-u.s)^(p[i]-u.s));
            int d2=sgn((u.e-u.s)^(p[(i+1)%n]-u.s));
            if(d1>=0) po.p[top++]=p[i];
            if(d1*d2<0) po.p[top++]=u.crosspoint(Line(p[i],p[(i+1)%n]));
        }
    }
    double getcircumference(){//周长
        double sum=0;
        for(int i=0;i<n;i++){
            sum+=p[i].dist(p[(i+1)%n]);
        }
        return sum;
    }
    double getarea(){//面积
        double sum=0;
        for(int i=0;i<n;i++){
            sum+=(p[i]^p[(i+1)%n]);
        }
        return fabs(sum)/2;
    }
    bool getdir(){
        double sum=0;
        for(int i=0;i<n;i++){
            sum+=(p[i]^p[(i+1)%n]);
        }
        if(sgn(sum)>0) return 1;//逆时针
        return 0;//顺时针
    }
    Point getbarycentre(){//重心
        Point ret(0,0);
        double area=0;
        for(int i=1;i<n-1;i++){
            double tmp=(p[i]-p[0])^(p[i+1]-p[0]);
            if(sgn(tmp)==0) continue;
            area+=tmp;
            ret.x+=(p[0].x+p[i].x+p[i+1].x)/3*tmp;
            ret.y+=(p[0].y+p[i].y+p[i+1].y)/3*tmp;
        }
        if(sgn(area)) ret=ret/area;
        return ret;
    }
    double areacircle(circle c){
        double ans=0;
        for(int i=0;i<n;i++){
            int j=(i+1)%n;
            if(sgn((p[j]-c.p)^(p[i]-c.p))>=0){
                ans+=c.areatriangle(p[i],p[j]);
            }
            else ans-=c.areatriangle(p[i],p[j]);
        }
    }
    int relationcircle(circle c){//多边形和圆关系
        //2 圆完全在多边形内
        //1 圆在多边形里，碰到多边形边界
        //0 其他
        getline();
        int x=2;
        if(relationpoint(c.p)!=1) return 0;
        for(int i=0;i<n;i++){
            if(c.relationseg(l[i])==2) return 0;
            if(c.relationseg(l[i])==1) return 1;
        }
        return x;
    }
};

int main() {
#ifdef Ac1dX
    freopen("C:\\Users\\17261\\Desktop\\Ac1dX\\acm\\data.in", "r", stdin);
    freopen("C:\\Users\\17261\\Desktop\\Ac1dX\\acm\\data.out", "w", stdout);
#endif
    int n,q;
    Point p;
    polygon a;
    polygon convex;
    cin>>n;
    a.input(n);
    cin>>q;
    while(q--){
        p.input();
        if(a.relationpoint(p)>=2) cout<<"1"<<endl;
        else if(a.relationpoint(p)==1) cout<<"2"<<endl;
        else cout<<"0"<<endl;
    }
    return 0;
}

