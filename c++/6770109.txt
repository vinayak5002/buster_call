#include <bits/stdc++.h>

template <std::uint32_t MOD>
class ModInt {
	std::uint32_t value;
	friend std::ostream &operator<<(std::ostream &os, const ModInt &x){ return os << x.value; }
	friend std::istream &operator>>(std::istream &is, ModInt &x){ is >> x.value; x.value %= MOD; return is; }
public:
	constexpr ModInt(std::uint32_t x = 0): value(x % MOD) {}
	constexpr ModInt operator-() const { return value == 0 ? 0 : MOD - value; }
	constexpr ModInt &operator+=(const ModInt &other){ if(value < MOD - other.value) value += other.value; else value -= MOD - other.value; return *this; }
	constexpr ModInt &operator-=(const ModInt &other){ if(value >= other.value) value -= other.value; else value += MOD - other.value; return *this; }
	constexpr ModInt &operator*=(const ModInt &other){ value = static_cast<std::uint64_t>(value) * other.value % MOD; return *this; }
	constexpr ModInt &operator/=(const ModInt &other){ return *this *= other.inv(); }
	friend constexpr ModInt operator+(ModInt left, const ModInt &right){ return left += right; }
	friend constexpr ModInt operator-(ModInt left, const ModInt &right){ return left -= right; }
	friend constexpr ModInt operator*(ModInt left, const ModInt &right){ return left *= right; }
	friend constexpr ModInt operator/(ModInt left, const ModInt &right){ return left /= right; }
	constexpr ModInt inv() const { unsigned a = MOD, s = 0; unsigned b = value, t = 1; bool sign = true; while(b){ s += t * (a / b); a %= b; sign = !sign; std::swap(a, b); std::swap(s, t); } if(sign) s = MOD - s; return s; }
	constexpr ModInt pow(unsigned n) const { ModInt tmp = *this, ret = 1; while(n){ if(n % 2) ret *= tmp; tmp *= tmp; n /= 2; } return ret; }
};

using lint = long long;
using mint = ModInt<998244353>;
using std::cin, std::cout, std::cerr, std::endl;

int main(){
	lint n, k;
	cin >> n >> k;
	std::vector<lint> a(n), p(n);
	for(lint i = 0; i < n; i++) cin >> a[i];
	for(lint i = 1; i < n; i++){
		cin >> p[i];
		--p[i];
	}
	std::vector ans(n, std::vector<mint>(k, 0));
	for(lint i = n - 1; i > 0; i--){
		ans[i][0] += 1;
		for(lint j = 0; j < k - a[i]; j++){
			ans[p[i]][j + a[i]] += ans[i][j];
		}
	}
	// for(lint i = 0; i < n; i++){
	// 	cerr << i << ": ";
	// 	for(lint j = 0; j < k; j++) cerr << ans[i][j] << " ";
	// 	cerr << endl;
	// }
	cout << ans[0][k - a[0]] << endl;
}
