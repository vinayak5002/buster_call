#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <iostream>
#include <stack>
#include <queue>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <cmath>
#include<sstream>
#include<list>
#include<iomanip>
#include <cstdlib>
#include <cstring>
#include <stack>
#include <bitset>
#include <cassert>
#include <stdlib.h>
#include <stdio.h>
using namespace std;
const int INF = 1000000000;
const long long LINF = 3e18 + 7;
const int MAX_N = 50010;
const int MAX_W = 1000010;
const int MAX_ARRAYK = 100000;
double PI = 3.14159265358979323846;
//using ll = long long;


map<string, int> dp;
int dx[4] = { -1, 0, 1, 0 };
int dy[4] = { 0, 1, 0, -1 };
struct pattern { int y, x;  string s; };

int main() {

	
	string S = "01234567";

	queue<pattern> que;
	pattern p;
	p.y = 0;
	p.x = 0;
	p.s = S;
	que.push(p);
	dp[p.s] = 0;
	
	while (!que.empty()) {
		pattern p;
		p.x = que.front().x;
		p.y = que.front().y;
		p.s = que.front().s;
		que.pop();

		
		for (int i = 0; i < 4; i++) {
			int nx = p.x + dx[i];
			int ny = p.y + dy[i];
			//cout << endl;
			//cout << nx << " " << ny << endl;
			string ns = p.s;
			if (nx >= 0 && nx < 4 && ny >= 0 && ny < 2) {
				//cout << p.x << " " << p.y << endl;
				//cout << nx << " " << ny << endl;
				char t = ns[p.y * 4 + p.x];
				ns[p.y * 4 + p.x] = ns[ny * 4 + nx];
				ns[ny * 4 + nx] = t;
				if (dp.find(ns) == dp.end() || dp[p.s] + 1 < dp[ns]) {
					dp[ns] = dp[p.s] + 1;
					pattern np;
					np.x = nx;
					np.y = ny;
					np.s = ns;
					que.push(np);
				}

			}
		}

		
	}

	char ch[9];

	while (cin >> ch[0]) {
		for (int i = 1; i < 8; i++) {
			cin >> ch[i];
		}
		ch[8] = '\0';
		cout << dp[ch] << endl;
	}

	

	return 0;
}
