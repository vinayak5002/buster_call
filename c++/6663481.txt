#include<stdio.h>
#include<stdlib.h>
#include<string.h>

/*
2022 NTHU PME Programming Practice #1
C - Book Index	
*/
/*version:1.3
*/

#define			WORD_MAX_LENGTH		(30+1)
#define			WORD_MAX_SETS		(100)
#define			PAGE_MAX_SIZE		(1000)

#define			MODE_S2B		0
#define			MODE_B2S		1

//#define IF_DEBUGGING_ON

int		search0				(	unsigned char		word[][WORD_MAX_LENGTH]	,
							unsigned int		*word_cnt		,
							unsigned char		*string
						) ;
void		bubble_sort0			(	unsigned char		array[][WORD_MAX_LENGTH]	,
							unsigned int		index[]				,
							unsigned int		size				,
							unsigned char		mode
						) ;
void		bubble_sort1			(	int			array[]			,
							unsigned int		size			,
							unsigned char		mode
						) ;
void		swap				(	int			*a			,
							int			*b
						) ;

int main(void)
{
	unsigned int	n						;
	long		loop_i						;
	long		loop_j						;
	unsigned char	word	[WORD_MAX_SETS][WORD_MAX_LENGTH]	;
	unsigned int	word_idx[WORD_MAX_SETS]				;
	unsigned int	word_cnt					;
	unsigned int	page	[WORD_MAX_SETS][PAGE_MAX_SIZE]		;
	unsigned int	page_cnt[WORD_MAX_SETS]				;

	unsigned char	temp_word[WORD_MAX_LENGTH]			;
	unsigned int	temp_page					;
	unsigned int	temp_index					;
	unsigned int	temp_count					;

	unsigned char	running				;

					running				=	1			;
					word_cnt			=	0			;
	for(loop_i=0;loop_i<WORD_MAX_SETS;loop_i++)
					page_cnt[loop_i]		=	0			;


	while(running==1) {
		if(scanf("%s%d\n", temp_word,&temp_page)==EOF) 
					running				=	0			;
		if(running==1) {
					temp_index=search0(word,&word_cnt,temp_word)			;
					temp_count			=	page_cnt[temp_index]	;
					page	[temp_index][temp_count]=	temp_page		;
					page_cnt[temp_index]		+=	1			;
//					printf("%s %d\n",temp_word,temp_page)		;
					
		}
			
	}
					bubble_sort0	(word,word_idx,word_cnt,MODE_S2B);
	for(loop_i=0;loop_i<word_cnt;loop_i++) {
					temp_index			=	word_idx[loop_i]	;
					bubble_sort1	(page[temp_index],page_cnt[temp_index],MODE_S2B);
					printf("%s\n",word[temp_index])			;
	  for(loop_j=0;loop_j<page_cnt[temp_index];loop_j++) {
					printf("%d ",page[temp_index][loop_j])		;
	  }
					printf("\n")					;
	}

    	return 0;
}

int		search0				(	unsigned char		word[][WORD_MAX_LENGTH]	,
								unsigned int		*word_cnt		,
								unsigned char		*string
						) {
		int		result=-1		;
		int 		loop_i			;
		int 		count			;

					count			=	*word_cnt			;
	for(loop_i=0;loop_i<count;loop_i++) {
		if(	strcmp(string,word[loop_i])==0					)  {
					result			=	loop_i				;
					break;
		}
	}
	
	if(					result==-1				) {
					result			=	count				;
					strcpy(word[count],string)					;
					count++								;
					*word_cnt		=	count				;
	}

		return	result		;
}

void		bubble_sort0			(	unsigned char		array[][WORD_MAX_LENGTH]	,
							unsigned int		index[]				,
							unsigned int		size				,
							unsigned char		mode
						) {

		int		loop_i			;
		int 		loop_j			;
		int		comp			;

		for(loop_i=0;loop_i<size;loop_i++)
				index	[loop_i]	=		loop_i			;

		for(loop_i=0;loop_i<(size-1);loop_i++)
		 for (loop_j=loop_i+1;loop_j<size;loop_j++) {
//				comp			=		1			;
				comp			=		strcmp(array[index[loop_i]],array[index[loop_j]])	;
 			if(		mode==MODE_B2S			?
					comp<0				:		
					comp>0				)
				swap(index+loop_i,index+loop_j)					;
		}

}

void		bubble_sort1			(	int			array[]			,
							unsigned int		size			,
							unsigned char		mode
						) {

		int		loop_i			;
		int 		loop_j			;

		for(loop_i=0;loop_i<(size-1);loop_i++)
		 for (loop_j=loop_i+1;loop_j<size;loop_j++) {
 			if(		mode==MODE_B2S			?
					array[loop_i]<array[loop_j]	:		
					array[loop_i]>array[loop_j]	)
				swap(array+loop_i,array+loop_j)				;
		}

}

void		swap				(	int			*a			,
							int			*b
						) {
 		int		temp			;
 
 				temp			=		*a			;
				*a			=		*b			;
				*b			=		temp			;
}

