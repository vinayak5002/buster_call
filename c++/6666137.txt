#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define rep2(i, k, n) for (decltype(n) i = k; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i--)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i--)
#define repr2(i, k, n) for (decltype(n) i = n; i >= k; i--)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret; };
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret; };
template <typename T>
using pq_inv = priority_queue<T, vector<T>, greater<T>>;

struct Solver {
    int clip(int x){
        return max(0,min(x,255));
    }
    void solve(int N, int M) {
        vector<int> C(M);
        rep(i, M) cin >> C[i];
        vector<int> X(N + 1);
        rep1(i, N) cin >> X[i];
        vector dp = vector(N + 1, vector<ll>(256, 1 << 30));
        dp[0][128] = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < 256; j++) {
                for (int k = 0; k < M; k++) {
                    int c = clip(j+C[k]);
                    chmin(dp[i+1][c], dp[i][j]+(X[i+1]-c)*(X[i+1]-c));
                }
            }
        }
        cout << *min_element(dp[N].begin(), dp[N].end()) << endl;
    };
};

int main() {
    std::cin.tie(nullptr);
    while (true) {
        int N, M;
        cin >> N >> M;
        if(N==0 && M==0)break;
        Solver solver;
        solver.solve(N,M);
    }
    return 0;
}


