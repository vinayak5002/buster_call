#include<bits/stdc++.h>
#include<complex>
using namespace std;
#define int long long
const double eps=1e-10;
struct Vec{
	double x,y;
	Vec(double X=0,double Y=0){x=X;y=Y;}
	double len(){return sqrt(x*x+y*y);}
	Vec operator+(Vec a){return Vec(x+a.x,y+a.y);}
	Vec operator-(Vec a){return Vec(x-a.x,y-a.y);}
	Vec operator*(double a){return Vec(x*a,y*a);}
	Vec operator/(double a){return Vec(x/a,y/a);}
	double operator*(Vec a){return x*a.x+y*a.y;}
	double operator%(Vec a){return x*a.y-y*a.x;}
	friend istream &operator>>(istream &cin,Vec &a){return cin>>a.x>>a.y;}
	friend ostream &operator<<(ostream &cout,Vec a){return cout<<a.x<<a.y;}
}p1,p2,p3,p0;
namespace Point_and_Segment{
	#define Node Vec
	bool Intersect(Node a,Node b,Node c,Node d)//线段相交
	{
		return ((a-d)%(c-d))*((b-d)%(c-d))<=0.0&&((d-b)%(a-b))*((c-b)%(a-b))<=0.0;
	}
	#undef Node
}using namespace Point_and_Segment;
signed main()
{
	ios::sync_with_stdio(0);
	cin.tie(0),cout.tie(0);
	int q;cin>>q;
	while(q--)
	{
		cin>>p0>>p1>>p2>>p3;
		if(Intersect(p0,p1,p2,p3))
			cout<<1<<'\n';
		else cout<<0<<'\n';
	}
	return 0;
}

