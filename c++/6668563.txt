#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using P = pair<int,int>;
int dx[] = {1,0,-1,0},dy[] = {0,1,0,-1};

int main(){
    while(true){
        int h,w;
        cin >> w >> h;
        if(h == w && h == 0) break;
        vector<string> s1(h),s2(h);
        P l,r,g1,g2;
        for(int i = 0;i < h;++i){
            cin >> s1[i];
            cin >> s2[i];
            for(int j = 0;j < w;++j) if (s1[i][j] == 'L') l = P(i,j);
            for(int j = 0;j < w;++j) if (s1[i][j] == '%') g1 = P(i,j);
            for(int j = 0;j < w;++j) if (s2[i][j] == 'R') r = P(i,j);
            for(int j = 0;j < w;++j) if (s2[i][j] == '%') g2 = P(i,j);
        }
        vector<vector<vector<vector<bool>>>> seen(h,vector<vector<vector<bool>>>(w,vector<vector<bool>>(h,vector<bool>(w))));
        queue<pair<P,P>> q;
        q.emplace(l,r);
        while(!q.empty()){
            pair<P,P> label = q.front();
            P left = label.first,right = label.second;
            q.pop();
            if (seen[left.first][left.second][right.first][right.second]) continue;
            seen[left.first][left.second][right.first][right.second] = true;
            for(int i = 0;i < 4;++i){
                if ((left.first+dx[i] < 0 || left.first+dx[i] >= h || left.second+dy[i] < 0 || left.second+dy[i] >= w) && (right.first+dx[i] < 0 || right.first+dx[i] >= h || right.second+dy[i]*-1 < 0 || right.second+dy[i]*-1 >= w)) {
                    continue;
                } else if (right.first+dx[i] < 0 || right.first+dx[i] >= h || right.second+dy[i]*-1 < 0 || right.second+dy[i]*-1 >= w) {
                    if(s1[left.first+dx[i]][left.second+dy[i]] == '#') continue;
                    if (seen[left.first+dx[i]][left.second+dy[i]][right.first][right.second]) continue;
                    if(P(left.first+dx[i],left.second+dy[i]) == g1) continue;
                    q.emplace(P(left.first+dx[i],left.second+dy[i]),P(right.first,right.second));
                }else if (left.first+dx[i] < 0 || left.first+dx[i] >= h || left.second+dy[i] < 0 || left.second+dy[i] >= w){
                    if (s2[right.first+dx[i]][right.second+dy[i]*-1] == '#') continue;
                    if (seen[left.first][left.second][right.first+dx[i]][right.second+dy[i]*-1]) continue;
                    if(P(right.first+dx[i],right.second+dy[i]*-1) == g2) continue;
                    q.emplace(P(left.first,left.second),P(right.first+dx[i],right.second+dy[i]*-1));
                }else if (s1[left.first+dx[i]][left.second+dy[i]] != '#' && s2[right.first+dx[i]][right.second+dy[i]*-1] != '#') {
                    if (seen[left.first+dx[i]][left.second+dy[i]][right.first+dx[i]][right.second+dy[i]*-1]) continue;
                    if(P(left.first+dx[i],left.second+dy[i]) != g1 && P(right.first+dx[i],right.second+dy[i]*-1) == g2) continue;
                    if(P(left.first+dx[i],left.second+dy[i]) == g1 && P(right.first+dx[i],right.second+dy[i]*-1) != g2) continue;
                    q.emplace(P(left.first+dx[i],left.second+dy[i]),P(right.first+dx[i],right.second+dy[i]*-1));
                }else if(s1[left.first+dx[i]][left.second+dy[i]] != '#' && s2[right.first+dx[i]][right.second+dy[i]*-1] == '#'){
                    if (seen[left.first+dx[i]][left.second+dy[i]][right.first][right.second]) continue;
                    if(P(left.first+dx[i],left.second+dy[i]) == g1) continue;
                    q.emplace(P(left.first+dx[i],left.second+dy[i]),P(right.first,right.second));
                }else if(s1[left.first+dx[i]][left.second+dy[i]] == '#' && s2[right.first+dx[i]][right.second+dy[i]*-1] != '#'){
                    if (seen[left.first][left.second][right.first+dx[i]][right.second+dy[i]*-1]) continue;
                    if(P(right.first+dx[i],right.second+dy[i]*-1) == g2) continue;
                    q.emplace(P(left.first,left.second),P(right.first+dx[i],right.second+dy[i]*-1));
                }
                
            }
        }
        if (seen[g1.first][g1.second][g2.first][g2.second]){
            cout << "Yes" << endl;
        }else{
            cout << "No" << endl;
        }
    }
    return 0;
}
