#include <bits/stdc++.h>
#define rep(i, st, n) for (ll i = (ll)st; i < (ll)st + (ll)n; i++)
#define repd(i, st, gl, c) for(ll i = ll(st); i <= ll(gl); i += ll(c))
#define rrep(i, st, n) for (ll i = (ll)st; i > (ll)st - (ll)n; i--)
#define rrepd(i, st, gl, c) for(ll i = ll(st); i >= ll(gl); i -= ll(c))
#define fi first
#define se second
#define pb push_back
using namespace std;
using ll = long long;
using Graph = vector<vector<ll>>;
ll n, cnt, ans, m;
const ll inf = 1e18;

int main() {
    // 頂点数と辺数
    cin >> n;

    // グラフ入力受取 (ここでは無向グラフを想定)
    Graph G(n);
    rep(i, 0, n){
        cin >> m >> m;
        rep(j, 0, m){
            ll a;
            cin >> a;
            G[i].pb(a - 1); 
        }
    }

    // BFS のためのデータ構造
    vector<ll> dist(n, -1); // 全頂点を「未訪問」に初期化
    queue<ll> que;

    // 初期条件 (頂点 0 を初期ノードとする)
    dist[0] = 0;
    que.push(0); // 0 を橙色頂点にする

    // BFS 開始 (キューが空になるまで探索を行う)
    while (!que.empty()) {
        int v = que.front(); // キューから先頭頂点を取り出す
        que.pop();

        // v から辿れる頂点をすべて調べる
        for (int nv : G[v]) {
            if (dist[nv] != -1) continue; // すでに発見済みの頂点は探索しない

            // 新たな白色頂点 nv について距離情報を更新してキューに追加する
            dist[nv] = dist[v] + 1;
            que.push(nv);
        }
    }

    // 結果出力 (各頂点の頂点 0 からの距離を見る)
    for (int v = 0; v < n; ++v) cout << v << ": " << dist[v] << endl;
}
