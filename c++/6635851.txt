#include <bits/stdc++.h>
//#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
#define all(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

vector<ll> fact, factinv, inv;
ll mod = 1e9 + 7;
void prenCkModp(ll n) {
    fact.resize(n + 5);
    factinv.resize(n + 5);
    inv.resize(n + 5);
    fact.at(0) = fact.at(1) = 1;
    factinv.at(0) = factinv.at(1) = 1;
    inv.at(1) = 1;
    for (ll i = 2; i < n + 5; i++) {
        fact.at(i) = (fact.at(i - 1) * i) % mod;
        inv.at(i) = mod - (inv.at(mod % i) * (mod / i)) % mod;
        factinv.at(i) = (factinv.at(i - 1) * inv.at(i)) % mod;
    }

}
ll nCk(ll n, ll k) {
    if (n < k) return 0;
    return fact.at(n) * (factinv.at(k) * factinv.at(n - k) % mod) % mod;
}

bool chmax(ll& p, ll q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

bool chmin(ll& p, ll q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll sti(string S) {
    ll res = 0;
    rep(i, S.size()) {
        res += S[i] - '0';
        res *= 10;
    }
    return res / 10;
}

string ist(ll n, ll L = -1) {
    string res = "";
    if (L >= 0)rep(l, L)res += '0';
    ll p = L - 1;
    if (L != -1)while (n > 0) {
        res[p] = char(n % 10 + '0');
        p--;
        n /= 10;
    }
    else {
        while (n > 0) {
            res.push_back(char(n % 10 + '0'));
            p--;
            n /= 10;
        }
        reverse(all(res));
    }
    return res;
}

ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}

struct fenwick_tree {
	ll n;
	vll bit;
	fenwick_tree(ll num) :bit(num + 1, 0) { n = num; }

	void add(ll i, ll w) {
		for (ll x = i+1; x <= n; x += x & -x) {
			bit[x-1] += w;
		}
	}

	ll sum(ll i) {
		ll ret = 0;
		for (ll x = i+1; x > 0; x -= x & -x) {
			ret += bit[x-1];
		}
		return ret;
	}

	ll sum(ll L, ll R) {
		return sum(R) - sum(L);
	}


};
ll TE(vll A) {
	ll res = 0;
	ll N = A.size();
	fenwick_tree fw(N);
	rep(i, N) {
		res += i - fw.sum(A[i]);
		fw.add(A[i], 1);
	}
	return res;
}

int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    ll N;
    cin>>N;
vector<pair<ll,ll>> P(N);
rep(i,N){
    ll U,V;
    cin>>U>>V;
    U--;V--;
    P[i]={U,V};
}
sort(all(P));
set<ll> Q;
vll A(N);
ll an=0;
rep(i,N){
    A[i]=P[i].second;
    Q.insert(A[i]);
    if(A[i]!=i)an++;
}

cout<<(Q.size()==N?max(an-1,0ll):-1)<<endl;

}
