#include<bits/stdc++.h>
#define rep(i,a,...) for(int i = (a)*(strlen(#__VA_ARGS__)!=0);i<(int)(strlen(#__VA_ARGS__)?__VA_ARGS__:(a));++i)
#define per(i,a,...) for(int i = (strlen(#__VA_ARGS__)?__VA_ARGS__:(a))-1;i>=(int)(strlen(#__VA_ARGS__)?(a):0);--i)
#define foreach(i, n) for(auto &i:(n))
#define all(x) (x).begin(), (x).end()
#define bit(x) (1ll << (x))
#define lambda(RES_TYPE, ...) (function<RES_TYPE(__VA_ARGS__)>)[&](__VA_ARGS__) -> RES_TYPE
#define method(FUNC_NAME, RES_TYPE, ...) function<RES_TYPE(__VA_ARGS__)> FUNC_NAME = lambda(RES_TYPE, __VA_ARGS__)
using namespace std;
using ll = long long;
using pii = pair<int,int>;
using pll = pair<ll,ll>;
//const ll MOD = (ll)1e9+7;
const ll MOD = 998244353;
const int INF = (ll)1e9+7;
const ll INFLL = (ll)1e18;
template<class t>
using vvector = vector<vector<t>>;
template<class t>
using vvvector = vector<vector<vector<t>>>;
template<class t>
using priority_queuer = priority_queue<t, vector<t>, greater<t>>;
template<class t, class u> bool chmax(t &a, u b){if(a<b){a=b;return true;}return false;}
template<class t, class u> bool chmin(t &a, u b){if(a>b){a=b;return true;}return false;}
#ifdef DEBUG
#define debug(x) cout<<"LINE "<<__LINE__<<": "<<#x<<" = "<<x<<endl;
#else
#define debug(x) (void)0
#endif

namespace templates{
    ll modpow(ll x, ll b,ll mod=MOD){
        ll res = 1;
        while(b){
            if(b&1)res = res * x % mod;
            x = x * x % mod;
            b>>=1;
        }
        return res;
    }

    ll modinv(ll x){
        return modpow(x, MOD-2);
    }

    bool was_output = false;

    void print();
    template <class t> void print(const vector<t> &);
    template <class t, class u> void print(const pair<t, u> &);
    template <class t> void print(const t&);
    template <class Head, class... Tail> void print(const Head&, const Tail&...);

    template <class t> void println(const vector<vector<t>>&);
    template <class t> void println(const vector<t>&);
    template <class t> void println(const t&);
    template <class Head, class... Tail> void println(const Head&, const Tail&...);
    void println();
    void newline();

    void print(){
        return;
    }

    template <class t>
    void print(const vector<t>&x){
        for(const t&i:x)print(i);
    }
    template <class t, class u>
    void print(const pair<t,u>&p){
        print(p.first);
        print(p.second);
    }
    template <class t>
    void print(const t&x){
        if(was_output)cout<<" ";
        cout<<x;
        was_output = true;
    }
    template <class Head, class... Tail>
    void print(const Head&head,const Tail&...tail){
        print(head);
        print(tail...);
    }

    template<class t>
    void println(const vector<vector<t>>&x){
        for(vector<t> i:x)println(i);
    }
    template<class t>
    void println(const vector<t>&x){
        for(const t&i:x)print(i);
        println();
    }
    template <class t>
    void println(const t&x){
        print(x);
        println();
    }
    void println(){
        if(was_output){
            cout << endl;
            was_output = false;
        }
    }
    template <class Head, class... Tail>
    void println(const Head&head,const Tail&...tail){
        print(head);
        println(tail...);
    }

    void newline(){
        was_output = true;
        println();
    }

    template<class t>
    istream& operator>>(istream&is, vector<t>&x){
        for(auto &i:x)is >> i;
        return is;
    }

    template<class t, class u>
    istream& operator>>(istream&is, pair<t, u>&x){
        is >> x.first >> x.second;
        return is;
    }

    template<class t>
    ostream& operator<<(ostream&os, vector<t> &v){
        os << "{";
        for(t &i:v){
            os << i << ", ";
        }
        os << "}";
        return os;
    }

    template<class t = long long>
    t in(){
        t res; cin >> res; return res;
    }

    template<class t>
    vector<t> sorted(vector<t> line,function<bool(t,t)> comp=[](t a,t b){return a<b;}){
        sort(line.begin(),line.end(),comp);
        return line;
    }

    template<class t>
    vector<t> reversed(vector<t> line){
        reverse(line.begin(),line.end());
        return line;
    }
    string reversed(string str){
        reverse(str.begin(),str.end());
        return str;
    }

    long long gcd(long long a,long long b){
        while(b){
            a %= b;
            swap(a,b);
        }
        return a;
    }

    long long lcm(long long a,long long b){
        return a / gcd(a,b) * b;
    }

    class output_initializer{
    public:
        output_initializer(){
            ios::sync_with_stdio(false);
            cin.tie(nullptr);
            cout << setprecision(20);
        }
    };output_initializer OUTPUT_INITIALIZER_INSTANCE = output_initializer();
}

using namespace templates;

using P = complex<double>;
using L = pair<P,P>;

P norm(P x){
    return x / abs(x);
}

template<class t>
t square(t x){
    return x;
}

P polar(double x){
    return P(cos(x),sin(x));
}

const double EPS = 1e-5;

int sign(double x){
    if(abs(x) < EPS)return 0;
    if(x < 0)return -1;
    return 1;
}

double abss(P x){
    return abs(x) * abs(x);
}

vector<L> tangent_cc(P p1,P p2,double r1,double r2) {
    vector<L> res;
    if (r1 > r2){
        swap(r1,r2);
        swap(p1,p2);
    }

    double g = abss(p1 - p2);
    if (sign(g) == 0) return res;

    P u = (p1 - p2) / sqrt(g);
    P v(-u.imag(), u.real());

    for (int s = 1; s >= -1; s -= 2) {
        double h = (r1 * s + r2) / sqrt(g);
        if (sign(1 - abss(h)) == 0) {
            res.emplace_back(p2 + u * r2, p2 + (u + v) * r2);
        } else if (sign(1 - abss(h)) > 0) {
            P uu = u * h;
            P vv = v * sqrt(1 - abss(h));
            res.emplace_back(p2 + (uu + vv) * r2, p1 - (uu + vv) * r1 * double(s));
            res.emplace_back(p2 + (uu - vv) * r2, p1 - (uu - vv) * r1 * double(s));
        }
    }
    return res;
}

double dot(P v1,P v2){
    return v1.real() * v2.real() + v1.imag() * v2.imag();
}

double dist(P p,L l){
    P u = norm(l.first - l.second);
    P v(-u.imag(),u.real());
    return abs(dot(p - l.first,v));
}

int func(int n){
    vector<P> poss;
    vector<double> rs;
    vector<double> ms;
    rep(i,n){
        int x=in();
        int y=in();
        int r=in();
        int m=in();
        poss.emplace_back(x,y);
        rs.emplace_back(r);
        ms.emplace_back(r+m);
    }
    method(get_lines,vector<L>,int i,int j){
        vector<L> res;
        vector<L> a1 = tangent_cc(poss[i],poss[j],rs[i],rs[j]);
        vector<L> a2 = tangent_cc(poss[i],poss[j],ms[i],rs[j]);
        vector<L> a3 = tangent_cc(poss[i],poss[j],rs[i],ms[j]);
        vector<L> a4 = tangent_cc(poss[i],poss[j],ms[i],ms[j]);
        res.insert(res.end(),all(a1));
        res.insert(res.end(),all(a2));
        res.insert(res.end(),all(a3));
        res.insert(res.end(),all(a4));
        return res;
    };
    method(get_lines2,vector<L>,int i){
        vector<L> res;
        res.emplace_back(poss[i] + P(1,0) * rs[i],poss[i] + P(1,0) * rs[i] + P(0,1));
        res.emplace_back(poss[i] + P(1,0) * ms[i],poss[i] + P(1,0) * ms[i] + P(0,1));
        return res;
    };
    int res = 0;
    rep(i,n){
        rep(j,i+1,n){
            foreach(l,get_lines(i,j)){
                int sum = 0;
                rep(g,n){
                    double p = dist(poss[g],l);
                    if(rs[g] - EPS <= p and p <= ms[g] + EPS){
                        ++sum;
                    }
                }
                chmax(res,sum);
            }
        }
    }
    rep(i,n){
        foreach(l,get_lines2(i)){
            int sum = 0;
            rep(g,n){
                double p = dist(poss[g],l);
                if(rs[g] - EPS <= p and p <= ms[g] + EPS){
                    ++sum;
                }
            }
            chmax(res,sum);
        }
    }
    return res;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    while(true){
        int n=in();
        if(n==0)break;
        println(func(n));
    }
    return 0;
}

