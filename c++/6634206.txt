#include<bits/stdc++.h>
using namespace std;
// 1 以上 N 以下の整数が素数かどうかを返す
vector<bool> Eratosthenes(int N) {
    // テーブル
    vector<bool> isprime(N+1, true);

    // 0, 1 は予めふるい落としておく
    isprime[0] = isprime[1] = false;

    // ふるい
    for (int p = 2; p <= N; ++p) {
        // すでに合成数であるものはスキップする
        if (!isprime[p]) continue;

        // p 以外の p の倍数から素数ラベルを剥奪
        for (int q = p * 2; q <= N; q += p) {
            isprime[q] = false;
        }
    }

    // 1 以上 N 以下の整数が素数かどうか
    return isprime;
}

int main(){
  vector<bool> isprime = Eratosthenes(100000000);
  
  int cnt = 0;
  
  int n;
  cin >> n;
  
  for(int i = 0; i < n; i++){
    int x;
    cin >> x;
    if(isprime[x]) cnt++;
  }
  cout << cnt << endl;
}
