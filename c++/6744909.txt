#include <algorithm>
#include <cassert>
#include <climits>
#include <cmath>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <random>
#include <complex>
#include <bitset>
#include <iomanip>
#include <memory>
#include <functional>
#include <stack>
#include <limits>

#define rep(i, n, s) for (int i = (s); i < int(n); i++)
#define per(i, n, s) for (int i = (n) - 1; i >= int(s); i--)
#define MM << " " <<
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)

template <class T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <class T>
using MaxHeap = std::priority_queue<T>;

using ll = long long;
using Pii = std::pair<int, int>;
using Pll = std::pair<ll, ll>;
using Pdd = std::pair<double, double>;

template <class T>
bool chmin(T &a, const T b) {
    if (b < a) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
bool chmax(T &a, const T b) {
    if (a < b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
void vdeb(const std::vector<T> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        if (i == n - 1)
            std::cout << da[i];
        else
            std::cout << da[i] << " ";
    }
    std::cout << std::endl;
}
template<class T>
void vdeb(const std::vector<std::vector<T>> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        // std::cout << i << " : ";
        vdeb(da[i]);
    }
    std::cout << std::endl;
}

using namespace std;
using ld = long double;

const ld PI = atan(1.0) * 4;

int main() {
    int n; cin >> n;
    ld r; cin >> r;
    ld ans = 4.0 * PI * r * r * r / 3.0 * n;
    vector<vector<ld>> da(n, vector<ld>(3));
    rep(i,n,0) {
        rep(j,3,0) cin >> da[i][j];
    }
    auto prv = da.back();
    for(auto &i : da) {
        ld d = 0.0;
        rep(j,3,0) d += (i[j] - prv[j]) * (i[j] - prv[j]);
        d = sqrt(d);
        ans -= 2.0 * PI / 3 * (r - d/2) * (r - d/2) * (2*r + d/2);
        prv = i;
    }
    cout << setprecision(15);
    cout << ans << endl;
}
