#include<bits/stdc++.h>
using namespace std;

using ll = long long;

ll modpow(ll x,ll y,ll mod){
	ll res = 1;
	ll sum = x;
	while(y){
		if(y & 1)res = res * sum % mod;
		sum = sum * sum % mod;
		y >>= 1;
	}
	return res;
}

ll modinv(ll x,ll mod){
	return modpow(x,mod-2,mod);
}

class RollingHash{
public:
	ll mod;
	ll base;
	ll ibase;
	RollingHash(ll mod,ll base):mod(mod),base(base),ibase(modinv(base,mod)){}

	vector<ll> values;
	vector<ll> bases;
	vector<ll> ibases;

	void build(string str){
		values.assign(str.size()+1,0);
		bases.assign(str.size()+1,0);
		ibases.assign(str.size()+1,0);
		bases[0] = 1;
		ibases[0] = 1;
		for(int i=0;i+1<bases.size();++i)bases[i+1] = bases[i] * base % mod;
		for(int i=0;i+1<ibases.size();++i)ibases[i+1] = ibases[i] * ibase % mod;
		for(int i=0;i<str.size();++i){
			values[i+1] = (values[i] + bases[i] * str[i]) % mod;
		}
	}

	ll query(int l,int r){
		return (values[r] - values[l] + mod) * ibases[l] % mod;
	}
};

int func(){
	int n;
	int m;
	cin >> n >> m;
	string str;
	cin >> str;
	RollingHash r1(1000000007,101);
	RollingHash r2(1000000009,97);
	r1.build(str);
	r2.build(str);
	using pll = pair<ll,ll>;
	set<pll> s;
	int l = 0;
	int r = 1;
	for(int i=0;i<m;++i){
		string str;
		cin >> str;
		if(str[0]=='R'){
			if(str[1]=='+')++r;
			if(str[1]=='-')--r;
		}
		if(str[0]=='L'){
			if(str[1]=='+')++l;
			if(str[1]=='-')--l;
		}
		s.emplace(pll(r1.query(l,r),r2.query(l,r)));
	}
	return s.size();
}

int main(){
	cout << func() << endl;
	return 0;
}

