#include <bits/stdc++.h>
//#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
#define all(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}
ll Eugrid(ll A, ll B, ll& x, ll& y) {
    if (B == 0) {
        x = 1;
        y = 0;
        return A;
    }
    ll C = gcd(A, B);
    ll D = Eugrid(B, A % B, y, x);
    y -= A / B * x;
    return D;
}//Ax+By=gcd(A,B)の解
vector<ll> fact, factinv, inv;
ll mod = 1e9 + 7;
void prenCkModp(ll n) {
	fact.resize(n + 5);
	factinv.resize(n + 5);
	inv.resize(n + 5);
	fact.at(0) = fact.at(1) = 1;
	factinv.at(0) = factinv.at(1) = 1;
	inv.at(1) = 1;
	for (ll i = 2; i < n + 5; i++) {
		fact.at(i) = (fact.at(i - 1) * i) % mod;
		inv.at(i) = mod - (inv.at(mod % i) * (mod / i)) % mod;
		factinv.at(i) = (factinv.at(i - 1) * inv.at(i)) % mod;
	}

}
ll nCk(ll n, ll k) {
	if (n < k) return 0;
	return fact.at(n) * (factinv.at(k) * factinv.at(n - k) % mod) % mod;
}
ll N,M;
vvll G;

vll DP;
vector<bool> seen;
ll dfs(ll X){
    if(seen[X])return DP[X];
    seen[X]=1;
    ll res=0;
    for(auto v:G[X]){
        chmax(res,dfs(v)+1);
    }
    DP[X]=res;
    return res;
}

int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    
    ll H,W,N;
    cin>>H>>W>>N;
    vector<string> S(H);
    vector<pair<ll,ll>> D(N+1);
    rep(i,H){
        cin>>S[i];
        rep(w,W){
            if(S[i][w]!='.'&&S[i][w]!='X'){
                if(S[i][w]=='S')D[0]={i,w};
                else D[S[i][w]-'0']={i,w};
            }
        }
    }
    vll dy={1,-1,0,0};
    vll dx={0,0,1,-1};

    ll an=0;
    rep(i,N){
        queue<pair<ll,ll>> Q;
        vector<vector<bool>> seen(H,vector<bool>(W,false));
        vvll dist(H,vll(W,1e18));
        dist[D[i].first][D[i].second]=0;
        Q.push(D[i]);
        while(!Q.empty()){
            auto p=Q.front();
            Q.pop();
            if(seen[p.first][p.second])continue;
            seen[p.first][p.second]=1;
            rep(d,4){
                ll ny=p.first+dy[d];
                ll nx=p.second+dx[d];
                if(ny<0||nx<0||ny>=H||nx>=W)continue;
                if(seen[ny][nx])continue;
                if(S[ny][nx]=='X')continue;
                if(dist[ny][nx]<=dist[p.first][p.second]+1)continue;
                dist[ny][nx]=dist[p.first][p.second]+1;
                Q.push({ny,nx});
            }
        }
        an+=dist[D[i+1].first][D[i+1].second
        ];
    }
    cout<<an<<endl;
}
