#include<bits/stdc++.h>
using namespace std;

// 複素数
typedef complex<double>xy_t;
// 内積
double dot_product(xy_t a, xy_t b)
{
	return (conj(a) * b).real();
}
// 外積
double cross_product(xy_t a, xy_t b)
{
	return (conj(a) * b).imag();
}

// 今回は小数点以下5桁同士の掛け算なので、10^(-11)以下なら0とみなせる
const double eps = 1e-11;

int main()
{
	int n;
	cin >> n;
	vector<xy_t>P(4);
	for (int a = 0; a < n; a++)
	{
		for (int b = 0; b < 4; b++)
		{
			double x, y;
			cin >> x >> y;
			P[b] = xy_t(x, y);
		}
		// P1→P2 と P3→P4 が張る三角形の面積が0になれば平行
		double sum = abs(cross_product(P[1] - P[0], P[3] - P[2]));
		if (sum < eps)
			cout << "YES" << endl;
		else
			cout << "NO" << endl;
	}
}
