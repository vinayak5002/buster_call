#include <algorithm>
#include <cassert>
#include <climits>
#include <cmath>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <random>
#include <complex>
#include <bitset>
#include <iomanip>
#include <memory>
#include <functional>

#define rep(i, n, s) for (int i = (s); i < int(n); i++)
#define per(i, n, s) for (int i = (n) - 1; i >= int(s); i--)
#define MM << " " <<
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)

template <class T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <class T>
using MaxHeap = std::priority_queue<T>;

using ll = long long;
using Pii = std::pair<int, int>;
using Pll = std::pair<ll, ll>;
using Pdd = std::pair<double, double>;

template <class T>
bool chmin(T &a, const T b) {
    if (b < a) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
bool chmax(T &a, const T b) {
    if (a < b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
void vdeb(const std::vector<T> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        if (i == n - 1)
            std::cout << da[i];
        else
            std::cout << da[i] << " ";
    }
    std::cout << std::endl;
}
template<class T>
void vdeb(const std::vector<std::vector<T>> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        // std::cout << i << " : ";
        vdeb(da[i]);
    }
    std::cout << std::endl;
}

using namespace std;

const double PI = atan(1.0) * 4;

int main() {
    double x, y; cin >> x >> y;
    double theta, omega;
    cin >> theta >> omega;
    theta *= PI / 180.0;
    omega *= PI / 180.0;
    double r = sqrt(x*x + y*y);
    double diff = abs(atan2(y, x) - PI * theta / 180.0);
    while(diff > 2*PI) diff -= 2*PI;
    if(diff > PI) diff = 2*PI - diff;
    double ok = r * omega, ng = 0.0;
    rep(i,70,0) {
        double now = (ok + ng) / 2;
        double rr = now / omega;
        cerr << now MM rr << endl;
        double d = sqrt(x*x + y*y - rr*rr);
        double g = rr / r;
        double t = ((g < 0.7 ? asin(sqrt(1-g*g)) : acos(g)) + diff) / omega;
        if(d /now <= t) ok = now;
        else ng = now;
    }
    cout << setprecision(20);
    cout << ok << endl;
}
