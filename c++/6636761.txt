#include<bits/stdc++.h>

using namespace std;

using ll = long long;
using ld = long double;

#define rep(i, a, b) for(ll i = (ll)a; i < (ll)b; i++)
#define irep(i, v) for(auto i = (v).begin(); i != (v).end(); i++)
#define ALL(v) (v).begin(), (v).end()
#define SZ(v) (ll)(v).size()

const ll INF = 1e18;
const ld EPS = 1e-10;
const ll MOD = 1e9 + 7;
const ld PI = M_PI;

vector<ll> dx = {0, 1, 0, -1};
vector<ll> dy = {1, 0, -1, 0};
string dir = "rdlu";

const ll LIM = 45; // 深さの制限

ll mdis[16][16];

struct puzzle{
  ll f[16];
  ll space, md;
};

puzzle state;
ll limit; // 現在の目標深さの制限
ll path[100];

ll getallmd(puzzle pz){
  ll res = 0;
  for(ll i = 0; i < 16; i++){
    if(pz.f[i] == 16) continue; // space
    res += mdis[i][pz.f[i] - 1];
  }
  return res;
}

bool is_solved(){
  for(ll i = 0; i < 16; i++){
    if(state.f[i] != i + 1) return false;
  }
  return true;
}

bool dfs(ll depth, ll prev){ // prev = 前回どちら方向へ進んだか
  if(state.md == 0) return true;
  if(depth + state.md > limit) return false; // 深さとヒューリスティックがlimitを超えたら枝刈り

  ll sx = state.space / 4;
  ll sy = state.space % 4;
  puzzle tmp;

  for(ll k = 0; k < 4; k++){
    ll tx = sx + dx[k];
    ll ty = sy + dy[k];
    if(tx < 0 || ty < 0 || tx >= 4 || ty >= 4) continue;
    if(max(prev, k) - min(prev, k) == 2) continue; // dir = "rdlu"で逆向きに進むのは k = (prev + 2) % 4のとき
    tmp = state;

    ll tpos = tx * 4 + ty;
    ll spos = sx * 4 + sy;
    state.md -= mdis[tpos][state.f[tpos] - 1];
    state.md += mdis[spos][state.f[tpos] - 1];

    swap(state.f[tpos], state.f[spos]);
    state.space = tpos;
    if(dfs(depth + 1, k)){
      path[depth] = k;
      return true;
    }
    state = tmp;
  }
  return false;
}

void calcmdis(){
  for(ll i = 0; i < 16; i++){
    for(ll j = 0; j < 16; j++){
      mdis[i][j] = abs(i / 4 - j / 4) + abs(i % 4 - j % 4);
    }
  }
}

string interactive_deepening(puzzle init, ll cnt = 0){
  if(cnt == 0) calcmdis();

  init.md = getallmd(init); // 初期状態のマンハッタン距離
  for(limit = init.md; limit <= LIM; limit++){
    state = init;
    if(dfs(0, -100)){
      string ans = "";
      for(ll i = 0; i < limit; i++) ans += dir[path[i]];
      return ans;
    }
  }
  return "unsolvable";
}


int main(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  srand((unsigned)time(NULL));
  cout << fixed << setprecision(20);

  puzzle init;
  for(ll i = 0; i < 16; i++){
    cin >> init.f[i];
    if(init.f[i] == 0){
      init.f[i] = 16;
      init.space = i;
    }
  }

  string ans = interactive_deepening(init);

  cout << ans.size() << endl;
  //cout << ans << endl;



  return 0;
}
