#include<bits/stdc++.h>

using namespace std;
using ll=long long;

const double EPS=1e-7;

template<typename T>
int sign(T a){return (a<-EPS)?-1:(a>EPS)?1:0;}

template<typename T, typename U>
int cmp(T a, U b){
    /* a<b: -1, a==b: 0, a>b: 1 */
    return sign(a-b);}

template<typename T>
struct Point{
    T x,y;

    Point(): x(0), y(0){}
    Point(T x, T y): x(x), y(y){}

    // マイナス
    Point operator-() const { return Point(-x,-y);}

    // 和
    Point& operator+=(const Point &P){
        x+=P.x; y+=P.y;
        return *this;
    }

    Point operator+(const Point &P) const {return Point(*this)+=P;}

    // 差
    Point& operator-=(const Point &P){
        x-=P.x; y-=P.y;
        return *this;
    }

    Point operator-(const Point &P) const {return Point(*this)-=P;}

    // 積
    Point operator*(const Point &P) const {
        T a=x*P.x-y*P.y, b=x*P.y+y*P.x;
        return Point<T>(a,b);
    }

    //スカラー倍
    Point& operator*=(const T &a){
        x*=a; y*=a;
        return *this;
    }

    Point& operator*(const T &a) const {return Point(*this)*=a;}

    // ノルム
    T norm_2() const {return x*x+y*y;}
    double norm() const {return sqrt(x*x+y*y);}

    // クロス積
    T cross(const Point &P) const {return x*P.y-y*P.x;}
    T det(const Point &P) const {return x*P.y-y*P.x;}

    // ドット積
    T dot(const Point &P) const {return x*P.x+y*P.y;}

    // 角度
    double arg() const {return atan2(y,x);}

    // 比較
    bool operator<(const Point &P){
        if (cmp(x,P.x)) return cmp(x,P.x)<0;
        return cmp(y,P.y)<0;
    }

    // 入力
    friend istream &operator>>(istream &is, Point &P) {is >> P.x >> P.y; return (is);}

    // 出力
    friend ostream &operator<<(ostream &os, const Point &P) {return os << P.x << " " << P.y;}
};

template<typename T, typename U>
Point<U> operator*(const T &a, const Point<U> &P){return Point<U>(a*P.x, a*P.y);}

template<typename T>
struct Line{
    Point<T> begin, end;

    Line(const Point<T> &P, const Point<T> &Q): begin(P), end(Q){}

    Point<T> vectorize() const {return end-begin;}
    Point<T> counter_vectorize() const {return begin-end;}

    bool is_on(const Point<T> &P){
        int x=iSP(begin, P, end);
        return (x!=1) && (x!=-1);
    }
};

// 直線同士の交点 (平行でないことが前提!!)
template<typename T>
Point<T> Intersection_between_Line_and_Line(const Line<T> &L, const Line<T> &M){
    auto A=L.begin, B=L.end, C=M.begin, D=M.end;
    T k=(C-A).cross(D-C)/(B-A).cross(D-C);
    return A+k*(B-A);
}


int main(){
	int Q; cin >> Q;
	
	int ans;
	for (int q=0; q<Q; q++){
		Point<double> p0,p1,p2,p3;
		cin >> p0 >> p1 >> p2 >> p3;
		Line<double> L(p0,p1), M(p2,p3);
		
		cout << setprecision(15) << Intersection_between_Line_and_Line(L,M) << "\n";
		
	}
}

