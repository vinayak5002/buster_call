#include<stdio.h>

typedef struct dice{
    int top;
    int bottom;
    int right;
    int left;
    int front;
    int back;
}dice;

void roll(dice *p,char direction){
    int new_top=p->top;
    int new_bottom=p->bottom;
    int new_right=p->right;
    int new_left=p->left;
    int new_front=p->front;
    int new_back=p->back;

    if(direction=='N'){
        p->top=new_front;
        p->bottom=new_back;
        p->front=new_bottom;
        p->back=new_top;
    }else if(direction=='S'){
        p->top=new_back;
        p->bottom=new_front;
        p->front=new_top;
        p->back=new_bottom;
    }else if(direction=='E'){
        p->top=new_left;
        p->bottom=new_right;
        p->right=new_top;
        p->left=new_bottom;
    }else if(direction=='W'){
        p->top=new_right;
        p->bottom=new_left;
        p->right=new_bottom;
        p->left=new_top;
    }
}

void revolve(dice *p,char direction){
    int new_top=p->top;
    int new_bottom=p->bottom;
    int new_right=p->right;
    int new_left=p->left;
    int new_front=p->front;
    int new_back=p->back;

    if(direction=='R'){
        p->front=new_right;
        p->back=new_left;
        p->right=new_back;
        p->left=new_front;
    } else {
        p->front=new_left;
        p->back=new_right;
        p->right=new_front;
        p->left=new_back;
    }
}

int check(dice *p,dice *q){
    int i,j;

    for(i=0;i<6;i++){
        for(j=0;j<4;j++){
            if(p->top==q->top&&p->bottom==q->bottom&&p->right==q->right&&\
			p->left==q->left&&p->front==q->front&&p->back==q->back) return 1;
            else revolve(q,'R');
        }
        if(i%2==0) roll(q,'N');
        else roll(q,'W');
    }

    return 0;
}

int main(void){
    int n,i,j;
    int flag=0;
    
    scanf("%d",&n);

    dice pd[n];
    
    for(i=0;i<n;i++){
        for(j=0;j<6;j++){
            switch(j){
                case 0:scanf("%d",&pd[i].top); break;
                case 1:scanf("%d",&pd[i].front); break;
                case 2:scanf("%d",&pd[i].right); break;
                case 3:scanf("%d",&pd[i].left); break;
                case 4:scanf("%d",&pd[i].back); break;
                case 5:scanf("%d",&pd[i].bottom); break;
            }
        }
        for(j=0;j<i;j++){
            if(flag=check(&pd[j],&pd[i])) break;
    	}
		if(flag) break;
    }

    if(flag) puts("No");
    else puts("Yes");

    return 0;
}

