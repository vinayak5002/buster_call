#include<bits/stdc++.h>
#define ll long long
using namespace std;
const ll INF= 2000000000000000000LL;
struct Edge
{
    int v;
    ll w;
};
struct Node
{
    int u;
    ll dist_u;
};
struct cmp
{
    bool operator()(Node a, Node b)
    {
        return a.dist_u > b.dist_u;
    }
};
int n,m,r;
vector<Edge> E[100001];
vector<ll> D;
vector<int> trace;
void dijkstra(int n,int r)
{
    D.resize(n,INF);
    trace.resize(n,-1);
    D[r]=0;
    vector<bool> P(n,0);
    priority_queue<Node, vector<Node>,cmp> h;
    h.push({r,D[r]});

    while(!h.empty())
    {
        Node x= h.top();
        h.pop();
        int u = x.u;
        if(P[u]==true)
        {
            continue;
        }

        P[u]=true;
        for(auto e: E[u])
        {
            int v=e.v;
            ll w= e.w;
            if(D[v]>D[u]+w)
            {
                D[v]=D[u]+w;
                h.push({v,D[v]});
                trace[v]=u;
            }
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin>>n>>m>>r;
    for(int i=1; i<=m; i++)
    {
        int u,v,w;
        cin>>u>>v>>w;
        E[u].push_back({v, w});
E[v].push_back({u, w});
    }
    dijkstra(n,r);
    for(int i=0; i<n; i++)
    {
        if(D[i]==INF) cout<<"INF"<<'\n';
        else cout<<D[i]<<'\n';
    }
}

