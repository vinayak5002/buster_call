#include <iostream>
#include <vector>

// 入力されるデータを読み込む
// 入力されたデータとカードの配列を照合する
// 入力されていない分のカードがanswerになる
//（ このやり方で解けそう！）

int main()
{

    // 配列の準備　照合のためのチェックボックスを作る
    // 絵柄suitと番号rankで二次元配列
    std::vector<std::vector<int>> cards =
        {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // S スペード
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // H　ハート
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // C　クラブ
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  // D　ダイヤ
        };

    // nの準備　と　入力の用意
    int n;
    std::cin >> n;

    // (変数iの始まり方;何までループするか;どう変化しながら)
    for (int i = 0; i < n; i++)
    {
        // X 00 の形式のデータを受け取るため
        // それぞれ　charで記号 intで数字に対応
        char suit;
        int rank;
        // 入力の用意
        std::cin >> suit >> rank;

        // 入力されたデータを二次元配列に反映
        // 絵柄と番号をcards[][]の添え字に変換

        if (suit == 'S')
        {
            cards[0][rank - 1] = 1;
        }
        else if (suit == 'H')
        {
            cards[1][rank - 1] = 1;
        }
        else if (suit == 'C')
        {
            cards[2][rank - 1] = 1;
        }
        else
        {
            cards[3][rank - 1] = 1;
        }
    }

    std::vector<char> suits = {'S', 'H', 'C', 'D'};
    int suit_index = 0;

    for (char suit : suits)
    {
        for (int rank_index = 0; rank_index < 13; ++rank_index)
        {
            if (cards[suit_index][rank_index] == 0)
            {
                std::cout << suit << " " << rank_index + 1 << "\n";
            }
        }
        ++suit_index;
    }
}
