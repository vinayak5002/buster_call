#include<stdio.h>
#include<math.h>

double dist_p1 (int a[1000], int b[1000], int n)
{
    double distance=0.0;
    int i=0;
    for (i=0;i<n;i++)
    {
        distance += fabs((double)a[i]-b[i]);
    }
    return distance;
}

double dist_p2 (int a[1000], int b[1000], int n)
{
    double distance=0.0;
    int i=0;
    
    for (i=0;i<n;i++)
    {
        distance += pow(fabs((double)a[i]-b[i]),2);
    }
    distance = sqrt(distance);
    return distance;
}

double dist_p3 (int a[1000], int b[1000], int n)
{
    double distance=0.0;
    int i=0;
    for (i=0;i<n;i++)
    {
        distance += pow(fabs((double)a[i]-b[i]),3);
    }
    distance = cbrt(distance);
    return distance;
}


double dist_pInf (int a[1000], int b[1000], int n)
{
    double distance=0.0;
    int i=0;
    for (i=0;i<n;i++)
    {
        if (fabs((double)a[i]-b[i]) > distance)
        {
            distance = fabs((double)a[i]-b[i]);
        }    
    }
    return distance;
}

int main()
{
    int dimension=0;
    int i=0;
    scanf("%d",&dimension);
    int x[dimension];
    int y[dimension];
    for (i=0;i<dimension;i++)
    {
        scanf("%d",&x[i]);
    }
    for (i=0;i<dimension;i++)
    {
        scanf("%d",&y[i]);
    }
    printf("%f\n",dist_p1(x,y,dimension));
    printf("%f\n",dist_p2(x,y,dimension));
    printf("%f\n",dist_p3(x,y,dimension));
    printf("%f\n",dist_pInf(x,y,dimension));

    return 0;
}
