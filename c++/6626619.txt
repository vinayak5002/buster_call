#include<stdio.h>

#define MAX 100000
#define NIL -1

typedef struct pp{
	int p;
	int l;
	int r;
}ne;

ne KI[MAX];
int n,A[MAX];

void print( int );
int rec( int , int );

int main(void){
	int i,j;
	int k,o,d,a,f;
	
	scanf("%d",&n);
	
	for(i=0;i<n;i++){
		KI[i].p=NIL;
		KI[i].l=NIL;
		KI[i].r=NIL;
	}
	
	for(i=0;i<n;i++){
		scanf("%d %d",&k,&o);
		for(j=0;j<o;j++){
			scanf("%d",d);
			if(j==0){
				KI[k].l=d;
			}
			else{
				KI[a].r=d;
			}
			a=d;
			KI[a].p=k;
		}
	}
	
	for(i=0;i<n;i++){
		if( KI[i].p = NIL ){
			f=i;
		}
	}
	
	rec(f,0);
	
	for(i=0;i<n;i++){
		print(i);
	}
	
	return 0;
	
}

void print( int x ){
	int i,c;
	
	printf("node %d:",x);
	printf("parent = %d,",KI[x].p);
	printf("depth = %d,",A[x]);
	
	if( KI[x].p == NIL ){
		printf("root,");
	}
	else if( KI[x].l == NIL ){
		printf("leaf,");
	}
	else{
		printf("internal node,");
	}
	printf("[");
	
	c=KI[x].l;
	for(i=0;c != NIL;i++){
		if(i>0){
			printf(",");
		}
		printf("%d",c);
		c=KI[c].r;
	}
	
	printf("]");
	
}

int rec( int x,int y){
	A[x]=y;
	if( KI[x].r != NIL ){
		rec(KI[x].r,y);
	}
	if( KI[x].l != NIL ){
		rec(KI[x].l,y+1);
	}
}
