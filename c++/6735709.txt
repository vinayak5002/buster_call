#include <iostream>
#include <string>
#include <algorithm>
#include <functional>
#include <vector>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cmath>
#include <cassert>
#include <queue>
#include <map>
#include <set>
using namespace std;
using Int = int64_t;
using P = pair<Int, Int>;
const Int INF = 1 << 30;
const Int MOD = (Int)1e9 + 7;
const Int MAX_N = (Int)1e5 + 5;
#define debug(x) cout << #x << ": " << x << endl
#define debug2(x, y) cout << #x << ": " << x << ", " << #y << ": " << y << endl;
template <typename T1, typename T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &p)
{
    os << p.first << " " << p.second;
    return os;
}
template <typename T>
ostream &operator<<(ostream &os, const vector<T> &v)
{
    for (int i = 0; i < (int)v.size(); i++)
        os << v[i] << (i + 1 != v.size() ? " " : "");
    return os;
}

using Graph = vector<vector<int>>;

bool detect_circle(const Graph &g, int v, vector<int> &visited, vector<int> &seen)
{
    bool has_circle = false;
    visited[v] = true;
    for (const int &u : g[v])
    {
        // debug2(v, u);
        // debug(visited);
        // debug(seen);
        if (visited[u])
        {
            has_circle = true;
            break;
        }
        if (seen[u] == -1)
            has_circle |= detect_circle(g, u, visited, seen);
        else
            has_circle |= seen[u];
    }
    visited[v] = false;
    return seen[v] = has_circle;
}

void solve()
{
    Int V, E;
    cin >> V >> E;
    Graph g(V);
    for (int i = 0; i < E; i++)
    {
        int s, t;
        cin >> s >> t;
        g[s].push_back(t);
    }

    bool ans = false;
    vector<int> visited(V, 0), seen(V, -1);
    for (int i = 0; i < V; i++)
    {
        if (seen[i] != -1)
            continue;
        bool has_circle = detect_circle(g, i, visited, seen);
        // debug(i);
        // debug(has_circle);
        ans |= has_circle;
    }
    cout << (ans ? 1 : 0) << endl;
}

signed main()
{
    cin.tie(0);
    ios::sync_with_stdio(false);
    solve();
    return 0;
}
