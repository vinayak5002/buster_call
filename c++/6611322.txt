#include <iostream>
#include <algorithm>
#include <tuple>
#include <vector>
using namespace std;
using ll = long long;
struct UnionFind {
	vector<ll> par;
	UnionFind(ll n) {
		for (ll i = 0; i < n; i++) par.push_back(i);
	}
	bool is_same(ll a, ll b) {return root(a) == root(b);}
	ll root(ll a) {if (a == par[a]) return a; else return par[a] = root(par[a]);}
	void unite(ll a, ll b) {par[root(a)] = root(b);}
};
int main() {
	ll v, e; cin >> v >> e;
	using Edge = tuple<ll, ll, ll>;
	vector<Edge> edges;
	for (ll i = 0; i < e; i++) {
		ll s, t, w; cin >> s >> t >> w;
		edges.emplace_back(w, s, t);
	}
	sort(edges.begin(), edges.end());
	ll sum = 0;
	UnionFind uf(v);
	for (auto [c, from, to]: edges) {
		if (uf.is_same(from, to)) continue;
		sum += c;
		uf.unite(from, to);
	}
	cout << sum << endl;
}

