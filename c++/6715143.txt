#include <algorithm>
#include <cassert>
#include <climits>
#include <cmath>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <random>
#include <complex>
#include <bitset>
#include <iomanip>
#include <memory>
#include <functional>
#include <stack>

#define rep(i, n, s) for (int i = (s); i < int(n); i++)
#define per(i, n, s) for (int i = (n) - 1; i >= int(s); i--)
#define MM << " " <<
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)

template <class T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <class T>
using MaxHeap = std::priority_queue<T>;

using ll = long long;
using Pii = std::pair<int, int>;
using Pll = std::pair<ll, ll>;
using Pdd = std::pair<double, double>;

template <class T>
bool chmin(T &a, const T b) {
    if (b < a) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
bool chmax(T &a, const T b) {
    if (a < b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
void vdeb(const std::vector<T> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        if (i == n - 1)
            std::cout << da[i];
        else
            std::cout << da[i] << " ";
    }
    std::cout << std::endl;
}
template<class T>
void vdeb(const std::vector<std::vector<T>> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        // std::cout << i << " : ";
        vdeb(da[i]);
    }
    std::cout << std::endl;
}

using namespace std;

template <typename T, bool directed = false>
struct Dijkstra {
    struct edge {
        int to;
        T cost;
        int id;
        edge(int to, T cost, int id) : to(to), cost(cost), id(id) {}
    };

    vector<vector<edge>> es;
    vector<T> d;
    vector<int> pre_v, pre_e;
    const T INF_T = numeric_limits<T>::max() / 2;
    const int n;
    int m;

    Dijkstra(int n) : es(n), d(n), pre_v(n), pre_e(n), n(n), m(0) {}

    void add_edge(int from, int to, T cost) {
        assert(0 <= from);
        assert(0 <= to);
        assert(from < n);
        assert(to < n);
        es[from].emplace_back(to, cost, m);
        if (!directed) es[to].emplace_back(from, cost, m);
        m++;
    }

    T shortest_path(int s, int t = 0) {
        fill(begin(d), end(d), INF_T);
        using P = pair<T, int>;
        priority_queue<P, vector<P>, greater<P>> que;
        que.emplace(d[s] = 0, s);
        while (!que.empty()) {
            auto [p, i] = que.top();
            que.pop();
            if (p > d[i]) continue;
            for (auto &e : es[i]) {
                if (d[i] + e.cost < d[e.to]) {
                    pre_v[e.to] = i, pre_e[e.to] = e.id;
                    que.emplace(d[e.to] = d[i] + e.cost, e.to);
                }
            }
        }
        return d[t];
    }

    vector<int> restore_path(int s, int t, bool use_id = false) {
        if (d[t] == INF_T) return {};
        vector<int> ret;
        for (int now = t; now != s; now = pre_v[now]) ret.push_back(use_id ? pre_e[now] : now);
        if (!use_id) ret.push_back(s);
        reverse(begin(ret), end(ret));
        return ret;
    }
};

const int K = 40;

int n, p, q;
ll solve() {
    Dijkstra<ll, true> g(n*2*K);
    rep(i,p,0) {
        ll a, b, c;
        cin >> a >> b >> c;
        --a; --b;
        rep(j,K,0) {
            const int d = j * n * 2;
            g.add_edge(d + a, d + b, c);
            g.add_edge(d + b, d + a, c);
        }
    }
    rep(i,q,0) {
        ll a, b, c;
        cin >> a >> b >> c;
        --a; --b;
        rep(j,K,0) {
            const int d = j * n * 2 + n;
            g.add_edge(d + a, d + b, c);
            g.add_edge(d + b, d + a, c);
        }
    }
    rep(i,n,0) rep(j,K,0) {
        g.add_edge(j * n * 2 + i, j * n * 2 + n + i, 1LL << j);
        if(j) g.add_edge(j * n * 2 - n + i, j * n * 2 + i, 0LL);
    }
    g.shortest_path(0);
    ll ans = g.INF_T;
    rep(i,K*2,0) {
        chmin(ans, g.d[i * n + n - 1]);
    }
    return ans == g.INF_T ? -1 : ans;
}

int main() {
    vector<ll> ans;
    while(1) {
        cin >> n >> p >> q;
        if(n == 0) break;
        ans.emplace_back(solve());
    }
    for(auto &i : ans) cout << i << endl;
}
