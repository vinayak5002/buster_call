# 24.
# https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_11_B&lang=ja

def dfs(next_edges, d, f, node, time):
    t = time + 1
    d[node] = t
    for next_node in next_edges[node]:
        if d[next_node] == 0:
            t = dfs(next_edges, d, f, next_node, t)
    t += 1
    f[node] = t
    return t
        

def main():
    n = int(input())
    next_edges = [[] for _ in range(n)]
    for _ in range(n):
        values = list(map(int, input().split()))
        for i in range(values[1]):
            next_edges[values[0] - 1].append(values[i + 2] - 1)

    d = [0] * n
    f = [0] * n
    time = 0
    for i in range(n):
        if d[i] == 0:
            time = dfs(next_edges, d, f, i, time)

    for i in range(n):
        print(f"{i + 1} {d[i]} {f[i]}")



if __name__ == "__main__":
    main()




