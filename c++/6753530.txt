#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Edge{
    int start, end, weight;
    Edge(int s, int e, int w):start(s), end(e), weight(w){}
};

class DisjointSets{
    vector<int> parent, rank;

public:
    DisjointSets(int n){
        parent.resize(n, 0);
        rank.resize(n,0);
    }

    void makeSet(int i){
        parent[i] = i;
        rank[i] = 0;
    }

    int findSet(int i){
        if( parent[i] == i) return i;
        findSet(parent[i]);
    }

    void unite(int x, int y){
        int x_set_root = findSet(x);
        int y_set_root = findSet(y);

        if (rank[x_set_root] > rank[y_set_root]) parent[y_set_root] = x_set_root;
        else {
            parent[x_set_root] = y_set_root;
            if (rank[x_set_root] == rank[y_set_root]) rank[y_set_root]++;
        }      
    }
};

int main(){
    int v, e;
    cin >> v;
    DisjointSets ds(v);
    for(int i = 0; i < v; i++)ds.makeSet(i);
    int sum = 0;

    cin >> e;
    int start, end, weight;
    vector<Edge> edges;
    for (int i = 0; i < e; i++){
        cin >> start >> end >> weight;
        Edge ed(start, end, weight);
        edges.push_back(ed);
    }
    
    sort(edges.begin(), edges.end(), [](const Edge& first, const Edge& second){
        return first.weight < second.weight;
    });

    for( Edge edge : edges){
        if (ds.findSet(edge.start) != ds.findSet(edge.end)){
            ds.unite(edge.start, edge.end);
            sum += edge.weight;
        }
    }
    cout << sum << endl;
    return 0;
}

