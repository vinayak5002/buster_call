#include<bits/stdc++.h>
using namespace std;
#define rep(i,n) for (int i=0;i<(int)(n);i++)
#define all(v) v.begin(),v.end()
using ll=long long;
using pll=pair<ll,ll>;
const ll inf=-(1ll<<60),INF=(1ll<<60);
struct edge{
	ll to;
	ll cost;
	edge(ll to,ll cost) : to(to),cost(cost) {};
};
struct graph{
  ll v;
  vector<vector<edge>> g;
  vector<ll> d;
  graph(ll n){
    v=n;
    g.resize(v);
    d.resize(v,INF);
  }
	void add_edge(ll s,ll t,ll cost){
		g[s].push_back({t,cost});
	}
  void dijkstra(ll s){
    rep(i,d.size()){
      d[i]=INF;
    }
    priority_queue<pll,vector<pll>,greater<pll>> pq;
	d[s]=0;
	pq.push({0,s});
	while(!pq.empty()){
      ll x_dist,x_vertex;
      tie(x_dist,x_vertex)=pq.top();
      pq.pop();
      if(d[x_vertex]<x_dist) continue;
      for(auto edge:g[x_vertex]){
        if(d[x_vertex]+edge.cost<d[edge.to]){
          d[edge.to]=d[x_vertex]+edge.cost;
          pq.push({d[edge.to],edge.to});
        }
      }
    }
  }
};
template<class T> void chmin(T &a,T b){
  if(a>b){
    a=b;
  }
}
template<class T> void chmax(T &a,T b){
  if(a<b){
    a=b;
  }
}
int main(){
  ll ve,e,r;
	cin >> ve >> e >> r;
	graph g(ve);
	rep(i,e){
		ll s,t,d;
		cin >> s >> t >> d;
		g.add_edge(s,t,d);
	}
	g.dijkstra(r);
	rep(i,ve){
	if(g.d[i]==INF) cout << "INF" << endl;
	else cout << g.d[i] << endl;
	}
}
