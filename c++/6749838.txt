#include<bits/stdc++.h>
using namespace std;
//#include<atcoder/all>
//using namespace atcoder;
using ll = long long;
int w,h;
vector<string> SG;
int distG[20][20][1<<10];
const int INF = 1e9;

void solve(){
	int cnt = 0;
	{
		for(int i = 0;i<20;i++){
			for(int j = 0;j<20;j++){
				for(int k = 0;k<(1<<10);k++){
					distG[i][j][k] = INF;
				}
			}
		}
		for(int i = 0;i<h;i++){
			for(int j = 0;j<w;j++){
				if(SG[i][j]=='*'){
					SG[i][j] = cnt++;
				}
			}
		}
	}
	using TUP = tuple<int,int,int,int>;
	queue<TUP> Q;
	int dx[4] = {1,0,-1,0},dy[4] = {0,1,0,-1};
	for(int i = 0;i<h;i++){
		for(int j = 0;j<w;j++){
			if(SG[i][j]=='o'){
				Q.emplace(0,i,j,(1<<cnt)-1);
				distG[i][j][(1<<cnt)-1] = 0;
			}
		}
	}
	while(Q.size()){
		auto [dist,x,y,bit] = Q.front();
		Q.pop();
		for(int i = 0;i<4;i++){
			int nx = x + dx[i],ny = y + dy[i];
			if(nx<0||nx>=h||ny<0||ny>=w){
				continue;
			}
			if(SG[nx][ny]=='x'){
				continue;
			}
			int nbit = bit;
			for(int j = 0;j<cnt;j++){
				if(bit>>j&1&&SG[nx][ny]==j){
					nbit -= 1<<j;
				}
			}
			int ndist = dist+1;
			if(distG[nx][ny][nbit] > ndist){
				distG[nx][ny][nbit] = ndist;
				Q.emplace(ndist,nx,ny,nbit);
			}
		}
	}
	int ans = INF;
	for(int i = 0;i<h;i++){
		for(int j = 0;j<w;j++){
			if(ans>distG[i][j][0])ans = distG[i][j][0];
		}
	}
	if(ans == INF)ans = -1;
	cout<<ans<<endl;
}

signed main(){
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	while(1){
		cin >> w >> h;
		if(h==0&&w==0){
			break;
		}
		SG = vector<string>(h);
		for(int i = 0;i<h;i++){
			cin >> SG[i];
		}
		solve();
	}
}

