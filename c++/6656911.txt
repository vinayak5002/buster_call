#include <stdio.h>
#define MAX 200000000

int size;
int heap[MAX];

void maxHeapify(int heap[], int i){
	int left, right, tmp;
	int largest = i;
	left = i * 2;
	right = i * 2 + 1;
	
	
	// 左の子、自分、右の子で値が最大のノードを選ぶ
	//自分に対して、子が左のみの場合があるため、左の子、自分、右の子の順に探す
	if(left <= size && heap[left] > heap[largest]){
		largest = left;
	}
	
	else{
		largest = i;
	}
	
	if(right <= size && heap[right] > heap[largest]){
		largest = right;
	}
	
	//iがlargestと異なるときには再構築を行わなければならない
	//再構築する木の高さが2以上の時は再帰的に計算する
	if(largest != i){
		tmp = heap[i];				
		heap[i] = heap[largest];
		heap[largest] = tmp;
		maxHeapify(heap, largest);
	}
}

void buildMaxHeap(int heap[]){
	int i;
	//sizeの半分からヒープの再構築を行い、再構築の範囲を広げていく
	for(i = size / 2; i >= 1; i--){
		maxHeapify(heap, i);
	}
}

int main (void){
	int i;
	scanf("%d", &size);
	
	for(i = 1; i < size + 1; i++){
		scanf("%d", &heap[i]);
	}
	
	buildMaxHeap(heap);
	
	for(i = 1; i < size + 1; i++){
		printf(" %d", heap[i]);
	}
	
	return 0;
}
