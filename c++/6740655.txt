#include <bits/stdc++.h>
using namespace std;
void chmax(int& a, int b){ if(a < b) a = b; }


void uniq(vector<int>& a){
    sort(a.begin(), a.end());
    a.erase(unique(a.begin(), a.end()), a.end());
}
int index(const vector<int>& a, int x){
    return lower_bound(a.begin(), a.end(), x) - a.begin();
}
int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int N, K;
    cin >> N >> K;
    vector<int> X, Y, Z;
    vector<array<int, 6>> A(N);
    for(auto& [x1, y1, z1, x2, y2, z2] : A){
        cin >> x1 >> y1 >> z1 >> x2 >> y2 >> z2;
        X.push_back(x1);
        X.push_back(x2);
        Y.push_back(y1);
        Y.push_back(y2);
        Z.push_back(z1);
        Z.push_back(z2);
    }
    uniq(X);
    uniq(Y);
    uniq(Z);
    for(auto& [x1, y1, z1, x2, y2, z2] : A){
        x1 = index(X, x1);
        x2 = index(X, x2);
        y1 = index(Y, y1);
        y2 = index(Y, y2);
        z1 = index(Z, z1);
        z2 = index(Z, z2);
    }
    vector S(X.size(), vector(Y.size(), vector(Z.size(), 0)));
    for(auto [x1, y1, z1, x2, y2, z2] : A){
        S[x1][y1][z1]++;
        S[x1][y1][z2]--;
        S[x1][y2][z1]--;
        S[x1][y2][z2]++;
        S[x2][y1][z1]--;
        S[x2][y1][z2]++;
        S[x2][y2][z1]++;
        S[x2][y2][z2]--;
    }
    for(int i = 0; i + 1 < X.size(); i++) for(int j = 0; j < Y.size(); j++) for(int k = 0; k < Z.size(); k++) S[i + 1][j][k] += S[i][j][k];
    for(int i = 0; i < X.size(); i++) for(int j = 0; j + 1 < Y.size(); j++) for(int k = 0; k < Z.size(); k++) S[i][j + 1][k] += S[i][j][k];
    for(int i = 0; i < X.size(); i++) for(int j = 0; j < Y.size(); j++) for(int k = 0; k + 1 < Z.size(); k++) S[i][j][k + 1] += S[i][j][k];
    int64_t ans = 0;
    for(int i = 0; i + 1 < X.size(); i++) for(int j = 0; j + 1 < Y.size(); j++) for(int k = 0; k + 1 < Z.size(); k++) if(S[i][j][k] >= K){
        ans += int64_t(X[i + 1] - X[i]) * (Y[j + 1] - Y[j]) * (Z[k + 1] - Z[k]);
    }
    cout << ans << endl;
}

