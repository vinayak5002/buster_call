# 二次元累積和
m, n = map(int, input().split())
k = int(input())

j = [[0] * (n + 1) for _ in range(m + 1)]
o = [[0] * (n + 1) for _ in range(m + 1)]
i = [[0] * (n + 1) for _ in range(m + 1)]

for r in range(1, m + 1):
    s = ['0'] + list(input())
    for c in range(1, n + 1):
        j[r][c] = j[r - 1][c] + j[r][c - 1] - j[r - 1][c - 1]
        o[r][c] = o[r - 1][c] + o[r][c - 1] - o[r - 1][c - 1]
        i[r][c] = i[r - 1][c] + i[r][c - 1] - i[r - 1][c - 1]
        if s[c] == 'J':
            j[r][c] += 1
        elif s[c] == 'O':
            o[r][c] += 1
        else:
            i[r][c] += 1

for _ in range(k):
    a, b, c, d = map(int, input().split())
    j_cnt = j[c][d] - j[a - 1][d] - j[c][b - 1] + j[a - 1][b - 1]
    o_cnt = o[c][d] - o[a - 1][d] - o[c][b - 1] + o[a - 1][b - 1]
    i_cnt = i[c][d] - i[a - 1][d] - i[c][b - 1] + i[a - 1][b - 1]
    print(j_cnt, o_cnt, i_cnt)
    
