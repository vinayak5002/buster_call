#include <bits/stdc++.h>
using namespace std;

// template {{{
using i32 = int;
using u32 = unsigned int;
using i64 = long long;
using u64 = unsigned long long;

#define  range(i, l, r) for (i64 i = (i64)(l); i < (i64)(r); (i) += 1)
#define rrange(i, l, r) for (i64 i = (i64)(r) - 1; i >= (i64)(l); (i) -= 1)

#define  whole(f, x, ...) ([&](decltype((x)) container) { return (f)(  begin(container),  end(container), ## __VA_ARGS__); })(x)
#define rwhole(f, x, ...) ([&](decltype((x)) container) { return (f)( rbegin(container), rend(container), ## __VA_ARGS__); })(x)

#define debug(x) cerr << "(" << __LINE__ << ")" << #x << ": " << (x) << endl

constexpr i32 inf   = 1001001001;
constexpr i64 infll = 1001001001001001001ll;

constexpr i32 dx[] = {0, -1, 1, 0, -1, 1, -1, 1}; 
constexpr i32 dy[] = {-1, 0, 0, 1, -1, -1, 1, 1};

struct IoSetup { IoSetup(i32 x = 15){ cin.tie(0); ios::sync_with_stdio(0); cout << fixed << setprecision(x); cerr << fixed << setprecision(x); } } iosetup;

template <typename T = i64> T input() { T x; cin >> x; return x; }

template <typename T> ostream &operator<<(ostream &os, vector<T> &v) { range(i, 0, v.size()) { os << v[i] << (i + 1 != (int)v.size() ? " " : ""); } return os; } 
template <typename T> istream &operator>>(istream &is, vector<T> &v) { for (T &in : v) is >> in; return is; }

template <typename T1, typename T2> ostream &operator<<(ostream &os, pair<T1, T2> p) { os << "(" << p.first << ", " << p.second << ")"; return os; }
template <typename T1, typename T2> istream &operator>>(istream &is, pair<T1, T2> &p) { is >> p.first >> p.second; return is; }

template <typename T> vector<T> make_vector(size_t a, T b) { return vector<T>(a, b); }
template <typename... Ts> auto make_vector(size_t a, Ts... ts) { return vector<decltype(make_vector(ts...))>(a, make_vector(ts...)); }

template <typename T1, typename T2> inline bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
template <typename T1, typename T2> inline bool chmin(T1 &a, T2 b) { return a > b && (a = b, true); }
// }}}

bool solve() {
  string s1;
  cin >> s1;
  if (s1.front() == '.') return false;
  string s2;
  cin >> s2;

  if (s1 == s2) {
    cout << "IDENTICAL" << endl;
    return true;
  }

  s1 = '"' + s1 + '"';
  s2 = '"' + s2 + '"';

  int cnt = 0;
  vector< int > idxs1, idxs2;
  range(i, 0, s1.size()) if (s1[i] == '"') idxs1.emplace_back(i);
  range(i, 0, s2.size()) if (s2[i] == '"') idxs2.emplace_back(i);
  if (idxs1.size() != idxs2.size()) {
    cout << "DIFFERENT" << endl;
    return true;
  }

  for (size_t i = 0; i + 1 < idxs1.size(); i++) {
    string sb1 = s1.substr(idxs1[i] + 1, idxs1[i + 1] - idxs1[i] - 1);
    string sb2 = s2.substr(idxs2[i] + 1, idxs2[i + 1] - idxs2[i] - 1);
    if (i & 1) {
      cnt += (sb1 != sb2);
    } else {
      if (sb1 != sb2) {
        cout << "DIFFERENT" << endl;
        return true;
      }
    }
  }

  if (cnt == 1) {
    cout << "CLOSE" << endl;
    return true;
  }

  cout << "DIFFERENT" << endl;
  return true;
}

signed main() {
  while (solve());
}

