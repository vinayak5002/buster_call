#include <iostream>

struct in {
    operator char() const noexcept {
        char c = getchar_unlocked();
        while (c == ' ' || c == '\n' || c == '\r') c = getchar_unlocked();
        return c;
    }
    template<typename T> operator T() const noexcept {
        static_assert(std::is_integral_v<T>);
        static_assert(!std::is_same_v<T, char>);
        static_assert(!std::is_same_v<T, bool>);
        char c = operator char();
        T n = 0;
        if constexpr (std::is_signed_v<T>) {
            int sign = 1;
            if (c == '-') sign = -1, c = getchar_unlocked();
            while ('0' <= c && c <= '9') {
                n = n * 10 + (c - '0');
                c = getchar_unlocked();
            }
            n *= sign;
        } else {
            while ('0' <= c && c <= '9') {
                n = n * 10 + (c - '0');
                c = getchar_unlocked();
            }
        }
        return n;
    }
};

template<class Iterator> void read(Iterator first, Iterator last) noexcept {
    while (first != last) {
        if constexpr (std::is_same_v<decltype(*first), std::string&>) std::cin >> *(first++);
        else *(first++) = in();
    }
}

void out() noexcept { putchar_unlocked('\n'); }

template<typename Head> void out(Head&& head) noexcept {
    std::cout << head;
    putchar_unlocked(' ');
}

template<typename Head, typename...Tail> void out(Head&& head, Tail&&...tail) noexcept {
    std::cout << head;
    putchar_unlocked(' ');
    out(std::forward<Tail>(tail)...);
}

template<class Iterator> void dump(Iterator first, Iterator last) noexcept {
    while (first != last) {
        std::cout << *first;
        putchar_unlocked(++first == last ? '\n' : ' ');
    }
}

#include <vector>

template<typename T, class F> struct segtree {
private :
    const T e;
    const F f;
    int n;
    std::vector<T> v;
    T buffer;
    int last_referenced = 0;

    void update(int i) noexcept { v[i] = f(v[i << 1], v[i << 1 | 1]); }
    void update() noexcept {
        v[last_referenced] = buffer;
        while (last_referenced >>= 1) update(last_referenced);
    }
public :
    segtree(T e_, F f_) : e(e_), f(f_) { }
    void build(int n_) noexcept { v.resize((n = n_) * 2, e); }
    void build(int n_, T x) noexcept {
        n = n_;
        v.resize(n * 2, x);
        for (int i = n - 1; i; i--) update(i);
    }
    template<class Iterator> void build(Iterator first, Iterator last) noexcept {
        n = last - first;
        v.resize(n * 2, e);
        for (int i = 0; i < n; i++, first++) v[i + n] = *first;
        for (int i = n - 1; i; i--) update(i);
    }
    T& operator[](int i) noexcept {
        update();
        return buffer = v[last_referenced = i + n];
    }
    T fold(int l, int r) noexcept {
        update();
        l += n; r += n;
        T ret_l = e, ret_r = e;
        while (l < r) {
            if (l & 1) ret_l = f(ret_l, v[l++]);
            if (r & 1) ret_r = f(v[--r], ret_r);
            l >>= 1; r >>= 1;
        }
        return f(ret_l, ret_r);
    }
};

int main() {
    int n = in(), q = in();
    auto sg = segtree((1LL << 31) - 1, [](int a, int b){return std::min(a, b);});
    sg.build(n);
    while (q--) {
        int com = in(), x = in(), y = in();
        if (com == 0) sg[x] = y;
        else out(sg.fold(x, y + 1));
    }
}

