#include <iostream>

typedef struct {
    char mark;
    int num;
} Card;

void load_card(Card* card)
{
    std::cin >> card->mark >> card->num;

    return;
}

void load_cards(int n, Card* cards)
{
    for (int i = 0 ; i < n ; ++i)
    {
        load_card(&cards[i]);
    }

    return;
}

void print_card(Card* card)
{
    std::cout << card->mark << " " << card->num << std::endl;

    return;
}

void print_cards(int n, Card* cards)
{
    std::cout << "Not stable" << std::endl;
    
    print_card(&cards[0]);

    for (int i = 1 ; i < n ; ++i)
    {
        print_card(&cards[i]);
    }

    return;
}

int partition(Card* a, int p, int r)
{
    Card x = a[r-1];
    int i = p - 1;
    Card tmp;

    for (int j = p ; j < r - 1 ; ++j)
    {
        if (a[j].num <= x.num)
        {
            ++i;
            std::swap(a[i], a[j]);
        }
    }

    std::swap(a[i+1], a[r-1]);

    return i+1;
}

int quick_sort(Card* a, int p, int r)
{
    if (p < r)
    {
        int q = partition(a, p, r);
        quick_sort(a, p, q-1);
        quick_sort(a, q+1, r);
    }

    return 0;
}

int main()
{
    int n;

    std::cin >> n;

    Card cards[n];

    load_cards(n, cards);
    quick_sort(cards, 0, n);
    print_cards(n, cards);

    return 0;
}

