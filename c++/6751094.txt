#include <bits/stdc++.h>
using namespace std;

using Graph = vector<vector<int>>;

vector<long long> d, f;
const long long INF = 1 << 30;
long long timestamp = 0;

void rec (const Graph& G, int v) {
    if (f[v] != INF) return;

    timestamp++;
    d[v] = timestamp;

    for (auto e : G[v]) {
        if(e != v) rec(G, e);
    }
    timestamp++;
    f[v] = timestamp;
}

int main() {
    int N;
    cin >> N;

    Graph G(N);
    d.assign(N, INF);
    d[0] = 1;
    f.assign(N, INF);

    for (int i = 0; i < N; i++) {
        int a, n;
        cin >> a >> n;
        for (int j = 0; j < n; j++) {
            int t;
            cin >> t;
            G[a - 1].push_back(t - 1);
        }
    }

    for (int i = 0; i < N; i++){
        if(f[i] != INF) continue;

        rec(G, i);
    }

    for (int i = 0; i < N; i++) {
        cout << i + 1 << " " << d[i] << " " << f[i] << endl;
    }

}
