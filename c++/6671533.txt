#include<bits/stdc++.h>

using namespace std;

#define Reimu inline void // 灵梦赛高
#define Marisa inline int // 魔理沙赛高
#define Sanae inline bool // 早苗赛高

typedef long long LL;
typedef unsigned long long ULL;

typedef pair<int, int> Pii;
typedef tuple<int, int, int> Tiii;
#define fi first
#define se second

const double eps = 1e-9;

struct Vec { // Vector 向量 / 点
	double x, y;
	friend istream &operator>>(istream &cin, Vec &a) { return cin >> a.x >> a.y; } // 向量输入
	friend ostream &operator<<(ostream &cout, Vec b) { return cout << b.x << ' ' << b.y; } // 向量输出
	friend Vec operator-(Vec a) { return {-a.x, -a.y}; } // 相反向量
	friend Vec operator+(Vec a, Vec b) { return {a.x + b.x, a.y + b.y}; } // 向量加法
	friend Vec operator-(Vec a, Vec b) { return {a.x - b.x, a.y - b.y}; } // 向量减法
	friend Vec operator*(Vec a, double b) { return {a.x * b, a.y * b}; } // 向量数乘标量
	friend Vec operator/(Vec a, double b) { return {a.x / b, a.y / b}; } // 向量数除标量
	friend double operator|(Vec a, Vec b) { return a.x * b.x + a.y * b.y; } // 向量点积
	friend double operator&(Vec a, Vec b) { return a.x * b.y - a.y * b.x; } // 向量叉积
	friend double operator~(Vec a) { return sqrt(a | a); } // 向量模长
};

struct Seg { Vec p, v; }; // Segment 线段 / 直线
Marisa chkCrs(Seg a, Seg b) { // checkCross 判断两条线段是否相交
	Vec p1 = a.p, p2 = p1 + a.v, q1 = b.p, q2 = q1 + b.v;
	return max(p1.x, p2.x) - min(q1.x, q2.x) > -eps && max(q1.x, q2.x) - min(p1.x, p2.x) > -eps
		&& max(p1.y, p2.y) - min(q1.y, q2.y) > -eps && max(q1.y, q2.y) - min(p1.y, p2.y) > -eps
		&& (a.v & q1 - p1) * (a.v & q2 - p1) < eps && (b.v & p1 - q1) * (b.v & p2 - q1) < eps;
}
inline Vec getCrs(Seg a, Seg b) { // getCross 求两条直线交点
	return a.p + a.v / (a.v & b.v) * (b.p - a.p & b.v);
}
inline double disPL(Vec a, Seg b) { // distancePointLine 求点到直线距离
	return fabs((b.v & a - b.p) / ~b.v);
}
inline double disPS(Vec a, Seg b) { // distancePointSegment 求点到线段距离
	Vec p = b.p, q = p + b.v;
	return (a - p | b.v) > eps && (a - q | -b.v) > eps ? disPL(a, b) : min(~(a - p), ~(a - q));
}
inline double disSS(Seg a, Seg b) { // distanceSegmentSegment 求两线段间距离
	return chkCrs(a, b) ? 0 : min(min(disPS(a.p, b), disPS(a.p + a.v, b)), min(disPS(b.p, a), disPS(b.p + b.v, a)));
}

typedef vector<Vec> Pg; // Polygon 多边形

inline double area(Pg a) { // 多边形面积
	double res = 0;
	for (int i = 0; i < a.size(); ++i) res += a[i] & a[(i + 1) % a.size()];
	return fabs(res / 2);
}

int n;
Pg a;

int main() {
	ios::sync_with_stdio(false); cin.tie(nullptr);
	cout << setprecision(1) << fixed;
	cin >> n; a.resize(n);
	for (auto &x: a) cin >> x;
	double t = a[1] - a[0] & a[0] - a.back();
	for (int i = 1; i < n; ++i) if ((a[(i + 1) % n] - a[i] & a[i] - a[i - 1]) * t < -eps) return cout << "0\n", 0;
	cout << "1\n";
	return 0;
}

