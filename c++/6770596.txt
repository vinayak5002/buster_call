#include <bits/stdc++.h>

using namespace std;

#define rep(i,n) for(int i = 0; i < (int)(n); ++i)
#define rrep(i,n) for(int i = (int)(n) - 1; i >= 0; --i)
#define ALL(a) a.begin(), a.end()
#define Sort(a) sort(a.begin(), a.end())
#define RSort(a) sort(a.rbegin(), a.rend())

typedef long long int ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<long long> vll;
typedef vector<char> vc;
typedef vector<string> vst;
typedef vector<double> vd;
typedef pair<long long, long long> P;

const long long INF = 0x1fffffffffffffff;
const long long MOD = 1000000007;
const long double PI = acos(-1);
 
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
template<class T, class U> inline T vin(T& vec, U n) { vec.resize(n); for(int i = 0; i < (int) n; ++i) cin >> vec[i]; return vec; }
template<class T> inline void vout(T vec, string s = "\n"){ for(auto x : vec) cout << x << s; }
template<class... T> void in(T&... a){ (cin >> ... >> a); }
void out(){ cout << '\n'; }
template<class T, class... Ts> void out(const T& a, const Ts&... b){ cout << a; (cout << ... << (cout << ' ', b)); cout << '\n'; }
template<class T, class U> void inGraph(vector<vector<T>>& G, U n, U m, bool directed = false){ G.resize(n); for(int i = 0; i < m; i++){ int a, b; cin >> a >> b; a--, b--; G[a].push_back(b); if(!directed) G[b].push_back(a); } }

template <typename T>
vector<T> getSieve(T n){
    vector<T> c(n+1);
    for(int i = 2; i <= n; i++){
        if(c[i] != 0) continue;
        for(int j = 2 * i; j <= n; j += i){
            c[j] += 1;
        }
    }
    return c;
}

template <typename T>
vector<T> getDivisor(T n){
    T rt = sqrt(n);
    vector<T> res, resB;
    for(T i = 1; i*i <= n; i++){
        if(n % i == 0){
            res.push_back(i);
            T j = n / i;
            if(j != rt){
                resB.push_back(j);
            }
        }
    }
    for(T i = (int) resB.size() - 1; i >= 0; i--){
        res.push_back(resB[i]);
    }
    return res;
}

void input(){
}
 
void solve(){
    vector<int> s = getSieve((int) pow(10, 7.6));
    vector<int> p;
    for(int i = 2; i < pow(10, 7.6); i++){
        if(s[i] == 0){
            p.push_back(i);
        }
    }
    //out(p.size());
    while(true){
        ll n; in(n);
        if(n == 0) return;
        if(n == 1){
            out(3);
            continue;
        }
        ll cb = cbrt(n);
        vll a = {1, 1};
        ll check = 0;
        for(auto x : p){
            if(x >= cb && n % x == 0){
                a.push_back(x);
                n /= x;
                check++;
                break;
            }
        }
        ll ans = INF;
        if(true){
            for(ll i = max(1LL, cb - 1000); i < min(n, cb + 1000); i++){
                for(ll j = i; j <= min(n, cb + 1000); j++){
                    if(n % (i * j) == 0){
                        chmin(ans, n / (i * j) + i + j);
                    }
                }
            }
        }
        for(int i = cb; i >= 2; i--){
            while(n % i == 0){
                a.push_back(i);
                n /= i;
                check++;
                if(check == 2) break;
            }
            if(check == 2) break;

            ll m = cb + (cb - i);
            while(n % (m) == 0){
                a.push_back(m);
                n /= m;
                check++;
                if(check == 2) break;
            }
            if(check == 2) break;
        }
        RSort(a);

        if(check == 1){
            ans = INF;
            vll div = getDivisor(n);
            for(auto x : div){
                chmin(ans, x + (n / x));
            }
            ans += a[0];
        }else{
            chmin(ans, n + a[0] + a[1]);
        }
        //out(cb, n, a[0], a[1]);
        out(ans);
    }
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    //string file_input = "sample.txt";
    //FILE* in = freopen(file_input.c_str(), "r", stdin);
    input();
    solve();
}
