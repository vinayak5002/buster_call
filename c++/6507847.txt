#include <iostream>
#include <iomanip>
#include <string>
#include <vector>

using namespace std;
const int_fast64_t BASE = 1000000000LL;

int comp(const vector<int>& A, const vector<int>& B)
{
	if (A.size() != B.size()) return A.size() - B.size();
	for (int i = (int) A.size() - 1; i >= 0; --i) if (A[i] != B[i]) return A[i] - B[i];
	return 0;
}

struct Int {
	vector<int> A;
	bool s;

	int conv(const string& S, int b, int e)
	{
		return b >= e || s >= e ? 0 : conv(S, b, e - 1) * 10 + S[e - 1] - '0';
	}

	Int(const Int&) = default;
	Int(bool _s, int n) : A(n, 0), s(_s) {}
	Int(string S) : s(S[0] == '-') {
		for (int n = (int) S.size(); n >= s; n -= 9) A.push_back(conv(S, n - 9, n));
		if (A.back() == 0) A.pop_back();
	}

	void p() const {
		if (A.empty() || (A.size() == 1 && A[0] == 0)) {
			cout << 0 << endl;
			return;
		}
		if (s) cout << '-';
		auto p = A.crbegin();
		cout << *p;
		while (++p != A.crend()) cout << setw(9) << setfill('0') << *p;
		cout << endl;
	}

	vector<int> mul(unsigned int t, int n) const {
		vector<int> C(n, 0);
		int_fast64_t c = 0;
		for (int i = 0; i < (int) A.size(); ++i, c /= BASE) {
			C.push_back((c += (int_fast64_t) A[i] * (int_fast64_t) t) % BASE);
		}
		C.push_back(c);
		while (!C.empty() && C.back() == 0) C.pop_back();
		return C;
	}

	void sub(const vector<int>& B, int s)
	{
		int_fast64_t c = 0;
		int b = (int) B.size();
		for (int i = s; i < b; ++i) {
			c += (int_fast64_t) A[i] - (int_fast64_t) B[i];
			A[i] = (c + BASE) % BASE;
			c = (c - A[i]) / BASE;
		}
		if (b < (int) A.size()) A[b] += c;
		while (A.size() > 1 && A.back() == 0) A.pop_back();
	}

	Int operator / (const Int& a) const {
		Int Q(s != a.s, max(0, (int) (A.size() - a.A.size())) + 1), R(*this);
		while (comp(R.A, a.A) >= 0) {
			int n = R.A.size() - a.A.size(), t = R.A.back() / a.A.back();
			auto T = a.mul(t, n);
			if (comp(R.A, T) < 0) --t;
			if (t == 0) {
				--n;
				t = (R.A.back() * BASE + R.A[R.A.size() - 2]) / a.A.back();
			}
			T = a.mul(t, n);
			Q.A[n] = t;
			R.sub(T, n);
		}
		while (Q.A.size() > 1 && Q.A.back() == 0) Q.A.pop_back();
		return Q;
	}
};

int main()
{
	string A, B; cin >> A >> B;
	(Int(A) / Int(B)).p();
	return 0;
}

