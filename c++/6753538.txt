#include <bits/stdc++.h>
////#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vd = vector<double>;
using vvd = vector<vd>;
using vvvd = vector<vvd>;
#define all(A) A.begin(),A.end()
#define ALL(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll gcd(ll(a), ll(b)) {
    if (b == 0)return a;
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}

ll Eulers_phi(ll n) {
    ll res = 0;
    ll N = n;
    vll P;
    for (ll p = 2; p * p <= N; p++) {
        if (N % p == 0) {
            P.push_back(p);
            while (N % p == 0)N /= p;
        }
    }
    if (N != 1)P.push_back(N);

    N = P.size();
    rep(bit, (1 << N)) {
        ll k = 1;
        ll t = 0;
        rep(i, N) {
            if (bit & (1 << i)) {
                k *= P[i];
                t++;
            }
        }
        res += (t % 2 == 0 ? 1 : -1) * n / k;
    }
    return res;

}


int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);


    while(1){
        string S;
        cin>>S;
        if(S==".")return 0;
        string T;
        cin>>T;
        vector<string> SA,SB,TA,TB;
        string SS="",TT="";
        ll L=-1;
        vll SI,TI;
        rep(i,S.size()){
            if(S[i]=='"'){
                if(L!=-1){
                    SA.push_back(S.substr(L,i-L));
                    SI.push_back(SS.size());
                    L=-1;
                }
                else{
                    SI.push_back(SS.size());
                    L=i;
                }
            }
            else if(L==-1){
                SS.push_back(S[i]);
            }
        }
        L=-1;
        rep(i,T.size()){
            if(T[i]=='"'){
                if(L!=-1){
                    TI.push_back(TT.size());
                    TA.push_back(T.substr(L,i-L));
                    L=-1;
                }
                else{
                    TI.push_back(TT.size());
                    L=i;
                }
            }
            else if(L==-1){
                TT.push_back(T[i]);
            }
        }
        if(SS!=TT||TA.size()!=SA.size()||SI!=TI){
            cout<<"DIFFERENT"<<endl;
        }
        else{
            ll di=0;
            rep(i,SA.size()){
                di+=(SA[i]!=TA[i]);
            }
            if(di==0)cout<<"IDENTICAL"<<endl;
            else if(di==1)cout<<"CLOSE"<<endl;
            else cout<<"DIFFERENT"<<endl;
        }

    }
    





}
