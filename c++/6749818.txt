#!/usr/bin/env pypy3
import sys
from functools import lru_cache
sys.setrecursionlimit(1<<30)
readline = sys.stdin.readline

@lru_cache(maxsize=100000)
def DFS(S, goal, start):

    global dp

    if dp[S][goal] != -1:
        return dp[S][goal]

    if S == (1 << V) - 1 and goal == start:
        return 0

    res = INF

    for i in range(V):
        if not (S >> i & 1):
            res = min(res, DFS(S | (1 << i), i, start) + dist[goal][i])

    dp[S][goal] = res

    return res

if __name__ == '__main__':

    V, E = map(int, readline().split())
    INF = 1 << 30
    dist = [[INF] * V for _ in range(V)]

    for _ in range(E):
        s, t, d = map(int, readline().split())
        dist[s][t] = d

    dp = [[-1] * V for _ in range(1 << V)]

    ans = INF
    for v in range(V):
        ans = min(ans, DFS(0, v, v))
    
    if ans >= INF:
        ans = -1

    print(ans)
                 
