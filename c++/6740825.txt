#include <iostream>
#include <vector>
#include <algorithm>
#include <deque>
#include <queue>
#include <string>
#include <iomanip>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <utility>
#include <stack>
#include <random>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <assert.h>
#if __has_include(<atcoder/all>)
#include <atcoder/all>
using namespace atcoder;
#endif
using namespace std;
using ll=long long;
#define read(x) cin>>(x);
#define readll(x) ll (x);cin>>(x);
#define readS(x) string (x);cin>>(x);
#define readvll(x,N) vector<ll> (x)((N));for(int i=0;i<(N);i++){cin>>(x)[i];}
#define rep(i,N) for(ll (i)=0;(i)<(N);(i)++)
#define rep2d(i,j,H,W) for(ll (i)=0;(i)<(H);(i)++)for(ll (j)=0;(j)<(W);j++)
#define is_in(x,y) (0<=(x) && (x)<H && 0<=(y) && (y)<W)
#define yn {cout<<"Yes"<<endl;}else{cout<<"No"<<endl;}
inline ll powll(ll x,ll n){ll r=1;while(n>0){if(n&1){r*=x;};x*=x;n>>=1;};return r;}

#include <stdlib.h>
namespace Dice{
  struct Dice{
    int top,front,bottom,back,left,right;
    Dice(){
      top=1;
      front=3;
      bottom=6;
      back=4;
      left=2;
      right=5;
    }
  };
  Dice roll_right(const Dice& x){
    Dice res;
    res.top=x.left;
    res.front=x.front;
    res.bottom=x.right;
    res.back=x.back;
    res.left=x.bottom;
    res.right=x.top;
    return res;
  }

  Dice roll_left(const Dice& x){
    Dice res;
    res.top=x.right;
    res.front=x.front;
    res.bottom=x.left;
    res.back=x.back;
    res.left=x.top;
    res.right=x.bottom;
    return res;
  }

  Dice roll_front(const Dice& x){
    Dice res;
    res.top=x.back;
    res.front=x.top;
    res.bottom=x.front;
    res.back=x.bottom;
    res.left=x.left;
    res.right=x.right;
    return res;
  }

  Dice roll_back(const Dice& x){
    Dice res;
    res.top=x.front;
    res.front=x.bottom;
    res.bottom=x.back;
    res.back=x.top;
    res.left=x.left;
    res.right=x.right;
    return res;
  }

  Dice spin_right(const Dice& x){
    Dice res;
    res.top=x.top;
    res.front=x.right;
    res.bottom=x.bottom;
    res.back=x.left;
    res.left=x.front;
    res.right=x.back;
    return res;
  }

  Dice spin_left(const Dice& x){
    Dice res;
    res.top=x.top;
    res.front=x.left;
    res.bottom=x.bottom;
    res.back=x.right;
    res.left=x.back;
    res.right=x.front;
    return res;
  }

  Dice getDice(int _top,int _front){
    Dice res;
    if(_top==1){
      if(_front==2){
        res=spin_left(res);
        return res;
      }else if(_front==3){
        return res;
      }else if(_front==4){
        res=spin_left(res);
        res=spin_left(res);
        return res;
      }else if(_front==5){
        res=spin_right(res);
        return res;
      }else{
        exit(1);
      }
    }else if(_top==2){
      res=roll_right(res);
      if(_front==1){
        res=spin_right(res);
        return res;
      }else if(_front==3){
        return res;
      }else if(_front==4){
        res=spin_right(res);
        res=spin_right(res);
        return res;
      }else if(_front==6){
        res=spin_left(res);
        return res;
      }else{
        exit(1);
      }
    }else if(_top==3){
      res=roll_back(res);
      if(_front==1){
        res=spin_left(res);
        res=spin_left(res);
        return res;
      }else if(_front==2){
        res=spin_left(res);
        return res;
      }else if(_front==5){
        res=spin_right(res);
        return res;
      }else if(_front==6){
        return res;
      }else{
        exit(1);
      }
    }else if(_top==4){
      res=roll_front(res);
      if(_front==1){
        return res;
      }else if(_front==2){
        res=spin_left(res);
        return res;
      }else if(_front==5){
        res=spin_right(res);
        return res;
      }else if(_front==6){
        res=spin_left(res);
        res=spin_left(res);
        return res;
      }else{
        exit(1);
      }
    }else if(_top==5){
      res=roll_left(res);
      if(_front==1){
        res=spin_left(res);
        return res;
      }else if(_front==3){
        return res;
      }else if(_front==4){
        res=spin_left(res);
        res=spin_left(res);
        return res;
      }else if(_front==6){
        res=spin_right(res);
        return res;
      }else{
        exit(1);
      }
    }else{
      res=roll_left(res);
      res=roll_left(res);
      if(_front==2){
        res=spin_right(res);
        return res;
      }else if(_front==3){
        return res;
      }else if(_front==4){
        res=spin_left(res);
        res=spin_left(res);
        return res;
      }else if(_front==5){
        res=spin_left(res);
        return res;
      }else{
        exit(1);
      }
    }
    //exit(1);
  }
}


int main(){
  vector<int> d(6);
  for(int i=0;i<6;i++){
    cin>>d[i];
  }
  int n;
  cin>>n;
  for(int i=0;i<n;i++){
    int t,f;
    cin>>t>>f;
    Dice::Dice dice=Dice::getDice(t,f);
    cout<<d[dice.right-1]<<endl;
  }
}

