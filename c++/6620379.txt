#include<cstdio>
#include<vector>
#include<cstring>
#include<queue>
using namespace std;

const int maxn=10000+50;
const int maxv=maxn;
const int INF=100000000;


typedef pair<int,int>P;

struct edge{
    int to,cap,cost,rev;
    edge(){}
    edge(int t,int ca,int co,int r):to(t),cap(ca),cost(co),rev(r){}
};

int V;
vector<edge>es[maxv];

int h[maxv];
int dist[maxv];
int prevv[maxv],preve[maxv];

void add_edge(int f,int t,int ca,int co){
    es[f].push_back(edge(t,ca,co,es[t].size()));
    es[t].push_back(edge(f,0,-co,es[f].size()-1));
}

int min_cost_flow(int s,int t,int f){
    fill(h,h+V,INF);
    h[s]=0;

    int res=0;

    bool update=true;
    while(update){
        update=false;

        for(int v=0;v<V;v++){
            if(h[v]==INF)continue;

            for(int i=0;i<es[v].size();i++){
                edge& e=es[v][i];
                if(e.cap>0&&h[e.to]>h[v]+e.cost){
                    h[e.to]=h[v]+e.cost;
                    prevv[e.to]=v;
                    preve[e.to]=i;
                    update=true;
                }
            }
        }
    }

    if(h[t]==INF)return -1;

    int d=f;
    for(int v=t;v!=s;v=prevv[v])
        d=min(d,es[prevv[v]][preve[v]].cap);

    f-=d;
    res+=d*h[t];

    for(int v=t;v!=s;v=prevv[v]){
        edge& e=es[prevv[v]][preve[v]];
        e.cap-=d;
        es[v][e.rev].cap+=d;
    }

    while(f>0){
        fill(dist,dist+V,INF);
        dist[s]=0;

        priority_queue<P,vector<P>,greater<P> >que;
        que.push(P(0,s));

        while(!que.empty()){
            int v=que.top().second;que.pop();

            for(int i=0;i<es[v].size();i++){
                edge&e=es[v][i];

                if(e.cap>0&&dist[e.to]>dist[v]+e.cost+h[v]-h[e.to]){
                    dist[e.to]=dist[v]+e.cost+h[v]-h[e.to];
                    prevv[e.to]=v;
                    preve[e.to]=i;
                    que.push(P(dist[e.to],e.to));
                }
            }
        }

        if(dist[t]==INF)return -1;

        for(int i=0;i<V;i++)h[i]+=dist[i];

        int d=f;
        for(int v=t;v!=s;v=prevv[v])
            d=min(d,es[prevv[v]][preve[v]].cap);

        f-=d;
        res+=d*h[t];

        for(int v=t;v!=s;v=prevv[v]){
            edge& e=es[prevv[v]][preve[v]];
            e.cap-=d;
            es[v][e.rev].cap+=d;
        }
    }
    return res;
}

int M,N,K;
int w[maxn];
int a[maxn];

int reco[maxn];

void solve(){
    scanf("%d%d%d",&M,&N,&K);

    for(int i=1;i<=N;i++)
        scanf("%d",&w[i]);

    int ans=0;
    int n=0;

    for(int i=0;i<K;i++){
        int u;
        scanf("%d",&u);
        if(n==0||u!=a[n-1]){
            a[n++]=u;
            ans+=w[u];
        }
    }

    V=n;

    for(int i=0;i<maxn;i++)es[i].clear();

    memset(reco,-1,sizeof(reco));

    for(int i=0;i<n;i++){
        int u=a[i];
        if(reco[u]>=0)
            add_edge(reco[u],i-1,1,-w[u]);
        reco[u]=i;

        add_edge(i,i+1,INF,0);
    }

    printf("%d\n",ans+min_cost_flow(0,n-1,M-1));
}
int main()
{
    solve();
}












