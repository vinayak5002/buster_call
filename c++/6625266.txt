#include <bits/stdc++.h>
//#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
#define all(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

vector<ll> fact, factinv, inv;
ll mod = 998244353;
void prenCkModp(ll n) {
    fact.resize(n + 5);
    factinv.resize(n + 5);
    inv.resize(n + 5);
    fact.at(0) = fact.at(1) = 1;
    factinv.at(0) = factinv.at(1) = 1;
    inv.at(1) = 1;
    for (ll i = 2; i < n + 5; i++) {
        fact.at(i) = (fact.at(i - 1) * i) % mod;
        inv.at(i) = mod - (inv.at(mod % i) * (mod / i)) % mod;
        factinv.at(i) = (factinv.at(i - 1) * inv.at(i)) % mod;
    }

}
ll nCk(ll n, ll k) {
    if (n < k) return 0;
    return fact.at(n) * (factinv.at(k) * factinv.at(n - k) % mod) % mod;
}

bool chmax(ll& p, ll q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

bool chmin(ll& p, ll q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll sti(string S) {
    ll res = 0;
    rep(i, S.size()) {
        res += S[i] - '0';
        res *= 10;
    }
    return res / 10;
}

string ist(ll n, ll L) {
    string res = "";
    rep(l, L)res += '0';
    ll p = L - 1;
    while (n > 0) {
        res[p] = char(n % 10 + '0');
        p--;
        n /= 10;
    }
    return res;
}

ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}
vvll G;
vector<bool> seen;
vll D;
bool C = true;
void dfs(ll n) {
    seen[n] = true;
    for (auto v : G[n]) {
        if (seen[v]) {
            if (D[n] == D[v])C = false;
            continue;
        }
        else {
            D[v] = 1 - D[n];
            dfs(v);
        }
    }
}


int main() {
    //cin.tie(nullptr);
    //ios::sync_with_stdio(false);

    while (1) {
        ll N, M;
        cin >> N >> M;
        if (N == 0)return 0;
        G.assign(N, {});
        seen.assign(N, false);
        D.assign(N, -1);
        D[0] = 0;
        C = true;
        rep(m, M) {
            ll U, V;
            cin >> U >> V;
            U--; V--;
            G[U].push_back(V);
            G[V].push_back(U);
        }
        dfs(0);

        ll a = 0;
        rep(i, N) {
            a += (D[i] == 1);
        }
        if (!C) {
            cout << 0 << endl;
        }
        else {

            ll b = N - a;
            if (a % 2 == 0 && b % 2 == 0) {
                if (a == b) {
                    cout << 1 << endl << a / 2 << endl;


                    continue;

                }
                cout << 2 << endl;
                cout << min(a, b) / 2 << endl << max(a, b) / 2 << endl;
            }
            else if (a % 2 == 0) {
                cout << 1 << endl << a / 2 << endl;
            }
            else if (b % 2 == 0) {
                cout << 1 << endl << b / 2 << endl;
            }
            else {
                cout << 0 << endl;
            }

        }
    }


}
