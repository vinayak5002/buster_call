#define _USE_MATH_DEFINES
#include<iostream>
#include<iomanip>
#include<vector>
#include<string>
#include<algorithm>
#include<cmath>
#include<stack>
#include<queue>
#include<set>
#include<map>
#include<climits>
#include<bitset>
#include<unordered_map>
#include<unordered_set>
#include<random>
#include<list>
#include<functional>


using namespace std;


#define LP(I,S,G) for (long long int I = (S); I < (G); I++)
#define IN(X) 	for (int in = 0; in < X.size(); in++)cin >> X[in]
#define OUT(X) 	for (int in = 0; in < X.size(); in++)cout << X[in]<<" "
#define SORT(X) sort((X).begin(), (X).end())
#define CSORT(X,Y) sort(X.begin(), X.end(),Y)
#define COPY(X,Y) copy(X.begin(), X.end(), Y.begin())
#define ALL(X,Y) for (auto X = (Y).begin(); X != (Y).end(); X++)
#define FULL(a)  (a).begin(),(a).end()
#define BFS(Q,S) for(Q.push(S);Q.size()!=0;Q.pop())


typedef long long int ll;
typedef unsigned long long int ull;
long long int M = 998244353;
int dx[] = { 1,0,-1,0 }, dy[] = { 0,-1,0,1 };
ll MAX(ll A, ll B) { return ((A) > (B) ? (A) : (B)); }
ll MIN(ll A, ll B) { return ((A) < (B) ? (A) : (B)); }


struct HashPair {

	//注意 constがいる
	template<class T1, class T2>
	size_t operator()(const pair<T1, T2> &p) const {

		//first分をハッシュ化する
		auto hash1 = hash<T1>{}(p.first);

		//second分をハッシュ化する
		auto hash2 = hash<T2>{}(p.second);

		//重複しないようにハッシュ処理
		size_t seed = 0;
		seed ^= hash1 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		seed ^= hash2 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		return seed;
	}
};

template<class I1, class I2>
istream& operator>>(istream& s, pair<I1, I2>& in) {
	s >> in.first >> in.second;
	return s;
}

int main() {
	while (1) {
		int n;
		cin >> n;
		if (n == 0)break;
		vector<ll> a(n);
		IN(a);
		vector<vector<ll>> dp(n, vector<ll>(n, 0));
		LP(i, 1, n) {
			LP(l, 0, n) {
				ll r = l + i;
				if (r >= n)continue;
				if (r - l == 1) {
					if (abs(a[l] - a[r]) <= 1) {
						dp[l][r] = 2;
					}
				}
				else {
					LP(k, l+1, r) {
						dp[l][r] = MAX(dp[l][r], dp[l][k] + dp[k + 1][r]);
					}
					if (dp[l + 1][r - 1] == r - 1-(l+1)+1) {
						if (abs(a[l] - a[r]) <= 1) {
							dp[l][r] = r - l + 1;
						}
					}
				}
			}
		}
		cout << dp[0][n - 1] << "\n";
	}
	return 0;
}
