#include <bits/stdc++.h>
using namespace std;
#ifdef tabr
#include "library/debug.cpp"
#else
#define debug(...)
#endif

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int h, w;
    cin >> h >> w;
    vector<string> a(h);
    for (int i = 0; i < h; i++) {
        cin >> a[i];
    }
    string s;
    cin >> s;
    int n = (int) s.size();
    vector b(h, vector(w, vector(n, vector<bool>(4))));
    vector<int> c(n, -1);
    stack<int> sk;
    for (int i = 0; i < n; i++) {
        if (s[i] == '{' || s[i] == '[') {
            sk.emplace(i);
        } else if (s[i] == '}' || s[i] == ']') {
            c[i] = sk.top();
            c[sk.top()] = i;
            sk.pop();
        }
    }
    int x, y, z = 0, dir = 0;
    const int dx[] = {-1, 0, 1, 0};
    const int dy[] = {0, -1, 0, 1};
    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            if (a[i][j] == 's') {
                x = i;
                y = j;
            }
        }
    }
    int ans = 0;
    while (a[x][y] != 'g') {
        if (s[z] == ']') {
            z++;
        } else if (s[z] == '}') {
            z = c[z];
        } else if (s[z] == '[' || s[z] == '{') {
            z++;
            bool flag = true;
            if (s[z] == '~') {
                z++;
            }
            if (s[z] == 'N') {
                flag = (dir == 0);
            } else if (s[z] == 'E') {
                flag = (dir == 1);
            } else if (s[z] == 'S') {
                flag = (dir == 2);
            } else if (s[z] == 'W') {
                flag = (dir == 3);
            } else if (s[z] == 'C') {
                int nx = x + dx[dir];
                int ny = y + dy[dir];
                flag = (a[nx][ny] == '#');
            } else {
                assert(s[z] == 'T');
            }
            if (s[z - 1] == '~') {
                flag = !flag;
            }
            if (flag) {
                z++;
            } else {
                while (s[z] != '[' && s[z] != '{') {
                    z--;
                }
                z = c[z];
                z++;
            }
        } else {
            ans++;
            if (s[z] == '^') {
                int nx = x + dx[dir];
                int ny = y + dy[dir];
                if (a[nx][ny] != '#') {
                    x = nx;
                    y = ny;
                }
            } else if (s[z] == 'v') {
                int nx = x - dx[dir];
                int ny = y - dy[dir];
                if (a[nx][ny] != '#') {
                    x = nx;
                    y = ny;
                }
            } else if (s[z] == '<') {
                dir += 1;
                dir %= 4;
            } else if (s[z] == '>') {
                dir += 3;
                dir %= 4;
            } else {
                assert(false);
            }
            if (b[x][y][z][dir]) {
                ans = -1;
                break;
            }
            b[x][y][z][dir] = true;
            z++;
        }
    }
    if (a[x][y] != 'g') {
        ans = -1;
    }
    cout << ans << '\n';
    return 0;
}
