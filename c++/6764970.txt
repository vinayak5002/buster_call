#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <numeric>
#include <iomanip>
#include <map>
#include <queue>
#define rep(i, a, b) for (int i = a; i < b; ++i)
using namespace std;

const int MOD = 998244353;

const long long INF = 1LL << 60;

template<class T> bool chmin(T& a, T b) { if (a > b) { a = b; return true; } else return false; }
template<class T> bool chmax(T& a, T b) { if (a < b) { a = b; return true; } else return false; }

struct Edge {
    int to;
    long long w;
    Edge(int to, int w) : to(to), w(w) {}
};

using Graph = vector<vector<Edge>>;

int N, M;

vector<long long> dijkstra(Graph G, int s) {
    vector<long long> dist(N, INF);
    dist[s] = 0;

    // (d[v], v) のペアを要素としたヒープを作る(最小なものが前に来る)
    priority_queue<pair<long long, int>,
                    vector<pair<long long, int>>,
                    greater<pair<long long, int>>> que;
    que.push({dist[s], s});

    // ダイクストラ法の反復を開始
    while (!que.empty()) {
        // v: 使用済みでない頂点のうち d[v] が最小の頂点
        // d: v に対するキー値
        int v = que.top().second;
        long long d = que.top().first;
        que.pop();

        // d > dist[v] は，(d, v) がゴミである(つまり緩和前の値である)ことを意味する
        if (d > dist[v]) continue;

        // 頂点 v を始点とした各辺を緩和
        for (auto e : G[v]) {
            if (chmin(dist[e.to], dist[v] + e.w)) {
                // 更新があるならヒープに新たに挿入する
                que.push({dist[e.to], e.to});
            }
        }
    }

    return dist;
}

int main() {
    int s;
    cin >> N;

    Graph G(N);
    for (int i = 0; i < N; ++i) {
        int u, k; cin >> u >> k;
        rep(j, 0, k) {
            int v, c; cin >> v >> c;
            G[u].push_back(Edge(v, c));
        }
    }

    vector<long long> dist = dijkstra(G, 0);

    // output
    for (int v = 0; v < N; ++v) {
        if (dist[v] < INF) cout << v << " " << dist[v] << endl;
        else cout << "INF" << endl;
    }
}
