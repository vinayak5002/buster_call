#define _USE_MATH_DEFINES
#include<bits/stdc++.h>
#include<unordered_map>

using namespace std;
#define LP(I,S,G) for (long long int I = (S); I < (G); I++)
#define IN(X) 	for (int in = 0; in < X.size(); in++)cin >> X[in]
#define OUT(X) 	for (int in = 0; in < X.size(); in++)cout << X[in]<<" "
#define SORT(X) sort((X).begin(), (X).end())
#define CSORT(X,Y) sort(X.begin(), X.end(),Y)
#define COPY(X,Y) copy(X.begin(), X.end(), Y.begin())
#define ALL(X,Y) for (auto X = (Y).begin(); X != (Y).end(); X++)
#define FULL(a)  (a).begin(),(a).end()
#define BFS(Q,S) for(Q.push(S);Q.size()!=0;Q.pop())
typedef long long int ll;
typedef unsigned long long int ull;
long long int M = pow(10, 9) + 7;


int dx[] = { 0,-1,0,1 }, dy[] = { -1,0,1,0 };

ll MAX(ll A, ll B) { return ((A) > (B) ? (A) : (B)); }
ll MIN(ll A, ll B) { return ((A) < (B) ? (A) : (B)); }
long long int xor128() {
	static long long int x = 123456789, y = 362436069, z = 521288629, w = 88675123;
	long long int t = (x ^ (x << 11));
	x = y; y = z; z = w;
	return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
}

struct HashPair {
	//注意 constがいる
	template<class T1, class T2>
	size_t operator()(const pair<T1, T2> &p) const {
		//first分をハッシュ化する
		auto hash1 = hash<T1>{}(p.first);
		//second分をハッシュ化する
		auto hash2 = hash<T2>{}(p.second);
		//重複しないようにハッシュ処理
		size_t seed = 0;
		seed ^= hash1 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		seed ^= hash2 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		return seed;
	}
};
template<class I1, class I2>
istream& operator>>(istream& s, pair<I1, I2>& in) {
	s >> in.first >> in.second;
	return s;
}

int main() {
	map<string, ll> w_t{
		{"Sun",0},
		{"Mon",1440},
		{"Tue",2880},
		{"Wed",4320},
		{"Thu",5760},
		{"Fri",7200},
		{"Sat",8640}
	};
	pair<ll, ll> day = { 360,1080 };
	while (1) {
		ll s, n, t, p, m;
		string w, d;
		cin >> s >> n >> t >> w >> d >> p >> m;
		if (s == 0)break;
		vector<ll> week(10081, 0);
		if (w == "All") {
			if (d == "All") {
				week[0] = 1;
			}
			else {
				if (d != "Day")week[0] = 1;
				ALL(i, w_t) {
					if (d == "Day") {
						week[i->second + day.first] += 1;
						week[i->second + day.second] -= 1;
					}
					else {
						week[i->second + day.first] -= 1;
						week[i->second + day.second] += 1;
					}
				}
				
			}
			
		}
		else {
			if (d == "All") {
				week[w_t[w]] = 1;
				week[w_t[w]+1440] = -1;
			}
			else {
				if (d != "Day") {
					week[w_t[w]] = 1;
					week[w_t[w] + 1440] = -1;
				}
				if (d == "Day") {
					week[w_t[w] + day.first] += 1;
					week[w_t[w] + day.second] -= 1;
				}
				else {
					week[w_t[w] + day.first] -= 1;
					week[w_t[w] + day.second] += 1;
				}
			}
		}
		LP(i, 0, 10080) {
			week[i + 1] += week[i];
//			cout <<i/1440<<":"<<(i/60)%24<<":"<<i%60<<"\t"<< week[i] << "\n";
		}
		double ans = 0;
		LP(base, 0, 10080) {
			ll start = base;
			double res = 1.0;
			LP(i, 0, m) {
				LP(k, start, start + s + 1) {
					if (week[k % 10080]) {
						res *= pow((p - 1.0) / p, n);
						break;
					}
				}
				start = (start + t) % 10080;
			}
			res = 1 - res;
			if (res > ans)ans = res;
		}
		
		
		cout << std::fixed << std::setprecision(15) <<ans << endl;
	}
	return 0;
}

