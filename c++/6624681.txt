#include <bits/stdc++.h>
using namespace std;

int main()
{

    int n;
    cin >> n;
    vector<int> a(n);
    vector<int> c(n);
    vector<string> b(n);
    vector<string> d(n);
    map<string, int> m;
    for (int i = 0; i < n; i++)
    {
        cin >> b[i];
        d[i] = b[i];
        a[i] = b[i][1] - '0';
        c[i] = a[i];
        m[b[i]] = i;
    }

    int count = 0;
    int copy = 0;
    string s;
    do
    {
        count = 0;
        for (int i = 0; i < n - 1; i++)
        {
            if (a[i] > a[i + 1])
            {
                copy = a[i + 1];
                a[i + 1] = a[i];
                a[i] = copy;
                s = b[i + 1];
                b[i + 1] = b[i];
                b[i] = s;
                count++;
            }
        }
    } while (count != 0);

    for (int i = 0; i < n; i++)
    {
        if (i != n - 1)
            cout << b[i] << ' ';
        else
            cout << b[i] << endl;
    }
    bool check = true;

    for (int i = 0; i < n - 1; i++)
    {
        if (b[i][1] == b[i + 1][1])
        {
            if (m[b[i]] > m[b[i + 1]])
                check = false;
        }
    }

    if (check)
    {
        cout << "Stable" << endl;
    }
    else
    {
        cout << "Not stable" << endl;
    }

    for (int i = 0; i < n; i++)
    {
        int min = 10000;
        int zyun = 0;
        for (int j = i; j < n; j++)
        {
            if (c[j] < min)
            {
                min = c[j];
                zyun = j;
            }
        }
        if (i == zyun)
            continue;
        else
        {
            int copy = c[i];
            c[i] = c[zyun];
            c[zyun] = copy;
            s = d[i];
            d[i] = d[zyun];
            d[zyun] = s;
        }
    }

    for (int i = 0; i < n; i++)
    {
        if (i != n - 1)
            cout << d[i] << ' ';
        else
            cout << d[i] << endl;
    }

    check = true;

    for (int i = 0; i < n - 1; i++)
    {
        if (d[i][1] == d[i + 1][1])
        {
            if (m[d[i]] > m[d[i + 1]])
                check = false;
        }
    }

    if (check)
    {
        cout << "Stable" << endl;
    }
    else
    {
        cout << "Not stable" << endl;
    }
    return 0;
}

