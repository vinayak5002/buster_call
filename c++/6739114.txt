#include <iostream>
#include <stack>
#include <vector>

using namespace std;

struct Pond
{
	int size;
	int start;
};

int sumPonds( vector<Pond> ponds );
void printPonds( vector<Pond> ponds );

int main()
{
	stack<int> index;
	vector<Pond> ponds;
	string str;
	cin >> str;

	for( int i = 0; i < str.size(); i++ )
	{
		if( str[i] == '\\' )
		{
			index.push( i );
		}
		else if( str[i] == '/' && !index.empty() )
		{
			Pond p;
			p.start = index.top();
			p.size = i - p.start;
			index.pop();

			// If the last pond started after this one (index.top()), 
			// it is a part of the larger pond
			while( !ponds.empty() && ponds.back().start > p.start )
			{
				p.size += ponds.back().size;
				ponds.pop_back();
			}

			ponds.push_back( p );
		}
	}

	// The total flood is the sum of all of the ponds
	cout << sumPonds( ponds ) << endl;
	cout << ponds.size() << ' ';
	printPonds( ponds );

	return 0;
}

int sumPonds( vector<Pond> ponds )
{
	int sum = 0;
	for( Pond p : ponds )
	{
		sum += p.size;
	}

	return sum;
}

void printPonds( vector<Pond> pond )
{
	if( pond.empty() ) return;

	for( int i = 0; i < pond.size() - 1; i++ )
	{
		cout << pond[i].size << ' ';
	}

	cout << pond.back().size << endl;
}
