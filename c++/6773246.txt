#include <bits/stdc++.h>

template <std::uint32_t MOD>
class ModInt {
	std::uint32_t value;
	friend std::ostream &operator<<(std::ostream &os, const ModInt &x){ return os << x.value; }
	friend std::istream &operator>>(std::istream &is, ModInt &x){ is >> x.value; x.value %= MOD; return is; }
	friend constexpr ModInt operator+(ModInt left, const ModInt &right){ return left += right; }
	friend constexpr ModInt operator-(ModInt left, const ModInt &right){ return left -= right; }
	friend constexpr ModInt operator*(ModInt left, const ModInt &right){ return left *= right; }
	friend constexpr ModInt operator/(ModInt left, const ModInt &right){ return left /= right; }
public:
	constexpr ModInt(std::uint32_t x = 0): value(x % MOD) {}
	constexpr ModInt operator-() const { return value == 0 ? 0 : MOD - value; }
	constexpr ModInt &operator+=(const ModInt &other){ if(value < MOD - other.value) value += other.value; else value -= MOD - other.value; return *this; }
	constexpr ModInt &operator-=(const ModInt &other){ if(value >= other.value) value -= other.value; else value += MOD - other.value; return *this; }
	constexpr ModInt &operator*=(const ModInt &other){ value = static_cast<std::uint64_t>(value) * other.value % MOD; return *this; }
	constexpr ModInt &operator/=(const ModInt &other){ return *this *= other.inv(); }
	constexpr ModInt inv() const { unsigned a = MOD, s = 0; unsigned b = value, t = 1; bool sign = true; while(b){ s += t * (a / b); a %= b; sign = !sign; std::swap(a, b); std::swap(s, t); } if(sign) s = MOD - s; return s; }
	constexpr ModInt pow(unsigned n) const { ModInt tmp = *this, ret = 1; while(n){ if(n % 2) ret *= tmp; tmp *= tmp; n /= 2; } return ret; }
};

template <class T> bool chmax(T &a, const T &b){ bool ret = a < b; if(ret) a = b; return ret; }
template <class T> bool chmin(T &a, const T &b){ bool ret = a > b; if(ret) a = b; return ret; }

using lint = long long;
using std::cin, std::cout, std::cerr, std::endl;

lint a, e, s, r;
lint m, n;

// レーベンシュタイン距離
lint dist(std::string x, std::string y){
	std::vector dp(m + 1, std::vector<lint>(n + 1)); // dp[i][j] は x[:i] -> y[:j] のコスト
	for(lint i = 0; i <= m; i++){
		for(lint j = 0; j <= n; j++){
			if(i == 0){
				// 追加だけ
				dp[i][j] = a * j;
			}else if(j == 0){
				// 削除だけ
				dp[i][j] = e * i;
			}else{
				dp[i][j] = LLONG_MAX;
				// x[:i] -> x[:i - 1]（削除）-> y[:j]
				chmin(dp[i][j], dp[i - 1][j] + e);
				// x[:i] -> y[:j - 1] -> y[:j]（追加）
				chmin(dp[i][j], dp[i][j - 1] + a);
				// x[:i - 1] -> y[:j - 1] と同じように編集後，最後の文字を書き換え
				chmin(dp[i][j], dp[i - 1][j - 1] + s * (x[i - 1] != y[j - 1]));
			}
		}
	}
	// cerr << x << ", " << y << " : " << dp[m][n] << endl;
	return dp[m][n];
}

int main(){
	std::string x, y;
	while(cin >> x, x != "#"){
		cin >> y >> a >> e >> s >> r;
		m = x.size();
		n = y.size();
		lint ans = LLONG_MAX;
		for(lint i = 0; i < n; i++){
			chmin(ans, dist(x, y) + i * r);
			x.push_back(x[0]);
			x.erase(0, 1);
		}
		cout << ans << endl;
	}
}

