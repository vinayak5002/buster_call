#include <algorithm>
#include <cassert>
#include <climits>
#include <cmath>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <random>
#include <complex>
#include <bitset>
#include <iomanip>
#include <memory>
#include <functional>

#define rep(i, n, s) for (int i = (s); i < int(n); i++)
#define per(i, n, s) for (int i = (n) - 1; i >= int(s); i--)
#define MM << " " <<
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)

template <class T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <class T>
using MaxHeap = std::priority_queue<T>;

using ll = long long;
using Pii = std::pair<int, int>;
using Pll = std::pair<ll, ll>;
using Pdd = std::pair<double, double>;

template <class T>
bool chmin(T &a, const T b) {
    if (b < a) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
bool chmax(T &a, const T b) {
    if (a < b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
void vdeb(const std::vector<T> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        if (i == n - 1)
            std::cout << da[i];
        else
            std::cout << da[i] << " ";
    }
    std::cout << std::endl;
}
template<class T>
void vdeb(const std::vector<std::vector<T>> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        // std::cout << i << " : ";
        vdeb(da[i]);
    }
    std::cout << std::endl;
}

using namespace std;

const int MAX_C = 2e9;

int dp[20020][256];
int n, m;

int solve() {
    vector<int> c(n);
    rep(i,n,0) cin >> c[i];
    vector<int> x(m);
    rep(i,m,0) cin >> x[i];
    fill(all(dp[0]), MAX_C);
    dp[0][128] = 0;
    rep(i,m,0) {
        fill(all(dp[i+1]), MAX_C);
        rep(j,256,0) {
            rep(k,n,0) {
                int now = max(0, min(j + c[k], 255));
                chmin(dp[i+1][now], dp[i][j] + (x[i] - now) * (x[i] - now));
            }
        }
    }
    return *min_element(all(dp[m]));
}

int main() {
    ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    vector<int> ans;
    while(1) {
        cin  >> m >> n;
        if(n == 0) break;
        ans.emplace_back(solve());
    }
    for(auto &i : ans) cout << i << endl;
}
