#include <bits/stdc++.h>
#include <time.h>

using namespace std;
typedef long long ll;
typedef vector<int> VI;
typedef vector<long long> Vll;
typedef vector<char> VC;
typedef vector<double> VD;
ll mm=1000000000;ll MM=mm+7;
ll MM1=998244353;
#define rep(i, n) for(int i=0;i<n;i++)
#define PI 3.141592653589793
#define inf 1e18

ll binarypow(ll a, ll n/*, ll mod*/){
    ll res =1;
    while(n>0){
        if(n & 1){
            res *=a;
            // res %= mod;
        }
        a*=a;
        // a %=mod;
        n >>=1;
    }
  return res;
}

struct UnionFind{
        vector<ll> par;         // par[自分]=親
        UnionFind(ll N) :par(N){
            rep(i,N) par[i]=i;
        }
    int root(ll x){ //データxの木の根を得る
        if(par[x] ==x)return x;
        return par[x]=root(par[x]);
    }
    void unite(ll x,ll y){ // xとyの木を併合
        ll rx=root(x);
        ll ry=root(y);
        if(rx==ry)return;
        par[rx]=ry;
    }

    bool same(ll x,ll y){ //x,yの木の根が同じならtrueを返す
        ll rx=root(x);
        ll ry=root(y);
        return rx==ry;
    }
};

ll modinv(ll a,ll m){
  ll b=m,u=1,v=0;
  while(b){
    ll t=a/b;
    a-=t*b; swap(a,b);
    u-=t*v; swap(u,v);
  }
  u%=m;
  if(u<0) u+=m;
  return u;
};

int main(){
    vector<string> ans;
    rep(itr,200){
        ll w,h;
        cin >> w >> h;
        if(w==0 && h==0)break;
        ll k=w+h-1;
        vector<Vll> box(h,Vll(w,-1));
        vector<Vll> line(2,Vll(100));
        rep(i,k){
            ll x,y,n;
            cin >> x >> y >> n;
            x--,y--;
            box[y][x]=1;
        }
        queue<pair<ll,ll>> que;
        line[1][0]=1;
        que.push(make_pair(1,0));
        while(!que.empty()){
            auto t=que.front();
            que.pop();
            ll z=t.second;
            if(t.first==0){
                rep(i,w){
                    if(box[z][i]==1 && line[1][i]==0){
                        que.push(make_pair(1,i));
                        line[1][i]=1;
                    }
                }
            }
            else{
                rep(i,h){
                    if(box[i][z]==1 && line[0][i]==0){
                        que.push(make_pair(0,i));
                        line[0][i]=1;
                    }
                }
            }
        }
        bool chk=true;
        rep(i,w)if(line[1][i]==0)chk=false;
        rep(i,h)if(line[0][i]==0)chk=false;
        if(chk)ans.emplace_back("YES");
        else ans.emplace_back("NO");
    }
    rep(i,ans.size())cout << ans[i] << endl;
}



