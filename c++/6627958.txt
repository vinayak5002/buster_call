#include <stdio.h>
#include <stdlib.h>

//構造体宣言
struct node
{
    struct node *right;
    struct node *left;
    struct node *parent;
    int key;
};

//構造体変数の宣言
typedef struct node *Node;

// NILの定義
#define NIL NULL

Node root;

Node treeMinimum(Node x)
{
}

Node treeMaximum(Node x)
{
}

Node treeSearch(Node u, int k)
{
}

Node treeSuccessor(Node x)
{
}

void treeDelete(Node z)
{
    Node y; // node to be deleted
    Node x; // child of y
}

//挿入関数
void insert(int k)
{
    Node y = NIL;
    Node x = root;
    Node z;

    z = malloc(sizeof(struct node));
    z->key = k;
    z->left = NIL;
    z->right = NIL;

    while (x != NIL)
    {
        y = x;
        if (z->key < x->key)
        {
            x = x->left;
        }
        else
        {
            x = x->right;
        }
    }
    z->parent = y;

    if (y == NIL)
    {
        root = z;
    }
    else if (z->key < y->key)
    {
        y->left = z;
    }
    else
    {
        y->right = z;
    }
}

// Inorderの表示
void inorder(Node u)
{
    if (u->left != NIL)
    {
        inorder(u->left);
    }

    printf("%d ", u->key);

    if (u->right != NIL)
    {
        inorder(u->right);
    }
}

// Preorderの表示
void preorder(Node u)
{
    printf("%d ", u->key);

    if (u->left != NIL)
    {
        preorder(u->left);
    }

    if (u->right != NIL)
    {
        preorder(u->right);
    }
}

// main関数
int main()
{
    int n, i, x;
    char com[20];

    //命令回数の受付
    scanf("%d", &n);

    //命令の受付
    for (i = 0; i < n; i++)
    {
        scanf("%s", com);

        // findの受付
        if (com[0] == 'f')
        {
            scanf("%d", &x);
            Node t = treeSearch(root, x);
            if (t != NIL)
                printf("yes\n");
            else
                printf("no\n");
        }

        // insertの受付
        else if (com[0] == 'i')
        {
            scanf("%d", &x);
            insert(x);
        }

        // printの受付
        else if (com[0] == 'p')
        {
            inorder(root);
            printf("\n");
            preorder(root);
            printf("\n");
        }

        // deleteの受付
        else if (com[0] == 'd')
        {
            scanf("%d", &x);
            treeDelete(treeSearch(root, x));
        }
    }

    return 0;
}
