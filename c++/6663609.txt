#define READ_FROM_FILE 0

#if READ_FROM_FILE
#include <fstream>
#endif

#include <iostream>
#include <string>
#include <vector>
#include <queue>
using namespace std;

typedef pair<int, int> Pii;


class Edge {
public:
	int to;
	int cost;

	Edge() : to(-1), cost(-1) {
		return;
	}
	~Edge() {
		return;
	}
};


int main() {
#if READ_FROM_FILE
	ifstream ifs("test0.txt");
	cin.rdbuf(ifs.rdbuf());
#endif
	vector<vector<Edge>>  adjacency_list;
	vector<long> min_cost;
	priority_queue<Pii, vector<Pii>, greater<Pii> > que;
	int n, u, k, v, c;

	cin >> n;
	adjacency_list.resize(n);
	min_cost.resize(n, 1000000000);

	for (int i = 0; i < n; i++) {
		cin >> u >> k;
		for (int j = 0; j < k; j++) {
			Edge e;

			cin >> v >> c;
			e.to = v;
			e.cost = c;
			adjacency_list[u].push_back(e);
		}
	}

	min_cost[0] = 0;
	que.push(Pii(0, 0));

	while (!que.empty()) {
		Pii p = que.top(); que.pop();
		int v = p.second;

		if (min_cost[v] < p.first) {
			continue;
		}

		for (const Edge& e : adjacency_list[v]) {
			if (min_cost[e.to] > min_cost[v] + e.cost) {
				min_cost[e.to] = min_cost[v] + e.cost;
				que.push(Pii(min_cost[e.to], e.to));
			}
		}
	}

	for (int i = 0; i < n; i++) {
		cout << i << " " << min_cost[i] << endl;
	}
	return 0;
}


