#include <stdio.h>

#define N 100
#define INF 1e9

int Q[N], head, tail;
int n, M[N][N];
int d[N];


void push(int x)
{
	Q[tail] = x;
	if(tail == N){ tail = 0; }
}


int pop()
{
	int res = Q[head];
	++head;
	if(head == N){ head = 0; }
	return res;
}


int isEmpty()
{
	return (head == tail);
}


void bfs(int s)
{
	push(s);
	int i;
	for(i = 0; i < n; i++)
	{
		d[i] = INF;
	}
	d[s] = 0;
	while( !isEmpty() )
	{
		int u = pop();
		for(int v = 0; v < n; v++)
		{
			if(M[u][v] == 0){ continue; }
			if(d[v] != INF){ continue; }
			d[v] = d[u] + 1;
			push(v);
		}
	}
	for(i = 0; i < n; i++)
	{
		printf("%d %d\n", i + 1, (d[i] == INF ? -1 : d[i]));
	}
}


int main (void)
{
	head = tail = 0; // キューを初期化
	
	scanf("%d", &n);
	
	int i, j;
	for(i = 0; i < n; i++)
	{
		for(j = 0; j < n; j++)
		{
			M[i][j] = 0;
		}
	}
	
	int u, k, v;
	
	for(i = 0; i < n; i++)
	{
		scanf("%d %d", &u, &k);
		u--;
		for(j = 0; j < n; j++)
		{
			scanf("%d", &v);
			v--;
			M[u][v] = 1;
		}
	}
	
	bfs(0);
	
	return 0;
}

