#include <iostream>
#include <vector>
#include <cmath>
using ll = long long;
using namespace std;
struct RMQ {
	ll n;
	vector<ll> data, lazy;
	ll INF = pow(2, 31) - 1;
	RMQ(ll x) {
		n = 1;
		while (n < x) n <<= 1;
		data.resize(2*n-1, INF);
		lazy.resize(2*n-1, INF);
	}
	void eval(ll k) {
		if (lazy[k] == INF) return;
		if (k < n-1) lazy[2*k+1] = lazy[2*k+2] = lazy[k];
		data[k] = lazy[k];
		lazy[k] = INF;
	}
	ll find(ll a, ll b) {return find(a, b, 0, 0, n);}
	ll find(ll a, ll b, ll k, ll l, ll r) {
		eval(k);
		if (a <= l && r <= b) return data[k];
		if (r <= a || b <= l) return INF;
		ll vl = find(a, b, 2*k+1, l, (l+r)/2);
		ll vr = find(a, b, 2*k+2, (l+r)/2, r);
		return min(vl, vr);
	}
	void update(ll a, ll b, ll x) { update(a, b, x, 0, 0, n);}
	void update(ll a, ll b, ll x, ll k, ll l, ll r) {
		eval(k);
		if (a <= l && r <= b) {
			data[k] = x;
			if (k < n-1) lazy[2*k+1] = lazy[2*k+2] = x;
			return;
		}
		if (r <= a || b <= l) return;
		update(a, b, x, 2*k+1, l, (l+r)/2);
		update(a, b, x, 2*k+2, (l+r)/2, r);
		data[k] = min(data[2*k+1], data[2*k+2]);
	}
};
int main() {
	ll n, q; cin >> n >> q;
	RMQ rmq(n);
	vector<ll> ans;
	for (ll i = 0; i < q; i++) {
		ll q; cin >> q;
		if (q == 0) {
			ll s, t, x; cin >> s >> t >> x;
			rmq.update(s, t+1, x);
		} else if (q == 1) {
			ll s, t; cin >> s >> t;
			ans.push_back(rmq.find(s, t+1));
		}
	}
	for (auto x: ans) cout << x << endl;
}

