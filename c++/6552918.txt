#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int MAXN = 1e5 + 5;
const int mod = 1e9 + 7;

inline void add_mod(int &a,int b){ a+=b; if(a>=mod) a-=mod;}

struct DSC
{
	vector<ll> dsc;
	int size(void) const { return dsc.size();}
	void push(ll x){ dsc.push_back(x);}
	void build(void){ sort(dsc.begin(), dsc.end()); dsc.erase(unique(dsc.begin(), dsc.end()), dsc.end());}
	int get(ll x) const
	{
		int k = lower_bound(dsc.begin(), dsc.end(), x) - dsc.begin();
		return k<(int)dsc.size() && dsc[k]==x? k: -1;
	}
};

struct Cover
{
	map<int,int> a;
	void init(void){ a[-1] = 0;}
	inline int get(int x)
	{
		return prev(a.upper_bound(x)) -> second;
	}
	inline void insert(int l,int r,int x)
	{
		int t = get(r+1); a[r+1] = t;
		auto it = a.lower_bound(l);
		while(it -> first <= r) a.erase(it++);
		a[l] = x;
	}
};

struct Circle
{
	vector<int> pid;
	vector<ll> a, ws, sum;
	int len, neg;
	ll C;
	inline ll trim(ll x)
	{
		if(!C) return x;
		x %= C;
		return x<0? x+C: x;
	}
	
	DSC dsc_ori, dsc_type;
	vector< vector<int> > pos;
	vector< set<ll> > val;
	
	void build(const vector<int> &_pid,ll _a[],ll _d[])
	{
		pid = _pid; len = pid.size();
		pid.resize(2*len); a.resize(2*len); ws.resize(2*len);
		for(int i=0; i<len; ++i) pid[i+len] = pid[i];
		for(int i=0; i<2*len; ++i)
			a[i] = _a[pid[i]], ws[i] = _d[pid[i]];
		
		sum.resize(2*len);
		for(int i=1; i<2*len; ++i)
			sum[i] = sum[i-1] + ws[i-1];
		C = sum[len];
		
		neg = C < 0;
		if(neg)
		{
			C = -C;
			for(int i=0; i<2*len; ++i)
				a[i] = -a[i], ws[i] = -ws[i], sum[i] = -sum[i];
		}
		
		for(int i=0; i<2*len; ++i)
		{
			dsc_ori.push(a[i] - sum[i]);
			dsc_type.push(trim(a[i] - sum[i]));
		}
		dsc_ori.build();
		dsc_type.build();
		pos.resize(dsc_ori.size());
		val.resize(dsc_type.size());
		for(int i=0; i<2*len; ++i)
		{
			int k1 = dsc_ori.get(a[i] - sum[i]);
			int k2 = dsc_type.get(trim(a[i] - sum[i]));
			pos[k1].push_back(i);
			val[k2].insert(a[i] - sum[i]);
		}
	}
	pii getnxt(int l,ll x)
	{
		if(neg) x = -x;
		x -= sum[l];
		int t = dsc_type.get(trim(x));
		if(t == -1) return {-1,-1};
		
		int r = l + len - 1, res = -1;
		auto get = [&] (ll y)
		{
			if(res != -1) return;
			int k = dsc_ori.get(y);
			if(k == -1) return;
			auto it = lower_bound(pos[k].begin(), pos[k].end(), l);
			if(it == pos[k].end() || *it > r) return;
			res = *it;
		};
		
		get(x);
		if(res == -1 && C != 0)
		{
			auto it = val[t].upper_bound(x);
			if(it != val[t].end())
			{
				ll y = *it;
				get(y); get(y+C);
			}
		}
		if(res == -1) return {-1,-1};
		
		ll step = res - l;
		if(C) step += (a[res] - sum[res] - x) / C * len;
		return {pid[res], (int)(step %mod)};
	}
}cir[MAXN];

ll a[MAXN], b[MAXN], d[MAXN];
int c[MAXN], e[MAXN];

vector<int> g[MAXN];
int cid[MAXN], cpos[MAXN], ccnt = 0;

int dfnl[MAXN], dfnr[MAXN], seq[MAXN], curdfn = 0;
ll sum[MAXN];
int dep[MAXN], rt[MAXN];
void dfs_dfn(int u,int _rt)
{
	rt[u] = _rt;
	dfnl[u] = ++curdfn; seq[curdfn] = u;
	for(int v: g[u])
	{
		dep[v] = dep[u] + 1;
		sum[v] = sum[u] + d[v];
		dfs_dfn(v, _rt);
	}
	dfnr[u] = curdfn;
}

int main(void)
{
	int n;
	ll beg;
	scanf("%d%lld",&n,&beg);
	for(int i=1; i<=n; ++i)
		scanf("%lld%lld%d%lld%d",&a[i],&b[i],&c[i],&d[i],&e[i]);
	
	c[n+1] = e[n+1] = n+1;
	static int vis[MAXN], curtim = 0;
	for(int i=1; i<=n+1; ++i) if(!vis[i])
	{
		++curtim;
		int u = i;
		while(!vis[u]) vis[u] = curtim, u = e[u];
		if(vis[u] != curtim) continue;
		
		vector<int> pid = {u};
		for(int v=e[u]; v!=u; v=e[v]) pid.push_back(v);
		cir[++ccnt].build(pid, a, d);
		for(int j=0; j<(int)pid.size(); ++j)
			cid[pid[j]] = ccnt, cpos[pid[j]] = j;
	}
	
	for(int i=1; i<=n+1; ++i)
		if(!cid[i]) g[e[i]].push_back(i);
	for(int i=1; i<=n+1; ++i)
		if(cid[i]) dfs_dfn(i, i);
	
	DSC dsc;
	for(int i=1; i<=n+1; ++i)
		dsc.push(a[i] + sum[i]);
	dsc.build();
	
	vector<Cover> cov(dsc.size());
	for(auto &t: cov) t.init();
	for(int i=1; i<=curdfn; ++i)
	{
		int k = dsc.get(a[i] + sum[i]);
		cov[k].insert(dfnl[i], dfnr[i], i);
	}
	
	int u = 1, ans = 0;
	ll x = beg;
	static bool used[MAXN];
	while(u != n+1)
	{
		if(x == a[u])
		{
			if(used[u])
			{
				printf("-1\n");
				return 0;
			}
			used[u] = 1;
			add_mod(ans, 1);
			x += b[u]; u = c[u];
			continue;
		}
		
		int k = dsc.get(x + sum[u]), v;
		if(k != -1 && (v = cov[k].get(dfnl[u])))
		{
			add_mod(ans, dep[u] - dep[v]);
			u = v; x = a[v];
			continue;
		}
		if(!cid[u])
		{
			add_mod(ans, dep[u]);
			x += sum[u]; u = rt[u];
			continue;
		}
		
		pii nxt = cir[cid[u]].getnxt(cpos[u], x);
		if(nxt.first == -1)
		{
			printf("-1\n");
			return 0;
		}
		u = nxt.first; add_mod(ans, nxt.second);
		x = a[u];
	}
	
	printf("%d\n",ans);
	return 0;
}
