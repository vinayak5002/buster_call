#include <bits/stdc++.h>
using namespace std ;
#define MAX 1000000
#define NIL -2000000002
#define INF 2000000002
#define MAXN 50
int n;
int c;
int t = 0;
int A[101][101] ; // 0以外では初期化できないんだってーーー。

struct Node {
    int d; 
    int f;
    int con; // 1:発見された 2:完了された　訪問は関係なし
    vector<int> go ;
};
vector<Node> X;
stack<int> df ;

/*void p_stack (auto v) {

    while (v.size()>0 ) {
        std::cout << v.top() << " ";
        v.pop();
    }
    cout << endl ; 
}*/

bool visitcheck(int u) {
    for (int i=0; i < X.at(u).go.size() ; i++ ) {
        int  y = X.at(u).go.at(i);
        if ( X.at(y).con == NIL ) {return false;}
    }
    return true ; 
}

int doDFS () {
    while (df.size() > 0) {
        t++;
        int u = df.top();
        //cout << "doDFS: t=" << t << " u= " << u << " dfsize: " << df.size() << endl; 
        // p_stack(df);
        //初回訪問
        if ( X.at(u).con == NIL ) {
            // cout << "connect: " << u << endl; 
            X.at(u).con = 1;
        }

        //自分のすべての行き先が訪問済みなら自分をstackから消す。
        if ( visitcheck(u) ) {
             if ( X.at(u).con < 2 ) {
                X.at(u).f = t ;  X.at(u).con = 2; } //完了時刻
            df.pop(); //完了時刻
            continue;
        }
        int j = NIL;
        int y = NIL;

        for (j = 0 ; j < X.at(u).go.size() ; j++ ) {
            y = X.at(u).go.at(j);
            if ( X.at(y).con > 0 ) {continue;}
            else { df.push(y);
                X.at(y).d = t ;    
                break; } //stackに追加したらbreak
        }
    }

    return 0;
}


void clearvalueA() {
    for (int i=0 ; i<101; i++) {
        for  (int j=0; j<101; j++) {
            A[i][j] = 0 ;
        }
    }
}

int main() {
    cin >> c ;
    Node indata;
    indata.d = INF; indata.f = INF; indata.con = NIL;
    X.push_back(indata);        // 0番のダミー

    for (int i = 0 ; i < c ; i++ ) {
        int a, b ;
        cin >> a  >> b ;
        indata.go.clear();
        for (int j=0; j < b ; j++) { 
            int g;
            cin >> g ;
            indata.d = INF; indata.f = INF; indata.con = NIL;
            indata.go.push_back(g);
        }
        X.push_back(indata);
    }
    // cout << X.at(1).go.size() << endl;
    for (int i=1; i <= c ; i++) {
        if ( X.at(i).con == NIL ) {
            t++; df.push(i); X.at(i).d = t;  doDFS();}
    }

    for (int i = 1 ; i <= c ; i++ ) {
        cout << i << " " ; 
        cout << X.at(i).d << " ";
        cout << X.at(i).f << endl ;
    }
	return 0 ;
}

