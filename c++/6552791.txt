#line 1 "main.cpp"
#include <bits/stdc++.h>
#line 1 "/home/anqooqie/.proconlib/tools/swag.hpp"



#line 7 "/home/anqooqie/.proconlib/tools/swag.hpp"

namespace tools {
  template <typename M>
  class swag {
  private:
    using T = typename M::T;
    ::std::stack<T> stack1;
    T stack1_prod;
    ::std::stack<::std::pair<T, T>> stack2;

    T stack2_prod() const {
      return this->stack2.empty() ? M::e() : this->stack2.top().second;
    }

  public:
    swag() : stack1_prod(M::e()) {
    }
    swag(const ::tools::swag<M>&) = default;
    swag(::tools::swag<M>&&) = default;
    ~swag() = default;
    ::tools::swag<M>& operator=(const ::tools::swag<M>&) = default;
    ::tools::swag<M>& operator=(::tools::swag<M>&&) = default;

    bool empty() const {
      return this->stack1.empty() && this->stack2.empty();
    }

    void push(const T& x) {
      this->stack1_prod = M::op(this->stack1_prod, x);
      this->stack1.push(x);
    }

    template <typename... Args>
    void emplace(Args&&... args) {
      this->push(T(::std::forward<Args>(args)...));
    }

    void pop() {
      assert(!this->empty());
      if (this->stack2.empty()) {
        while (!this->stack1.empty()) {
          this->stack2.emplace(
            this->stack1.top(),
            M::op(this->stack1.top(), this->stack2_prod())
            );
          this->stack1.pop();
        }
        this->stack1_prod = M::e();
      }
      this->stack2.pop();
    }

    T prod() const {
      return M::op(this->stack2_prod(), this->stack1_prod);
    }
  };
}


#line 1 "/home/anqooqie/.proconlib/tools/monoid.hpp"



#line 7 "/home/anqooqie/.proconlib/tools/monoid.hpp"

namespace tools {
  namespace monoid {
    template <typename Type, Type E = ::std::numeric_limits<Type>::min()>
    struct max {
      using T = Type;
      static T op(const T lhs, const T rhs) {
        return ::std::max(lhs, rhs);
      }
      static T e() {
        return E;
      }
    };

    template <typename Type, Type E = ::std::numeric_limits<Type>::max()>
    struct min {
      using T = Type;
      static T op(const T lhs, const T rhs) {
        return ::std::min(lhs, rhs);
      }
      static T e() {
        return E;
      }
    };

    template <typename Type>
    struct multiplies {
      using T = Type;
      static T op(const T lhs, const T rhs) {
        return lhs * rhs;
      }
      static T e() {
        return T(1);
      }
    };

    template <typename Type>
    struct gcd {
      using T = Type;
      static T op(const T lhs, const T rhs) {
        return ::std::gcd(lhs, rhs);
      }
      static T e() {
        return T(0);
      }
    };

    template <typename Type, Type E>
    struct update {
      using T = Type;
      static T op(const T lhs, const T rhs) {
        return lhs == E ? rhs : lhs;
      }
      static T e() {
        return E;
      }
    };
  }
}


#line 1 "/home/anqooqie/.proconlib/tools/join.hpp"



#line 6 "/home/anqooqie/.proconlib/tools/join.hpp"

namespace tools {

  template <typename Iterator>
  ::std::string join(const Iterator begin, const Iterator end, const ::std::string delimiter) {
    ::std::ostringstream ss;
    ::std::string current_delimiter = "";
    for (Iterator it = begin; it != end; ++it) {
      ss << current_delimiter << *it;
      current_delimiter = delimiter;
    }
    return ss.str();
  }
}


#line 5 "main.cpp"

using i64 = std::int_fast64_t;

int main() {
  std::cin.tie(nullptr);
  std::ios_base::sync_with_stdio(false);

  i64 N, L;
  std::cin >> N >> L;
  std::vector<i64> a;
  std::copy_n(std::istream_iterator<i64>(std::cin), N, std::back_inserter(a));

  std::vector<i64> answers;
  tools::swag<tools::monoid::min<i64>> swag;
  for (i64 i = 0; i < L; ++i) {
    swag.push(a[i]);
  }
  answers.push_back(swag.prod());
  for (i64 i = L; i < N; ++i) {
    swag.push(a[i]);
    swag.pop();
    answers.push_back(swag.prod());
  }

  std::cout << tools::join(answers.begin(), answers.end(), " ") << '\n';
  return 0;
}
