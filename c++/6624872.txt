#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;

const long long INF=1000000;

typedef pair<long long,int>P;
typedef struct{
  int to;
  long long cost;
  long long capacity;
  int id;
}Edge;

int main(){
  int n,m;//頂点数&辺の数
  int flow;
  int prev_node[1005];//地点の一つ前の地点
  int prev_edge[1005];//地点の一つ前の辺
  long long ans=0;//答えを格納する変数
  long long min_cost[1005];//地点への最小コスト
  long long potential[1005]={0};//地点のポテンシャル
  vector<Edge>graph[1005];//辺の情報の集合

  cin>>n>>m>>flow;
  //辺を張る
  for(int i=0;i<m;i++){
    int a,b,cost,cap;
    cin>>a>>b>>cap>>cost;
    graph[a].push_back((Edge){b,cost,cap,graph[b].size()});
    graph[b].push_back((Edge){a,-cost,0,graph[a].size()-1});
  }
  /*
  graph[1].push_back((Edge){2,2,14,0});
  graph[2].push_back((Edge){1,-2,0,0});
  graph[1].push_back((Edge){3,7,16,0});
  graph[3].push_back((Edge){1,-7,0,1});
  graph[2].push_back((Edge){3,3,4,1});
  graph[3].push_back((Edge){2,-3,0,1});
  graph[2].push_back((Edge){4,8,10,0});
  graph[4].push_back((Edge){2,-8,0,2});
  graph[3].push_back((Edge){4,4,12,1});
  graph[4].push_back((Edge){3,-4,0,2});
  */

  //全て流し切るまで最小コストのルートを探す
  while(flow>0){
    //ポテンシャル付きダイクストラで経路探索
    for(int i=0;i<n;i++){
      min_cost[i]=INF;
      prev_node[i]=-1;
      prev_edge[i]=-1;
    }
    priority_queue<P,vector<P>,greater<P> >pq;
    min_cost[0]=0;
    pq.push(P(0,0));
    while(!pq.empty()){
      P now=pq.top();pq.pop();
      long long cost=now.first;
      int pos=now.second;
      if(cost>min_cost[pos])continue;
      for(int i=0;i<(int)graph[pos].size();i++){
	int next=graph[pos][i].to;
	long long ncost=cost+graph[pos][i].cost+potential[pos]-potential[next];
	if(graph[pos][i].capacity>0&&ncost<min_cost[next]){
	  min_cost[next]=ncost;
	  prev_node[next]=pos;
	  prev_edge[next]=i;
	  pq.push(P(ncost,next));
	}
      }
    }
    //流し切れない場合は解なし
    if(min_cost[n-1]==INF){
      cout<<-1<<endl;
      return(0);
    }
    //それ以外の場合は最短ルートにありったけ流す
    for(int i=0;i<n;i++){
      potential[i]+=min_cost[i];//ポテンシャルの更新
    }
    long long min_cap=flow;
    int pos=n-1;
    while(pos!=0){//後ろに辿りながら最も小さい容量を決定
      min_cap = min(min_cap,graph[prev_node[pos]][prev_edge[pos]].capacity);
      pos=prev_node[pos];
    }
    flow-=min_cap;
    ans+=min_cap*potential[n-1];//コスト計算
    pos=n-1;
    while(pos!=0){
      Edge &e=graph[prev_node[pos]][prev_edge[pos]];
      e.capacity-=min_cap;
      graph[pos][e.id].capacity+=min_cap;
      pos=prev_node[pos];
    }
  }

  cout<<ans<<endl;
  
  return(0);
}

