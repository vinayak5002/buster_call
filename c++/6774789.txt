#include <bits/stdc++.h>
using namespace std;
#define s 30
const int INF = 100000000;
typedef pair<int, int> P;

int w,h;

int hor[s][s];
int ver[s][s];
int d[s][s];
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};

int isMoved(int cx, int cy, int nx, int ny){
    if(nx>=0 && nx<h && ny>=0 && ny<w && d[nx][ny]==INF){
        if(cx > nx && cy == ny){
            if(ver[cx-1]==0) return 1; 
        }else if(cx == nx && cy < ny){
            if(hor[cy]==0) return 1;
        }else if(cx < nx && cy == ny){
            if(ver[cx]==0) return 1;
        }else if(cx == nx && cy > ny){
            if(hor[cy-1]==0) return 1;
        }
    }
    return 0;
}

int bfs(){
    queue<P> que;

    que.push(P(0, 0));
    d[0][0] = 1;

    while(que.size()){
        P p = que.front();
        que.pop();

        if(p.first == h-1 && p.second == w-1) break;

        for(int i=0;i<4;i++){
            int nx = p.first + dx[i];
            int ny = p.second + dy[i];

            if(isMoved(p.first,p.second,nx,ny)==1){
                que.push(P(nx,ny));
                d[nx][ny] = d[p.first][p.second]+1;
            }
        }
    }
    return d[h-1][w-1];
}

void reset(){
	for(int i=0;i<s;i++){
		for(int j=0;j<s;j++){
			ver[i][j] = 0;
            hor[i][j] = 0;
            d[i][j] = INF;
		}
	}
}

int main(){

    while(true){
		cin >> w >> h;
		if(w == 0 && h == 0) break;

		reset();

		for(int i=0;i<2*h-1;i++){
            if(i%2==0){
                for(int j=0;j<w-1;j++) cin >> hor[i][j];
            }else{
                for(int j=0;j<w;j++) cin >> ver[i][j];
            }
        }

		int res = bfs();
        
        if(res == INF) cout << "0" << endl;
        else cout << res << endl;
	}
}

