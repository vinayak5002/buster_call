#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>
#include <iomanip>
#include <bitset>
#include <functional>
#include <queue>
#include <stack>
#include <utility>
#include <numeric>

using namespace std;

using ll = long long;
using ull = unsigned long long;
using ld = long double;
using uint = unsigned;
using vi = vector<int>;
using vl = vector<long>;
using vll = vector<long long>;
using vvi = vector<vi>;
using vvl = vector<vl>;
using vvll = vector<vll>;
using vs = vector<string>;
using pii = pair<int, int>;
using pcc = pair<char, char>;
using pll = pair<ll, ll>;
using pdd = pair<ld, ld>;

#define rep(i, n) for (ll i = 0; i < ll(n); i++)
#define repback(i, n) for (ll i = n-1; i >= 0; i--)
#define REP(i, a, b) for (ll i = a; i < ll(b); i++)
#define REPBACK(i, a, b) for (ll i = a-1; i >= ll(b); i--)
#define all(x) (x).begin(), (x).end()
#define debug(x) cout << "debug:" << x << endl

static const double pi = acos(-1.0);
const long long INF = pow(10,18);
const int mod1 = 1000000007;
const vi dx = {1,0,-1,0};
const vi dy = {0,1,0,-1};
const vi dx2 = {0, 1, 0, -1, 1, -1, 1, -1};
const vi dy2 = {1, 0, -1, 0, 1, 1, -1, -1};

int main(){
    int n; cin >> n;
    for (int i=0; i<n; i++){
        int gx, gy; cin >> gx >> gy;
        int p; cin >> p;
        vector<tuple<int,int,int,int> >ng(p);
        for (int j=0; j<p; j++) cin >> get<0>(ng[j])>> get<1>(ng[j])>> get<2>(ng[j])>> get<3>(ng[j]);
        //NG[X][Y][0or1]は(X,Y)にx方向から(0)or y方向から(1)いけるかどうかを表す
        vector<vector<vector<bool> > > NG(16, vector<vector<bool> >(16, vector<bool>(2,true)));
        for (int j=0; j<p; j++){
            if (get<0>(ng[j]) == get<2>(ng[j])) NG[get<0>(ng[j])][max(get<1>(ng[j]), get<3>(ng[j]))][1] = false;
            else if (get<1>(ng[j]) == get<3>(ng[j])) NG[max(get<0>(ng[j]), get<2>(ng[j]))][get<1>(ng[j])][0] = false;
        }

        vector<vector<long long> > dp(16, vector<long long>(16,0));
        dp[0][0] = 1;
        for (int x=0; x<16; x++){
            for (int y=0; y<16; y++){
                if (x==0 & y==0) continue;
                if (y==0) dp[x][0] = dp[x-1][0];
                else if (x==0) dp[0][y] = dp[0][y-1];
                else dp[x][y] = dp[x-1][y] + dp[x][y-1];

                if (!NG[x][y][0]) dp[x][y] -= dp[x-1][y];
                if (!NG[x][y][1]) dp[x][y] -= dp[x][y-1];
            }
        }

        long long ans = dp[gx][gy];
        if (ans == 0) cout << "Miserable Hokusai!" << endl;
        else cout << ans << endl;
    
    }
}
