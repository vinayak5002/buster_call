#include<bits/stdc++.h>
using namespace std;
const double eps=1e-8;
struct V{
    double x,y;
    V(double _x=0,double _y=0){x=_x,y=_y;}
    double len(){return sqrt(x*x+y*y);}
};
inline V operator + (V a,V b){return V(a.x+b.x,a.y+b.y);}
inline V operator - (V a,V b){return V(a.x-b.x,a.y-b.y);}
inline V operator * (double x,V a){return V(x*a.x,x*a.y);}
inline double operator * (V a,V b){return a.x*b.x+a.y*b.y;}
inline double operator ^ (V a,V b){return a.x*b.y-a.y*b.x;}
inline bool operator == (V a,V b){return fabs(a.x-b.x)<eps && fabs(a.y-b.y)<eps;}
struct L{
    V A,a;
    int op;
    //0 (0,1]; 1 (0,+inf); 2 (-inf,_inf) 
    L(V _A,V _a,int _op=2){A=_A,a=_a,op=_op;}
    bool exist(V x){
    	V t=x-A;
    	double k=t.len()/a.len();
    	if (op==0 && !(0<k && k<=1)) return 0;
    	if (op==1 && !(0<k)) return 0;
    	return A+k*a==x;
	}
};
//V its(L l1,L l2){
//	V u=(l1.A+l1.a)-(l2.A+l2.a);
//	double T=abs((u^l2.a)/(l1.a^l2.a));
//	return l1.A+l1.a-T*l1.a;
//}
vector<V> p;
int n;
double Area(vector<V> p){
	for (int i=1;i<p.size();++i) p[i]=p[i]-p[0];
	p[0]=V();
	double res=0;
	for (int i=0;i<p.size()-1;++i) res+=p[i]^p[i+1];
	return abs(res)/2;
}
int main(){
	scanf("%d",&n);p.resize(n);
	for (int i=0;i<n;++i) scanf("%lf%lf",&p[i].x,&p[i].y);
	printf("%.2lf\n",Area(p));
//	int T;
//	scanf("%d",&T);
//	while (T--){
//		double x0,y0,x1,y1,x2,y2,x3,y3;
//		scanf("%lf%lf",&x0,&y0);
//		scanf("%lf%lf",&x1,&y1);
//		scanf("%lf%lf",&x2,&y2);
//		scanf("%lf%lf",&x3,&y3);
//		L l1(V(x0,y0),V(x1-x0,y1-y0),0),l2(V(x2,y2),V(x3-x2,y3-y2),0);
//	}
}
