#include <bits/stdc++.h>
using namespace std;
typedef long long  ll;

double PI = 3.1415926535;

const ll LINF = 1000;
#define repe(i,s,n)for(ll i=s;i<=n;i++)
#define rep(i,s,n)for(ll i=s;i<n;i++)
#define rep_r(i,s,n)for(ll i=n-1;i>=s;i--)
#define rep_re(i,s,n)for(ll i=n;i>=s;i--)
const ll MOD = 1e9 + 7;

//printf("%.10f\n",x)
//vector<ll> a(N + 1, -1);

// Floyd-Warshall
ll V;
const int INF = 1 << 30;

//const ll MAX_V = 1000;
//ll d[MAX_V][MAX_V];
//void floyd_warshall() {
//	for (int k = 0; k < V; ++k) {
//		for (int i = 0; i < V; ++i) {
//			for (int j = 0; j < V; ++j) {
//				d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
//			}
//		}
//	}
//}
int main() {
	int E; cin >> V >> E;
	vector<vector<long long> > d(V, vector<long long>(V, INF));

	rep(i, 0, V) {
		rep(j, 0, V) {
			d[i][j] = LINF;
		}
	}

	rep(i, 0, V) d[i][i] = 0;

	rep(e, 0, E) {
		ll a, b, x; cin >> a >> b >> x;
		d[a][b] = x;
	}

	//floyd_warshall();
	for (int k = 0; k < V; ++k) {
		for (int i = 0; i < V; ++i) {
			for (int j = 0; j < V; ++j) {
				d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
			}
		}
	}

	bool isnegative = false;
	for (int v = 0; v < V; ++v) if (d[v][v] < 0) isnegative = true;
	if (isnegative) {
		cout << "NEGATIVE CYCLE" << endl;
	}
	else {
		rep(i, 0, V) {
			rep(j, 0, V) {
				if (d[i][j] == LINF) {
					cout << "INF";
				}
				else {
					cout << d[i][j];
				}
				if (j != V - 1) {
					cout << " ";
				}
			}
			cout << endl;
		}
	}
}
