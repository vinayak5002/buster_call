#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

vector< vector<int> > graph;	// directed graph
bool cycle;	// cycle existence flag
vector<bool> visited;	// list of visited nodes

void init();
int checkCycle();
void dfs(int);

int main(){
	init();
	cout << checkCycle() << endl;
	return 0;
}

void init(){
	int v, e;
	cin >> v >> e;
	graph.resize(v);
	visited.resize(v);

	for(int i=0; i<visited.size(); i++){
		visited[i] = false;
	}

	for(int i=0; i<e; i++){
		int s, t;
		cin >> s >> t;
		graph[s].push_back(t);
	}

	cycle = false;
}

int checkCycle(){
	// visit all not visited nodes
	for(int i=0; i<graph.size(); i++){
		for(int j=0; j<visited.size(); j++){
			visited[j] = false;
		}
		dfs(i);
		if(cycle) break;
	}
	return cycle ? 1 : 0;
}

void dfs(int node){
	if(cycle) return;

	visited[node] = true;
	for(int i=0; i<graph[node].size(); i++){
		int next_node = graph[node][i];
		if(visited[next_node]){
			cycle = true;
			return;
		}
		dfs(next_node);
	}

	visited[node] = false;
}
