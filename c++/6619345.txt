#include<iostream>
using namespace std;

struct Card {char suit, value;};

void bubbleSort(Card A[], int N) {
    for (int i = 0; i < N; i++) {
        for (int j = N-1; j >= i+1; j--) {
            if (A[j].value < A[j-1].value) {
                Card t = A[j]; A[j] = A[j-1]; A[j-1] = t; // swap
            }
        }
    }
}

void selectionSort(Card A[], int N) {
    for (int i = 0; i < N; i++) {
        int minj = i;
        for (int j = i; j < N; j++) {
            if (A[j].value < A[minj].value) minj = j;
        }
        Card t = A[i]; A[i] = A[minj]; A[minj] = t; // swap
    }
}

void print(Card A[], int N) {
    for (int i = 0; i < N; i++) {
        if (i) cout << " ";
        cout << A[i].suit << A[i].value;
    }
    cout << "\n";
}

// バブルソートと選択ソートの結果を比較
bool isStable(Card C1[], Card C2[], int N) {
    for (int i = 0; i < N; i++) {
        if (C1[i].suit != C2[i].suit) return false;
    }
    return true;
}

int main() {
    Card C1[100], C2[100];
    int N;

    cin >> N;
    for (int i = 0; i < N; i++) cin >> C1[i].suit >> C1[i].value;
    for (int i = 0; i < N; i++) C2[i] = C1[i]; // C1のコピーC2を作成

    bubbleSort(C1, N);
    selectionSort(C2, N);

    print(C1, N);
    cout << "Stable\n"; // バブルソートは安定なソートなので常にStableを出力
    print(C2, N);
    if (isStable(C1, C2, N)) {
        cout << "Stable\n";
    } else {
        cout << "Not stable\n";
    }

    return 0;
}

