#include<bits/stdc++.h>
using namespace std;
#define rep(i,n) for(ll i=0;i<n;i++)
#define repl(i,l,r) for(ll i=(l);i<(r);i++)
#define per(i,n) for(ll i=(n)-1;i>=0;i--)
#define perl(i,r,l) for(ll i=r-1;i>=l;i--)
#define fi first
#define se second
#define ins insert
#define pqueue(x) priority_queue<x,vector<x>,greater<x>>
#define all(x) (x).begin(),(x).end()
#define CST(x) cout<<fixed<<setprecision(x)
#define rev(x) reverse(x);
using ll=long long;
using vl=vector<ll>;
using vvl=vector<vector<ll>>;
using pl=pair<ll,ll>;
using vpl=vector<pl>;
using vvpl=vector<vpl>;
const ll MOD=1000000007;
const ll MOD9=998244353;
const int inf=1e9+10;
const ll INF=4e18;
const ll dy[8]={1,0,-1,0,1,1,-1,-1};
const ll dx[8]={0,1,0,-1,1,-1,1,-1};
template <typename T> inline bool chmax(T &a, T b) {
  return ((a < b) ? (a = b, true) : (false));
}
template <typename T> inline bool chmin(T &a, T b) {
  return ((a > b) ? (a = b, true) : (false));
}
template<typename X,typename M>
struct SegTreeLazy{
  using FX = function<X(X,X)>;
  using FA = function<X(X,M,int)>;
  using FM = function<M(M,M)>;
  int n;
  FX fx;
  FA fa;
  FM fm;
  const X ex;
  const M em;
  vector<X> dat;
  vector<M> lazy;
  SegTreeLazy(int _n,FX _fx,FA _fa,FM _fm,X _ex,M _em)
    :n(),fx(_fx),fa(_fa),fm(_fm),ex(_ex),em(_em),dat(_n*4,ex),lazy(_n*4,em){
    int x=1;while(_n>x)x<<=1;
    n=x;
  }
  void set(int i,X x){dat[i+n-1]=x;}
  void build(){
    for(int k=n-2;k>=0;k--)dat[k]=fx(dat[k*2+1],dat[k*2+2]);
  }
  void eval(int k,int len){
    if(lazy[k]==em)return;
    if(k<n-1){
      lazy[k*2+1]=fm(lazy[k*2+1],lazy[k]);
      lazy[k*2+2]=fm(lazy[k*2+2],lazy[k]);
    }
    dat[k]=fa(dat[k],lazy[k],len);
    lazy[k]=em;
  }
  void update_sub(int a,int b,M x,int k,int l,int r){
    eval(k,r-l);
    if(a<=l&&r<=b){
      lazy[k]=fm(lazy[k],x);
      eval(k,r-l);
    }
    else if(a<r&&l<b){
      update_sub(a,b,x,k*2+1,l,(l+r)>>1);
      update_sub(a,b,x,k*2+2,(l+r)>>1,r);
      dat[k]=fx(dat[k*2+1],dat[k*2+2]);
    }
  }
  void update(int a,int b,M x){update_sub(a,b,x,0,0,n);};
  X query_sub(int a,int b,int k,int l,int r){
    eval(k,r-l);
    if(r<=a||b<=l){
      return ex;
    }
    else if(a<=l&&r<=b){
      return dat[k];
    }
    else{
      X vl=query_sub(a,b,k*2+1,l,(l+r)/2);
      X vr=query_sub(a,b,k*2+2,(l+r)/2,r);
      return fx(vl,vr);
    }
  }
  X query(int a,int b){return query_sub(a,b,0,0,n);}
  X operator[](int i){
    return query(i,i+1);
  }
};
int main(){
  ll n,q;cin >> n >> q;
  auto fx=[](ll a,ll b){return a+b;};
  auto fa=[](ll a,ll b,int len){return a+b*len;};
  auto fm=[](ll a,ll b){return a+b;};
  SegTreeLazy<ll,ll> st(n,fx,fa,fm,0,0);
  while(q--){
    ll t;cin >> t;
    if(!t){
      ll l,r,x;cin >> l >> r >> x;l--;
      st.update(l,r,x);
    }
    else{
      ll l,r;cin >> l >> r;l--;
      cout << st.query(l,r) << endl;
    }
  }
} 
