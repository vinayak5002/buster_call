#include <iostream>
using namespace std;

#define MAXLEN 1000
// T[a][b]: (X[a],..) と (X[b],.) の LCS の長さ、未定の場合は -1
int T[MAXLEN + 1][MAXLEN + 1];   

//  s 内の t のインデックス、なければ -1 を返す 
int strIndex(string s, string t)
{
    int i;  // インデックス
    int j;  // s の添字
    int k;  // t の添字
    for (i = 0; i < s.length(); i++) {
	// (t[0],..) が (j[i],..) の先頭部分に一致するか調べる
	for (j = i, k = 0; k < t.length() && s[j] == t[k]; j++, k++)
	    ;
	if (k == t.length())
	    return i;
    }
    return -1;
}

// 遅い
int lcs(string X, string Y, int a, int b)
{
#ifdef DBG
    cout << "lcs:  X = " << X << ", Y = " << Y
	 << ", a = " << a << ", b = " << b << endl;
#endif
    if (T[a][b] >= 0)
	return T[a][b];
    if (a >= X.length() || b >= Y.length()) 
	return T[a][b] = 0;
    else if (X[a] == Y[b])
	return T[a][b] = 1 + lcs(X, Y, a + 1, b + 1);
    else
	return T[a][b] = max(lcs(X, Y, a + 1, b), lcs(X, Y, a, b + 1));
}

int lcs(string X, string Y)
{
    int lX = X.length();
    int lY = Y.length();
    for (int a = lX; a > 0; a--)
	for (int b = lY; b > 0; b--)
	    lcs(X, Y, a, b);
    return lcs(X, Y, 0, 0);
}  

int main()
{
#ifdef CLOCK    
    clock_t start_clock = clock();
#endif
    
    int q;
    cin >> q;
    for (int i = 0; i < q; i++) {
	string X, Y;
	cin >> X >> Y;
	
	for (int a = 0; a <= X.length(); a++)
	    for (int b = 0; b <= Y.length();  b++)
		T[a][b] = -1;
	
	int ans = lcs(X, Y);
#ifdef DBG
	getchar();
	for (int a = 0; a <= X.length(); a++) {
	    for (int b = 0; b <= Y.length(); b++) 
		cout << " " << T[a][b];
	    cout << endl;
	}
#endif
	cout << ans << endl;
    }

#ifdef CLOCK
    clock_t end_clock = clock();    
    cout << 1000 * (end_clock - start_clock) / CLOCKS_PER_SEC << " ms"
	 << endl;
#endif
    return 0;
}



