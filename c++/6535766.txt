#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;
using ll = long long int;

ll max_profit(vector<ll> &a, int begin, int end) {
    if (begin == end) {
        return a[begin];
    } else {
        int mid = (begin + end) / 2;
        ll left = max_profit(a, begin, mid);
        ll right = max_profit(a, mid + 1, end);

        ll sum_tmp = 0;
        ll right_sum_max = 0;
        ll left_sum_max = 0;

        for (int i = mid; i >= 0; i--) {
            left_sum_max = max(left_sum_max, sum_tmp + a[i]);
        }

        sum_tmp = 0;

        for (int i = mid + 1; i <= end; i++) {
            right_sum_max = max(right_sum_max, sum_tmp + a[i]);
        }

        return max(max(left, right), right_sum_max + left_sum_max);
    }
}

int main() {
    ll n;
    vector<ll> a(n);
    for (int i = 0; i < n; i++) cin >> a[i];
    vector<ll> b(n-1);
    for (int i = 1; i < n; i++) b[i-1] = a[i] - a[i-1];

    cout <<  max_profit(b, 0, a.size()-1) << endl;
}
