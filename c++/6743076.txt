# coding: utf-8
#import numpy as np
import os
import re
import math
from collections import defaultdict
from collections import deque
import collections
from fractions import Fraction
import bisect
from queue import PriorityQueue
import itertools
from itertools import accumulate
from copy import deepcopy
from collections import Counter
import heapq
from heapq import heappush,heappop,heapify
import random
import time
import sys
from functools import lru_cache
from functools import reduce
#readline=sys.stdin.readline
readline=sys.stdin.buffer.readline
sys.setrecursionlimit(10000)
mod=int(10**9+7)
inf=int(10**20)
class Edge:
    def __init__(self,x,y,cost=1):
        self.x=x
        self.y=y
        self.cost=cost
class unionfind:
    def __init__(self,n):
        self.n=n
        self.P=[a for a in range(n)]
        self.rank=[0]*n
 
    def find(self,x):
        if(x!=self.P[x]):
            self.P[x]=self.find(self.P[x])
        return self.P[x]
 
    def same(self,x,y):
        return self.find(x)==self.find(y)
 
    def link(self,x,y):
        if self.rank[x]<self.rank[y]:
            self.P[x]=y
        elif self.rank[y]<self.rank[x]:
            self.P[y]=x
        else:
            self.P[x]=y
            self.rank[y]+=1
 
    def unite(self,x,y):
        self.link(self.find(x),self.find(y))
 
    def size(self):
        S=set()
        for a in range(self.n):
            S.add(self.find(a))
        return len(S)
def Yn(b):
    if b:print("Yes")
    else:print("No")
def getbin(num,size):
    A=[0]*size
    for a in range(size):
        A[a]=1 if (num>>(size-a-1))&1==1 else 0
    return A
def getfacs(n,mod_=0):
    A=[1]*(n+1)
    for a in range(2,len(A)):
        A[a]=A[a-1]*a
        if(mod_>0):A[a]%=mod_
    return A
def comb(n,r,mod,fac):
    if(n-r<0):return 0
    return (fac[n]*pow(fac[n-r],mod-2,mod)*pow(fac[r],mod-2,mod))%mod
def nextcomb(num,size):
    x=num&(-num)
    y=num+x
    z=num&(~y)
    z//=x
    z=z>>1
    num=(y|z)
    if(num>=(1<<size)):return False
    else:return num
def getprimes(n):
    if n==0:return []
    ret=[True]*(n+1)
    ret[0]=False
    ret[1]=False
    for a in range(2,n+1):
        if ret[a]:
            for b in range(a*2,n+1,a):
                ret[b]=False
    return ret
def isprime(n):
    if(n<=1):return False
    i=2
    while i*i<=n:
       if(n%i==0):return False
       i+=1
    return True
def factorize(n):
    b = 2
    ret=defaultdict(int)
    while b * b <= n:
        while n % b == 0:
            n //= b
            ret[b]+=1
        b+=1
    if n > 1:ret[n]+=1
    return ret
def dijkstra(edges,V,start):
    mincost=[inf]*V
    visited=[False]*V
    G=[[] for a in range(V)]
    for edge in edges:
        G[edge.x].append([edge.cost,edge.y])
    Q=[]
    heappush(Q,[0,start])
    while len(Q)>0:
        nowcost,nowx=heappop(Q)
        if visited[nowx]:continue
        visited[nowx]=True
        mincost[nowx]=nowcost
        for cost,y in G[nowx]:
            if visited[y]:continue
            newcost=nowcost+cost
            heappush(Q,[newcost,y])
    return mincost
def warshallfloyd(edges,V):
    mincost=[[inf for b in range(V)] for a in range(V)]
    for a in range(V):mincost[a][a]=0
    for edge in edges:
        mincost[edge.x][edge.y]=min(mincost[edge.x][edge.y],edge.cost)#x→yが複数ある場合のためにmin()する
    for k in range(V):
        for s in range(V):
            for t in range(V):
                if mincost[s][k]==inf or mincost[k][t]==inf:continue
                mincost[s][t]=min(mincost[s][t],mincost[s][k]+mincost[k][t])
    return mincost
def bellemanford(edges,V,start):
    mincost=[inf]*V
    mincost[start]=0
    for _ in range(V):
        for edge in edges:
            if mincost[edge.x]==inf:continue
            mincost[edge.y]=min(mincost[edge.y],mincost[edge.x]+edge.cost)
    return mincost
class fordfulkerson:
    def __init__(self,edges,V,s,t):
        self.V=V
        self.used=[False]*V
        self.G=[[] for a in range(V)]
        self.s=s
        self.t=t
        for edge in edges:
            self.G[edge.x].append({"x":edge.x,"y":edge.y,"cap":edge.cost,"rev":len(self.G[edge.y])})
            self.G[edge.y].append({"x":edge.y,"y":edge.x,"cap":0,"rev":len(self.G[edge.x])-1})
    def dfs(self,v,t,f=inf):
        if v==t:return f
        self.used[v]=True
        for a in range(len(self.G[v])):
            x=self.G[v][a]["x"]
            y=self.G[v][a]["y"]
            cap=self.G[v][a]["cap"]
            rev=self.G[y][self.G[x][a]["rev"]]
            if self.used[y] or cap==0:continue
            f2=self.dfs(y,t,min(f,cap))
            if f2>0:
                self.G[v][a]["cap"]-=f2
                rev["cap"]+=f2
                return f2
        return 0
    def maxflow(self):
        flow=0
        while True:
            self.used=[False]*self.V
            zouka=self.dfs(self.s,self.t)
            if zouka==0:break
            flow+=zouka
        return flow
class binarytrie:
    def __init__(self,depth):
        self.root=[None,None,0] #0-child 1-child count
        self.bit_start=1<<(depth-1)
    def insert(self,x):
        node=self.root
        b=self.bit_start
        while b:
            i=bool(x&b)
            if node[i]==None:
                node[i]=[None,None,1]
            else:
                node[i][2]+=1
            node=node[i]
            b>>=1
    def pop_min(self,xor_mask=0):
        node=self.root
        b=self.bit_start
        ret=0
        node[2]-=1
        while b:
            i=bool(b&xor_mask)
            ret<<=1
            if node[i]==None:
                i^=1
                ret+=1
            node=node[i]
            b >>= 1

            if node[i][2] > 1:
                node[i][2] -= 1
                node = node[i]
            else:
                tmp = node[i]
                node[i] = None
                node = tmp
        return ret
    def get_min(self,xor_mask=0):
        node=self.root
        b=self.bit_start
        ret=0
        while b:
            i=bool(b&xor_mask)
            ret<<=1
            if node[i]==None:
                i^=1
                ret+=1
            node=node[i]
            b>>=1
        return ret
    def get_kth_min(self,k):
        b = self.bit_start
        node = self.root
        ret = 0
        while b:
            ret = ret << 1
            b >>= 1
            if node[0] is None:
                node = node[1]
                ret += 1
            elif node[1] is None:
                node = node[0]
            elif k <= node[0][2]:
                node = node[0]
            else:
                k -= node[0][2]
                node = node[1]
                ret += 1
        return ret
    def erase(self, x):
        b = self.bit_start
        node = self.root
        node[2] -= 1
        while b:
            i = bool(x & b)
            if node[i][2] > 1:
                node[i][2] -= 1
                node = node[i]
            else:
                tmp = node[i]
                node[i] = None
                node = tmp
            b >>= 1
    def lower_bound(self, bound=0):
        ret = self.get_kth_min(self.less_x(bound)+1)
        if ret > bound:return ret
    def upper_bound(self, bound=0):
        ret = self.get_kth_min(self.less_x(bound+1)+1)
        if ret < bound:return ret
    def less_x(self, x):
        if x < 0:return 0
        b = self.bit_start
        node = self.root
        ret = 0
        while b:
            i = bool(x & b)
            if node[i] is None:
                if i == 1:
                    ret += node[0][2]
                return ret
            else:
                if i == 1:
                    if node[0] is not None:
                        ret += node[0][2]
            node = node[i]
            b >>= 1
        return ret
    def is_exist(self, x):
        b = self.bit_start
        node = self.root
        while b:
            i = bool(x & b)
            if node[i] is None:
                return False
            node = node[i]
            b >>= 1
        return True
class SegTree:
    def __init__(self, init_val, segfunc, ide_ele):
        n = len(init_val)
        self.segfunc = segfunc
        self.ide_ele = ide_ele
        self.num = 1 << (n - 1).bit_length()
        self.tree = [ide_ele] * 2 * self.num
        for i in range(n):
            self.tree[self.num + i] = init_val[i]
        for i in range(self.num - 1, 0, -1):
            self.tree[i] = self.segfunc(self.tree[2 * i], self.tree[2 * i + 1])

    def update(self, k, x):
        k += self.num
        self.tree[k] = x
        while k > 1:
            self.tree[k >> 1] = self.segfunc(self.tree[k], self.tree[k ^ 1])
            k >>= 1

    def query(self, l, r):
        res = self.ide_ele
        l += self.num
        r += self.num
        while l < r:
            if l & 1:
                res = self.segfunc(res, self.tree[l])
                l += 1
            if r & 1:
                res = self.segfunc(res, self.tree[r - 1])
            l >>= 1
            r >>= 1
        return res
class Heap:
    def __init__(self,List=[],func=1):
        self.h=[]
        self.d=defaultdict(int)
        self.len=0
        self.func=func
        for l in List:self.push(l)
        
    def __len__(self):
        return self.len

    def push(self,x):
        x*=self.func
        heapq.heappush(self.h,x)
        self.d[x]+=1
        self.len+=1
    def pop(self):
        x=self.top()
        self.erase(x)
        return x
    def erase(self,x):
        x*=self.func
        if x not in self.d or self.d[x]==0:
            print(x,"is not in HeapDict")
            exit()
        else:
            self.d[x]-=1
            self.len-=1

        while len(self.h)>0:
            if self.d[self.top()*self.func]==0:
                heapq.heappop(self.h)
            else:
                break

    def is_exist(self,x):
        x*=self.func
        return x in self.d and self.d[x]!=0

    def top(self):
        return self.h[0]*self.func
def print2d(A):
    for a in A:
        print(*a)
def topologicalsort(DAG):#隣接リスト
    ret=[]
    Q=deque()
    V=[False]*len(DAG)
    #入次数
    indeg=[0]*len(DAG)
    for u in range(len(DAG)):
        for v in DAG[u]:
            indeg[v]+=1
    for u in range(len(DAG)):
        if indeg[u]==0 and V[u]==False:
            #BFS
            V[u]=True
            Q.append(u)
            while len(Q)>0:
                v=Q.popleft()
                ret.append(v)
                for k in DAG[v]:
                    indeg[k]-=1
                    if indeg[k]==0 and V[k]==False:
                        V[k]=True
                        Q.append(k)
    return ret



V,E=map(int,input().split())
G=[[] for i in range(V)]
for i in range(E):
    s,t=map(int,input().split())
    G[s].append(t)
ans=topologicalsort(G)
for a in ans:
    print(a)









