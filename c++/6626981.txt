#include<stdio.h>
#define MAX 100005
#define NIL -1

typedef struct{
	int parent;
	int left_child;
	int right_sibling;
}Node;

Node Tree[MAX];
int Depth[MAX];

void print(int node){
	int i,child_node;
	
	printf("node %d: ",node);
	printf("parent = %d, ",Tree[node].parent);
	printf("depth = %d, ",Depth[node]);
	
	if(Tree[node].parent==NIL)printf("root, ");
	else if(Tree[node].left_child==NIL)printf("leaf, ");
	else printf("internal node, ");
	
	printf("[");
	
	for(i=0,child_node=Tree[node].left_child; child_node != NIL; i++,child_node=Tree[child_node].right_sibling){
		if(i)printf(", ");
		printf("%d",child_node);
	}
	printf("]\n");
}

void rec(int node,int depth){//深さ再起呼び出し
	Depth[node]=depth;
	
	if(Tree[node].right_sibling != NIL)rec(Tree[node].right_sibling,depth);
	if(Tree[node].left_child != NIL)rec(Tree[node].left_child,depth+1);
}

int main (void){
	int i,j,k,n,node,child_num,root,left_child;
	
	scanf("%d",&n);
	//構造体Treeの初期化
	for(i=0;i<n;i++){
		Tree[i].parent=NIL;
		Tree[i].left_child=NIL;
		Tree[i].right_sibling=NIL;
	}
	for(i=0;i<n;i++){
		scanf("%d %d",&node,&k);
		for(j=0;j<k;j++){
			scanf("%d",&child_num);
			if(j==0)Tree[node].left_child=child_num;//最初の子をleft_childに
			else Tree[left_child].right_sibling=child_num;//次からは最初の子の兄弟なのでright_siblingに入れる
			//
			left_child=child_num;
			Tree[child_num].parent=node;
		}
	}
	for(i=0;i<n;i++){
		if(Tree[i].parent==NIL)root=i;
	}
	//
	rec(root,0);
	
	for(i=0;i<n;i++){
		print(i);
	}
	return 0;
}
		
