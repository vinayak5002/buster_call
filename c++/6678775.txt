#include <bits/stdc++.h>
#define FOR(i, a, b) for(ll i = (a); i < (b); ++i)
#define FORR(i, a, b) for(ll i = (a); i > (b); --i)
#define REP(i, n) for(ll i = 0; i < (n); ++i)
#define REPR(i, n) for(ll i = n; i >= 0; i--)
#define FOREACH(x, a) for(auto &(x) : (a))
#define dump(x) cout << #x << " = " << (x) << endl;
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define SP << " " <<
using namespace std;
using ll = long long;
using P = pair<ll, ll>;

#define int long long

const int SENTINEL = 1e9;

int cnt = 0;

void trace(vector<int> A, int n) {
  for(int i = 0; i < n; i++) {
    if(i > 0) { cout << " "; }
    cout << A[i];
  }
  cout << endl;
}

void merge(vector<int> &A, int left, int mid, int right) {
  int n1 = mid - left;
  int n2 = right - mid;
  vector<int> L(n1 + 1);
  vector<int> R(n2 + 1);

  REP(i, n1) { L[i] = A[left + i]; }
  REP(i, n2) { R[i] = A[mid + i]; }

  L[n1] = SENTINEL;
  R[n2] = SENTINEL;

  int l = 0;
  int r = 0;

  for(int i = left; i < right; i++) {
    cnt++;
    if(L[l] < R[r]) {
      A[i] = L[l];
      l++;
    } else {
      A[i] = R[r];
      r++;
    }
  }
}

void merge_sort(vector<int> &A, int left, int right) {
  if(left + 1 < right) {
    int mid = (left + right) / 2;
    merge_sort(A, left, mid);
    merge_sort(A, mid, right);
    merge(A, left, mid, right);
  }
}

signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);

  int n;
  cin >> n;

  vector<int> A(n);
  REP(i, n) { cin >> A[i]; }

  merge_sort(A, 0, n);

  trace(A, n);
  cout << cnt << endl;

  return 0;
}

