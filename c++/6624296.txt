######################
import sys
from collections import deque, defaultdict, Counter
from bisect import bisect, bisect_left
from heapq import heappop, heappush, heappushpop, heapify
from itertools import combinations, permutations, accumulate
from math import gcd, ceil, floor, sqrt, factorial

sys.setrecursionlimit(10000000)
mod = 998244353
MOD = 1000000007
INF = float("inf")
arrays = [(-1, 0), (0, 1), (1, 0), (0, -1)]

input = sys.stdin.readline
def ii(): return int(input())
def fi(): return float(input())
def si(): return input().rstrip()
def mii(): return map(int, input().split())
def mfi(): return map(float, input().split())
def mi1i(): return map(lambda x: int(x) - 1, input().split())

def lii(): return list(map(int, input().split()))
def li1i(): return list(map(lambda x: int(x) - 1, input().split()))
def lfi(): return list(map(float, input().split()))
def lis(): return list(input().rstrip())
def lmis(): return list(map(str, input().split()))

def iir(n): return [int(input()) for _ in range(n)]
def fir(n): return [float(input()) for _ in range(n)]
def isr(n): return [input().rstrip() for _ in range(n)]

def liir(n): return [list(map(int, input().split())) for _ in range(n)]
def li1ir(n): return [list(map(lambda x: int(x) - 1, input().split())) for _ in range(n)]
def lfir(n): return [list(map(float, input().split())) for _ in range(n)]
def lsiir(n): return [list(input().rstrip()) for _ in range(n)]

def lii_alp(): return list(map(lambda x: ord(x) - 97, input().rstrip()))
def lii_ALP(): return list(map(lambda x: ord(x) - 65, input().rstrip()))

##########################
n,q = mii()
lst = [2**31 - 1]*n
for _ in range(q):
    c = lii()
    if c[0] == 0:
        lst[c[1]] = c[2]
    else:
        print(min(lst[c[1]:c[2]+1]))

