#include<stdio.h>

#define N 100
#define INFTY 1<<21
#define MAX_NUM 100

int M[N][N],n;
int d[N];

/* キュー構造体 */
typedef struct QUEUE {
    /* データの最後尾 */
    int tail;
    /* データの先頭 */
    int head;
    /* キューされているデータ */
    int data[MAX_NUM];
} QUEUE_T;

/* キューを初期化する関数 */
void initQueue(QUEUE_T *queue){

    /* キューを空に設定 */
    queue->head = 0;
    queue->tail = -1;
}


/* ENQUEUEする関数 */
void push(QUEUE_T *queue, int input){

    /* キューが満杯なら何もせず関数終了 */
    if((queue->tail + 2) % MAX_NUM == queue->head){
        printf("キューが満杯でENQUEUEできません\n");
        return;
    }

    /* データをデータの最後尾の１つ後ろに格納 */
    queue->data[(queue->tail + 1) % MAX_NUM] = input;

    /* データの最後尾を１つ後ろに移動 */
    queue->tail = (queue->tail + 1) % MAX_NUM;
}

/* DEQUEUEする関数 */
int pop(QUEUE_T *queue){
    int ret = 0;

    /* キューが空なら何もせずに関数終了 */
    if((queue->tail + 1) % MAX_NUM == queue->head){
        return -1;
    }

    /* データの先頭からデータを取得 */
    ret = queue->data[queue->head];

    /* データの先頭を１つ後ろにずらす */
    queue->head = (queue->head + 1) % MAX_NUM;

    /* 取得したデータを返却 */
    return ret;
}

void bfs(int s)
{
	QUEUE_T q;
	initQueue(&q);
	push(&q,s);
	for(int i = 0; i<n; i++)
	{
		d[i] = INFTY;
	}
		d[s] = 0;
	int u;
	while((q.tail + 1) % MAX_NUM != q.head)
	{
		u = pop(&q);
		for(int v = 0; v<n; v++)
		{
			if(M[u][v] == 0)continue;
			if(d[v] != INFTY)continue;
			d[v] = d[u] + 1;
			push(&q,v);
		}
	}
	for(int i = 0; i<n; i++)
	{
		printf("%d ",i+1);
		if(d[i] == INFTY)
		{
			printf("%d\n",-1);
		}
		else
		{
			printf("%d\n",d[i]);
		}
	}
}
			
int main()
{
	int u, v, k, i, j;
	
	scanf("%d",&n);
	
	for(i=0; i<n; i++)
	{
		for(j=0; j<n; j++)
		{
			M[i][j] = 0;
		}
	}
	
	for(i=0; i<n; i++)
	{
		scanf("%d %d",&u,&k);
		u--;
		for(j=0; j<k; j++)
		{
			scanf("%d",&v);
			v--;
			M[u][v] = 1;
		}
	}
	
	bfs(0);
	
	return 0;
}

