#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using pll = pair<ll, ll>;
#define drep(i, cc, n) for (ll i = (cc); i <= (n); ++i)
#define rep(i, n) drep(i, 0, n - 1)
#define all(a) (a).begin(), (a).end()
#define pb push_back
#define fi first
#define se second

const ll MOD = 1000000007;
const ll MOD2 = 998244353;
const ll INF = 1LL << 31;
const ll N_MAX = 2e5;

struct LazySegmentTree{
    ll n;
    vector<ll> data, lazy;
    vector<bool> lazyFlag;

    LazySegmentTree(ll n_){
        n = 1; while (n < n_) n *= 2;
        data.resize(2*n, 0);
        lazy.resize(2*n, 0);
        lazyFlag.resize(2*n, false);
    }

    void eval(ll k, ll l, ll r){
        if(lazyFlag[k]){
            data[k] = lazy[k];
            if(r-l > 1){
                lazy[2*k+1] = lazy[k]/2;
                lazy[2*k+2] = lazy[k]/2;
                lazyFlag[2*k+1] = lazyFlag[2*k+2] = true;
            }
            lazyFlag[k] = false;
        }
    }

    void update(ll a, ll b, ll x){update_sub(a, b, x, 0, 0, n);}

    void update_sub(ll a, ll b, ll x, ll k, ll l, ll r){
        eval(k, l, r);
        if(a <= l && r <= b){
            lazy[k] = x*(r-l);
            lazyFlag[k] = true;
            eval(k, l, r);
        }else if(!(b <= l || r <= a)){
            update_sub(a, b, x, 2*k+1, l, (l+r)/2);
            update_sub(a, b, x, 2*k+2, (l+r)/2, r);
            data[k] = data[2*k+1]+data[2*k+2];
        }
    }

    // the minimun element of [a, b)
    ll query(ll a, ll b){return query_sub(a, b, 0, 0, n);}

    ll query_sub(ll a, ll b, ll k, ll l, ll r){
        if(r <= a || b <= l){
            return 0;
        }else if(a <= l && r <= b){
            eval(k, l, r);
            return data[k];
        }else{
            eval(k, l, r);
            ll vl = query_sub(a, b, 2*k+1, l, (l+r)/2);
            ll vr = query_sub(a, b, 2*k+2, (l+r)/2, r);
            return vl+vr;
        }
    }
};

int main(){
    ll n, q;
    cin >> n >> q;

    LazySegmentTree LST(n);
    vector<ll> ans;
    rep(i, q){
        ll t;
        cin >> t;

        if (t == 0){
            ll s, t, x;
            cin >> s >> t >> x;
            LST.update(s, t+1, x);
        }else{
            ll s, t;
            cin >> s >> t;
            ans.pb(LST.query(s, t+1));
        }
    }

    rep(i, (ll)ans.size()) cout << ans[i] << endl;
}
