#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef long long ll;

#define YESNO(bool)            \
    if (bool) {                \
        cout << "YES" << endl; \
    } else {                   \
        cout << "NO" << endl;  \
    }
#define yesno(bool)            \
    if (bool) {                \
        cout << "yes" << endl; \
    } else {                   \
        cout << "no" << endl;  \
    }
#define YesNo(bool)            \
    if (bool) {                \
        cout << "Yes" << endl; \
    } else {                   \
        cout << "No" << endl;  \
    }
#define REP(i, n) for (ll i = 0; i < ll(n); i++)
#define REPD(i, n) for (ll i = n - 1; i >= 0; i--)
#define FOR(i, a, b) for (ll i = a; i <= ll(b); i++)
#define FORD(i, a, b) for (ll i = a; i >= ll(b); i--)
#define FORA(i, I) for (const auto& i : I)

#define ALL(x) x.begin(), x.end()
#define SIZE(x) ll(x.size())

#define INF32 2147483647
#define INF64 9223372036854775807
#define MOD 1000000007

#define F first
#define S second
#define pb push_back
#define mp make_pair

#define OP(m) cout << m << endl;
ll myceil(ll a, ll b) { return (a + (b - 1)) / b; }
ll myfloor(ll a, ll b) { return a / b; }

int dx4[4] = {1, 0, -1, 0};
int dy4[4] = {0, 1, 0, -1};
int dx8[8] = {-1, -1, 0, 1, 1, 1, 0, -1};
int dy8[8] = {0, -1, -1, -1, 0, 1, 1, 1};
// cout<<fixed<<setprecision(10);

int color[101], d[101], f[101], tt = 0;

int G[101][101];
int n;
const int WHITE = 0, GRAY = 1, BLACK = 2;

void dfs(int u) {
    d[u] = ++tt;
    color[u] = BLACK;
    REP(v, n) {
        if (G[u][v] == 0 || color[v] != WHITE) continue;
        dfs(v);
    }

    f[u] = ++tt;
}

signed main() {
    cin >> n;

    REP(i, n) {
        int u, k;
        cin >> u >> k;
        REP(j, k) {
            int v;
            cin >> v;
            G[u - 1][v - 1] = 1;
        }
    }

    REP(u, n) {
        if (color[u] != WHITE) continue;
        dfs(u);
    }

    REP(i, n) cout << i + 1 << " " << d[i] << " " << f[i] << endl;
}
