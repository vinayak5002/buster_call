#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#define _GLIBCXX_DEBUG
using namespace std;
using std::cout;
using std::cin;
using std::endl;
using ll=long long;
using ld=long double;
ll ILL=2167167167167167167;
const int INF=2100000000;
const ll mod=998244353;
#define rep(i,a) for (int i=0;i<a;i++)
#define all(p) p.begin(),p.end()
template<class T> using _pq = priority_queue<T, vector<T>, greater<T>>;
template<class T> ll LB(vector<T> &v,T a){return lower_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> ll UB(vector<T> &v,T a){return upper_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> bool chmin(T &a,const T &b){if(a>b){a=b;return 1;}else return 0;}
template<class T> bool chmax(T &a,const T &b){if(a<b){a=b;return 1;}else return 0;}
template<class T> void So(vector<T> &v) {sort(v.begin(),v.end());}
template<class T> void Sore(vector<T> &v) {sort(v.begin(),v.end(),[](T x,T y){return x>y;});}
void yneos(bool a){if(a) cout<<"Yes\n"; else cout<<"No\n";}
template<class T> void vec_out(vector<T> &p){for(int i=0;i<(int)(p.size());i++){if(i) cout<<" ";cout<<p[i];}cout<<"\n";}

void solve();
// oddloop
int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	
	solve();
}

void solve(){
	int n,m;
	cin>>n>>m;
	vector<vector<pair<int,ll>>> G(n),G_rev(n);
	vector<int> from(m),to(m),len(m);
	map<pair<int,int>,int> edge;
	rep(i,m){
		cin>>from[i]>>to[i]>>len[i];
		from[i]--,to[i]--;
		G[from[i]].push_back({to[i],len[i]});
		G_rev[to[i]].push_back({from[i],len[i]});
		edge[{from[i],to[i]}]=i;
	}
	auto dij=[&](int sta,vector<vector<pair<int,ll>>> &_g)->vector<ll>{
		vector<ll> dp(n,ILL);
		dp[sta]=0;
		_pq<pair<ll,int>> pq;
		pq.push({0,sta});
		while(!pq.empty()){
			ll cos;int ind;
			tie(cos,ind)=pq.top();
			pq.pop();
			if(dp[ind]<cos) continue;
			for(auto x:_g[ind]){
				if(chmin(dp[x.first],cos+x.second)) pq.push({dp[x.first],x.first});
			}
		}
		return dp;
	};
	int T=1;
	vector<ll> p=dij(0,G),q=dij(T,G_rev);
	vector<bool> spe(m),seen(n);
	priority_queue<pair<ll,int>> pq;
	pq.push({p[T],T});
	seen[T]=1;
	while(!pq.empty()){
		ll cost;int ind;
		tie(cost,ind)=pq.top();
		pq.pop();
		int J=3,v=-1;
		if(pq.empty()) J=0;
		for(auto x:G_rev[ind]){
			if(!seen[x.first]&&cost-x.second==p[x.first]){
				J++;
				v=x.first;
				seen[x.first]=1;
				pq.push({p[x.first],x.first});
			}
		}
		if(J==1) spe[edge[{v,ind}]]=1;
	}
	rep(i,m){
		if(q[0]>p[to[i]]+q[from[i]]+len[i]){
			cout<<"HAPPY\n";
		}
		else if(spe[i]) cout<<"SAD\n";
		else cout<<"SOSO\n";
	}
	//vec_out(p);vec_out(q);
}

