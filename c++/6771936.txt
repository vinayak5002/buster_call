#include <stdio.h>
#define MAX 500000
#define SENTINEL 2000000000 //番兵

int L[MAX / 2 + 2], R[MAX / 2 + 2];

int merge(int a[], int n, int left, int mid, int right)
{
  int i, j, k;
  int sum = 0;          //比較回数の総数
  int n1 = mid - left;  //左側の要素の数
  int n2 = right - mid; //右側の要素の数

  for (i = 0; i < n1; i++)
  {
    L[i] = a[left + i]; //配列Lにaの配列の左側を代入していく
  }

  for (i = 0; i < n2; i++)
  {
    R[i] = a[mid + i]; //配列Rにaの配列の右側を代入していく
  }

  L[n1] = R[n2] = SENTINEL; //番兵

  i = 0;
  j = 0;
  for (k = left; k < right; k++)
  {
    //比較
    if (L[i] <= R[j])
    {
      a[k] = L[i++];
    }
    else
    {
      a[k] = R[j++];
      sum += n1 - i; // Lに含まれマージ後にR[j]よりも後に移動するような要素の数はn1 - iで求めることができる
    }
  }

  return sum;
}

int mergeSort(int a[], int n, int left, int right)
{
  int mid;
  int v1, v2, v3;

  if (left + 1 < right)
  {
    mid = (left + right) / 2;
    //半分に分割する
    v1 = mergeSort(a, n, left, mid);
    v2 = mergeSort(a, n, mid, right);
    //分割したものをソートする
    v3 = merge(a, n, left, mid, right);
    return v1 + v2 + v3;
  }
  else
  {
    return 0;
  }
}

int main(void)
{
  int a[MAX];
  int n, i;
  int ans;

  scanf("%d", &n);

  for (i = 0; i < n; i++)
  {
    scanf("%d", &a[i]);
  }

  ans = mergeSort(a, n, 0, n); // rightは0, leftはnに初期値を設定

  printf("%d\n", ans);

  return 0;
}
