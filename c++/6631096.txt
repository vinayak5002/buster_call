#include <cstdio>
#include <cstring>
#include <cmath>
#include <vector>
#include <algorithm>
#include<iostream>
using namespace std;
const int maxn = 1e3 + 5;

// -------------------- 通用基本常数 --------------------

const double eps = 1e-8;
const double pi = acos(-1.0);

// -------------------- 二维点（向量）类 --------------------

struct Point {
    double x, y;
    Point() {}
    Point(double x, double y) : x(x), y(y) {}
    // 输入一个点
    void input() {
        scanf("%lf%lf", &x, &y);
    };
    double norm() {
    	return sqrt(x * x + y * y);
    };
    friend Point operator + (const Point& a, const Point& b) {
        return Point(a.x + b.x, a.y + b.y);
    }
    friend Point operator - (const Point& a, const Point& b) {
        return Point(a.x - b.x, a.y - b.y);
    }
    friend Point operator * (const Point& a, const double& b) {
        return Point(a.x * b, a.y * b);
    }
    friend Point operator * (const double& a, const Point& b) {
        return Point(a * b.x, a * b.y);
    }
    friend Point operator / (const Point& a, const double& b) {
        return Point(a.x / b, a.y / b);
    }
};

// -------------------- 向量与向量运算 --------------------

// 计算两个向量的叉积
double det(const Point& a, const Point& b) {
    return a.x * b.y - a.y * b.x;
}

// 计算两个向量的点积
double dot(const Point& a, const Point& b) {
    return a.x * b.x + a.y * b.y;
}

// -------------------- 线段（直线）类 --------------------

struct Line
{
    Point a, b;
    Line() {};
    Line(Point _a, Point _b)
        :a(_a), b(_b) {};
};

vector<Point>v;

struct Circle {
    Point o;
    double r;
    Circle(Point _o, double _r)
        :o(_o), r(_r){};
};

Point cross(Line l1, Line l2) {
    Point res = l1.a;
    double t = det((l1.a - l2.a), (l2.a - l2.b)) / det((l1.a - l1.b), (l2.a - l2.b));
    res.x += (l1.b.x - l1.a.x) * t, res.y += (l1.b.y - l1.a.y) * t;
    return res;
}

Point rotate(Point a,double deg) {
    return Point(a.x * cos(deg) - a.y * sin(deg), a.y * cos(deg) + a.x * sin(deg));
}

bool cmp(Point a, Point b) {
    if(a.x == b.x)
        return a.y < b.y;
    return a.x < b.x;
}


int main() {
    Point o, p;
    double r;
    cin>>p.x>>p.y;
    cin>>o.x>>o.y>>r;
    Circle c = Circle(o, r);

    Point gap = p - o;
    double d = gap.norm();
    double the = acos(r/d);
    Point vec1 = rotate(gap/d, the);
    Point vec2 = rotate(gap/d, -the);
    Point ans1 = o + r*vec1;
    Point ans2 = o + r*vec2;
    if(!cmp(ans1, ans2))
        swap(ans1, ans2);
    printf("%.12lf %.12lf %.12lf %.12lf\n",ans1.x,ans1.y,ans2.x,ans2.y);
}


