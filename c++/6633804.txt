#include<iostream>
#include<vector>
#include<cmath>
#include<iomanip>
using namespace std;

struct Point{
    double x;
    double y;
};



void KochCurve(Point p, Point q,int cnt, int n,vector<Point> &answers){
    if(n>cnt){
        Point tri1,tri2,m,ans;
        tri1.x = (2*p.x+q.x)/3.0; tri1.y = (2*p.y+q.y)/3.0;
        tri2.x = (p.x+2*q.x)/3.0; tri2.y = (p.y+2*q.y)/3.0;
        m.x = (p.x+q.x)/2.0; m.y = (p.y+q.y)/2.0;
        
        ans.x = (tri2.x - tri1.x)/2.0 - (tri2.y - tri1.y)*sqrt(3.0)/2.0 + tri1.x;
        ans.y = (tri2.x - tri1.x)*sqrt(3.0)/2.0 + (tri2.y - tri1.y)/2.0 + tri1.y;
        
        int num = 0;
        for(int i=0; i<answers.size(); i++){
            if(answers[i].x == p.x && answers[i].y == p.y){
                num = i+1;
            }
        }
        answers.insert(answers.begin()+num, tri2);
        answers.insert(answers.begin()+num, ans);
        answers.insert(answers.begin()+num, tri1);

        KochCurve(p,tri1,cnt+1,n,answers);
        KochCurve(tri1,ans,cnt+1,n,answers);
        KochCurve(ans,tri2,cnt+1,n,answers);
        KochCurve(tri2,q,cnt+1,n,answers);
    }
}

int main(){
    int n;
    cin>>n;
    Point p,q;
    p.x = 0.00; p.y = 0.00;
    q.x = 100.00; q.y = 0.00;
    int cnt = 0;
    vector<Point> answers;
    answers.push_back(p);
    answers.push_back(q);
    KochCurve(p,q,cnt,n,answers);
    for(int i=0; i<answers.size(); i++){
        cout<<fixed;
        cout<<setprecision(10)<<answers[i].x<<" "<<answers[i].y<<endl;
    }
    return 0;
}
