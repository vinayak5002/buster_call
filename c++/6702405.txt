#include <bits/stdc++.h>
using namespace std ;
#define MAX 1000000
#define NIL -2000000002
#define INF 2000000002
#define MAXN 50
int n;
int A[101][101] ; // 0以外では初期化できないんだってーーー。

struct matrix {
    int a; 
    int b;
};
vector<matrix> X; //与えられた行列を格納しておく。

int calc(int m,int n){
    // cout << "m = " << m << ",n= " << n << endl;
    if ( A[m][n] != NIL ){return A[m][n];}
    if ( m == n ) {return 0;}
    else if ( n - m == 1) {
        A[m][n] = X.at(m).a * X.at(m).b * X.at(n).b;
        return A[m][n] ;
    } else {
        // split line を考える。
        int split = m  ;
        int trymin = INF ;
        while (split <= n -1) {
            // cout << "split: " << split << endl ;
            int trynow = calc(m,split) + calc(split+1, n) + X.at(m).a * X.at(split).b * X.at(n).b;  
            if (trynow < trymin) {trymin = trynow ; }
            split ++;
        }
        A[m][n] = trymin ;
        return A[m][n] ;
    }
}

void clearvalueA() {
    for (int i=0 ; i<101; i++) {
        for  (int j=0; j<101; j++) {
            A[i][j] = NIL ;
            if ( i==0 || j==0 ) { A[i][j]=0; } //大事
        }
    }
}

int main() {
    int c;
    clearvalueA();
    cin >> c ;
    matrix datain;
    datain.a = NIL; datain.b = NIL;
    X.push_back(datain);

    for (int i = 0 ; i < c ; i++ ) {
        int a, b ;
        cin >> a  >> b ;
        datain.a = a; datain.b = b;
        X.push_back(datain);

    }
    // cout << "X size : " << X.size() << endl ;
    for (int j=1 ; j < X.size(); j++ ) {
    //    cout << j <<" : " << X.at(j).a << ", " << X.at(j).b << endl ;
    }
    cout << calc(1, X.size()-1) << endl ;
    //cout << calc(1, 3) << endl ;
    //cout << calc(2, 4) << endl ;
    //cout << calc(1, 4) << endl ;

	return 0 ;
}

