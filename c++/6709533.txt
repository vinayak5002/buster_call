#include <bits/stdc++.h>
using namespace std ;
#define MAX 1000000
#define NIL -2000000002
#define INF 2000000002
#define MAXN 50
int n;
int t = NIL;

struct Node {
    int con;
    int rank; 
    int parent; 
};

vector<Node> X ;

int findset (int u) {
    //uが属する集合の代表を返す。
    if ( u != X.at(u).parent ) {
        X.at(u).parent = findset (X.at(u).parent) ;
    }
    return X.at(u).parent;
}

int unite (int u, int v) {
    //uが属する集合とvが属する集合を合体。
    int a , b ; // aとbがuとvの親を示す。
    a = findset(u) ;
    b = findset(v) ;
    if (X.at(a).rank > X.at(b).rank) {
        X.at(b).parent = a ;
    } else if  (X.at(a).rank < X.at(b).rank) {
        X.at(b).parent = a ;
    } else {
        X.at(b).parent = a ;
        X.at(a).rank++ ;
    }

}

int same(int u, int v) {
    int a = findset(u) ;
    int b = findset(v) ;
    if ( a == b ) {return 1;} else {return 0; }
}

int main() {
    int q = 0;
    cin >> n >> q ;
    // nは登場人物の人数、qはクエリ（命令）の個数
    // clearvalueA();

    Node indata;
    indata.rank = 0;    indata.con = -1; 

    for (int i = 0 ; i < n ; i++ ) {
        indata.parent = i;
        X.push_back(indata); //とりあえずn人をつくる。
    }

    for (int i = 0 ; i < q ; i++ ) {
        int a , b, c ;
        cin >> c >> a >> b ; // cはcommmand
        //  cout << c << "  " << a << "  " << b << endl;
        if (c==0) { unite(a,b);  }  // unite
        else if (c==1)  { cout << same(a,b) << endl ; } // same?
    }
        
	return 0 ;
}

