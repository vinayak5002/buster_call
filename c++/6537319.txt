#include <algorithm>
#include <iomanip>
#include <array>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iostream>
#include <iterator>
#include <map>
#include <queue>
#include <set>
#include <list>
#include <string>
#include <sstream>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <numeric>
#include <vector>
#include <climits>
using namespace std;
#if __has_include(<atcoder/all>)
#include <atcoder/all>
using namespace atcoder;
#endif
#define GET_MACRO(_1, _2, _3, NAME, ...) NAME
#define _rep(i, n) _rep2(i, 0, n)
#define _rep2(i, a, b) for(int i = (int)(a); i < (int)(b); i++)
#define rep(...) GET_MACRO(__VA_ARGS__, _rep2, _rep)(__VA_ARGS__)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
using i64 = long long;
template<class T, class U>
bool chmin(T& a, const U& b) { return (b < a) ? (a = b, true) : false; }
template<class T, class U>
bool chmax(T& a, const U& b) { return (b > a) ? (a = b, true) : false; }

template<typename T>istream& operator>>(istream&i,vector<T>&v){rep(j,v.size())i>>v[j];return i;}
template<typename T>string join(vector<T>&v){stringstream s;rep(i,v.size())s<<' '<<v[i];return s.str().substr(1);}
template<typename T>ostream& operator<<(ostream&o,vector<T>&v){if(v.size())o<<join(v);return o;}
template<typename T>string join(vector<vector<T>>&vv){string s="\n";rep(i,vv.size())s+=join(vv[i])+"\n";return s;}
template<typename T>ostream& operator<<(ostream&o,vector<vector<T>>&vv){if(vv.size())o<<join(vv);return o;}
template<class T> using pq = priority_queue<T, vector<T>, greater<T>>;

int main() {
    while(1) {
        int n;
        cin >> n;
        if(n == 0) break;
        vector<char> post(n);
        cin >> post;
        int a_size = 'z' - 'a' + 1;
        vector<int> v(a_size);
        int cnt = 0;
        int max_index = 0;
        rep(i, n) {
            int sub = n - i - 1; // 残り投票数
            max_index = 0;
            int max_num = 0;
            int sub_num = 0;
            v[post[i] - 'A']++;
            rep(j, a_size) {
                if(chmax(max_num, v[j])) {
                    max_index = j;
                }
            }
            rep(j, a_size) {
                if(j == max_index) continue;
                chmax(sub_num, v[j]);
            }
            if(sub_num + sub < max_num) {
                cnt = i + 1; break;
            }
        }
        if(cnt == 0) cout << "TIE" << endl;
        else{
            cout << char('A' + max_index) << " " << cnt << endl;
        }
    }
    return 0;
}
