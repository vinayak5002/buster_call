#include <bits/stdc++.h>

// clang-format off

using namespace std;
#define all(a) a.begin(), a.end()
#define int long long
#define over_load_(_1, _2, _3, _4, NAME, ...) NAME
#define rep(...) over_load_(__VA_ARGS__, rep4, rep3, rep2)(__VA_ARGS__)
#define rep2(i, r) for (int i = 0; i < static_cast<int>(r); (i) += 1)
#define rep3(i, l, r) for (int i = static_cast<int>(l); i < static_cast<int>(r); (i) += 1)
#define rep4(i, l, r, stride) for (int i = static_cast<int>(l); i < static_cast<int>(r); (i) += (stride))
#define rrep(...) over_load_(__VA_ARGS__, rrep4, rrep3, rrep2)(__VA_ARGS__)
#define rrep2(i, r) for (int i = static_cast<int>(r) - 1; i >= 0; (i) -= 1)
#define rrep3(i, l, r) for (int i = static_cast<int>(r) - 1; i >= static_cast<int>(l); (i) -= 1)
#define rrep4(i, l, r, stride) for (int i = static_cast<int>(r) - 1; i >= static_cast<int>(l); (i) -= (stride))
#define fore(i, a) for (auto &i : a)
template <typename T1, typename T2>
inline bool chmax(T1 &a, T2 b)
{
    return a < b && (a = b, true);
}
template <typename T1, typename T2>
inline bool chmin(T1 &a, T2 b)
{
    return a > b and (a = b, true);
}
constexpr char newl = '\n';

long long pow2(int x) {return x * x;}
bool isupper(char c) {return ('A' <= c and c <= 'Z');}
bool islower(char c) {return ('a' <= c and c <= 'z');}
bool isnumber(char c) {return ('0' <= c and c <= '9');}

// O(logX)
int getdigit(long long x) {
    int res = 0;
    while(x > 0) {
        res++;
        x /= 10;
    }
    return res;
}

using ll = long long;
using vi = vector<int>;
using vll = vector<ll>;
using vvi = vector<vi>;
using vvll = vector<vll>;
using vp = vector<pair<int, int>>;
using vs = vector<string>;

const ll sup = LONG_LONG_MAX / 2 - 1;
const double pi = 3.141592653589793;

string a, b;

void cut(string& s, vs& block, vs& teisuu) {
    rep(i, s.size()) {
        if (!(isupper(s[i]) or islower(s[i]) or isnumber(s[i]))) block.push_back("");
        else block.back() += s[i];
    }

    rep(i, s.size()) {
        if (s[i] != '"') continue;
        i++;
        teisuu.push_back("");
        while(i < s.size() and s[i] != '"') {
            teisuu.back() += s[i];
            i++;
        }
    }
}

void solve() {
    vs aa(1, ""), bb(1, "");
    vs aaa, bbb;
    cut(a, aa, aaa); cut(b, bb, bbb);
    bool identical = true;
    bool close = true;

    if (aa.size() != bb.size()) {
        identical = false;
        close = false;
    }

    if (aaa.size() != bbb.size()) {
        identical = false;
        close = false;
    }

    if (identical) {
        int now = 0;
        int diff = 0;
        rep(i, aa.size()) {
            if (now < aaa.size() and aa[i] == aaa[now]) {
                now++;
                if (aaa[now - 1] == bbb[now - 1]) continue;
                identical = false;
                diff++;
            }
            else if (aa[i] != bb[i]) {
                identical = false;
                close = false;
            }
        }

        if (diff > 0) identical = false;
        if (diff > 1) close = false;
    }

    if (identical) cout << "IDENTICAL\n";
    else if (close) cout << "CLOSE\n";
    else cout << "DIFFERENT\n";
}

signed main() {
    while(1) {
        cin >> a;
        if (a == ".") break;
        cin >> b;
        solve();
    }
}

