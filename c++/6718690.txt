#pragma GCC ta g("avx2")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#define DEBUG
#ifdef DEBUG
template <class T, class U>
ostream &operator<<(ostream &os, const pair<T, U> &p) {
    os << '(' << p.first << ',' << p.second << ')';
    return os;
}
template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
    os << '{';
    for(int i = 0; i < (int)v.size(); i++) {
        if(i) { os << ','; }
        os << v[i];
    }
    os << '}';
    return os;
}
void debugg() { cerr << endl; }
template <class T, class... Args>
void debugg(const T &x, const Args &... args) {
    cerr << " " << x;
    debugg(args...);
}
#define debug(...)                                                             \
    cerr << __LINE__ << " [" << #__VA_ARGS__ << "]: ", debugg(__VA_ARGS__)
#define dump(x) cerr << __LINE__ << " " << #x << " = " << (x) << endl
#else
#define debug(...) (void(0))
#define dump(x) (void(0))
#endif
using namespace std;
typedef long long ll;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<char> vc;
typedef vector<string> vs;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef pair<ll,ll> P;
typedef pair<int,int> pii;
typedef vector<P> vpl;
typedef tuple<ll,ll,ll,ll> tapu;
#define rep(i,n) for(int i=0; i<(n); i++)
#define REP(i,a,b) for(int i=(a); i<(b); i++)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
template<typename T1,typename T2> inline bool chmin(T1 &a,T2 b){
	if(a>b){
		a = b; return true;
	}
	else return false;
}
template<typename T1,typename T2> inline bool chmax(T1 &a,T2 b){
	if(a<b){
		a = b; return true;
	}
	else return false;
}
template<typename T> inline void print(T &a){
    int sz = a.size();
    for(auto itr = a.begin(); itr != a.end(); itr++){
		cout << *itr;
        sz--;
        if(sz) cout << " ";
	}
    cout << "\n";
}
template<typename T1,typename T2> inline void print2(T1 a, T2 b){
	cout << a << " " << b << "\n";
}
template<typename T1,typename T2,typename T3> inline void print3(T1 a, T2 b, T3 c){
	cout << a << " " << b << " " << c << "\n";
}
void mark() {cout << "#" << "\n";}
ll pcount(ll x) {return __builtin_popcountll(x);}
// #include <atcoder/convolution>
// using namespace atcoder;
const int inf = (1<<30)-1;
const ll linf = 1LL<<61;
const int MAX = 1020000;
int dy[8] = {0,1,0,-1,1,-1,-1,1};
int dx[8] = {-1,0,1,0,1,-1,1,-1};
const double pi = acos(-1);
const double eps = 1e-9;
const int mod = 1e9 + 7;
//const int mod = 998244353;

template<typename Monoid>
struct Segtree {
	using F = function<Monoid(Monoid, Monoid)>;
	int sz;
	vector<Monoid> seg;
	const F f;
	const Monoid M;

	Segtree(int n, const F f, const Monoid &M) : f(f), M(M){
		sz = 1;
		while(sz < n) sz <<= 1;
		seg.assign(2*sz, M);
	}

	void set(int k, const Monoid &x) {
		seg[k + sz] = x;
	}

	void build(){
		for(int k=sz-1; k>0; k--){
			seg[k] = f(seg[2*k], seg[2*k+1]);
		}
	}

	void update(int k, const Monoid &x){
		k += sz;
		seg[k] = x;
		while(k >>= 1){
			seg[k] = f(seg[2*k], seg[2*k+1]);
		}
	}

	Monoid query(int a, int b){
		Monoid L = M, R = M;
		for(a += sz, b += sz; a < b; a >>= 1, b >>= 1){
			if(a & 1) L = f(L, seg[a++]);
			if(b & 1) R = f(seg[--b], R);
		}
		return f(L, R);
	}

	Monoid operator[](const int &k) const {
		return seg[k + sz];
	}

	template<typename C>
	int find_subtree(int a, const C &check, Monoid &M0, bool type){
		while(a < sz){
			Monoid nxt = type ? f(seg[2*a+type],M0) : f(M0,seg[2*a+type]);
			if(check(nxt)) a = 2 * a + type;
			else M0 = nxt, a = 2 * a + 1 - type;
		}
		return a - sz;
	}

	template<typename C>
	int find_first(int a, const C &check){
		Monoid L = M;
		if(a <= 0){
			if(check(f(L, seg[1]))) return find_subtree(1,check,L,false);
			return -1;
		}
		int b = sz;
		for(a += sz, b += sz; a < b; a >>= 1, b >>= 1){
			if(a & 1){
				Monoid nxt = f(L, seg[a]);
				if(check(nxt)) return find_subtree(a,check,L,false);
				L = nxt;
				++a;
			}
		}
		return -1;
	}

	template<typename C>
	int find_last(int b, const C &check){
		Monoid R = M;
		if(b >= sz){
			if(check(f(seg[1], R))) return find_subtree(1,check,R,true);
			return -1;
		}
		int a = sz;
		for(b += sz; a < b; a >>= 1, b >>= 1){
			if(b & 1){
				Monoid nxt = f(seg[--b], R);
				if(check(nxt)) return find_subtree(b,check,R,true);
				R = nxt;
			}
		}
		return -1;
	}
};

ll GCD(ll a, ll b){
	if(b==0) return a;
	else return GCD(b,a%b);
}

ll LCM(ll a, ll b){
	if(a == 0 || b == 0) return 0;
	return a/GCD(a,b)*b;
}

vvl matmul(vvl a, vvl b){
	vvl c(a.size(), vl(b[0].size(),1));
	for(int i=0; i<a.size(); i++){
		for(int k=0; k<b.size(); k++){
			for(int j=0; j<b[0].size(); j++){
				c[i][j] = LCM(c[i][j], GCD(a[i][k],b[k][j]));
			}
		}
	}
	return c;
}

vvl f(vvl a, vvl b){
	if(b[0][0] == -1) return a;
	if(a[0][0] == -1) return b;
	return matmul(b,a);
}

int main(){
	int n,q; cin >> n >> q;
	vl a(n); rep(i,n) cin >> a[i];
	Segtree<vvl> seg(n,f,{{-1,-1,-1},{-1,-1,-1},{-1,-1,-1}});
	rep(i,n){
		vvl b(3,vl(3,1));
		rep(j,3) b[j][j] = a[i];
		b[1][0] = b[2][1] = 0;
		seg.set(i,b);
	}
	seg.build();
	while(q--){
		char c; cin >> c;
		if(c == 'U'){
			int k,x; cin >> k >> x; k--;
			vvl b(3,vl(3,1));
			b[1][0] = b[2][1] = 0;
			rep(j,3) b[j][j] = x;
			seg.update(k,b);
		}else{
			int l,r,k; cin >> l >> r >> k;
			l--;
			// vl dp(3,0);
			// REP(i,l,r){
			// 	vl ndp(3,0);
			// 	ndp[0] = GCD(dp[0],a[i]);
			// 	ndp[1] = LCM(GCD(dp[1],a[i]), dp[0]);
			// 	ndp[2] = LCM(GCD(dp[2],a[i]),dp[1]);
			// 	dp = ndp;
			// }
			// cout << dp[k] << "\n";
			auto res = seg.query(l,r);
			cout << LCM(LCM(res[k][0],res[k][1]),res[k][2]) << "\n";
		}
	}
}
