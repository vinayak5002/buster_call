#include<stdio.h>
#define MAX 100005
#define NIL -1

typedef struct
{
    int parent;
    int left;
    int right;
} Node;

Node Tree[MAX];
int n, Dep[MAX];

void recursive(int point, int depth)
{
    Dep[point] = depth;
    if(Tree[point].right!=NIL)
    {
        recursive(Tree[point].right, depth);
    }
    if(Tree[point].left!=NIL)
    {
        recursive(Tree[point].left, depth+1);
    }
}

void print_n(int point)
{
    int i, child_n;

    printf("node %d: ", point);
    printf("parent = %d, ", Tree[point].parent);
    printf("depth = %d, ", Dep[point]);

    if(Tree[point].parent == NIL)
    {
        printf("root, ");
    }
    else if(Tree[point].left == NIL)
    {
        printf("leaf, ");
    }
    else{
        printf("internal node, ");
    }

    printf("[");

    for(i=0, child_n=Tree[point].left; child_n !=NIL;i++,child_n=Tree[child_n].right)
    {
        if(i)
        {
            printf(", ");
        }
        printf("%d", child_n);
    }
    printf("]\n");
}

int main(void)
{
    int i, j, number, child, c_num, left, right, root;

    scanf("%d", &n);
    for(i=0;i<n;i++)
    {
        Tree[i].parent=Tree[i].left=Tree[i].right=NIL;
    }

    for(i=0;i<n;i++)
    {
        scanf("%d %d", &number, &child);
        for(j=0;j<child;j++)
        {
            scanf("%d", &c_num);
            if(j==0)
            {
                Tree[number].left=c_num;
            }
            else
            {
                Tree[left].right=c_num;
            }
            left=c_num;
            Tree[c_num].parent=number;
        }
    }
    for(i=0;i<n;i++)
    {
        if(Tree[i].parent == NIL)
        {
            root = i;
        }
        recursive(root, 0);
    }
    for(i=0;i<n;i++)
    {
        print_n(i);
    }
    return 0;
}
