#include <iostream>
#include <vector>
#include <utility>

#define NV 10000
#define MAX_W 10000

using Node = std::pair<int, int>;
using Graph = std::vector<std::vector<Node>>;
using MST_Node = std::vector<int>;

int nv, ne;

Graph g(NV);
MST_Node nodes;

std::vector<int> cost;


void prim(int k) {
  nodes.push_back(k);
  if(nodes.size() == nv)
    return;
  
  int min_idx;
  int min_const = MAX_W + 1;

  for(auto i : nodes) {
    for(auto &v : g[i]) {
      if(v.second <= min_const) {
        min_idx = v.first;
        min_const = v.second;
      }
    }
  }

  cost.push_back(min_const);
  prim(min_idx);
}

int main() {
  std::cin >> nv >> ne;
  
  for(int i = 0; i < ne; ++i) {
    int s, t, w;
    Node n1, n2;

    std::cin >> s >> t >> w;

    n1.first = s;
    n2.first = t;
    n1.second = n2.second = w;

    g[s].push_back(n2);
    g[t].push_back(n1);
  }

  /*
  for(int i = 0; i < nv; ++i) {
    std::cout << "Vertex: " << i << "\n";
    for(const auto& n : g[i]) {
      std::cout << n.first << " " << n.second << "\n";
    }
  }
  */

  prim(0);
  int sum = 0;
  for(auto c : cost)
    sum += c;

  std::cout << sum << "\n";

  return 0;
}

