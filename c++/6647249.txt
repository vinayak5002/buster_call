#include<bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;

//only for atcoder
#include<atcoder/all>
using namespace atcoder;

#define rep(i,l,r) for(ll i=(l); i<(r); i++)
#define rrep(i,l,r) for(ll i=(r)-1; i>=(l); i--)
#define ALL(c) (c).begin(), (c).end()
#define RALL(c) (c).rbegin(), (c).rend()
#define SORT(c) sort(ALL(c))
#define RSORT(c) sort(RALL(c))
#define MINV(c) *min_element(ALL(c))
#define MAXV(c) *max_element(ALL(c))

using VI = vector<int>;
using VVI = vector<VI>;
using VL = vector<ll>;
using VVL = vector<VL>;
using VS = vector<string>;
using VVS = vector<VS>;
using VB = vector<bool>;
using VVB = vector<VB>;
using VC = vector<char>;
using VVC = vector<VC>;
using VD = vector<ld>;
using VVD = vector<VD>;
using P = pair<ll,ll>;
using VP = vector<P>;
using VVP = vector<VP>;
const ll LINF = 2e18;
const int INF = 2e9;
const int MAX = 101;
bool ok[MAX][MAX][MAX];

int main(){
  int N;
  cin >> N;
  rep(i,0,N){
    rep(j,0,N){
      rep(k,0,N){
        ok[i][j][k] = true;
      }
    }
  }
  
  VS vec(N*3);
  rep(i,0,N*3){
    cin >> vec[i/N * N + (N-1-(i%N))];
  }
  
  
  rep(k,0,N){
    rep(j,0,N){
      rep(i,0,N){
        if(vec[k][j] == '0'){
          ok[i][j][k] = false;
        }
      }
    }
  }
  
  rep(i,0,N){
    rep(k,0,N){
      rep(j,0,N){
        if(vec[i+N][k] == '0'){
          ok[i][j][k] = false;
        }
      }
    }
  }
  
  rep(j,0,N){
    rep(i,0,N){
      rep(k,0,N){
        if(vec[j+N+N][i] == '0'){
          ok[i][j][k] = false;
        }
      }
    }
  }
  
  
  ////////
  
  // i = 0, j = 1, k = 0
  
  bool flag = true;
  
  rep(k,0,N){
    rep(j,0,N){
      bool c = false;
      if(vec[k][j] == '0'){
        continue;
      }
      rep(i,0,N){
        if(vec[k][j] == '1' && ok[i][j][k]){
          c = true;
        }
      }
      if(!c){
        flag = false;
      }
    }
  }
  
  
  rep(i,0,N){
    rep(k,0,N){
      bool c = false;
      if(vec[i+N][k] == '0'){
        continue;
      }
      rep(j,0,N){
        if(vec[i+N][k] == '1' && ok[i][j][k]){
          c = true;
        }
      }
      if(!c){
        flag = false;
      }
    }
  }
  
  rep(j,0,N){
    rep(i,0,N){
      bool c = false;
      if(vec[j+N+N][i] == '0'){
        continue;
      }
      rep(k,0,N){
        if(vec[j+N+N][i] == '1' && ok[i][j][k]){
          c = true;
        }
      }
      if(!c){
        flag = false;
      }
    }
  }
  
  if(flag){
    cout << "Yes" << endl;
  }
  else{
    cout << "No" << endl;
  }
}
