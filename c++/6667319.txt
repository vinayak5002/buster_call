#include<bits/stdc++.h>

using namespace std;
using ll=long long;

const double EPS=1e-7;

template<typename T>
int sign(T a){return (a<-EPS)?-1:(a>EPS)?1:0;}

template<typename T, typename U>
int cmp(T a, U b){
    /* a<b: -1, a==b: 0, a>b: 1 */
    return sign(a-b);}

template<typename T>
struct Point{
    T x,y;

    Point(): x(0), y(0){}
    Point(T x, T y): x(x), y(y){}

    // マイナス
    Point operator-() const { return Point(-x,-y);}

    // 和
    Point& operator+=(const Point &P){
        x+=P.x; y+=P.y;
        return *this;
    }

    Point operator+(const Point &P) const {return Point(*this)+=P;}

    // 差
    Point& operator-=(const Point &P){
        x-=P.x; y-=P.y;
        return *this;
    }

    Point operator-(const Point &P) const {return Point(*this)-=P;}

    // 積
    Point operator*(const Point &P) const {
        T a=x*P.x-y*P.y, b=x*P.y+y*P.x;
        return Point<T>(a,b);
    }

    //スカラー倍
    template<typename U>
    Point& operator*=(const U &a){
        x*=a; y*=a;
        return *this;
    }

    template<typename U>
    Point operator*(const U &a) const {return Point(*this)*=a;}

    template<typename U>
    Point& operator/=(const U &a){
        x/=a; y/=a;
        return *this;
    }

    template<typename U>
    Point operator/(const U &a) const {return Point(*this)/=a;}

    // ノルム
    T norm_2() const {return x*x+y*y;}
    double norm() const {return sqrt(x*x+y*y);}

    // クロス積
    T cross(const Point &P) const {return x*P.y-y*P.x;}
    T det(const Point &P) const {return x*P.y-y*P.x;}

    // ドット積
    T dot(const Point &P) const {return x*P.x+y*P.y;}

    // 角度
    double arg() const {return atan2(y,x);}

    // 比較
    bool operator<(const Point &P) const {
        if (cmp(x,P.x)) return cmp(x,P.x)<0;
        return cmp(y,P.y)<0;
    }

    bool operator>(const Point &P) const {return P<*this;}
    bool operator==(const Point &P) const {return (cmp(x,P.x)==0) && (cmp(y,P.y)==0);}

    bool operator<=(const Point &P) const {return (*this<P) || (this==P);}
    bool operator>=(const Point &P) const {return (*this>P) || (this==P);}
    bool operator!=(const Point &P) const {return !(*this==P);}


    // 単位化
    Point<double> unitalize() const {return *this/(this->norm());}

    // 入力
    friend istream &operator>>(istream &is, Point &P) {is >> P.x >> P.y; return (is);}

    // 出力
    friend ostream &operator<<(ostream &os, const Point &P) {return os << P.x << " " << P.y;}
};

template<typename T, typename U>
Point<U> operator*(const T &a, const Point<U> &P){return Point<U>(a*P.x, a*P.y);}

template<typename T>
struct Line{
    Point<T> begin, end;

    Line(const Point<T> &P, const Point<T> &Q): begin(P), end(Q){}

    Point<T> vectorize() const {return end-begin;}
    Point<T> counter_vectorize() const {return begin-end;}

    bool is_on(const Point<T> &P){
        return sign((begin-P).cross(end-P))==0;
    }
};

template<typename T, typename U>
struct Circle{
    Point<T> center;
    U radius;

    Circle<T,U> (const Point<T> &P, const U &r): center(P), radius(r){}

    bool is_on(const Point<T> &P){
        return cmp((P-center).norm(), radius)==0;
    }
};

template<typename T>
struct Triangle{
    Point<T> A,B,C;

    Triangle<T> (const Point<T> &A, const Point<T> &B, const Point<T> &C): A(A), B(B), C(C) {}

    tuple<Point<T>, Point<T>, Point<T>> edges() const {return make_tuple(C-B, A-C, B-A);}
    tuple<double, double, double> edges_length() const {return make_tuple((C-B).norm(), (A-C).norm(), (B-A).norm());}

    T area() const {return abs((B-A).cross(C-A))/2;}
};

// 射影
template<typename T>
Point<T> Projection(const Point<T> &P, const Line<T> &L){
    Point<T> v=L.vectorize();
    return L.begin+((P-L.begin).dot(v)/v.norm_2())*v;
}


// 円と直線の共有点
template<typename T, typename U>
vector<Point<T>> Cross_Point(const Circle<T,U> &C, const Line<T> &L){
    Point<T> H=Projection(C.center, L);
    double d=(H-C.center).norm();
    double x=sqrt(max(C.radius*C.radius-d*d,0.0));
    Point<T> v=L.vectorize().unitalize();
    return vector<Point<T>>{H+x*v, H-x*v};
}

int main(){
    Point<double> c; cin >> c;
    double r; cin >> r;
    Circle<double,double> C(c,r);

    int q; cin >> q;
    for(;q;q--){
        Point<double> p1,p2;
        cin >> p1 >> p2;

        Line<double> L(p1,p2);

        vector<Point<double>> X=Cross_Point(C,L);

        if (X[0]>X[1]) swap(X[0], X[1]);
        
        if (sign(X[0].x)==0) X[0].x=0.0;
        if (sign(X[0].y)==0) X[0].y=0.0;
        if (sign(X[1].x)==0) X[1].x=0.0;
        if (sign(X[1].y)==0) X[1].y=0.0;
        
        cout << setprecision(15) <<  X[0] << " " << X[1] << "\n";
    }
}

