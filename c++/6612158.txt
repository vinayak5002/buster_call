#include<stdio.h>

#define MAX 100005
#define NIL -1

typedef struct 
{
	int parent;
	int left;
	int right;
} Node;

Node T[MAX];
int n, D[MAX];

void print(int u)
{
	int i, c;
	printf("node %d: ", u);
	printf("parent =  %d, ", T[u].parent);
	printf("depth = %d, ", D[u]);
	
	if(T[u].parent == NIL) //親がない=根
	{ 
		printf("root, ");
	}
	else if(T[u].left == NIL) //左の子がない=葉
	{
		printf("leaf, ");
	}
	else
	{
		printf("internal node, ");
	}
	
	printf("[");
	
	for(i = 0, c = T[u].left; c != NIL; i++, c = T[c].right)
	{
		if (i != 0) printf(", ");
		printf("%d", c);
	}
	printf("]\n");
}

int setDepth(int u, int p)
{
	D[u] = p;
	if(T[u].right != NIL)
	{
		setDepth(T[u].right, p);
	}
	if(T[u].left != NIL)
	{
		setDepth(T[u].left, p+1);
	}
}

int construction(int x, int y)
{
    int j, c, l;
	
	for(j=0; j<y; j++)
    {
    	scanf("%d", &c);
		if(j == 0)
		{
			T[x].left = c;
		}
		else
		{
			T[l].right = c;
		}
		l = c;
		T[c].parent = x;
	}
}


int main(void)
{
	int i, q, v, r;
	
	scanf("%d", &n);
	
	for(i = 0; i < n; i++)
	{
		T[i].parent = T[i].left = T[i].right = NIL;
	}
	
	for(i = 0; i < n; i++)
	{
		scanf("%d %d", &v, &q);
		construction(v,q);
	}
	
	for(i = 0; i < n; i++)
	{
		if(T[i].parent == NIL)
		{
			r = i;
		}
	}
	
	setDepth(r,0);
	
	for(i = 0; i < n; i++)
	{
		print(i);
	}
	
	return 0;
}



