#include <stdio.h>

#define MAX 100010

typedef struct Node
{
  int parent;
  int left;
  int right;
} Node1;

Node1 T[MAX];
int D[MAX];

void printnode(int u)
{
  int i, t;

  printf("node %d: ", u);
  printf("parent=%d, ", T[u].parent);
  printf("depth=%d, ", D[u]);

  if (T[u].parent == -1)
  {
    printf("root, ");
  }
  else if (T[u].left == -1)
  {
    printf("leaf, ");
  }
  else
  {
    printf("internal node, ");
  }

  printf("[");

  for (i = 0, t = T[u].left; t != -1; i++, t = T[u].right)
  {
    if (i)
    {
      printf(", ");
    }
    printf("%d", t);
  }

  printf("]\n");
}

int setDepth(int u, int p)
{
  D[u] = p;
  if (T[u].right != -1)
  {
    setDepth(T[u].right, p);
  }
  if (T[u].left != -1)
  {
    p = p + 1;
    setDepth(T[u].left, p);
  }

  return p;
}

int main(void)
{
  int i, j, n, u, d, c, l, r;

  scanf("%d", &n);

  for (i = 0; i < n; i++)
  {
    T[i].parent = -1;
    T[i].left = -1;
    T[i].right = -1;
  }

  for (i = 0; i < n; i++)
  {
    scanf("%d %d", &u, &d);
    for (j = 0; j < d; j++)
    {
      scanf("%d", &c);
      if (j == 0)
      {
        T[u].left = c;
      }
      else
      {
        T[l].right = c;
      }
      l = c;
      T[c].parent = u;
    }
  }

  for (i = 0; i < n; i++)
  {
    if (T[i].parent == -1)
    {
      r = i;
    }
  }

  setDepth(r, 0);

  for (i = 0; i < n; i++)
  {
    printnode(i);
  }

  return 0;
}
