#include <bits/stdc++.h>
using namespace std;

#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

/*struct Fast {
  Fast() {
    std::cin.tie(0);
    ios::sync_with_stdio(false);
  }
} fast;
*/

using Card = vector<pair<char, int>>;

int partition(Card &A, const int p, const int r) {
  const int x = A[r].second;
  int i = p - 1;
  for (int j = p; j < r; j++) {
    if (A[j].second <= x) {
      i++;
      swap(A[i], A[j]);
    }
  }
  swap(A[i + 1], A[r]);
  return i + 1;
}

void quickSort(Card &A, const int p, const int r) {
  if (p < r) {
    const int q = partition(A, p, r);
    quickSort(A, p, q - 1);
    quickSort(A, q + 1, r);
  }
}

void merge(Card &A, int left, int mid, int right) {
  int n1 = mid - left;
  int n2 = right - mid;
  Card L(n1 + 1), R(n2 + 1);
  for (int i = 0; i < n1; i++) {
    L[i] = A[left + i];
  }
  for (int i = 0; i < n2; i++) {
    R[i] = A[mid + i];
  }
  L[n1].second = 0x7fffffff;
  R[n2].second = 0x7fffffff;
  int i = 0;
  int j = 0;
  for (int k = left; k < right; k++) {
    if (L[i].second <= R[j].second) {
      A[k] = L[i];
      i++;
    } else {
      A[k] = R[j];
      j++;
    }
  }
}

void mergeSort(Card &A, int left, int right) {
  if ((left + 1) < right) {
    int mid = (left + right) / 2;
    mergeSort(A, left, mid);
    mergeSort(A, mid, right);
    merge(A, left, mid, right);
  }
}

bool isStable(Card &origin, Card &sorted, int n) {
  mergeSort(origin, 0, n);
  if (origin != sorted) {
    return false;
  }
  return true;
}

int main() {
  int n;
  scanf("%d", &n);
  Card A(n);
  for (int i = 0; i < n; i++) {
    scanf(" %c %d", &A[i].first, &A[i].second);
  }

  Card origin = A;

  quickSort(A, 0, n - 1);

  if (isStable(origin, A, n)) {
    printf("Stable\n");
  } else {
    printf("Not stable\n");
  }

  for (int i = 0; i < n; i++) {
    printf("%c %d\n", A[i].first, A[i].second);
  }

  return 0;
}

