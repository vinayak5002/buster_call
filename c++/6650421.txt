#include<bits/stdc++.h>
using namespace std;

#define for_(i, a, b) for(int i = (a);i < (b);++i)
#define rfor_(i, a, b) for(int i = (b)-1;i >= (a);--i)
#define rep(i, n) for_(i, 0, n)
#define rrep(i, n) rfor_(i, 0, n)

/* accelration */
// 高速バイナリ生成
#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
// cin cout の結びつけ解除, stdioと同期しない(入出力非同期化)
// cとstdの入出力を混在させるとバグるので注意
struct Fast {Fast() {std::cin.tie(0); ios::sync_with_stdio(false);}} fast;

/* define short */
#define all(obj) (obj).begin(), (obj).end()

/* alias */
using ull = unsigned long long;
using ll = long long;
const int inf = 100000000;
const ll infl = 1LL << 60;

ll mul(ll a, ll b) { if (infl / a < b) return infl; return min(infl, a * b); }
ll gcd(ll a, ll b) { return a ? gcd(b % a, a) : b; }
ll lcm(ll a, ll b) { if (a == infl || b == infl) return infl; return mul(a / gcd(a, b), b); }

template<class T>bool chmax(T& a, const T& b) { if (a < b) { a = b; return 1; } return 0; }
template<class T>bool chmin(T& a, const T& b) { if (b < a) { a = b; return 1; } return 0; }


int X;


int main() {
    // 1E6までの数字を表すために必要とする正四面体の最小数を求めておく
    vector<ll> tet_num_mins(1E6+1, inf);   // 各数字における正四面体の最小必要数
    tet_num_mins[0] = 0;

    vector<ll> tet_num_min_odds(1E6+1, inf);   // 各数字における正四面体の最小必要数（奇数）
    tet_num_min_odds[0] = 0;

    ll sph_num = 1;    // 正四面体を構成する球の数
    ll tet_id = 1; // 正四面体の番号（1個の級で構成される正四面体を番号1とする）
    while (sph_num <= 1E6) {
        rep(num, 1E6+1) {
            if (num + sph_num > 1E6) break;

            chmin(tet_num_mins[num+sph_num], tet_num_mins[num] + 1);
        }

        // 奇数のやつ
        if (sph_num % 2 != 0) {
            rep(num, 1E6+1) {
                if (num + sph_num > 1E6) break;

                chmin(tet_num_min_odds[num+sph_num], tet_num_min_odds[num] + 1);
            }
        }

        tet_id++;
        sph_num = (tet_id * (tet_id+1) * (tet_id+2)) / 6;
    }


    while (cin >> X) {
        if (X == 0) break;

        cout << tet_num_mins[X] << " " << tet_num_min_odds[X] << endl;
    }
}
