#include<stdio.h>
#define MAX 100005
#define LEN 100005
int head, tail, n;
typedef struct pp{
	char name[100];
	int t;
}P;

P Q[LEN+1];


void initialize(){
	head =0;
	tail =0;
}

int isEmpty(){
	if(head == tail){
		return 1;
	}
	return 0;
}

int isFull(){
	if(head == (tail + 1) % MAX){
		return 1;
	}
	return 0;
}

void enqueue(P x){
	if(isFull() == 1){
		printf("enqueue error\n");
	}
	Q[tail] = x;
	if(tail + 1 == MAX){
		tail = 0;
	}
	else{
		tail++;
	}
}

P dequeue(){
	P x;
	if(isEmpty() == 1){
		printf("dequeue error\n");
	}
	x = Q[head];
	if(head + 1 == MAX){
		head = 0;
	}
	else{
		head++;
	}
	return x;
}

int main(void){
	int elaps = 0, c;
	int i, q;
	initialize();
	P u;
	scanf("%d %d", &n, &q);

	for( i = 1; i <= n; i++){
		scanf("%s", Q[i].name);
		scanf("%d", &Q[i].t);
		enqueue(Q[i]);
	}
	
	while(head != tail){
		if(Q[head].t <= q){
			printf("%s %d\n", Q[head].name, Q[head].t+elaps);
			elaps += Q[head].t;
			dequeue();
		} 
		else if(Q[head].t > q){
			Q[head].t = Q[head].t - q;
			elaps += q;
			u = dequeue();
			enqueue(u);
		}
	
	}
	return 0;
}
