#include<bits/stdc++.h>
#define rep(i,a,...) for(int i = (a)*(strlen(#__VA_ARGS__)!=0);i<(int)(strlen(#__VA_ARGS__)?__VA_ARGS__:(a));++i)
#define per(i,a,...) for(int i = (strlen(#__VA_ARGS__)?__VA_ARGS__:(a))-1;i>=(int)(strlen(#__VA_ARGS__)?(a):0);--i)
#define foreach(i, n) for(auto &i:(n))
#define all(x) (x).begin(), (x).end()
#define bit(x) (1ll << (x))
#define lambda(RES_TYPE, ...) (function<RES_TYPE(__VA_ARGS__)>)[&](__VA_ARGS__) -> RES_TYPE
#define method(FUNC_NAME, RES_TYPE, ...) function<RES_TYPE(__VA_ARGS__)> FUNC_NAME = lambda(RES_TYPE, __VA_ARGS__)
using namespace std;
using ll = long long;
using pii = pair<int,int>;
using pll = pair<ll,ll>;
//const ll MOD = (ll)1e9+7;
const ll MOD = 998244353;
const int INF = (ll)1e9+7;
const ll INFLL = (ll)1e18;
template<class t>
using vvector = vector<vector<t>>;
template<class t>
using vvvector = vector<vector<vector<t>>>;
template<class t>
using priority_queuer = priority_queue<t, vector<t>, greater<t>>;
template<class t, class u> bool chmax(t &a, u b){if(a<b){a=b;return true;}return false;}
template<class t, class u> bool chmin(t &a, u b){if(a>b){a=b;return true;}return false;}
#ifdef DEBUG
#define debug(x) cout<<"LINE "<<__LINE__<<": "<<#x<<" = "<<x<<endl;
#else
#define debug(x) (void)0
#endif

namespace templates{
    ll modpow(ll x, ll b,ll mod=MOD){
        ll res = 1;
        while(b){
            if(b&1)res = res * x % mod;
            x = x * x % mod;
            b>>=1;
        }
        return res;
    }

    ll modinv(ll x){
        return modpow(x, MOD-2);
    }

    bool was_output = false;

    void print();
    template <class t> void print(const vector<t> &);
    template <class t, class u> void print(const pair<t, u> &);
    template <class t> void print(const t&);
    template <class Head, class... Tail> void print(const Head&, const Tail&...);

    template <class t> void println(const vector<vector<t>>&);
    template <class t> void println(const vector<t>&);
    template <class t> void println(const t&);
    template <class Head, class... Tail> void println(const Head&, const Tail&...);
    void println();
    void newline();

    void print(){
        return;
    }

    template <class t>
    void print(const vector<t>&x){
        for(const t&i:x)print(i);
    }
    template <class t, class u>
    void print(const pair<t,u>&p){
        print(p.first);
        print(p.second);
    }
    template <class t>
    void print(const t&x){
        if(was_output)cout<<" ";
        cout<<x;
        was_output = true;
    }
    template <class Head, class... Tail>
    void print(const Head&head,const Tail&...tail){
        print(head);
        print(tail...);
    }

    template<class t>
    void println(const vector<vector<t>>&x){
        for(vector<t> i:x)println(i);
    }
    template<class t>
    void println(const vector<t>&x){
        for(const t&i:x)print(i);
        println();
    }
    template <class t>
    void println(const t&x){
        print(x);
        println();
    }
    void println(){
        if(was_output){
            cout << endl;
            was_output = false;
        }
    }
    template <class Head, class... Tail>
    void println(const Head&head,const Tail&...tail){
        print(head);
        println(tail...);
    }

    void newline(){
        was_output = true;
        println();
    }

    template<class t>
    istream& operator>>(istream&is, vector<t>&x){
        for(auto &i:x)is >> i;
        return is;
    }

    template<class t, class u>
    istream& operator>>(istream&is, pair<t, u>&x){
        is >> x.first >> x.second;
        return is;
    }

    template<class t>
    ostream& operator<<(ostream&os, vector<t> &v){
        os << "{";
        for(t &i:v){
            os << i << ", ";
        }
        os << "}";
        return os;
    }

    template<class t = long long>
    t in(){
        t res; cin >> res; return res;
    }

    template<class t>
    vector<t> sorted(vector<t> line,function<bool(t,t)> comp=[](t a,t b){return a<b;}){
        sort(line.begin(),line.end(),comp);
        return line;
    }

    template<class t>
    vector<t> reversed(vector<t> line){
        reverse(line.begin(),line.end());
        return line;
    }
    string reversed(string str){
        reverse(str.begin(),str.end());
        return str;
    }

    long long gcd(long long a,long long b){
        while(b){
            a %= b;
            swap(a,b);
        }
        return a;
    }

    long long lcm(long long a,long long b){
        return a / gcd(a,b) * b;
    }

    class output_initializer{
    public:
        output_initializer(){
            ios::sync_with_stdio(false);
            cin.tie(nullptr);
            cout << setprecision(20);
        }
    };output_initializer OUTPUT_INITIALIZER_INSTANCE = output_initializer();
}

using namespace templates;


template<class t>
class fraction{
	public:
		t numerator;
		t denominator;

		fraction():numerator(t(0)), denominator(t(1)){}
		fraction(t a, t b):numerator(a), denominator(b){}
		fraction(const fraction &a):numerator(a.numerator), denominator(a.denominator){}

		fraction pow(long long k){
			fraction res(1, 1);
			fraction sum(*this);
			while(k){
				if(k&1)res*=sum;
				sum*=sum;
				k>>=1;
			}
			return res;
		}

		fraction& operator+=(fraction a){
			numerator = numerator * a.denominator + a.numerator * denominator;
			denominator *= a.denominator;
			return *this;
		}

		fraction& operator-=(fraction a){
			numerator = numerator * a.denominator - a.numerator * denominator;
			denominator *= a.denominator;
			return *this;
		}

		fraction& operator*=(fraction a){
			numerator *= a.numerator;
			denominator *= a.denominator;
			return *this;
		}

		fraction& operator/=(fraction a){
			numerator *= a.denominator;
			denominator *= a.numerator;
			return *this;
		}

		fraction operator+(fraction a){return fraction(*this) += a;}
		fraction operator-(fraction a){return fraction(*this) -= a;}
		fraction operator*(fraction a){return fraction(*this) *= a;}
		fraction operator/(fraction a){return fraction(*this) /= a;}
};

template<class t>
bool operator<(fraction<t> a,fraction<t> b){
    return a.numerator * b.denominator < b.numerator * a.denominator;
}
template<class t>
bool operator>(fraction<t> a,fraction<t> b){
    return a.numerator * b.denominator > b.numerator * a.denominator;
}
template<class t>
bool operator==(fraction<t> a,fraction<t> b){
    return a.numerator * b.denominator == b.numerator * a.denominator;
}

vector<long double> func(){
    int n = in();
    int m = in();
    int l = in();
    using F = fraction<ll>;
    using P = pair<F,long double>;
    method(calc,vector<P>,long double p,int v,int t){
        vector<long double> dp(m+1,0);
        dp[0] = 1;
        rep(_,m){
            vector<long double> ndp(m+1,0);
            rep(i,m+1){
                ndp[i] += (1-p) * dp[i];
                if(i+1<dp.size()){
                    ndp[i+1] += p * dp[i];
                }
            }
            swap(dp,ndp);
        }
        vector<P> res;
        rep(i,dp.size()){
            res.emplace_back(F(l,v)+F(t*i,1),dp[i]);
        }
        return res;
    };
    vvector<P> line;
    const F inf = F(1000000,1);
    rep(i,n){
        long double p = in() / 100.0;
        int t = in();
        int v = in();
        if(v==0){
            line.emplace_back(vector<P>({{inf,1}}));
        }else{
            line.emplace_back(calc(p,v,t));
        }
    }
    vector<long double> res;
    rep(i,n){
        long double sum = 0;
        foreach(p,line[i]){
            long double add = p.second;
            if(p.first==inf)continue;
            rep(j,n){
                if(i==j)continue;
                long double psum = 0;
                foreach(k,line[j]){
                    if(p.first < k.first)psum += k.second;
                }
                add *= psum;
            }
            sum += add;
        }
        res.emplace_back(sum);
    }
    return res;
}

int main(){
    foreach(i,func())println(i);
    return 0;
}

