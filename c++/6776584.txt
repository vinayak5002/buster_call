#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
using namespace std;
typedef pair<string,int> P;
map<string,int> ma;
void bfs(){
	set<string> se;
	queue<P> que;
	int size;
	que.push(P("01234567",0));
	se.insert("01234567");
	while(!que.empty()){
		P p=que.front();
		que.pop();
		int step=p.second;
		string str=p.first;
		int i=str.find("0");
		string nstr;
		nstr=str;
		nstr[i]=str[(i+4)%8];
		nstr[(i+4)%8]='0';
		size=se.size();
		se.insert(nstr);
		if(se.size()!=size){
			que.push(P(nstr,step+1));
			ma.insert(make_pair(nstr,step+1));
		}
		if(i==0||i==4){
			nstr=str;
			nstr[i]=str[i+1];
			nstr[i+1]='0';
			size=se.size();
			se.insert(nstr);
			if(se.size()!=size){
				que.push(P(nstr,step+1));
				ma.insert(make_pair(nstr,step+1));
			}			
		}else if(i==3||i==7){
			nstr=str;
			nstr[i]=str[i-1];
			nstr[i-1]='0';
			size=se.size();
			se.insert(nstr);
			if(se.size()!=size){
				que.push(P(nstr,step+1));
				ma.insert(make_pair(nstr,step+1));
			}			
		}else{
			nstr=str;
			nstr[i]=str[i+1];
			nstr[i+1]='0';
			size=se.size();
			se.insert(nstr);
			if(se.size()!=size){
				que.push(P(nstr,step+1));
				ma.insert(make_pair(nstr,step+1));
			}	
			nstr=str;
			nstr[i]=str[i-1];
			nstr[i-1]='0';
			size=se.size();
			se.insert(nstr);
			if(se.size()!=size){
				que.push(P(nstr,step+1));
				ma.insert(make_pair(nstr,step+1));
			}		
		}
	}
}
int main(){
	int a[8];
	char s[9];
	bfs();
	while(scanf("%d%d%d%d%d%d%d%d",&a[0],&a[1],&a[2],&a[3],&a[4],&a[5],&a[6],&a[7])!=EOF){
		for(int i=0;i<8;i++) s[i]=a[i]+'0';
		cout<<ma[s]<<endl;
	}
	return 0;
}
