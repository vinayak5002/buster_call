#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <queue>
#include <vector>
#include <utility>
#define EPS 1e-10
using namespace std;
typedef long long ll;
struct Point{
    double x,y;
    Point(double x = 0.0,double y = 0.0): x(x),y(y) {}
    Point operator + (Point p){
        return Point(x + p.x,y + p.y);
    }
    Point operator - (Point p){
        return Point(x - p.x,y - p.y);
    }
    Point operator * (double lambda){
        return Point(x * lambda,y * lambda);
    }
    Point operator / (double lambda){
        return Point(x / lambda,y / lambda);
    }
    Point operator - (){
        return Point(-x,-y);
    }
    double norm(){
        return x * x + y * y;
    }
    double abs_(){
        return sqrt(norm());
    }
    bool operator == (const Point &p)const
    {
        return abs(x - p.x) < EPS && abs(y - p.y) < EPS;
    }
    bool operator < (const Point &p)const
    {
        if(abs(x - p.x) < EPS) return y < p.y;
        else return x < p.x;
    }
};
typedef Point Vector;
struct Segment{
    Point p1,p2;
    Segment(Point p1 = Point(),Point p2 = Point()): p1(p1),p2(p2) {}
};
typedef Segment Line;
struct Circle{
    Point c;
    double r;
    Circle(Point c = Point(),double r = 0.0): c(c),r(r) {}
};
typedef vector<Point> Polygon;
double dot(Vector a,Vector b){
    return a.x * b.x + a.y * b.y;
}
double det(Vector a,Vector b){
    return a.x * b.y - b.x * a.y;
}
Vector rot(Vector a,double theta){//rotate.
    double x1 = cos(theta) * a.x - sin(theta) * a.y;
    double y1 = sin(theta) * a.x + cos(theta) * a.y;
    return Point(x1,y1);
}
vector <Point> commonTangents(Circle o1,Circle o2){
    double rdif = o1.r - o2.r,rsum = o1.r + o2.r;
    Vector a = o2.c - o1.c,b = a / a.abs_() * o1.r;
    vector <Point> res;
    res.clear();
    double alpha;
    if(abs(abs(rdif) - a.abs_()) < EPS){
        if(rdif < 0) alpha = acos(-1);
        else alpha = acos(1);
        res.push_back(o1.c + rot(b,alpha));
    }else if(abs(rdif) < a.abs_() - EPS){
        alpha = acos(rdif / a.abs_());
        res.push_back(o1.c + rot(b,alpha));
        res.push_back(o1.c + rot(b,-alpha));
    }
    if(abs(rsum - a.abs_()) < EPS){
        alpha = acos(1);
        res.push_back(o1.c + rot(b,alpha));
    }else if(rsum < a.abs_() - EPS){
        alpha = acos(rsum / a.abs_());
        res.push_back(o1.c + rot(b,alpha));
        res.push_back(o1.c + rot(b,-alpha));
    }
    return res;
}
Circle a,b;
int main(){
    scanf("%lf%lf%lf%lf%lf%lf",&a.c.x,&a.c.y,&a.r,&b.c.x,&b.c.y,&b.r);
    vector <Point> ans = commonTangents(a,b);
    sort(ans.begin(),ans.end());
    for(int i=0;i<(int)ans.size();i++){
        printf("%.10f %.10f\n",ans[i].x,ans[i].y);
    }
    if(ans.empty()) {
        cout<<-1<<endl;
    }
    return 0;
}


