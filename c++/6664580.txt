#include<stdio.h>
#include<string.h>
#include<stdlib.h>

typedef struct node
{
	int key;
	struct node *right, *left, *parent;
}node;

node *root, *NIL;

node * treeMinimum(node *x)
{
	while(x->left != NIL)
	{
		x = x->left;
	}
	return x;
}

node * find(node *u, int k)
{
	while(u != NIL && k != u->key)
	{
		if(k < u->key)
		{
			u = u->left;
		}
		else
		{
			u = u->right;
		}
	}
	return u;
}
	
node * treeSuccessor(node *x)
{
	if(x->right != NIL)return treeMinimum(x->right);
	node *y = x->parent;
	while(y !=NIL && x == y->right)
	{
		x=y;
		y=y->parent;
	}
	return y;
}	

void treeDelete(node *z)
{
	node *y;
	node *x;
	
	if(z->left == NIL || z->right == NIL)y = z;
	else y = treeSuccessor(z);
	
	if(y->left != NIL)
	{
		x = y->left;
	}
	else
	{
		x = y->right;
	}
	
	if(x != NIL)
	{
		x->parent = y->parent;
	}
	
	if(y->parent == NIL)
	{
		root = x;
	}
	else
	{
		if(y == y->parent->left)
		{
			y->parent->left = x;
		}
		else
		{
			y->parent->right = x;
		}
	}
	if(y != z)
	{
		z->key = y->key;
	}
	
	free(y);
}

void insert(int k)
{
	node *y = NIL;
	node *x = root;
	node *z;
	
	z = (node *)malloc(sizeof(node));
	z->key = k;
	z->left = NIL;
	z->right = NIL;
	
	while(x != NIL)
	{
		y=x;
		if(z->key < x->key)
		{
			x = x->left;
		}
		else
		{
			x = x->right;
		}
	}
	z->parent = y;
	if(y == NIL)
	{
		root = z;
	}
	else
	{
		if(z->key < y->key)
		{
			y->left = z;
		}else{
			y->right = z;
		}
	}
}

void inorder(node *u)
{
	if(u == NIL)return;
	inorder(u->left);
	printf(" %d",u->key);
	inorder(u->right);
}

void preorder(node *u)
{
	if(u == NIL)return;
	printf(" %d",u->key);
	preorder(u->left);
	preorder(u->right);
}

int main()
{
	int i, n, x;
	char com[20];
	
	scanf("%d",&n);
		
	for(i=0; i<n; i++)
	{
		scanf("%s",com);
		
		if(com[0] == 'f')
		{
			scanf("%d",&x);
			node *t = find(root, x);
			if(t != NIL)printf("yes\n");
			else printf("no\n");
		}
		else if(com[0] == 'i')
		{
			scanf("%d",&x);
			insert(x);
		}
			
		else if(com[0] == 'p')
		{
			inorder(root);
			printf("\n");
			preorder(root);
			printf("\n");
		}
		else if(com[0] == 'd')
		{
			scanf("%d",&x);
			treeDelete(find(root, x));
		}
	}
	
	return 0;
}

