########################################
# AOJ
########################################
from sys import stdin

class NegativeWeightSSSP:
    def __init__(self, s, g, graph_array):
        self.start = s # node S
        self.goal = g # node G
        self.graph = graph_array

class BellmanFord:
    def __init__(self, problem):
        self.prob = problem
        self.node_num = len(self.prob.graph)

    def expand(self, node):
        # return list of child nodes
        child_nodes = []
        for c in range(0, self.node_num):
            d = self.prob.graph[node][c]
            if d is not None:
                child_nodes.append(c)
        return child_nodes
    
    def search(self):
        start_node = self.prob.start

        distance = [100000000] * self.node_num
        parent = [-1] * self.node_num
        updated = [False] * self.node_num

        distance[start_node] = 0
        parent[start_node] = -1
        updated[start_node] = True
        
        #print('初期状態')
        #print(updated, distance)
        
        #print('探索開始')
        for step in range(0, self.node_num):
            for node in range(0, self.node_num):
                if updated[node]:
                    for c in range(0, self.node_num):
                        d = self.prob.graph[node][c]  # 経路コスト取得
                        
                        # 経路が存在する場合
                        if d is not None:
                            if distance[node] + d < distance[c]:
                                if step == self.node_num - 1:
                                    return None
                                distance[c] = distance[node] + d
                                parent[c] = node
                                updated[c] = True
                    
                    # 更新完了
                    updated[node] = False
            #print(updated, distance)
            
            # updated が全て false ならその時点で終了
            if updated.count(False) == len(updated):
                return distance
            
        return distance

node_num, edge_num, start = list(map(int, stdin.readline().split(' ')))
graph_array = [[None for i in range(node_num)] for j in range(node_num)] 

for i in range(edge_num):
    u, v, cost = list(map(int, stdin.readline().split(' ')))
    graph_array[u][v] = cost

#print(graph_array)
prob = NegativeWeightSSSP(start, 0, graph_array)
solver = BellmanFord(prob)
result = solver.search()

if result:
    result = ['INF' if num == 100000000 else num for num in result]
    print(*result, sep='\n')
else:
    print('NEGATIVE CYCLE')
