#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

#define rep(i, a, b) for(ll i = (ll)a; i < (ll)b; i++)
#define irep(i, v) for(auto i = (v).begin(); i != (v).end(); i++)
#define ALL(v) (v).begin(), (v).end()
#define SZ(v) (ll)(v).size()

const ll INF = 1e18;
const ld EPS = 1e-10;
const ll MOD = 1e9 + 7;
const ld PI = M_PI;

template<class T>
void print_vec(vector<T> &vec){
    rep(i, 0, SZ(vec)){
        if(i) cout <<" ";
        cout << vec[i];
    }
    cout << endl;
    return;
}

vector<string> bubble_sort(vector<string> vec){
    ll n = vec.size();
    rep(i, 0, n){
        for(ll j = n - 1; j >= i + 1; j--){
            if((ll)vec[j][1] < (ll)vec[j - 1][1]){
                swap(vec[j], vec[j - 1]);
            }
        }
    }
    return vec;
}

vector<string> selection_sort(vector<string> vec){
    ll n = vec.size();
    rep(i, 0, n){
        ll minj = i;
        rep(j, i, n){
            if((ll)vec[j][1] < (ll)vec[minj][1]) minj = j;
        }
        swap(vec[i], vec[minj]);
    }
    return vec;
}

int main(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  srand((unsigned)time(NULL));
  cout << fixed << setprecision(20);

  ll n;
  cin >> n;
  vector<string> a(n);
  rep(i, 0, n) cin >> a[i];

  auto b = bubble_sort(a);
  auto c = selection_sort(a);
  print_vec(b);
  cout << "Stable" << endl;
  print_vec(c);
  if(b == c) cout << "Stable" << endl;
  else cout << "Not stable" << endl;



  return 0;
}
