#include <stdlib.h>
#include <stdio.h>

struct node
{
  struct node *right;
  struct node *left;
  struct node *parent;
  int key;
};
typedef struct node *Node;
#define NIL NULL

Node root;

Node treeSearch(Node u, int k)
{
  if (u == NULL || u->key == k)
       return u;
    
    //キーと子の比較(再帰的処理)
    if (u->key < k)
      return treeSearch(u->right, k);
    return treeSearch(u->left, k);
}

void insert(int k)
{
  Node y = NIL;
  Node x = root;
  Node z;

  z = (Node)malloc(sizeof(struct node));
  z->key = k;
  z->left = NIL;
  z->right = NIL;
}

void inorder(Node u)
{
  if (u == NULL)
        return;
 
    inorder(u->left);
 
    printf("%d ",u->key);
 
    inorder(u->right);
}
void preorder(Node u)
{
  if (u == NULL)
        return;
 
    printf("%d ",u->key);
 
    preorder(u->left);
 
    preorder(u->right);
}

int main()
{
  int n, i, x;
  char com[20];
  scanf("%d", &n);

  for (i = 0; i < n; i++)
  {
    scanf("%s", com);
    if (com[0] == 'i')
    {
      scanf("%d", &x);
      insert(x);
    }
    else if (com[0] == 'p')
    {
      inorder(root);
      printf("\n");
      preorder(root);
      printf("\n");
    }
  }

  return 0;
}
