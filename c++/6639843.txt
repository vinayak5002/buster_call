#include <bits/stdc++.h>
using namespace std;
struct biconnected_components{
  vector<bool> art;
  biconnected_components(vector<vector<pair<int, int>>> &E){
    int N = E.size();
    vector<int> next(N, -1);
    vector<int> d(N, -1);
    vector<int> imos(N, 0);
    art = vector<bool>(N, false);
    for (int i = 0; i < N; i++){
      if (d[i] == -1){
        d[i] = 0;
        dfs1(E, next, d, imos, i);
      }
    }
  }
  void dfs1(vector<vector<pair<int, int>>> &E, vector<int> &next, vector<int> &d, vector<int> &imos, int v){
    int cnt = 0;
    for (auto P : E[v]){
      int w = P.first;
      if (d[w] == -1){
      	cnt++;
        d[w] = d[v] + 1;
        next[v] = w;
        dfs1(E, next, d, imos, w);
        imos[v] += imos[w];
        if (imos[w] == 0){
          art[v] = true;
        }
      } else if (d[w] < d[v] - 1){
        imos[v]++;
        imos[next[w]]--;
      }
    }
    if (d[v] == 0){
      if (cnt >= 2){
        art[v] = true;
      } else {
        art[v] = false;
      }
    }
  }
};
int main(){
  int N, M;
  cin >> N >> M;
  vector<vector<pair<int, int>>> E(N);
  for (int i = 0; i < M; i++){
    int a, b;
    cin >> a >> b;
    E[a].push_back(make_pair(b, i));
    E[b].push_back(make_pair(a, i));
  }
  biconnected_components G(E);
  for (int i = 0; i < N; i++){
    if (G.art[i]){
      cout << i << endl;
    }
  }
}
