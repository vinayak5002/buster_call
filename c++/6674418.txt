#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>

int max;

typedef struct{
    bool exist;
    int pointA;
    int pointB;
    int len;
} universalSet;

void generateLine(int* x, int* y, universalSet* line);
int cmp(const void* a, const void* b);
long long int Kruskal(universalSet* line);
bool connect(int pointA, int pointB, int* disjointSet);
int find_root(int* disjointSet, int point);

int main(){
    scanf("%d", &max);
    int* x = (int*)calloc(max, sizeof(int));
    int* y = (int*)calloc(max, sizeof(int));
    for(int i=0; i<max; i++){
        scanf("%d%d", &x[i], &y[i]);
    }

    universalSet* line = calloc(max*8, sizeof(universalSet)); 
    for(int i=0; i<max*8; i++){
        line[i].len=0;
        line[i].exist = false;
    }

    generateLine(x, y, line);    
    free(x);
    free(y);

    qsort(line, max*8, sizeof(universalSet), cmp);
    printf("%lld\n", Kruskal(line));
    free(line);

    return 0; 
}

void generateLine(int* x, int* y, universalSet* line){
    int temp=0;
    int len[8]={0};
    bool flag[8]={true};

    for(int i=0; i<max; i++){
        static int k=0;
        for(int i=0; i<8; i++){
            len[i]=0;
            flag[i]=true;
        }

        for(int j=0; j<max; j++){ 
            if(j==i) continue;

            if( x[j]>=x[i] && (x[i]+y[i]) >= (x[j]+y[j]) ){
                temp = ( abs(x[i] - x[j]) > abs(y[i] - y[j]) )?\
                abs(x[i] - x[j]) : abs(y[i] - y[j]);
                if(len[0] > temp || flag[0] == true){
                    len[0] = temp;
                    line[k].pointA = i;
                    line[k].pointB = j;
                    line[k].len = len[0];
                    line[k].exist = true;
                    flag[0] = false;                
                }
            }
            else if( x[j]>=x[i] && (x[j]+y[j]) >= (x[i]+y[i]) ){
                temp = ( abs(x[i] - x[j]) > abs(y[i] - y[j]) )?\
                abs(x[i] - x[j]) : abs(y[i] - y[j]);
                if(len[1] > temp || flag[1] == true){
                    len[1] = temp;
                    line[k+1].pointA = i;
                    line[k+1].pointB = j;
                    line[k+1].len = len[1];
                    line[k+1].exist = true;  
                    flag[1] = false;                   
                }
            }
            else if( x[j]>=x[i] && (x[j]-y[j]) >= (x[i]-y[i]) ){
                temp = ( abs(x[i] - x[j]) > abs(y[i] - y[j]) )?\
                abs(x[i] - x[j]) : abs(y[i] - y[j]);
                if(len[2] > temp || flag[2] == true){
                    len[2] = temp;
                    line[k+2].pointA = i;
                    line[k+2].pointB = j;
                    line[k+2].len = len[2];
                    line[k+2].exist = true; 
                    flag[2] = false;                         
                }
            }
            else if( x[j]>=x[i] && (x[i]-y[i]) >= (x[j]-y[j]) ){
                temp = ( abs(x[i] - x[j]) > abs(y[i] - y[j]) )?\
                abs(x[i] - x[j]) : abs(y[i] - y[j]);
                if(len[3] > temp || flag[3] == true){
                    len[3] = temp;
                    line[k+3].pointA = i;
                    line[k+3].pointB = j;
                    line[k+3].len = len[3];
                    line[k+3].exist = true;    
                    flag[3] = false;           
                }
            }

            else if( x[j]<=x[i] && (x[i]+y[i]) >= (x[j]+y[j]) ){
                temp = ( abs(x[i] - x[j]) > abs(y[i] - y[j]) )?\
                abs(x[i] - x[j]) : abs(y[i] - y[j]);
                if(len[4] > temp || flag[4] == true){
                    len[4] = temp;
                    line[k+4].pointA = i;
                    line[k+4].pointB = j;
                    line[k+4].len = len[4];
                    line[k+4].exist = true; 
                    flag[4] = false;               
                }
            }
            else if( x[j]<=x[i] && (x[j]+y[j]) >= (x[i]+y[i]) ){
                temp = ( abs(x[i] - x[j]) > abs(y[i] - y[j]) )?\
                abs(x[i] - x[j]) : abs(y[i] - y[j]);
                if(len[5] > temp || flag[5] == true){
                    len[5] = temp;
                    line[k+5].pointA = i;
                    line[k+5].pointB = j;
                    line[k+5].len = len[5];
                    line[k+5].exist = true;  
                    flag[5] = false;               
                }
            } 
            else if( x[j]<=x[i] && (x[j]-y[j]) >= (x[i]-y[i]) ){
                temp = ( abs(x[i] - x[j]) > abs(y[i] - y[j]) )?\
                abs(x[i] - x[j]) : abs(y[i] - y[j]);
                if(len[6] > temp || flag[6] == true){
                    len[6] = temp;
                    line[k+6].pointA = i;
                    line[k+6].pointB = j;
                    line[k+6].len = len[6];
                    line[k+6].exist = true;         
                    flag[6] = false;                       
                }
            }
            else if( x[j]<=x[i] && (x[i]-y[i]) >= (x[j]-y[j]) ){
                temp = ( abs(x[i] - x[j]) > abs(y[i] - y[j]) )?\
                abs(x[i] - x[j]) : abs(y[i] - y[j]);
                if(len[7] > temp || flag[7] == true){
                    len[7] = temp;
                    line[k+7].pointA = i;
                    line[k+7].pointB = j;
                    line[k+7].len = len[7];
                    line[k+7].exist = true;    
                    flag[7] = false;          
                }
            }         
        }
        k+=8;
    }
}

int cmp(const void* a, const void* b){
    universalSet *lineA = (universalSet*) a;
    universalSet *lineB = (universalSet*) b;
    return (lineA->len - lineB->len);
}

long long int Kruskal(universalSet* line){
    int *disjointSet = (int*)calloc(max, sizeof(int));
    for(int i=0; i<max; i++) disjointSet[i] = i;  

    long long int sum=0;
    for(int k=0; k<max*8; k++){  
        if(line[k].len ==0) continue;
        if(connect(line[k].pointA, line[k].pointB, disjointSet)){
            sum += (long long int)line[k].len; 
        }
    }

    free(disjointSet);
    return sum;
} 

bool connect(int pointA, int pointB, int* disjointSet){
    int rootA = find_root(disjointSet, pointA);
    int rootB = find_root(disjointSet, pointB);
    
    if(rootA != rootB){
        disjointSet[rootA] = rootB;  
        return true;
    } else{
        return false;
    }
}

int find_root(int* disjointSet, int point){
    if(disjointSet[point] == point) return point; 

    int root = find_root(disjointSet, disjointSet[point]); 
    disjointSet[point] = root;  
    return root;
}

