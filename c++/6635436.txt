#include <vector>
#include <iostream>
#include <string>
#include <utility>
#include <queue>

using namespace std;
using ll = long double ;
using vec_ll = vector<ll>;
using vec_i = vector<int>;


bool mat[100][100];
enum class node_color{
    white, gray, black
};
node_color color[100];
int n, d[100];
queue<int> que;


void dfs_init(){
    for(int i=0; i<n; ++i){
        if(color[i]==node_color::white && mat[que.front()][i]){
            d[i]=d[que.front()]+1;
            que.push(i);
            color[i]=node_color::gray;
        }
    }
    que.pop();
    color[que.front()]=node_color::black;
} 
void dfs(){
    for(int i=0; i<n; ++i){
        color[i]=node_color::white;
        d[i]=-1;
    }
    d[0]=0;
    que.push(0);
    color[0]=node_color::gray;
    while(!que.empty()){
        dfs_init();
    }
}
int main(){
    cin>>n;
    for(int i=0; i<n; ++i){
        for(int k=0; k<n; ++k){
            mat[i][k]=false;
        }
    }
    for(int i=0; i<n; ++i){
        int num, k;
        cin>>num>>k;
        for(int j=0; j<k; ++j){
            int u;
            cin>>u;
            mat[num-1][u-1]=true;
        }
    }
    dfs();
    for(int i=0; i<n; ++i){
        cout<<i+1<<" "<<d[i]<<endl;
    }
}
