#!/usr/bin/env pypy3
from collections import Counter, deque, defaultdict
from itertools import permutations, combinations, accumulate, product, chain
from functools import lru_cache
from bisect import bisect, bisect_left, insort, insort_left
from heapq import heapify, heappush, heappop
from array import array
from decimal import Decimal
from copy import deepcopy
from pprint import pprint
from string import ascii_uppercase, ascii_lowercase, ascii_letters
from math import factorial, floor, ceil, sqrt
import math
import sys
sys.setrecursionlimit(1<<30)

read = sys.stdin.read
readline = sys.stdin.readline
readlines = sys.stdin.readlines

def mark(x, y, A):

    for i in range(9):
        A[x][i] = A[i][y] = False

    for t in range(1, 9):
        if x+t < 9:
            if y+t < 9:
                A[x+t][y+t] = False
            if 0 <= y-t:
                A[x+t][y-t] = False
        if 0 <= x-t:
            if y+t < 9:
                A[x-t][y+t] = False
            if 0 <= y-t:
                A[x-t][y-t] = False

    return A

def DFS(n, A):
    global Q
    
    if n == 9:
        if list(chain(*Q)).count('Q') < 8:
            return 
        for i in range(1, 9):
            print(*Q[i][1:])
        exit()

    AA = deepcopy(A)

    if 'Q' not in Q[n]:
        for i in range(1, 9):
            if AA[n][i]:
                Q[n][i] = 'Q'
                AA = mark(n, i, AA)
                DFS(n+1, AA)
                AA = deepcopy(A)
                Q[n][i] = '.'
    else:
        DFS(n+1, AA)

if __name__ == '__main__':
    N = int(readline())
    Q = [['.' for _ in range(9)] for _ in range(9)]
    J = [[True] * 9 for _ in range(9)]
    for _ in range(N):
        x, y = map(lambda x: int(x)+1, readline().split())
        Q[x][y] = 'Q'
        J = mark(x, y, J)

    DFS(1, J)

