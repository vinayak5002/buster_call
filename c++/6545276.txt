#include<bits/stdc++.h>

using namespace std;

int rnk[1000001], tmp[1000001], kc, len;

int compare_sa(int i, int j) {
    if (rnk[i] != rnk[j]) {
        return rnk[i] < rnk[j] ? 1 : 0;
    } else {
        if ((i + kc <= len ? rnk[i + kc] : -1) < (j + kc <= len ? rnk[j + kc] : -1)) {
            return 1;
        } else return 0;
    }
}

void construct_sa(char *str, int *sa) {
    len = strlen(str);
    for (int i = 0; i <= len; i++) {
        sa[i] = i;
        rnk[i] = i < len ? str[i] : -1;
    }
    for (kc = 1; kc <= len; kc *= 2) {
        sort(sa, sa + len + 1, compare_sa);
        tmp[sa[0]] = 0;
        for (int i = 1; i <= len; i++) {
            tmp[sa[i]] = tmp[sa[i - 1]] + compare_sa(sa[i - 1], sa[i]);
        }
        for (int i = 0; i <= len; i++) rnk[i] = tmp[i];
    }
}

int n, m, sa[1000001];
char str[1000001], t[1000001];

void solve() {
    cin >> str;
    n = strlen(str);
    construct_sa(str, sa);
    cin >> m;
    while (m--) {
        cin >> t;
        int k = strlen(t), l = 0, r = n + 1, m;
        while (l + 1 < r) {
            m = (l + r) / 2;
            if (strncmp(str + sa[m], t, k) <= 0) l = m;
            else r = m;
        }
        cout << (strncmp(str + sa[l], t, k) == 0) << endl;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    solve();
    return 0;
}

