#include <bits/stdc++.h>
using namespace std;

// template {{{
using i32 = int;
using u32 = unsigned int;
using i64 = long long;
using u64 = unsigned long long;

#define  range(i, l, r) for (i64 i = (i64)(l); i < (i64)(r); (i) += 1)
#define rrange(i, l, r) for (i64 i = (i64)(r) - 1; i >= (i64)(l); (i) -= 1)

#define  whole(f, x, ...) ([&](decltype((x)) container) { return (f)(  begin(container),  end(container), ## __VA_ARGS__); })(x)
#define rwhole(f, x, ...) ([&](decltype((x)) container) { return (f)( rbegin(container), rend(container), ## __VA_ARGS__); })(x)

#define debug(x) cerr << "(" << __LINE__ << ")" << #x << ": " << (x) << endl

constexpr i32 inf   = 1001001001;
constexpr i64 infll = 1001001001001001001ll;

constexpr i32 dx[] = {0, -1, 1, 0, -1, 1, -1, 1}; 
constexpr i32 dy[] = {-1, 0, 0, 1, -1, -1, 1, 1};

struct IoSetup { IoSetup(i32 x = 15){ cin.tie(0); ios::sync_with_stdio(0); cout << fixed << setprecision(x); cerr << fixed << setprecision(x); } } iosetup;

template <typename T = i64> T input() { T x; cin >> x; return x; }

template <typename T> ostream &operator<<(ostream &os, vector<T> &v) { range(i, 0, v.size()) { os << v[i] << (i + 1 != (int)v.size() ? " " : ""); } return os; } 
template <typename T> istream &operator>>(istream &is, vector<T> &v) { for (T &in : v) is >> in; return is; }

template <typename T1, typename T2> ostream &operator<<(ostream &os, pair<T1, T2> p) { os << "(" << p.first << ", " << p.second << ")"; return os; }
template <typename T1, typename T2> istream &operator>>(istream &is, pair<T1, T2> &p) { is >> p.first >> p.second; return is; }

template <typename T> vector<T> make_vector(size_t a, T b) { return vector<T>(a, b); }
template <typename... Ts> auto make_vector(size_t a, Ts... ts) { return vector<decltype(make_vector(ts...))>(a, make_vector(ts...)); }

template <typename T1, typename T2> inline bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
template <typename T1, typename T2> inline bool chmin(T1 &a, T2 b) { return a > b && (a = b, true); }
// }}}

#include "src/graph/dijkstra.hpp"

void solve(int n, int m, int h, int k) {
  struct edge {
    int to, cost, time, r;
    edge() {}
    edge(int to, int cost, int time, int r) : to(to), cost(cost), time(time), r(r) {}
  };
  auto G = make_vector(n, 0, edge());
  vector< int > as(m), bs(m), cs(m), hs(m), rs(m);
  range(i, 0, m) {
    int a = input() - 1, b = input() - 1;
    int cost = input();
    int time = input();
    int r = input() - 1;
    G[a].emplace_back(b, cost, time, r);
    G[b].emplace_back(a, cost, time, r);
  }

  int s = input() - 1, t = input() - 1;
  int p = input();
  vector< int > ds(p), bits(p);
  range(i, 0, p) {
    int l = input();
    ds[i] = input();
    range(j, 0, l) {
      int k = input() - 1;
      bits[i] |= (1 << k);
    }
  }

  auto to_v = [&](int v, int bit, int time) {
    return ((v * (h + 1) + time) << k) | bit;
  };

  int g_size = n * (1 << k) * (h + 1);
  luz::Graph< int > g(g_size);
  range(v, 0, n) {
    range(bit, 0, 1 << k) {
      range(time, 0, h + 1) {
        range(pi, 0, p) {
          int nbit = bit | bits[pi];
          int a = to_v(v, bit, time);
          int b = to_v(v, nbit, time);
          g.add_undirected_edge(a, b, ds[pi]);
        }

        for (auto &e: G[v]) {
          int u = e.to;
          int ntime = time + e.time;
          if (ntime > h) continue;

          int a = to_v(v, bit, time);
          int b = to_v(u, bit, ntime);
          int cost = ((1 << e.r) & bit) ? 0 : e.cost;
          g.add_directed_edge(a, b, cost);
        }
      }
    }
  }

  auto res = dijkstra(g, to_v(s, 0, 0)).ds;
  int ans = inf;
  range(bit, 0, 1 << k) range(time, 0, h + 1) {
    chmin(ans, res[to_v(t, bit, time)]);
  }

  if (ans == inf) ans = -1;
  cout << ans << endl;
}

signed main() {
  int n, m, h, k;

  while (cin >> n >> m >> h >> k, n) {
    solve(n, m, h, k);
  }
}

