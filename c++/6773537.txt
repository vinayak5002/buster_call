#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using P = pair<ll,ll>;
#define fix(x) fixed << setprecision(x)
#define asc(x) x, vector<x>, greater<x>
#define rep(i, n) for(ll i = 0; i < n; i++)
#define all(x) (x).begin(),(x).end()
template<class T>bool chmin(T&a, const T&b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool chmax(T&a, const T&b){if(a<b){a=b;return 1;}return 0;}
struct UnionFind{
    vector<ll> par, siz;
    UnionFind(int N) : par(N), siz(N,1){
        rep(i,N) par[i] = i;
    }
    int root(int x){
        if(par[x]==x) return x;
        return par[x] = root(par[x]);
    }
    bool unite(int x,int y){
        x = root(x); y = root(y);
        if(x==y) return false;
        if(siz[x]<siz[y]) swap(x,y);
        par[y] = x;
        siz[x] += siz[y];
        return true;
    }
    ll size(int x){
        return siz[root(x)];
    }
    bool same(int x,int y){
        return root(x) == root(y);
    }
};
int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    while(1){
        int m,n,p;
        cin >> m >> n >> p;
        if(!m) break;
        p--;
        UnionFind uf(m);
        rep(i,n){
            int u,v;
            cin >> u >> v;
            u--; v--;
            if(uf.same(u,p) || uf.same(v,p)) uf.unite(u,v);
        }
        int ans = 0;
        rep(i,m) ans += (uf.same(i,p));
        cout << ans << '\n';
    }
    return 0;
}

