#include<iostream>
#include<vector>
#include<string>
#include<cstring>
using namespace std;

typedef long long ll;
const int mod = 998244353;

// const int dx[] = {1,0,-1,0};
// const int dy[] = {0,1,0,-1};

int H, W;
vector<vector<int>> field;

// const int sz = 55;
bool seen[55][55];

void dfs(int h, int w) {
  seen[h][w] = true;

  for(int dx = max(0, h-1); dx <= min(H-1, h+1); dx++) {
    for(int dy = max(0, w-1); dy <= min(W-1, w+1); dy++) {
      if(field[dx][dy] == 1 && !seen[dx][dy]) 
        dfs(dx, dy);
    }
  }
}

int main() {
  while(true) {
    cin >> H >> W;
    if(H == 0 && W == 0) break;
    field.clear();
    field.resize(H);
    for(int h=0; h<H;h++)
    for(int w=0; w<W;w++){
      int temp; cin >> temp;
      field[h].push_back(temp);
    }
    

    memset(seen, false, sizeof(seen));  // Initialize the entire seen array to false
    
    int count = 0;
    for(int i=0;i<H;i++) {
      for(int j=0;j<W;j++) {
        if(field[i][j] == 1 && !seen[i][j]) {
          dfs(i, j);
          count++;
        }
      }
    }
    
    cout << count << endl;

  }

  return 0;
}

