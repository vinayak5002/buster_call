#include <bits/stdc++.h>
//#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
#define all(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

bool chmax(ll& p, ll q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

bool chmin(ll& p, ll q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll sti(string S) {
    ll res = 0;
    rep(i, S.size()) {
        res += S[i] - '0';
        res *= 10;
    }
    return res / 10;
}

string ist(ll n, ll L = -1) {
    string res = "";
    if (L >= 0)rep(l, L)res += '0';
    ll p = L - 1;
    if (L != -1)while (n > 0) {
        res[p] = char(n % 10 + '0');
        p--;
        n /= 10;
    }
    else {
        while (n > 0) {
            res.push_back(char(n % 10 + '0'));
            p--;
            n /= 10;
        }
        reverse(all(res));
    }
    return res;
}

ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}

ll mod = 998244353;

vector<vector<vector<ll>>> matrixpow;
void prematrixpow(vector<vll> matrix) {
	ll N = matrix.size();
	matrixpow.assign(70, vector<vll>(N, vll(N)));
	rep(h, N) {
		rep(w, N) {
			matrixpow[0][h][w] = matrix[h][w];
		}
	}
	rep(k, 69) {
		rep(h, N) {
			rep(w, N) {
				ll S = 0;
				rep(i, N) {
					S += matrixpow[k][h][i] * matrixpow[k][i][w];
					S %= mod;
				}
				matrixpow[k + 1][h][w] = S;
			}
		}
	}

}
vector<vll> modmatrixpow(ll K) {
	ll P = K;
	ll N = matrixpow[0].size();
	vector<vll> res(N, vll(N, 0));
	rep(i, N) {
		res[i][i] = 1;
	}

	rep(j, 70) {
		if (P % 2 != 0) {
			vector<vll> res2(N, vll(N, 0));

			rep(h, N) {
				rep(w, N) {
					ll S = 0;
					rep(i, N) {
						S += matrixpow[j][h][i] * res[i][w];
						S %= mod;
					}
					res2[h][w] = S;
				}
			}
			res = res2;
		}
		P /= 2;
	}

	return res;


}

int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    while(1){
        ll N,M,A,B,C,T;
        cin>>N>>M>>A>>B>>C>>T;
        if(N==0)return 0;
        vll D(N);
        rep(i,N)cin>>D[i];
        mod=M;
        vvll F(N,vll(N));
        rep(i,N){
            F[i][i]=B;
            if(i!=0){
                F[i-1][i]=C;  
                F[i][i-1]=A;
            }  
        }
        prematrixpow(F);
        auto k=modmatrixpow(T);
        vll AN(N,0);
        rep(i,N){
            rep(j,N){
                AN[i]+=k[i][j]*D[j];
                AN[i]%=M;
            }
            cout<<AN[i]<<(i==N-1?"\n":" ");
        }


    }

}
