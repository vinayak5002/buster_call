#include <bits/stdc++.h>
using namespace std;

int main() {
    while (true) {
        int w, h;
        cin >> w >> h;
        if (w == 0 && h == 0)
            break;

        vector<vector<bool>> vertical(h, vector<bool>(w - 1, false));
        vector<vector<bool>> horizontal(h - 1, vector<bool>(w, false));
        for (int i = 0; i < 2 * h - 1; i++) {
            bool b;
            switch (i % 2) {
                case 0:
                    for (int j = 0; j < w - 1; j++) {
                        cin >> b;
                        vertical[i / 2][j] = b != 0;
                    }
                    break;
                case 1:
                    for (int j = 0; j < w; j++) {
                        cin >> b;
                        horizontal[i / 2][j] = b != 0;
                    }
                    break;
            }
        }

        int ans = 0;
        vector<vector<bool>> tb(h, vector<bool>(w, false));
        queue<tuple<int, int, int>> q;
        q.push(make_tuple(0, 0, 1));
        while (q.size()) {
            tuple<int, int, int> p = q.front();
            int y = get<0>(p), x = get<1>(p), l = get<2>(p);
            q.pop();
            if (y == h - 1 && x == w - 1) {
                ans = get<2>(p);
                break;
            }

            //上
            if (y >= 1 && !tb[y - 1][x] && !horizontal[y - 1][x]) {
                tb[y - 1][x] = true;
                q.push(make_tuple(y - 1, x, l + 1));
            }
            //下
            if (y <= h - 2 && !tb[y + 1][x] && !horizontal[y][x]) {
                tb[y + 1][x] = true;
                q.push(make_tuple(y + 1, x, l + 1));
            }
            //左
            if (x >= 1 && !tb[y][x - 1] && !vertical[y][x - 1]) {
                tb[y][x - 1] = true;
                q.push(make_tuple(y, x - 1, l + 1));
            }
            //右
            if (x <= w - 2 && !tb[y][x + 1] && !vertical[y][x]) {
                tb[y][x + 1] = true;
                q.push(make_tuple(y, x + 1, l + 1));
            }
        }

        cout << ans << endl;
    }

    return 0;
}
