#pragma region

#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <numeric> // gcd, lcm
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
using namespace std;

using ull = unsigned long long;
using ll = long long;
using vi = vector<int>;
using vll = vector<ll>;
using vvi = vector<vi>;
using vvll = vector<vll>;
using vs = vector<string>;
using pii = pair<int,int>;
using vpii = vector<pii>;

#pragma endregion

const int INF = 1000000000 + 8;

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n, m, r; cin >> n >> m >> r;
    vector<vpii> g(n);
    for(int i=0; i<m; ++i){
        int s, t, c; cin >> s >> t >> c;
        g[s].push_back({c,t});
    }
    vi d(n, INF); d[r] = 0;
    bool ng = false;
    for(int i=0; i<n; ++i){
        for(int u=0; u<n; ++u){
            for(auto [c,v]: g[u]){
                if(d[v] > d[u] + c){
                    if(i == n-1){ng = true;}
                    d[v] = d[u] + c;
                }
            }
        }
    }
    if(ng) cout << "NEGATIVE CYCLE" << endl;
    else{
        for(int i=0; i<n; ++i){
            if(d[i] == INF) cout << "INF" << endl;
            else cout << d[i] << endl;
        }
    }
    return 0;
}
