#include <bits/stdc++.h>
using namespace std;

using ll = long long;
using db = double;
using str = string;

using pi = pair<int,int>;
using pl = pair<ll,ll>;
using pd = pair<db,db>;

using vi = vector<int>;
using vb = vector<bool>;
using vl = vector<ll>;
using vd = vector<db>;
using vs = vector<str>;
using vpi = vector<pi>;
using vpl = vector<pl>;
using vpd = vector<pd>;

#define tcT template<class T
#define tcTU tcT, class U
tcT> using V = vector<T>;
tcT, size_t SZ> using AR = array<T,SZ>;
tcT> using PR = pair<T,T>;
// pairs
// #define mp make_pair
#define f first
#define s second

// vectors
// size(x), rbegin(x), rend(x) need C++17
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define ft front()
#define bk back()
#define pb push_back
#define eb emplace_back
#define pf push_front
// #define rtn return

#define lb lower_bound
#define ub upper_bound

/* Some Codes Skipped */

// loops
#define FOR(i,a,b) for (ll (i) = (a); (i) < (b); ++(i))
#define REP(i,a) FOR(i,0,a)
#define ROF(i,a,b) for (ll (i) = (b)-1; (i) >= (a); --(i))
#define PER(i,a) ROF(i,0,a)
#define rep(a) REP(_,a)
#define each(a,x) for (auto& a: x)

const int MOD = 1e9+7;
const int MX = 2e5+5;
const ll INF = 1e18;
const db PI = acos((db)-1);
const int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1};   // for every grid problem
tcT> bool ckmin(T& a, const T& b) {
    return b < a ? a = b, 1 : 0; } // set a = min(a,b)
tcT> bool ckmax(T& a, const T& b) {
    return a < b ? a = b, 1 : 0; }
tcT> void remDup(vector<T>& v) { // sort and remove duplicates
    sort(all(v)); v.erase(unique(all(v)),end(v)); }
// Some Codes Skipped

inline namespace FileIO {
    void setIn(str s) {freopen(s.c_str(),"r",stdin);}
    void setOut(str s) {freopen(s.c_str(),"w",stdout);}
    void setIO(str s = "") {
        cin.tie(0)->sync_with_stdio(0); // unsync C / C++ I/O streams
        // cin.exceptions(cin.failbit);
        // throws exception when do smth illegal
        // ex. try to read letter into int
        if (sz(s)) setIn(s+".in"), setOut(s+".out");    // for old USACO
    }
}

int v,e;

void solve(){

    vector<vi>adj(v,vi(v,1001));

    FOR(i,0,v){
        adj[i][i] = 0;
    }
    FOR(i,0,e){
        int si,ti,di;
        cin>>si>>ti>>di;
        adj[si][ti] = di;
        //cout<<si<<" "<<ti<<" "<<di<<endl;
    }

    // each(a,adj){
    //     each(b,a){
    //         cout<<b<<" ";
    //     }
    //     cout<<endl;
    // }


    vector<vi> dp(v,vi((1<<v)-1));
    
    int ans = INT_MAX;
    ROF(m,0,(1<<v)){

        FOR(u, 0, v){
            //si es que no puedo tomar ninguno
            if(m == ((1<<v)-1)){
                dp[u][m] = adj[u][0];
                continue;
            }

            dp[u][m] = 1001;
            FOR(op,0,v){
                if(((m & (1<<op)) == 0 )){
                    dp[u][m] = min(dp[u][m], adj[u][op] + dp[op][m|(1<<op)]);
                }
            }

        }
    }

    // cout<<endl;
    // cout<<endl;

    // each(a,dp){
    //     each(b,a){
    //         cout<<b<<"   ";
    //     }
    //     cout<<endl;
    // }

    // cout<<endl;
    // cout<<endl;

    if(dp[0][0] >= 1001) cout<<-1;
    else cout<<dp[0][0];

}




int main() {
    // std::cout << std::fixed;
    // std::cout << std::setprecision(2);

    cin>>v>>e;
        
    solve();

}


/*

En este problema estamos haplicando lo visto en clase para TSP. Complejidad( O(2^n * n^2))
Primero iteramos en la mascara empezando de una mascara en donde no 
se puede tomar ningun vertice, lo cual lo inicializariamos, con cada una de las 
adyacencias con el fin de iniciar y terminar en el vertice 0. Luego iteramos en todos los
u, con el fin de iterar en sus adyacencias y poder obtner de esta forma el minimo.
En este caso como estamos haciendolo de atras hacia delante (1111... -> 0000...)
lo que hacemos para utilizar dp, es agregarle un 1 al vertice tomado y observar el caso anterior.

Al final se imprime el dp[0][0] ya que ese fue el vertice que fue elegido en donde inicia y acaba
el circuito.

*/


