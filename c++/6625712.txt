#include<stdio.h>
#define MAX 100005
#define NIL -1


typedef struct
{
	int parent;//親ノード
	int left_child;//子ノード
	int right_sibling;//右の兄弟ノード
}Node;

Node Tree[MAX];
int N,Depth[MAX];

//出力用
void print_node(int node_point)
{
	int i,child_node;
	printf("node %d: ",node_point);
	printf("parent = %d, ",Tree[node_point].parent);
	printf("depth = %d, ",Depth[node_point]);
	
	if(Tree[node_point].parent==NIL)
	{
		printf("root, ");
	}
	else if(Tree[node_point].left_child==NIL)
	{
		printf("leaf, ");
	}
	else
	{
		printf("internal node, ");
	}
	
	
	printf("[");
	child_node=Tree[node_point].left_child;
	
	for(i=0;child_node!=NIL;i++)
	{
		if(i)
		{
			printf(", ");
		}
		printf("%d",child_node);
		child_node = Tree[child_node].right_sibling;
	}
	printf("]\n");
}

void recursive(int node_point, int depth)//再帰的に深さを求める
{
    Depth[node_point] = depth;
    //右の兄弟ノードに同じ深さを設定
    if (Tree[node_point].right_sibling != NIL)
	{
        recursive(Tree[node_point].right_sibling, depth);
	}
    //最も左の子ノードに自分の深さ+1
    if (Tree[node_point].left_child != NIL)
	{
        recursive(Tree[node_point].left_child, depth + 1);
	}
}

int main(void)
{
	int i,j,N_child,node_num,child_num,left_child,right_sibling,root;
	scanf("%d",&N);
	
	for (i=0;i<N;i++)//初期化
	{
		Tree[i].parent = NIL;
		Tree[i].left_child = NIL;
		Tree[i].right_sibling = NIL;
	}
	
	for(i=0;i<N;i++)
	{
		scanf("%d %d", &node_num, &N_child);
		
		for(j=0;j<N_child;j++)
		{
			scanf("%d", &child_num);
			
			if (j == 0)
			{
				 Tree[node_num].left_child = child_num;
			}
			else
			{
				Tree[left_child].right_sibling = child_num;
			}
			
			left_child = child_num;
			Tree[child_num].parent = node_num;
		}
	}
	
	for(i=0;i<N;i++)//rootノードの探索
	{
		if(Tree[i].parent==NIL)
		{
			root=i;
		}
	}
	recursive(root, 0);//深さD[]に格納
	
	for(i=0;i<N;i++)
	{
		print_node(i);
	}
	return 0;
}


