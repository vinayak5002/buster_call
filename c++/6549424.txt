#include <stdio.h>
#include <string.h>

int a[200000];

int bound(int *lower, int *upper, int n, int k)
{
	int left, right, center;

	if (n == 0){
		*upper = 0;
		return (0);
	}

	left = 0;
	right = n - 1;

	while (left <= right){
		center = (left + right) / 2;
		if (a[center] > k){
			right = center - 1;
		}
		else if (a[center] < k){
			left = center + 1;
		}
		else {
			left = center;
			break;
		}
	}
	if (a[n - 1] < k){
		*lower = *upper = n;
		return (0);
	}
	else {
		*lower = left;
		while (*lower > 0 && a[*lower - 1] == k){
			(*lower)--;
		}

		*upper = *lower;
		while (*upper < n - 1 && a[*upper] == k){
			(*upper)++;
		}

	}

	if (a[*lower] == k){
		return (1);
	}
	return (0);
}

int main(void)
{
	int q;
	int k, x;
	int n;
	int pos_lower, pos_upper;
	int i, j;

	n = 0;
	scanf("%d", &q);
	for (i = 0; i < q; i++){
		scanf("%d%d", &k, &x);
		if (k == 0){
			if (bound(&pos_lower, &pos_upper, n, x) == 0){
				memmove(&a[pos_upper + 1], &a[pos_upper], (n - pos_upper) * sizeof(int));
				a[pos_upper] = x;
				n++;
			}
			printf("%d\n", n);
		}
		else if (k == 1){
			printf("%d\n", bound(&pos_lower, &pos_upper, n, x));
		}
		else {
			if (bound(&pos_lower, &pos_upper, n, x) == 1){
				memmove(&a[pos_lower], &a[pos_lower + 1], (n - pos_lower) * sizeof(int));
				n--;
			}
		}
	}
	return (0);
}
