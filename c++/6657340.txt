#include <iostream>
#include <stdio.h>

#define MAX 100051
#define NIL -1

using namespace std;

struct Node {
	int parent, left, right;
};

Node T[MAX];
int D[MAX],H[MAX];

void setDepth(int u, int p) {

	D[u] = p;
	if (T[u].right != NIL) setDepth(T[u].right, p+1);
	if (T[u].left != NIL) setDepth(T[u].left, p + 1);

}

int setHeight(int u) {

	int h1,h2;
	h1 = h2 = 0;

	if (T[u].right != NIL) h1 = setHeight(T[u].right) + 1;
	if (T[u].left != NIL) h2 = setHeight(T[u].left) + 1;

	return H[u] = max(h1, h2);
}

int getSibling(int u) {

	if (T[u].parent == NIL) return NIL;
	if (T[T[u].parent].left != u && T[T[u].parent].left != NIL) return T[T[u].parent].left;
	if (T[T[u].parent].right != u && T[T[u].parent].right != NIL) return T[T[u].parent].right;

	return NIL;
}

void print(int u) {

	int c = T[u].left;
	cout << "node " << u << ": ";
	cout << "parent = " << T[u].parent << ", ";
	cout << "sibling = " << getSibling(u) << ", ";
	int deg = 0;
	if (T[u].left != NIL)deg++;
	if (T[u].right != NIL)deg++;
	cout << "degree = " << deg << ", ";
	cout << "depth = " << D[u] << ", ";
	cout << "height = " << H[u] << ", ";

	if (T[u].parent == NIL) cout << "root";
	else if (T[u].left == NIL && T[u].right) cout << "internal node";
	else cout << "leaf";

	cout << endl;

}


int main() {

	int n;
	int u,l, r ,root= 0;
	scanf("%d", &n);

	for (int i = 0; i < n; i++) {
		T[i].parent = NIL;
	}

	for (int i = 0; i < n; i++) {
		cin >> u >> l >> r;
		T[u].left = l;
		T[u].right = r;
		if (l != NIL) T[l].parent = u;
		if (r != NIL) T[r].parent = u;
	}

	for (int i = 0; i < n; i++) {
		if (T[i].parent == NIL) root = i;
	}


	setDepth(root, 0);
	setHeight(root);

	for (int i = 0; i < n; i++)print(i);

	return 0;
}
