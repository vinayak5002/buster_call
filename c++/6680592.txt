#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline double time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

struct UnionFind{
    vector<int> par,num;
    vector<bool> done;
    UnionFind(int n):par(n),num(n,1),done(n,false){
        iota(par.begin(),par.end(),0);  //include<numeric>
    }
    int find(int v){
        return (par[v]==v)?v:(par[v]=find(par[v]));
    }
    void unite(int u,int v){
        u=find(u),v=find(v);
        if(u==v)return;
        if(num[u]<num[v])swap(u,v);
        num[u]+=num[v];
        par[v]=u;
        done[u]=done[u]|done[v];
    }
    bool same(int u,int v){
        return find(u) == find(v);
    }
    int size(int v){
        return num[find(v)];
    }
};


int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    const int inf = 1e9;
    int n,m,k; cin >> n >> m >> k;
    vector<vector<pair<int,int>>> g(n);
    UnionFind uf(n);
    for(int i=0;i<m;i++){
        int x,y,c; cin >> x >> y >> c;
        x--; y--;
        g[x].push_back({y,c});
        g[y].push_back({x,c});
        if(uf.same(x,y)){
            uf.done[uf.find(x)] = true;
        }
        else uf.unite(x, y);
    }
    vector<bool> used(n,false);
    vector<vector<int>> v;
    for(int i=0;i<n;i++){
        if(used[uf.find(i)]) continue;
        // 孤立点
        if(g[i].size() == 0){
            v.push_back({0,0}); continue;
        }
        // 鎖の端
        if(g[i].size() == 1){
            used[uf.find(i)] = true;
            int f = i;
            int cur = f;
            int pre = -1;
            vector<int> cost;
            do{
                bool ff = false;
                for(auto t:g[cur]){
                    if(t.first != pre){
                        cost.push_back(t.second);
                        pre = cur;
                        cur = t.first;
                        ff = true;
                        break;
                    }
                }
                if(!ff)break;
            }while(1);
            int sz = cost.size()+1;
            vector<int> res(sz+1,-inf);
            res[0] = res[1] = 0;
            {
                vector<vector<int>> dp(sz+1,vector<int>(sz,-inf));
                for(int i=0;i<sz;i++){
                    dp[1][i] = 0;
                }
                for(int i=1;i<=sz;i++){
                    for(int j=0;j<sz;j++){
                        if(dp[i][j] == -inf)continue;
                        res[i] = max(res[i], dp[i][j]);
                        for(int k=j+1;k<sz;k++){
                            if(j+1 == k and cost[j] == 0) continue;
                            dp[i+1][k] = max(dp[i+1][k], dp[i][j]+(j+1==k?cost[j]:0));
                        }
                    }
                }
            }
            v.push_back(res);
            continue;
        }
        // 輪
        if(uf.done[uf.find(i)]){
            used[uf.find(i)] = true;
            int f = i;
            int cur = f;
            int pre = -1;
            vector<int> cost;
            do{
                for(auto t:g[cur]){
                    if(t.first != pre){
                        cost.push_back(t.second);
                        pre = cur;
                        cur = t.first;
                        break;
                    }
                }
            }while(cur != f);

            int sz = cost.size();
            vector<int> res(sz+1,-inf);
            res[0] = res[1] = 0;
            // 最初を使う場合
            {
                vector<vector<int>> dp(sz+1,vector<int>(sz,-inf));
                dp[1][0] = 0;
                for(int i=1;i<=sz;i++){
                    for(int j=0;j<sz;j++){
                        if(dp[i][j] == -inf)continue;
                        res[i] = max(res[i], dp[i][j]);
                        for(int k=j+1;k<sz;k++){
                            if(k+1 == sz and cost.back() == 0) continue;
                            if(j+1 == k and cost[j] == 0) continue;
                            dp[i+1][k] = max(dp[i+1][k], dp[i][j]+(j+1==k?cost[j]:0)+(k+1==sz?cost.back():0));
                        }
                    }
                }
            }
            // 最初を使わない場合
            {
                vector<vector<int>> dp(sz+1,vector<int>(sz,-inf));
                for(int i=1;i<sz;i++){
                    dp[1][i] = 0;
                }
                for(int i=1;i<=sz;i++){
                    for(int j=0;j<sz;j++){
                        if(dp[i][j] == -inf)continue;
                        res[i] = max(res[i], dp[i][j]);
                        for(int k=j+1;k<sz;k++){
                            if(j+1 == k and cost[j] == 0) continue;
                            dp[i+1][k] = max(dp[i+1][k], dp[i][j]+(j+1==k?cost[j]:0));
                        }
                    }
                }
            }
            v.push_back(res);
            continue;
        }
    }
    n = v.size();
    vector<vector<int>> dp(n+1,vector<int>(k+1,-inf));
    dp[0][0] = 0;
    for(int i=0;i<n;i++){
        for(int j=0;j<v[i].size();j++){
            for(int p=0;p+j<=k;p++){
                if(dp[i][p] == -inf)continue;
                dp[i+1][p+j] = max(dp[i+1][p+j], dp[i][p]+v[i][j]);
            }
        }
    }
    if(dp[n][k] == -inf){
        cout << "Impossible" << endl;
    }
    else{
        cout << dp[n][k] << endl;
    }
}

