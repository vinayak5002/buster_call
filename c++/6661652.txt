#include <iostream>
#include <vector>
using namespace std;

void build(vector<vector<pair<int, int>>>& a) {
	// 平行移動
	int m = a[0].size();
	int x = a[0][0].first, y = a[0][0].second;
	for (int i = 0 ; i < m ; i++) a[0][i] = {a[0][i].first - x, a[0][i].second - y};

	// 回転移動
	for (int i = 1 ; i < 4 ; i++) for (int j = 0 ; j < m ; j++) {
		a[i][j].first = -a[i - 1][j].second;
		a[i][j].second = a[i - 1][j].first;
	}
}

bool check(vector<pair<int, int>>& a, vector<vector<pair<int, int>>>& goal) {
	if (a.size() != goal[0].size()) return false;
	int x = a[0].first, y = a[0].second;
	for (int i = 0 ; i < 4 ; i++) {
		bool ok = true;
		for (int j = 0 ; j < a.size() ; j++) if (!(a[j].first - x == goal[i][j].first and a[j].second - y == goal[i][j].second)) ok = false;
		if (ok) return true;
	}


	x = a.back().first, y = a.back().second;
	for (int i = 0 ; i < 4 ; i++) {
		bool ok = true;
		for (int j = 0 ; j < a.size() ; j++) if (!(a[j].first - x == goal[i][a.size() - j - 1].first and a[j].second - y == goal[i][a.size() - j - 1].second)) ok = false;
		if (ok) return true;
	}

	return false;
}

void solve(int n) {
	int m; cin >> m;
	vector<vector<pair<int, int>>> goal(4, vector<pair<int, int>>(m));
	for (int i = 0 ; i < m ; i++) cin >> goal[0][i].first >> goal[0][i].second;
       	build(goal);
	
	vector<vector<pair<int, int>>> points(m);
	for (int i = 0 ; i < n ; i++) {
		int k; cin >> k;
	       	points[i] = vector<pair<int, int>>(k);
		for (int j = 0 ; j < k ; j++) cin >> points[i][j].first >> points[i][j].second;
	}	

	for (int i = 0 ; i < n ; i++) if (check(points[i], goal)) cout << i + 1 << endl;
}

int main() {
	while(1) {
		int n; cin >> n;
		if (n == 0) break;
		solve(n);
		cout << "+++++" << endl;
	}
}

