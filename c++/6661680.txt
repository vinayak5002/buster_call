#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using u64 = unsigned long long;

using F = function<i64(string::iterator&, i64)>;
vector<F> expr;

i64 number(string::iterator &s) {
	i64 res = 0;
	while (isdigit(*s)) {
		res *= 10;
		res += *s - '0';
		s++;
	}
	return res;
};

i64 term(string::iterator &s) {
	if (*s == '(') {
		s++;
		i64 res = expr[0](s, 0);
		s++;
		return res;
	}
	else {
		return number(s);
	}
}

i64 pl(string::iterator &s, i64 k) {
	i64 a = k == 2 ? term(s) : expr[k + 1](s, k + 1);
	while (*s == '+') {
		s++;
		i64 b = k == 2 ? term(s) : expr[k + 1](s, k + 1);
		a += b;
	}
	return a;
};

i64 sub(string::iterator &s, i64 k) {
	i64 a = k == 2 ? term(s) : expr[k + 1](s, k + 1);
	while (*s == '-') {
		s++;
		i64 b = k == 2 ? term(s) : expr[k + 1](s, k + 1);
		a -= b;
	}
	return a;
};

i64 mul(string::iterator &s, i64 k) {
	i64 a = k == 2 ? term(s) : expr[k + 1](s, k + 1);
	while (*s == '*') {
		s++;
		i64 b = k == 2 ? term(s) : expr[k + 1](s, k + 1);
		a *= b;
	}
	return a;
};

int main() {
	cin.sync_with_stdio(false);
	cin.tie(nullptr);

	string s;
	cin >> s;
	expr.assign(3, pl);

	expr[0] = mul;
	expr[1] = pl;
	expr[2] = sub;
	auto itr = s.begin();
	i64 ans = expr[0](itr, 0);
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			for (int k = 0; k < 3; k++) {
				if (i ^ j ^ k == 3) {
					expr[i] = mul;
					expr[j] = pl;
					expr[k] = sub;
					auto itr = s.begin();
					ans = max(ans, expr[0](itr, 0));
				}
			}
		}
	}

	cout << ans << endl;

	return 0;
}

