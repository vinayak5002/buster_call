#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <bitset>
using namespace std;
using ll = long long;

pair<int, int> cut(pair<int, int> &c, int s) {
    int w = c.first, d = c.second;
    int p = s%(w+d);
    pair<int, int> new_c(0, 0);
    if (p <= w) { // vertical
        new_c.first = max(p, w-p);
        new_c.second = d;
        c.first = min(p,w-p);
    } else { // horizontal
        p -= w;
        new_c.first = w;
        new_c.second = max(p, d-p);
        c.second = min(p, d-p);
    }
    return new_c;
}

int main() {
    while (true) {
        int n, w, d;
        cin >> n >> w >> d;
        if (n == 0 && w == 0 && d == 0) break;
        vector<pair<int, int>> cs;
        cs.emplace_back(w, d);
        while (n--) {
            // cout << "[" << n << "]" << endl;
            int p, s;
            cin >> p >> s; p--;
            // cout << cs[p].first << ", " << cs[p].second << endl;
            auto new_c = cut(cs[p], s);
            cs.push_back(new_c);
        }
        sort(cs.begin(), cs.end(), [](pair<int, int> a, pair<int, int> b) {
            return a.first * a.second < b.first * b.second;
        });
        for (int i = 0; i < (int)cs.size(); i++) {
            if (i > 0) cout << " ";
            cout << cs[i].first * cs[i].second;
        }
        cout << endl;
    }
    return 0;
}

