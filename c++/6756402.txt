#include <bits/stdc++.h>

using namespace std;

using Graph = vector<vector<int>>;

int dx[] = {-1,0,1,0};
int dy[] = {0,1,0,-1};

template<class T> void chmin(T& a, T b) {
    if (a > b) {
        a = b;
    }
}

template<class T> void chmax(T& a, T b) {
    if (a < b) {
        a = b;
    }
}

const int Inf = 2147483647;
const long long INF = 1LL<<60;
const long long MOD = 1000000007;
const long long mod = 998244353;

struct UnionFind {
    vector<int> par;
    vector<int> siz;

    UnionFind(int n) : par(n, -1), siz(n, 1) {}

    int root(int x) {
        if (par[x] == -1) return x;
        else return par[x] = root(par[x]);
    }

    bool issame(int x, int y) {
        return root(x) == root(y);
    }

    bool unite(int x, int y) {
        x = root(x);
        y = root(y);
        if (x == y) return false;
        if (siz[x] < siz[y]) swap(x, y);
        par[y] = x;
        siz[x] += siz[y];
        return true;
    }

    int size(int x) {
        return siz[x];
    }
};

int main() {
    int V, E; cin >> V >> E;
    vector<pair<int, pair<int,int>>> x;
    for (int i = 0; i < E-1; ++i) {
        int s, t, w; cin >> s >> t >> w;
        x.push_back({w, {s, t}});
    }
    sort(x.begin(), x.end());
    UnionFind tree(V);
    int ans = 0;
    for (int i = 0; i < E; ++i) {
        auto w = x[i].first;
        auto st = x[i].second;
        int s = st.first; int t = st.second;
        if (tree.issame(s, t)) continue;
        tree.unite(s, t);
        ans += w;
    }

    cout << ans << endl;
}

