#include<bits/stdc++.h>
using namespace std;
// 複素数
typedef complex<double>xy_t;
// 内積
double dot_product(xy_t a, xy_t b)
{
	return (conj(a) * b).real();
}
// 外積
double cross_product(xy_t a, xy_t b)
{
	return (conj(a) * b).imag();
}

xy_t P[30];
int main()
{
	// index
	int n = 0;
	double x, y;
	while (~scanf("%lf,%lf", &x, &y))
	{
		P[n] = xy_t(x, y);
		n++;
	}
	// 面積
	double sum = 0;
	xy_t o = P[0];
	for (int i = 1; i < n - 1; i++)
	{
		xy_t a = P[i];
		xy_t b = P[i + 1];
		sum += cross_product(a - o, b - o);
	}
	sum /= 2;
	printf("%.6lf\n", abs(sum));
}
