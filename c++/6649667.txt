#include <iostream>
#include <vector>
#include <string>
#include <queue>
#include <algorithm>
typedef long long ll;
using namespace std;
vector<vector<int> > adj;
int d[100];
bool was_reached[100];

void bfs() {

  queue<int> Q;
  Q.push(0);
  was_reached[0]=true;
  d[0]=0;
  while(!Q.empty()) {
    int index=Q.front();Q.pop();
    for(int k=0;k<adj[index].size();k++) {
      int next_index=adj[index][k];
      if(!was_reached[next_index]) {
        d[next_index]=d[index]+1;
        was_reached[next_index]=true;
        Q.push(next_index);
      }
    }
  }
}

int main() {
  int n;
  cin >> n;
  adj.assign(n,vector<int>());
  for(int i=0; i<n;i++) {
    int u,k;cin >> u >> k; u--;
    for(int j=0; j<k;j++) {
      int v;cin >>v;v--;
      adj[u].push_back(v);
    }
    d[u]=-1;
    was_reached[u]=false;
  }

  bfs();
  for(int i=0; i<n;i++) {
    cout << i+1 << " " << d[i]<<endl;
  }
}

