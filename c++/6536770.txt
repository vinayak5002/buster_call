#include <algorithm>
#include <iostream>
#include <vector>


int maximize_benefit(std::vector<int>::iterator begin, std::vector<int>::iterator end)
{
    int res = - *begin;
    std::vector<int>::iterator it = begin;
    while(it != end && it + 1 != end) {
        std::vector<int>::iterator max_pos = std::max_element(it + 1, end);
        std::vector<int>::iterator min_pos = std::min_element(it, max_pos);
        if(res < *max_pos - *min_pos) {
            res = *max_pos - *min_pos;
        }
        it = max_pos + 1;
    }
    return res;
}


int main()
{
    int count = 0;
    std::cin >> count;
    std::vector<int> price(count);
    for(int& num: price) {
        std::cin >> num;
    }
    std::cout << maximize_benefit(price.begin(), price.end()) << std::endl;
    return 0;
}

