#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <map>
#include <memory>
#include <numeric>
#include <optional>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <tuple>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

/* macro */

#define rep(i, a, n) for (int i = (int)(a); i < (int)(n); i++)
#define rrep(i, a, n) for (int i = ((int)(n - 1)); i >= (int)(a); i--)
#define Rep(i, a, n) for (i64 i = (i64)(a); i < (i64)(n); i++)
#define RRep(i, a, n) for (i64 i = ((i64)(n - i64(1))); i >= (i64)(a); i--)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define Bit(n) (1LL << (n))

/* macro end */

/* template */

namespace ebi {

#ifdef LOCAL
#define debug(...)                                                      \
    std::cerr << "LINE: " << __LINE__ << "  [" << #__VA_ARGS__ << "]:", \
        debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

void debug_out() { std::cerr << std::endl; }

template <typename Head, typename... Tail>
void debug_out(Head h, Tail... t) {
    std::cerr << " " << h;
    if (sizeof...(t) > 0) std::cout << " :";
    debug_out(t...);
}

template <typename T1, typename T2>
std::ostream &operator<<(std::ostream &os, const std::pair<T1, T2> &pa) {
    return os << pa.first << " " << pa.second;
}

template <typename T1, typename T2>
std::istream &operator>>(std::istream &os, std::pair<T1, T2> &pa) {
    return os >> pa.first >> pa.second;
}

template <typename T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &vec) {
    for (std::size_t i = 0; i < vec.size(); i++)
        os << vec[i] << (i + 1 == vec.size() ? "" : " ");
    return os;
}

template <typename T>
std::istream &operator>>(std::istream &os, std::vector<T> &vec) {
    for (T &e : vec) std::cin >> e;
    return os;
}

template <typename T>
std::ostream &operator<<(std::ostream &os, const std::optional<T> &opt) {
    if (opt) {
        os << opt.value();
    } else {
        os << "invalid value";
    }
    return os;
}

using std::size_t;
using i32 = std::int32_t;
using u32 = std::uint32_t;
using i64 = std::int64_t;
using u64 = std::uint64_t;

template <class T, T init>
auto make_vector(int n) {
    return std::vector<T>(n, init);
}

template <class T, T init, typename Head, typename... Tail>
auto make_vector(Head n, Tail... ts) {
    return std::vector(n, make_vector<T, init>(ts...));
}

template <class T>
inline bool chmin(T &a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
inline bool chmax(T &a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
T pow(T x, i64 n) {
    T res = 1;
    while (n > 0) {
        if (n & 1) res = res * x;
        x = x * x;
        n >>= 1;
    }
    return res;
}

template <class T>
T mod_pow(T x, i64 n, i64 mod) {
    T res = 1;
    while (n > 0) {
        if (n & 1) res = (res * x) % mod;
        x = (x * x) % mod;
        n >>= 1;
    }
    return res;
}

template <class T>
T scan() {
    T val;
    std::cin >> val;
    return val;
}

template <class T>
struct Edge {
    int to;
    T cost;
    Edge(int _to, T _cost = 1) : to(_to), cost(_cost) {}
};

template <class T>
struct Graph : std::vector<std::vector<Edge<T>>> {
    using std::vector<std::vector<Edge<T>>>::vector;
    void add_edge(int u, int v, T w, bool directed = false) {
        (*this)[u].emplace_back(v, w);
        if (directed) return;
        (*this)[v].emplace_back(u, w);
    }
};

struct graph : std::vector<std::vector<int>> {
    using std::vector<std::vector<int>>::vector;
    void add_edge(int u, int v, bool directed = false) {
        (*this)[u].emplace_back(v);
        if (directed) return;
        (*this)[v].emplace_back(u);
    }
};

constexpr i64 LNF = std::numeric_limits<i64>::max() / 4;

constexpr int INF = std::numeric_limits<int>::max() / 2;

// const std::vector<int> dy = {1, 0, -1, 0, 1, 1, -1, -1};
// const std::vector<int> dx = {0, 1, 0, -1, 1, -1, 1, -1};

const std::vector<int> dy = {-1, 0, 1, 0};
const std::vector<int> dx = {0, 1, 0, -1};

}  // namespace ebi

/*
    reference: https://gist.github.com/draftcode/1357281
*/

namespace ebi {

typedef std::string::const_iterator State;
class ParseError {};

bool expect(State &begin, char expected) {
    if (*begin == expected) {
        return true;
    } else {
        return false;
    }
}

// beginがexpectedを指していたらbeginを一つ進める。
void consume(State &begin, char expected) {
    if (*begin == expected) {
        begin++;
    } else {
        std::cerr << "Expected '" << expected << "' but got '" << *begin << "'"
                  << std::endl;
        std::cerr << "Rest string is '";
        while (*begin) {
            std::cerr << *begin++;
        }
        std::cerr << "'" << std::endl;
        throw ParseError();
    }
}

bool isdigit(char c) { return '0' <= c && c <= '9'; }

bool isAlpha(char c) { return 'A' <= c && c <= 'Z'; }

bool isalpha(char c) { return 'a' <= c && c <= 'z'; }

}  // namespace ebi

namespace ebi {

enum Type { MOVE, IF, WHILE, WHILEEND, END };

struct Node {
    Type type;
    int condition;
    int next;
    Node(Type t, int c, int nxt) : type(t), condition(c), next(nxt) {}
};

std::vector<Node> program;

void Program(State &);
void Sentence(State &);
void If(State &);
void While(State &);
void Move(State &);
void Condition(State &);

void Program(State &begin) {
    while (!expect(begin, ';')) Sentence(begin);
    program.emplace_back(END, -1, -1);
}

void Sentence(State &begin) {
    if (expect(begin, '['))
        If(begin);
    else if (expect(begin, '{'))
        While(begin);
    else
        Move(begin);
    return;
}

void If(State &begin) {
    consume(begin, '[');
    int idx = program.size();
    program.emplace_back(IF, -1, -1);
    Condition(begin);
    while (!expect(begin, ']')) {
        Sentence(begin);
    }
    consume(begin, ']');
    program[idx].next = program.size();
}

void While(State &begin) {
    consume(begin, '{');
    int idx = program.size();
    program.emplace_back(WHILE, -1, -1);
    Condition(begin);
    while (!expect(begin, '}')) {
        Sentence(begin);
    }
    consume(begin, '}');
    program.emplace_back(WHILEEND, -1, idx);
    program[idx].next = program.size();
}

void Move(State &begin) {
    int move = 0;
    if (expect(begin, '^')) {
        consume(begin, '^');
    } else if (expect(begin, 'v')) {
        consume(begin, 'v');
        move = 1;
    } else if (expect(begin, '<')) {
        consume(begin, '<');
        move = 2;
    } else if (expect(begin, '>')) {
        consume(begin, '>');
        move = 3;
    } else {
        assert(0);
    }
    program.emplace_back(MOVE, -1, move);
}

void Condition(State &begin) {
    int condition = 0;
    if (expect(begin, '~')) {
        consume(begin, '~');
        condition |= 1 << 3;
    }
    if (expect(begin, 'N')) {
        consume(begin, 'N');
    } else if (expect(begin, 'E')) {
        consume(begin, 'E');
        condition |= 1;
    } else if (expect(begin, 'S')) {
        consume(begin, 'S');
        condition |= 2;
    } else if (expect(begin, 'W')) {
        consume(begin, 'W');
        condition |= 3;
    } else if (expect(begin, 'C')) {
        consume(begin, 'C');
        condition |= 4;
    } else if (expect(begin, 'T')) {
        consume(begin, 'T');
        condition |= 5;
    } else {
        assert(0);
    }
    program.back().condition = condition;
}

void main_() {
    int h, w;
    std::cin >> h >> w;
    std::vector<std::string> a(h);
    std::cin >> a;
    int sy = -1, sx = -1, gy = -1, gx = -1;
    rep(i, 0, h) rep(j, 0, w) {
        if (a[i][j] == 's') {
            sy = i;
            sx = j;
        } else if (a[i][j] == 'g') {
            gy = i;
            gx = j;
        }
    }
    std::string s;
    std::cin >> s;
    s += ';';
    State begin = s.begin();
    Program(begin);
    int sz = program.size();
    std::vector dp(h,
                   std::vector(w, std::vector(sz, std::vector<int>(4, INF))));
    std::queue<std::tuple<int, int, int, int>> que;
    auto can_move = [&](int y, int x, int move) -> bool {
        int ny = y + dy[move];
        int nx = x + dx[move];
        if (0 <= ny && ny < h && 0 <= nx && nx < w && a[ny][nx] != '#') {
            return true;
        }
        return false;
    };

    auto iscondition = [&](int y, int x, int direction, int condition) -> bool {
        bool flag = true;
        if ((condition >> 3) & 1) {
            condition ^= 1 << 3;
            flag = false;
        }
        if (condition < 4) {
            return flag == (condition == direction);
        } else if (condition == 4) {
            return flag == (!can_move(y, x, direction));
        } else if (condition == 5) {
            return flag;
        } else
            assert(0);
    };
    auto next_move = [&](int y, int x, int idx, int direction) -> int {
        std::set<int> set;
        set.insert(idx);
        while (program[idx].type != MOVE) {
            if (program[idx].type == WHILEEND) {
                idx = program[idx].next;
            } else if (program[idx].type == WHILE || program[idx].type == IF) {
                if (iscondition(y, x, direction, program[idx].condition)) {
                    idx++;
                } else {
                    idx = program[idx].next;
                }
            } else if (program[idx].type == END) {
                assert(idx == sz - 1);
                return sz - 1;
            } else
                assert(0);
            if(set.find(idx) == set.end()) {
                set.insert(idx);
            }
            else return sz - 1;
        }
        return idx;
    };
    {
        int idx = next_move(sy, sx, 0, 0);
        if (idx != sz - 1) {
            que.push({sy, sx, idx, 0});
            dp[sy][sx][idx][0] = 0;
        }
    }
    while (!que.empty()) {
        auto [y, x, idx, direction] = que.front();
        que.pop();
        assert(program[idx].type == MOVE);
        int move = program[idx].next;
        int ret = dp[y][x][idx][direction];
        if (move == 0) {
            if (can_move(y, x, direction)) {
                y += dy[direction];
                x += dx[direction];
            }
        } else if (move == 1) {
            int i = (direction + 2) % 4;
            if (can_move(y, x, i)) {
                y += dy[i];
                x += dx[i];
            }
        } else if (move == 2) {
            direction = (direction + 3) % 4;
        } else if (move == 3) {
            direction = (direction + 1) % 4;
        } else
            assert(0);
        idx = next_move(y, x, ++idx, direction);
        if (ret + 1 < dp[y][x][idx][direction]) {
            dp[y][x][idx][direction] = ret + 1;
            if (idx == sz - 1) continue;
            que.push({y, x, idx, direction});
        }
    }
    int ans = INF;
    rep(i, 0, sz) rep(j, 0, 4) chmin(ans, dp[gy][gx][i][j]);
    if (ans == INF) ans = -1;
    std::cout << ans << '\n';
}

}  // namespace ebi

int main() {
    std::cout << std::fixed << std::setprecision(15);
    std::cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    int t = 1;
    // std::cin >> t;
    while (t--) {
        ebi::main_();
    }
    return 0;
}
