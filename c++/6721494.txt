#include <bits/stdc++.h>
typedef long long int ll;
using namespace std;
const int MOD = 1000000007;
typedef pair<ll, ll> P;
const double pi = 3.1415926536;
const int MAX = 2000003;
long long fac[MAX], finv[MAX], inv[MAX];
template<typename T> using min_priority_queue = priority_queue<T, vector<T>, greater<T>>;
void COMinit() {
    fac[0] = fac[1] = 1;
    finv[0] = finv[1] = 1;
    inv[1] = 1;
    for (int i = 2; i < MAX; i++){
        fac[i] = fac[i - 1] * i % MOD;
        inv[i] = MOD - inv[MOD%i] * (MOD / i) % MOD;
        finv[i] = finv[i - 1] * inv[i] % MOD;
    }
}
// 二項係数計算
long long COM(int n, int k){
    if (n < k) return 0;
    if (n < 0 || k < 0) return 0;
    return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;
}
ll gcd(ll x, ll y) {
   if (y == 0) return x;
   else if (y > x) {
       return gcd (y, x); 
   }
   else return gcd(x % y, y);
}

ll pow_mod(ll x, ll n) {
    if (n == 0) {
        return 1;
    }
    if (n % 2) return pow_mod(x, n - 1) * x % MOD;
    else {
        ll tmp = pow_mod(x, n / 2);
        return tmp * tmp % MOD;
    }
}


bool aru[1024][1024];
int main() {
    vector<bool> ret;
    while (true) {
        int n;
        cin>> n;
        if (n == 0) break;
        string s;
        cin >> s;
        for (int i = 0; i < 1024; i++) {
            for (int j = 0; j < 1024; j++) {
                aru[i][j] = false;
            }
        }
        int now_have = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == 'u') {
                now_have = 0;
            }
            else {
                int num = s[i] - '0';
                // cout << now_have << ' ' << (1 << num) << endl;
                aru[now_have][(1 << num)] = true;
                now_have = (now_have | (1 << num));
            }
        }
        bool safe = true;
        for (int i = 1; i < 1024; i++) {
            int I = 1023 - i;
            for (int j = I; j > 0; j = (j - 1) & I) {
                for (int l = 0; l < 10; l++) {
                    if (!aru[j][(1 << l)]) continue;
                    for (int k = 0; k < 1024; k++) {
                        if (!aru[i][k]) continue;
                        aru[i | j][k | (1 << l)] = true;
                    }
                }
            }
        }
        for (int i = 1; i < 1024; i++) {
            for (int j = i; j > 0; j = (j - 1) & i) {
                if (aru[i][j]) {
                    // cout << i << ' ' << j << endl;
                    safe = false;
                }
            }
        }
        ret.push_back(safe);
            
    }
    for (auto x : ret) {
        if (x) cout << "SAFE" << endl;
        else cout << "UNSAFE" << endl;
    }
    return 0;
}
