#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned int ull;
typedef pair<int, int> pil;
const ll ll_INF = 0x3f3f3f3f3f3f3f3f;
const ll ll_MAX = 0x7fffffffffffffff;
const int int_INF = 0x3f3f3f3f;
const int int_MAX = 0x7fffffff;
const double EPS = 1e-10;
const double PI = acos(-1.0);
const int dy[8] = {-1, 0, 1, 0, 1, -1, 1, -1};
const int dx[8] = {0, -1, 0, 1, 1, -1, -1, 1};
#define R register
#define _chmax(a, b) (a = max(a, (b)))
#define _chmin(a, b) (a = min(a, (b)))
#define _abs(a) ((a) > 0 ? (a) : -(a))

inline int fsign(double x) {
    return ((fabs(x) < EPS) ? 0 : ((x < 0) ? -1 : 1));
}
inline ll _r() {
    ll x = 0, f = 1;
    char c = getchar();
    while(c > '9' || c < '0') {
        if(c == '-')
            f = -1;
        c = getchar();
    }
    while(c >= '0' && c <= '9')
        x = (x << 3) + (x << 1) + (c ^ 48), c = getchar();
    return f == -1 ? -x : x;
}

const int MOD = 1e9 + 7;
const int MX = 1000010;
#define Vector2D Point
struct Point {
    double x, y;
    Point() {
        x = y = 0;
    }
    Point(double X, double Y) {
        x = X, y = Y;
    }
    double get_len() {
        return sqrt((double)x * x + y * y);
    }
    Point operator+(const Point& b) const {
        return Point(x + b.x, y + b.y);
    }
    Point operator-(const Point& b) const {
        return Point(x - b.x, y - b.y);
    }
    Point operator*(const double c) const {
        return Point(x * c, y * c);
    }
    Point operator/(const double c) const {
        return Point(x / c, y / c);
    }
    bool operator==(const Point& b) const {
        return fsign(x - b.x) == 0 && fsign(y - b.y) == 0;
    }
    bool operator!=(const Point& b) const {
        return fsign(x - b.x) != 0 || fsign(y - b.y) != 0;
    }
    bool operator<(const Point& b) const {
        if(fsign(x - b.x) == 0)
            return fsign(y - b.y) == -1;
        return fsign(x - b.x) == -1;
    }
    bool operator>(const Point& b) const {
        if(fsign(x - b.x) == 0)
            return fsign(y - b.y) == 1;
        return fsign(x - b.x) == 1;
    }
    //逆时针旋转theta角
    Vector2D rotate(const double& theta) const {
        Point c;
        c.x = x * cos(theta) - y * sin(theta);
        c.y = y * cos(theta) + x * sin(theta);
        return c;
    }
    //逆时针90度
    Point rotate_inv90() const {
        return Point(-y, x);
    }
    //顺时针90度
    Point rotate_clk90() const {
        return Point(y, -x);
    }
    // 取模的平方
    double norm_square() const {
        return x * x + y * y;
    }
    // 取模
    double norm_sqrt() const {
        return sqrt(x * x + y * y);
    }
    //求象限
    friend int quad(Point p) {
        return ((p.y < 0) ? 1 : 3) + ((p.x < 0) ^ (p.y < 0));
    }
    //点乘
    friend double dot(Point a, Point b) {
        return a.x * b.x + a.y * b.y;
    }
    //叉乘
    friend double cross(Point a, Point b) {
        return a.x * b.y - a.y * b.x;
    }
    //求向量夹角cos
    friend double included_angel(Point a, Point b) {
        return (dot(a, b)) / (a.norm_sqrt() * b.norm_sqrt());
    }
    //判定两向量关系,<0逆反
    friend int vectors_postion(Point a, Point b) {
        if(fsign(cross(a, b)) == -1)  // a在b的逆时针方向（左侧）
            return -2;
        if(fsign(cross(a, b)) == 1)  // a在b的顺时针方向（右侧）
            return 2;
        if(fsign(dot(a, b)) == -1)  // ab反向
            return -1;
        if(fsign(a.norm_square() - b.norm_square()) == -1)  // ab同向,且b长于a
            return 1;
        else  // ab同向,且b短于a,b在a上
            return 0;
    }
    //判定三点关系(base->b,base->c)
    friend int points_postion(Point base, Point b, Point c) {
        return vectors_postion(b - base, c - base);
    }
    //欧几里得距离
    friend double e_dis(Point a, Point b) {
        return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
    }
    //曼哈顿距离
    friend double m_dis(Point a, Point b) {
        return fabs(a.x - b.x) + fabs(a.y - b.y);
    }
    //切比雪夫距离
    friend double c_dis(Point a, Point b) {
        return max(fabs(a.x - b.x), fabs(a.y - b.y));
    }
};

//点点式直线
struct Line {
    Point s, t;
    Vector2D normal;  //方向向量
    Line() {
    }
    Line(const Point st, const Point ed) {
        set(st, ed);
    }
    void set(const Point a, const Point b) {
        s = a, t = b;
        update_normal();
    }
    void update_normal() {
        normal = t - s;
    }
    bool operator==(Line a) const {
        return same((*this), a);
    }
    bool operator<(Line a) const {
        if(normal != a.normal)
            return normal < a.normal;
        else if(s != a.s)
            return s < a.s;
        return t < a.t;
    }
    friend bool is_vertical(const Line a, const Line b) {
        return fsign(dot(a.normal, b.normal)) == 0;
    }
    friend bool is_parallel(const Line a, const Line b) {
        return fsign(cross(a.normal, b.normal)) == 0;
    }
    friend bool same(const Line a, const Line b) {
        return is_parallel(a, b) && is_parallel(Line(a.s, b.t), Line(b.s, a.t));
    }
    // 求p在直线line上的投影(垂点)
    friend Point projection(Line line, Point p) {
        double num_t = dot(p - line.s, line.normal) / line.normal.norm_square();
        return line.s + line.normal * num_t;
    }
    // 判定线段是否相交
    friend bool is_corss_seg(Line a, Line b) {
        if(points_postion(a.s, a.t, b.s) * points_postion(a.s, a.t, b.t) > 0)
            return 0;
        if(points_postion(b.s, b.t, a.s) * points_postion(b.s, b.t, a.t) > 0)
            return 0;
        return 1;
    }
    // 求线段相交点
    friend Point get_corss_point(Line a, Line b) {
        double d1 = fabs(cross(b.normal, a.s - b.s));
        double d2 = fabs(cross(b.normal, a.t - b.t));
        if(fsign(d1 + d2) == 0)
            return b.s;
        double num_t = d1 / (d1 + d2);
        return a.s + a.normal * num_t;
    }
    // 求点到直线距离
    friend double get_dis_point_line(Line l, Point p) {
        return fabs(cross(l.normal, p - l.s) / l.normal.norm_sqrt());
    }
    // 求点到线段距离
    friend double get_dis_point_seg(Line l, Point p) {
        if(fsign(dot(l.normal, p - l.s)) < 0)
            return (p - l.s).norm_sqrt();
        if(fsign(dot(l.normal, p - l.t)) > 0)
            return (p - l.t).norm_sqrt();
        return get_dis_point_line(l, p);
    }
    // 求直线之间的距离
    friend double get_dis_lines(Line a, Line b) {
        if(is_corss_seg(a, b))
            return 0;
        return fabs(get_dis_point_line(a, b.t));
    }
    // 求线段之间的距离
    friend double get_dis_segs(Line a, Line b) {
        if(is_corss_seg(a, b))
            return 0;
        double dis1 = min(get_dis_point_seg(a, b.s), get_dis_point_seg(a, b.t));
        double dis2 = min(get_dis_point_seg(b, a.s), get_dis_point_seg(b, a.t));
        return min(dis1, dis2);
    }
};
struct Polygon {
    vector<Point> poi;
    int n;
    Polygon() {
        clear();
    }
    Polygon(vector<Point>& points) {
        set(points);
    }
    void set(vector<Point>& points) {
        poi = points;
        n = poi.size();
    }
    void clear() {
        poi.clear();
        n = 0;
    }
    void add_point(Point p) {
        poi.push_back(p);
        n++;
    }
    void add_point(double x, double y) {
        poi.push_back(Point(x, y));
        n++;
    }
    //求多边形面积
    double get_S() {
        if(n == 0)
            return 0;
        double res = cross(poi[0], poi[n - 1]);
        for(int i = 1; i < n; i++) {
            res += cross(poi[i], poi[i - 1]);
        }
        return fabs(res) / 2;
    }
    //判定是否为凸包
    bool is_convex() {
        for(int i = 0; i < n; i++) {
            if(points_postion(poi[i], poi[(i + 1) % n], poi[(i + 2) % n]) == -2)
                return 0;
        }
        return 1;
    }
    //从当前点集构造凸包,改变点集的顺序为逆时针,若不想要在凸包的边上有点改为<=0
    void build_convex_hull() {
        int now = 0;
        sort(poi.begin(), poi.end());
        vector<Point> res(n << 1);
        for(int i = 0; i < n; res[now++] = poi[i++]) {
            while(now > 1 && fsign(cross(res[now - 1] - res[now - 2], poi[i] - res[now - 2])) <= 0)
                now--;
        }
        int t = now;
        for(int i = n - 2; i >= 0; res[now++] = poi[i--]) {
            while(now > t && fsign(cross(res[now - 1] - res[now - 2], poi[i] - res[now - 2])) <= 0)
                now--;
        }
        res.resize(now - 1);
        set(res);
    }
    //求凸包直径旋转卡壳
    double get_convex_diameter() {
        if(n == 2)
            return e_dis(poi[0], poi[1]);
        int a = 0, b = 0;
        for(int i = 1; i < n; i++) {
            if(poi[i] < poi[a])
                a = i;
            if(poi[i] > poi[b])
                b = i;
        }
        double max_dis = e_dis(poi[a], poi[b]);
        int now_a = a, now_b = b;
        while(now_a != b || now_b != a) {
            double now_dis = e_dis(poi[now_a], poi[now_b]);
            max_dis = max(max_dis, now_dis);
            int next_a = (now_a + 1 == n) ? 0 : now_a + 1;
            int next_b = (now_b + 1 == n) ? 0 : now_b + 1;
            if(fsign(cross(poi[next_a] - poi[now_a], poi[next_b] - poi[now_b])) < 0)
                now_a = next_a;
            else
                now_b = next_b;
        }
        return max_dis;
    }
    //判定点与多边形关系,点在多边形里:2,点在多边形边上:1,点在多边形外:0
    friend int polygon_point_position(Polygon& poly, Point p) {
        bool x = false;
        poly.poi.push_back(poly.poi[0]);
        for(int i = 0; i < poly.n; i++) {
            Point a = poly.poi[i] - p, b = poly.poi[i + 1] - p;
            if(fsign(abs(cross(a, b))) == 0 && fsign(dot(a, b)) < 1)
                return 1;
            if(fsign(a.y - b.y) > 0)
                swap(a, b);
            if(fsign(a.y) < 1 && fsign(b.y) > 0 && fsign(cross(a, b)) > 0)
                x = !x;
        }
        poly.poi.pop_back();
        return (x ? 2 : 0);
    }
    //求凸包沿直线方向向量切割后左侧的凸包
    friend Polygon get_convex_cut(Polygon& poly, Line& l) {
        vector<Point> res;
        for(int i = 0; i < poly.n; i++) {
            Point A = poly.poi[i];
            Point B = poly.poi[(i + 1) == poly.n ? 0 : (i + 1)];
            if(points_postion(l.s, l.t, A) != -2)
                res.push_back(A);
            if(points_postion(l.s, l.t, A) * points_postion(l.s, l.t, B) < 0)
                res.push_back(get_corss_point(Line(A, B), l));
        }
        return Polygon(res);
    }
} poly;
bool compare_y(Point a, Point b) {
    return a.y < b.y;
}
bool compare_x(Point a, Point b) {
    return a.x < b.x;
}
double closest_pair(vector<Point>::iterator array, int temp_n) {
    if(temp_n <= 1)
        return ll_MAX;
    int mid = temp_n >> 1;
    double dist = min(closest_pair(array, mid), closest_pair(array + mid, temp_n - mid));
    inplace_merge(array, array + mid, array + temp_n, compare_y);
    vector<Point> V;
    for(int i = 0; i < temp_n; i++) {
        if(fsign(fabs(array[i].x - array[mid].x) - dist) >= 0)
            continue;
        for(int j = 0; j < V.size(); j++) {
            double dx = array[i].x - V[V.size() - j - 1].x;
            double dy = array[i].y - V[V.size() - j - 1].y;
            if(fsign(dy - dist) >= 0)
                break;
            dist = min(dist, sqrt(dx * dx + dy * dy));
        }
        V.push_back(array[i]);
    }
    return dist;
}
vector<Point> poi;
int n;
void Init() {
    cin >> n;
    poi.resize(n);
    for(int i = 0; i < n; i++) {
        cin >> poi[i].x >> poi[i].y;
    }
}

void solve() {
    //sort(poi.begin(), poi.end());
    cout << closest_pair(poi.begin(), n) << endl;
}
int main() {
    std::ios::sync_with_stdio(false);
#ifdef LOCAL
    freopen("./Input_data/data.in", "r", stdin);
    freopen("./Output_data/data.out", "w", stdout);
#endif
    int t = 1;
    cout.flags(ios::fixed);
    cout.precision(12);
    while(t--) {
        Init();
        solve();
    }
    return 0;
}
