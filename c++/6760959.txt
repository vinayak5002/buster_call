#include<bits/stdc++.h>
\\#include<atcoder/all>
using namespace std;
\\using namespace atcoder;

\\typedef modint998244353 mint;
typedef int64_t ll;
typedef long double ld;
const ll MOD=1000000007;
const ll MODA=998244353;
ll vx[4]={0,1,0,-1};
ll vy[4]={1,0,-1,0};
#define rep(i,n) for(ll i=0;i<(ll)(n);i++)

ll pow(ll N,ll P,ll M){
    if(P==0)return 1;
    else if(P%2==0){
        ll t=pow(N,P/2,M);
        return t*t%M;
    }
    else return N*pow(N,P-1,M)%M;
}
ll pow(ll N,ll P){
    if(P==0)return 1;
    else if(P%2==0){
        ll t=pow(N,P/2);
        return t*t;
    }
    else return N*pow(N,P-1);
}

vector<ll> fac;
vector<ll> finv;
vector<ll> inv;
void COMinit(ll N,ll P){
    rep(i,N+1){
        if(i==0){
            fac.push_back(1);
            finv.push_back(1);
            inv.push_back(1);
        }
        else if(i==1){
            fac.push_back(1);
            finv.push_back(1);
            inv.push_back(1);
        }
        else{
            fac.push_back(fac.at(i-1)*i%P);
            inv.push_back(P-inv.at(P%i)*(P/i)%P);
            finv.push_back(finv.at(i-1)*inv.at(i)%P);
        }
    }
}

ll COM(ll n,ll k,ll P){
    if(n<k)return 0;
    if(n<0||k<0)return 0;
    return fac.at(n)*(finv.at(k)*finv.at(n-k)%P)%P;
}


struct UnionFind {
    vector<ll> par;
    
    UnionFind(ll N) : par(N) { 
        for(ll i = 0; i < N; i++) par[i] = i;
    }

    ll root(ll x) {
        if (par[x] == x) return x;
        return par[x] = root(par[x]);
    }

    void unite(ll x, ll y) {
        ll rx = root(x);
        ll ry = root(y);
        if (rx == ry) return;
        par[rx] = ry;
    }

    bool same(ll x, ll y) {
        ll rx = root(x);
        ll ry = root(y);
        return rx == ry;
    }
};

vector<ll> find_divisor(ll N){
    vector<ll> A;
    for(ll i=1;i*i<=N;i++){
        if(N%i==0)A.push_back(i);
    }
     ll l=A.size();
    rep(i,l){
        if(A.at(l-i-1)*A.at(l-i-1)!=N)A.push_back(N/A.at(l-1-i));
    }
    return A;
}

int main(){
    vector<ll> Ans;
    while(true){
        ll P;
        cin>>P;
        if(P==0)break;
        ll w=0;
        ll d=0;
        ll h=0;
        for(ll i=1;i*i*i<=P;i++){
            if(P%i==0)w=i;
        }
        P/=w;
        for(ll i=1;i*i<=P;i++){
            if(P%i==0)d=i;
        }
        Ans.push_back(w+d+P/d);
    }
    for(ll x:Ans)cout<<x<<endl;
}
