#line 1 "solve/main.cpp"
#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <chrono>
#include <cmath>
#include <complex>
#include <cstdint>
#include <cstdlib>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <type_traits>
#include <unordered_map>
#include <utility>
#include <vector>

/* template start */

#line 2 "lib/utility/type_alias.hpp"

#line 4 "lib/utility/type_alias.hpp"

using u64 = std::uint64_t;
using u32 = std::uint32_t;
using u16 = std::uint16_t;
using u8 = std::uint8_t;

using i64 = std::int64_t;
using i32 = std::int32_t;
using i16 = std::int16_t;
using i8 = std::int8_t;

using usize = std::size_t;
using isize = std::ptrdiff_t;

constexpr i64 operator"" _i64(unsigned long long num) { return i64(num); }

constexpr u64 operator"" _u64(unsigned long long num) { return u64(num); }
#line 33 "solve/main.cpp"

#define rep(i, a, b) for (i64 i = (a); (i) < (b); (i)++)
#define all(i) i.begin(), i.end()

#ifdef LOCAL
#define debug(...)                                                    \
  std::cerr << "LINE: " << __LINE__ << "  [" << #__VA_ARGS__ << "]:", \
      debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

void debug_out() { std::cerr << std::endl; }

template <typename Head, typename... Tail>
void debug_out(Head h, Tail... t) {
  std::cerr << " " << h;
  if (sizeof...(t) > 0) std::cerr << " :";
  debug_out(t...);
}

template <typename T1, typename T2>
std::ostream& operator<<(std::ostream& os, std::pair<T1, T2> pa) {
  return os << pa.first << " " << pa.second;
}

template <typename T>
std::ostream& operator<<(std::ostream& os, std::vector<T> vec) {
  for (std::size_t i = 0; i < vec.size(); i++)
    os << vec[i] << (i + 1 == vec.size() ? "" : " ");
  return os;
}

template <typename T1, typename T2>
inline bool chmax(T1& a, T2 b) {
  return a < b && (a = b, true);
}

template <typename T1, typename T2>
inline bool chmin(T1& a, T2 b) {
  return a > b && (a = b, true);
}

template <typename Num, typename Func = std::multiplies<Num>>
constexpr Num mypow(Num a, u64 b, Num id = 1, Func mul = Func()) {
  if (b == 0) return id;
  Num x = id;
  while (b > 0) {
    if (b & 1) x = mul(x, a);
    a = mul(a, a);
    b >>= 1;
  }
  return x;
}

/* template end */

using P = std::pair<i64, i64>;

int main() {
  std::cin.tie(nullptr);
  std::ios::sync_with_stdio(false);

  i64 n, k;
  std::cin >> n >> k;

  std::vector<i64> c(n), r(n);

  rep(i, 0, n) std::cin >> c[i] >> r[i];

  std::vector<std::vector<i64>> graph(n);

  rep(i, 0, k) {
    i64 a, b;
    std::cin >> a >> b;

    a--;
    b--;
    graph[a].emplace_back(b);
    graph[b].emplace_back(a);
  }

  std::vector<std::vector<P>> graph2(n);

  rep(i, 0, n) {
    std::vector<bool> is_connect(n, false);

    std::queue<P> que;

    que.emplace(i, r[i]);

    while (!que.empty()) {
      auto [now, remain] = que.front();
      que.pop();
      if (is_connect[now]) continue;

      is_connect[now] = true;
      if (remain == 0) continue;

      for (i64 next : graph[now]) {
        que.emplace(next, remain - 1);
      }
    }

    rep(j, 0, n) {
      if (i == j) continue;
      if (is_connect[j]) graph2[i].emplace_back(j, c[i]);
    }
  }

  constexpr i64 INF = 1e15;

  std::vector<i64> dist(n, INF);
  std::priority_queue<P, std::vector<P>, std::greater<P>> pq;
  dist[0] = 0;

  pq.emplace(0,0);

  while(!pq.empty()){
    auto [cost,now] = pq.top();pq.pop();
    if(cost > dist[now])continue;

    for(const auto& [next,edge_cost]:graph2[now]){
      if(dist[next] > dist[now] + edge_cost){
        dist[next] = dist[now]+edge_cost;
        pq.emplace(dist[next],next);
      }
    }
  }

  std::cout<<dist[n-1]<<"\n";

  return 0;
}

