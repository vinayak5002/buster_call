#include "bits/stdc++.h"

#define REP(i,num) for(ll i=0;i<(num);++i)
#define FOR(i,c,num) for(ll (i)=(c);(i)<(num);++(i))
#define LOOP(i) while(i--)
#define ALL(c) c.begin(),c.end()
#define PRINTALL(c) for(auto pitr=c.begin();pitr!=c.end();++pitr){cout<<*pitr;if(next(pitr,1)!=c.end())cout<<' ';}cout<<endl;
#define PAIRCOMP(c,comp) [](const pair<ll,ll>& lhs,const pair<ll,ll>& rhs){return lhs.c comp rhs.c;}

using namespace std;
using ll = long long;
using ull = unsigned long long;
using vll = vector<ll>;
using vvll = vector<vector<ll>>;

constexpr ll atcoder_mod = 1e9+7;

template<typename T=ll>
T in(){ T x; cin >> x; return (x); }
template<typename T=ll,typename C=vector<T>>
C vecin(int N){ C x(N);REP(i,N){ x[i]=in<T>(); }return x; }
template<typename T=ll,size_t N>
array<T,N> arrin(){array<T,N> x;REP(i,N){ x[i]=in<T>(); }return x;}

void vout(){ cout << endl; }
template<typename Head,typename... Tail>
void vout(Head&& h,Tail&&... t){ cout << ' ' << h;vout(forward<Tail>(t)...); }
void out(){ cout << endl; }
template<typename Head,typename... Tail>
void out(Head&& h,Tail&&... t){ cout << h;vout(forward<Tail>(t)...); }

template<typename T>
bool chmax(T& a,T b){ if(a<b){ a=b;return true; }return false; }
template<typename T>
bool chmin(T& a,T b){ if(a>b){ a=b;return true; }return false; }

map<ll,ll> M;

ll dfs(vll& V,ll L,ll R){
	if(R-L==1){
		M[V[L]]--;
		return 1;
	}
	auto minV=*min_element(V.begin()+L,V.begin()+R);
	ll C=0,P=L-1;
	FOR(i,L,R){
		if(V[i]==minV){
			if(i-1>P){
				C++;
				dfs(V,P+1,i);
			}
			P=i;
		}
	}
	if(P!=R-1){
		C++;
		dfs(V,P+1,R);
	}
	M[minV]+=C-1;
	return C;
}

int main(){
	cin.tie(0);
	ios::sync_with_stdio(false);
	cout<<fixed<<setprecision(10);

	auto N=in();
	auto V=vecin(N);

	if(*max_element(ALL(V))==0){
		out(0);
		return 0;
	}

	V.erase(unique(ALL(V)),V.end());

	vll P;
	P.push_back(V[0]);
	FOR(i,1,V.size()-1){
		if((V[i]>V[i-1] && V[i]>V[i+1]) || (V[i]<V[i-1] && V[i]<V[i+1])){
			P.push_back(V[i]);
		}
	}
	P.push_back(V.back());
	
	dfs(P,0,P.size());
	ll A=1,maxA=1;
	for(auto& x:M){
		A+=x.second;
		chmax(maxA,A);
	}
	out(maxA);
	return 0;
}

