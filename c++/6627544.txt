#include<stdio.h>

#define MAX 100005
#define NIL -1

typedef struct Node {
    int parent;
    int left;
    int right;
} t;

t T[MAX];
int D[MAX];

void print_sys(int u)
{
    int i, c;
    printf("node %d: ", u);
    printf("parent = %d, ", T[u].parent);
    printf("depth = %d, ", D[u]);

    if(T[u].parent == NIL)
    {
        printf("root, ");
    }
    else if(T[u].left == NIL)
    {
        printf("leaf, ");
    }
    else
    {
        printf("internal node, ");
    }

    printf("[");
    for(i=0, c=T[u].left; c != NIL; i++, c=T[c].right)
    {
        // i=1 であれば処理され i=0 であれば処理されない
        if(i){printf(", ");}
        printf("%d", c);
    }
    printf("]\n");
}

//深さを計算
int DeepCul(int u, int parent)
{
    D[u] = parent;
    if(T[u].right != NIL){DeepCul(T[u].right, parent);}
    if(T[u].left != NIL){DeepCul(T[u].left, parent+1);}
}

int main()
{
    int i, j;
    int n;
    int depth, value;
    int child, left, right;

    scanf("%d", &n);
    for(i=0; i<n; i++)
    {
        T[i].parent = NIL;
        T[i].left = NIL;
        T[i].right = NIL;
    }

    for(i=0; i<n; i++)
    {
        scanf("%d %d", &value, &depth);
        for(j=0; j<depth; j++)
        {
            scanf("%d",&child);
            if(j == 0)
            {
                T[value].left = child;
            }
            else
            {
                T[left].right = child;
            }
            left = child;
            T[child].parent = value;
        }
    }
    for(i=0; i<n; i++)
    {
        if(T[i].parent == NIL){right = i;}
    }

    DeepCul(right, 0);

    for(i=0; i<n; i++)
    {
        print_sys(i);
    }

    return 0;
}
