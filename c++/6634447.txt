#include<bits/stdc++.h>

using namespace std;

using ll = long long;
using ld = long double;

#define rep(i, a, b) for(ll i = (ll)a; i < (ll)b; i++)
#define irep(i, v) for(auto i = (v).begin(); i != (v).end(); i++)
#define ALL(v) (v).begin(), (v).end()
#define SZ(v) (ll)(v).size()

const ll INF = 1e18;
const ld EPS = 1e-10;
const ll MOD = 1e9 + 7;
const ld PI = M_PI;

class rolling_hash1D{
  using ull = unsigned long long;
  private:
    ull base, cons;
    const ull mod = (1UL << 61) - 1;
    const ull MASK30 = (1UL << 30) - 1;
    const ull MASK31 = (1UL << 31) - 1;
    const ull positivizer = mod * 4;

    // a * b mod 2^61 - 1を返す
    ull mul(ull a, ull b){
      ull au = a >> 31;
      ull ad = a & MASK31;
      ull bu = b >> 31;
      ull bd = b & MASK31;
      ull mid = ad * bu + au * bd;
      ull midu = mid >> 30;
      ull midd = mid & MASK30;
      return calcmod(au * bu * 2 + midu + (midd << 31) + ad * bd);
    }

    // x mod 2^61 - 1を返す
    ull calcmod(ull x){
      ull xu = x >> 61;
      ull xd = x & mod;
      ull res = xu + xd;
      if(res >= mod) res -= mod;
      return res;
    }
  public:
    rolling_hash1D(){
      base = (rand() % (ull)1e9) + (ull)1e9;
      cons = (rand() % 10) + 10;
    }

    ull func(char c){
      return (ull)(c) + cons;
    }

    // aはbに含まれているか(一致した時bの先頭のindexの配列を返す)
    vector<ll> contain_vec(string &a, string &b){
      ll sa = a.size();
      ll sb = b.size();
      vector<ll> res;

      if(sa > sb) return res;
      ull t = 1;
      for(ll i = 0; i < sa; i++) t = mul(t,  base);


      // aとbの先頭a.size()文字のハッシュ値を計算
      ull ha = 0, hb = 0;
      for(ll i = 0; i < sa; i++) ha = calcmod(mul(ha, base) + func(a[i]));
      for(ll i = 0; i < sa; i++) hb = calcmod(mul(hb, base) + func(b[i]));
      
      // bの位置を進めながらチェック
      for(ll i = 0; i + sa <= sb; i++){
        if(ha == hb) res.push_back(i);
        if(i + sa < sb) hb = calcmod(mul(hb, base) + func(b[i + sa]) - mul(func(b[i]), t) + positivizer);
      }
      return res;
    }

    bool contain(string &a, string &b){
      return (contain_vec(a, b).size() != 0);
    }

    // aの末尾とbの先頭が何文字一致するか
    ll overlap(string &a, string &b){
      ll sa = a.size();
      ll sb = b.size();
      ll res = 0;
      ull ha = 0, hb = 0, t = 1;
      for(ll i = 1; i <= min(sa, sb); i++){
        ha = calcmod(ha + mul(func(a[sa - i]), t));
        hb = calcmod(mul(hb, base) + func(b[i - 1]));
        if(ha == hb) res = i;
        t = mul(t, base);
      }
      return res;
    }
};

int main(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  srand((unsigned)time(NULL));
  cout << fixed << setprecision(20);

  string s, t;
  cin >> s >> t;

  rolling_hash1D roliha;
  auto vec = roliha.contain_vec(t, s);
  rep(i, 0, SZ(vec)) cout << vec[i] << endl;

  return 0;
}
