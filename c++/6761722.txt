#include<bits/stdc++.h>
using namespace std;
#define rep(i,n) for (int i=0;i<(int)(n);i++)
#define all(v) v.begin(),v.end()
using ll=long long;
using pll=pair<ll,ll>;
const ll inf=-(1ll<<60),INF=(1ll<<60);
struct edge{
	ll to;
	ll cost;
	edge(ll to,ll cost) : to(to),cost(cost) {};
};
struct graph{
  ll v;
  vector<vector<edge>> g;
  vector<ll> d,prev;
  graph(ll n){
    v=n;
    g.resize(v);
    d.resize(v,INF);
    prev.resize(v,-1);
  }
  void add_edge(ll s,ll t,ll cost){
    g[s].push_back({t,cost});
  }
  void dijkstra(ll s){
    rep(i,d.size()){
      d[i]=INF;
    }
    priority_queue<pll,vector<pll>,greater<pll>> pq;
	d[s]=0;
	pq.push({0,s});
	while(!pq.empty()){
      ll x_dist,x_vertex;
      tie(x_dist,x_vertex)=pq.top();
      pq.pop();
      if(d[x_vertex]<x_dist) continue;
      for(auto edge:g[x_vertex]){
        if(d[x_vertex]+edge.cost<d[edge.to]){
          d[edge.to]=d[x_vertex]+edge.cost;
          prev[edge.to]=x_vertex;
          pq.push({d[edge.to],edge.to});
        }
      }
    }
  }
};
template<class T> void chmin(T &a,T b){
  if(a>b){
    a=b;
  }
}
template<class T> void chmax(T &a,T b){
  if(a<b){
    a=b;
  }
}
vector<vector<ll>> warshall_floyd(vector<vector<ll>> &g){
  vector<vector<ll>> dp=g;
  rep(k,g.size()){
    rep(i,g.size()){
      rep(j,g.size()){
        chmin(dp[i][j],dp[i][k]+dp[k][j]);
      }
    }
  }
  return dp;
}
int main(){
  ll v,e;
  cin >> v >> e;
  vector<vector<ll>> g(v,vector<ll>(v,INF));
  rep(i,v){
    g[i][i]=0;
  }
  rep(i,e){
    ll s,t,d;
    cin >> s >> t >> d;
    g[s][t]=d;
  }
  vector<vector<ll>> dist=warshall_floyd(g);
  rep(i,v){
    if(dist[i][i]<0){
      cout << "NEGATIVE CYCLE" << endl;
      return 0;
    }
  }
  rep(i,v){
    rep(j,v){
      if(INF<=dist[i][j]) cout << "INF ";
      else cout << dist[i][j] << " ";
    }
    cout << endl;
  }
}
