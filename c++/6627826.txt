#include<stdio.h>
#define MAX 100005
#define NIL -1

typedef struct{
    int parent; //親ノード
    int left_child; //左の子ノード
    int right_child; //右の兄弟ノード
}NODE;

NODE Tree[MAX];
int N, Depth[MAX];

// 出力用の関数
void print_node(int node_point){
    int i, child_node;

    printf("node %d: ", node_point);
    printf("parent = %d, ", Tree[node_point].parent);
    printf("depth = %d, ", Depth[node_point]);

    if(Tree[node_point].parent == NIL){
        printf("root, ");
    }else if(Tree[node_point].left_child == NIL){
        printf("leaf, ");
    }else{
        printf("internal node, ");
    }

    printf("[");
    for(i = 0, child_node = Tree[node_point].left_child; child_node != NIL; i++, child_node = Tree[child_node].right_child){
        if(i){
            printf(", ");
        }
        printf("%d", child_node);
    }
    printf("]\n");
}

//再帰的に深さを求める関数
void recursive(int node_point, int depth){
    Depth[node_point] = depth;

    if(Tree[node_point].right_child != NIL){ // 右の兄弟に同じ深さを設定する
        recursive(Tree[node_point].right_child, depth);
    }
    if(Tree[node_point].left_child != NIL){ // もっとも左の子に自分の深さ+1を設定する
        recursive(Tree[node_point].left_child, depth + 1);
    }
}

int main(void){
    int i, j, N_child, node_num, child_num, left_child, right_child, root;
    scanf("%d", &N);

    for(i = 0; i < N; i++){ // Treeを初期化する
        Tree[i].parent = NIL;
        Tree[i].left_child = NIL;
        Tree[i].right_child = NIL;
    }

    for(i = 0; i < N; i++){ //格納
        scanf("%d %d", &node_num, &N_child); // ノード番号と持つ子の数

        for(j = 0; j < N_child; j++){ //子の関係を格納する
            scanf("%d", &child_num);
            
            /* 最初の子をleft_childに格納
            次からは最初の子ノードの兄弟なので、right_childに格納 */
            
            if(j == 0){
                Tree[node_num].left_child = child_num;
            }else{
                Tree[left_child].right_child = child_num;
            }

            left_child = child_num; // 親ノードの番号を入れる
            Tree[child_num].parent = node_num;
        }
    }

    // rootノードを見つける
    for(i = 0; i < N; i++){
        if(Tree[i].parent == NIL){
            root = i;
        }
    }

    // 深さD[]に格納する
    recursive(root, 0);

    for(i = 0; i < N; i++){
        print_node(i);
    }

    return 0;
}
