#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

#define rep(i,n) for(ll (i)=0; (i)<(ll)(n); (i)++)
#define FOR(i, b, e) for(ll (i)=(b); (i)<=(ll)(e); (i)++)
#define ALL(x) (x).begin(), (x).end()

const ll INF = 100100100100100100;

using Point = complex<double>;
using Points = vector<Point>;
using Polygon = vector<Point>;
// realを最初に比較すると左が優先、imagを比較すると下が優先
namespace std { bool operator<(const Point &a, const Point &b) { return a.imag() != b.imag() ? a.real() < b.real() : a.imag() < b.imag(); } }
const double EPS = 1e-7;
const double PI = acos(-1.0);
inline bool equal(const double &a, const double &b) { return fabs(a - b) < EPS; }
Point unitVector(const Point &a) { return a / abs(a); }
Point normalVector(const Point &a) { return a * Point(0, 1); }
// 内積
double dot(const Point &a, const Point &b) { return (a.real() * b.real() + a.imag() * b.imag()); }
// 外積
double cross(const Point &a, const Point &b) { return (a.real() * b.imag() - a.imag() * b.real()); }
// 反時計回りにthetaラジアン回転
Point rotate(const Point &p, const double &theta) { return Point(cos(theta)*p.real()-sin(theta)*p.imag(), sin(theta)*p.real()+cos(theta)*p.imag()); }
// ラジアンから度
double radianToDegree(const double &radian) { return radian * 180.0 / PI; }
// 度からラジアン
double degreeToRadian(const double &degree) { return degree * PI / 180.0; }
// 点の回転方向
ll ccw(const Point &a, Point b, Point c) {
  b -= a, c -= a;
  // a, b, cが
  // 反時計回り
  if(cross(b, c) > EPS) return 1;
  // 時計回り
  if(cross(b, c) < -EPS) return -1;
  // c, a, bの順で同一直線上
  if(dot(b, c) < 0) return 2;
  // a, b, cの順で同一直線上
  if(norm(b) < norm(c)) return -2;
  // cが線分ab上
  return 0;
}
// Line : 直線を表す構造体
// b - a で直線・線分を表せる
struct Line {
  Point a, b;
  Line() = default;
  Line(Point a, Point b) : a(a), b(b) {}
  // Ax+By=C
  Line(double A, double B, double C) {
    if(equal(A, 0)) a = Point(0, C / B), b = Point(1, C / B);   
    else if(equal(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);
    else a = Point(0, C / B), b = Point(C / A, 0);
  }
};
// Segment : 線分を表す構造体
// Lineと同じ
struct Segment : Line {
  Segment() = default;
  Segment(Point a, Point b) : Line(a, b) {}
};
// Circle : 円を表す構造体
// pが中心の位置ベクトル、rは半径
struct Circle {
  Point p;
  double r;
  Circle() = default;
  Circle(Point p, double r) : p(p), r(r) {}
};
using Lines = vector<Line>;
// 射影
Point projection(const Line &l, const Point &p) {
  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);
  return l.a + (l.a - l.b) * t;
}
Point projection(const Segment &l, const Point &p) {
  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);
  return l.a + (l.a - l.b) * t;
}
// 反射
// 直線lを対称軸として点pと線対称にある点を求める
Point reflection(const Line &l, const Point &p) { return p + (projection(l, p) - p) * 2.0; }
// 平行
bool is_parallel(const Line &a, const Line &b) { return equal(cross(a.b - a.a, b.b - b.a), 0.0); }
// 垂直
bool is_orthogonal(const Line &a, const Line &b) { return equal(dot(a.a - a.b, b.a - b.b), 0.0); }
// 交差判定
bool intersect(const Line &l, const Point &p) { return abs(ccw(l.a, l.b, p)) != 1; }
bool intersect(const Line &l, const Line &m) { return abs(cross(l.b - l.a, m.b - m.a)) > EPS || abs(cross(l.b - l.a, m.b - l.a)) < EPS; }
bool intersect(const Segment &s, const Point &p) { return ccw(s.a, s.b, p) == 0; }
bool intersect(const Line &l, const Segment &s) { return cross(l.b - l.a, s.a - l.a) * cross(l.b - l.a, s.b - l.a) < EPS; }
bool intersect(const Segment &s, const Segment &t) { return ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0; }
double distance(const Line &l, const Point &p); // distance関連をまとめるため宣言しておく
bool intersect(const Circle &c, const Line &l) { return distance(l, c.p) <= c.r + EPS; }
bool intersect(const Circle &c, const Point &p) { return abs(abs(p - c.p) - c.r) < EPS; }
int intersect(const Circle &c, const Segment &l) {
  if(norm(projection(l, c.p) - c.p) - c.r * c.r > EPS) return 0;
  auto d1 = abs(c.p - l.a), d2 = abs(c.p - l.b);
  if(d1 < c.r + EPS && d2 < c.r + EPS) return 0;
  if(d1 < c.r - EPS && d2 > c.r + EPS || d1 > c.r + EPS && d2 < c.r - EPS) return 1;
  const Point h = projection(l, c.p);
  if(dot(l.a - h, l.b - h) < 0) return 2;
  return 0;
}
// 共通接線の数
// http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_A&lang=jp
int intersect(Circle c1, Circle c2) {
  if(c1.r < c2.r) swap(c1, c2);
  double d = abs(c1.p - c2.p);
  if(c1.r + c2.r < d) return 4;
  if(equal(c1.r + c2.r, d)) return 3;
  if(c1.r - c2.r < d) return 2;
  if(equal(c1.r - c2.r, d)) return 1;
  return 0;
}
// 距離
double distance(const Point &a, const Point &b) { return abs(a - b); }
double distance(const Line &l, const Point &p) { return abs(p - projection(l, p)); }
double distance(const Line &l, const Line &m) { return intersect(l, m) ? 0 : distance(l, m.a); }
double distance(const Segment &s, const Point &p) {
  Point r = projection(s, p);
  if(intersect(s, r)) return abs(r - p);
  return min(abs(s.a - p), abs(s.b - p));
}
double distance(const Segment &a, const Segment &b) {
  if(intersect(a, b)) return 0;
  return min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});
}
double distance(const Line &l, const Segment &s) {
  if(intersect(l, s)) return 0;
  return min(distance(l, s.a), distance(l, s.b));
}
// 交点
Point crosspoint(const Line &l, const Line &m) {
  double A = cross(l.b - l.a, m.b - m.a);
  double B = cross(l.b - l.a, l.b - m.a);
  if(equal(abs(A), 0.0) && equal(abs(B), 0.0)) return m.a;
  return m.a + (m.b - m.a) * B / A;
}
Point crosspoint(const Segment &l, const Segment &m) { return crosspoint(Line(l), Line(m)); }
pair< Point, Point > crosspoint(const Circle &c, const Line l) {
  Point pr = projection(l, c.p);
  Point e = (l.b - l.a) / abs(l.b - l.a);
  if(equal(distance(l, c.p), c.r)) return {pr, pr};
  double base = sqrt(c.r * c.r - norm(pr - c.p));
  return {pr - e * base, pr + e * base};
}
pair< Point, Point > crosspoint(const Circle &c, const Segment &l) {
  Line aa = Line(l.a, l.b);
  if(intersect(c, l) == 2) return crosspoint(c, aa);
  auto ret = crosspoint(c, aa);
  if(dot(l.a - ret.first, l.b - ret.first) < 0) ret.second = ret.first;
  else ret.first = ret.second;
  return ret;
}
pair< Point, Point > crosspoint(const Circle &c1, const Circle &c2) {
  double d = abs(c1.p - c2.p);
  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));
  double t = atan2(c2.p.imag() - c1.p.imag(), c2.p.real() - c1.p.real());
  Point p1 = c1.p + Point(cos(t + a) * c1.r, sin(t + a) * c1.r);
  Point p2 = c1.p + Point(cos(t - a) * c1.r, sin(t - a) * c1.r);
  return {p1, p2};
}
// 点pを通る円cの接線
pair< Point, Point > tangent(const Circle &c1, const Point &p2) { return crosspoint(c1, Circle(p2, sqrt(norm(c1.p - p2) - c1.r * c1.r))); }
// 多角形の面積
double area(const Polygon &p) {
  double A = 0;
  for(int i = 0; i < p.size(); ++i) A += cross(p[i], p[(i + 1) % p.size()]);
  return A * 0.5;
}
// 凸性判定
bool is_convex(const Polygon &p) {
  int n = (int) p.size();
  for(int i = 0; i < n; i++) if(ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]) == -1) return false;
  return true;
}
// 多角形と点の包含判定
enum { OUT, ON, IN };
int contains(const Polygon &Q, const Point &p) {
  bool in = false;
  for(int i = 0; i < Q.size(); i++) {
    Point a = Q[i] - p, b = Q[(i + 1) % Q.size()] - p;
    if(a.imag() > b.imag()) swap(a, b);
    if(a.imag() <= 0 && 0 < b.imag() && cross(a, b) < 0) in = !in;
    if(cross(a, b) == 0 && dot(a, b) <= 0) return ON;
  }
  return in ? IN : OUT;
}
// 凸包
Polygon convex_hull(Polygon &p) {
  int n = (int) p.size(), k = 0;
  if(n <= 2) return p;
  sort(p.begin(), p.end());
  vector< Point > ch(2 * n);
  // 一直線上の3点を含めない時EPS, 含める時-EPS
  for(int i = 0; i < n; ch[k++] = p[i++]) {while(k >= 2 && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < -EPS) --k;}
  for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--]) {while(k >= t && cross(ch[k - 1] - ch[k - 2], p[i] - ch[k - 1]) < -EPS) --k;}
  ch.resize(k - 1);
  return ch;
}

int main() {
  ll n; cin >> n;
  Polygon p = {};
  rep(i, n) {
    double x, y; cin >> x >> y;
    p.push_back(Point(x, y));
  }
  Polygon ch = convex_hull(p);
  cout << ch.size() << endl;
  rep(i, ch.size()) {
    cout << ch[i].real() << " " << ch[i].imag() << endl;
  }
  return 0;
}

