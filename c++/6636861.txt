#include <bits/stdc++.h>
using std::cin;
using std::getline;
using std::cout;
using std::endl;
using std::string;
using std::bitset;
using std::vector;
using std::array;
using std::stack;
using std::queue;
using std::set;
using std::map;
using std::pair;
using llong = long long;
template<typename T>
using nlimits = std::numeric_limits<T>;
#define REP(i, n) for (int i = 0; i < static_cast<int>(n); ++i)
#define RREP(i, n) for (int i = static_cast<int>(n) - 1; i >= 0; --i)
#define FOR(i, a, b) for (int i = static_cast<int>(a); i < static_cast<int>(b); ++i)
#define RFOR(i, a, b) for (int i = static_cast<int>(a) - 1; i >= static_cast<int>(b); --i)


template<typename T>
void PrintArray(const T* a, const size_t n);


array<int, 500000/2+2> L, R;


llong merge(int *A, int left, int mid, int right) {
    int n1 = mid - left;
    int n2 = right - mid;
    REP(i, n1) L[i] = A[left + i];
    REP(i, n2) R[i] = A[mid + i];
    L[n1] = nlimits<int>::max();
    R[n2] = nlimits<int>::max();
    llong i = 0, j = 0, c = 0;
    FOR(k, left, right) {
        if (L[i] <= R[j]) {
            A[k] = L[i];
            ++i;
        } else {
            A[k] = R[j];
            ++j;
            c += mid - left - i;
        }
    }
    return c;
}

llong mergeSort(int *A, int left, int right) {
    llong sum = 0;
    if (left + 1 < right) {
        int mid = (left + right) / 2;
        sum += mergeSort(A, left, mid);
        sum += mergeSort(A, mid, right);
        sum += merge(A, left, mid, right);
    }
    return sum;
}


int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);

    int N;
    cin >> N;

    vector<int> A(N);
    REP(i, N) cin >> A[i];

    llong ans = mergeSort(A.data(), 0, N);
    cout << ans << endl;
}


template<typename T>
void PrintArray(const T* a, const size_t n) {
    string s = std::to_string(a[0]);
    FOR(i, 1, n) s += " " + std::to_string(a[i]);
    cout << s + "\n";
}

