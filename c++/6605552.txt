#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

#define rep(i,n) for(ll (i)=0; (i)<(ll)(n); (i)++)
#define FOR(i, b, e) for(ll (i)=(b); (i)<=(ll)(e); (i)++)
#define ALL(x) (x).begin(), (x).end()

const ll INF = 100100100100100100;

using Point = complex<double>;
const double EPS = 1e-7;
const double PI = acos(-1.0);
inline bool equal(const double &a, const double &b) { return fabs(a - b) < EPS; }
Point unitVector(const Point &a) { return a / abs(a); }
Point normalVector(const Point &a) { return a * Point(0, 1); }
// 内積
double dot(const Point &a, const Point &b) { return (a.real() * b.real() + a.imag() * b.imag()); }
// 外積
double cross(const Point &a, const Point &b) { return (a.real() * b.imag() - a.imag() * b.real()); }
// 反時計回りにthetaラジアン回転
Point rotate(const Point &p, const double &theta) { return Point(cos(theta)*p.real()-sin(theta)*p.imag(), sin(theta)*p.real()+cos(theta)*p.imag()); }
// ラジアンから度
double radianToDegree(const double &radian) { return radian * 180.0 / PI; }
// 度からラジアン
double degreeToRadian(const double &degree) { return degree * PI / 180.0; }
// 点の回転方向
ll ccw(const Point &a, Point b, Point c) {
  b -= a, c -= a;
  // a, b, cが
  // 反時計回り
  if(cross(b, c) > EPS) return 1;
  // 時計回り
  if(cross(b, c) < -EPS) return -1;
  // c, a, bの順で同一直線上
  if(dot(b, c) < 0) return 2;
  // a, b, cの順で同一直線上
  if(norm(b) < norm(c)) return -2;
  // cが線分ab上
  return 0;
}
// Line : 直線を表す構造体
// b - a で直線・線分を表せる
struct Line {
  Point a, b;
  Line() = default;
  Line(Point a, Point b) : a(a), b(b) {}
  // Ax+By=C
  Line(double A, double B, double C) {
    if(equal(A, 0)) a = Point(0, C / B), b = Point(1, C / B);   
    else if(equal(B, 0)) b = Point(C / A, 0), b = Point(C / A, 1);
    else a = Point(0, C / B), b = Point(C / A, 0);
  }
};
// Segment : 線分を表す構造体
// Lineと同じ
struct Segment : Line {
  Segment() = default;
  Segment(Point a, Point b) : Line(a, b) {}
};
// Circle : 円を表す構造体
// pが中心の位置ベクトル、rは半径
struct Circle {
  Point p;
  double r;
  Circle() = default;
  Circle(Point p, double r) : p(p), r(r) {}
};
// 射影
Point projection(const Line &l, const Point &p) {
  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);
  return l.a + (l.a - l.b) * t;
}
Point projection(const Segment &l, const Point &p) {
  double t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);
  return l.a + (l.a - l.b) * t;
}
// 反射
// 直線lを対称軸として点pと線対称にある点を求める
Point reflection(const Line &l, const Point &p) { return p + (projection(l, p) - p) * 2.0; }
// 平行
bool parallel(const Line &a, const Line &b) { return equal(cross(a.b - a.a, b.b - b.a), 0.0); }
// 垂直
bool orthogonal(const Line &a, const Line &b) { return equal(dot(a.a - a.b, b.a - b.b), 0.0); }

int main() {
  double x0, y0, x1, y1, x2, y2, x3, y3;
  cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;
  Point p0 = Point(x0, y0), p1 = Point(x1, y1), p2 = Point(x2, y2), p3 = Point(x3, y3);
  Line s1 = Line(p0, p1), s2 = Line(p2, p3);
  if(orthogonal(s1, s2)) {
    cout << 1 << endl;
  } else if(parallel(s1, s2)) {
    cout << 2 << endl;
  } else {
    cout << 0 << endl;
  }
  return 0;
}

