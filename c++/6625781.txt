#include <stdio.h>
#define MAX 100005
#define NIL -1

typedef struct
{
    int parent;
    int left_c;
    int right_s;
} Node;

Node Tree[MAX];
int n, Dep[MAX];

void recursive(int node_p, int depth)
{
    Dep[node_p] = depth;
    if (Tree[node_p].right_s != NIL) recursive(Tree[node_p].right_s, depth);
    if (Tree[node_p].left_c != NIL) recursive(Tree[node_p].left_c, depth + 1);
}

void print_node(int node_p)
{
    int i, child_n;
    printf("node %d: ", node_p);
    printf("parent = %d, ", Tree[node_p].parent);
    printf("depth = %d, ", Dep[node_p]);

    if (Tree[node_p].parent == NIL) printf("root, ");
    else if (Tree[node_p].left_c == NIL) printf("leaf, ");
    else printf("internal node, ");

    printf("[");

    for (i = 0, child_n=Tree[node_p].left_c; child_n != NIL; i++, child_n=Tree[child_n].right_s)
    {
        if (i)
        {
            printf(", ");
        }
        printf("%d", child_n);
    }
    printf("]\n");
}

int main(void)
{
    int i, j, n_child, node_n, c_num, left_c, right_s, root;
    scanf("%d", &n);

    for (i = 0; i < n; i++)
    {
        Tree[i].parent = NIL;
        Tree[i].left_c = NIL;
        Tree[i].right_s = NIL;
    }

    for (i = 0; i < n; i++)
    {
        scanf("%d %d", &node_n, &n_child);
        for (j = 0; j < n_child; j++)
        {
            scanf("%d", &c_num);
            if (j == 0) Tree[node_n].left_c = c_num;
            else Tree[left_c].right_s = c_num;

            left_c = c_num;
            Tree[c_num].parent = node_n;
        }
    }
    for (i = 0; i < n; i++)
        if (Tree[i].parent == NIL) root = i;

    recursive(root, 0);
    for (i = 0; i < n; i++) print_node(i);

    return 0;
}
