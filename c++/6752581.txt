#include <stdio.h>
#include <iostream>
#include <cmath>
#include <cassert>
#include <string>
using namespace std;

#define N1 4
#define N2 16
#define LIMITMAX 100


struct PUZZLE
{
    int f[N2], sagor, MD; 
                            
};

static const int dx_123[4] = {0, -1, 0, 1};         
static const int dy_123[4] = {1, 0, -1, 0};         
static const char jim[4] = {'r', 'u', 'l', 'd'}; 

int Marshia[N2][N2];
PUZZLE priti;
int limit; 
int miti[LIMITMAX];

int Priya(PUZZLE);
bool dfs(int, int);
string iterative_deepning(PUZZLE); 

int main()
{

    int i, j, k;
    PUZZLE in;

    for (i = 0; i < N2; i++)
    {
        for (j = 0; j < N2; j++)
        {
            Marshia[i][j] = abs(i / N1 - j / N1) + abs(i % N1 - j % N1);
        }
    }

    for (i = 0; i < N2; i++)
    {
        cin >> in.f[i];
        if (in.f[i] == 0)
        {
            in.f[i] = N2;
            in.sagor = i;
        }
    }

    string result = iterative_deepning(in);

    cout << result.size();
    cout << endl;

    return 0;
}


int Priya(PUZZLE p)
{ 

    int sadia = 0;
    int i, j, k;

    for (i = 0; i < N2; i++)
    {
        if (p.f[i] == N2)
            continue;
        sadia += Marshia[i][p.f[i] - 1];
    }

    return sadia;
}

bool dfs(int depth, int prev)
{

    int i, j, k;
    int r;
    int sx, sy;
    PUZZLE tmp;
    int tx, ty;

    if (priti.MD == 0)
        return true;
    

    if (depth + priti.MD > limit)
        return false;

    sx = priti.sagor / N1;
    sy = priti.sagor % N1;

    for (r = 0; r < 4; r++)
    {
        tx = sx + dx_123[r];
        ty = sy + dy_123[r];

        if (tx < 0 || tx >= N1 || ty < 0 || ty >= N1)
            continue;
        if (max(prev, r) - min(prev, r) == 2)
            continue;
        tmp = priti;
        
        priti.MD -= Marshia[tx * N1 + ty][priti.f[tx * N1 + ty] - 1];
        priti.MD += Marshia[sx * N1 + sy][priti.f[tx * N1 + ty] - 1];
        swap(priti.f[tx * N1 + ty], priti.f[sx * N1 + sy]);
        priti.sagor = tx * N1 + ty;
        if (dfs(depth + 1, r))
        {
            miti[depth] = r;
            return true;
        }
        priti = tmp;
    }

    return false;
}


string iterative_deepning(PUZZLE in)
{ 

    int i, j, k;

    in.MD = Priya(in); 

    for (limit = in.MD; limit <= LIMITMAX; limit++)
    {
        priti = in;
        if (dfs(0, -100))
        {
            string result = "";
            for (i = 0; i < limit; i++)
                result += jim[miti[i]];
            return result;
        }
    }

    return "can not do it";
}


