#pragma region

#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <numeric> // gcd, lcm
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <iomanip>
using namespace std;

using ull = unsigned long long;
using ll = long long;
using vi = vector<int>;
using vll = vector<ll>;
using vvi = vector<vi>;
using vvll = vector<vll>;
using vs = vector<string>;
using pii = pair<int,int>;
using vpii = vector<pii>;

#pragma endregion

const int INF = (1ll << 31) - 1;

struct SegmentTree{
    int N;
    vpii node; // {time, value}

    SegmentTree(int sz){
        N = 1;
        while(N < sz) N <<= 1;
        node.assign(2*N, {0, INF});
    }

    void update(int l, int r, pii p, int v, int i, int j){
        if(j <= l or r <= i) return;
        if(l <= i and j <= r) node[v] = p;
        else{
            update(l, r, p, 2*v+1, i, (i+j)/2);
            update(l, r, p, 2*v+2, (i+j)/2, j);
        }
    }
    // [l,r), p = {time, val}
    void update(int l, int r, pii p){
        update(l, r, p, 0, 0, N);
    }

    int get(int i){
        i += N-1;
        auto [tmax, ans] = node[i];
        while(i > 0){
            i = (i-1)/2;
            auto [t, v] = node[i];
            if(tmax < t){ tmax = t; ans = v; }
        }
        return ans;
    }
};

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n, q; cin >> n >> q;
    SegmentTree seg(n);
    for(int t=1; t<=q; ++t){
        int c; cin >> c;
        if(c==0){
            int l, r, x; cin >> l >> r >> x;
            seg.update(l, r+1, pii(t, x));
        }
        else{
            int i; cin >> i;
            cout << seg.get(i) << endl;
        }
    }

    return 0;
}
