#include<bits/stdc++.h>
#define fi first
#define se second
#define pb push_back
using namespace std;
typedef long long LL;
typedef double db;
const db pi = acos(-1.0);
const db eps=1e-8;
const int maxp=1010;
const int N=200;

int sgn(double x){
    if(fabs(x)<eps) return 0;
    if(x<0) return -1;
    return 1;
}

struct Point{
	db x,y;
	Point(){}
	Point(db _x,db _y){
		x = _x;
		y = _y;
	}
	
	void input(){
		scanf("%lf%lf",&x,&y);
	}
	
	void output(){
		printf("%.10lf %.10lf\n",x,y);
	}
	
	bool operator < (Point b)const{
		return sgn(x-b.x)==0?sgn(y-b.y)<0:x<b.x;
	}
	
	Point operator -(const Point &b)const{
		return Point(x-b.x,y-b.y);
	}
	Point operator +(const Point &b)const{
		return Point(x+b.x,y+b.y);
	}
	db operator ^(const Point &b)const{
		return x*b.y-y*b.x;
	}
	db operator *(const Point &b)const{
		return x*b.x+y*b.y;
	}
	Point operator *(const db &k)const{
		return Point(x*k,y*k);
	}
	Point operator /(const db &k)const{
		return Point(x/k,y/k);
	}
	db distance(Point p){
		return hypot(x-p.x,y-p.y);
	}
	db len(){
		return hypot(x,y);
	}
	db len2(){
		return x*x+y*y;
	}
};

struct Line{
	Point s,e;
	Line(){}
	Line(Point _s,Point _e){
		s = _s;
		e = _e;
	}
    
    Line(Point p,double angle){
        s=p;
        if(sgn(angle-pi/2) == 0){
            e=(s+Point(0,1));
        }
        else{
            e=(s+Point(1,tan(angle)));
        }
    }
    
    bool parallel(Line v){
        return sgn((e-s)^(v.e-v.s))==0;
    }
    
    int relation(Point p){
        int c =sgn((p-s)^(e-s));
        if(c<0) return 1;
        else if(c>0) return 2;
        else return 3;
    }
    
    int linecrossline(Line v){
        if((*this).parallel(v))
            return v.relation(s)==3;
        return 2;
    }
    
    Point crosspoint(Line v){
        db a1=(v.e-v.s)^(s-v.s);
        db a2=(v.e-v.s)^(e-v.s);
        return Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));
    }
    
	Point lineprog(Point p){
		return s+(((e-s)*((e-s)*(p-s)))/((e-s).len2()));
	}
	Point symmetrypoint(Point p){
		Point q=lineprog(p);
		return Point(2*q.x-p.x,2*q.y-p.y);
	}
	db length(){
		return s.distance(e);
	}
	db dispointtoline(Point p){
		return fabs((p-s)^(e-s))/length();
	}
	db dispointtoseg(Point p){
		if(sgn((p-s)*(e-s))<0 || sgn((p-e)*(s-e))<0)
			return min(p.distance(s),p.distance(e));
		return dispointtoline(p);
	}
	db dissegtoseg(Line v){
		return min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v.dispointtoseg(s),v.dispointtoseg(e)));
	}
};

struct polygon{
	int n;
	Point p[maxp];
	Line l[maxp];
	void input(int _n){
		n = _n;
		for(int i=0;i<n;i++)
			p[i].input();
	}
	db getarea(){
		db sum=0;
		for(int i=0;i<n;i++){
			sum+=(p[i]^p[(i+1)%n]);
		}
		return sum/2;
	}
	bool isconvex() {
		bool s[2];
		memset(s,false,sizeof(s));
		for (int i=0; i<n; i++) {
			int j=(i+1)%n;
			int k=(j+1)%n;
			s[sgn((p[j]-p[i])^(p[k]-p[i]))+1]=true;
			if (s[0] && s[2]) return false;
		}
		return true;
	}
};

int main()
{
    int n;
    scanf("%d",&n);
    polygon p;
    p.input(n);
    printf("%d\n",p.isconvex());
    return 0;
}
