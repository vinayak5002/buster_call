#include<bits/stdc++.h>
using namespace std;

namespace internal_scc{
template <class E> struct csr {
    std::vector<int> start;
    std::vector<E> elist;
    csr(int n, const std::vector<std::pair<int, E>>& edges)
        : start(n + 1), elist(edges.size()) {
        for (auto e : edges) {
            start[e.first + 1]++;
        }
        for (int i = 1; i <= n; i++) {
            start[i] += start[i - 1];
        }
        auto counter = start;
        for (auto e : edges) {
            elist[counter[e.first]++] = e.second;
        }
    }
};
struct scc_graph {
  public:
    scc_graph(int n) : _n(n) {}
    int num_vertices() { return _n; }
    void add_edge(int from, int to) { edges.push_back({from, {to}}); }
    std::pair<int, std::vector<int>> scc_ids() {
        auto g = csr<edge>(_n, edges);
        int now_ord = 0, group_num = 0;
        std::vector<int> visited, low(_n), ord(_n, -1), ids(_n);
        visited.reserve(_n);
        auto dfs = [&](auto self, int v) -> void {
            low[v] = ord[v] = now_ord++;
            visited.push_back(v);
            for (int i = g.start[v]; i < g.start[v + 1]; i++) {
                auto to = g.elist[i].to;
                if (ord[to] == -1) {
                    self(self, to);
                    low[v] = std::min(low[v], low[to]);
                } else {
                    low[v] = std::min(low[v], ord[to]);
                }
            }
            if (low[v] == ord[v]) {
                while (true) {
                    int u = visited.back();
                    visited.pop_back();
                    ord[u] = _n;
                    ids[u] = group_num;
                    if (u == v) break;
                }
                group_num++;
            }
        };
        for (int i = 0; i < _n; i++) {
            if (ord[i] == -1) dfs(dfs, i);
        }
        for (auto& x : ids) {
            x = group_num - 1 - x;
        }
        return {group_num, ids};
    }

    std::vector<std::vector<int>> scc() {
        auto ids = scc_ids();
        int group_num = ids.first;
        std::vector<int> counts(group_num);
        for (auto x : ids.second) counts[x]++;
        std::vector<std::vector<int>> groups(ids.first);
        for (int i = 0; i < group_num; i++) {
            groups[i].reserve(counts[i]);
        }
        for (int i = 0; i < _n; i++) {
            groups[ids.second[i]].push_back(i);
        }
        return groups;
    }

  private:
    int _n;
    struct edge {
        int to;
    };
    std::vector<std::pair<int, edge>> edges;
};
}

struct scc_graph {
  public:
    scc_graph() : internal(0) {}
    scc_graph(int n) : internal(n) {}
    void add_edge(int from, int to) {
        int n = internal.num_vertices();
        assert(0 <= from && from < n);
        assert(0 <= to && to < n);
        internal.add_edge(from, to);
    }
    std::vector<std::vector<int>> scc() { return internal.scc(); }
  private:
    internal_scc::scc_graph internal;
};

int main(){
    int q;
    cin >> q;
    while(q--){
        int h, w;
        cin >> h >> w;
        vector<string> A(h);
        for(auto &&s:A)cin >> s;
        vector<array<int,2>> xr(26, array<int,2>({w+1,-1})), yr(26, array<int,2>({h+1,-1}));
        for(int y = 0; y < h; y++){
            for(int x = 0; x < w; x++){
                int c = int(A[y][x]) - 'A';
                if(0 <= c && c < 26){
                    xr[c][0] = min(xr[c][0], x);
                    xr[c][1] = max(xr[c][1], x);
                    yr[c][0] = min(yr[c][0], y);
                    yr[c][1] = max(yr[c][1], y);
                }
            }
        }
        scc_graph g(26);
        bool ans = true;
        for(int i = 0; i < 26; i++){
            for(int y = yr[i][0]; y <= yr[i][1]; y++){
                for(int x = xr[i][0]; x <= xr[i][1]; x++){
                    if(A[y][x] == '.')ans = false;
                    else if(A[y][x] != i + 'A')g.add_edge(A[y][x] - 'A', i);
                }
            }
        }
        cout << (ans && g.scc().size() == 26? "SAFE" : "SUSPICIOUS") << '\n';
    }
}
