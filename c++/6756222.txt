#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <math.h>

double minkowski_dis(int n, int *x, int *y, int p);

int main(){
	char buf[4000];
	char *p;
	int n;
	int x[1000];
	int y[1000];
	
	// n
	fgets(buf, sizeof(buf) - 1, stdin);
	sscanf(buf, "%d", &n);
	// x
	fgets(buf, sizeof(buf) - 1, stdin);
	p = buf;
	for (int i = 0; i < n; i++){
		sscanf(p, "%d", &x[i]);
		while (isdigit(*p)) p++;
		while (isspace(*p)) p++;
	}
	// y
	fgets(buf, sizeof(buf) - 1, stdin);
	p = buf;
	for (int i = 0; i < n; i++){
		sscanf(p, "%d", &y[i]);
		while (isdigit(*p)) p++;
		while (isspace(*p)) p++;
	}
	// 処理
	double p1 = minkowski_dis(n, x, y, 1);
	double p2 = minkowski_dis(n, x, y, 2);
	double p3 = minkowski_dis(n, x, y, 3);
	double pmax = minkowski_dis(n, x, y, 0);


	// 画面出力
	printf("%lf\n%lf\n%lf\n%lf\n", p1, p2, p3, pmax);

	return 0;
}

double minkowski_dis(int n, int *x, int *y, int p){
	double results = 0;
	if (p == 0){
		for (int i = 0; i < n; i++){
			double dis = abs(x[i] - y[i]);
			if (dis > results)
				results = dis;
		}
	}
	else{
		for (int i = 0; i < n; i++){
			double dis = abs(x[i] - y[i]);
			results += pow(dis, (double)p);
		}
		results = pow(results, 1. / (double)p);
	}

	return results;
}
