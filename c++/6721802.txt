#include <bits/extc++.h>

using namespace std;

#define rep(i,n) for(int i=0;i<(n);++i)
#define reps(i,s,n) for(int i=(s);i<=(n);++i)
#define all(x) begin(x), end(x)
#define Fixed fixed << setprecision(12)
#define updiv(a,b) ((a + b - 1) / b)
constexpr int32_t INF  = 0x3f3f3f3f;
constexpr int64_t LINF = 0x3f3f3f3f3f3f3f3fLL;
constexpr int mod = 1e9+7;
// constexpr int mod = 998244353;

template <class Func>
class FixPoint : Func {
public:
    explicit constexpr FixPoint(Func&& f) noexcept : Func(forward<Func>(f)) {}

    template <class... Args>
    constexpr decltype(auto) operator()(Args&&... args) const {
        return Func::operator()(*this, std::forward<Args>(args)...);
    }
};

template <class Func>
static inline constexpr decltype(auto) makeFixPoint(Func&& f) noexcept {
    return FixPoint<Func>{forward<Func>(f)};
}

template <class A, class B> inline bool chmax(A &a, const B &b) { return b > a && (a = b, true); }
template <class A, class B> inline bool chmin(A &a, const B &b) { return b < a && (a = b, true); }

template <class T> using max_heap = priority_queue<T>;
template <class T> using min_heap = priority_queue<T,vector<T>,greater<T> >;
template <class A, class B> using umap = unordered_map<A,B>;
template <class A, class B> using uset = unordered_set<A,B>;

template <class T> using Set = __gnu_pbds::tree<T, __gnu_pbds::null_type, less<T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;

template <class T> inline void bye(T x) { cout << x << '\n'; exit(0); }

constexpr int dx[] = {1, 0, -1, 0, 1, 1, -1, -1};
constexpr int dy[] = {0, -1, 0, 1, 1, -1, -1, 1};

template< typename Monoid, typename F >
struct SegmentTree {
    int sz;
    vector< Monoid > seg;

    const F f;
    const Monoid M1;
    
    SegmentTree(int n, const F f, const Monoid &M1) : f(f), M1(M1) {
        sz = 1;
        while(sz < n) sz <<= 1;
        seg.assign(2 * sz, M1);
    }

    void set(int k, const Monoid &x) {
        seg[k + sz] = x;
    }

    void build() {
        for(int k = sz - 1; k > 0; k--) {
            seg[k] = f(seg[2 * k + 0], seg[2 * k + 1]);
        }
    }

    void update(int k, const Monoid &x) {
        k += sz;
        seg[k] = x;
        while(k >>= 1) {
            seg[k] = f(seg[2 * k + 0], seg[2 * k + 1]);
        }
    }

    Monoid query(int a, int b) {
        Monoid L = M1, R = M1;
        for(a += sz, b += sz; a < b; a >>= 1, b >>= 1) {
            if(a & 1) L = f(L, seg[a++]);
            if(b & 1) R = f(seg[--b], R);
        }
        return f(L, R);
    }

    Monoid operator[](const int &k) const {
        return seg[k + sz];
    }

    template< typename C >
    int find_subtree(int a, const C &check, Monoid &M, bool type) {
        while(a < sz) {
            Monoid nxt = type ? f(seg[2 * a + type], M) : f(M, seg[2 * a + type]);
            if(check(nxt)) a = 2 * a + type;
            else M = nxt, a = 2 * a + 1 - type;
        }
        return a - sz;
    }

    template< typename C >
    int find_first(int a, const C &check) {
        Monoid L = M1;
        if(a <= 0) {
            if(check(f(L, seg[1]))) return find_subtree(1, check, L, false);
            return -1;
        }
        int b = sz;
        for(a += sz, b += sz; a < b; a >>= 1, b >>= 1) {
            if(a & 1) {
                Monoid nxt = f(L, seg[a]);
                if(check(nxt)) return find_subtree(a, check, L, false);
                L = nxt;
                ++a;
            }
        }
        return -1;
    }

    template< typename C >
    int find_last(int b, const C &check) {
        Monoid R = M1;
        if(b >= sz) {
            if(check(f(seg[1], R))) return find_subtree(1, check, R, true);
            return -1;
        }
        int a = sz;
        for(b += sz; a < b; a >>= 1, b >>= 1) {
            if(b & 1) {
                Monoid nxt = f(seg[--b], R);
                if(check(nxt)) return find_subtree(b, check, R, true);
                R = nxt;
            }
        }
        return -1;
    }
};

template< typename Monoid, typename F >
SegmentTree< Monoid, F > get_segment_tree(int N, const F& f, const Monoid& M1) {
    return {N, f, M1};
}

struct Data {
    int pos, cnt, len;
    Data(int pos, int cnt, int len) : pos(pos), cnt(cnt), len(len) {}
    Data() : pos(-1), cnt(0), len(0) {}
};

signed main() {
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);

    int n;
    string a, b;

    cin >> n >> a >> b;
    
    if (a.size() < b.size()) {
        a = string(b.size() - a.size(), '0') + a;
    } else {
        b = string(a.size() - b.size(), '0') + b;
    }

    reverse(all(a));
    reverse(all(b));

    int m = a.size();

    auto f = [](Data &l, Data &r) {
        int pos = max(l.pos, r.pos);
        int cnt = (r.pos != -1 ? l.len + r.cnt : l.cnt + r.cnt);
        int len = l.len + r.len;
        return (Data(pos, cnt, len));
    };

    auto seg = get_segment_tree(m, f, Data());

    for (int i = 0; i < m; ++i) {
        seg.set(i, Data((a[i] - '0') & (b[i] - '0') ? i : -1, (a[i] - '0') | (b[i] - '0'), 1));
    }

    seg.build();

    for (int i = 0; i < n; ++i) {
        char com;
        cin >> com;

        if (com == 'Q') {
            cout << seg.query(0, m).cnt << '\n';
        } else if (com == 'A') {
            int k;
            cin >> k;
            a[k] = (a[k] == '1' ? '0' : '1');
            seg.update(k, Data(a[k] == b[k] ? i : -1, (a[k] - '0') | (b[k] - '0'), 1));
        } else {
            int k;
            cin >> k;
            b[k] = (b[k] == '1' ? '0' : '1');
            seg.update(k, Data(a[k] == b[k] ? i : -1, (a[k] - '0') | (b[k] - '0'), 1));
        }
        // for (int j = 0; j < m; ++j) {
        //     cout << seg[j].cnt;
        //     cout << seg.query(j, j + 1).cnt;
        // }
        // cout << endl;
    }

    return(0);
}


