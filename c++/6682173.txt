#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline double time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

constexpr ll mod = 1e9+7;

struct mat{
    ll x[2][2];
    friend mat operator*(mat &a,mat & b){
        mat c;
        for(int i=0;i<2;i++){
            for(int j=0;j<2;j++){
                c.x[i][j]=0;
                for(int k=0;k<2;k++){
                    (c.x[i][j]+=a.x[i][k]*b.x[k][j]%mod)%=mod;
                }
            }
        }
        return c;
    }
};

mat x={1,1,1,0};

mat modexp(mat x,mat ans,ll n){
    while(n){
        if(n%2)ans=x*ans;
        x=x*x;
        n/=2;
    }
    return ans;
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    ll k; cin >> k;
    ll L = 1, R = 2e9;
    auto cal=[&](ll x)->ll{
        ll sum = 0;
        if(x == 1){
            sum = 0;
        }
        else if(x == 2){
            sum = 1;
        }
        else if(x == 3){
            sum = 2;
        }
        else{
            ll mm = x;
            if(mm % 2 == 0){
                sum += mm/2;
            }
            mm--;
            sum += (1+mm/2)*(mm/2);
        }
        return sum;
    };
    while(R-L>1){
        ll mid = (L+R)/2;
        ll sum = cal(mid);
        if(sum < k){
            L = mid;
        }
        else{
            R = mid;
        }
    }
    ll xx = cal(L);
    k -= xx;

    auto fib=[&](ll n)->ll{
        mat ans;
        ans.x[0][0] = 1; ans.x[1][0] = 1;
        ans = modexp(x, ans, n-1);
        return ans.x[0][0];
    };

    if((R/2+1)/2 >= k){
        ll i = 2*k-1;
        ll j = R-i;
        cout << fib(i)*fib(j)%mod << endl;
    }
    else{
        k -= (R/2+1)/2;
        ll i = R/2/2*2-2*(k-1);
        ll j = R-i;
        cout << fib(i)*fib(j)%mod << endl;
    }
}

