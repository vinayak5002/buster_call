#include <vector>
#include <iostream>
#include <string>
#include <utility>
#include <queue>

using namespace std;
using ll = long double ;
using vec_ll = vector<ll>;
using vec_i = vector<int>;


bool mat[100000][100000];
enum class node_color{
    white, gray, black
};
node_color color[100000];
int n;
queue<int> que;


void dfs_init(int p2){
    for(int i=0; i<n; ++i){
        if(mat[que.front()][i] && color[i]==node_color::white){
            que.push(i);
            color[i]=node_color::gray;
            if(i==p2)return;
        }
    }
    que.pop();
    color[que.front()]=node_color::black;
} 
bool dfs(int p1, int p2){
    for(int i=0; i<n; ++i){
        color[i]=node_color::white;
    }
    que.push(p1);
    color[p1]=node_color::gray;
    while(color[p2]==node_color::white && !que.empty()){
        dfs_init(p2);
    }
    return color[p2]!=node_color::white;
}
int main(){
    cin>>n;
    int m;
    cin>>m;
    for(int i=0; i<n; ++i){
        for(int k=0; k<n; ++k){
            mat[i][k]=false;
        }
    }
    for(int i=0; i<m; ++i){
        int p1, p2;
        cin>>p1>>p2;
        mat[p1][p2]=true;
        mat[p2][p1]=true;
    }
    int q;
    cin>>q;
    for(int i=0; i<q; ++i){
        int p1, p2;
        cin>>p1>>p2;
        cout<<(dfs(p1, p2) ? "yes" : "no")<<endl;
    }
}
