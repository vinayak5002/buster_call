#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define BEGIN_STACK_EXTEND(size)                                                                                  \
    void *stack_extend_memory_ = malloc(size);                                                                    \
    void *stack_extend_origin_memory_;                                                                            \
    char *stack_extend_dummy_memory_ = (char *)alloca((1 + (int)(((long long)stack_extend_memory_) & 127)) * 16); \
    *stack_extend_dummy_memory_ = 0;                                                                              \
    asm volatile("mov %%rsp, %%rbx\nmov %%rax, %%rsp"                                                             \
                 : "=b"(stack_extend_origin_memory_)                                                              \
                 : "a"((char *)stack_extend_memory_ + (size)-1024));
#define END_STACK_EXTEND                                                 \
    asm volatile("mov %%rax, %%rsp" ::"a"(stack_extend_origin_memory_)); \
    free(stack_extend_memory_);
#define mod 1000000007ll
#define loop(i, n) for (int i = 0; i < n; i++)
#define flagcount(bit) __builtin_popcount(bit)
#define flag(x) (1ll << x)
#define flagadd(bit, x) bit |= flag(x)
#define flagpop(bit, x) bit &= ~flag(x)
#define flagon(bit, i) bit &flag(i)
#define flagoff(bit, i) !(bit & (1ll << i))
#define all(v) v.begin(), v.end()
#define putout(a) cout << a << '\n'
#define Sum(v) accumulate(all(v), 0ll)
template <typename T>
bool chmax(T &a, const T &b)
{
    if (a < b)
    {
        a = b; // aをbで更新
        return true;
    }
    return false;
}
template <typename T>
bool chmin(T &a, const T &b)
{
    if (a > b)
    {
        a = b; // aをbで更新
        return true;
    }
    return false;
}
void AS(ll X, ll L, ll R) { assert(L <= X && X <= R); }
//場合によって使い分ける
const ll dx[4] = {1, 0, -1, 0};
const ll dy[4] = {0, 1, 0, -1};
// const ll dx[8] = {1, 1, 0, -1, -1, -1, 0, 1};
// const ll dy[8] = {0, 1, 1, 1, 0, -1, -1, -1};
// cout << fixed << setprecision(10);
// vector<vector<ll>> field(h, vector<ll>(w));
#include <cctype>
typedef string::const_iterator State;
class ParseError
{
};
ll expression(State &begin);
ll term(State &begin);
void consume(State &begin);
ll factor(State &begin);
ll number(State &begin);
// 四則演算の式をパースして、その評価結果を返す。
ll expression(State &begin)
{
    ll ret = term(begin);
    while (true)
    {
        if ((*begin) == '+')
        {
            begin++;
            ret += term(begin);
        }
        else if ((*begin) == '-')
        {
            begin++;
            ret -= term(begin);
        }
        else
            break;
    }
    return ret;
}

// 乗算除算の式をパースして、その評価結果を返す。
ll term(State &begin)
{
    ll ret = number(begin);
    while (true)
    {
        if ((*begin) == '*')
        {
            begin++;
            ret *= factor(begin);
        }
        else if ((*begin) == '/')
        {
            begin++;
            ret /= factor(begin);
        }
        else
            break;
    }
    return ret;
}
// beginがexpectedを指していたらbeginを一つ進める。
void consume(State &begin, char expected)
{
    if (*begin == expected)
    {
        begin++;
    }
    else
    {
        cerr << "Expected '" << expected << "' but got '" << *begin << "'"
             << endl;
        cerr << "Rest string is '";
        while (*begin)
        {
            cerr << *begin++;
        }
        cerr << "'" << endl;
        throw ParseError();
    }
}
ll factor(State &begin)
{
    if ((*begin) == '(')
    {
        consume(begin, '(');
        ll ret = expression(begin);
        consume(begin, ')');
        return ret;
    }
    else
    {
        return number(begin);
    }
}
// 数字の列をパースして、その数を返す。
ll number(State &begin)
{
    ll ret = 0;
    while (isdigit(*begin))
    {
        ret *= 10;
        ret += (ll)(*begin - '0');
        begin++;
    }
    return ret;
}
int main()
{
    ll N;
    cin >> N;
    cin.ignore();
    loop(i, N)
    {
        string S;
        getline(cin, S);
        State begin = S.begin();
        ll ans = expression(begin);
        putout(ans);
    }
    return 0;
}
