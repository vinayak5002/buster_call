#include <bits/stdc++.h>
//#include <atcoder/all>
using namespace std;

#define all(x) (x).begin(),(x).end()
#define print(x) cout << (x) << '\n'
typedef long long ll;
typedef long double ld;
using P = pair<int,int>;
using pll = pair<ll,ll>;
using Graph = vector<vector<int>>;

//const ll MOD = 1000000007;
//const ll MOD = 998244353;

template <typename T> inline bool chmax(T &a, T b) {return a < b ? a = b, true : false;}
template <typename T> inline bool chmin(T &a, T b) {return a > b ? a = b, true : false;}

template <typename T>
void vin(vector<T> &v) {
    int l = v.size();
    for(int i = 0; i < l; i++) cin >> v[i];
}

template <typename T>
void vout(vector<T> &v) {
    int l = v.size();
    for(int i = 0; i < l; i++) cout << v[i] << (i < l - 1 ? ' ' : '\n');
}

vector<complex<double>> fft(vector<complex<double>> a, bool inverse = false) {
    int n = a.size();
    int h = 0; // h = log_2(n)
    for(int i = 0; 1 << i < n; i++) h++;
    for(int i = 0; i < n; i++) {
        int j = 0;
        for(int k = 0; k < h; k++) j |= (i >> k & 1) << (h - 1 - k);
        if (i < j) swap(a[i], a[j]);
    }

    for(int b = 1; b < n; b *= 2) {
        for(int j = 0; j < b; j++) {

            complex<double> w = polar(1.0, (2 * M_PI) / (2 * b) * j * (inverse ? 1 : -1));
            for(int k = 0; k < n; k += b * 2) {
                complex<double> s = a[j + k];
                complex<double> t = a[j + k + b] * w;
                a[j + k] = s + t;
                a[j + k + b] = s - t;
            }
        }
    }

    if(inverse) for(int i = 0; i < n; i++) a[i] /= n;
    return a;
}

vector<complex<double>> fft(vector<double> a, bool inverse = false) {
    vector<complex<double>> a_complex(a.size());
    for(int i = 0; i < a.size(); i++) a_complex[i] = complex<double>(a[i], 0);
    return fft(a_complex, inverse);
}
 
vector<double> convolve(vector<double> a, vector<double> b) {
    int s = a.size() + b.size() - 1;
    int t = 1;
    while (t < s) t *= 2;
    a.resize(t);
    b.resize(t);
    vector<complex<double>> A = fft(a);
    vector<complex<double>> B = fft(b);
    for(int i = 0; i < t; i++) {
        A[i] *= B[i];
    }
    A = fft(A, true);
    a.resize(s);
    for (int i = 0; i < s; i++) a[i] = A[i].real(); 
    return a;
}

int main() {
    cin.tie(0); cout.tie(0);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(18);

    string A, B;
    cin >> A >> B;
    int la = A.length();
    int lb = B.length();
    int cnt = 0;
    if(A[0] == '-') {
        A = A.substr(1, la - 1);
        la--;
        cnt++;
    } 
    if(B[0] == '-') {
        B = B.substr(1, lb - 1);
        lb--;
        cnt++;
    }
    vector<double> a(la), b(lb);
    for(int i = 0; i < la; i++) a[i] = A[i] - '0';
    for(int i = 0; i < lb; i++) b[i] = B[i] - '0';

    vector<double> C = convolve(a, b);
    int lc = C.size();
    vector<int> d(lc);
    for(int i = 0; i < lc; i++) d[i] = (int) (C[i] + 0.05);

    string ans = "";
    int nex = 0;
    for(int i = lc - 1; i >= 0; i--) {
        nex += d[i];
        ans += char('0' + nex % 10);
        nex /= 10;
    }
    while(nex > 0) {
        ans += char('0' + nex % 10);
        nex /= 10;
    }
    if(cnt % 2) ans += '-';
    reverse(all(ans));
    print(ans);
    return 0;
}
