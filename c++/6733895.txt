#include <algorithm>
// #include <atcoder/all>
// #include <boost/multiprecision/cpp_int.hpp>
// #include <boost/numeric/ublas/io.hpp>
// #include <boost/numeric/ublas/matrix.hpp>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <vector>

// #include <ext/rope>
#pragma GCC optimize("O3")
using namespace std;
using ll = long long;
// using namespace atcoder;
// using namespace boost::numeric::ublas;
// using mint = modint1000000007;
// using namespace boost::multiprecision;
// using namespace __gnu_cxx;

// rep-------------------------------------------------------------------
#define overload4(_1, _2, _3, _4, name, ...) name
#define overload3(_1, _2, _3, name, ...) name
#define rep1(i, n) for (ll i = 0; i < n; ++i)
#define rep2(i, a, b) for (ll i = a; i < b; ++i)
#define rep3(i, a, b, c) for (ll i = a, _bb = b; (c > 0 && i < _bb) || (c < 0 && i > _bb); i += c)
#define rep(...) overload4(__VA_ARGS__, rep3, rep2, rep1)(__VA_ARGS__)
#define each1(i, a) for (auto &&i : a)
#define each2(x, y, a) for (auto &&[x, y] : a)
#define each3(x, y, z, a) for (auto &&[x, y, z] : a)
#define each(...) overload4(__VA_ARGS__, each3, each2, each1)(__VA_ARGS__)
// ----------------------------------------------------------------------
#define MAX 400000

int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    while (true) {
        ll b;
        cin >> b;
        if (b == 0)
            break;
        rep(i, MAX, 0, -1) {
            ll k = 2 * b - i * i + i;
            if (k > 0 and k % (2 * i) == 0) {
                cout << k / (2 * i) << " " << i << '\n';
                break;
            }
        }
    }
}
