#include <bits/stdc++.h>
////#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vd = vector<double>;
using vvd = vector<vd>;
using vvvd = vector<vvd>;
#define all(A) A.begin(),A.end()
#define ALL(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}

ll mod = 1e9+7;

vector<vector<vector<ll>>> matrixpow;
void prematrixpow(vector<vll> matrix) {
	ll N = matrix.size();
	matrixpow.assign(70, vector<vll>(N, vll(N)));
	rep(h, N) {
		rep(w, N) {
			matrixpow[0][h][w] = matrix[h][w];
		}
	}
	rep(k, 69) {
		rep(h, N) {
			rep(w, N) {
				ll S = 0;
				rep(i, N) {
					S += matrixpow[k][h][i] * matrixpow[k][i][w];
					S %= mod;
				}
				matrixpow[k + 1][h][w] = S;
			}
		}
	}

}
vector<vll> modmatrixpow(ll K) {
	ll P = K;
	ll N = matrixpow[0].size();
	vector<vll> res(N, vll(N, 0));
	rep(i, N) {
		res[i][i] = 1;
	}

	rep(j, 70) {
		if (P % 2 != 0) {
			vector<vll> res2(N, vll(N, 0));

			rep(h, N) {
				rep(w, N) {
					ll S = 0;
					rep(i, N) {
						S += matrixpow[j][h][i] * res[i][w];
						S %= mod;
					}
					res2[h][w] = S;
				}
			}
			res = res2;
		}
		P /= 2;
	}

	return res;


}
int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    

    ll K;
    cin>>K;
    ll L=0,R=2e9+10;

    while(R-L>1){
        ll mid=(R+L)/2;
        if(mid*(mid+1)<K)L=mid;
        else R=mid;
    }
    K-=L*(L+1);
    

    vvll F={{1,1},{1,0}};
    prematrixpow(F);

    ll f=L*2+(K+L)/(L+1);
    if(K>L+1){
        K-=(L+1);
    }
    ll g;
    if(K<=(L+2)/2){
        g=2*K-1;
    }
    else{
        g=L+1-(R%2)-(K-(L+4)/2)*2;
    }
    auto ff=modmatrixpow(g);
    auto gg=modmatrixpow((f-g+1));
    cout<<(ff[0][0]*gg[0][0])%mod<<endl;

}
