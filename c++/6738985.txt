#include<bits/stdc++.h>
#define int ll
#define rep(i, N) for(int i = 0; i < (int)(N); ++i)
#define rep1(i, N) for(int i = 1; i <= (int)(N); ++i)
#define per(i, N) for(int i = (N)-1; i >= 0; --i)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define bit(n, k) ((n) >> (k))
#define pcnt(n) (__builtin_popcount(n))
#define TakAo(ans) ans ? cout << "Takahashi\n" : cout << "Aoki\n"
#define YesNo(ans) ans ? cout << "Yes\n" : cout << "No\n"
#define endl '\n'
#define fi first
#define se second
#define mkpr make_pair
#define mktpl make_tuple
#define eb emplace_back
#define debug(x) cerr << "(" << __LINE__ << ")" << #x << ": " << (x) << endl

using namespace std;
using ll = int64_t;
using ull = uint64_t;
using ld = long double;
using point = struct{ ll x, y; };
using pointld = struct{ ld x, y; };
using State = string::const_iterator;
template<class T1, class T2> istream &operator>>(istream &is, pair<T1, T2> &p){
    is >> p.first >> p.second; return is;
}
template<class T1, class T2> ostream &operator<<(ostream &os, pair<T1, T2> &p){
    os << p.first << " " << p.second; return os;
}
template<class T> using max_heap = priority_queue<T>;
template<class T> using min_heap = priority_queue<T, vector<T>, greater<T>>;
template<class T> using vec = vector<T>;
template<class T> using vvec = vec<vec<T>>;
template<class T> using vvvec = vec<vvec<T>>;
template<class T> using vvvvec = vvec<vvec<T>>;

constexpr ld EPS = 1e-10;
constexpr int INF = 1001001001;
constexpr ll LINF = 1001001001001001001ll;
constexpr ll MOD = (0) ? 998244353 : 1e9+7;
constexpr int NIL = -1;
constexpr int pm[2] = {1, -1};
constexpr int dy[4] = {0, 1, 0, -1};
constexpr int dx[4] = {1, 0, -1, 0};

ll cel(ll a, ll b){ return (a + b - 1) / b;}
ll Gcd(ll a, ll b){ return b ? Gcd(b, a % b) : abs(a);}
template<class T> T powi(T x, ll exp){
    return exp > 0 ? (exp & 1 ? x : 1) * powi(x * x, exp >> 1) : x / x;
}
ll modpow(ll x, ll exp, ll mod){
    x %= mod;
    return exp > 0 ? (exp & 1 ? x : 1) * modpow(x * x, exp >> 1, mod) % mod : 1;
}
template<class T> bool chmin(T &a, T b){ return a > b ? (a = b, true) : 0;}
template<class T>bool chmax(T &a, T b){ return a < b ? (a = b, true) : 0;}

using Pair = pair<int, int>;
using Tpl = tuple<int, int, int>;
 
class mint{
    int64_t val;
    static const int64_t mod = 1e9+7;

    public:
    mint(){}
    mint(int64_t x) : val((x % mod + mod) % mod) {}

    int64_t getVal(){ return val; }

    mint operator-() const {
        return mint(-val);
    }
    mint& operator+=(const mint& a){
        if ((val += a.val) >= mod) val -= mod; return *this;
    }
    mint& operator-=(const mint& a){
        if ((val += mod - a.val) >= mod) val -= mod; return *this;
    }
    mint& operator*=(const mint& a){
        (val *= a.val) %= mod; return *this;
    }
    mint& operator/=(const mint& a){
        val *= a.inv().val; return *this;
    }
    mint operator+(const mint& a) const {
        mint res(*this); return res += a;
    }
    mint operator-(const mint& a) const {
        mint res(*this); return res -= a;
    }
    mint operator*(const mint& a) const {
        mint res(*this); return res *= a;
    }
    mint operator/(const mint& a) const {
        mint res(*this); return res /= a;
    }

    mint inv() const {
        int64_t a = val, b = mod, y = 1, x = 0;
        while(b){
            int64_t t = a / b;
            a -= t * b; swap(a, b);
            y -= t * x; swap(y, x);
        }
        return mint((y % mod + mod) % mod);
    }

    friend istream &operator>>(istream &is, mint &a){
        is >> a.val; return is;
    }
    friend ostream &operator<<(ostream &os, mint &a){
        os << a.val; return os;
    }
};

void Main(){
    mint a; cin >> a;
    int N; cin >> N;
    cout << modpow(a.getVal(), N, 1e9+7) << endl;
}
 
signed main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    Main();
    return 0;
}
