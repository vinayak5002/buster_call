#include<bits/stdc++.h>
using namespace std;

int main(){
	int w, h, gy, gx, sy, sx;
	cin >> w >> h;
	vector<string> c(h);
	for (int i = 0; i < h; ++i) {
		cin >> c[i];
		for (int j = 0; j < w; ++j) {
			if (c[i][j] == 'g') gy = i, gx = j;
			if (c[i][j] == 's') sy = i, sx = j;
		}
	}
	
	int dx[] = {1, 0, -1, 0};
	int dy[] = {0, -1, 0, 1};

	vector<vector<int> > dist1(h, vector<int>(w, 1e9));
	vector<vector<int> > dist2(h, vector<int>(w, 1e9));
		
	queue<pair<int, int> > que;

	dist1[gy][gx] = 0;
	que.emplace(gy, gx);

	while (!que.empty()) {
		int now_y, now_x;
		tie(now_y, now_x) = que.front();
		que.pop();
		for (int i = 0; i < 4; ++i) {
			int next_y = now_y + dy[i];
			int next_x = now_x + dx[i];
			if ((c[next_y][next_x] == '.' || c[next_y][next_x] == 's') && dist1[next_y][next_x] > dist1[now_y][now_x] + 1) {
				dist1[next_y][next_x] = dist1[now_y][now_x] + 1;
				que.emplace(next_y, next_x);
			}
		}		
	}

	for (int i = 0; i < h; ++i) {
		for (int j = 0; j < w; ++j) {
			if (c[i][j] == '*') {
				dist2[i][j] = 0;
				que.emplace(i, j);
			}
		}
	}

	while (!que.empty()) {
		int now_y, now_x;
		tie(now_y, now_x) = que.front();
		que.pop();
		for (int i = 0; i < 4; ++i) {
			int next_y = now_y + dy[i];
			int next_x = now_x + dx[i];
			if ((c[next_y][next_x] == '.' || c[next_y][next_x] == 's') && dist2[next_y][next_x] > dist2[now_y][now_x] + 1) {
				dist2[next_y][next_x] = dist2[now_y][now_x] + 1;
				que.emplace(next_y, next_x);
			}
		}		
	}

	long double low = 0, high = pow(h * w, 2) * 10;
	for (int loop = 0; loop < 50; ++loop) {
		long double mid = (high + low) / 2;
		int cnt = 0;
		long double sum = 0;
		for (int i = 0; i < h; ++i) {
			for (int j = 0; j < w; ++j) {
				if (c[i][j] == '.' || c[i][j] == 's') {
					++cnt;
					sum += min(dist2[i][j] + mid, (long double) dist1[i][j]);
				}
			}
		}
		if (sum / cnt < mid) high = mid;
		else low = mid;
	}
	
	cout << fixed << setprecision(10) << min((long double) dist1[sy][sx], dist2[sy][sx] + low) << '\n';

	return 0;
}


