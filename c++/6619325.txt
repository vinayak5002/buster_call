#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

#ifndef MAKE_VECTOR_HPP
#define MAKE_VECTOR_HPP

#include <cassert>
#include <cstdint>
#include <vector>

template <class T, uint64_t N>
auto make_vector_(const uint64_t *dim, T e) {
  if constexpr (N == 1) {
    return std::vector<T>(*dim, e);
  } else {
    auto v = make_vector_<T, N - 1>(dim + 1, e);
    return std::vector<decltype(v)>(*dim, v);
  }
};
template <class T, uint64_t N>
auto make_vector(const uint64_t (&dim)[N], const T &e) {
  assert(N > 0);
  return make_vector_<T, N>(dim, e);
};

#endif

#include <bits/stdc++.h>

#define _overload(_1, _2, _3, _4, name, ...) name
#define _rep1(Itr, N) _rep3(Itr, 0, N, 1)
#define _rep2(Itr, a, b) _rep3(Itr, a, b, 1)
#define _rep3(Itr, a, b, step) for (i64 Itr = a; Itr < b; Itr += step)
#define repeat(...) _overload(__VA_ARGS__, _rep3, _rep2, _rep1)(__VA_ARGS__)
#define rep(...) repeat(__VA_ARGS__)

#define ALL(X) begin(X), end(X)

using namespace std;
using i64 = int64_t;
using u64 = uint64_t;

i64 solve(i64 w, i64 h) {
  vector<string> mp(h);
  for (auto &v : mp) cin >> v;
  vector<vector<i64>> bits(h, vector<i64>(w, 0));

  i64 cnt = 0;
  rep(i, h) {
    rep(j, w) {
      if (mp[i][j] == '*') {
        bits[i][j] = 1 << cnt;
        cnt++;
      }
    }
  }

  i64 sx, sy;
  rep(i, h) {
    rep(j, w) {
      if (mp[i][j] == 'o') {
        sy = i;
        sx = j;
      }
    }
  }

  const i64 dy[] = {1, 0, -1, 0};
  const i64 dx[] = {0, 1, 0, -1};
  const i64 inf = 1ll << 60;
  auto min_cost = make_vector({h, w, 1ll << cnt}, inf);
  struct State {
    i64 x, y;
    i64 bit;
    State(i64 x, i64 y, i64 bit) : x(x), y(y), bit(bit){};
  };
  queue<State> que;
  que.push(State(sx, sy, 0));
  min_cost[sy][sx][0] = 0;
  while (!que.empty()) {
    auto now = que.front();
    que.pop();
    rep(k, 4) {
      i64 nx = now.x + dx[k];
      i64 ny = now.y + dy[k];
      if (nx < 0 || nx >= w || ny < 0 || ny >= h) continue;
      if (mp[ny][nx] == 'x') continue;
      i64 nb = now.bit | bits[ny][nx];

      if (min_cost[ny][nx][nb] >= inf) {
        min_cost[ny][nx][nb] = min_cost[now.y][now.x][now.bit] + 1;
        que.push(State(nx, ny, nb));
      }
    }
  }

  i64 ans = inf;
  rep(i, h) {
    rep(j, w) {
      //
      ans = min(min_cost[i][j][(1 << cnt) - 1], ans);
    }
  }

  if (ans >= inf)
    return -1;
  else
    return ans;
}

int main() {
  cin.tie(nullptr);
  ios::sync_with_stdio(false);

  i64 w, h;
  while (cin >> w >> h, w > 0) {
    cout << solve(w, h) << endl;
  }

  return 0;
}
