#include <iostream>
#include <vector>
#include <algorithm>
#include <deque>
#include <queue>
#include <string>
#include <iomanip>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <utility>
#include <stack>
#include <random>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <assert.h>
// #if __has_include(<atcoder/all>)
// #include <atcoder/all>
// using namespace atcoder;
// #endif
using namespace std;
using ll=long long;
#define read(x) cin>>(x);
#define readll(x) ll (x);cin>>(x);
#define readS(x) string (x);cin>>(x);
#define readvll(x,N) vector<ll> (x)((N));for(int i=0;i<(N);i++){cin>>(x)[i];}
#define rep(i,N) for(ll (i)=0;(i)<(N);(i)++)
#define rep2d(i,j,H,W) for(ll (i)=0;(i)<(H);(i)++)for(ll (j)=0;(j)<(W);j++)
#define is_in(x,y) (0<=(x) && (x)<H && 0<=(y) && (y)<W)
#define yn {cout<<"Yes"<<endl;}else{cout<<"No"<<endl;}
inline ll powll(ll x,ll n){ll r=1;while(n>0){if(n&1){r*=x;};x*=x;n>>=1;};return r;}

struct dsu {
  public:
    dsu() : _n(0) {}
    explicit dsu(int n) : _n(n), parent_or_size(n, -1) {}

    int merge(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        int x = leader(a), y = leader(b);
        if (x == y) return x;
        if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);
        parent_or_size[x] += parent_or_size[y];
        parent_or_size[y] = x;
        return x;
    }

    bool same(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        return leader(a) == leader(b);
    }

    int leader(int a) {
        assert(0 <= a && a < _n);
        if (parent_or_size[a] < 0) return a;
        return parent_or_size[a] = leader(parent_or_size[a]);
    }

    int size(int a) {
        assert(0 <= a && a < _n);
        return -parent_or_size[leader(a)];
    }

    std::vector<std::vector<int>> groups() {
        std::vector<int> leader_buf(_n), group_size(_n);
        for (int i = 0; i < _n; i++) {
            leader_buf[i] = leader(i);
            group_size[leader_buf[i]]++;
        }
        std::vector<std::vector<int>> result(_n);
        for (int i = 0; i < _n; i++) {
            result[i].reserve(group_size[i]);
        }
        for (int i = 0; i < _n; i++) {
            result[leader_buf[i]].push_back(i);
        }
        result.erase(
            std::remove_if(result.begin(), result.end(),
                           [&](const std::vector<int>& v) { return v.empty(); }),
            result.end());
        return result;
    }

  private:
    int _n;
    // root node: -1 * component size
    // otherwise: parent
    std::vector<int> parent_or_size;
};

void solve(ll N,ll M){
  //cerr<<N<<" "<<M<<endl;
  //vector<pair<ll,ll>> H(N);
  ll K=1000000;
  vector<vector<ll>> A(K);
  for(ll i=0;i<N;i++){
    ll h;
    cin>>h;
    A[h-1].push_back(i);
    // cin>>H[i].first;
    // H[i].second=i;
  }
  vector<vector<ll>> d(N,vector<ll>(N,-1));
  for(ll i=0;i<M;i++){
    ll a,b,c;
    cin>>a>>b>>c;
    a--;b--;
    d[a][b]=c;
    d[b][a]=c;
  }
  ll ans=0;
  dsu uf(N);
  vector<ll> ps;
  ps.reserve(N);
  //cerr<<"start"<<endl;
  for(ll i=K-1;i>=0;i--){
    vector<pair<ll,pair<ll,ll>>> edge;
    for(ll j:A[i]){
      for(ll l:ps){
        //cerr<<j<<" "<<l<<endl;
        if(!uf.same(j,l) && d[j][l]!=-1){
          edge.push_back(make_pair(d[j][l],make_pair(j,l)));
        }
      }
      for(ll l:A[i]){
        if(!uf.same(j,l) && d[j][l]!=-1){
          edge.push_back(make_pair(d[j][l],make_pair(j,l)));
        }
      }
    }
    sort(edge.begin(),edge.end());
    for(pair<ll,pair<ll,ll>> j:edge){
      if(!uf.same(j.second.first,j.second.second)){
        ans+=j.first;
        uf.merge(j.second.first,j.second.second);
      }
    }
    for(ll j:A[i]){
      ps.push_back(j);
    }
  }
  //cerr<<"a"<<endl;
  if(uf.size(0)==N){
    cout<<ans<<endl;
  }else{
    cout<<0<<endl;
  }
}

int main(){
  ll N,M;
  while(1){
    cin>>N>>M;
    if(N==0 && M==0){
      break;
    }
    solve(N,M);
  }
}

