#include <bits/stdc++.h>

using namespace std;

using ll = long long;

#define rep(i, n) for (int i = 0; (i) < (int)(n); (i)++)

// グラフ
using Node = int;              // ノード番号
using EdgeWeight = long long;  // 枝の重み

// エッジ重みの最大値
constexpr EdgeWeight kEdgeWeightInf = numeric_limits<EdgeWeight>::max() >> 16;  // 2^32を足し引きしてもオーバーフローしない十分大きな数

typedef struct structEdge {
   structEdge(const Node from_node, const Node to_node, const EdgeWeight edge_weight) {
      from = from_node;
      to = to_node;
      weight = edge_weight;
   }

   structEdge(const structEdge& edge) {
      from = edge.from;
      to = edge.to;
      weight = edge.weight;
   }

   bool operator<(const structEdge& right) const {
      return weight < right.weight;
   }

   Node from;
   Node to;
   EdgeWeight weight;
} Edge;

// Graph(隣接リスト)
// ノード番号は1-indexedで保持
class Graph {
  public:
   Graph();

   // Nノードで初期化
   explicit Graph(const size_t N);

   // ノードの追加
   // @retval 追加したノードのノード番号
   Node AddNode();

   // ノード数を返す
   size_t NodeCount() const {
      return node_list_.size();
   }

   // 無向エッジの追加
   // @param node_1, node_2: 枝の端点となるノード
   // @param weight エッジの重み(default: 1)
   void AddUndirectedEdge(const Node node_1, const Node node_2, const EdgeWeight weight = 1);

   // 有向エッジの追加
   // @param from, to: 枝の始点、終点となるノード
   // @param weight エッジの重み(default: 1)
   void AddDirectedEdge(const Node from, const Node to, const EdgeWeight weight = 1);
   pair<bool, vector<Node>> TopologicalSort() const;

  private:
   vector<Node> node_list_;              // Nodeのリスト
   vector<vector<Edge>> adj_to_list_;    // 隣接リスト(接続先): NodeにつながっているEdgeのリスト
   vector<vector<Edge>> adj_from_list_;  // 隣接リスト(接続元): NodeにつながっているEdgeのリスト
};

Graph::Graph()
    : adj_to_list_(1, vector<Edge>()),   // 1-indexにするためダミーノードを追加
      adj_from_list_(1, vector<Edge>())  // 1-indexにするためダミーノードを追加
{
}

Graph::Graph(const size_t N)
    : adj_to_list_(1, vector<Edge>()),   // 1-indexにするためダミーノードを追加
      adj_from_list_(1, vector<Edge>())  // 1-indexにするためダミーノードを追加
{
   for (size_t i = 0; i < N; i++) {
      AddNode();
   }
}

Node Graph::AddNode() {
   Node node = (Node)node_list_.size() + 1;  // Node番号は1-indexed

   node_list_.push_back(node);
   adj_to_list_.push_back(vector<Edge>());
   adj_from_list_.push_back(vector<Edge>());

   return node;
}

void Graph::AddUndirectedEdge(const Node node_1, const Node node_2, const EdgeWeight weight) {
   adj_to_list_[node_1].emplace_back(node_1, node_2, weight);
   adj_to_list_[node_2].emplace_back(node_2, node_1, weight);

   adj_from_list_[node_1].emplace_back(node_2, node_1, weight);
   adj_from_list_[node_2].emplace_back(node_1, node_2, weight);
}

void Graph::AddDirectedEdge(const Node from, const Node to, const EdgeWeight weight) {
   Edge edge(from, to, weight);
   adj_to_list_[from].push_back(edge);
   adj_from_list_[to].push_back(edge);
}

// 頂点集合, エッジ集合からトポロジカルソートを行う
// @param node_list 頂点集合
// @param edge_list エッジ集合
// @param sorted_list : トポロジカルソート後のノード番号リスト
// @retval true トポロジカルソート完了, false DAGでなくトポロジカルソート不可能
// @note 計算量: O(E + N)
pair<bool, vector<Node>> TopologicalSort(const vector<Node>& node_list, const vector<Edge>& edge_list) {
   const size_t N = node_list.size();
   vector<Node> sorted_list;
   sorted_list.reserve(N);

   // ノードの入力次数
   vector<size_t> in_degree(N + 1, 0);

   // 隣接リスト(エッジインデックスのリスト)を作成
   vector<vector<size_t>> edge_index_list(N + 1, vector<size_t>());
   const size_t E = edge_list.size();

   rep(i, E) {
      const auto [from, to, dist] = edge_list[i];

      in_degree[to]++;
      edge_index_list[from].push_back(i);
   }

   // エッジが残っているかのフラグ
   vector<bool> edge_exist(E, true);

   // 入力次数が0のノードが始点になる
   queue<Node> node_queue;

   for (const Node node : node_list) {
      if (in_degree[node] == 0) {
         node_queue.push(node);
      }
   }

   while (!node_queue.empty()) {
      Node node = node_queue.front();
      node_queue.pop();

      sorted_list.push_back(node);

      for (size_t edge_index : edge_index_list[node]) {
         if (!edge_exist[edge_index]) {
            continue;
         }

         edge_exist[edge_index] = false;

         const Edge& edge = edge_list[edge_index];
         in_degree[edge.to]--;

         if (in_degree[edge.to] == 0) {
            node_queue.push(edge.to);
         }
      }
   }

   bool all_edge_deleted = true;

   rep(i, E) {
      if (edge_exist[i]) {
         all_edge_deleted = false;
         break;
      }
   }

   return {all_edge_deleted, sorted_list};
}

pair<bool, vector<Node>> Graph::TopologicalSort() const {
   vector<Edge> edge_list;

   for (const Node node : node_list_) {
      edge_list.insert(edge_list.end(), adj_to_list_[node].begin(), adj_to_list_[node].end());
   }

   return ::TopologicalSort(node_list_, edge_list);
}

int main() {
   int V, E;
   cin >> V >> E;

   Graph graph(V);

   rep(i, E) {
      int s, t;
      cin >> s >> t;

      s++;
      t++;

      graph.AddDirectedEdge(s, t);
   }

   auto [dag, sorted] = graph.TopologicalSort();

   for (auto n : sorted) {
      cout << (n - 1) << endl;
   }

   return 0;
}

