#include <iostream>
#include <algorithm>
#include <vector>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <deque>
using namespace std;

using lint = long long;
using ulint = unsigned long long;
template<class T> using vec = vector<T>;

#define rep(i,n) for(int i = 0; i < n; i++)
#define repr(i,n) for(int i = n - 1; i >= 0; i--)
#define repi(i,ini,n) for(int i = ini; i < n; i++)
#define repir(i,ini,n) for(int i = n - 1; i >= ini; i--)
#define repb(i,mn,mx) for(int i = mn; i <= mx; i++)
#define repbr(i,mn,mx) for(int i = mx; i >= mn; i--)
#define all(a) begin(a),end(a)
#define rall(a) rbegin(a),rend(a)

template<class T> auto chmax(T& a, const T b) { return a = max(a, b); }
template<class T> auto chmin(T& a, const T b) { return a = min(a, b); }

template<class It>
auto acc(It begin, It end) -> decltype(*begin) { return accumulate(begin, end, 0); }

constexpr lint inf = 1100100100100100100ll;
constexpr int infi = 1100100100;

constexpr int mod = 1'000'000'007;

template<class T>
auto div2(T a, T b) {
	return (a + b - 1) / b;
}

struct uf {
	vec<int> p;
	uf(lint n) : p(n) {
		rep(i, n) {
			p[i] = i;
		}
	}
	lint rt(lint n) { return p[n] == n ? n : p[n] = rt(p[n]); }
	bool eq(lint n, lint m) { return rt(n) == rt(m); }
	void un(lint n, lint m) {
		if (rt(n) != rt(m)) {
			p[rt(n)] = rt(m);
		}
	}
};

struct xy {
	int x, y;
};


bool done[310][310];
int d[310][310];

void solve() {
	int h, w, n;
	cin >> h >> w >> n;

	vec<string> s(h);

	rep(i, h)
		cin >> s[i];

	vec<xy> men(n);
	rep(i, n)
		cin >> men[i].y >> men[i].x;
	rep(i, n) {
		men[i].y--; men[i].x--;
	}

	int mnmxc = infi;
	xy mnmxp = { -2,-2 };

	constexpr xy dd[4] = {
		{-1,0},
		{+1,0},
		{0,-1},
		{0,+1},
	};

	rep(y, h)
		rep(x, w) 
	{

		if (s[y][x] != '.' || done[y][x])
			continue;

		rep(yy, h)
			rep(xx, w)
			d[yy][xx] = infi;

		int mxc = 0;

		deque<xy> q;
		q.push_back({ x, y });
		d[y][x] = 0;

		while (!q.empty()) {
			auto pos = q.front();
			q.pop_front();
			rep(i, 4) {
				xy to = { pos.x + dd[i].x, pos.y + dd[i].y };

				if (to.x < 0 || to.x >= w || to.y < 0 || to.y >= h)
					continue;
				if (d[pos.y][pos.x] == 0)
					done[pos.y][pos.x] = true;
				switch (s[to.y][to.x])
				{
				case '@':
					if (d[to.y][to.x] > d[pos.y][pos.x] + 1) {
						d[to.y][to.x] = d[pos.y][pos.x] + 1;
						q.push_back(to);
					}
					break;
				case '.':
					if (d[to.y][to.x] > d[pos.y][pos.x]) {
						d[to.y][to.x] = d[pos.y][pos.x];
						q.push_front(to);
					}
					break;
				default:
					break;
				}
			}
		}

		rep(i, n)
			chmax(mxc, d[men[i].y][men[i].x]);

		if (mxc < mnmxc) {
			mnmxc = mxc;
			mnmxp = { x,y };
		}
	}

	cout << mnmxp.y + 1 << ' ' << mnmxp.x + 1 << endl;
}

int main() {
	{
		solve();
	}
}

