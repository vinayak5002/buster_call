#include <bits/stdc++.h>
using namespace std;
using _T=double; //long long
#define cf(x) cout<<"## "<<x<<endl
constexpr _T eps=1e-8;
constexpr long double PI=3.1415926535897932384l;
 
template<typename T> struct point
{
    T x,y;
    bool operator==(const point &a) const {return (abs(x-a.x)<=eps && abs(y-a.y)<=eps);}
    bool operator<(const point &a) const {if (abs(x-a.x)<=eps) return y<a.y-eps; return x<a.x-eps;}
    bool operator>(const point &a) const {return !(*this<a || *this==a);}
    point operator+(const point &a) const {return {x+a.x,y+a.y};}
    point operator-(const point &a) const {return {x-a.x,y-a.y};}
    point operator-() const {return {-x,-y};}
    point operator*(const T k) const {return {k*x,k*y};}
    point operator/(const T k) const {return {x/k,y/k};}
    T operator*(const point &a) const {return x*a.x+y*a.y;}//点乘
    T operator^(const point &a) const {return x*a.y-y*a.x;}//叉乘
    bool is_par(const point &a) const {return abs((*this)^a)<=eps;}//是否平行 
    bool is_ver(const point &a) const {return abs((*this)*a)<=eps;}//是否垂直 
    int toleft(const point &a) const {const auto t=(*this)^a; return (t>eps)-(t<-eps);}//a是否在右侧 
    T len2() const {return (*this)*(*this);}//长度的平方 
    T dis2(const point &a) const {return (a-(*this)).len2();}//与点距离的平方 
    double len() const {return sqrt(len2());}
    double dis(const point &a) const {return sqrt(dis2(a));}
    double ang(const point &a) const {return acos(max(-1.0,min(1.0,((*this)*a)/(len()*a.len()))));}//返回两点的cos 
    point rot(const double rad) const {return {x*cos(rad)-y*sin(rad),x*sin(rad)+y*cos(rad)};}
    point rot(const double cosr,const double sinr) const {return {x*cosr-y*sinr,x*sinr+y*cosr};}
};
 
using Point=point<_T>;
 
struct argcmp
{
    bool operator()(const Point &a,const Point &b) const
    {
        const auto quad=[](const Point &a)
        {
            if (a.y<-eps) return 1;
            if (a.y>eps) return 4;
            if (a.x<-eps) return 5;
            if (a.x>eps) return 3;
            return 2;
        };
        const int qa=quad(a),qb=quad(b);
        if (qa!=qb) return qa<qb;
        const auto t=a^b;
        //if (abs(t)<=eps) return a*a<b*b-eps;
        return t>eps;
    }
};
 
template<typename T> struct line{
    point<T> p,v;
 
    bool operator==(const line &a) const {return v.toleft(a.v)==0 && v.toleft(p-a.p)==0;}
    bool is_par(const line &a) const {return (v.is_par(a.v) && !v.is_par(p-a.p));}//是否平行 
    bool is_ver(const line &a) const {return v.is_ver(a.v);}//是否垂直 
    bool is_on(const point<T> &a) const {return v.is_par(a-p);}
    int toleft(const point<T> &a) const {return v.toleft(a-p);}//点是否在直线右侧 
    point<T> inter(const line &a) const {return p+v*((a.v^(p-a.p))/(v^a.v));}//两直线交点 
    double dis(const point<T> &a) const {return abs(v^(a-p))/v.len();}//点到直线距离 
    point<T> proj(const point<T> &a) const {return p+v*((v*(a-p))/(v*v));}//垂足 
    bool operator<(const line &a) const
    {
        if (abs(v^a.v)<=eps && v*a.v>=-eps) return toleft(a.p)==-1;
        return argcmp()(v,a.v);
    }
};
 
using Line=line<_T>;
 
Point p0,p1, p2;

int main() {
	int x, y;
	scanf("%d%d", &x, &y);
	p0 = {x*1.0, y*1.0};
	scanf("%d%d", &x, &y);
	p1 = {x*1.0, y*1.0};
	
	Line l1 = {p0, p1-p0};
	int q;
	cin >> q;
	while(q -- ) {
		
		scanf("%d%d", &x, &y);
		p2 = {x*1.0, y*1.0};
		Line l2 = {p0, p2};
		int op = l1.toleft(p2);
		if(op == 1) {
			puts("COUNTER_CLOCKWISE");
		}
		else if(op == -1) {
			puts("CLOCKWISE");
		}
		else {
			if((p1-p0)*(p2-p0) < -eps) {
				puts("ONLINE_BACK");
			}
			else {
				
				if((p1.x-p0.x)*(p1.x-p0.x) <= (p2.x-p0.x)*(p2.x-p0.x)) {
					puts("ONLINE_FRONT");
				}
				else {
					puts("ON_SEGMENT");
				}
			}
		}
	}
	return 0; 
}
