#include<bits/stdc++.h>
using namespace std;
#include <unordered_set>
#include <random>
//#define int long long
#define REP(i,m,n) for(int i=(m);i<(n);i++)
#define rep(i,n) REP(i,0,n)
#define pb push_back
#define all(a) a.begin(),a.end()
#define rall(c) (c).rbegin(),(c).rend()
#define mp make_pair
#define endl '\n'
//#define vec vector<ll>
//#define mat vector<vector<ll> >
#define fi first
#define se second
#define double long double
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll,ll> pll;
//typedef long double ld;
typedef complex<double> Complex;
const ll INF=1e9+7;
const ll MOD=998244353;
const ll inf=INF*INF;
const ll mod=MOD;
const ll inv2=499122177;
const ll MAX=200010;
const double PI=acos(-1.0);
typedef vector<vector<ll> > mat;
typedef vector<ll> vec;

ll dx[]={0,1,0,-1,-1,-1,1,1};
ll dy[]={1,0,-1,0,-1,1,-1,1};

// 根付き木の同型判定
//Union-Find木
string coding(ll i,ll p,vector<vector<ll> > &G){
    string res="0";
    vector<string>s(0);
    for(auto &e:G[i]){
        if(e==p)continue;
        s.pb(coding(e,i,G));
    }
    sort(all(s));
    rep(j,s.size()){
        res+=s[j];
    }
    res+='1';
    return res;
}

struct UnionFind {
    vector< int > data;

    UnionFind() = default;

    explicit UnionFind(size_t sz) : data(sz, -1) {}

    bool unite(int x, int y) {
        x = find(x), y = find(y);
        if(x == y) return false;
        if(data[x] > data[y]) swap(x, y);
        data[x] += data[y];
        data[y] = x;
        return true;
    }

    int find(int k) {
        if(data[k] < 0) return (k);
        return data[k] = find(data[k]);
    }

    int size(int k) {
        return -data[find(k)];
    }

    bool same(int x, int y) {
        return find(x) == find(y);
    }
};

void solve(){
    while(1){
        ll h,w;cin>>h>>w;
        if(h==0&&w==0)break;
        vector<vector<char> >d1(h,vector<char>(w));
        rep(i,h){
            rep(j,w)cin>>d1[i][j];
        }
        ll a,b;cin>>a>>b;
        vector<vector<char> >d2(a,vector<char>(b));
        rep(i,a){
            rep(j,b)cin>>d2[i][j];
        }
        //連結成分の生成
        UnionFind uf(h*w+1),uf2(a*b+1);
        rep(i,h){
            rep(j,w){
                ll v=i*w+j;
                if(d1[i][j]=='.'){
                    if(i==0||j==0||i==h-1||j==w-1){
                        uf.unite(v,h*w);
                    }
                    rep(k,4){
                        ll nx=i+dx[k],ny=j+dy[k];
                        if(nx<0||nx>=h||ny<0||ny>=w||d1[nx][ny]=='#')continue;
                        ll nv=nx*w+ny;
                        uf.unite(v,nv);
                    }
                }else{
                    rep(k,8){
                        ll nx=i+dx[k],ny=j+dy[k];
                        if(nx<0||nx>=h||ny<0||ny>=w||d1[nx][ny]=='.')continue;
                        ll nv=nx*w+ny;
                        uf.unite(v,nv);
                    }
                }
            }
        }
        rep(i,a){
            rep(j,b){
                ll v=i*b+j;
                if(d2[i][j]=='.'){
                    if(i==0||j==0||i==a-1||j==b-1){
                        uf2.unite(v,a*b);
                    }
                    rep(k,4){
                        ll nx=i+dx[k],ny=j+dy[k];
                        if(nx<0||nx>=a||ny<0||ny>=b||d2[nx][ny]=='#')continue;
                        ll nv=nx*b+ny;
                        uf2.unite(v,nv);
                    }
                }else{
                    rep(k,8){
                        ll nx=i+dx[k],ny=j+dy[k];
                        if(nx<0||nx>=a||ny<0||ny>=b||d2[nx][ny]=='.')continue;
                        ll nv=nx*b+ny;
                        uf2.unite(v,nv);
                    }
                }
            }
        }
        //根付き木の生成
        ll cnt1=0,cnt2=0;
        vector<ll>used1(h*w+1),used2(a*b+1);
        map<ll,ll>id1,id2;
        rep(i,h*w+1){
            if(used1[uf.find(i)])continue;
            id1[uf.find(i)]=cnt1;
            used1[uf.find(i)]=1;
            cnt1++;
        }
        rep(i,a*b+1){
            if(used2[uf2.find(i)])continue;
            id2[uf2.find(i)]=cnt2;
            used2[uf2.find(i)]=1;
            cnt2++;
        }
        //隣接リスト
        vector<vector<ll> >G1(cnt1),G2(cnt2);
        //隣接行列
        vector<vector<ll> >g1(cnt1,vector<ll>(cnt1)),g2(cnt2,vector<ll>(cnt2));
        rep(i,h){
            rep(j,w){
                ll v=i*w+j;
                if(d1[i][j]=='.'){
                    rep(k,4){
                        ll nx=i+dx[k],ny=j+dy[k];
                        if(nx<0||nx>=h||ny<0||ny>=w||d1[nx][ny]=='.')continue;
                        ll nv=nx*w+ny;
                        g1[id1[uf.find(v)]][id1[uf.find(nv)]]=1;
                        g1[id1[uf.find(nv)]][id1[uf.find(v)]]=1;
                    }
                }else{
                    if(i==0||j==0||i==h-1||j==w-1){
                        g1[id1[uf.find(v)]][id1[uf.find(h*w)]]=1;
                        g1[id1[uf.find(h*w)]][id1[uf.find(v)]]=1;
                    }
                    rep(k,4){
                        ll nx=i+dx[k],ny=j+dy[k];
                        if(nx<0||nx>=h||ny<0||ny>=w||d1[nx][ny]=='#')continue;
                        ll nv=nx*w+ny;
                        g1[id1[uf.find(v)]][id1[uf.find(nv)]]=1;
                        g1[id1[uf.find(nv)]][id1[uf.find(v)]]=1;
                    }
                }
            }
        }
        rep(i,a){
            rep(j,b){
                ll v=i*b+j;
                if(d2[i][j]=='.'){
                    rep(k,4){
                        ll nx=i+dx[k],ny=j+dy[k];
                        if(nx<0||nx>=a||ny<0||ny>=b||d2[nx][ny]=='.')continue;
                        ll nv=nx*b+ny;
                        g2[id2[uf2.find(v)]][id2[uf2.find(nv)]]=1;
                        g2[id2[uf2.find(nv)]][id2[uf2.find(v)]]=1;
                    }
                }else{
                    if(i==0||j==0||i==a-1||j==b-1){
                        g2[id2[uf2.find(v)]][id2[uf2.find(a*b)]]=1;
                        g2[id2[uf2.find(a*b)]][id2[uf2.find(v)]]=1;
                    }
                    rep(k,4){
                        ll nx=i+dx[k],ny=j+dy[k];
                        if(nx<0||nx>=a||ny<0||ny>=b||d2[nx][ny]=='#')continue;
                        ll nv=nx*b+ny;
                        
                        g2[id2[uf2.find(v)]][id2[uf2.find(nv)]]=1;
                        g2[id2[uf2.find(nv)]][id2[uf2.find(v)]]=1;
                    }
                }
            }
        }
        rep(i,cnt1){
            rep(j,cnt1){
                if(g1[i][j])G1[i].pb(j);
            }
        }
        rep(i,cnt2){
            rep(j,cnt2){
                if(g2[i][j])G2[i].pb(j);
            }
        }
        ll root1=id1[uf.find(h*w)],root2=id2[uf2.find(a*b)];
        /* 
        cout<<"Tree 1"<<endl;
        rep(i,cnt1){
            rep(j,cnt1){
                cout<<g1[i][j]<<' ';
            }
            cout<<endl;
        }
        cout<<"Tree 2"<<endl;
        cout<<id2[uf2.find(3*b+9)]<<endl;
        rep(i,cnt2){
            rep(j,cnt2){
                cout<<g2[i][j]<<' ';
            }
            cout<<endl;
        }
        */
        string code1=coding(root1,-1,G1),code2=coding(root2,-1,G2);
        if(code1==code2){
            cout<<"yes"<<endl;
        }else{
            cout<<"no"<<endl;
        }
    }
}

signed main(){
    //cin.tie(0);
    //ios::sync_with_stdio(false);
    solve();
}
