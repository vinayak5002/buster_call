#include <bits/stdc++.h>


#include <algorithm>
#include <cmath>
#include <iostream>
#include <limits>

#include <algorithm>
#include <cassert>
#include <vector>

namespace rklib {

template <class T>
bool chmax(T &a, const T &b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
bool chmin(T &a, const T &b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
bool chmin_non_negative(T &a, const T &b) {
    if (a < 0 || a > b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
T div_floor(T a, T b) {
    if (b < 0) a *= -1, b *= -1;
    return a >= 0 ? a / b : (a + 1) / b - 1;
}

template <class T>
T div_ceil(T a, T b) {
    if (b < 0) a *= -1, b *= -1;
    return a > 0 ? (a - 1) / b + 1 : a / b;
}

}  // namespace rklib

#include <vector>

namespace rklib {

namespace geo2d_rational {

template <class T>
int sgn(T x) {
    if (x < 0) return -1;
    if (x > 0) return 1;
    return 0;
}

template <class T>
struct Point {
    T x, y;

    Point(T x = 0, T y = 0) : x(x), y(y) {}

    bool operator==(const Point& rhs) { return x == rhs.x && y == rhs.y; }
    bool operator<(const Point& rhs) const {
        if (x == rhs.x) return y < rhs.y;
        return x < rhs.x;
    }

    Point& operator+=(const Point& rhs) {
        this->x += rhs.x;
        this->y += rhs.y;
        return *this;
    }
    Point& operator-=(const Point& rhs) {
        this->x -= rhs.x;
        this->y -= rhs.y;
        return *this;
    }
    Point& operator*=(const T& rhs) {
        this->x *= rhs;
        this->y *= rhs;
        return *this;
    }
    Point& operator/=(const T& rhs) {
        this->x /= rhs;
        this->y /= rhs;
        return *this;
    }

    friend Point operator+(const Point& lhs, const Point& rhs) {
        return Point(lhs) += rhs;
    }
    friend Point operator-(const Point& lhs, const Point& rhs) {
        return Point(lhs) -= rhs;
    }
    friend Point operator*(const Point& lhs, const T& rhs) {
        return Point(lhs) *= rhs;
    }
    friend Point operator*(const T& lhs, const Point& rhs) {
        return Point(rhs) *= lhs;
    }
    friend Point operator/(const Point& lhs, const T& rhs) {
        return Point(lhs) /= rhs;
    }
    friend T operator*(const Point& lhs, const Point& rhs) {
        return lhs.x * rhs.x + lhs.y * rhs.y;
    }
    friend T operator^(const Point& lhs, const Point& rhs) {
        return lhs.x * rhs.y - lhs.y * rhs.x;
    }

    friend std::istream& operator>>(std::istream& is, Point& p) {
        is >> p.x >> p.y;
        return is;
    }
};

template <class T>
using Vec = Point<T>;
template <class T>
using Points = std::vector<Point<T>>;
template <class T>
using Polygon = Points<T>;

template <class T>
struct Line {
    Point<T> a;
    Vec<T> v;

    Line() {}
    Line(Point<T> a, Vec<T> v) : a(a), v(v) {}
};

template <class T>
struct Segment {
    Point<T> a, b;

    Segment() {}
    Segment(Point<T> a, Point<T> b) : a(a), b(b) {}
};

template <class T>
T norm(Point<T> p) {
    return p.x * p.x + p.y * p.y;
}

template <class T>
T abs_sqared(Point<T> p) {
    return norm(p);
}

template <class T>
Point<T> projection(Line<T> l, Point<T> p) {
    auto [a, v] = l;
    T t = v * (p - a) / norm(v);
    return a + v * t;
}

template <class T>
Point<T> reflection(Line<T> l, Point<T> p) {
    return projection(l, p) * 2 - p;
}

constexpr int CCW_COUNTER_CLOCKWISE = 1;
constexpr int CCW_CLOCKWISE = -1;
constexpr int CCW_ONLINE_BACK = -2;  // C->A->B
constexpr int CCW_ONLINE_FRONT = 2;  // A->B->C
constexpr int CCW_ON_SEGMENT = 0;    // A->C->B

template <class T>
int ccw(Point<T> a, Point<T> b, Point<T> c) {
    Vec<T> v = b - a, w = c - a;
    if ((v ^ w) > 0) return CCW_COUNTER_CLOCKWISE;
    if ((v ^ w) < 0) return CCW_CLOCKWISE;
    if (v * w < 0) return CCW_ONLINE_BACK;
    if ((a - b) * (c - b) < 0) return CCW_ONLINE_FRONT;
    return CCW_ON_SEGMENT;
}

template <class T>
bool is_parallel(Vec<T> v, Vec<T> w) {
    return (v ^ w) == 0;
}

template <class T>
bool is_orthogonal(Vec<T> v, Vec<T> w) {
    return v * w == 0;
}

template <class T>
bool has_intersection(Line<T> l, Segment<T> s) {
    auto [p, v] = l;
    auto [a, b] = s;
    return sgn(v ^ (a - p)) * sgn(v ^ (b - p)) <= 0;
}

template <class T>
bool has_intersection(Segment<T> s1, Segment<T> s2) {
    auto [a, b] = s1;
    auto [c, d] = s2;
    return ccw(a, b, c) * ccw(a, b, d) <= 0 && ccw(c, d, a) * ccw(c, d, b) <= 0;
}

template <class T>
Point<T> intersection(Line<T> l1, Line<T> l2) {
    auto [a, v] = l1;
    auto [b, w] = l2;
    T t = ((b - a) ^ w) / (v ^ w);
    return a + v * t;
}

template <class T>
Point<T> intersection(Segment<T> s1, Segment<T> s2) {
    auto [a, b] = s1;
    auto [c, d] = s2;
    return intersection(Line(a, b - a), Line(c, d - c));
}

template <class T>
T distance_squared(Line<T> l, Point<T> p) {
    auto [a, v] = l;
    return abs_sqared(projection(l, p) - p);
}

template <class T>
T distance_squared(Segment<T> s, Point<T> p) {
    auto [a, b] = s;
    if ((b - a) * (p - a) < 0) return abs_sqared(p - a);
    if ((a - b) * (p - b) < 0) return abs_sqared(p - b);
    return distance_squared(Line(a, b - a), p);
}

template <class T>
T distance_squared(Line<T> l1, Line<T> l2) {
    auto [a, v] = l1;
    auto [b, w] = l2;
    if (is_parallel(v, w)) return distance_squared(l1, b);
    return 0;
}

template <class T>
T distance_squared(Line<T> l, Segment<T> s) {
    if (has_intersection(l, s)) return 0;
    return std::min(distance_squared(l, s.a), distance_squared(l, s.b));
}

template <class T>
T distance_squared(Segment<T> s1, Segment<T> s2) {
    if (has_intersection(s1, s2)) return 0;
    return std::min({distance_squared(s1, s2.a), distance_squared(s1, s2.b),
                     distance_squared(s2, s1.a), distance_squared(s2, s1.b)});
}

template <class T>
T area(Polygon<T>& p) {
    T res = 0;
    for (size_t i = 0; i < p.size(); i++) {
        res += p[i] ^ p[(i + 1) % p.size()] / 2;
    }
    return std::abs(res);
}

template <class T>
T area_doubled(Polygon<T>& p) {
    T res = 0;
    for (size_t i = 0; i < p.size(); i++) {
        res += p[i] ^ p[(i + 1) % p.size()];
    }
    return std::abs(res);
}

template <class T>
bool is_convex(Polygon<T>& p) {
    int n = p.size();
    bool flag1 = false, flag2 = false;
    for (int i = 0; i < n; i++) {
        int tmp = ccw(p[(i + n - 1) % n], p[i], p[(i + 1) % n]);
        if (tmp == CCW_COUNTER_CLOCKWISE) {
            if (flag2) return false;
            flag1 = true;
        } else if (tmp == CCW_CLOCKWISE) {
            if (flag1) return false;
            flag2 = true;
        }
    }
    return true;
}

template <class T>
int point_in_polygon(Point<T> a, Polygon<T>& p) {
    int n = p.size(), wn = 0;
    for (int i = 0; i < n; i++) {
        int j = (i + 1) % n;
        if (distance_squared(Segment(p[i], p[j]), a) == 0)
            return 1;
        else if (p[i].y <= a.y && a.y < p[j].y) {
            wn += (ccw(a, p[i], p[j]) == CCW_COUNTER_CLOCKWISE);
        } else if (p[j].y <= a.y && a.y < p[i].y) {
            wn -= (ccw(a, p[i], p[j]) == CCW_CLOCKWISE);
        }
    }
    return wn == 0 ? 0 : 2;
}

template <class T>
Polygon<T> convex_hull(Points<T> p) {
    int n = p.size();
    std::sort(p.begin(), p.end());
    Polygon<T> ch(2 * n);
    int k = 0;
    for (int i = 0; i < n; i++) {
        while (k > 1 && ((ch[k - 1] - ch[k - 2]) ^ (p[i] - ch[k - 1])) <= 0)
            --k;
        ch[k++] = p[i];
    }
    for (int i = n - 2, t = k; i >= 0; --i) {
        while (k > t && ((ch[k - 1] - ch[k - 2]) ^ (p[i] - ch[k - 1])) <= 0)
            --k;
        ch[k++] = p[i];
    }
    ch.resize(k - 1);
    return ch;
}

template <class T>
T convex_cut(Polygon<T>& p, Line<T> l) {
    int n = p.size();
    auto [a, v] = l;
    Polygon<T> q;
    for (int i = 0; i < n; ++i) {
        int j = (i + 1) % n;
        if ((v ^ (p[i] - a)) >= 0) q.push_back(p[i]);
        if (has_intersection(l, Segment(p[i], p[j])) &&
            !is_parallel(v, p[j] - p[i])) {
            q.push_back(intersection(l, {p[i], p[j] - p[i]}));
        }
    }
    return area(q);
}

template <class T>
T convex_cut_doubled(Polygon<T>& p, Line<T> l) {
    int n = p.size();
    auto [a, v] = l;
    Polygon<T> q;
    for (int i = 0; i < n; ++i) {
        int j = (i + 1) % n;
        if ((v ^ (p[i] - a)) >= 0) q.push_back(p[i]);
        if (has_intersection(l, Segment(p[i], p[j])) &&
            !is_parallel(v, p[j] - p[i])) {
            q.push_back(intersection(l, {p[i], p[j] - p[i]}));
        }
    }
    return area_doubled(q);
}

}  // namespace geo2d_rational

}  // namespace rklib


#include <iostream>
#include <string>
#include <type_traits>
#include <vector>

namespace rklib {

struct BigInt {
   public:
    BigInt() : BigInt(0) {}
    template <typename T, std::enable_if_t<std::is_integral<T>::value,
                                           std::nullptr_t> = nullptr>
    BigInt(T x) : BigInt(std::vector<T>(1, x)) {}
    template <typename T, std::enable_if_t<std::is_integral<T>::value,
                                           std::nullptr_t> = nullptr>
    BigInt(std::vector<T> a) {
        while (a.size() >= 2 && a.back() == 0) a.pop_back();
        if (a.size() == 1 && a[0] == 0) {
            sgn = 0;
            v = {0};
            return;
        }
        sgn = (a.back() > 0 ? 1 : -1);
        if (sgn < 0) {
            std::transform(a.begin(), a.end(), a.begin(),
                           [](T x) { return -x; });
        }
        v = normalize(a);
    }
    BigInt(std::string s) : sgn(1) {
        if (s[0] == '-') {
            s.erase(s.begin());
            sgn = -1;
        }
        if (s == "0") {
            sgn = 0;
            v = {0};
            return;
        }
        for (int r = int(s.size()), l = std::max(0, r - log10_base); r > 0;
             r = l, l = std::max(0, r - log10_base)) {
            int tmp = 0;
            for (int i = l; i < r; ++i) {
                tmp = tmp * 10 + (s[i] - '0');
            }
            v.push_back(tmp);
        }
    }

    BigInt& operator+=(const BigInt& rhs) {
        int r_sgn = rhs.sgn;
        if (r_sgn == 0) return *this;
        if (sgn == 0) return *this = rhs;
        if (v.size() < rhs.v.size()) v.resize(rhs.v.size(), 0);
        for (size_t i = 0; i < rhs.v.size(); i++) {
            if (sgn == r_sgn)
                v[i] += rhs.v[i];
            else
                v[i] -= rhs.v[i];
        }
        normalize();
        return *this;
    }
    BigInt& operator-=(const BigInt& rhs) {
        int r_sgn = rhs.sgn;
        if (r_sgn == 0) return *this;
        if (sgn == 0) return *this = -rhs;
        if (v.size() < rhs.v.size()) v.resize(rhs.v.size(), 0);
        for (size_t i = 0; i < rhs.v.size(); i++) {
            if (sgn == r_sgn)
                v[i] -= rhs.v[i];
            else
                v[i] += rhs.v[i];
        }
        normalize();
        return *this;
    }
    BigInt& operator*=(const BigInt& rhs) {
        int r_sgn = rhs.sgn;
        if (sgn == 0) return *this;
        if (r_sgn == 0) return *this = rhs;

        int res_sgn = sgn * r_sgn;

        if (int(std::min(v.size(), rhs.v.size())) <= naive_mul_threshold) {
            v = multiply_naive(v, rhs.v);
        } else {
            std::vector<long long> a(v.size()), b(rhs.v.size());
            for (size_t i = 0; i < a.size(); i++) {
                a[i] = (long long)v[i];
            }
            for (size_t i = 0; i < b.size(); i++) {
                b[i] = (long long)rhs.v[i];
            }
            int sz = 1;
            while (sz < int(a.size()) || sz < int(b.size())) sz *= 2;
            a.resize(sz, 0);
            b.resize(sz, 0);

            this->v = normalize(multiply_karatsuba(a, b));
        }

        this->sgn = res_sgn;

        return *this;
    }
    BigInt& operator/=(const BigInt& rhs) {
        int r_sgn = rhs.sgn;
        assert(r_sgn != 0);
        if (sgn == 0) return *this;
        if (rhs == BigInt(1) || rhs == BigInt(-1)) {
            sgn *= r_sgn;
            return *this;
        }

        int res_sgn = sgn * r_sgn;

        (*this) = divide_newton_raphson(*this, rhs);

        this->sgn = (this->v.back() == 0 ? 0 : res_sgn);

        return *this;
    }
    BigInt& operator%=(const BigInt& rhs) {
        assert(rhs.sgn != 0);

        return *this = (*this) - (*this) / rhs * rhs;
    }

    friend BigInt operator+(const BigInt& lhs, const BigInt& rhs) {
        return BigInt(lhs) += rhs;
    }
    friend BigInt operator-(const BigInt& lhs, const BigInt& rhs) {
        return BigInt(lhs) -= rhs;
    }
    friend BigInt operator*(const BigInt& lhs, const BigInt& rhs) {
        return BigInt(lhs) *= rhs;
    }
    friend BigInt operator/(const BigInt& lhs, const BigInt& rhs) {
        return BigInt(lhs) /= rhs;
    }
    friend BigInt operator%(const BigInt& lhs, const BigInt& rhs) {
        return BigInt(lhs) %= rhs;
    }

    BigInt operator+() const { return *this; }
    BigInt operator-() const { return {-sgn, v}; }

    BigInt& operator++() { return *this += 1; }
    BigInt& operator--() { return *this -= 1; }

    friend bool operator==(const BigInt& lhs, const BigInt& rhs) {
        if (lhs.sgn != rhs.sgn || lhs.v.size() != rhs.v.size()) return false;
        for (size_t i = 0; i < lhs.v.size(); i++) {
            if (lhs.v[i] != rhs.v[i]) return false;
        }
        return true;
    }
    friend bool operator!=(const BigInt& lhs, const BigInt& rhs) {
        return !(lhs == rhs);
    }
    friend bool operator<(const BigInt& lhs, const BigInt& rhs) {
        int l_sgn = lhs.sgn, r_sgn = rhs.sgn;
        if (l_sgn < r_sgn) return true;
        if (l_sgn > r_sgn) return false;

        int nl = lhs.v.size(), nr = rhs.v.size();
        if (l_sgn * nl < r_sgn * nr) return true;
        if (l_sgn * nl > r_sgn * nr) return false;

        for (int i = nl - 1; i >= 0; i--) {
            if (l_sgn * lhs.v[i] < r_sgn * rhs.v[i]) return true;
            if (l_sgn * lhs.v[i] > r_sgn * rhs.v[i]) return false;
        }

        return false;
    }
    friend bool operator>(const BigInt& lhs, const BigInt& rhs) {
        return rhs < lhs;
    }
    friend bool operator<=(const BigInt& lhs, const BigInt& rhs) {
        return !(lhs > rhs);
    }
    friend bool operator>=(const BigInt& lhs, const BigInt& rhs) {
        return rhs <= lhs;
    }

    friend std::istream& operator>>(std::istream& is, BigInt& rhs) {
        std::string s;
        is >> s;
        rhs = BigInt(s);
        return is;
    }
    friend std::ostream& operator<<(std::ostream& os, const BigInt& rhs) {
        if (rhs.sgn < 0) os << "-";
        for (int i = int(rhs.v.size()) - 1; i >= 0; i--) {
            if (i == int(rhs.v.size()) - 1) {
                os << rhs.v[i];
            } else {
                os << std::to_string(rhs.v[i] + base).substr(1, log10_base);
            }
        }
        return os;
    }

    operator double() const {
        double res = 0;
        for (int i = v.size() - 1; i >= 0; i--) {
            res = res * base + v[i];
        }
        res *= sgn;
        return res;
    }
    operator long double() const {
        long double res = 0;
        for (int i = v.size() - 1; i >= 0; i--) {
            res = res * base + v[i];
        }
        res *= sgn;
        return res;
    }

   private:
    static constexpr int base = 10000, log10_base = 4;
    static constexpr int naive_mul_threshold = 75;
    int sgn;
    std::vector<int> v;

    BigInt(int sgn, std::vector<int> v) : sgn(sgn), v(v) {}

    void normalize() {
        while (v.size() >= 2 && v.back() == 0) v.pop_back();

        if (v.back() < 0) {
            sgn = -sgn;
            std::transform(v.begin(), v.end(), v.begin(),
                           [](int x) { return -x; });
        }

        int carry = 0;
        for (size_t i = 0; i < v.size(); i++) {
            v[i] += carry;
            if (0 <= v[i] && v[i] < base) {
                carry = 0;
                continue;
            }
            carry = div_floor(v[i], base);
            v[i] -= carry * base;
        }
        while (carry > 0) {
            v.push_back(carry % base);
            carry /= base;
        }

        while (v.size() >= 2 && v.back() == 0) v.pop_back();
        if (v.size() == 1 && v[0] == 0) sgn = 0;
    }
    template <class T>
    static std::vector<int> normalize(const std::vector<T>& c) {
        std::vector<int> res(c.size());
        T carry = 0;
        for (size_t i = 0; i < c.size(); i++) {
            T tmp = c[i];
            tmp += carry;
            if (0 <= tmp && tmp < T(base)) {
                carry = 0;
                res[i] = int(tmp);
                continue;
            }
            carry = div_floor(tmp, T(base));
            res[i] = int(tmp - carry * base);
        }
        while (carry > 0) {
            res.push_back(int(carry % base));
            carry /= base;
        }

        while (res.size() >= 2 && res.back() == 0) res.pop_back();

        return res;
    }

    static std::vector<int> multiply_naive(const std::vector<int>& a,
                                           const std::vector<int>& b) {
        std::vector<long long> c(a.size() + b.size() - 1, 0);
        for (size_t i = 0; i < a.size(); i++) {
            for (size_t j = 0; j < b.size(); j++) {
                c[i + j] += a[i] * b[j];
            }
        }

        return normalize(c);
    }
    static std::vector<long long> multiply_karatsuba(std::vector<long long> a,
                                                     std::vector<long long> b) {
        int na = a.size(), nb = b.size();
        if (std::min(na, nb) <= naive_mul_threshold) {
            std::vector<long long> res(a.size() + b.size() - 1, 0);
            for (size_t i = 0; i < a.size(); i++) {
                for (size_t j = 0; j < b.size(); j++) {
                    res[i + j] += a[i] * b[j];
                }
            }
            return res;
        }

        int n = std::max(na, nb);
        if (na < n) a.resize(n, 0);
        if (nb < n) b.resize(n, 0);

        int k = n / 2;
        std::vector<long long> x(
            std::vector<long long>(a.begin() + k, a.end()));
        std::vector<long long> y(
            std::vector<long long>(a.begin(), a.begin() + k));
        std::vector<long long> z(
            std::vector<long long>(b.begin() + k, b.end()));
        std::vector<long long> w(
            std::vector<long long>(b.begin(), b.begin() + k));

        std::vector<long long> xz = multiply_karatsuba(x, z);
        std::vector<long long> yw = multiply_karatsuba(y, w);

        for (int i = 0; i < k; i++) {
            x[i] += y[i];
            z[i] += w[i];
        }
        std::vector<long long> t = multiply_karatsuba(x, z);
        for (size_t i = 0; i < xz.size(); i++) {
            t[i] -= xz[i] + yw[i];
        }

        a = std::vector<long long>(2 * k, 0);
        a.insert(a.end(), xz.begin(), xz.end());
        b = std::vector<long long>(k, 0);
        b.insert(b.end(), t.begin(), t.end());

        for (size_t i = 0; i < b.size(); i++) {
            a[i] += b[i];
        }
        for (size_t i = 0; i < yw.size(); i++) {
            a[i] += yw[i];
        }

        return a;
    }

    static void shift_r(BigInt& a, size_t len) {
        if (a == BigInt(0)) return;
        if (a.v.size() <= len) {
            a = 0;
            return;
        }
        a.v.erase(a.v.begin(), a.v.begin() + len);
    }

    static BigInt divide_newton_raphson(BigInt a, BigInt b) {
        a.sgn = b.sgn = 1;
        if (a < b) return 0;
        size_t len = a.v.size() + 2;
        BigInt x = base * base, prv = x;
        while (true) {
            BigInt tmp = x * x * b;
            shift_r(tmp, len);
            x += x;
            x -= tmp;
            if (x.v.size() > len) shift_r(x, x.v.size() - len);

            if ((x - prv).v.size() <= 1) break;
            prv = x;
        }
        BigInt res = a * x;
        res.v.erase(res.v.begin(), res.v.begin() + len);
        if (res * b + b <= a) ++res;

        return res;
    }
};

}  // namespace rklib


#include <cassert>
#include <iostream>

namespace rklib {

namespace rational_internal {

template <class T>
T gcd(T a, T b) {
    if (b == T(0)) {
        if (a < T(0)) a = -a;
        return a;
    }
    return gcd(b, a % b);
}

}  // namespace rational_internal

template <class T = long long>
struct Rational {
   public:
    Rational() : num(0), den(1){};
    Rational(T n) : num(n), den(1) {}
    Rational(T n, T d) : num(n), den(d) {
        assert(den != T(0));
        if (den < 0) num = -num, den = -den;
        T g = rational_internal::gcd(num, den);
        num /= g;
        den /= g;
    }

    T numerator() { return num; }
    T denominator() { return den; }

    Rational& operator+=(const Rational& rhs) {
        T r_den = rhs.den;
        T g = rational_internal::gcd(den, r_den);
        den /= g;
        num = num * (r_den / g) + rhs.num * den;
        g = rational_internal::gcd(num, g);
        num /= g;
        den *= r_den / g;
        return *this;
    }
    Rational& operator-=(const Rational& rhs) {
        T r_den = rhs.den;
        T g = rational_internal::gcd(den, r_den);
        den /= g;
        num = num * (r_den / g) - rhs.num * den;
        g = rational_internal::gcd(num, g);
        num /= g;
        den *= r_den / g;
        return *this;
    }
    Rational& operator*=(const Rational& rhs) {
        T r_num = rhs.num;
        T r_den = rhs.den;

        T g1 = rational_internal::gcd(num, r_den);
        T g2 = rational_internal::gcd(r_num, den);
        num = (num / g1) * (r_num / g2);
        den = (den / g2) * (r_den / g1);
        return *this;
    }
    Rational& operator/=(const Rational& rhs) {
        T r_num = rhs.num;
        T r_den = rhs.den;

        T zero(0);

        assert(r_num != zero);
        if (num == zero) return *this;

        T gcd1 = rational_internal::gcd(num, r_num);
        T gcd2 = rational_internal::gcd(r_den, den);
        num = (num / gcd1) * (r_den / gcd2);
        den = (den / gcd2) * (r_num / gcd1);

        if (den < zero) {
            num = -num;
            den = -den;
        }
        return *this;
    }

    friend Rational operator+(const Rational& lhs, const Rational& rhs) {
        return Rational(lhs) += rhs;
    }
    friend Rational operator-(const Rational& lhs, const Rational& rhs) {
        return Rational(lhs) -= rhs;
    }
    friend Rational operator*(const Rational& lhs, const Rational& rhs) {
        return Rational(lhs) *= rhs;
    }
    friend Rational operator/(const Rational& lhs, const Rational& rhs) {
        return Rational(lhs) /= rhs;
    }

    Rational operator+() const { return *this; }
    Rational operator-() const { return Rational{-num, den}; }

    Rational& operator++() {
        num += den;
        return *this;
    }
    Rational& operator--() {
        num -= den;
        return *this;
    }

    friend bool operator==(const Rational& lhs, const Rational& rhs) {
        return lhs.num == rhs.num && lhs.den == rhs.den;
    }
    friend bool operator!=(const Rational& lhs, const Rational& rhs) {
        return !(lhs == rhs);
    }
    friend bool operator<(const Rational& lhs, const Rational& rhs) {
        return lhs.num * rhs.den < rhs.num * lhs.den;
    }
    friend bool operator>(const Rational& lhs, const Rational& rhs) {
        return rhs < lhs;
    }
    friend bool operator<=(const Rational& lhs, const Rational& rhs) {
        return !(lhs > rhs);
    }
    friend bool operator>=(const Rational& lhs, const Rational& rhs) {
        return rhs <= lhs;
    }

    friend std::ostream& operator<<(std::ostream& os, const Rational& r) {
        if (r.den == T(1)) return os << r.num;
        return os << r.num << "/" << r.den;
    }

    operator double() const { return double(num) / double(den); }
    operator long double() const { return (long double)num / (long double)den; }

   private:
    T num, den;
};

}  // namespace rklib


#define For(i, a, b) for (int i = (int)(a); (i) < (int)(b); ++(i))
#define rFor(i, a, b) for (int i = (int)(a)-1; (i) >= (int)(b); --(i))
#define rep(i, n) For(i, 0, n)
#define rrep(i, n) rFor(i, n, 0)
#define fi first
#define se second

using namespace std;
using namespace rklib;

using lint = long long;
using pii = pair<int, int>;
using pll = pair<lint, lint>;

using namespace geo2d_rational;

int main() {
    int q;
    cin >> q;
    rep(qq, q) {
        BigInt x0, y0, x1, y1, x2, y2, x3, y3;
        cin >> x0 >> y0 >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;

        Segment<Rational<BigInt>> s1 = {{x0, y0}, {x1, y1}},
                                  s2 = {{x2, y2}, {x3, y3}};
        auto [x, y] = intersection(s1, s2);
        printf("%.10lf %.10lf\n", double(x), double(y));
    }
}

