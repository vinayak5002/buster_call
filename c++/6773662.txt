#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tag_and_trait.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <optional>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <utility>
using namespace __gnu_pbds;
using namespace std;

#pragma GCC optimize("O3")
// #pragma GCC target("avx2")
// #pragma GCC optimize("unroll-loops")
#define all(x) (x).begin(), (x).end()
#define reall(a) (a).rbegin(), (a).rend()
#define Sort(x) sort((x).begin(), (x).end())
#define Reverse(x) reverse((x).begin(), (x).end())
#define len(x) (ll) x.size()
#define pb emplace_back
#define append emplace_back
#define STR(x) to_string(x)
#define INT(x) stoi(x)
#define ll(x) stoll(x)
#define DOUBLE(x) stod(x)
#define ld(x) stold(x)

#define elif else if
#define sum(...) accumulate(all(__VA_ARGS__), 0LL)
#define bisect_left(arr, k) lower_bound(all(arr), (k)) - (arr).begin()
// #define bisect_right(arr, k) upper_bound(all(arr), (k)) - (arr).begin()
#define uniq(arr)                                                                                                      \
    sort(all(arr));                                                                                                    \
    arr.erase(unique(all(arr)), end(arr))

using str = string;
using ll = long long;
using ld = long double;
using ull = unsigned long long;
using ui = unsigned int;
using puu = pair<ui, ui>;
// using P = pair<int, int>;
using vi = vector<int>;
using vll = vector<long long>;
// template <typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,
// tree_order_statistics_node_update>;
template <typename S, typename T>
using ordered_dict = tree<S, T, less<S>, rb_tree_tag, tree_order_statistics_node_update>;
/*
var_name.find_by_order(k) でk番目（0-indexed）のiteratorを返す．
var_name.order_of_key(key) でkey以上の最初の要素が、treeの中で何番目か返す．
*/
// rep-------------------------------------------------------------------
#define overload4(_1, _2, _3, _4, name, ...) name
#define overload3(_1, _2, _3, name, ...) name
#define rep1(i, n) for (ll i = 0; i < n; ++i)
#define rep2(i, a, b) for (ll i = a; i < b; ++i)
#define rep3(i, a, b, c) for (ll i = a, _bb = b; (c > 0 && i < _bb) || (c < 0 && i > _bb); i += c)
#define rep(...) overload4(__VA_ARGS__, rep3, rep2, rep1)(__VA_ARGS__)
#define each1(i, a) for (auto &&i : a)
#define each2(x, y, a) for (auto &&[x, y] : a)
#define each3(x, y, z, a) for (auto &&[x, y, z] : a)
#define each(...) overload4(__VA_ARGS__, each3, each2, each1)(__VA_ARGS__)
// ----------------------------------------------------------------------

// 入出力-----------------------------------------------------------------
struct Ioinitializer {
    Ioinitializer() noexcept {
        cin.tie(nullptr);
        ios::sync_with_stdio(false);
        cout << setprecision(20) << setiosflags(ios::fixed);
    }
} Ioinitializer;

struct input {
    input(){};
    operator int() {
        int value;
        cin >> value;
        return value;
    }
    operator long long() {
        long long value;
        cin >> value;
        return value;
    }
    operator unsigned long long() {
        unsigned long long value;
        cin >> value;
        return value;
    }
    operator unsigned() {
        unsigned value;
        cin >> value;
        return value;
    }
    operator float() {
        float value;
        cin >> value;
        return value;
    }
    operator double() {
        double value;
        cin >> value;
        return value;
    }
    operator long double() {
        long double value;
        cin >> value;
        return value;
    }
    operator char() {
        char value;
        do {
            value = getchar();
        } while (value == ' ' || value == '\n');
        return value;
    }
    operator string() {
        string value;
        cin >> value;
        return value;
    }
};
void scan(int &a) {
    cin >> a;
}
void scan(unsigned &a) {
    cin >> a;
}
void scan(long &a) {
    cin >> a;
}
void scan(long long &a) {
    cin >> a;
}
void scan(unsigned long long &a) {
    cin >> a;
}
void scan(char &a) {
    do {
        a = getchar();
    } while (a == ' ' || a == '\n');
}
void scan(float &a) {
    cin >> a;
}
void scan(double &a) {
    cin >> a;
}
void scan(long double &a) {
    cin >> a;
}
void scan(vector<bool> &a) {
    for (unsigned i = 0; i < a.size(); i++) {
        int b;
        scan(b);
        a[i] = b;
    }
}
void scan(char a[]) {
    cin >> a;
}
void scan(string &a) {
    cin >> a;
}
template <class T> void scan(vector<T> &);
template <class T, size_t size> void scan(array<T, size> &);
template <class T, class L> void scan(pair<T, L> &);
template <class T, size_t size> void scan(T (&)[size]);
template <class T> void scan(vector<T> &a) {
    for (auto &&i : a)
        scan(i);
}
template <class T> void scan(deque<T> &a) {
    for (auto &&i : a)
        scan(i);
}
template <class T, size_t size> void scan(array<T, size> &a) {
    for (auto &&i : a)
        scan(i);
}
template <class T, class L> void scan(pair<T, L> &p) {
    scan(p.first);
    scan(p.second);
}
template <class T, size_t size> void scan(T (&a)[size]) {
    for (auto &&i : a)
        scan(i);
}
template <class T> void scan(set<T> &a, int n) {
    for (int i = 0; i < n; i++)
        a.insert(input());
}

template <class T> void scan(T &a) {
    cin >> a;
}
template <class A, class B> ostream &operator<<(ostream &ost, const pair<A, B> &p) {
    ost << "{" << p.first << ", " << p.second << "}";
    return ost;
}
template <class T> ostream &operator<<(ostream &ost, const vector<T> &v) {
    ost << "[";
    for (int i = 0; i < (int)v.size(); i++) {
        if (i)
            ost << ", ";
        ost << v[i];
    }
    ost << "]";
    return ost;
}
template <class A, class B> ostream &operator<<(ostream &ost, const map<A, B> &v) {
    bool k = false;
    ost << "{";
    for (auto p : v) {
        if (k) {
            ost << ", ";
        }
        ost << "(" << p.first << ", " << p.second << ")";
        k = true;
    }
    ost << "}";
    return ost;
}
template <class T> ostream &operator<<(ostream &ost, const set<T> &v) {
    bool k = false;
    ost << "{";
    for (auto p : v) {
        if (k) {
            ost << ", ";
            k = true;
        }
        ost << p;
        k = true;
    }
    ost << "}";
    return ost;
}
template <class T> ostream &operator<<(ostream &ost, const multiset<T> &v) {
    bool k = false;
    ost << "[";
    for (auto p : v) {
        if (k) {
            ost << ", ";
            k = true;
        }
        ost << p;
        k = true;
    }
    ost << "]";
    return ost;
}
template <class T> inline void print(const T &a) {
    cout << a << "\n";
}
template <class T, class... Ts> inline void print(const T &a, const Ts &...ts) {
    cout << a << " ";
    print(ts...);
}
template <class T> inline void print_vec(const vector<T> &a, bool debug = false) {
    for (unsigned i = 0; i < a.size(); ++i) {
        if (debug)
            cout << "[";
        if (i) {
            if (debug)
                cout << ", ";
            else
                cout << " ";
        }
        cout << a[i];
    }
    if (debug)
        cout << "]\n";
    else
        cout << "\n";
}
template <class T> inline void print_vec(const vector<vector<T>> &a, bool debug = false) {
    int n = a.size();
    if (n == 0) {
        if (debug)
            print("[[]]");
        else
            print("");
        return;
    }
    for (int i = 0; i < n; ++i) {
        if (debug)
            cout << "[";
        for (unsigned j = 0; j < a[i].size(); ++j) {
            if (j) {
                if (debug)
                    cout << ", ";
                else
                    cout << " ";
            }
            cout << a[i][j];
        }
        if (debug)
            cout << "]\n";
        else
            cout << "\n";
    }
}
// -----------------------------------------------------------------------
// 関数群
template <class T> vector<T> vec(size_t a) {
    return vector<T>(a);
}
template <class T, class... Ts> auto vec(size_t a, Ts... ts) {
    return vector<decltype(vec<T>(ts...))>(a, vec<T>(ts...));
}
template <typename T> T floor(T a, T b) {
    if (b < 0) {
        a = -a;
        b = -b;
    }
    return a >= 0 ? a / b : (a - b + 1) / b;
}
template <typename T> T ceil(T a, T b) {
    if (b < 0) {
        a = -a;
        b = -b;
    }
    return a >= 0 ? (a + b - 1) / b : a / b;
}

template <class T> inline bool chmax(T &a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}
template <class T> inline bool chmin(T &a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}
template <class T> auto min(const T &a) {
    return *min_element(a.begin(), a.end());
}
template <class T> auto max(const T &a) {
    return *max_element(a.begin(), a.end());
}
template <class ll> long long intpow(ll a, ll b) {
    long long ans = 1;
    while (b) {
        if (b & 1)
            ans *= a;
        a *= a;
        b >>= 1;
    }
    return ans;
}
long long modpow(ll a, ll b, ll p) {
    long long ans = p == 1 ? 0 : 1;
    long long s = a % p;
    while (b) {
        if (b & 1)
            (ans *= s) %= p;
        (s *= s) %= p;
        b >>= 1;
    }
    return ans;
}
template <typename A> A lcm(const vector<A> &a) {
    A res;
    res = a[0];
    for (int i = 1; i < a.size(); i++) {
        res = lcm(res, a[i]);
    }
    return res;
}
template <typename A> A gcd(const vector<A> &a) {
    A res;
    res = a[0];
    for (int i = 1; i < a.size() && res != 1; i++) {
        res = gcd(a[i], res);
    }
    return res;
}
int popcount(int n) {
    return __builtin_popcount(n);
}
int popcount(ll n) {
    return __builtin_popcountll(n);
}
template <typename T> int bit_length(T n) {
    int k = 0;
    while (n) {
        k++;
        n /= 2;
    }
    return k;
}
template <typename A> A isqrt(A n) {
    A a = 0, r = 0;
    for (A s = bit_length(n) - (bit_length(n) % 2 ? 1 : 2); s >= 0; s -= 2) {
        A t = ((n >> s) & 3);
        r = ((r << 2) | t);
        A c = ((a << 2) | 1);
        int b = (r >= c);
        if (b) {
            r -= c;
        }
        a = ((a << 1) | b);
    }
    return a;
}
template <typename T> T add(T a, T b) {
    T res;
    if (a < 0 && b < 0)
        return __builtin_add_overflow(a, b, &res) ? numeric_limits<T>::min() : res;
    return __builtin_add_overflow(a, b, &res) ? numeric_limits<T>::max() : res;
}
template <typename T> T mul(T a, T b) {
    T res;
    if ((a < 0 and b > 0) or (a > 0 and b < 0))
        return __builtin_mul_overflow(a, b, &res) ? numeric_limits<T>::min() : res;
    return __builtin_mul_overflow(a, b, &res) ? numeric_limits<T>::max() : res;
}

template <typename T> int count(const vector<T> &a, const T k) {
    int res = 0;
    for (T val : a)
        if (val == k)
            res++;
    return res;
}

int count(const string &s, const char &k) {
    int res = 0;
    for (char val : s)
        if (val == k)
            res++;
    return res;
}

int count(const string &s, const string &k) {
    int res = 0, n = len(k);
    for (int i = 0; i < len(s) - n + 1; i++)
        if (k == s.substr(i, n)) {
            res++;
            i += n - 1;
        }
    return res;
}

template <typename T> map<T, int> Counter(const vector<T> &a) {
    map<T, int> mp;
    for (T val : a)
        mp[val]++;
    return mp;
}
template <typename S, typename T> vector<T> values(const map<S, T> &mp) {
    int n = mp.size(), i = 0;
    vector<T> res(n);
    for (auto [itm, val] : mp)
        res[i++] = val;
    return res;
}
template <typename S, typename T> vector<S> keys(const map<S, T> &mp) {
    int n = mp.size(), i = 0;
    vector<S> res(n);
    for (auto [itm, val] : mp)
        res[i++] = itm;
    return res;
}
template <typename T> inline bool contain(const vector<T> &a, const T k) {
    return binary_search(a.begin(), a.end(), k);
}

const ll INF = 1e18;
// const ll mod = 1000000007;
const double PI = acos(-1.0);

int main() {
    while (true) {
        int n = input(), m = input();
        if (n == 0)
            break;
        vector<ll> a(n);
        scan(a);
        vector<ll> w(2 * m);
        rep(i, m) {
            cin >> w[i];
            w[i + m] = -w[i];
        }
        vector<ll> s;
        m += m;
        rep(bit, 1 << m) {
            ll k = 0;
            rep(i, m) {
                if ((bit >> i) & 1)
                    k += w[i];
            }
            s.emplace_back(k);
        }
        uniq(s);
        for (auto &k : a) {
            if (contain(s, k)) {
                k = INF;
            }
        }
        Sort(a);
        while (a.size() and a[a.size() - 1] == INF)
            a.pop_back();
        if (a.size() == 0) {
            print(0);
            continue;
        }
        vector<ll> arr;
        ll c = a[0];
        for (auto k : s) {
            if (c - k > 0)
                arr.emplace_back(c - k);
            else
                arr.emplace_back(k - c);
        }
        uniq(arr);
        for (auto b : a) {
            vector<ll> tmp;
            for (auto k : s) {
                ll x;
                if (b - k > 0)
                    x = b - k;
                else
                    x = k - b;
                if (contain(arr, x)) {
                    tmp.emplace_back(x);
                }
            }
            uniq(tmp);
            arr = tmp;
        }
        if (arr.size()) {
            print(arr[0]);
        } else {
            print(-1);
        }
    }
}

