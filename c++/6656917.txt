#include <stdio.h>
#include <stdlib.h>

#define N NULL

struct node
{
    struct node *right;
    struct node *left;
    struct node *parent;
    int key;
};
typedef struct node *Node;

Node root;

Node treeMinimum(Node x)
{
    while (x->left != N)
    {
        x = x->left;
    }

    return x;
}

Node treeMaximum(Node x)
{
    while (x->right != N)
    {
        x = x->right;
    }

    return x;
}

Node treeSearch(Node u, int k)
{
    while (u != N && k != u->key)
    {
        if (k < u->key)
        {
            u = u->left;
        }

        else
        {
            u = u->right;
        }
    }

    return u;
}

Node treeSuccessor(Node x)
{
    if (x->right != N)
    {
        return treeMinimum(x->right);
    }

    Node a = x->parent;

    while (a != N && x == a->parent)
    {
        x = a;
        a = a->parent;
    }

    return a;
}

void treeDelete(Node z)
{
    Node y;
    Node x;

    if (z->left == N || z->right == N)
    {
        y = z;
    }

    else
    {
        y = treeSuccessor(z);
    }

    if (y->left != N)
    {
        x = y->left;
    }

    else
    {
        x = y->right;
    }

    if (x != N)
    {
        x->parent = y->parent;
    }

    if (y->parent == N)
    {
        root = x;
    }

    else
    {
        if (y == y->parent->left)
        {
            y->parent->left = x;
        }

        else
        {
            y->parent->right = x;
        }
    }

    if (y != z)
    {
        z->key = y->key;
    }

    free(y);
}

void insert(int k)
{
    Node y = N;
    Node x = root;
    Node z;

    z = malloc(sizeof(struct node));
    z->key = k;
    z->left = N;
    z->right = N;

    while (x != N)
    {
        y = x;

        if (z->key < x->key)
        {
            x = x->left;
        }

        else
        {
            x = x->right;
        }
    }

    z->parent = y;

    if (y == N)
    {
        root = z;
    }

    else
    {
        if (z->key < y->key)
        {
            y->left = z;
        }

        else
        {
            y->right = z;
        }
    }
}

void inorder(Node u)
{
    if (u == N)
    {
        return;
    }

    inorder(u->left);

    printf(" %d", u->key);

    inorder(u->right);
}

void preorder(Node u)
{
    if (u == N)
    {
        return;
    }

    printf(" %d", u->key);

    preorder(u->left);

    preorder(u->right);
}

int main()
{
    int n, i, x;
    char com[20];

    scanf("%d", &n);

    for (i = 0; i < n; i++)
    {
        scanf("%s", com);

        if (com[0] == 'f')
        {
            scanf("%d", &x);

            Node t = treeSearch(root, x);

            if (t != N)
            {
                printf("yes\n");
            }

            else
            {
                printf("no\n");
            }
        }

        else if (com[0] == 'i')
        {
            scanf("%d", &x);
            insert(x);
        }

        else if (com[0] == 'p')
        {
            inorder(root);
            printf("\n");
            preorder(root);
            printf("\n");
        }

        else if (com[0] == 'd')
        {
            scanf("%d", &x);
            treeDelete(treeSearch(root, x));
        }

        else
        {
            ;
        }
    }

    return 0;
}
