#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#define _GLIBCXX_DEBUG
using namespace std;
using std::cout;
using std::cin;
using std::endl;
using ll=long long;
using ld=long double;
ll ILL=2167167167167167167;
const int INF=1050000000;
const ll mod=1e9+7;
#define rep(i,a) for (ll i=0;i<a;i++)
#define all(p) p.begin(),p.end()
template<class T> using _pq = priority_queue<T, vector<T>, greater<T>>;
template<class T> ll LB(vector<T> &v,T a){return lower_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> ll UB(vector<T> &v,T a){return upper_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> bool chmin(T &a,const T &b){if(a>b){a=b;return 1;}else return 0;}
template<class T> bool chmax(T &a,const T &b){if(a<b){a=b;return 1;}else return 0;}
template<class T> void So(vector<T> &v) {sort(v.begin(),v.end());}
template<class T> void Sore(vector<T> &v) {sort(v.begin(),v.end(),[](T x,T y){return x>y;});}
void yneos(bool a){if(a) cout<<"Yes\n"; else cout<<"No\n";}
template<class T> void vec_out(vector<T> &p){for(int i=0;i<(int)(p.size());i++){if(i) cout<<" ";cout<<p[i];}cout<<"\n";}

int N,M;

void solve();
// oddloop
int main() {
	while(cin>>N>>M,M) solve();
}

void solve(){
	vector<int> S(N),D(M);
	rep(i,N) cin>>S[i];
	rep(i,M) cin>>D[i];
	vector<int> sum(1<<N),dp(1<<N,INF);
	rep(i,(1<<N)){
		rep(j,N) if(i&(1<<j)) sum[i]+=S[j];
	}
	So(D);
	D.push_back(INF);
	dp[0]=0;
	rep(i,(1<<N)){
		int f=LB(D,sum[i]);
		rep(j,N){
			if(i&(1<<j)) continue;
			int g=LB(D,sum[i]+S[j]);
			int tmp=dp[i];
			for(int k=f;k<g;k++){
				tmp+=min(D[k]-sum[i],sum[i]+S[j]-D[k]);
			}
			chmin(dp[i+(1<<j)],tmp);
		}
	}
	int ans=dp[(1<<N)-1];
	rep(i,M){
		ans+=max(0,D[i]-sum[(1<<N)-1]);
	}
	cout<<ans<<"\n";
}

