#include<stdio.h>
#define N 100005
#define NIL -1
typedef struct Node {
	int parent;    // 親
	int left;      // 左の子
	int right;     // 右の兄弟
} node;

node T[N];
int n;         // 節点の個数
int D[N];      // それぞれの節点の深さを格納

// node, parent, depth, type, 子のリストを表示する
void print(int u)
{
	int i, c;
	
	printf("node %d: parent = %d, depth = %d, ", u, T[u].parent, D[u]);
	
	if( T[u].parent == NIL ) printf("root,");
	else if( T[u].left == NIL ) printf("leaf,");
	else printf("internal node,");
	
	printf("[");
	for(i = 0, c = T[u].left; c != NIL;i++ )  // 子のリストを表示するので，最初に表示するのはT[0].leftになる．
	{
		if(i) printf(", ");
		printf("%d", c);
		
		c = T[c].right;  // T[u].lにとってのすぐ右の兄弟
	}
	
	printf("]\n");
}

// 節点uの深さがpのとき，再帰的に深さを求める
void depth_search(int u, int p)
{
	D[u] = p;
	if(T[u].right != NIL) depth_search(T[u].right, p);    // 右の兄弟がいるとき，その節点を深さpとする
	if(T[u].left != NIL) depth_search(T[u].left, p+1);  // 左の子（左下）がいるとき，uはその親で，子の節点の深さは+1
}

int main(void)
{
	int i, j, d, v, c, l, r;
	
	scanf("%d", &n);
	for(i = 0; i < n; i++)
	{
		T[i].parent = T[i].left = T[i].right = NIL;
	}
	
	for(i = 0; i < n; i++)
	{
		scanf("%d %d", &v, &d);     // id と次数を読み込む
		for(j = 0; j < d; j++)      // 次数分繰り返し
		{
			scanf("%d", &c);
			if(j == 0) T[v].left = c;  // 節点番号id の一番目の子(左の子)のときその子の節点番号を代入
			else T[l].right = c;
			l = c;
			T[c].parent = v;
		}
	}
	
	for(i = 0; i < n; i++)
	{
		if(T[i].parent == NIL) r = i;   // 根探し
	}
	
	depth_search(r, 0);   // 深さを求める
	
	for(i = 0; i < n; i++) print(i);
	
	return 0;
}

