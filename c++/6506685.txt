#include <iostream>
#include <string>
#include <vector>
#include <climits>
#include <algorithm>
#include <sstream>

#include <functional>


//#include <windows.h>
//#pragma comment(lib, "winmm.lib")

using namespace std;
typedef long Int;

Int N = 0;
long long Ans = 0;
ostringstream Oss;

// 出力

void output()
{
    //bool isON = false;
    //for (Int i = 0; i < N; ++i) {
    //    if (isON) cout << " ";  else isON = true;
    //    cout << A[i];
    //}
    //cout << "\n";

    cout << Ans << "\n";
}

// 解析

void analysis()
{
    long long C;
    vector<Int> A(100);  // 単価
    vector<Int> B(100);  // 既存量
    vector<Int> X(100);  // 割合

    cin >> C;
    for (Int i = 0; i < N; ++i) cin >> A[i];
    for (Int i = 0; i < N; ++i) cin >> B[i];
    for (Int i = 0; i < N; ++i) cin >> X[i];

    // 単位当たりのスパイス量
    Int u = 0;
    for (Int i = 0; i < N; ++i) u += X[i];

    // 既存スパイスが無くなるまでの計算
    for (;;) {
        Int nmin = 0;           // 同一金額で作成できるスパイスの数
        long long m = 0;        // 1単位分のスパイスの金額
        for (Int i = 0; i < N; ++i) {
            Int x = 0;
            if (B[i] >= X[i]) {
                x = 0;
                Int n = B[i] / X[i];
                if (n < nmin || nmin == 0) nmin = n;
            }
            else {
                x = X[i] - B[i];
                if (B[i] > 0) nmin = 1;
            }
            m += A[i] * x;
        }

        // 既存スパイスが無い、または残金不足なら終了
        if (nmin == 0 || C < m) break;

        // 残りの計算
        for (Int i = 0; i < N; ++i) {
            if (B[i] >= X[i]) {
                B[i] -= X[i] * nmin;
            }
            else if (B[i] > 0) {
                B[i] = 0;
            }
        }
        C -= m * nmin;
        Ans += u * nmin;
    }

    // 既存スパイスが無くなってからの計算
    long long m = 0;        // 1単位分のスパイスの金額
    for (Int i = 0; i < N; ++i) m += A[i] * X[i];
    long long n = C / m;
    Ans += u * n;
}

int main()
{
	cin.tie(0);						// cin高速化
	ios::sync_with_stdio(false);	// cin高速化

	cin >> N;

	//long sTime = timeGetTime();	// スタート時間

    // 解析

    analysis();

	// 出力

    output();

    //cout << Oss.str() << "\n";
    //cout << "処理時間 " << (double)(timeGetTime() - sTime) / 1000 << "秒\n";
}
