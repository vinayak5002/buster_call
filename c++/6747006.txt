#include <bits/stdc++.h>

using i64 = long long;

template<typename T>
struct SegmentTreeLazy {
    const int n;
    std::vector<T> info, lazy;
    SegmentTreeLazy(int n) : n(n), info(4 << std::__lg(n), 0), lazy(4 << std::__lg(n), 0) {}
    void pull(int p) {
        info[p] = info[2 * p] + info[2 * p + 1];
    }
    void pull_lazy(int p, int l, int r) {
        if (lazy[p]) {
            info[p] += lazy[p] * (r - l);
            if (2 * p + 1 < int(lazy.size())) {
                lazy[2 * p] += lazy[p];
                lazy[2 * p + 1] += lazy[p];
            }
            lazy[p] = 0;
        }
    }
    void add(int p, int l, int r, int x, int y, T v) {
        pull_lazy(p, l, r);
        if (l >= y || r <= x) {
            return;
        }
        if (x <= l && r <= y) {
            lazy[p] += v;
            pull_lazy(p, l, r);
            return;
        }
        int m = (l + r) / 2;
        add(2 * p, l, m, x, y, v);
        add(2 * p + 1, m, r, x, y, v);
        pull(p);
    }
    void add(int x, int y, T v) {
        add(1, 0, n, x, y, v);
    }
    T get(int p, int l, int r, int x, int y) {
        pull_lazy(p, l, r);
        if (l >= y || r <= x) {
            return 0;
        }
        if (x <= l && r <= y) {
            return info[p];
        }
        int m = (l + r) / 2;
        return get(2 * p, l, m, x, y) + get(2 * p + 1, m, r, x, y);
    }
    T get(int x, int y) {
        return get(1, 0, n, x, y);
    }
};

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);

	int N, Q;
	std::cin >> N >> Q;
	SegmentTreeLazy<i64> sglz(N);
	for (int i = 0; i < Q; ++i) {
		int O;
		std::cin >> O;
		if (!O) {
			int S, T, X;
			std::cin >> S >> T >> X;
			--S, --T;
			sglz.add(S, T + 1, X);
		} else {
			int S, T;
			std::cin >> S >> T;
			--S, --T;
			std::cout << sglz.get(S, T + 1) << "\n";
		}
	}

    return 0;
}

