#include <iostream>
#include <queue>
#define maxn 1000
char space[maxn][maxn];
int map[maxn][maxn];
int H, W, N, res, s_h, s_w;
std::pair<int, int> position[4] = {{-1, 0}, {0, 1}, {0, -1}, {1, 0}};
void init(){
	for(int r = 0; r < H; ++r)
		for(int c = 0; c < W; ++c){
			std::cin >> space[r][c];
			if(space[r][c] == 'S'){s_h = r; s_w = c;}
		}
}
bool check(int dr, int dc){
	return (0 <= dr && dr < H && 0 <= dc && dc < W);
}
void bfs(int i){
	memset(map, -1, sizeof(map));
	std::queue<std::pair<int, int>> que;
	que.push({s_h, s_w});
	map[s_h][s_w] = 0;
	while(!que.empty()){
		std::pair<int, int> p = que.front(); que.pop();
		for(int d = 0; d < 4; ++d){
			int dr = p.first + position[d].first;
			int dc = p.second + position[d].second;
			if(check(dr, dc) && space[dr][dc] != 'X' && map[dr][dc] == -1){
				if(space[dr][dc] == '0' + i){
					s_h = dr;
					s_w = dc;
					res += map[p.first][p.second] + 1; return;
				}
				else{
					map[dr][dc] = map[p.first][p.second] + 1;
					que.push({dr, dc});
				}
			}
		}
	}
	return;
}
int main(int argc, char *argv[]){
	std::cin >> H >> W >> N;
	init();
	res = 0;
	for(int o = 1; o <= N; ++o){
		bfs(o);
	}
	std::cout << res << std::endl;
}
