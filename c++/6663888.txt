#define READ_FROM_FILE 0

#if READ_FROM_FILE
#include <fstream>
#endif

#include <iostream>
#include <vector>
using namespace std;

#define ROOT (0)
#define INTERNAL_NODE (1)
#define LEAF (2)


class Node {
public:
	int parent;
	int left;
	int right;

	Node() : parent(-1), left(-1), right(-1) {
		return;
	}

	~Node() {
		return;
	}

	int get_type() {
		if (parent == -1) {
			return ROOT;
		}
		else if (left != -1 || right != -1) {
			return INTERNAL_NODE;
		}
		else {
			return LEAF;
		}
	}

};

int get_root(const vector<Node>& nodes, int i) {
	int root = -1;
	for (unsigned int i = 0; i < nodes.size(); i++) {
		if (nodes[i].parent == -1) {
			root = i;
			break;
		}
	}
	return root;
}

void print_preorder(const vector<Node>& nodes, int i) {
	int lid = nodes[i].left;
	int rid = nodes[i].right;

	cout << " " << i;

	if (lid >= 0) {
		print_preorder(nodes, lid);
	}
	if (rid >= 0) {
		print_preorder(nodes, rid);
	}

}

void print_inorder(const vector<Node>& nodes, int i) {
	int lid = nodes[i].left;
	int rid = nodes[i].right;

	if (lid >= 0) {
		print_inorder(nodes, lid);
	}

	cout << " " << i;

	if (rid >= 0) {
		print_inorder(nodes, rid);
	}
}

void print_postorder(const vector<Node>& nodes, int i) {
	int lid = nodes[i].left;
	int rid = nodes[i].right;

	if (lid >= 0) {
		print_postorder(nodes, lid);
	}
	if (rid >= 0) {
		print_postorder(nodes, rid);
	}
	cout << " " << i;
}


int main() {
#if READ_FROM_FILE
	ifstream ifs("test0.txt");
	cin.rdbuf(ifs.rdbuf());
#endif
	int n = 0;
	vector<Node> node_vec;
	int root = 0;

	cin >> n;
	node_vec.resize(n);
	for (int i = 0; i < n; i++) {
		int id = -1;
		int left = -1;
		int right = -1;

		cin >> id >> left >> right;
		node_vec[id].left = left;
		node_vec[id].right = right;

		if (left >= 0) {
			node_vec[left].parent = id;
		}
		if (right >= 0) {
			node_vec[right].parent = id;
		}
	}

	root = get_root(node_vec, 0);

	cout << "Preorder" << endl;
	print_preorder(node_vec, root);
	cout << endl;

	cout << "Inorder" << endl;
	print_inorder(node_vec, root);
	cout << endl;

	cout << "Postorder" << endl;
	print_postorder(node_vec, root);
	cout << endl;
	return 0;
}
