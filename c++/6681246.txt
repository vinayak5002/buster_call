#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <tuple>
#include <string>
#include <climits>
#include <random>
using namespace std;
#define ll long long
#define pii pair<int, int>
#define pll pair<long, long>
#define vi vector<int>
#define vl vector<long long>
#define vc vector<char>
#define vs vector<string> 
#define vb vector<bool>
#define vvi vector<vector<int>> 
#define vvl vector<vector<long long>>
#define vvc vector<vector<char>>
#define vvs vector<vector<string>>
#define vvb vector<vector<bool>>
#define vvvl vector<vector<vector<long long>>>
#define rep(i, n) for(int i = 0 ; i < (n); i++)
#define all(c) c.begin(), c.end()
#define puf push_front
#define pub push_back
#define ef emplace_front
#define eb emplace_back
#define pof pop_front
#define pob pop_back
template <typename T> bool chmax(T &a, T b) { if (a < b) { a = b; return true; } else return false; }
template <typename T> bool chmin(T &a, T b) { if (a > b) { a = b; return true; } else return false; }
const int mod = 1000000007;
//const int mod = 998244353;
const int inf = 1 << 30;
//const ll inf = 1LL << 62;
int dx[] = {1, 0, -1, 0};
int dy[] = {0, -1, 0, 1};

template <typename T>
struct BIT {
    int n;
    vector<vector<T>> bit;
    BIT(int n_) { init(n_); }
    void init(int n_) {
        n = n_ + 1;
        bit.resize(2);
        for (int p = 0; p < 2; p++) bit[p].assign(n, 0);
    }

    void add_sub(int p, int i, T x) {
        for (int idx = i; idx < n; idx += (idx & -idx)) {
            bit[p][idx] += x;
        }
    }

    // [l, r)の区間にxを可算
    void add(int l, int r, T x) {
        add_sub(0, l, -x * (l - 1));
        add_sub(0, r, x * (r - 1));
        add_sub(1, l, x);
        add_sub(1, r, -x);
    }

    T sum_sub(int p, int i) {
        T s(0);
        for (int idx = i; idx > 0; idx -= (idx & -idx)) {
            s += bit[p][idx];
        }
        return s;
    }

    // iの値を取得
    T sum(int i) { return sum_sub(0, i) + sum_sub(1, i) * i; }

    // [l, r)の区間和を取得
    T query(int l, int r) { return sum(r - 1) - sum(l - 1); }
};

int main() {
    int n, q; cin >> n >> q;
    BIT<int> bit(n);
    vi ans;
    while (q--) {
        int t; cin >> t;
        if (t == 0) {
            int s, t, x; cin >> s >> t >> x;
            bit.add(s, t + 1, x);
        } else {
            int s, t; cin >> s >> t;
            ans.eb(bit.query(s, t + 1));
        }
    }
    for (int i = 0; i < ans.size(); i++) cout << ans[i] << endl;
    return 0;
}
