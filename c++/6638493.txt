#include <iostream>
#include <cstdio>
#include <iterator>
#include <string>
#include <sstream>
#include <bitset>
#include <vector>
#include <array>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
#define _USE_MATH_DEFINES  // for M_PI
#include <cmath>
using std::cin;
using std::cout;
using std::endl;
using std::string;
using std::bitset;
using std::vector;
using std::array;
using std::stack;
using std::queue;
using std::set;
using std::map;
using std::pair;
using llong = long long;
template<typename T>
using nlimits = std::numeric_limits<T>;
#define REP(i, n) for (int i = 0; i < static_cast<int>(n); ++i)
#define RREP(i, n) for (int i = static_cast<int>(n) - 1; i >= 0; --i)
#define FOR(i, a, b) for (int i = static_cast<int>(a); i < static_cast<int>(b); ++i)
#define RFOR(i, a, b) for (int i = static_cast<int>(a) - 1; i >= static_cast<int>(b); --i)
constexpr int INF = 1001001001;
constexpr llong LINF = 1001001001001001001ll;

template<typename T>
void PrintArray(const T* a, const size_t n);


int N_V, N_E;
const int MAX_N = 15;
array<array<int, MAX_N>, MAX_N> CL;
array<array<int, MAX_N + 1>, (1 << MAX_N) + 1> DP;


void solve() {
    REP(i, 1 << MAX_N) DP[i].fill(INF);
    DP[0][0] = 0;

    REP(bit, 1 << N_V) REP(j, N_V) REP(i, N_V) {
        if (bit != 0 && !(bit & (1 << i))) continue;
        if ((bit & (1 << j)) == 0 && i != j) {
            // i -> j
            // DP[S | {j}][j] = min_{i in S} (DP[S][i] + cost(i, j))
            DP[bit | (1 << j)][j] = std::min(DP[bit | (1 << j)][j], DP[bit][i] + CL[i][j]);
        } 
    }

    if (DP[(1 << N_V) - 1][0] >= INF) cout << -1 << endl;
    else cout << DP[(1 << N_V) - 1][0] << endl;
}


int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> N_V >> N_E;

    REP(i, MAX_N) CL[i].fill(INF);
    REP(i, N_E) {
        int s, t, d;
        cin >> s >> t >> d;
        CL[s][t] = d;
    }

    solve();
}


template<typename T>
void PrintArray(const T* a, const size_t n) {
    string s = std::to_string(a[0]);
    FOR(i, 1, n) s += " " + std::to_string(a[i]);
    cout << s + "\n";
}

