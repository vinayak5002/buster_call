#include <bits/extc++.h>

using namespace std;

#define rep(i,n) for(int i=0;i<(n);++i)
#define reps(i,s,n) for(int i=(s);i<=(n);++i)
#define all(x) begin(x), end(x)
#define Fixed fixed << setprecision(12)
#define updiv(a,b) ((a + b - 1) / b)
constexpr int INF  = 0x3f3f3f3f;
constexpr long long LINF = 0x3f3f3f3f3f3f3f3fLL;
constexpr int mod = 1e9+7;
// constexpr int mod = 998244353;

template <class Func>
class FixPoint : Func {
public:
    explicit constexpr FixPoint(Func&& f) noexcept : Func(forward<Func>(f)) {}

    template <class... Args>
    constexpr decltype(auto) operator()(Args&&... args) const {
        return Func::operator()(*this, std::forward<Args>(args)...);
    }
};

template <class Func>
static inline constexpr decltype(auto) makeFixPoint(Func&& f) noexcept {
    return FixPoint<Func>{forward<Func>(f)};
}

template <class A, class B> inline bool chmax(A &a, const B &b) { return b > a && (a = b, true); }
template <class A, class B> inline bool chmin(A &a, const B &b) { return b < a && (a = b, true); }

template <class T> using max_heap = priority_queue<T>;
template <class T> using min_heap = priority_queue<T,vector<T>,greater<T> >;
template <class A, class B> using umap = unordered_map<A,B>;
template <class A, class B> using uset = unordered_set<A,B>;

template <class T> using Set = __gnu_pbds::tree<T, __gnu_pbds::null_type, less<T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;

template <class T> inline void bye(T x) { cout << x << '\n'; exit(0); }

constexpr int dx[] = {1, 0, -1, 0, 1, 1, -1, -1};
constexpr int dy[] = {0, -1, 0, 1, 1, -1, -1, 1};

struct RollingHash {
    static const uint64_t mod = (1ull << 61ull) - 1;
    using uint128_t = __uint128_t;
    vector< uint64_t > power;
    const uint64_t base;

    static inline uint64_t add(uint64_t a, uint64_t b) {
        if((a += b) >= mod) a -= mod;
        return a;
    }

    static inline uint64_t mul(uint64_t a, uint64_t b) {
        uint128_t c = (uint128_t) a * b;
        return add(c >> 61, c & mod);
    }

    static inline uint64_t generate_base() {
        mt19937_64 mt(chrono::steady_clock::now().time_since_epoch().count());
        uniform_int_distribution< uint64_t > rand(1, RollingHash::mod - 1);
        return rand(mt);
    }

    inline void expand(size_t sz) {
        if(power.size() < sz + 1) {
            int pre_sz = (int) power.size();
            power.resize(sz + 1);
            for(int i = pre_sz - 1; i < sz; i++) {
                power[i + 1] = mul(power[i], base);
            }
        }
    }

    explicit RollingHash(uint64_t base = generate_base()) : base(base), power{1} {}

    vector< uint64_t > build(const string &s) const {
        int sz = s.size();
        vector< uint64_t > hashed(sz + 1);
        for(int i = 0; i < sz; i++) {
            hashed[i + 1] = add(mul(hashed[i], base), s[i]);
        }
        return hashed;
    }

    template< typename T >
    vector< uint64_t > build(const vector< T > &s) const {
        int sz = s.size();
        vector< uint64_t > hashed(sz + 1);
        for(int i = 0; i < sz; i++) {
            hashed[i + 1] = add(mul(hashed[i], base), s[i]);
        }
        return hashed;
    }

    uint64_t query(const vector< uint64_t > &s, int l, int r) {
        expand(r - l);
        return add(s[r], mod - mul(s[l], power[r - l]));
    }

    uint64_t combine(uint64_t h1, uint64_t h2, size_t h2len) {
        expand(h2len);
        return add(mul(h1, power[h2len]), h2);
    }

    int lcp(const vector< uint64_t > &a, int l1, int r1, const vector< uint64_t > &b, int l2, int r2) {
        int len = min(r1 - l1, r2 - l2);
        int low = 0, high = len + 1;
        while(high - low > 1) {
            int mid = (low + high) / 2;
            if(query(a, l1, l1 + mid) == query(b, l2, l2 + mid)) low = mid;
            else high = mid;
        }
        return low;
    }
};

signed main() {
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);

    string s;
    int q;
    
    cin >> s >> q;

    int n = s.size();
    int sqn = ceil(sqrt(n));

    RollingHash rh;
    auto hash = rh.build(s);

    vector<vector<vector<vector<int> > > > cnt(sqn + 1);

    for (int len = 1; len <= sqn; ++len) {
        cnt[len].resize(len);
        for (int ofs = 0; ofs < len; ++ofs) {
            cnt[len][ofs].resize((n - ofs - 1) / len + 1);
            for (int i = 0; i <= (n - ofs - 1) / len; ++i) {
                cnt[len][ofs][i].resize(26);
                cnt[len][ofs][i][s[ofs + len * i] - 'a']++;
            }
        }
    }
    for (int len = 1; len <= sqn; ++len) {
        for (int ofs = 0; ofs < len; ++ofs) {
            for (int i = 1; i <= (n - ofs - 1) / len; ++i) {
                for (int j = 0; j < 26; ++j) {
                    cnt[len][ofs][i][j] += cnt[len][ofs][i - 1][j];
                    // cout << cnt[len][ofs][i][j] << ' ';
                }
                // cout << endl;
            }
        }
    }

    for (int loop = 0; loop < q; ++loop) {
        int l, r, t;
        cin >> l >> r >> t;
        --l, --r;
        if (t <= sqn) {
            int ng_cnt = 0;
            for (int i = 0; i < t; ++i) {
                int offset = (l + i) % t;
                int left = (l + i - offset) / t;
                int right = left + (r - l - i) / t;
                int correct = right - left + 1;
                char origin = s[l + i];
                // int val = cnt[i][offset][right][origin - 'a'] - ((l - offset) / t + i == 0 ? 0 : cnt[i][offset][(l - offset) / t + i - 1][origin - 'a']);
                int val = cnt[t][offset][right][origin - 'a'] - (left == 0 ? 0 : cnt[t][offset][left - 1][origin - 'a']);
                // cout << i << ' ' << offset << ' ' << left << ' ' << right << ' ' << correct  << ' ' << val << '\n';
                ng_cnt += correct - val;
            }
            if (ng_cnt <= 1) cout << "Yes\n";
            else cout << "No\n";
        } else {
            int orl = l, orr = l + t, ng_cnt = 0, left, right;
            auto origin = rh.query(hash, orl, orr);
            for (int i = 1; i < (r - l + 1) / t; ++i) {
                int nl = orl + t * i, nr = orr + t * i;
                if (origin != rh.query(hash, nl, nr)) {
                    // cout << nl << ' ' << nr << '\n';
                    if (ng_cnt > 0) goto ng;
                    ++ng_cnt;
                    int lcp1 = rh.lcp(hash, orl, orr, hash, nl, nr);
                    int lcp2 = rh.lcp(hash, orl + lcp1, orr, hash, nl + lcp1, nr);
                    if (lcp1 + lcp2 + 1 != t) goto ng;
                }
            }
            left = orl + t * ((r - l + 1) / t), right = n;
            orr = orl + (right - left + 1);
            origin = rh.query(hash, orl, orr);
            if (origin != rh.query(hash, left, right)) {
                if (ng_cnt > 0) goto ng;
                ++ng_cnt;
                int lcp1 = rh.lcp(hash, orl, orr, hash, left, right);
                int lcp2 = rh.lcp(hash, orl + lcp1, orr, hash, left + lcp1, right);
                if (lcp1 + lcp2 + 1 != t) goto ng;
            }
            cout << "Yes\n";
            break;
            ng:;
            cout << "No\n";
        }
    }

    return(0);
}


