#include <bits/stdc++.h>
#define rep(i, st, n) for (ll i = (ll)st; i < (ll)st + (ll)n; i++)
#define repd(i, st, gl, c) for(ll i = ll(st); i <= ll(gl); i += ll(c))
#define rrep(i, st, n) for (ll i = (ll)st; i > (ll)st - (ll)n; i--)
#define rrepd(i, st, gl, c) for(ll i = ll(st); i >= ll(gl); i -= ll(c))
#define fi first
#define se second
#define pb push_back
using namespace std;
using ll = long long;
using Graph = vector<vector<ll>>;
ll a, n, cnt, ans, h, w;
const ll inf = 1e18;
vector<string> field;

const ll dx[8] = {1, 0, -1, 0, 1, 1, -1, -1};
const ll dy[8] = {0, 1, 0, -1, 1, -1, 1, -1};
bool seen[509][509];

void dfs(ll y, ll x){
    seen[y][x] = true;

    rep(i, 0, 8){
        ll ny = y + dy[i];
        ll nx = x + dx[i];

        if(ny < 0 || ny >= h || nx < 0 || nx >= w) continue;
        if(field[ny][nx] == '0') continue;
        if(seen[ny][nx]) continue;

        dfs(ny, nx);
    }
}

int main(){
    while(true){
        cin >> w >> h;
        if(h == 0 && w == 0) break;
        field.resize(h + 1);
      	
      
        rep(i, 0, h){
            rep(j, 0, w){
              	char c;
             	cin >> c;
                field[i].pb(c);
            }
        }
        
      	
        rep(i, 0, h){
            rep(j, 0, w){
                seen[i][j] = false;
            }
        }
        
        ans = 0;
        rep(i, 0, h){
            rep(j, 0, w){
                if(seen[i][j] == false && field[i][j] == '1'){
                    ans++;
                    dfs(i, j);
                }
            }
        } 
        cout << ans << endl;
    }
    
    
}
