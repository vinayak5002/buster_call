#include <bits/stdc++.h>
using namespace std;

int main(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  while(1){
    int n;
    cin >> n;
    if(n==0) return 0;
    vector<int> w(n);
    for(int i = 0; i < n; i++) cin >> w[i];
    int inf = n+1;
    vector<vector<int>> dp(n,vector<int>(n,-1));
    function<int(int,int)> f =
      [&](int l, int r){
	if(l < 0 || r >= n) return 0;
	if(r==l) return dp[r][r] = 0;
	if(r==l+1) return dp[l][r] = abs(w[l]-w[r])<=1?2:0;
	if(dp[l][r] != -1) return dp[l][r];
	for(int i = l; i < r; i++){
	  dp[l][r] = max(dp[l][r], f(l,i)+f(i+1,r));
	}
	for(int i = l+1; i <= r; i++){
	  for(int j = i; j+1 <= r; j++){
	    if(abs(w[i-1]-w[j+1]) >= 2) continue;
	    if(f(i,j) != (j-i+1)) continue;
	    int tmp = 2+(j-i+1);
	    if(i-2 >= l) tmp += f(l,i-2);
	    if(j+2 <= r) tmp += f(j+2,r);
	    dp[l][r] = max(dp[l][r],tmp);
	  }
	}
	return dp[l][r];
      };
    int ans = 0;
    f(0,n-1);
    for(int i = 0; i < n; i++){
      for(int j = 0; j < n; j++){
	ans = max(ans, dp[i][j]);
      }
    }
    cout << ans << endl;
  }
}

