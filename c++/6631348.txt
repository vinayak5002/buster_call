#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

#define rep(i, a, b) for(ll i = (ll)a; i < (ll)b; i++)
#define irep(i, v) for(auto i = (v).begin(); i != (v).end(); i++)
#define ALL(v) (v).begin(), (v).end()
#define SZ(v) (ll)(v).size()

const ll INF = 1e18;
const ld EPS = 1e-10;
const ll MOD = 1e9 + 7;
const ld PI = M_PI;

ll n;
vector<ld> vec;
vector<ld> sum;
ld dp[1000 + 10][1000 + 10];

ld rec(ll a, ll b){
    if(a > b) return 0.0;
    if(a == b) return dp[a][b] = vec[a];
    if(dp[a][b] > 0) return dp[a][b];

    ld res = INF;
    for(ll i = a + 1; i < b; i++){
        res = min(res, rec(a, i - 1) + rec(i + 1, b));
    }
    res += sum[b + 1] - sum[a];
    return dp[a][b] = res;
}

int main(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  srand((unsigned)time(NULL));
  cout << fixed << setprecision(20);

  cin >> n;
  vector<ld> p(n), q(n + 1);
  rep(i, 0, n) cin >> p[i];
  rep(i, 0, n + 1) cin >> q[i];
  vec.push_back(q[0]);
  rep(i, 0, n){
      vec.push_back(p[i]);
      vec.push_back(q[i + 1]);
  }
  sum.push_back(0);
  rep(i, 0, SZ(vec)){
      sum.push_back(vec[i] + sum.back());
  }

  rep(i, 0, 1000 + 10){
      rep(j, 0, 1000 + 10){
          dp[i][j] = -1;
      }
  }

  cout << rec(0, 2 * n) << endl;





  return 0;
}
