#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#define _GLIBCXX_DEBUG
using namespace std;
using std::cout;
using std::cin;
using std::endl;
using ll=long long;
using ld=long double;
ll ILL=2167167167167167167;
const int INF=2100000000;
const ll mod=1e9+7;
#define rep(i,a) for (ll i=0;i<a;i++)
#define all(p) p.begin(),p.end()
template<class T> using _pq = priority_queue<T, vector<T>, greater<T>>;
template<class T> ll LB(vector<T> &v,T a){return lower_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> ll UB(vector<T> &v,T a){return upper_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> bool chmin(T &a,const T &b){if(a>b){a=b;return 1;}else return 0;}
template<class T> bool chmax(T &a,const T &b){if(a<b){a=b;return 1;}else return 0;}
template<class T> void So(vector<T> &v) {sort(v.begin(),v.end());}
template<class T> void Sore(vector<T> &v) {sort(v.begin(),v.end(),[](T x,T y){return x>y;});}
void yneos(bool a){if(a) cout<<"Yes\n"; else cout<<"No\n";}
template<class T> void vec_out(vector<T> &p){for(int i=0;i<(int)(p.size());i++){if(i) cout<<" ";cout<<p[i];}cout<<"\n";}

namespace po167{
template<class Cap,class Cost>
struct min_cost_flow
{
	struct edge{
		int to;
		Cap cap;
		Cost cost;
	};
	std::vector<std::vector<edge>> G;
	std::vector<std::vector<int>> rev_edge;
	std::vector<std::pair<int,int>> edge_order;
	int _n;
	min_cost_flow(int n):G(n),rev_edge(n),_n(n){}
	int add_edge(int from,int to,Cap cap,Cost cost){
		assert(0<=from&&from<_n);
		assert(0<=to&&to<_n);
		edge_order.push_back({from,(int)(G[from].size())});
		rev_edge[to].push_back((int)(G[from].size()));
		G[from].push_back((edge){to,cap,cost});
		rev_edge[from].push_back((int)(G[to].size()));
		G[to].push_back((edge){from,(Cap)0,-cost});
		return (int)(edge_order.size());
	}
	std::vector<Cost> min_cost_slope(int s,int t){
		assert(0<=s&&s<_n);
		assert(0<=t&&t<_n);
		std::vector<Cost> ans={0};
		std::vector<Cost> pot(_n);
		while(true){
			std::priority_queue<std::pair<Cost,int>,std::vector<std::pair<Cost,int>>,std::greater<std::pair<Cost,int>>> pq;
			std::vector<int> front(_n);
			std::vector<Cost> seen(_n,std::numeric_limits<Cost>::max());
			seen[s]=0;
			pq.push({0,s});
			while(!pq.empty()){
				Cost time;
				int ind;
				Cost n_time;
				std::tie(time,ind)=pq.top();
				pq.pop();
				if(seen[ind]<time) continue;
				for(int i=0;i<(int)(G[ind].size());i++){
					auto x=G[ind][i];
					if(x.cap==0) continue;
					n_time=time+x.cost+pot[ind]-pot[x.to];
					if(seen[x.to]>n_time){
						seen[x.to]=n_time;
						front[x.to]=rev_edge[ind][i];
						pq.push({n_time,x.to});
					}
				}
			}
			/*for(int i=0;i<_n;i++){
				cout<<seen[i]<<" ";
			}
			cout<<endl;*/
			if(seen[t]==std::numeric_limits<Cost>::max()){
				break;
			}
			int ind=t;
			while(ind!=s){
				G[ind][front[ind]].cap++;
				int f=G[ind][front[ind]].to;
				G[f][rev_edge[ind][front[ind]]].cap--;
				ind=f;
			}
			ans.push_back(pot[t]-pot[s]+seen[t]);
			std::swap(pot,seen);
		}
		for(int i=1;i<(int)(ans.size());i++) ans[i+1]+=ans[i];
		return ans;
	}
	std::pair<Cap,Cost> flow(int s,int t){
		auto tmp=min_cost_slope(s,t);
		int x=tmp.size();
		return {(Cap)(x-1),tmp[x-1]};
	}
	std::pair<Cap,Cost> flow(int s,int t,Cap f){
		auto tmp=min_cost_slope(s,t);
		int x=tmp.size();
		x--;
		if(x>f) x=f;
		return {(Cap)(x),tmp[x]};
	}
	std::tuple<int,int,Cap> report_edge(int i){
		int x,y;
		std::tie(x,y)=edge_order[i];
		int t=G[x][y].to;
		return {x,t,G[t][rev_edge[x][y]].cap};
	}
};
};

int N;

void solve();
// oddloop
int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	
	while(cin>>N,N) solve();
}

void solve(){
	vector<vector<int>> p(N,vector<int>(3));
	rep(i,N) rep(j,3) cin>>p[i][j];
	rep(i,N) So(p[i]);
	po167::min_cost_flow<int,int> G(N*2+2);
	int S=N*2,T=S+1;
	int M=2e6;
	int X=0;
	rep(i,N) X+=p[i][0]*p[i][1]*p[i][2];
	rep(i,N){
		rep(j,N){
			if(i==j) continue;
			int J=1;
			rep(k,3) if(p[i][k]<=p[j][k]) J=0;
			if(J){
				G.add_edge(i,j+N,1,M-p[j][1]*p[j][0]*p[j][2]);
			}
		}
		G.add_edge(S,i,1,0);
		G.add_edge(i+N,T,1,0);
	}
	//cout<<"potato"<<endl;
	G.add_edge(S,T,N,M);
	int ans=G.flow(S,T,N).second;
	cout<<X-N*M+ans<<"\n";
}

