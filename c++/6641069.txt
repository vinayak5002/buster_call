#include <bits/stdc++.h>

#define rep(i, to) for (int i=0; i<to; i++)
#define repr(i, from, to) for (int i=from; i<to; i++)

using namespace std;
using ll = long long;
using P = pair<int, int>;

#ifdef DEBUG
#include "debug.hpp"
#else
template<class T> void print(T v) { cout << v << endl; }
void _main(); int main() { _main(); }
#endif

// ================================================================================ //

using Graph = vector<vector<int>>;

vector<int> tsort(Graph &G, vector<int> &indegree) {
    int V = (int)indegree.size();
    vector<int> res;

    queue<int> que; rep(i, V) if (indegree[i] == 0) que.push(i);

    while (que.size()) {
        auto v = que.front(); que.pop();
        rep(i, G[v].size()) {
            int u = G[v][i];
            if (--indegree[u] == 0) que.push(u);
        }
        res.push_back(v);
    }

    return res;
}

//int solve(vector<int> &L, vector<P> &D) {
//    int N = (int)L.size(), M = (int)D.size();
//    Graph graph(N);
//    vector<int> indegree(N);
//    rep(i, M) {
//        graph[D[i].first].push_back(D[i].second);
//        indegree[D[i].second]++;
//    }
//
//
//
//    print(graph);
//    print(indegree);
//
//    return 0;
//}

void _main() {
    int V, E; cin >> V >> E;
    
    Graph graph(V);
    vector<int> indegree(V);
    
    rep(i, E) {
        int u, v; cin >> u >> v;
        graph[u].push_back(v);
        indegree[v]++;
    }
    
    auto svertex = tsort(graph, indegree);
    for (auto v: svertex) {
        print(v);
    }
    
    
//    int T; cin >> T;
//    rep(_, T) {
//        int N, M; cin >> N >> M;
//        vector<int> L(N); rep(i, N) cin >> L[i];
//        vector<P> D(M); rep(i, M) {
//            cin >> D[i].first >> D[i].second; D[i].first--; D[i].second--;
//        }
//        print(solve(L, D));
//    }
}

