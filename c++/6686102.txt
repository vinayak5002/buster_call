#include <iostream>
#include <cmath>
using namespace std;

int insertionSort(int* A, int n, int g){
    int v, j, cnt = 0;
    for (int i = g; i < n; i++){
        v = A[i];
        j = i - g;
        while (j >= 0 && A[j] > v){
            A[j + g] = A[j];
            j = j - g;
            cnt++;
        }
        A[j + g] = v;
    }
    return cnt;
}

int shellSort(int* A, int n){
    int m, cnt = 0;
    if (log(n + 1.0) / log(3.0) > 1) m = log(n + 1.0) / log(3.0);
    else m = 1;

    int G[m] = {0};

    cout << m << endl;

    int g1 = 1, g2;
    G[m - 1] = g1;
    for (int i = m - 2; i >= 0; i--){
        g2 = 3 * g1 + 1;
        G[i] = g2;
        g1 = g2;
    }
    for (int i = 0; i < m; i++){
        if (i == m - 1) cout << G[i] << endl;
        else cout << G[i] << " ";
        cnt += insertionSort(A, n, G[i]);
    }
    return cnt;
}

int main(){
    int n, x;
    cin >> n;
    int A[n] = {0};

    for (int i = 0; i < n; i++){
        cin >> x;
        A[i] = x;
    }
    int cnt = shellSort(A, n);
    cout << cnt << endl;

    for (int i = 0; i < n; i++){
        cout << A[i] << endl;
    }
    return 0;
}
