#include <bits/stdc++.h>
using namespace std;
#define x first
#define y second
#define pdd pair<double,double>
const int maxn=510;
const double eps=1e-8;
int cnt;
struct Line
{
    pdd st,ed;
}line[maxn+5];
pdd pg[maxn+5],ans[maxn+5];
int q[maxn+5];//Ë«¶Ë¶ÓÁÐ
int sign(double x)
{
    if(fabs(x)<eps)return 0;
    if(x<0)return -1;
    return 1;
}
int dcmp(double x,double y)
{
    return sign(x-y);
}
double get_angle(const Line& a)
{
    return atan2(a.ed.y-a.st.y,a.ed.x-a.st.x);
}
pdd operator-(pdd a,pdd b)
{
    return {a.x-b.x,a.y-b.y};
}
double cross(pdd a,pdd b)
{
    return a.x*b.y-a.y*b.x;
}
double area(pdd a,pdd b,pdd c)
{
    return cross(b-a,c-a);
}
bool cmp(const Line& a,const Line& b)
{
    double A=get_angle(a),B=get_angle(b);
    if(!dcmp(A,B))return area(a.st,a.ed,b.ed)<0;
    return A<B;
}
pdd get_line_intersection(pdd p,pdd v,pdd q,pdd w)
{
    pdd u=p-q;
    double t=cross(w,u)/cross(v,w);
    return {p.x+v.x*t,p.y+v.y*t};
}
pdd get_line_intersection(Line a,Line b)
{
    return get_line_intersection(a.st,a.ed-a.st,b.st,b.ed-b.st);
}
bool on_right(Line& a,Line& b,Line& c)
{
    pdd o=get_line_intersection(b,c);
    return sign(area(a.st,a.ed,o))<=0;
}
double half_plane_intersection()
{
    sort(line,line+cnt,cmp);
    memset(q, 0, sizeof q);
    memset(ans, 0, sizeof ans);
    int hh=0,tt=-1;
    for(int i=0;i<cnt;i++)
    {
        if(i&&!dcmp(get_angle(line[i]),get_angle(line[i-1])))continue;
        while(hh+1<=tt&&on_right(line[i],line[q[tt-1]],line[q[tt]])) tt--;
        while(hh+1<=tt&&on_right(line[i],line[q[hh]],line[q[hh+1]])) hh++;
        q[++tt]=i;
        
    }
    while(hh+1<=tt&&on_right(line[q[hh]],line[q[tt-1]],line[q[tt]])) tt--;
    while(hh+1<=tt&&on_right(line[q[tt]],line[q[hh]],line[q[hh+1]])) hh++;
    q[++tt]=q[hh];
    int k=0;
    double res=0;
    for(int i=hh;i<tt;i++)
    {
        ans[k++]=get_line_intersection(line[q[i]],line[q[i+1]]);
    }
    for(int i=1;i+1<k;i++)
    {
        res+=area(ans[0],ans[i],ans[i+1]);
        cout<<res<<endl;
    }
    return res/2;
}
int main()
{
    int m;
    cin>>m;
	for(int i=0;i<m;i++)
    {
        cin>>pg[i].x>>pg[i].y;
    }
    for(int i=0;i<m;i++)
    {
       line[cnt++]={pg[i],pg[(i+1)%m]};
    }
	int q;
	cin >> q;
	while(q --)
	{
		double x1, y1, x2, y2;
		cin >> x1 >> y1 >> x2 >> y2;
		line[cnt ++] = {{x1, y1}, {x2, y2}};
		double res=half_plane_intersection();
		cnt --;
		line[cnt] = {{0, 0}, {0, 0}};
    	printf("%.3f\n",res);
	}
	return 0;	 

}
