# -*- coding: utf-8 -*-
import math

class Dice:
    _roll_table = [
        [1, 2, 4, 3], # 0
        [0, 3, 5, 2], # 1
        [0, 1, 5, 4], # 2
        [0, 4, 5, 1], # 3
        [0, 2, 5, 3], # 4
        [1, 3, 4, 2], # 5
    ]

    def __init__(self, f=[1,2,3,4,5,6]):
        self.faces = f
        assert len(f) == 6
        self.top = 0
        self.front = 1
        t = self._roll_table[self.top]
        ti = (t.index(self.front)+1)%4
        self.east = t[ti]

    def renew(self, top, front):
        self.top = top
        self.front = front
        t = self._roll_table[self.top]
        ti = (t.index(self.front)+1)%4
        self.east = t[ti]

    def roll(self, way):
        if way == 'N':
            bt = self.top
            self.top = self.front
            self.front = 5-bt
        elif way == 'E':
            be = self.east
            self.east = self.top
            self.top = 5-be
        elif way == 'W':
            bt = self.top
            self.top = self.east
            self.east = 5-bt
        elif way == 'S':
            bf = self.front
            self.front = self.topops = input()
            self.top = 5-bf
        else:
            assert False
    
    def get_top(self):
        return self.faces[self.top]

    def get_front(self):
        return self.faces[self.front]

    def get_east(self):
        return self.faces[self.east]


dice = Dice(list(map(int, input().split())))
Q = int(input())

for i in range(Q):
    tf,ff = map(int, input().split())
    top,front = dice.faces.index(tf),dice.faces.index(ff)
    dice.renew(top,front)
    print(dice.get_east())


