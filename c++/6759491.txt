#include <bits/stdc++.h>
using namespace std;
#define rep(i, n) for (int i = 0; i < n; i++)
#define rep2(i, x, n) for (int i = x; i <= n; i++)
#define rep3(i, x, n) for (int i = x; i >= n; i--)
#define each(e, v) for (auto &e : v)
#define pb push_back
#define eb emplace_back
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define sz(x) (int)x.size()
using ll = long long;
using pii = pair<int, int>;
using pil = pair<int, ll>;
using pli = pair<ll, int>;
using pll = pair<ll, ll>;

template <typename T>
bool chmax(T &x, const T &y) {
    return (x < y) ? (x = y, true) : false;
}

template <typename T>
bool chmin(T &x, const T &y) {
    return (x > y) ? (x = y, true) : false;
}

template <typename T>
int flg(T x, int i) {
    return (x >> i) & 1;
}

template <typename T>
void print(const vector<T> &v, T x = 0) {
    int n = v.size();
    for (int i = 0; i < n; i++) cout << v[i] + x << (i == n - 1 ? '\n' : ' ');
    if (v.empty()) cout << '\n';
}

template <typename T>
void printn(const vector<T> &v, T x = 0) {
    int n = v.size();
    for (int i = 0; i < n; i++) cout << v[i] + x << '\n';
}

template <typename T>
int lb(const vector<T> &v, T x) {
    return lower_bound(begin(v), end(v), x) - begin(v);
}

template <typename T>
int ub(const vector<T> &v, T x) {
    return upper_bound(begin(v), end(v), x) - begin(v);
}

template <typename T>
void rearrange(vector<T> &v) {
    sort(begin(v), end(v));
    v.erase(unique(begin(v), end(v)), end(v));
}

template <typename T>
vector<int> id_sort(const vector<T> &v, bool greater = false) {
    int n = v.size();
    vector<int> ret(n);
    iota(begin(ret), end(ret), 0);
    sort(begin(ret), end(ret), [&](int i, int j) { return greater ? v[i] > v[j] : v[i] < v[j]; });
    return ret;
}

template <typename S, typename T>
pair<S, T> operator+(const pair<S, T> &p, const pair<S, T> &q) {
    return make_pair(p.first + q.first, p.second + q.second);
}

template <typename S, typename T>
pair<S, T> operator-(const pair<S, T> &p, const pair<S, T> &q) {
    return make_pair(p.first - q.first, p.second - q.second);
}

template <typename S, typename T>
istream &operator>>(istream &is, pair<S, T> &p) {
    S a;
    T b;
    is >> a >> b;
    p = make_pair(a, b);
    return is;
}

template <typename S, typename T>
ostream &operator<<(ostream &os, const pair<S, T> &p) {
    return os << p.first << ' ' << p.second;
}

struct io_setup {
    io_setup() {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cout << fixed << setprecision(15);
    }
} io_setup;

const int inf = (1 << 30) - 1;
const ll INF = (1LL << 60) - 1;
const int MOD = 1000000007;
// const int MOD = 998244353;

template <typename sum_t, typename key_t, bool directed = false>
struct Rerooting {
    struct edge {
        int to;
        key_t data;
        sum_t dp, ndp; // to 側の部分木 dp（辺も含む）、from 側の部分木 dp（辺は含まない）
        edge(int to, key_t data, sum_t dp, sum_t ndp) : to(to), data(data), dp(dp), ndp(ndp) {}
    };

    using F = function<sum_t(sum_t, sum_t)>;
    using G = function<sum_t(sum_t, key_t)>;
    vector<vector<edge>> es;
    vector<sum_t> subdp, dp;  // 部分木の dp、全方位の dp
    const F f;                // 1 頂点を間に挟んで隣り合う 2 つの部分木の情報をマージ
    const G g;                // 部分木の根に 1 本辺を足す
    const sum_t e1;           // f の単位元
    const vector<sum_t> base; // 1 頂点の場合の dp の値
    const int n;

    Rerooting(int n, const F &f, const G &g, const sum_t &e1, const vector<sum_t> &base) : n(n), es(n), subdp(base), dp(n), f(f), g(g), e1(e1), base(base) {}

    void add_edge(int from, int to, const key_t &data) {
        es[from].emplace_back(to, data, e1, base[from]);
        if (!directed) es[to].emplace_back(from, data, e1, base[to]);
    }

    void dfs_sub(int now, int pre = -1) {
        for (auto &e : es[now]) {
            if (e.to == pre) continue;
            dfs_sub(e.to, now);
            subdp[now] = f(subdp[now], g(subdp[e.to], e.data));
        }
    }

    void dfs_all(int now, const sum_t &top, int pre = -1) {
        sum_t S = e1;
        for (int i = 0; i < (int)es[now].size(); i++) {
            auto &e = es[now][i];
            e.ndp = f(e.ndp, S);
            e.dp = g(e.to == pre ? top : subdp[e.to], e.data);
            S = f(S, e.dp);
        }
        dp[now] = f(base[now], S);
        S = e1;
        for (int i = (int)es[now].size() - 1; i >= 0; i--) {
            auto &e = es[now][i];
            e.ndp = f(e.ndp, S);
            if (e.to != pre) dfs_all(e.to, e.ndp, now);
            S = f(S, e.dp);
        }
    }

    vector<sum_t> solve() {
        dfs_sub(0);
        // rep(i, n) print(subdp[i], pii(0, 0));
        dfs_all(0, e1);
        return dp;
    }
};

int main() {
    while (true) {
        string S;
        cin >> S;

        if (S == "-1") break;
        int N = sz(S);

        vector<int> id(N, 0);
        stack<int> st;
        int K = 1;
        vector<int> tmp;

        rep(i, N) {
            if (S[i] >= '0' && S[i] <= '9') {
                id[i] = K++;
            } else if (S[i] == '(') {
                id[i] = K++;
                st.emplace(i);
            } else if (S[i] == ')') {
                int j = st.top();
                id[i] = id[j];
                st.pop();
            } else {
                if (empty(st)) {
                    tmp.eb(i);
                } else {
                    int j = st.top();
                    id[i] = id[j];
                }
            }
        }

        // print(id);

        auto f = [](vector<pii> a, vector<pii> b) {
            each(e, b) a.eb(e);
            return a;
        };

        auto g = [](vector<pii> a, char c) {
            if (c >= '0' && c <= '9') {
                a.clear();
                a.eb(c - '0', c - '0');
            } else if (c == '+') {
                int x = 0, y = 0;
                each(e, a) x += e.first, y += e.second;
                a.clear();
                a.eb(x, y);
            } else {
                int M = sz(a);
                int x = -inf, y = inf;
                rep(i, M) {
                    int tx = 0, ty = 0;
                    rep(j, M) {
                        auto e = a[j];
                        if (j == i) {
                            tx += e.first, ty += e.second;
                        } else {
                            tx -= e.second, ty -= e.first;
                        }
                    }
                    chmax(x, tx), chmin(y, ty);
                }
                a.clear();
                a.eb(x, y);
            }
            return a;
        };

        Rerooting<vector<pii>, char, true> G(K, f, g, {}, vector<vector<pii>>(K));

        vector<char> c(K);
        rep(i, N) {
            if (S[i] != '(' && S[i] != ')') {
                int x = id[i];
                c[x] = S[i];
            }
        }
        // rep(i, K) cout << c[i];
        // cout << '\n';
        // print(id);

        rep(i, N) {
            if (id[i] == 0) continue;
            if (S[i] == '+' || S[i] == '-') {
                int l = id[i - 1], m = id[i], r = id[i + 1];
                G.add_edge(l, m, c[m]), G.add_edge(m, l, c[l]);
                G.add_edge(r, m, c[m]), G.add_edge(m, r, c[r]);
                // cout << l << ' ' << m << ' ' << r << '\n';
            }
        }

        rep(t, 2) {
            int i = tmp[t];
            int l = id[i - 1], m = id[i], r = id[i + 1];
            if (t == 0) G.add_edge(l, m, c[m]), G.add_edge(m, l, c[l]);
            G.add_edge(r, m, c[m]), G.add_edge(m, r, c[r]);
            // cout << l << ' ' << m << ' ' << r << '\n';
        }

        auto res = G.solve();
        int ans = -inf;

        rep(i, K) {
            // cout << i << '\n';
            // printn(res[i], pii(0, 0));

            if (c[i] >= '0' && c[i] <= '9') continue;
            if (c[i] == '+') {
                int tmp = 0;
                each(e, res[i]) tmp += e.first;
                chmax(ans, tmp);
            } else {
                int M = sz(res[i]);
                int tmp = -inf;
                rep(j, M) {
                    int x = 0;
                    rep(k, M) {
                        auto e = res[i][k];
                        if (k == j) {
                            x += e.first;
                        } else {
                            x -= e.second;
                        }
                    }
                    chmax(tmp, x);
                }
                chmax(ans, tmp);
            }
        }

        cout << ans << '\n';
    }
}
