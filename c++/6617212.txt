#include <iostream> // cout, endl, cin
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <cstdio> // printf
#include <map> // map
#include <queue> // queue, priority_queue
#include <set> // set
#include <stack> // stack
#include <deque> // deque
#include <unordered_map> // unordered_map
#include <unordered_set> // unordered_set
#include <bitset> // bitset
#include <cctype> // isupper, islower, isdigit, toupper, tolower
#include<math.h>
#include <iomanip>
using namespace std;
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define repi(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
using namespace std;
typedef long long ll;
 
 
 
 
//const long long mod=1000000007;
//const long long mod2=998244353;
 
 
 
const ll inf=1e18;
 
 
const int MAX = 10000;
// 今回採用する大きい素数
const int MOD = 1e9+7;
 
// メモを保管する場所
ll fact[MAX], inv_fact[MAX], inv[MAX];
 
// メモを計算する
void init() {
    // 初期値設定と1はじまりインデックスに直す
    fact[0] = 1;
    fact[1] = 1;
    inv[0] = 1;
    inv[1] = 1;
    inv_fact[0] = 1;
    inv_fact[1] = 1;
    // メモの計算
    repi(i, 2, MAX){
        // 階乗
        fact[i] = fact[i - 1] * i % MOD;
        // 逆元
        inv[i] = MOD - inv[MOD%i] * (MOD / i) % MOD;
        // 逆元の階乗
        inv_fact[i] = inv_fact[i - 1] * inv[i] % MOD;
    }
}
 
// 二項係数の実体
ll nCk(int n, int k) {
    ll x = fact[n]; // n!の計算
    ll y = inv_fact[n-k]; // (n-k)!の計算
    ll z = inv_fact[k]; // k!の計算
    if (n < k) return 0; // 例外処理
    if (n < 0 || k < 0) return 0; // 例外処理
    return x * ((y * z) % MOD) % MOD; //二項係数の計算
}
 
 
ll pow_pow(ll x,ll n,ll mod){
    if(n==0) return 1;
    x%=mod;
   
    ll res=pow_pow(x*x%mod,n/2,mod);
    if(n&1)res=res*x%mod;
    return res;
}
 
 
 
int extgcd(int a,int b,int &x,int &y){
  int d=a;
  if(b!=0){
    d=extgcd(b,a%b,y,x);
    y-=(a/b)*x;
  }else{
    x=1;y=0;
  }
  return d;
}
int mod_inverse(int a,int m){
  int x,y;
  extgcd(a,m,x,y);
  return (m+x%m)%m;
}
 
struct UnionFind {
    vector<int> par, siz;
 
    UnionFind(int n) : par(n, -1) , siz(n, 1) { }
 
    // 根を求める
    int root(int x) {
        if (par[x] == -1) return x;
        else return par[x] = root(par[x]);
    }
 
    // x と y が同じグループに属するかどうか (根が一致するかどうか)
    bool issame(int x, int y) {
        return root(x) == root(y);
    }
 
    // x を含むグループと y を含むグループとを併合する
    bool unite(int x, int y) {
        x = root(x), y = root(y);
        if (x == y) return false; 
        if (siz[x] < siz[y]) swap(x, y);
        par[y] = x;
        siz[x] += siz[y];
        return true;
    }
 
    // x を含むグループのサイズ
    int size(int x) {
        return siz[root(x)];
    }
};
  
  //min(x,y)が0以下の場合はmax(x,y)が返される
//ユークリッドの互除法を元に実装
ll gcd(ll x,ll y){
    if(y==0)return x;
    return gcd(y,x%y);
}
 
//オーバフローしないようにかける順番を気を付ける
ll lcm(ll x,ll y){
    return ll(x/gcd(x,y))*y;
}
 
 
 
 
template<class T> bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    else return false;
}
template<class T> bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    else return false;
}
 
//using Graph1=vector<vector<Edge> >;
//using Graph=vector<vector<int> >;
 
// auto mod int
// https://youtu.be/L8grWxBlIZ4?t=9858
// https://youtu.be/ERZuLAxZffQ?t=4807 : optimize
// https://youtu.be/8uowVvQ_-Mo?t=1329 : division
const ll mod =1ll<<60;
struct mint {
  ll x; // typedef long long ll;
  mint(ll x=0):x((x%mod+mod)%mod){}
  mint operator-() const { return mint(-x);}
  mint& operator+=(const mint a) {
    if ((x += a.x) >= mod) x -= mod;
    return *this;
  }
  mint& operator-=(const mint a) {
    if ((x += mod-a.x) >= mod) x -= mod;
    return *this;
  }
  mint& operator*=(const mint a) { (x *= a.x) %= mod; return *this;}
  mint operator+(const mint a) const { return mint(*this) += a;}
  mint operator-(const mint a) const { return mint(*this) -= a;}
  mint operator*(const mint a) const { return mint(*this) *= a;}
  mint pow(ll t) const {
    if (!t) return 1;
    mint a = pow(t>>1);
    a *= a;
    if (t&1) a *= *this;
    return a;
  }
 
  // for prime mod
  mint inv() const { return pow(mod-2);}
  mint& operator/=(const mint a) { return *this *= a.inv();}
  mint operator/(const mint a) const { return mint(*this) /= a;}
};
istream& operator>>(istream& is, const mint& a) { return is >> a.x;}
ostream& operator<<(ostream& os, const mint& a) { return os << a.x;}
// combination mod prime
// https://www.youtube.com/watch?v=8uowVvQ_-Mo&feature=youtu.be&t=1619
struct combination {
  vector<mint> fact, ifact;
  combination(int n):fact(n+1),ifact(n+1) {
    //assert(n < mod);
    fact[0] = 1;
    for (int i = 1; i <= n; ++i) fact[i] = fact[i-1]*i;
    ifact[n] = fact[n].inv();
    for (int i = n; i >= 1; --i) ifact[i-1] = ifact[i]*i;
  }
  mint operator()(int n, int k) {
    if (k < 0 || k > n) return 0;
    return fact[n]*ifact[k]*ifact[n-k];
  }
  mint p(int n, int k) {
    return fact[n]*ifact[n-k];
  }
} c(2000005);
 
 
 
 
//const ll INF=1e18;
 
 
 
 
ll extgcd(ll a,ll b,ll &x,ll &y){
  ll d=a;
  if(b!=0){
    d=extgcd(b,a%b,y,x);
    y-=(a/b)*x;
  }
  else{
    x=1;y=0;
  }
  return d;
}
 
 const ll seg_size=(1ll<<19);
//ll seg[seg_size*2];
 
ll seg_take(ll l,ll r,vector<int> &seg){
  l+=seg.size()/2;
  r+=seg.size()/2;
  ll res=0;
  while(l<r){
    if(l%2==1){
      res+=seg[l];
      l++;
    }
    l/=2;
    if(r%2==1){
      res+=seg[r-1];
      r--;
    }
    r/=2;
  }
  return res;
}
 
void seg_set(ll ind,ll v,vector<int> &seg){
  ind+=seg.size()/2;
  seg[ind]+=v;
  while(ind>0){
    ind/=2;
    seg[ind]=seg[ind*2]+seg[ind*2+1];
  }
}
using graph = vector<vector<ll> > ;
 
ll sqrt_(ll x) {
  ll l = 0, r = ll(3e9)+1;
  while (l+1<r) {
    ll c = (l+r)/2;
    if (c*c <= x) l = c; else r = c;
  }
  return l;
}
 
 
void comp(vector<ll>&a){
  set<ll>s(a.begin(),a.end());
  int cnt=0;
  map<ll,ll>d;
  for(auto x:s)d[x]=cnt++;
  for(auto&x:a)x=d[x];
 
}
struct  Edge{
  int to;int cost;
  Edge(int to,int cost):to(to),cost(cost){};
};
 
 
 
int valid(int x,int y,int h,int w){
  if(x>=0 && y>=0 && x<h && y<w)return 1;
  else return 0;
}
 
//snuke
template<typename T>
struct Matrix {
  int h, w;
  vector<vector<T> > d;
  Matrix() {}
  Matrix(int h, int w, T val=0): h(h), w(w), d(h, vector<T>(w,val)) {}
  Matrix& unit() {
    //assert(h == w);
    rep(i,h) d[i][i] = 1;
    return *this;
  }
  const vector<T>& operator[](int i) const { return d[i];}
  vector<T>& operator[](int i) { return d[i];}
  Matrix operator*(const Matrix& a) const {
    //assert(w == a.h);
    Matrix r(h, a.w);
    rep(i,h)rep(k,w)rep(j,a.w) {
      r[i][j] += d[i][k]*a[k][j];
    }
    return r;
  }
  Matrix pow(ll t) const {
  //  assert(h == w);
    if (!t) return Matrix(h,h).unit();
    if (t == 1) return *this;
    Matrix r = pow(t>>1);
    r = r*r;
    if (t&1) r = r*(*this);
    return r;
  }
};
 
int vx[]={0,1,0,-1},vy[]={1,0,-1,0};
 
 
using P= pair<ll,ll>;

const  ll B=998244353;

int main(){
   ios::sync_with_stdio(false);
   std::cin.tie(nullptr);
   string s,t; cin >> s >> t;
   int n=s.size(),m=t.size();
   vector<int> a(n),b(m);
   rep(i,n)a[i]=(s[i]-'a')+1;
   rep(i,m)b[i]=(t[i]-'a')+1;
   if(n<m){
     return 0;
   }
   mint base=0;
   mint now=1;
   for(int i=m-1; i>=0; i--){
      base+=now*b[i];
      now=now*B;
   }
   now=1;
   mint now2=0;
   for(int i=m-1; i>=0; i--){
      now2+=now*a[i];
      now=now*B;
   }
   vector<int> anss;
   if(base.x==now2.x){
     anss.push_back(0);
   }
   for(int i=1; i+m-1<n; i++){
     now2=now2*B-now*a[i-1]+a[i+m-1];
     if(base.x==now2.x){
       anss.push_back(i);
     }
   }
  for(auto u:anss){
    cout << u << endl;
  }



} 
