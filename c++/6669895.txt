# -*- coding: utf-8 -*-
import itertools

class Dice:
    _roll_table = [
        [1, 2, 4, 3], # 0
        [0, 3, 5, 2], # 1
        [0, 1, 5, 4], # 2
        [0, 4, 5, 1], # 3
        [0, 2, 5, 3], # 4
        [1, 3, 4, 2], # 5
    ]

    def __init__(self, f=[1,2,3,4,5,6]):
        self.faces = f
        assert len(f) == 6
        self.renew(0,1)

    def renew(self, top, front=None):
        self.top = top
        t = self._roll_table[self.top]
        if front == None:
            self.front = t[0]
        else:
            self.front = front
            assert front in t
        ti = (t.index(self.front)+1)%4
        self.east = t[ti]

    def roll(self, way):
        if way == 'N':
            bt = self.top
            self.top = self.front
            self.front = 5-bt
        elif way == 'E':
            be = self.east
            self.east = self.top
            self.top = 5-be
        elif way == 'W':
            bt = self.top
            self.top = self.east
            self.east = 5-bt
        elif way == 'S':
            bf = self.front
            self.front = self.top
            self.top = 5-bf
        else:
            assert False
    
    def rotate(self, way):
        if way == 'CW':
            self.renew(self.top, self.east)
        elif way == 'CCW':
            self.renew(self.top, 5-self.east)
        else:
            assert False

    def flip(self):
        self.roll('N')
        self.roll('N')
    
    def get_top(self):
        return self.faces[self.top]

    def get_front(self):
        return self.faces[self.front]

    def get_east(self):
        return self.faces[self.east]

    def get_bottom(self):
        return self.faces[5-self.top]

    def get_back(self):
        return self.faces[5-self.front]

    def get_west(self):
        return self.faces[5-self.east]
    
    def print_faces(self):
        t = self.get_top()
        f = self.get_front()
        e = self.get_east()
        w = self.get_west()
        ba = self.get_back()
        bo = self.get_bottom()
        print(f'{t} {f} {e} {w} {ba} {bo}')
    
    def get_faces(self):
        t = self.get_top()
        f = self.get_front()
        e = self.get_east()
        w = self.get_west()
        ba = self.get_back()
        bo = self.get_bottom()
        return [t,f,e,w,ba,bo]
    
    def equal(self, dice2):
        d2 = Dice(dice2.get_faces())
        d1fa = self.get_faces()
        for i in range(6):
            d2.renew(i)
            for j in range(4):
                if d1fa == d2.get_faces():
                    return True
                d2.rotate("CW")
        else:
            return False

N = int(input())
dices = [Dice(input().split()) for _ in range(N)]

for d1,d2 in itertools.combinations(dices, 2):
    if d1.equal(d2):
        print("No")
        break
else:
    print("Yes")


