#include<stdio.h>

#define SIZE 30

typedef struct
{
    int parent;
    int left;
    int right;
}node_t;

node_t tree[SIZE];
int depth[SIZE],height[SIZE];

void set_Depth(int id, int deep)
{
    if ( id == -1 ){
        return;
    }

    depth[id] = deep;
    set_Depth(tree[id].left, deep + 1);
    set_Depth(tree[id].right, deep + 1);
}

int set_Height(int id)
{
    int hl = 0;
    int hr = 0;
    if ( tree[id].left != -1 ){
        hl = set_Height(tree[id].left) + 1;
    }
    if ( tree[id].right != -1 ){
        hr = set_Height(tree[id].right) + 1;
    }

    return height[id] = (hl > hr ? hl : hr);
}

int get_Sibling(int id)
{
    if ( tree[id].parent == -1 ) return -1;
    else if ( tree[tree[id].parent].left == id && tree[tree[id].parent].right != -1 )
    {
        return tree[tree[id].parent].right;
    }
    else if ( tree[tree[id].parent].right == id && tree[tree[id].parent].left != -1 )
    {
        return tree[tree[id].parent].left;
    }
    else
    {
        return -1;
    }
}

int get_Degree(int id)
{
    int degree = 0;
    if( tree[id].left != -1 )
    {
        degree++;
    }
    if( tree[id].right != -1 )
    {
        degree++;
    }

    return degree;
}

void result_Print(int id)
{
    printf("node %d: parent = %d, sibling = %d, degree = %d, depth = %d, height = %d, ", id, tree[id].parent, get_Sibling(id), get_Degree(id), depth[id], height[id]);

    if( tree[id].parent == -1 )
    {
        printf("root\n");
    }
    else if( tree[id].left == -1 && tree[id].right == -1 )
    {
        printf("leaf\n");
    }
    else
    {
        printf("internal node\n");
    }
}

int main(void)
{
    int i;
    int n;
    int id, left, right, root;

    scanf("%d", &n);

    for(i = 0; i < n; i++)
    {
        tree[i].parent = -1;
        tree[i].right = -1;
        tree[i].left = -1;//子の初期化は省略してもいい、入力を代入すると同じ結果(next line)
    }

    for(i = 0; i < n; i++)
    {
        scanf("%d %d %d", &id, &left, &right);
        tree[id].left = left;
        tree[id].right = right;
        if(left != -1){
            tree[left].parent = id;
        }
        if(right != -1){
            tree[right].parent = id;
        }
    }

    for(i = 0; i < n; i++)
    {
        if(tree[i].parent == -1)
        {
            root = i;
        }
    }

    set_Depth(root, 0);
    set_Height(root);

    for(i = 0; i < n; i++)
    {
        result_Print(i);
    }

    return 0;
}
