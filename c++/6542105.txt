#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct Node{
  int key;
 struct Node *left,*right,*parent;
}Node;

Node *root;

void insert(int k){
  Node *y = NULL;
  Node *x = root;
  Node *z;

  z = (Node *)malloc(sizeof(Node));
  z->key = k;
  z->left = NULL;
  z->right = NULL;
  
  while(x != NULL){
    y = x;
    if(x->key < z->key)
      x = x->right;
    else x = x->left;
  }

  z->parent = y;

  if(y == NULL) root = z;
  else{
    if(z->key < y->key) y->left = z;
    else y->right = z;
  }
}

void inorder(Node *u){
  if(u == NULL) return;
  inorder(u->left);
  printf(" %d",u->key);
  inorder(u->right);
}

void preorder(Node *u){
  if(u == NULL) return;
  printf(" %d",u->key);
  preorder(u->left);
  preorder(u->right);
}

void find(Node *x,int k){
  while(x != NULL || k != x->key){
    if(k > x->key) x = x->right;
    else x = x->left;
  }
  if(k == x->key) printf("yes\n");
  else printf("no\n");
}

int main(){
  int i,n,a,b,c;
  char com[7];

  scanf("%d",&n);
  for(i=0 ;i<n ;i++){
    scanf("%s",com);
    if(com[0] == 'i'){
      scanf("%d",&a);
      insert(a);
    }
    else if(com[0] == 'f'){
      scanf("%d",&b);
      find(root,b);
    }
    else{
      inorder(root);
      printf("\n");
      preorder(root);
      printf("\n");
    }
  }

    return 0;
}

