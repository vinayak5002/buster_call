#include <bits/stdc++.h>
using namespace std;

using vi = vector<int>;
using vvi = vector<vector<int>>;
using vvvi = vector<vector<vector<int>>>;
using vl = vector<long long>;
using vvl = vector<vector<long long>>;
using vvvl = vector<vector<vector<long long>>>;
using vb = vector<bool>;
using vvb = vector<vector<bool>>;
using vvvb = vector<vector<vector<bool>>>;
using vs = vector<string>;
using vc = vector<char>;
using vvc = vector<vector<char>>;
using vvvc = vector<vector<vector<char>>>;
using vp = vector<pair<int, int>>;

constexpr long double PI = 3.141592653589793238462643383279502884L;

#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define u_map unordered_map
#define pq priority_queue
#define all(v) v.begin(), v.end()

int main() {















  auto Manhattan_distance = [](vi v1, vi v2) -> long double {
    int D = 0;
    rep(i, v1.size()) {
      D += abs(v1[i] - v2[i]);
    }
    return D;
  };
  auto Euclidean_distance = [](vi v1, vi v2) -> long double {
    int D2 = 0;
    rep(i, v1.size()) {
      D2 += pow(v1[i] - v2[i], 2);
    }
    return pow(D2, 0.5);
  };
  auto p3_distance = [](vi v1, vi v2) -> long double {
    int D3 = 0;
    rep(i, v1.size()) {
      D3 += pow(abs(v1[i] - v2[i]), 3);
    }
    return pow(D3, 1.0 / 3.0);
  };
  auto Chebyshev_distance = [](vi v1, vi v2) -> long double {
    int D = 0;
    rep(i, v1.size()) {
      D = max(D, v1[i] - v2[i]);
    }
    return D;
  };

  int n; cin >> n;
  vi x(n); rep(i, n) cin >> x[i];
  vi y(n); rep(i, n) cin >> y[i];

  printf("%.10Lf\n", Manhattan_distance(x, y));
  printf("%.10Lf\n", Euclidean_distance(x, y));
  printf("%.10Lf\n", p3_distance(x, y));
  printf("%.10Lf\n", Chebyshev_distance(x, y));




















  return 0;
}

