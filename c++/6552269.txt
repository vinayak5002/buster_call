#line 1 "/home/anqooqie/.proconlib/tools/util.hpp"



// To see the details of my library, visit my GitHub Pages.
// https://anqooqie.github.io/proconlib/

#ifdef LOCAL
  #ifndef _GLIBCXX_DEBUG
    #define _GLIBCXX_DEBUG
  #endif
#else
  #ifndef NDEBUG
    #define NDEBUG
  #endif
#endif

#include <bits/stdc++.h>
#line 1 "/home/anqooqie/.proconlib/tools/resize.hpp"



#line 5 "/home/anqooqie/.proconlib/tools/resize.hpp"

// Source: https://koyumeishi.hatenablog.com/entry/2016/02/01/152426
// License: unknown
// Author: koyumeishi

namespace tools {
  template <class T, class Allocator, typename Head>
  void resize(::std::vector<T, Allocator>& vector, const Head& head) {
    vector.resize(head);
  }
  template <class T, class Allocator, typename Head, typename... Tail>
  void resize(::std::vector<T, Allocator>& vector, const Head& head, const Tail&... tail) {
    vector.resize(head);
    for (auto& child : vector) {
      ::tools::resize(child, tail...);
    }
  }
}


#line 1 "/home/anqooqie/.proconlib/tools/fill.hpp"



#line 5 "/home/anqooqie/.proconlib/tools/fill.hpp"
#include <type_traits>
#line 1 "/home/anqooqie/.proconlib/tools/is_range.hpp"



#line 7 "/home/anqooqie/.proconlib/tools/is_range.hpp"

namespace tools {
  template <typename T>
  class is_range {
  private:
    template <typename U>
    static auto check(U x) -> decltype(::std::begin(x), ::std::end(x), ::std::true_type{});
    static ::std::false_type check(...);

  public:
    static const bool value = decltype(check(::std::declval<T>()))::value;
  };
}


#line 9 "/home/anqooqie/.proconlib/tools/fill.hpp"

namespace tools {
  template <class T, class Allocator, typename V>
  auto fill(::std::vector<T, Allocator>& vector, const V& value) -> ::std::enable_if_t<!::tools::is_range<T>::value, void> {
    ::std::fill(::std::begin(vector), ::std::end(vector), value);
  }
  template <class T, class Allocator, typename V>
  auto fill(::std::vector<T, Allocator>& vector, const V& value) -> ::std::enable_if_t<::tools::is_range<T>::value, void> {
    for (auto& child : vector) {
      ::tools::fill(child, value);
    }
  }
}


#line 20 "/home/anqooqie/.proconlib/tools/util.hpp"

using i64 = ::std::int_fast64_t;
using u64 = ::std::uint_fast64_t;
using i32 = ::std::int_fast32_t;
using u32 = ::std::uint_fast32_t;

#define ALL(x) ::std::begin((x)), ::std::end((x))
#define REP(i, n) for (::std::int_fast64_t i = 0; i < static_cast<::std::int_fast64_t>(n); ++i)

namespace tools {
  namespace detail {
    namespace util {
      template <typename T>
      class has_mod {
      private:
        template <typename U>
        static auto check(U x) -> decltype(x.mod(), ::std::true_type{});
        static ::std::false_type check(...);

      public:
        static const bool value = decltype(check(::std::declval<T>()))::value;
      };

      template <typename T>
      ::std::istream& read(::std::istream& is, T& container) {
        for (auto& v : container) {
          is >> v;
        }
        return is;
      }

      template <typename T>
      ::std::ostream& debug_print(::std::ostream& os, const T& container) {
        ::std::string delimiter = "";
        os << '[';
        for (const auto& v : container) {
          os << delimiter << v;
          delimiter = ", ";
        }
        os << ']';
        return os;
      }
    }
  }
}

template <class T, class Allocator>
::std::istream& operator>>(::std::istream& is, ::std::vector<T, Allocator>& vector) {
  return ::tools::detail::util::read(is, vector);
}
template <class T, ::std::size_t N>
::std::istream& operator>>(::std::istream& is, ::std::array<T, N>& array) {
  return ::tools::detail::util::read(is, array);
}
template <class T, class Allocator>
::std::ostream& operator<<(::std::ostream& os, const ::std::vector<T, Allocator>& vector) {
  return ::tools::detail::util::debug_print(os, vector);
}
template <class T, ::std::size_t N>
::std::ostream& operator<<(::std::ostream& os, const ::std::array<T, N>& array) {
  return ::tools::detail::util::debug_print(os, array);
}
template <class Key, class Hash, class Pred, class Allocator>
::std::ostream& operator<<(::std::ostream& os, const ::std::unordered_set<Key, Hash, Pred, Allocator>& unordered_set) {
  return ::tools::detail::util::debug_print(os, unordered_set);
}

template <class T, class Container>
::std::ostream& operator<<(::std::ostream& os, ::std::stack<T, Container>& stack) {
  ::std::stack<T, Container> other;
  while (!stack.empty()) {
    other.push(stack.top());
    stack.pop();
  }

  ::std::string delimiter = "";
  os << '[';
  while (!other.empty()) {
    os << delimiter << other.top();
    delimiter = ", ";
    stack.push(other.top());
    other.pop();
  }
  os << ']';

  return os;
}

template <class T, class Container>
::std::ostream& operator<<(::std::ostream& os, ::std::queue<T, Container>& queue) {
  ::std::queue<T, Container> other = queue;
  ::std::string delimiter = "";
  os << '[';
  while (!queue.empty()) {
    os << delimiter << queue.front();
    delimiter = ", ";
    queue.pop();
  }
  os << ']';

  queue = ::std::move(other);
  return os;
}

template <class T1, class T2>
::std::istream& operator>>(::std::istream& is, ::std::pair<T1, T2>& pair) {
  return is >> pair.first >> pair.second;
}
template <class T1, class T2>
::std::ostream& operator<<(::std::ostream& os, const ::std::pair<T1, T2>& pair) {
  return os << '[' << pair.first << ", " << pair.second << ']';
}
template <int I = 0, typename... Args>
::std::istream& operator>>(::std::istream& is, ::std::tuple<Args...>& tuple) {
  if constexpr (I < int(sizeof...(Args))) {
    is >> ::std::get<I>(tuple);
    return operator>><I + 1>(is, tuple);
  } else {
    return is;
  }
}
template <int I = -1, typename... Args>
::std::ostream& operator<<(::std::ostream& os, const ::std::tuple<Args...>& tuple) {
  if constexpr (I == -1) {
    os << '[';
  } else if constexpr (I == int(sizeof...(Args))) {
    os << ']';
  } else if constexpr (I == 0) {
    os << ::std::get<I>(tuple);
  } else {
    os << ", " << ::std::get<I>(tuple);
  }

  if constexpr (I < int(sizeof...(Args))) {
    return operator<<<I + 1>(os, tuple);
  } else {
    return os;
  }
}

template <typename T>
auto operator>>(::std::istream& is, T& x) -> ::std::enable_if_t<::tools::detail::util::has_mod<T>::value, ::std::istream&> {
  ::std::int_fast64_t n;
  is >> n;
  x = T(n);
  return is;
}
template <typename T>
auto operator<<(::std::ostream& os, const T& x) -> ::std::enable_if_t<::tools::detail::util::has_mod<T>::value, ::std::ostream&> {
  return os << x.val();
}


#line 1 "/home/anqooqie/.proconlib/tools/dual_segtree.hpp"



#line 1 "/home/anqooqie/.proconlib/tools/ceil_log2.hpp"



#line 5 "/home/anqooqie/.proconlib/tools/ceil_log2.hpp"

// Source: https://stackoverflow.com/questions/3272424/compute-fast-log-base-2-ceiling/15327567#15327567
// License: CC BY-SA 3.0
// Author: dgobbi

namespace tools {

  inline std::uint32_t ceil_log2(std::uint32_t x) {
    static const ::std::uint32_t t[6] = {
      0xFFFF0000u,
      0x0000FF00u,
      0x000000F0u,
      0x0000000Cu,
      0x00000002u
    };

    ::std::uint32_t y = (((x & (x - 1)) == 0) ? 0 : 1);
    ::std::uint32_t j = 16;

    for (const ::std::uint32_t& t_i : t) {
      ::std::uint32_t k = (((x & t_i) == 0) ? 0 : j);
      y += k;
      x >>= k;
      j >>= 1;
    }

    return y;
  }

  inline ::std::uint64_t ceil_log2(::std::uint64_t x) {
    static const ::std::uint64_t t[6] = {
      0xFFFFFFFF00000000u,
      0x00000000FFFF0000u,
      0x000000000000FF00u,
      0x00000000000000F0u,
      0x000000000000000Cu,
      0x0000000000000002u
    };

    ::std::uint64_t y = (((x & (x - 1)) == 0) ? 0 : 1);
    ::std::uint64_t j = 32;

    for (const ::std::uint64_t& t_i : t) {
      ::std::uint64_t k = (((x & t_i) == 0) ? 0 : j);
      y += k;
      x >>= k;
      j >>= 1;
    }

    return y;
  }

  inline ::std::int32_t ceil_log2(::std::int32_t x) {
    return static_cast<::std::int32_t>(::tools::ceil_log2(static_cast<::std::uint32_t>(x)));
  }

  inline ::std::int64_t ceil_log2(::std::int64_t x) {
    return static_cast<::std::int64_t>(::tools::ceil_log2(static_cast<::std::uint64_t>(x)));
  }
}


#line 1 "/home/anqooqie/.proconlib/tools/pow2.hpp"



#line 6 "/home/anqooqie/.proconlib/tools/pow2.hpp"

namespace tools {

  template <typename T, typename ::std::enable_if<::std::is_unsigned<T>::value, ::std::nullptr_t>::type = nullptr>
  constexpr T pow2(const T x) {
    return static_cast<T>(1) << x;
  }

  template <typename T, typename ::std::enable_if<::std::is_signed<T>::value, ::std::nullptr_t>::type = nullptr>
  constexpr T pow2(const T x) {
    return static_cast<T>(static_cast<typename ::std::make_unsigned<T>::type>(1) << static_cast<typename ::std::make_unsigned<T>::type>(x));
  }
}


#line 8 "/home/anqooqie/.proconlib/tools/dual_segtree.hpp"

namespace tools {

  template <typename M>
  class dual_segtree {
  private:
    using T = typename M::T;
    ::std::size_t height;
    ::std::vector<T> lazy;

    void propagate(const ::std::size_t node_id) {
      if(this->lazy[node_id] == M::e()) return;
      this->lazy[(node_id << 1) | 0] = M::op(this->lazy[node_id], this->lazy[(node_id << 1) | 0]);
      this->lazy[(node_id << 1) | 1] = M::op(this->lazy[node_id], this->lazy[(node_id << 1) | 1]);
      this->lazy[node_id] = M::e();
    }

    void thrust(const ::std::size_t node_id) {
      for (::std::size_t h = this->height; h > 0; --h) {
        this->propagate(node_id >> h);
      }
    }

    ::std::size_t capacity() const {
      return this->lazy.size() / 2;
    }

  public:
    dual_segtree(const ::std::size_t& n) :
      height(::tools::ceil_log2(n)),
      lazy(::tools::pow2(this->height + 1), M::e()) {
    }

    void apply(const ::std::size_t a, const ::std::size_t b, const T& x) {
      if(a >= b) return;

      const ::std::size_t a_id = a + this->capacity();
      const ::std::size_t b_id = b + this->capacity() - 1;

      this->thrust(a_id);
      this->thrust(b_id);

      for (::std::size_t l = a_id, r = b_id + 1; l < r; l >>= 1, r >>= 1) {
        if (l & 1) {
          this->lazy[l] = M::op(x, this->lazy[l]);
          ++l;
        }
        if (r & 1) {
          --r;
          this->lazy[r] = M::op(x, this->lazy[r]);
        }
      }
    }

    T get(const ::std::size_t a) {
      const ::std::size_t node_id = a + this->capacity();
      this->thrust(node_id);
      return this->lazy[node_id];
    }
  };
}


#line 1 "/home/anqooqie/.proconlib/tools/group.hpp"



namespace tools {
  namespace group {
    template <typename Type>
    struct plus {
      using T = Type;
      static T op(const T lhs, const T rhs) {
        return lhs + rhs;
      }
      static T e() {
        return T(0);
      }
      static T inv(const T v) {
        return -v;
      }
    };

    template <typename Type>
    struct bit_xor {
      using T = Type;
      static T op(const T lhs, const T rhs) {
        return lhs ^ rhs;
      }
      static T e() {
        return T(0);
      }
      static T inv(const T v) {
        return v;
      }
    };
  }
}


#line 4 "main.cpp"

int main() {
  std::cin.tie(nullptr);
  std::ios_base::sync_with_stdio(false);

  i64 n, q;
  std::cin >> n >> q;
  tools::dual_segtree<tools::group::plus<i64>> dual_segtree(n);
  for (i64 i = 0; i < q; ++i) {
    i64 t;
    std::cin >> t;
    if (t == 0) {
      i64 s, t, x;
      std::cin >> s >> t >> x;
      --s;
      dual_segtree.apply(s, t, x);
    } else {
      i64 i;
      std::cin >> i;
      --i;
      std::cout << dual_segtree.get(i) << '\n';
    }
  }

  return 0;
}
