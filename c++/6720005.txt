#include <bits/stdc++.h>
using namespace std ;
#define MAX 100001
#define NIL -2000000002
#define INF 2000000002
#define MAXN 50
int n;
const long long int infty = (1LL<<31) - 1;
long long int A[MAX];

long long int findQuery(int a, int b){
    long long int minimum = infty;
    for (int j=a; j<=b ; j++) {
        if (A[j] < minimum) {minimum =A[j];}
    }
    return minimum;
}

long long int sumQuery(int a, int b){
    long long int sum = 0;
    for (int j=a; j<=b ; j++) {
        if ( A[j] != infty) { sum += A[j] ;  }
    }
    return sum ;
}

int main() {
    int q = 0;
    cin >> n >> q ;
    for (int i=0 ; i<n ; i++) { A[i]=infty; }

    // nは登場人物の人数、qはクエリ（命令）の個数
    // この時点でn個のノードが成立している。
    for (int i = 0 ; i < q ; i++ ) {
        int a , b, c ,com ;
        cin >> com ;

        if (com == 8) { 
            cin >> a >> b  ; 
            A[a]=b;
            // printf( "  A[%d]=%d \n", a, b);
            //tree.relate(b,c);  
        } if (com == 0) { 
            cin >> a >> b  ; 
            if ( A[a] == infty ) {A[a]=b; }
            else { A[a] += b; }
            // printf( "  A[%d]=%d \n", a, b);
            //tree.relate(b,c);  
        } else if (com == 9)  {
            cin >> a >> b  ;
            printf("%lld\n", findQuery(a, b));
        } else if (com == 1)  {
            cin >> a >> b  ;
            printf("%lld\n", sumQuery(a, b));
        }
    }    
	return 0 ;
}
