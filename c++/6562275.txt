#include<iostream>
#include<vector>
#include<queue>

class Graph {
public:
	Graph(const int num_nodes) : num_nodes(num_nodes) {
		edges.assign(num_nodes, std::vector<short>(num_nodes, 0));
		connected_component.assign(num_nodes, -1);
	}

	~Graph() {
		edges.clear();
	}

	void addEdge(const int n, const int v) {
		edges[n][v] = 1;
	}

	void addNonDirEdge(const int n, const int v) {
		edges[n][v] = 1;
		edges[v][n] = 1;
	}


	bool canReach(const int s, const int t) {
		return connected_component[s] == connected_component[t];
	}

	void calcConnectedComponent() {
		int idx = 0;
		for (int s = 0; s < num_nodes; s++) {
			// 訪問済み
			if (connected_component[s] != -1) continue;
			connected_component[s] = idx;
			std::queue<short> queue;
			queue.push(s);
			while (!queue.empty()) {
				const short n = queue.front();
				queue.pop();
				for (int i = 0; i < num_nodes; i++) {
					if (edges[n][i] && connected_component[i] == -1) {
						connected_component[i] = idx;
						queue.push(i);
					}
				}
			}
			idx++;
		}
	}

	void printCC() {
		for (int i = 0; i < num_nodes; i++) {
			std::cout << connected_component[i] << " " << std::endl;
		}
	}

private:

	std::vector<std::vector<short>> edges;
	int num_nodes;
	std::vector<short> connected_component; // 連結成分
	
};

int main() {
	int num_nodes;
	int num_rel;
	std::cin >> num_nodes >> num_rel;
	Graph graph(num_nodes);
	// read edge
	for (int i = 0; i < num_rel; i++) {
		int n, k;
		std::cin >> n >> k;
		graph.addNonDirEdge(n, k);
	}
	//graph.printMatrix();
	graph.calcConnectedComponent();

	int num_ques;
	std::cin >> num_ques;
	for (int i = 0; i < num_ques; i++) {
		int s, t;
		std::cin >> s >> t;
		if (graph.canReach(s, t)) {
			std::cout << "yes" << std::endl;
		}
		else {
			std::cout << "no" << std::endl;
		}
	}
}
