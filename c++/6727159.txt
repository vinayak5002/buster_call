#include<stdio.h>
#include<stdlib.h>

#define H 250

int bTree[H+1];

int main(void)
{
	int h; //二分ヒープのサイズ
	char str[16];
	char tmp[11]; //文字列から数字を切り出す
	int end=1; //ヒープ読み込みの終端判定
	int i;
	int j=0;
	int k=0;
	
	fgets(str, sizeof(str)-1, stdin);
	sscanf(str, "%d", &h);
	
	while(end){
		i=0;
		while(i < sizeof(str)-1){
			str[i++] = '\0';
		}
		i=0;
		fgets(str, sizeof(str)-1, stdin);
		
		while(i < sizeof(str)-1){
			if(str[i] == ' ' || str[i] == '\0'){ //空白あるいは終端であれば
				bTree[k++] = atoi(tmp);
				while(0 < j){
					tmp[j--] = '\0'; //ヌル文字で埋める
				}
				if(k == h){ //全てを格納済み
					end=0;
					break;
				}
				
			}else if(47 < str[i] && str[i] < 58){ //数字文字であれば
				tmp[j++] = str[i];
			}
			i++;
		}
	}
	
	for(i=0; i<h; i++){
		printf("node %d: key = %d, ", i+1, bTree[i]);
		if(i != 0){ //先頭(根)でなければ
			printf("parent key = %d, ", bTree[((i+1)/2)-1]);
		}
		if((i+1)*2 < h){ //左の子の位置がノード数より小さい時
			printf("left key = %d, ", bTree[((i+1)*2)-1]);
			if(((i+1)*2)+1 <= h){ //右の子の位置がノード数より小さい時
				printf("right key = %d,", bTree[((i+1)*2)]);
			}
		}
		printf("\n");
	}
	
	return 0;
}
