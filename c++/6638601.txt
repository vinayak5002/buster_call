#include <bits/stdc++.h>
#include <iostream>
using namespace std;

void printVector(vector<int> A)
{
  for (int i = 0; i < A.size(); i++)
  {
    cout << A[i] << " ";
  }
  cout << endl;
}

tuple<vector<int>, int> myPartition(vector<int> A, int p, int r, int &count)
{

  int thresholdIndex = p;
  int threshold = A[thresholdIndex];
  int i = p;
  vector<int> below;
  vector<int> above;
  for (int j = p + 1; j <= r; j++)
  {

    if (A[j] <= threshold)
    {
      below.push_back(A[j]);
      count += above.size();
      i++;
    } else {
      above.push_back(A[j]);
    }
  }

  count += below.size();
  vector<int> result;

  result.insert(result.end(), below.begin(), below.end());
  result.push_back(threshold);
  result.insert(result.end(), above.begin(), above.end());

  printVector(result);
  return {result, i};
}

// int myPartition(vector<int> &A, int p, int r, int &count)
// {
//   // cout << "========" << endl;

//   int thresholdIndex = p;
//   int threshold = A[thresholdIndex];
//   int i = p;
//   for (int j = p + 1; j <= r; j++)
//   {

//     if (A[j] <= threshold)
//     {
//       count += (j - 1) - i;
//       // if ((j - 1) - i != 0) {
//       //   cout << A[j] << ":" << (j - 1) - i  << endl;
//       // }
//       i++;
//       for (int k = j; k > i; k--)
//       {
//         swap(A[k], A[k-1]);
//       }
//       // printVector(A);
//     }
//   }

//   // 順番を崩さないように移動してる
//   for (int j = thresholdIndex; j < i; j++){
//     swap(A[j], A[j + 1]);
//   }
//   count += i - p;
//   // printVector(A);
//   // cout << count << endl;
//   return i;
// }

void countNumberOfInversions(vector<int> A, int p, int r, int &count)
{
  if (p < r) {
    auto [newA, a] = myPartition(A, p, r, count);
    countNumberOfInversions(newA, p, a - 1, count);
    countNumberOfInversions(newA, a + 1, r, count);
  }
}

int main()
{
  std::cin.tie(nullptr), std::ios::sync_with_stdio(false);

  int n;
  cin >> n;
  vector<int> A(n);
  for (int i = 0; i < n; i++)
  {
    cin >> A[i];
  }
  int count = 0;
  countNumberOfInversions(A, 0, A.size() - 1, count);
  cout << count << endl;
  return 0;
}

