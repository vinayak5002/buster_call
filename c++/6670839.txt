#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline double time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n,m; cin >> n >> m;
    vector<int> state(n);
    for(int i=1;i<n;i++){
        string s; cin >> s;
        if(s == "T=T&X") state[i] = 0;
        else if(s == "T=T&Y") state[i] = 1;
        else if(s == "T=T|X") state[i] = 2;
        else if(s == "T=T|Y") state[i] = 3;
        else if(s == "T=T^X") state[i] = 4;
        else if(s == "T=T^Y") state[i] = 5;
    }
    vector<vector<int>> g(n);
    for(int i=1;i<n;i++){
        int x,y; cin >> x >> y;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    vector<int> res(m);
    map<vector<int>,vector<int>> mp;
    vector<int> X(m),Y(m);
    for(int i=0;i<m;i++){
        cin >> X[i] >> Y[i];
        array<int, 4> cnt;
        vector<int> v;
        cnt[0] = cnt[1] = cnt[2] = cnt[3] = 0;
        for(int j=15;j>=0;j--){
            int bit = ((X[i]>>j)&1)*2 + ((Y[i]>>j)&1);
            if(cnt[bit] == 0){
                v.push_back(bit);
                cnt[bit]++;
            }
        }
        // ここは適当で良い
        for(int i=0;i<4;i++){
            if(cnt[i] == 0){
                v.push_back(i);
            }
        }
        mp[v].push_back(i);
    }
    vector<int> p = {0,1,2,3};
    do{
        if(mp.find(p) == mp.end()) continue;
        vector<int> dp(n);
        auto dfs=[&](auto dfs,int s,int pr,int f,int cur)->void{
            int res = cur;
            if(s){
                for(int i=3;i>=0;i--){
                    int x = (p[3-i]>>1)&1, y = (p[3-i])&1;
                    if(state[s] == 0){
                        if(x == 0 and res&(1<<i)) res ^= (1<<i);
                    }
                    else if(state[s] == 1){
                        if(y == 0 and res&(1<<i)) res ^= (1<<i);
                    }
                    else if(state[s] == 2){
                        if(x) res |= (1<<i);
                    }
                    else if(state[s] == 3){
                        if(y) res |= (1<<i);
                    }
                    else if(state[s] == 4){
                        if(x) res ^= (1<<i);
                    }
                    else{
                        if(y) res ^= (1<<i);
                    }
                }
            }
            cur = res;
            bool ff = false;
            // cout << s << " " << cur << endl;
            for(int t:g[s]){
                if(t == pr) continue;
                if(!ff) res = -1, ff = true;
                dfs(dfs,t,s,f^1,cur);
                if(res == -1) res = dp[t];
                if(f == 0){
                    res = max(res, dp[t]);
                }
                else{
                    res = min(res, dp[t]);
                }
            }
            dp[s] = res;
        };
        dfs(dfs,0,-1,0,0);
        // for(int i=0;i<4;i++){
            // cout << p[i] << " ";
        // }
        // cout << endl;
        // for(int i=0;i<n;i++){
            // cout << dp[i] << endl;
        // }
        array<int, 4> tr;
        for(int i=0;i<4;i++){
            tr[p[i]] = 3-i; // のbitを見れば良い
        }
        for(int idx:mp[p]){
            int x = X[idx], y = Y[idx];
            for(int i=0;i<=15;i++){
                int bit = ((x>>i)&1)*2 + ((y>>i)&1);
                if(dp[0]&(1<<tr[bit]))res[idx] |= (1<<i);
            }
        }
    }while(next_permutation(p.begin(), p.end()));
    for(int i=0;i<m;i++){
        cout << res[i] << "\n";
    }
}

