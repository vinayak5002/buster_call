#include<stdio.h>

#define MAX 100000
#define SEN 2000000000

typedef struct card
{
	char suit;
	int value;
}card;

card L[MAX/2+2],R[MAX/2+2];

void swap(card *a, card *b)
{
	card hold = *a;
	*a = *b;
	*b = hold;
}

void merge(card A[], int left,int mid, int right)
{
	int n1 = mid - left;
	int n2 = right - mid;
	for(int i = 0; i<n1; i++)L[i]=A[left+i];
	for(int i = 0; i<n2; i++)R[i]=A[mid+i];
	L[n1].value = R[n2].value = SEN;
	int i = 0, j = 0;
	for(int k = left; k<right; k++)
	{
		if(L[i].value <= R[j].value)
		{
			A[k]=L[i++];
		}
		else
		{
			A[k] = R[j++];
		}
	}
}

void mergeSort(card A[],int left, int right)
{
	if(left+1 < right)
	{
		int mid = (left + right)/2;
		mergeSort(A,left,mid);
		mergeSort(A,mid,right);
		merge(A, left, mid, right);
	}
}

int partition(card A[],int p,int r)
{
	int i, j;
	card x;
	x = A[r];
	i = p - 1;
	for(j=p; j<r; j++)
	{
		if(A[j].value <= x.value)
		{
			i++;
			swap(&A[i],&A[j]);
		}
	}
	swap(&A[i+1],&A[r]);
	return i+1;
}

void quickSort(card A[], int p, int r)
{
	int q;
	if(p<r)
	{
		q = partition(A,p,r);
		quickSort(A,p,q-1);
		quickSort(A,q+1,r);
	}
}

int main()
{
	int n, i, v;
	card A[MAX], B[MAX];
	char S[10];
	int stable = 1;
	
	scanf("%d",&n);
	for(i=0; i<n; i++)
	{
		scanf("%s %d",S,&v);
		A[i].suit = B[i].suit = S[0];
		A[i].value = B[i].value = v;
	}
	
	mergeSort(A, 0, n);
	quickSort(B,0,n-1);
	
	for(i=0; i<n; i++)
	{
		if(A[i].suit != B[i].suit) stable = 0;
	}
	
	if(stable == 1)printf("Stable\n");
	else printf("Not stable\n");
	for(i=0; i<n; i++)
	{
		printf("%c %d\n",B[i].suit, B[i].value);
	}
	
	return 0;
}
