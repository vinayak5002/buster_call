#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline double time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

int res = -1;
bool ff = false;

int f(const string &s, int &id){
    if(id == s.size())return -1;
    vector<pair<ll,char>> v;
    while(id < s.size()){
        if(s[id] == '('){
            id++;
            ff = false;
            auto r = f(s,id);
            if(!ff) return -1;
            if(id == s.size() or s[id] != ')')return -1;
            if(r == -1)return -1;
            id++;
            v.push_back({r,'.'});
        }
        else if(s[id] == ')') break;
        else if(s[id] == '+' or s[id] == '-' or s[id] == '*'){
            v.push_back({-1,s[id]});
            id++;
        }
        else{
            ll cur = 0;
            while(id < s.size() and (s[id] == '0' or s[id] == '1')){
                cur = cur*2 + s[id]-'0';
                if(cur >= (1LL<<10)) return -1;
                id++;
            }
            v.push_back({cur,'.'});
        }
    }
    if(v.size() == 0)return -1;
    if(v.back().first == -1)return -1;
    if(v[0].first == -1)return -1;
    if(v.size() > 1)ff = true;
    for(int i=0;i+1<v.size();i++){
        if(v[i].first == -1 and v[i+1].first == -1)return -1;
        if(v[i].second == '.' and v[i+1].second == '.')return -1;
    }
    // 掛け算
    {
        vector<pair<ll,char>> nv;
        for(int i=0;i<v.size();i++){
            auto p = v[i];
            if(p.second == '*'){
                nv.back().first *= v[i+1].first;
                if(nv.back().first >= (1LL<<10)) return -1;
                if(nv.back().first < 0) return -1;
                i++;
            }
            else{
                nv.push_back(p);
            }
        }
        swap(v,nv);
    }
    // 足し算/引き算
    {
        vector<pair<ll,char>> nv;
        for(int i=0;i<v.size();i++){
            auto p = v[i];
            if(p.second == '+'){
                nv.back().first += v[i+1].first;
                if(nv.back().first >= (1LL<<10)) return -1;
                if(nv.back().first < 0) return -1;
                i++;
            }
            else if(p.second == '-'){
                nv.back().first -= v[i+1].first;
                if(nv.back().first >= (1LL<<10)) return -1;
                if(nv.back().first < 0) return -1;
                i++;
            }
            else{
                nv.push_back(p);
            }
        }
        swap(v,nv);
    }
    return v[0].first;
}

void check(const string &s){
    int id = 0;
    auto r = f(s,id);
    if(id == s.size()){
        res = max(res, r);
    }
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    string s; cin >> s;
    vector<string> v;
    const string cs = "01+-*()";
    auto dfs=[&](auto dfs,int i)->void{
        if(i == s.size()){
            v.push_back(s); return;
        }
        if(s[i] == '.'){
            for(char c:cs){
                s[i] = c;
                dfs(dfs,i+1);
                s[i] = '.';
            }
        }
        else{
            dfs(dfs,i+1);
        }
    };
    dfs(dfs,0);
    for(auto t:v){
        check(t);
    }
    cout << res << endl;
}

