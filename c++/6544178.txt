#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <algorithm>
#include <queue>
using namespace std;

unordered_map<string, int> m;
typedef pair<int, string> pis;
priority_queue<pis, vector<pis>, greater<pis>> heap;
// queue<string> q;
string a;
string fin = "123456789abcdef0";

int calc(string s)
{
    int ans = 0;
    for (int i = 0; i < 16; ++i)
    {
        ans += s[i] - fin[i];
    }
    return ans;
}

int main()
{
    int x;
    for (int i = 0; i < 16; ++i)
    {
        cin >> x;
        if (x >= 0 && x <= 9)
            a.push_back(x + '0');
        else
            a.push_back(x + 'a' - 10);
    }

    m[a] = 0;
    heap.push(make_pair(calc(a), a));
    // q.push(a);

    while (!heap.empty())
    {
        pis u = heap.top();
        heap.pop();
        string t = u.second;

        if (t == fin)
        {
            cout << m[t] << endl;
            break;
        }

        int p = -1;
        for (int i = 0; i < 16; ++i)
        {
            if (t[i] == '0')
            {
                p = i;
                break;
            }
        }

        if ((p + 1) / 4 == p / 4) // right
        {
            swap(t[p], t[p + 1]);
            string tt = t;
            swap(t[p], t[p + 1]);
            if (!m.count(tt))
            {
                m[tt] = m[t] + 1;
                heap.push(make_pair(calc(tt), tt));
            }
        }
        if (p - 1 >= 0 && (p - 1) / 4 == p / 4) // left
        {
            swap(t[p], t[p - 1]);
            string tt = t;
            swap(t[p], t[p - 1]);
            if (!m.count(tt))
            {
                m[tt] = m[t] + 1;
                heap.push(make_pair(calc(tt), tt));
            }
        }
        if (p + 4 < 16) // down
        {
            swap(t[p], t[p + 4]);
            string tt = t;
            swap(t[p], t[p + 4]);
            if (!m.count(tt))
            {
                m[tt] = m[t] + 1;
                heap.push(make_pair(calc(tt), tt));
            }
        }
        if (p - 4 >= 0) // up
        {
            swap(t[p], t[p - 4]);
            string tt = t;
            swap(t[p], t[p - 4]);
            if (!m.count(tt))
            {
                m[tt] = m[t] + 1;
                heap.push(make_pair(calc(tt), tt));
            }
        }
    }

    return 0;
}
