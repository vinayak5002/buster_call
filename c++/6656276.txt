#pragma GCC optimize("O3")
#include<bits/stdc++.h> 
using namespace std;
using ll=long long;
using P=pair<ll,ll>;
template<class T> using V=vector<T>; 
#define fi first
#define se second
#define all(v) (v).begin(),(v).end()
const ll inf=(1e18);
//const ll mod=998244353;
const ll mod=1000000007;
const vector<int> dy={-1,0,1,0},dx={0,-1,0,1};
struct __INIT{__INIT(){cin.tie(0);ios::sync_with_stdio(false);cout<<fixed<<setprecision(15);}} __init;
template<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }
template<class T>void debag(const vector<T> &a){cerr<<"debag :";for(auto v:a)cerr<<v<<" ";cerr<<"\n";}
template<class T>void print(const vector<T> &a){for(auto v:a)cout<<v<<" ";cout<<"\n";}
const int sz=(1<<20);
const int bsiz=(1<<21);
int main(){
    V<V<int>> d(20);
    for(int i=1;i<sz-1;i++){
        int v=i+1;
        for(int j=19;j>0;j--){
            if(v&(1<<j)){
                d[j].emplace_back(i);
                break;
            }
        }
    }
    int n;
    cin>>n;
    V<bool> ng(sz,false);
    V<int> rem(bsiz,0);
    auto calc=[&](int x)->bool{
        bool able=false;
        while(d[x].size()){
            int v=d[x].back();
            d[x].pop_back();
            if(ng[v])continue;
            able=true;
            int cp=v;
            while(cp!=0){
                if(ng[cp])break;
                ng[cp]=true;
                cp=(cp-1)/2;
            }
            queue<int> q;
            q.emplace(v);
            while(q.size()){
                int val=q.front();
                q.pop();
                ng[val]=true;
                int a=val*2+1,b=val*2+2;
                if(a<sz-1)q.emplace(a);
                if(b<sz-1)q.emplace(b);
            }
            break;
        }
        return able; 
    };
    int ngline=0;
    for(int i=0;i<n;i++){
        int x;
        cin>>x;
        if(x<=19){
            cout<<(calc(x)?"Yes":"No")<<"\n";
        }else{
            bool impossible=false;
            x=min(bsiz-1,x);
            int las=-1;
            for(int t=x;t>19;t--){
                if(t==ngline){
                    impossible=true;
                    break;
                }
                if(rem[t]!=0){
                    rem[t]--;
                    las=t;
                    break;
                }
            }
            if(impossible){
                ngline=x;
                cout<<"No"<<"\n";
                continue;
            }
            if(las==-1){
                if(!calc(19)){
                    ngline=x;
                    cout<<"No"<<"\n";
                    continue;
                }
                las=19;
            }
            las++;
            for(int t=las;t<=x;t++){
                rem[t]++;
            }
            cout<<"Yes"<<"\n";
        }
    }
}
