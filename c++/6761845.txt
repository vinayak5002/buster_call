#include <bits/stdc++.h>
#define rep(i, n) for (int i = 0; i < n; ++i)
typedef long long ll;
using namespace std;

typedef string::const_iterator State;
void consume(State &begin, char expected) {
    if (*begin == expected) {
        begin++;
    } else {
        cerr << "Expected '" << expected << "' but got '" << *begin << "'" << endl;
        exit(1);
    }
}

bool parse_cat(State &s) {
    if (*s == 'm') {
        consume(s, 'm');
        bool flag1 = parse_cat(s);
        if (!flag1) return false;

        if (*s == 'e') {
            consume(s, 'e');
            bool flag2 = parse_cat(s);
            if (!flag2) return false;

            if (*s == 'w') {
                consume(s, 'w');
                bool flag3 = parse_cat(s);
                if (!flag3) return false;
                return true;
            }
        }
        return false;
    } else if (*s == 'e')
        return true;
    else if (*s == 'w')
        return true;
    else if (*s == '\0')
        return true;
    return false;
}

int main() {
    cin.tie(0);
    ios_base::sync_with_stdio(false);

    string S;
    cin >> S;

    vector<int> cnt(3);
    rep(i, S.size()) {
        if (S[i] == 'm')
            cnt[0]++;
        else if (S[i] == 'e')
            cnt[1]++;
        else if (S[i] == 'w')
            cnt[2]++;
    }
    if (cnt[0] == cnt[1] && cnt[1] == cnt[2]) {
        rep(i, S.size() - 1) {
            if (S[i] == 'w' && S[i + 1] == 'm') {
                cout << "Rabbit\n";
                return 0;
            }
        }

        State s = S.begin();

        bool is_cat = parse_cat(s);
        if (is_cat) {
            cout << "Cat\n";
            return 0;
        }
    }

    cout << "Rabbit\n";
    return 0;
}

