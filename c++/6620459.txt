#include <bits/stdc++.h>
//#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
#define all(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

vector<ll> fact, factinv, inv;
ll mod = 998244353;
void prenCkModp(ll n) {
    fact.resize(n + 5);
    factinv.resize(n + 5);
    inv.resize(n + 5);
    fact.at(0) = fact.at(1) = 1;
    factinv.at(0) = factinv.at(1) = 1;
    inv.at(1) = 1;
    for (ll i = 2; i < n + 5; i++) {
        fact.at(i) = (fact.at(i - 1) * i) % mod;
        inv.at(i) = mod - (inv.at(mod % i) * (mod / i)) % mod;
        factinv.at(i) = (factinv.at(i - 1) * inv.at(i)) % mod;
    }

}
ll nCk(ll n, ll k) {
    if (n < k) return 0;
    return fact.at(n) * (factinv.at(k) * factinv.at(n - k) % mod) % mod;
}

bool chmax(ll& p, ll q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

bool chmin(ll& p, ll q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll sti(string S) {
    ll res = 0;
    rep(i, S.size()) {
        res += S[i] - '0';
        res *= 10;
    }
    return res / 10;
}

string ist(ll n, ll L) {
    string res = "";
    rep(l, L)res += '0';
    ll p = L - 1;
    while (n > 0) {
        res[p] = char(n % 10 + '0');
        p--;
        n /= 10;
    }
    return res;
}

ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}
vvll G;
vector<bool> seen;
unordered_set<ll> S;
vll DP;

void dfs(ll n) {
    seen[n] = 1;
    S.insert(n);
    DP[n]++;
    for (auto v : G[n]) {
        if (S.count(v)) {
            DP[v] = -1;
        }
        else if (seen[v]) {
            if(DP[v]!=-1)DP[v]++ ;
            continue;
        }
        else {
            dfs(v);
        }
    }
    S.erase(n);
}



int main() {
    //cin.tie(nullptr);
    //ios::sync_with_stdio(false);


    while(1){
        ll T,N;
        cin>>T>>N;
        if(T+N==0)return 0;

        set<pair<ll,ll>> S;
        rep(i,N){
            ll X,Y;
            cin>>X>>Y;
            S.insert({X,Y});
        }
        ll X,Y;
        cin>>X>>Y;
        queue<pair<ll,ll>> Q;
        Q.push({X,Y});
        map<pair<ll,ll>,ll> M;
        set<pair<ll,ll>> seen;
        M[{X,Y}]=0;
        vll dx={1,1,0,0,-1,-1};
        vll dy={1,0,1,-1,0,-1};
        while(!Q.empty()){
            auto p=Q.front();
            Q.pop();
            
            if(seen.count(p))continue;
            seen.insert(p);
            if(M[p]==T)continue;
            rep(d,6){
                ll nx=p.first+dx[d];
                ll ny=p.second+dy[d];
                if(S.count({nx,ny})||seen.count({nx,ny}))continue;
                if(M.count({nx,ny})&&M[{nx,ny}]<M[p])continue;
                M[{nx,ny}]=M[p]+1;
                Q.push({nx,ny});
            }
        }
        cout<<seen.size()<<endl;
    }




}
