#include<bits/stdc++.h>
#define int ll
#define rep(i, N) for(int i = 0; i < (int)N; ++i)
#define rep1(i, N) for(int i = 1; i <= (int)N; ++i)
#define per(i, N) for(int i = N-1; i >= 0; --i)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define bit(n) (1ll << (n))
#define pcnt(n) (__builtin_popcount(n))
#define TakAo(ans) ans ? cout << "Takahashi\n" : cout << "Aoki\n"
#define YesNo(ans) ans ? cout << "Yes\n" : cout << "No\n"
#define endl '\n'
#define fi first
#define se second
#define mkpr make_pair
#define mktpl make_tuple
#define eb emplace_back

using namespace std;
using ll = int64_t;
using ull = uint64_t;
using ld = long double;
using point = struct{ ll x, y; };
template<class T> using max_heap = priority_queue<T>;
template<class T> using min_heap = priority_queue<T, vector<T>, greater<T>>;
template<class T> using vec = vector<T>;
template<class T> using vvec = vec<vec<T>>;
template<class T> using vvvec = vec<vec<vec<T>>>;
template<class T> using vvvvec = vec<vec<vec<vec<T>>>>;

constexpr ld EPS = 1e-10;
constexpr int INF = 1001001001;
constexpr ll LINF = 1001001001001001001ll;
constexpr int MOD = 1e9+7;
//constexpr ll MOD = 998244353;
constexpr int div2 = (MOD + 1) >> 1;
constexpr int NIL = -1;
constexpr int pm[2] = {1, -1};
constexpr int dy[4] = {0, 1, 0, -1};
constexpr int dx[4] = {1, 0, -1, 0};

ll cel(ll a, ll b){ return (a + b - 1) / b;}
ll Gcd(ll a, ll b){ return b ? Gcd(b, a % b) : a;}
template<class T> T powi(T x, ll exp){
    return exp > 0 ? (exp & 1 ? x : 1) * powi(x * x, exp >> 1) : 1;
}
ll modpow(ll x, ll exp, ll mod){
    x %= mod;
    return exp > 0 ? (exp & 1 ? x : 1) * modpow(x * x, exp >> 1, mod) % mod : 1;
}
template<class T> bool chmin(T &a, T b){ return a > b ? (a = b, true) : 0;}
template<class T> bool chmax(T &a, T b){ return a < b ? (a = b, true) : 0;}

using P = pair<ll, ll>;
using Tpl = tuple<int, int, int, int>;

class Rolling_hash{
    const int mod1 = 524287;
    const int mod2 = 524287;
    const int base = 557;
    void powarr(vec<int> &v, int m, int b){
        int N = v.size() - 1;
        v[0] = 1;
        rep(i, N){
            v[i + 1] = v[i] * b;
            if(v[i + 1] >= m) v[i + 1] %= m;
        }
    }
    ll modinv(ll a, ll mod){
        ll b = mod, y = 1, x = 0;
        while(b){
            ll t = a / b;
            a -= t * b; swap(a, b);
            y -= t * x; swap(y, x);
        }
        y %= mod;
        if(y < 0) y += mod;
        return y;
    }
    pair<ll, ll> hash_val(vec<pair<ll, ll>> &h, int l, int r){
        pair<ll, ll> res;
        res.fi = h[r + 1].fi - h[l].fi;
        res.se = h[r + 1].se - h[l].se;
        //cout << res.fi << " " << res.se << endl;
        if(res.fi < 0) res.fi += mod1;
        if(res.se < 0) res.se += mod2;
        res.fi = res.fi * invb1[l] % mod1;
        res.se = res.se * invb2[l] % mod2;
        return res;
    }

    public:
    vec<int> arrb1, arrb2, invb1, invb2;
    Rolling_hash(int N){
        arrb1.resize(N + 10);
        arrb2.resize(N + 10);
        invb1.resize(N + 10);
        invb2.resize(N + 10);
        powarr(arrb1, mod1, base);
        powarr(arrb2, mod2, base);
        powarr(invb1, mod1, modinv(base, mod1));
        powarr(invb2, mod2, modinv(base, mod2));
    }
    vec<pair<ll, ll>> make_hash(string &s){
        int N = s.size();
        vec<pair<ll, ll>> res(N + 1);
        res[N] = {0, 0};
        rep(i, N){
            res[i + 1].fi = res[i].fi + (s[i] + 1) * arrb1[i];
            if(res[i + 1].fi >= mod1) res[i + 1].fi %= mod1;
            res[i + 1].se = res[i].se + (s[i] + 1) * arrb2[i];
            if(res[i + 1].se >= mod2) res[i + 1].se %= mod2;
        }
        return res;
    }
    bool same(vec<pair<ll, ll>> &h1, int l1, int r1, vec<pair<ll, ll>> &h2, int l2, int r2){
        return hash_val(h1, l1, r1) == hash_val(h2, l2, r2);
    }
};

void Main(){
    string t, p; cin >> t >> p;
    int tsz = t.size(), psz = p.size();
    if(p.size() > t.size()){
        return;
    }
    Rolling_hash roll(t.size());
    auto h1 = roll.make_hash(t);
    auto h2 = roll.make_hash(p);

    for(int i = 0; i + psz <= tsz; i++){
        if(roll.same(h1, i, i + psz - 1, h2, 0, psz - 1)){
            cout << i << endl;
        }
    }
}

signed main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    Main();
    return 0;
}

