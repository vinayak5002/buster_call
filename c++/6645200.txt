#include<bits/stdc++.h>

using namespace std;

using ll = long long;
using ld = long double;

#define rep(i, a, b) for(ll i = (ll)a; i < (ll)b; i++)
#define irep(i, v) for(auto i = (v).begin(); i != (v).end(); i++)
#define ALL(v) (v).begin(), (v).end()
#define SZ(v) (ll)(v).size()

const ll INF = 1e18;
const ld EPS = 1e-10;
const ll MOD = 1e9 + 7;
const ld PI = M_PI;

class edge{
  public:
    ll to, cost;
    edge() {}
    edge(ll to, ll cost): to(to), cost(cost) {}
};

void bfs(ll s, vector<vector<edge>> &G, vector<ll> &dist){
  ll n = G.size();
  for(ll i = 0; i < n; i++) dist[i] = INF;
  queue<ll> que;
  vector<ll> seen(n, 0);

  que.push(s);
  dist[s] = 0;
  seen[s] = 1;

  while(!que.empty()){
    ll u = que.front();
    que.pop();
    for(ll i = 0; i < G[u].size(); i++){
      edge e = G[u][i];
      if(dist[e.to] == INF){
        dist[e.to] = dist[u] + e.cost;
        que.push(e.to);
      }
    }
  }
}

ll tree_diameter(vector<vector<edge>> &G){
  ll n = G.size();
  vector<ll> dist(n);
  
  bfs(0, G, dist);

  ll res = 0;
  ll tgt = 0;
  for(ll i = 0; i < n; i++){
    if(dist[i] == INF) continue;
    if(res < dist[i]){
      res = dist[i];
      tgt = i;
    }
  }

  bfs(tgt, G, dist);
  res = 0;

  for(ll i = 0; i < n; i++){
    if(dist[i] == INF) continue;
    res = max(res, dist[i]);
  }

  return res;
}

int main(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  srand((unsigned)time(NULL));
  cout << fixed << setprecision(20);

  ll n;
  cin >> n;
  vector<vector<edge>> G(n);
  rep(i, 0, n - 1){
    ll s, t, c;
    cin >> s >> t >> c;
    G[s].push_back({t, c});
    G[t].push_back({s, c});
  }

  cout << tree_diameter(G) << endl;

  return 0;
}
