#include <iostream>
#include <vector>
#include <set>

using namespace std;

struct edge
{
    int to;
    int weight;
    bool operator<(const edge &e) const
    {
        return this->weight < e.weight;
    }
    edge(int to = 0, int weight = 0) : to(to), weight(weight) {}
};

int main()
{
    int V, E, r;
    cin >> V >> E >> r;
    vector<vector<edge>> G(V, vector<edge>(0));
    for (int i = 0; i < E; i++)
    {
        int s, t, d;
        cin >> s >> t >> d;
        G[s].push_back(edge(t, d));
    }
    vector<int> ans(V, -1);
    multiset<edge> multi;
    multi.insert(edge(r, 0));
    while (!multi.empty())
    {
        edge addV = *multi.begin();
        multi.erase(multi.begin());
        if (ans[addV.to] != -1)
            continue;
        ans[addV.to] = addV.weight;
        for (edge next : G[addV.to])
        {
            // p.first = nest pos; p.second = weight of e;
            if (ans[next.to] == -1)
            {
                multi.insert(edge(next.to, ans[addV.to] + next.weight));
            }
        }
    }
    for (int i = 0; i < V; i++)
    {
        if (ans[i] == -1)
        {
            cout << "INF" << endl;
        }
        else
        {
            cout << ans[i] << endl;
        }
    }

    return 0;
}
