#include <iostream>
#include <vector>
#include <algorithm>
#include <tuple>
#include <map>
#include <queue>

using namespace std;

using ll = long long;
using pii = pair<int, int>;	using pll = pair<ll, ll>;	using pil = pair<int, ll>;	using pli = pair<ll, int>;
using vi = vector<int>;		using vvi = vector<vi>;		using vvvi = vector<vvi>;
using vll = vector<ll>;		using vvll = vector<vll>;	using vvvll = vector<vvll>;
using vb = vector<bool>;	using vvb = vector<vb>;		using vvvb = vector<vvb>;
template <class T> using pqr = priority_queue<T, vector<T>, greater<T>>;

const ll INFL = (ll)1e18;	const int INF = (int)1e9;
const int MOD = 1000000007;

template <class T> inline bool chmax(T& M, const T& x) { if (M < x) { M = x; return true; } return false; } // 最大値を更新（更新されたら true を返す）
template <class T> inline bool chmin(T& m, const T& x) { if (m > x) { m = x; return true; } return false; } // 最小値を更新（更新されたら true を返す）


//ユークリッドの互除法
ll gcd(ll a, ll b) {
	if (b == 0) return a;
	return gcd(b, a % b);
}


int main()
{
	int n;
	cin >> n;
	int g = 0;
	if (n == 2) {
		int a, b;
		cin >> a >> b;

		g = gcd(a, b);
	}
	else {
		int a, b, c;
		cin >> a >> b >> c;

		g = gcd(a, b);
		g = gcd(g, c);
	}

	vi forward, backward;
	for (int i = 1; i * i <= g; i++) {
		if (g % i == 0) {
			forward.push_back(i);
			if(g/i != i)
				backward.push_back(g / i);
		}
	}

	for (auto i : forward)
		cout << i << endl;
	reverse(backward.begin(), backward.end());
	for (auto i : backward)
		cout << i << endl;

	return 0;
}
