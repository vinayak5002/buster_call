#課題５ １５パズル
import copy
import heapq

class Node:
    def __init__(self, state, g, h, parent):
        self.state = state
        self.g = g
        self.h = h
        self.parent = parent
        
    def cost(self):
        return self.g + self.h

    def __lt__(self, other):
        if (self.g + self.h) < (other.g + other.h):
            return True
        elif (self.g + self.h) == (other.g + other.h):
            return self.h < other.h
        else:
            return False

class State:
    def __init__(self, pos):
        '''
        state: panel position in 4x4 integer list
        '''
        self.pos = pos

    def __str__(self):
        string = ""
        for i in range(4):
            for j in range(4):
                string += str(self.pos[i][j])
            string += '\n'
        return string

    def __eq__(self, other):
        return self.pos == other.pos

    def get_position(self, num):
        for i in range(4):
            for j in range(4):
                if self.pos[i][j] == num:
                    return (i, j)
        # should throw exception
        return None

    def expand(self, p, node):
        children = []
        
        ns = node.state
        nsp = node.state.pos 
        (i,j) = ns.get_position(0)
        
        
        st = State([[-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1]])
        st1 = State([[-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1]])
        st2 = State([[-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1]])
        st3 = State([[-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1]])
        ns_copy = copy.deepcopy(ns)
        
        if i != 0:
            st.pos = copy.deepcopy(nsp)
            st.pos[i][j], st.pos[i-1][j] = st.pos[i-1][j],st.pos[i][j]
            children.append(Node(st, node.g+1, p.heuristic(st), ns_copy)) 
            
        if i != 3:
            st1.pos = copy.deepcopy(nsp)
            st1.pos[i][j], st1.pos[i+1][j] = st1.pos[i+1][j],st1.pos[i][j]
            children.append(Node(st1, node.g+1, p.heuristic(st1), ns_copy))
            
        if j != 0:
            st2.pos = copy.deepcopy(nsp)
            st2.pos[i][j], st2.pos[i][j-1] = st2.pos[i][j-1],st2.pos[i][j]
            children.append(Node(st2, node.g+1, p.heuristic(st2), ns_copy))
    
        if j != 3:
            st3.pos = copy.deepcopy(nsp)
            st3.pos[i][j], st3.pos[i][j+1] =  st3.pos[i][j+1],st3.pos[i][j]
            children.append(Node(st3, node.g+1, p.heuristic(st3), ns_copy))
            
        return children


class Puzzle:
    def __init__(self, init_pos):
        self.start = State(init_pos)
        self.goal = State([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 0]])

    def heuristic(self, state):
        #マンハッタン距離
        h_value = 0
        for i in range(4):
            for j in range(4):
                (x,y) = self.goal.get_position(state.pos[i][j])
                h_value += abs(x-i) + abs(y-j)
        
        return h_value
    

class AStar:
    def __init__(self, puzzle):
        self.puzzle = puzzle
        self.closed_list = { }


    def search(self):
        start_state = self.puzzle.start
        dummy_state = State([[-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1]])
        start_node = Node(start_state, 0, self.puzzle.heuristic(start_state), dummy_state)
        
        # open_list の初期化
        open_queue = [ start_node ]
        heapq.heapify(open_queue)
        
        # ハッシュ表の初期化。ここではハッシュ表のキーとしてStateの文字列を使っている
        self.closed_list = {}
        self.closed_list[str(start_state)] = start_node
    

        if start_state == self.puzzle.goal:
            return start_node


        while len(open_queue) != 0:
            n = heapq.heappop(open_queue)
            if n.state == self.puzzle.goal:
                return n
            child_nodes = n.state.expand(self.puzzle, n)
            for c in child_nodes:
                scs = str(c.state)
                if scs not in self.closed_list or c.g < self.closed_list[scs].g:                     
                    self.closed_list[scs] = c                   
                    heapq.heappush(open_queue, c)
            
        return None
              

       
     
pz = Puzzle([[-1,-1,-1,-1],[-1,-1,-1,-1],[-1,-1,-1,-1],[-1, -1, -1, -1]])

for i in range(4):
    nums = [int(e) for e in input().split()]
    for j in range(4):
        pz.start.pos[i][j] = nums[j]

solver = AStar(pz)
solution = solver.search()
print(solution.g)
