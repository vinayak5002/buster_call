#include <algorithm>
#include <cassert>
#include <climits>
#include <cmath>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <random>
#include <complex>
#include <bitset>
#include <iomanip>
#include <memory>
#include <functional>

#define rep(i, n, s) for (int i = (s); i < int(n); i++)
#define per(i, n, s) for (int i = (n) - 1; i >= int(s); i--)
#define MM << " " <<
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)

template <class T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <class T>
using MaxHeap = std::priority_queue<T>;

using ll = long long;
using Pii = std::pair<int, int>;
using Pll = std::pair<ll, ll>;
using Pdd = std::pair<double, double>;

template <class T>
bool chmin(T &a, const T b) {
    if (b < a) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
bool chmax(T &a, const T b) {
    if (a < b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
void vdeb(const std::vector<T> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        if (i == n - 1)
            std::cout << da[i];
        else
            std::cout << da[i] << " ";
    }
    std::cout << std::endl;
}
template<class T>
void vdeb(const std::vector<std::vector<T>> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        // std::cout << i << " : ";
        vdeb(da[i]);
    }
    std::cout << std::endl;
}

using namespace std;

int main() {
    ll n, m, l; cin >> n >> m >> l;
    vector<int> K(n);
    rep(i,n,0) cin >> K[i];
    vector<ll> S(m);
    rep(i,m,0) cin >> S[i];
    sort(all(K));
    vector<ll> itv(m+1);
    rep(i,m,0) itv[i+1] = itv[i] +  S[i];
    vector<ll> dp(n-2);
    dp[0] = (itv[K[1]] - itv[K[0]-1])/l;
    // vdeb(dp);
    rep(i,n-1,2) {
        vector<ll> tmp(n-2, LLONG_MAX/2);
        rep(j,i-1,0) {
            tmp[j] = dp[j] + (itv[K[i]] - itv[K[i-1]-1])/l;
        }
        rep(j,i-1,0) chmin(tmp[i-1], dp[j]+(itv[K[i]] - itv[K[j]-1])/l);
        swap(tmp, dp);
        // vdeb(dp);
    }
    ll ans = LLONG_MAX/2;
    rep(i,n-2,0) {
        chmin(ans, dp[i] + (itv[K[n-1]] - itv[K[n-2]-1])/l + (itv[K[n-1]] - itv[K[i]-1])/l);
    }
    cout << ans << endl;
}
