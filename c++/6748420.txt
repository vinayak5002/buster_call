#include <bits/stdc++.h>
#define rep(i,n) for(int i = 0; i < (int)(n); i++)
#define rrep(ri,n) for(int ri = (int)(n-1); ri >= 0; ri--)
#define rep2(i,x,n) for(int i = (int)(x); i < (int)(n); i++)
#define rrep2(ri,x,n) for(int ri = (int)(n-1); ri >= (int)(x); ri--)
#define repit(itr,x) for(auto itr = x.begin(); itr != x.end(); itr++)
#define rrepit(ritr,x) for(auto ritr = x.rbegin(); ritr != x.rend(); ritr++)
#define ALL(x) x.begin(), x.end()
using ll = long long;
using namespace std;

int nopr(int x) {
  return (x + 3 - 1) % 3;
}

int mopr(int x, int y) {
  if(x > y) swap(x, y);
  if(x == 0) return 0;
  if(x == 1) return 1;
  return 2;
}

int popr(int x, int y) {
  if(x > y) swap(x, y);
  if(y == 2) return 2;
  if(y == 1) return 1;
  return 0;
}

string s;
int fc(int x, int y, int z, int &pos) {
  int stk = 1;
  while(s.at(pos) == '-') {
    pos++;
    stk *= -1;
  }
  if(stk != 1) {
    return nopr(fc(x, y, z, pos));
  }
  int now = 0;
  if(s.at(pos) == '(') {
    pos++;
    int r = fc(x, y, z, pos);
    char pp = s.at(pos++);
    if(pp == '*') {
      int re = mopr(r, fc(x, y, z, pos));
      assert(s.at(pos) == ')');
      pos++;
      return re;
    } else if(pp == '+') {
      int re = popr(r, fc(x, y, z, pos));
      assert(s.at(pos) == ')');
      pos++;
      return re;
    }
    cerr << "ERROR" << endl;
    exit(1);
  }
  char c = s.at(pos++);
  if('0' <= c && c <= '2') now = c - '0';
  else if(c == 'P') {
    now = x;
  } else if(c == 'Q') {
    now = y;
  } else if(c == 'R') {
    now = z;
  } else {
    cerr << "ERROR" <<endl;
    exit(1);
  }
  return now;
}

int main() {
while(1) {
  cin >> s;
  if(s == ".") break;
  int ans = 0;
  rep(x, 3)rep(y, 3)rep(z, 3) {
    int pos = 0;
    int r = fc(x, y, z, pos);
    if(r == 2) ans++;
  }
  cout << ans << endl;
}
  return 0;
}
