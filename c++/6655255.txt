#include<stdio.h>
#define MAX 100000
struct Node{int p;int l;int r; };
struct Node T[MAX];
int n,D[MAX],H[MAX];

void print(int u){
	int i,c;
	printf("node %d:",u);
	printf(" parent = %d,",T[u].p);
	printf(" sibling = %d,",getSibling(u));
	int deg = 0;
	if(T[u].l != -1){
		deg++;
	}
	if(T[u].r != -1){
		deg++;
	}
	printf(" degree = %d, ",deg);
	printf("depth = %d, ",D[u]);
	printf("height = %d, ",H[u]);
	if(T[u].p == -1){
		printf("root,");
	}
	else if(T[u].l == -1 && T[u].r ==-1){
		printf("leaf,");
	}
	else{
		printf("internal node,");  
	}
}
void rec(int u,int p){
	D[u] = p;
	if(T[u].r != -1)rec(T[u].r,p+1);
	if(T[u].l != -1)rec(T[u].l,p+1);
}
int setHeight(int u){
	int h1 = 0;
	int h2 = 0;
	if(T[u].l != -1){
		h1 = setHeight(T[u].l)+1;
	}
	if(T[u].r != -1){
		h2 = setHeight(T[u].r)+1;
	}
	if(h1>h2){
		H[u] = h1;
	}
	else{
		H[u] = h2;
	}
	return H[u];
}
int getSibling(int u){
	if(T[u].p == -1){
		return -1;
	}
	if(T[T[u].p].l != -1 && T[T[u].p].l != u){
		return T[T[u].p].l;
	}
	if(T[T[u].p].r != -1 && T[T[u].p].r != u){
		return T[T[u].p].r;
	}
	return -1;
}
			
int main(){
	int i,v,c,left,right;
	scanf("%d",&n);
	for(i = 0;i<n;i++){
		T[i].p = -1;
	}
	for(i=0;i<n;i++){
		scanf("%d %d %d",&v,&left,&right);
		T[v].l = left;
		T[v].r = right;
		if(left != -1){
			T[left].p = v;
		}
		if(right != -1){
			T[right].p = v;
		}
	}
	for(i=0;i<n;i++){
		if(T[i].p==-1){
			c = i;
		}
	}
	rec(c,0);
	setHeight(c);
	for(i=0;i<n;i++){
		print(i);
	}
	return 0;
}	



