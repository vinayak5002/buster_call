#include <iostream>
#include <vector>
#include <string>
#include <cmath>
#include <cstdint>
using ll = uint64_t;
using ulong = uint64_t;
using namespace std;
ll B = 100000007;
const ulong MASK30 = (1UL << 30) - 1;
const ulong MASK31 = (1UL << 31) - 1;
const ulong MOD = (1UL << 61) - 1;
const ulong MASK61 = MOD;
//mod 2^61-1を計算する関数
ulong CalcMod(ulong x)
{
    ulong xu = x >> 61;
    ulong xd = x & MASK61;
    ulong res = xu + xd;
    if (res >= MOD) res -= MOD;
    return res;
}


//a*b mod 2^61-1を返す関数(最後にModを取る)
ulong Mul(ulong a, ulong b)
{
    ulong au = a >> 31;
    ulong ad = a & MASK31;
    ulong bu = b >> 31;
    ulong bd = b & MASK31;
    ulong mid = ad * bu + au * bd;
    ulong midu = mid >> 30;
    ulong midd = mid & MASK30;
    return CalcMod(au * bu * 2 + midu + (midd << 31) + ad * bd);
}

ll modpow(ll a, ll n) {
	ll val = 1;
	while (n > 0) {
		if (n & 1) val = Mul(val , a);
		a = Mul(a, a);
		n >>= 1;
	}
	return val;
}
vector<ll> vec_contains(string s, string t) {
	ll n = s.size();
	ll m = t.size();
	vector<ll> ans;
	if (n < m) return ans;
	ll shash = 0;
	ll thash = 0;
	for (ll i = 0; i < m; i++) {
		shash = CalcMod(Mul(shash, B) + s[i]);
		thash = CalcMod(Mul(thash, B) + t[i]);
	}
	ll BM = modpow(B, m);
	for (ll i = 0; i < n; i++) {
		if (shash == thash)  ans.push_back(i);
		if (i + m > n) break;
		shash = CalcMod(Mul(shash, B) - Mul(s[i] , BM) + s[i+m]);
	}
	return ans;
}
int main() {
	string s, t; cin >> s >> t;
	for (auto x: vec_contains(s, t)) cout << x << endl;
}

