#include<bits/stdc++.h>
// #include<atcoder/modint>
using namespace std;
// using namespace atcoder;
const int inf = 1 << 30;

void solve(){
	while(1){
		int n;
		cin >> n;
		if(n == 0) return;
		vector<int> X(n), Y(n);
		set<int> X_se, Y_se;

		for(int i = 0; i < n; i++){
			cin >> X[i] >> Y[i];
			X_se.insert(X[i]);
			Y_se.insert(Y[i]);
		}
		int min_a, max_a, min_b, max_b;
		min_a = inf;
		max_a = -inf;
		min_b = inf;
		max_b = -inf;
		for(int i = 0; i < 4; i++){
			int a, b;
			cin >> a >> b;
			min_a = min(min_a, a);
			max_a = max(max_a, a);
			min_b = min(min_b, b);
			max_b = max(max_b, b);
		}
		vector<pair<int, pair<int, int>>> col_edges;
		for(int i = 0; i < n; i++){
			int bx = (i == 0)? X[n-1]:X[i-1];
			int by = (i == 0)? Y[n-1]:Y[i-1];
			int x = X[i];
			int y = Y[i];
			if(bx == x){
				if(by > y) swap(by, y);
				col_edges.push_back({x, {by, y}});
			}

		}
		X_se.insert(min_a);
		X_se.insert(max_a);
		Y_se.insert(min_b);
		Y_se.insert(max_b);


		int ans = 0;
		auto it_x = X_se.begin();
		int bx = *it_x;
		it_x++;
		while(it_x != X_se.end()){
			int x = *it_x;
			auto it_y = Y_se.begin();
			int by = *it_y;
			it_y++;
			while(it_y != Y_se.end()){
				int y = *it_y;
				if(2 * min_a <= bx + x && bx + x <= 2 * max_a && 2 * min_b <= by + y && by + y <= 2 * max_b){
					by = y;
					it_y++;
					continue;
				}
				int cnt = 0;
				for(auto tmp: col_edges){
					int xx = tmp.first;
					int y1 = tmp.second.first;
					int y2 = tmp.second.second;					
					if(2 * xx < bx + x);
					else if(2 * y1 <= by + y && by + y <= 2 * y2) cnt++;
				}
				if(cnt & 1) ans += (x - bx) * (y - by);
				by = y;
				it_y++;
			}
			bx = x;
			it_x++;
		}
		cout << ans << "\n";
	}
	
}

int main(){
    cin.tie(0)->sync_with_stdio(0);
    int t;
    t = 1;
    // cin >> t;
    while(t--) solve();
}
    
    
	
