#include <bits/stdc++.h>

struct DisjointSetsUnion {
    std::vector<int> p, s;
    DisjointSetsUnion(int n) : p(n), s(n, 1) {
        std::iota(p.begin(), p.end(), 0);
    }
    DisjointSetsUnion() {

    }
    int find(int x) {
        return p[x] = (x == p[x] ? x : find(p[x]));
    }
    bool same(int x, int y) {
        return find(x) == find(y);
    }
    bool merge(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return false;
        }
        if (s[x] > s[y]) {
            std::swap(x, y);
        }
        s[y] += s[x];
        p[x] = y;
        return true;
    }
    int size(int x) {
        return s[find(x)];
    }
};
using DSU = DisjointSetsUnion;

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    int n, m;
    std::cin >> n >> m;

    DSU dsu(n);
    for (int i = 0; i < m; i++) {
        int opt, x, y;
        std::cin >> opt >> x >> y;
        if (opt == 0) {
            dsu.merge(x, y);
        } else if (opt == 1) {
            std::cout << (int) dsu.same(x, y) << "\n";
        }
    }

#ifdef LOCAL
    std::cout << std::flush;
    system("pause");
#endif
    return 0;
}
