#include <bits/stdc++.h>
using namespace std;

vector<int> m, a, b;

bool isPrimes(int n) {
    if (n == 2) return true;
    if (n == 1 || n % 2 == 0) return false;

    for (int i = 3; i < n; i += 2) {
        if (n % i == 0) return false;
    }
    return true;
}

void createPrimeList(int n, vector<int> &v) {
    for (int i = 1; i < n; i++) {
        if (isPrimes(i)) v.push_back(i);
    }
}

double ratioNum(int a, int b) {
    if (a < b)
        return (double)a / (double)b;
    else
        return (double)b / (double)a;
}

int maxNum() {
    int max = 0;
    for (int i = 0; i < m.size() - 1; i++) {
        if (max < m.at(i)) max = m.at(i);
    }
    return max;
}

int main() {
    vector<int> p, q, primes;
    int k = 0;

    while (1) {
        m.push_back(1);
        a.push_back(1);
        b.push_back(1);
        cin >> m.at(k) >> a.at(k) >> b.at(k);
        if (m.at(k) == 0 && a.at(k) == 0 && b.at(k) == 0) break;
        k++;
    }

    createPrimeList(maxNum(), primes);

    k = 0;
    for (int n = 0; n < m.size() - 1; n++) {
        p.push_back(1);
        q.push_back(1);

        int maxI = primes.size() - 1;
        if (m.at(n) < maxNum() / 2) {
            for (int i = 0; i < primes.size(); i++) {
                if (m.at(n) < primes.at(i)) {
                    maxI = i - 1;
                    break;
                }
            }
        } else {
            for (int i = primes.size() - 1; 0 <= i; i--) {
                if (m.at(n) > primes.at(i)) {
                    if (i + 1 != primes.size()) {
                        maxI = i + 1;
                    }
                    break;
                }
            }
        }

        for (int i = maxI; 0 <= i; i--) {
            for (int j = maxI; 0 <= j; j--) {
                if ((ratioNum(a.at(n), b.at(n)) <=
                         ratioNum(primes.at(i), primes.at(j)) &&
                     ratioNum(primes.at(i), primes.at(j)) <= 1.0) &&
                    (p.at(k) * q.at(k) <= primes.at(i) * primes.at(j) &&
                     primes.at(i) * primes.at(j) <= m.at(n))) {
                    p.at(k) = primes.at(i);
                    q.at(k) = primes.at(j);
                    break;
                }
            }
        }

        k++;
    }

    for (int i = 0; i < k; i++) {
        cout << p.at(i) << " " << q.at(i) << endl;
    }

    return 0;
}

