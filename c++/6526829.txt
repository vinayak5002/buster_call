#include <bits/stdc++.h>
#define For(i, n) for(int i = 0; i < n; ++i)
#define ll long long
#define LLMAX 1e18

using namespace std;

const int maxn = 501;

int n, m;
vector<int> g[maxn];

ll cap[maxn][maxn];
ll rcap[maxn][maxn];

int dis[maxn];
bool vst[maxn];

int bfs(int s, int t) {
    memset(dis, maxn + 1, sizeof(dis));
    memset(vst, 0, sizeof(vst));

    queue<int> que;
    dis[s] = 0;
    vst[s] = 1;
    que.push(s);
    while (que.size()) {
        int u = que.front();
        que.pop();
        for (auto v : g[u]) {
            if (cap[u][v] > 0 && !vst[v]) {
                dis[v] = dis[u] + 1;
                vst[v] = 1;
                que.push(v);
                if (v == t) return dis[t];
            }
        }
    }
    return n;
}

ll dfs(int u, ll mf, int s, int t) {
    // cout << "dfs " << u << '\n';
    if (u == t) return mf;
    vst[u] = 1;
    
    for (auto v : g[u]) {
        // cout << "check " << v << ' ' << cap[u][v] << ' ' << vst[v] << ' ' << dis[v] << ' ' << dis[u] << '\n';
        if (cap[u][v] > 0 && !vst[v] && dis[v] == dis[u] + 1) {
            // cout << "go " << v << ' ' << cap[u][v] << '\n';
            ll f = dfs(v, min(mf, cap[u][v]), s, t);
            // cout << "end\n";
            if (f) {
                cap[u][v] -= f;
                cap[v][u] += f;
                return f;
            }
        }
    }
    return 0;
}

// void show() {
//     cout << '\n';
//     cout << "dis " << ' ';
//     For (u, n) {
//         cout << dis[u] << ' ';
//     }
//     cout << '\n';
//     For (u, n) {
//         for (auto v : g[u]) {
//             if (cap[u][v] > 0) {
//                 cout << u << ' ' << v << ' ' << cap[u][v] << '\n';
//             }
//         }
//     }
//     cout << '\n';
// }

ll dinitz(int s, int t) {
    ll ans = 0;
    while (bfs(s, t) != n) {
        // cout << "bfs " << bfs(s, t) << '\n';
        // show();
        for (;;) {
            memset(vst, 0, sizeof(vst));
            ll f = dfs(s, LLMAX, s, t);
            // cout << "f " << f << '\n';
            if (!f) break;
            ans += f;
        }
    }
    return ans;
}

ll gabow(int s, int t) {
    ll ans = 0;
    for (int b = (1 << 30); b ; b >>= 1) {
        For (u, n) {
            For (v, n) {
                cap[u][v] <<= 1;
                cap[u][v] += !!(rcap[u][v] & b);
            }
        }

        ans <<= 1;
        ans += dinitz(s, t);
        // cout << (ans += dinitz(s, t)) << '\n';
    }
    return ans;
}

int main(int argc, char* argv[]) {
    // ifstream fin(argv[1]);
    // ofstream fout(argv[2]);

    // fin >> n >> m;
    cin >> n >> m;
    For (i, m) {
        int u, v, w;
        // fin >> u >> v >> w;
        cin >> u >> v >> w;
        g[u].push_back(v);
        g[v].push_back(u);
        
        // assert(cap[u][v] == 0);
        // assert(cap[v][u] == 0);
        rcap[u][v] = rcap[v][u] = w;
        // cap[u][v] = cap[v][u] = w;
    }

    // fout << gabow(0, n - 1) << '\n';
    cout << gabow(0, n - 1) << '\n';

    return 0;
}
