#include <iostream> 
#include <string> 
#include <utility>
#include <vector> 
#include <algorithm> 
#include <map>
#include <queue> 
#include <set>
#include <stack>
#include <iomanip>
#include <cmath>
#include <limits>
#include <complex>
#include <random>
#include <ctime>
using namespace std;
typedef long long ll;
#define rep(i,n) for (int i = 0; i < (n); i++)
#define all(v) v.begin(), v.end()
const ll INF = 1LL<<62;
const int inf = 1 << 29;
const int dx[] = { 1,0,-1,0 };
const int dy[] = { 0,1,0,-1 };
const ll mod = 998244353;
const int ddx[] = { 1,1,-1,-1 };
const int ddy[] = { 1,-1,1,-1 };
const int in = 2147483647;

int n, q;
int dat[1000000];

void update(int loc, int value) {
    loc += n - 1;

    dat[loc] = value;

    if (n == 1)return;

    int parent = (loc - 1) / 2;

    while (true) {
        dat[parent] = min(dat[2 * parent + 1], dat[2 * parent + 2]);

        if (parent == 0)break;
        else {
            parent = (parent - 1) / 2;
        }
    }
}


int query(int a, int b, int k, int l, int r) {
    if (a > r || b < l)return in;
    if (a <= l && r <= b)return dat[k];
    int vl = query(a, b, k * 2 + 1, l, (r + l) / 2);
    int vr = query(a, b, k * 2 + 2, (r + l) / 2 + 1, r);

    return min(vl, vr);
}


int main() {
    int nn;
    n = 1;
    cin >> nn >> q;
    while (nn > n)n *= 2;
    rep(i, n)dat[i] = in;

    rep(i,q) {
        ll c, x, y;
        cin >> c >> x >> y;
        if (c == 0) {
            update(x, y);
        }
        else {
            cout << query(x, y, 0, 0, n - 1) << endl;
        }
    }


    return 0;
}







