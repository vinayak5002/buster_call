# -*- coding: utf-8 -*-
import math

class Dice:
    _roll_table = [
        [1, 2, 4, 3], # 0
        [0, 3, 5, 2], # 1
        [0, 1, 5, 4], # 2
        [0, 4, 5, 1], # 3
        [0, 2, 5, 3], # 4
        [1, 3, 4, 2], # 5
    ]

    def __init__(self, f=[1,2,3,4,5,6]):
        self.faces = f
        assert len(f) == 6
        self.top = 0
        self.front = 1
        t = self._roll_table[self.top]
        ti = (t.index(self.front)+1)%4
        self.east = t[ti]

    def renew(self, top, front):
        self.top = top
        self.front = front
        t = self._roll_table[self.top]
        ti = (t.index(self.front)+1)%4
        self.east = t[ti]

    def roll(self, way):
        if way == 'N':
            bt = self.top
            self.top = self.front
            self.front = 5-bt
        elif way == 'E':
            be = self.east
            self.east = self.top
            self.top = 5-be
        elif way == 'W':
            bt = self.top
            self.top = self.east
            self.east = 5-bt
        elif way == 'S':
            bf = self.front
            self.front = self.top
            self.top = 5-bf
        else:
            assert False
    
    def rotate(self, way):
        if way == 'CW':
            self.renew(self.top, self.east)
        elif way == 'CCW':
            self.renew(self.top, 5-self.east)
        else:
            assert False

    def flip(self):
        self.roll('N')
        self.roll('N')
    
    def get_top(self):
        return self.faces[self.top]

    def get_front(self):
        return self.faces[self.front]

    def get_east(self):
        return self.faces[self.east]

    def get_bottom(self):
        return self.faces[5-self.top]

    def get_back(self):
        return self.faces[5-self.front]

    def get_west(self):
        return self.faces[5-self.east]


d1 = Dice(list(map(int, input().split())))
d2 = Dice(list(map(int, input().split())))

# alignment top
d1t = d1.get_top()
d1f = d1.get_front()
for _ in range(4):
    d2.roll('N')
    d2t = d2.get_top()
    if d1t == d2t: break
else:
    d2.roll('E')
    d2t = d2.get_top()
    if not d1t == d2t:
        d2.roll('E')
        d2.roll('E')
        d2t = d2.get_top()
        if not d1t == d2t:
            print("No")
            exit()

# alignment front
for _ in range(4):
    d2.rotate('CW')
    d2t = d2.get_top()
    if d1t == d2t: break
else:
    print("No")
    exit()

if (d1.get_top() == d2.get_top()
and d1.get_front() == d2.get_front()
and d1.get_east() == d2.get_east()
and d1.get_bottom() == d2.get_bottom()
and d1.get_back() == d2.get_back()
and d1.get_west() == d2.get_west()):
    print("Yes")
else:
    print("No")

