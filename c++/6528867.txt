#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct dice{
	int top;
	int front;
	int right;
	int left;
	int back;
	int bottom;			
}dice;

void N(dice *p);
void E(dice *p);
void W(dice *p);
void S(dice *p);

int main(void){
	
	int flag=0,j,k,m,n;
	int top,front,right,left,back,bottom;
	dice *p;
	dice *q;
	
	p=(dice*)malloc(sizeof(dice));
	
	scanf("%d%d%d%d%d%d",&top,&front,&right,&left,&back,&bottom);
	p->top=top;
	p->front=front;
	p->right=right;
	p->left=left;
	p->back=back;
	p->bottom=bottom;
	
	q=(dice*)malloc(sizeof(dice));
	
	scanf("%d%d%d%d%d%d",&top,&front,&right,&left,&back,&bottom);
	q->top=top;
	q->front=front;
	q->right=right;
	q->left=left;
	q->back=back;
	q->bottom=bottom;
	
	for(j=0;j<4;j++){
		N(p);
		if(p->top==q->top&&p->front==q->front&&p->right==q->right&&\
		p->left==q->left&&p->back==q->back&&p->bottom==q->bottom){
			flag=1;
			break;		
		} 
		for(k=0;k<4;k++){
			E(p);
			if(p->top==q->top&&p->front==q->front&&p->right==q->right&&\
			p->left==q->left&&p->back==q->back&&p->bottom==q->bottom){
				flag=1;
				break;
			}
			for(m=0;m<4;m++){
				W(p);
				if(p->top==q->top&&p->front==q->front&&p->right==q->right&&\
				p->left==q->left&&p->back==q->back&&p->bottom==q->bottom){
					flag=1;
					break;
				}
				for(n=0;n<4;n++){
					S(p);
					if(p->top==q->top&&p->front==q->front&&p->right==q->right&&\
					p->left==q->left&&p->back==q->back&&p->bottom==q->bottom){
					flag=1;
					break;
					}
				}
			}
		}
	}
	if(flag==1) printf("Yes\n");
	else printf("No");
	
	return 0;
}

void N(dice *p){
	
	int temp;
	
	temp=p->top;
	p->top=p->front;
	p->front=p->bottom;
	p->bottom=p->back;
	p->back=temp;
}

void E(dice *p){
	
	int temp;
	
	temp=p->top;
	p->top=p->left;
	p->left=p->bottom;
	p->bottom=p->right;
	p->right=temp;
}

void W(dice *p){
	
	int temp;
	
	temp=p->top;
	p->top=p->right;
	p->right=p->bottom;
	p->bottom=p->left;
	p->left=temp;
}

void S(dice *p){
	
	int temp;
	
	temp=p->top;
	p->top=p->back;
	p->back=p->bottom;
	p->bottom=p->front;
	p->front=temp;
}
