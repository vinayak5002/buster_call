#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
#include<queue>

using namespace std;

typedef pair<int,int> Pll;
const int INF=0x3f3f3f3f;
const int N=1e4+10;
const int M=4e4+10;
int n,m,num_edge;
int head[N];
int dist[N];
bool vis[N];
int cost[N];
struct Edge{
	int to,w,next_edge,c; 
}edge[M];

void add_edge(int u,int v,int w,int c){
	edge[++num_edge].to=v;
	edge[num_edge].w=w;
	edge[num_edge].c=c;
	edge[num_edge].next_edge=head[u];
	head[u]=num_edge;
}

int dijkstra(){
	int ans=0;
	memset(dist,INF,sizeof(dist));
	memset(vis,0,sizeof(vis));
	memset(cost,0,sizeof(cost));
	dist[1]=0;
	priority_queue<Pll,vector<Pll>,greater<Pll> > q;
	q.push(Pll(dist[1],1));
	while(!q.empty()){
		Pll t=q.top();
		int u=t.second;
		q.pop();
		if(vis[u])	continue;
		vis[u]=1;
		for(int i=head[u];i;i=edge[i].next_edge){
			int v=edge[i].to,w=edge[i].w;
			if(dist[v]>=dist[u]+w){

				if(dist[v]==dist[u]+w){
					cost[v]=min(cost[v],edge[i].c);
				}
				else	cost[v]=edge[i].c;
				dist[v]=dist[u]+w;
				q.push(Pll(dist[v],v));
			}
		}
	}
	for(int i=2;i<=n;i++){
		ans+=cost[i];
	}
	return ans;
}
int main(){
	while(~scanf("%d%d",&n,&m) && (n || m)){
		int u,v,d,c;
		while(m--){
			scanf("%d%d%d%d",&u,&v,&d,&c);
			add_edge(u,v,d,c);
			add_edge(v,u,d,c);
			
		}
		printf("%d\n",dijkstra());

		for(int i=1;i<=n;i++)	head[i]=0;
		for(int i=1;i<=num_edge;i++)	edge[i].to=edge[i].next_edge=0;
		num_edge=0;
	} 
	
	return 0;
}
