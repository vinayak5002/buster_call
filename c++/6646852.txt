#include <algorithm>
#include <iomanip>
#include <array>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iostream>
#include <iterator>
#include <map>
#include <queue>
#include <set>
#include <list>
#include <string>
#include <sstream>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <numeric>
#include <vector>
#include <climits>
using namespace std;
#if __has_include(<atcoder/all>)
#include <atcoder/all>
using namespace atcoder;
#endif
#define GET_MACRO(_1, _2, _3, NAME, ...) NAME
#define _rep(i, n) _rep2(i, 0, n)
#define _rep2(i, a, b) for(int i = (int)(a); i < (int)(b); i++)
#define rep(...) GET_MACRO(__VA_ARGS__, _rep2, _rep)(__VA_ARGS__)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
using i64 = long long;
template<class T, class U>
bool chmin(T& a, const U& b) { return (b < a) ? (a = b, true) : false; }
template<class T, class U>
bool chmax(T& a, const U& b) { return (b > a) ? (a = b, true) : false; }

template<typename T>istream& operator>>(istream&i,vector<T>&v){rep(j,v.size())i>>v[j];return i;}
template<typename T>string join(vector<T>&v){stringstream s;rep(i,v.size())s<<' '<<v[i];return s.str().substr(1);}
template<typename T>ostream& operator<<(ostream&o,vector<T>&v){if(v.size())o<<join(v);return o;}
template<typename T>string join(vector<vector<T>>&vv){string s="\n";rep(i,vv.size())s+=join(vv[i])+"\n";return s;}
template<typename T>ostream& operator<<(ostream&o,vector<vector<T>>&vv){if(vv.size())o<<join(vv);return o;}
template<class T> using pq = priority_queue<T, vector<T>, greater<T>>;

void solve() {
}

int main() {
	while (true)
	{
		int n, m;
		cin >> n >> m;
		if(n == 0 and m == 0) return 0;
		vector<int> p(m);
		vector prob(m, vector<int>{});
		rep(i, m) {
			int k;
			cin >> p[i] >> k;
			prob[i].resize(k);
			cin >> prob[i];
			for(auto & j : prob[i]) j--;
		}
		int ans = 0;
		vector<pair<int, int>> max_(n, make_pair(0, 0)), min_(n, make_pair(0, 0));
		rep(i, n) {
			max_[i].second = i;
			min_[i].second = i;
		}
		rep(i, m) {
			if(int(prob[i].size() == 1)) {
				int j = prob[i][0];
				max_[j].first += p[i];
				min_[j].first += p[i];
			}else{
				for(auto j : prob[i]) {
					max_[j].first += p[i];
				}
			}
		}
		sort(rall(max_));
		sort(all(min_));
		if(max_[0].second != min_[0].second) {
			ans = max_[0].first - min_[0].first + 1;
		}else{
			chmax(ans, max_[0].first - min_[1].first + 1);
			chmax(ans, max_[1].first - min_[0].first + 1);
		}
		cout << ans << endl;
	}

	return 0;
}
