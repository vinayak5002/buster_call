#include<bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef long double ld;

const ll INF = 1e18;
const ld EPS = 1e-10;

class edge{
  public:
    ll to, cost;
    edge(ll to, ll cost): to(to), cost(cost) {}
};

bool bellman_ford(ll s, vector<vector<edge> > &G, vector<ll> &dist){
  bool negative = false;
  ll n = dist.size();

  for(ll i = 0; i < n; i++) dist[i] = INF;
  dist[s] = 0;

  for(ll i = 0; i < n - 1; i++){
    for(ll j = 0; j < n; j++){
      for(ll k = 0; k < G[j].size(); k++){
        edge e = G[j][k];
        if(dist[j] != INF && dist[e.to] > dist[j] + e.cost){
          dist[e.to] = dist[j] + e.cost;
        }
      }
    }
  }
  for(ll j = 0; j < n; j++){
    for(ll k = 0; k < G[j].size(); k++){
      edge e = G[j][k];
      if(dist[j] != INF && dist[e.to] > dist[j] + e.cost){
        negative = true;
      }
    }
  }
  return negative;
}




int main(){
  cout << fixed << setprecision(20);

  ll v, e, r;
  cin >> v >> e >> r;
  vector<ll> dist(v);
  vector<vector<edge> > G(v, vector<edge>());
  for(ll i = 0; i < e; i++){
    ll s, t, d;
    cin >> s >> t >> d;
    G[s].push_back(edge(t, d));
  }
  bool f = bellman_ford(r, G, dist);
  if(f){
    cout << "NEGATIVE CYCLE" << endl;
    return 0;
  }
  for(ll i = 0; i < v; i++){
    if(dist[i] == INF) cout << "INF" << endl;
    else cout << dist[i] << endl;
  }
  
  return 0;
}


