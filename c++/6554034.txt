# 85.
# https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DSL_1_A&lang=ja


class UnionFind:
    def __init__(self, n):
        self.root = [i for i in range(n)]
        self.size = [1] * n

    def same(self, x, y):
        return self._get_root(x) == self._get_root(y)

    def merge(self, x, y):
        root_x = self._get_root(x)
        root_y = self._get_root(y)

        if root_x == root_y:
            return
        
        if self.size[root_x] >= self.size[root_y]:
            self.root[root_y] = root_x
            self.size[root_x] += self.root[root_y]
            self.root[y] = root_x
        else:
            self.root[root_x] = root_y
            self.size[root_y] += self.root[root_x]
            self.root[x] = root_y
    
    def _get_root(self, x):
        if self.root[x] == x:
            return x
        else:
            base_root = self.root[x]
            root = self._get_root(base_root)
            self.root[x] = root
            return root

def main():
    n, q = map(int, input().split())
    queries = []
    for _ in range(q):
        com, x, y = map(int, input().split())
        queries.append((com, x, y))
    
    uf = UnionFind(n)
    for com, x, y in queries:
        if com == 0:
            # unite
            uf.merge(x, y)
        else:
            if uf.same(x , y):
                print(1)
            else:
                print(0)
    

if __name__ == "__main__":
    main()

