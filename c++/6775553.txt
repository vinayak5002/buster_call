#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

#include <bits/stdc++.h>

#define _overload(_1, _2, _3, _4, name, ...) name
#define _rep1(Itr, N) _rep3(Itr, 0, N, 1)
#define _rep2(Itr, a, b) _rep3(Itr, a, b, 1)
#define _rep3(Itr, a, b, step) for (i64 Itr = a; Itr < b; Itr += step)
#define repeat(...) _overload(__VA_ARGS__, _rep3, _rep2, _rep1)(__VA_ARGS__)
#define rep(...) repeat(__VA_ARGS__)

#define ALL(X) begin(X), end(X)

using namespace std;
using i64 = int64_t;
using u64 = uint64_t;

char solve(string s, i64 idx) {
  i64 n = s.size();
  string t;
  stack<i64> lp;
  stack<i64> b;

  i64 i = -1;
  i64 j = -1;

  while (j < idx && i < n) {
    i++;
    // cout << i << ' ' << j << endl;

    if ('0' <= s[i] && s[i] <= '9') {
      i64 num = 0;
      while ('0' <= s[i] && s[i] <= '9') {
        num *= 10;
        num += s[i] - '0';
        i++;
      }

      if ('A' <= s[i] && s[i] <= 'Z') {
        j = min(idx, j + num);
      } else {
        lp.push(num);
        --i;
      }
    } else if (s[i] == '(') {
      b.push(i);
    } else if (s[i] == ')') {
      lp.top() -= 1;
      if (lp.top() == 0) {
        lp.pop();
        b.pop();
      } else {
        i = b.top();
      }
    } else if ('A' <= s[i] && s[i] <= 'Z') {
      j++;
    }
  }

  if (j == idx)
    return s[i];
  else
    return '0';
}

int main() {
  cin.tie(nullptr);
  ios::sync_with_stdio(false);

  string s;
  i64 x;

  while (cin >> s >> x, s != "0" || x != 0) {
    cout << solve(s, x) << endl;
  }

  return 0;
}
