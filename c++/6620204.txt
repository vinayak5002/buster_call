#include <iostream>

#include <vector>
#include <cmath>

using namespace std;

// 1 以上 N 以下の整数が素数かどうかを返す
static vector<bool> Eratosthenes(long N) {
	// テーブル
	vector<bool> isprime(N + 1, true);

	// 0, 1 は予めふるい落としておく
	isprime[0] = isprime[1] = false;

	// ふるい
	for (long p = 2; p <= N; ++p) {
		// すでに合成数であるものはスキップする
		if (!isprime[p]) continue;

		// p 以外の p の倍数から素数ラベルを剥奪
		for (int q = p * 2; q <= N; q += p) {
			isprime[q] = false;
		}
	}

	// 1 以上 N 以下の整数が素数かどうか
	return isprime;
}

//N以下の素数を返す
static vector<long> GetSosuuList(long N)
{
	vector<bool> hurui = Eratosthenes(N);
	vector<long> result;
	result.reserve(N);

	if (N < 2) return result;
	result.push_back(2);
	for (long i = 3; i <= N; i += 2)
	{
		if (hurui[i]) result.push_back(i);
	}
	return result;
}

void ALDS1_1_C()
{
	long n;
	cin >> n;
	vector<long> sosu = GetSosuuList(n);
	if (sosu.empty()) return;
	cout << 2;
	for (int i = 1; i < sosu.size(); i++)
	{
		cout << ' ' << sosu[i];
	}
	cout << endl;
}

int main()
{
	ALDS1_1_C();
	return 0;
}
