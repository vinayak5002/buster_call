#include<iostream>
using namespace std;

struct Dice{
    int ue;
    int migi;
    int temae;
    void init();
    void rotw();
    void rote();
    void rotn();
    void rots();
};

void Dice::init(){
    this->ue=0;
    this->migi=2;
    this->temae=1;
}

void Dice::rotw(){
    int tmp;
    tmp = this->ue;
    this->ue = this->migi;
    this->migi = 5-tmp;
}

void Dice::rote(){
    int tmp;
    tmp = this->ue;
    this->ue = 5-(this->migi);
    this->migi = tmp;
}

void Dice::rotn(){
    int tmp;
    tmp = this->ue;
    this->ue = this->temae;
    this->temae = 5-tmp;
}

void Dice::rots(){
    int tmp;
    tmp = this->ue;
    this->ue = 5-(this->temae);
    this->temae = tmp;
}

int main(){
    
    int n;
    cin>>n;
    
    Dice dd;
    dd.init();
    
    int dns[n][6];
    for (int k=0; k<n; ++k){
        for (int i=0; i<6; ++i){
            cin>>dns[k][i];
        }
    }
    /*
    for (int i=0; i<6; ++i){
        if (i!=0 and i!=3){
            dd.rote();
        }
        for (int j=0; j<4; ++j){
            if (j!=0){
                dd.rotn();
            }
            if (dns[h][dd.ue]==dns[p[0] and dns[h][dd.temae]==dns[p[1] and dns[h][dd.migi]==dns[p[2] and dns[h][5-dd.migi]==dns[p[3] and dns[h][5-dd.temae]==dns[p[4] and dns[h][5-dd.ue]==dns[p[5]){
                cout<<"Yes"<<endl;
                return 0;
            }
        }
    }
    */
    for (int h=0; h<n; ++h){
        for (int p=h+1; p<n; ++p){
            for (int i=0; i<4; ++i){
                for (int j=0; j<4; ++j){
                    if (dns[h][dd.ue]==dns[p][0] and dns[h][dd.temae]==dns[p][1] and dns[h][dd.migi]==dns[p][2] and dns[h][5-dd.migi]==dns[p][3] and dns[h][5-dd.temae]==dns[p][4] and dns[h][5-dd.ue]==dns[p][5]){
                        cout<<"No"<<endl;
                        return 0;
                    }
                    dd.rote();
                }
                dd.rotn();
            }
            
            dd.rote();
            dd.rotn();
            
            for (int j=0; j<4; ++j){
                if (dns[h][dd.ue]==dns[p][0] and dns[h][dd.temae]==dns[p][1] and dns[h][dd.migi]==dns[p][2] and dns[h][5-dd.migi]==dns[p][3] and dns[h][5-dd.temae]==dns[p][4] and dns[h][5-dd.ue]==dns[p][5]){
                    cout<<"No"<<endl;
                    return 0;
                }
                dd.rote();
            }
            
            dd.rotn();
            dd.rotn();
            
            for (int j=0; j<4; ++j){
                if (dns[h][dd.ue]==dns[p][0] and dns[h][dd.temae]==dns[p][1] and dns[h][dd.migi]==dns[p][2] and dns[h][5-dd.migi]==dns[p][3] and dns[h][5-dd.temae]==dns[p][4] and dns[h][5-dd.ue]==dns[p][5]){
                    cout<<"No"<<endl;
                    return 0;
                }
                dd.rote();
            }
        }
    }
    
    cout<<"Yes"<<endl;
}
