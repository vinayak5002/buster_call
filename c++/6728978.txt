#include<bits/stdc++.h>
using namespace std;

array<array<array<int,4>,101>,50501> dp;

int main(){
    int n, INF = 1 << 30, r = 50500;
    while(cin >> n, n){
        int ans = -1;
        for(int t = 0; t <= r; t++){
            for(int p = 0; p <= 100; p++){
                for(int j = 0; j < 4; j++){
                    dp[t][p][j] = INF;
                }
            }
        }
        vector<array<int,2>> bl(n);
        for(int i = 0; i < n; i++){
            cin >> bl[i][0] >> bl[i][1];
        }
        bool flag = true;
        dp[0][0][0] = 0;
        for(int t = 0, bi = 0; t < r; t++){
            if(bi < n && t == bl[bi][1]){
                int pos = bl[bi][0];
                for(int nt = t; nt <= t + 3 && nt <= r; nt++){
                    for(int p = 0; p <= 100; p++){
                        if(nt == t && p == pos)continue;
                        for(int j = 0; j < 4; j++){
                            dp[nt][p][j] = INF;
                        }
                    }
                }
                for(int j = 2; j >= 0; j--)dp[t][pos][j+1] = dp[t][pos][j];
                dp[t][pos][0] = INF;
                int minv = *min_element(dp[t][pos].begin(), dp[t][pos].end());
                if(minv == INF){
                    flag = false;
                    cout << "NG " << bi + 1 << '\n';
                    break;
                }
                bi++;
            }
            dp[t][0][0] = *min_element(dp[t][0].begin(), dp[t][0].end());
            for(int p = 0; p <= 100; p++){
                for(int j = 0; j <= 3 && t + j + 1 <= r; j++){
                    dp[t+1][p][j] = min(dp[t+1][p][j], dp[t][p][j]);
                    if(p >= 1){
                        dp[t+j+1][p-1][j] = min(dp[t+j+1][p-1][j], dp[t][p][j] + 1);
                    }
                    if(p + 1 <= 100){
                        dp[t+j+1][p+1][j] = min(dp[t+j+1][p+1][j], dp[t][p][j] + 1);
                    }
                }
            }
        }
        if(flag){
            cout << "OK " << *min_element(dp[r][0].begin(), dp[r][0].end()) << '\n';
        }
    }
}
