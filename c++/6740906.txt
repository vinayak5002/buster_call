#include <bits/stdc++.h>
using namespace std;
#define rep(i,n) for(int i=0; i<(n); i++)
#define INF ((1LL<<62)-(1LL<<31))
#define all(a)  (a).begin(),(a).end()
#define rall(a)  (a).rbegin(),(a).rend()
typedef long long ll;
typedef pair<ll,ll> pl;

#define EPS (1e-10)
#define equals(a,b) (fabs((a)-(b))<EPS)

//点
class Point { 
public:
    double x,y;
    Point(double x=0,double y=0): x(x),y(y) {}
    Point operator + (Point p) { return Point(x+p.x,y+p.y); }
    Point operator - (Point p) { return Point(x-p.x,y-p.y); }
    Point operator * (double k) { return Point(x*k,y*k); }
    Point operator / (double k) { return Point(x/k,y/k); }
    //ベクトルの大きさ
    double abs() { return sqrt(norm()); }; 
    //ノルム
    double norm() { return x+x+y*y; }; 
    bool operator < (const Point &p) const {
        return x!=p.x ? x<p.x : y<p.y;
    }
    bool operator == (const Point &p) const {
        return fabs(x-p.x)<EPS && fabs(y-p.y)<EPS;
    }
};
//ベクトル
typedef Point Vector; 
//線分
struct Segment { Point p1,p2; }; 
//直線
typedef Segment Line;
//円 
class Circle { 
public:
    Point c; double r;
    Circle(Point c=Point(),double r=0.0): c(c),r(r) {} 
};
//多角形
typedef vector<Point> Polygon; 

//ベクトルa,bの内積
double dot(Vector a,Vector b) { return a.x*b.x+a.y*b.y; }; 
//ベクトルa,bの外積
double cross(Vector a,Vector b) { return a.x*b.y-a.y*b.x; };
//ベクトルa,bの直交判定
bool isOrthogonal(Vector a,Vector b) { return equals(dot(a,b),0.0); };
bool isOrthogonal(Point a1,Point a2,Point b1,Point b2) { return isOrthogonal(a1-a2,b1-b2); };
bool isOrthogonal(Segment s1,Segment s2) { return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0); };
//ベクトルa,bの平行判定
bool isParallel(Vector a,Vector b) { return equals(cross(a,b),0.0); };
bool isParallel(Point a1,Point a2,Point b1,Point b2) { return isParallel(a1-a2,b1-b2); };
bool isParallel(Segment s1,Segment s2) { return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0); };

int main() {
    int n;
    cin >> n;
    while(n--) {
        vector<Point> p(4);
        rep(i,4) cin >> p[i].x >> p[i].y;
        if(isParallel(p[0],p[1],p[2],p[3])) cout << 2 << endl;
        else if(isOrthogonal(p[0],p[1],p[2],p[3])) cout << 1 << endl;
        else cout << 0 << endl; 
    }
    return 0;
}
