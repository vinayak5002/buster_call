#include <bits/stdc++.h>

using namespace std;
// cout << fixed << setprecision(15);

using ll = long long;
using ull = unsigned long long;

// 繰り返し二乗法でx^nを求める
// 計算量: O(log n)
template <class T>
T ipow(T x, long long n) {
   T val = 1;

   while (n > 0) {
      if ((n & 1LL) == 1) {
         // iビット目が1の場合、x^(2^i)をかける
         val *= x;
      }

      x *= x;
      n = n >> 1;
   }

   return val;
}

int main() {
   while (true) {
      int N, M;
      cin >> N >> M;

      if (N == 0 && M == 0) {
         break;
      }

      vector<int> cl(M);
      for (size_t i = 0; i < M; i++) {
         cin >> cl[i];
      }

      vector<int> xl(N);
      for (size_t i = 0; i < N; i++) {
         cin >> xl[i];
      }

      constexpr ll INF = numeric_limits<ll>::max();
      vector<vector<ll>> dp(N, vector<ll>(256, INF));

      for (int i = 0; i < M; i++) {
         int x = 128 + cl[i];
         x = max(x, 0);
         x = min(x, 255);

         dp[0][x] = ipow(x - xl[0], 2);
      }

      for (int n = 1; n < N; n++) {
         for (int x = 0; x < 256; x++) {
            if (dp[n - 1][x] == INF)
               continue;

            for (int i = 0; i < M; i++) {
               int nx = x + cl[i];
               nx = max(nx, 0);
               nx = min(nx, 255);

               dp[n][nx] = min(dp[n][nx], dp[n - 1][x] + (ll)ipow(xl[n] - nx, 2));
            }
         }
      }

      ll ans = INF;

      for (int i = 0; i < 256; i++) {
         ans = min(ans, dp[N - 1][i]);
      }

      cout << ans << endl;
   }
   return 0;
}

