#include <bits/stdc++.h>

#ifdef _MSC_VER
#  include <intrin.h>
#else
#  include <x86intrin.h>
#endif

#include <limits>
#include <type_traits>

namespace suisen {
// ! utility
template <typename ...Types>
using constraints_t = std::enable_if_t<std::conjunction_v<Types...>, std::nullptr_t>;
template <bool cond_v, typename Then, typename OrElse>
constexpr decltype(auto) constexpr_if(Then&& then, OrElse&& or_else) {
	if constexpr (cond_v) {
		return std::forward<Then>(then);
	} else {
		return std::forward<OrElse>(or_else);
	}
}

// ! function
template <typename ReturnType, typename Callable, typename ...Args>
using is_same_as_invoke_result = std::is_same<std::invoke_result_t<Callable, Args...>, ReturnType>;
template <typename F, typename T>
using is_uni_op = is_same_as_invoke_result<T, F, T>;
template <typename F, typename T>
using is_bin_op = is_same_as_invoke_result<T, F, T, T>;

template <typename Comparator, typename T>
using is_comparator = std::is_same<std::invoke_result_t<Comparator, T, T>, bool>;

// ! integral
template <typename T, typename = constraints_t<std::is_integral<T>>>
constexpr int bit_num = std::numeric_limits<std::make_unsigned_t<T>>::digits;
template <typename T, unsigned int n>
struct is_nbit { static constexpr bool value = bit_num<T> == n; };
template <typename T, unsigned int n>
static constexpr bool is_nbit_v = is_nbit<T, n>::value;

// ?
template <typename T>
struct safely_multipliable {};
template <>
struct safely_multipliable<int> { using type = long long; };
template <>
struct safely_multipliable<long long> { using type = __int128_t; };
template <>
struct safely_multipliable<unsigned int> { using type = unsigned long long; };
template <>
struct safely_multipliable<unsigned long int> { using type = __uint128_t; };
template <>
struct safely_multipliable<unsigned long long> { using type = __uint128_t; };
template <>
struct safely_multipliable<float> { using type = float; };
template <>
struct safely_multipliable<double> { using type = double; };
template <>
struct safely_multipliable<long double> { using type = long double; };
template <typename T>
using safely_multipliable_t = typename safely_multipliable<T>::type;

template <typename T, typename = void>
struct rec_value_type {
	using type = T;
};
template <typename T>
struct rec_value_type<T, std::void_t<typename T::value_type>> {
	using type = typename rec_value_type<typename T::value_type>::type;
};
template <typename T>
using rec_value_type_t = typename rec_value_type<T>::type;

} // namespace suisen

// ! type aliases
using i128 = __int128_t;
using u128 = __uint128_t;

template <typename T>
using pq_greater = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <typename T, typename U>
using umap = std::unordered_map<T, U>;

// ! macros (capital: internal macro)
#define OVERLOAD2(_1,_2,name,...) name
#define OVERLOAD3(_1,_2,_3,name,...) name
#define OVERLOAD4(_1,_2,_3,_4,name,...) name

#define REP4(i,l,r,s)  for(std::remove_reference_t<std::remove_const_t<decltype(r)>>i=(l);i<(r);i+=(s))
#define REP3(i,l,r)	REP4(i,l,r,1)
#define REP2(i,n)	  REP3(i,0,n)
#define REPINF3(i,l,s) for(std::remove_reference_t<std::remove_const_t<decltype(l)>>i=(l);;i+=(s))
#define REPINF2(i,l)   REPINF3(i,l,1)
#define REPINF1(i)	 REPINF2(i,0)
#define RREP4(i,l,r,s) for(std::remove_reference_t<std::remove_const_t<decltype(r)>>i=(l)+fld((r)-(l)-1,s)*(s);i>=(l);i-=(s))
#define RREP3(i,l,r)   RREP4(i,l,r,1)
#define RREP2(i,n)	 RREP3(i,0,n)

#define rep(...)	OVERLOAD4(__VA_ARGS__, REP4   , REP3   , REP2   )(__VA_ARGS__)
#define rrep(...)   OVERLOAD4(__VA_ARGS__, RREP4  , RREP3  , RREP2  )(__VA_ARGS__)
#define repinf(...) OVERLOAD3(__VA_ARGS__, REPINF3, REPINF2, REPINF1)(__VA_ARGS__)

#define CAT_I(a, b) a##b
#define CAT(a, b) CAT_I(a, b)
#define UNIQVAR(tag) CAT(tag, __LINE__)
#define loop(n) for (std::remove_reference_t<std::remove_const_t<decltype(n)>> UNIQVAR(loop_variable) = n; UNIQVAR(loop_variable) --> 0;)

#define all(iterable) std::begin(iterable), std::end(iterable)
#define input(type, ...) type __VA_ARGS__; read(__VA_ARGS__)

#ifdef LOCAL
#  define debug(...) debug_internal(#__VA_ARGS__, __VA_ARGS__)

template <class T, class... Args>
void debug_internal(const char* s, T&& first, Args&&... args) {
	constexpr const char* prefix = "[\033[32mDEBUG\033[m] ";
	constexpr const char* open_brakets = sizeof...(args) == 0 ? "" : "(";
	constexpr const char* close_brakets = sizeof...(args) == 0 ? "" : ")";
	std::cerr << prefix << open_brakets << s << close_brakets << ": " << open_brakets << std::forward<T>(first);
	((std::cerr << ", " << std::forward<Args>(args)), ...);
	std::cerr << close_brakets << "\n";
}

#else
#  define debug(...) void(0)
#endif

// ! I/O utilities

// __int128_t
std::ostream& operator<<(std::ostream& dest, __int128_t value) {
	std::ostream::sentry s(dest);
	if (s) {
		__uint128_t tmp = value < 0 ? -value : value;
		char buffer[128];
		char* d = std::end(buffer);
		do {
			--d;
			*d = "0123456789"[tmp % 10];
			tmp /= 10;
		} while (tmp != 0);
		if (value < 0) {
			--d;
			*d = '-';
		}
		int len = std::end(buffer) - d;
		if (dest.rdbuf()->sputn(d, len) != len) {
			dest.setstate(std::ios_base::badbit);
		}
	}
	return dest;
}
// __uint128_t
std::ostream& operator<<(std::ostream& dest, __uint128_t value) {
	std::ostream::sentry s(dest);
	if (s) {
		char buffer[128];
		char* d = std::end(buffer);
		do {
			--d;
			*d = "0123456789"[value % 10];
			value /= 10;
		} while (value != 0);
		int len = std::end(buffer) - d;
		if (dest.rdbuf()->sputn(d, len) != len) {
			dest.setstate(std::ios_base::badbit);
		}
	}
	return dest;
}

// pair
template <typename T, typename U>
std::ostream& operator<<(std::ostream& out, const std::pair<T, U>& a) {
	return out << a.first << ' ' << a.second;
}
// tuple
template <unsigned int N = 0, typename ...Args>
std::ostream& operator<<(std::ostream& out, const std::tuple<Args...>& a) {
	if constexpr (N >= std::tuple_size_v<std::tuple<Args...>>) {
		return out;
	} else {
		out << std::get<N>(a);
		if constexpr (N + 1 < std::tuple_size_v<std::tuple<Args...>>) {
			out << ' ';
		}
		return operator<<<N + 1>(out, a);
	}
}
// vector
template <typename T>
std::ostream& operator<<(std::ostream& out, const std::vector<T>& a) {
	for (auto it = a.begin(); it != a.end();) {
		out << *it;
		if (++it != a.end()) out << ' ';
	}
	return out;
}
// array
template <typename T, size_t N>
std::ostream& operator<<(std::ostream& out, const std::array<T, N>& a) {
	for (auto it = a.begin(); it != a.end();) {
		out << *it;
		if (++it != a.end()) out << ' ';
	}
	return out;
}
inline void print() { std::cout << '\n'; }
template <typename Head, typename... Tail>
inline void print(const Head& head, const Tail &...tails) {
	std::cout << head;
	if (sizeof...(tails)) std::cout << ' ';
	print(tails...);
}
template <typename Iterable>
auto print_all(const Iterable& v, std::string sep = " ", std::string end = "\n") -> decltype(std::cout << *v.begin(), void()) {
	for (auto it = v.begin(); it != v.end();) {
		std::cout << *it;
		if (++it != v.end()) std::cout << sep;
	}
	std::cout << end;
}

__int128_t parse_i128(std::string& s) {
	__int128_t ret = 0;
	for (int i = 0; i < int(s.size()); i++) if ('0' <= s[i] and s[i] <= '9') ret = 10 * ret + s[i] - '0';
	if (s[0] == '-') ret = -ret;
	return ret;
}
__uint128_t parse_u128(std::string& s) {
	__uint128_t ret = 0;
	for (int i = 0; i < int(s.size()); i++) if ('0' <= s[i] and s[i] <= '9') ret = 10 * ret + s[i] - '0';
	return ret;
}
// __int128_t
std::istream& operator>>(std::istream& in, __int128_t& v) {
	std::string s;
	in >> s;
	v = parse_i128(s);
	return in;
}
// __uint128_t
std::istream& operator>>(std::istream& in, __uint128_t& v) {
	std::string s;
	in >> s;
	v = parse_u128(s);
	return in;
}
// pair
template <typename T, typename U>
std::istream& operator>>(std::istream& in, std::pair<T, U>& a) {
	return in >> a.first >> a.second;
}
// tuple
template <unsigned int N = 0, typename ...Args>
std::istream& operator>>(std::istream& in, std::tuple<Args...>& a) {
	if constexpr (N >= std::tuple_size_v<std::tuple<Args...>>) {
		return in;
	} else {
		return operator>><N + 1>(in >> std::get<N>(a), a);
	}
}
// vector
template <typename T>
std::istream& operator>>(std::istream& in, std::vector<T>& a) {
	for (auto it = a.begin(); it != a.end(); ++it) in >> *it;
	return in;
}
// array
template <typename T, size_t N>
std::istream& operator>>(std::istream& in, std::array<T, N>& a) {
	for (auto it = a.begin(); it != a.end(); ++it) in >> *it;
	return in;
}
template <typename ...Args>
void read(Args &...args) {
	(std::cin >> ... >> args);
}

// ! integral utilities

// Returns pow(-1, n)
template <typename T>
constexpr inline int pow_m1(T n) {
	return -(n & 1) | 1;
}
// Returns pow(-1, n)
template <>
constexpr inline int pow_m1<bool>(bool n) {
	return -int(n) | 1;
}

// Returns floor(x / y)
template <typename T>
constexpr inline T fld(const T x, const T y) {
	return (x ^ y) >= 0 ? x / y : (x - (y + pow_m1(y >= 0))) / y;
}
template <typename T>
constexpr inline T cld(const T x, const T y) {
	return (x ^ y) <= 0 ? x / y : (x + (y + pow_m1(y >= 0))) / y;
}

template <typename T, suisen::constraints_t<suisen::is_nbit<T, 16>> = nullptr>
__attribute__((target("popcnt"))) constexpr inline int popcount(const T x) { return _mm_popcnt_u32(x); }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 32>> = nullptr>
__attribute__((target("popcnt"))) constexpr inline int popcount(const T x) { return _mm_popcnt_u32(x); }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 64>> = nullptr>
__attribute__((target("popcnt"))) constexpr inline int popcount(const T x) { return _mm_popcnt_u64(x); }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 16>> = nullptr>
constexpr inline int count_lz(const T x) { return x ? __builtin_clz(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 32>> = nullptr>
constexpr inline int count_lz(const T x) { return x ? __builtin_clz(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 64>> = nullptr>
constexpr inline int count_lz(const T x) { return x ? __builtin_clzll(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 16>> = nullptr>
constexpr inline int count_tz(const T x) { return x ? __builtin_ctz(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 32>> = nullptr>
constexpr inline int count_tz(const T x) { return x ? __builtin_ctz(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 64>> = nullptr>
constexpr inline int count_tz(const T x) { return x ? __builtin_ctzll(x) : suisen::bit_num<T>; }
template <typename T>
constexpr inline int floor_log2(const T x) { return suisen::bit_num<T> -1 - count_lz(x); }
template <typename T>
constexpr inline int ceil_log2(const T x) { return floor_log2(x) + ((x & -x) != x); }
template <typename T>
constexpr inline int kth_bit(const T x, const unsigned int k) { return (x >> k) & 1; }
template <typename T>
constexpr inline int parity(const T x) { return popcount(x) & 1; }

// ! container

template <typename T, typename Comparator, suisen::constraints_t<suisen::is_comparator<Comparator, T>> = nullptr>
auto priqueue_comp(const Comparator comparator) {
	return std::priority_queue<T, std::vector<T>, Comparator>(comparator);
}

template <typename Iterable>
auto isize(const Iterable& iterable) -> decltype(int(iterable.size())) {
	return iterable.size();
}

template <typename T, typename Gen, suisen::constraints_t<suisen::is_same_as_invoke_result<T, Gen, int>> = nullptr>
auto generate_vector(int n, Gen generator) {
	std::vector<T> v(n);
	for (int i = 0; i < n; ++i) v[i] = generator(i);
	return v;
}
template <typename T>
auto generate_range_vector(T l, T r) {
	return generate_vector(r - l, [l](int i) { return l + i; });
}
template <typename T>
auto generate_range_vector(T n) {
	return generate_range_vector(0, n);
}

template <typename T>
void sort_unique_erase(std::vector<T>& a) {
	std::sort(a.begin(), a.end());
	a.erase(std::unique(a.begin(), a.end()), a.end());
}

template <typename InputIterator, typename BiConsumer>
auto foreach_adjacent_values(InputIterator first, InputIterator last, BiConsumer f) -> decltype(f(*first++, *last), void()) {
	if (first != last) for (auto itr = first, itl = itr++; itr != last; itl = itr++) f(*itl, *itr);
}
template <typename Container, typename BiConsumer>
auto foreach_adjacent_values(Container c, BiConsumer f) -> decltype(c.begin(), c.end(), void()) {
	foreach_adjacent_values(c.begin(), c.end(), f);
}

// ! other utilities

// x <- min(x, y). returns true iff `x` has chenged.
template <typename T>
inline bool chmin(T& x, const T& y) {
	if (y >= x) return false;
	x = y;
	return true;
}
// x <- max(x, y). returns true iff `x` has chenged.
template <typename T>
inline bool chmax(T& x, const T& y) {
	if (y <= x) return false;
	x = y;
	return true;
}

template <typename T, std::enable_if_t<std::is_integral_v<T>, std::nullptr_t> = nullptr>
std::string bin(T val, int bit_num = -1) {
	std::string res;
	if (bit_num >= 0) {
		for (int bit = bit_num; bit-- > 0;) res += '0' + ((val >> bit) & 1);
	} else {
		for (; val; val >>= 1) res += '0' + (val & 1);
		std::reverse(res.begin(), res.end());
	}
	return res;
}

template <typename T, std::enable_if_t<std::is_integral_v<T>, std::nullptr_t> = nullptr>
std::vector<T> digits_low_to_high(T val, T base = 10) {
	std::vector<T> res;
	for (; val; val /= base) res.push_back(val % base);
	if (res.empty()) res.push_back(T{ 0 });
	return res;
}
template <typename T, std::enable_if_t<std::is_integral_v<T>, std::nullptr_t> = nullptr>
std::vector<T> digits_high_to_low(T val, T base = 10) {
	auto res = digits_low_to_high(val, base);
	std::reverse(res.begin(), res.end());
	return res;
}

template <typename T>
std::string join(const std::vector<T>& v, const std::string& sep, const std::string& end) {
	std::ostringstream ss;
	for (auto it = v.begin(); it != v.end();) {
		ss << *it;
		if (++it != v.end()) ss << sep;
	}
	ss << end;
	return ss.str();
}

namespace suisen {}
using namespace suisen;
using namespace std;

struct io_setup {
	io_setup(int precision = 20) {
		std::ios::sync_with_stdio(false);
		std::cin.tie(nullptr);
		std::cout << std::fixed << std::setprecision(precision);
	}
} io_setup_{};

// ! code from here

#include <algorithm>
#include <cassert>
#include <complex>
#include <iostream>
#include <optional>
#include <tuple>
#include <variant>
#include <vector>

namespace suisen {
namespace geometry {

	using coordinate_t = long double;
	using Point = std::complex<coordinate_t>;

	// operator

	Point operator+(const Point &p, coordinate_t real) { return Point(p) + Point(real, 0); }
	Point operator-(const Point &p, coordinate_t real) { return Point(p) - Point(real, 0); }
	Point operator*(const Point &p, coordinate_t real) { return Point(p) * Point(real, 0); }
	Point operator/(const Point &p, coordinate_t real) { return Point(p) / Point(real, 0); }
	Point operator+(coordinate_t real, const Point &p) { return Point(real, 0) + Point(p); }
	Point operator-(coordinate_t real, const Point &p) { return Point(real, 0) - Point(p); }
	Point operator*(coordinate_t real, const Point &p) { return Point(real, 0) * Point(p); }
	Point operator/(coordinate_t real, const Point &p) { return Point(real, 0) / Point(p); }

	std::istream& operator>>(std::istream &in, Point &p) {
		coordinate_t x, y;
		in >> x >> y;
		p = Point(x, y);
		return in;
	}
	std::ostream& operator<<(std::ostream &out, const Point &p) {
		return out << p.real() << ' ' << p.imag();
	}

	// relations between three points X, Y, Z.

	struct ISP {
		static constexpr int L_CURVE = +1; // +---------------+ Z is in 'a' => ISP = +1
		static constexpr int R_CURVE = -1; // |aaaaaaaaaaaaaaa| Z is in 'b' => ISP = -1
		static constexpr int FRONT   = +2; // |ddd X eee Y ccc| Z is in 'c' => ISP = +2
		static constexpr int BACK	= -2; // |bbbbbbbbbbbbbbb| Z is in 'd' => ISP = -2
		static constexpr int MIDDLE  =  0; // +---------------+ Z is in 'e' => ISP =  0
	};

	struct Sign {
		static constexpr int NEGATIVE = -1;
		static constexpr int ZERO = 0;
		static constexpr int POSITIVE = +1;
	};

	enum class Containment {
		OUT, ON, IN
	};

	constexpr Point ZERO = Point(0, 0);
	constexpr Point ONE  = Point(1, 0);
	constexpr Point I	= Point(0, 1);
	constexpr coordinate_t EPS = 1e-9;
	constexpr coordinate_t PI  = 3.14159265358979323846264338327950288419716939937510L;
	constexpr coordinate_t E   = 2.71828182845904523536028747135266249775724709369995L;

	constexpr auto XY_COMPARATOR = [](const Point &p, const Point &q) {
		return p.real() == q.real() ? p.imag() < q.imag() : p.real() < q.real();
	};
	constexpr auto XY_COMPARATOR_GREATER = [](const Point &p, const Point &q) {
		return p.real() == q.real() ? p.imag() > q.imag() : p.real() > q.real();
	};
	constexpr auto YX_COMPARATOR = [](const Point &p, const Point &q) {
		return p.imag() == q.imag() ? p.real() < q.real() : p.imag() < q.imag();
	};
	constexpr auto YX_COMPARATOR_GREATER = [](const Point &p, const Point &q) {
		return p.imag() == q.imag() ? p.real() > q.real() : p.imag() > q.imag();
	};

	int sgn(coordinate_t x) {
		return x > EPS ? Sign::POSITIVE : x < -EPS ? Sign::NEGATIVE : Sign::ZERO;
	}
	int compare(coordinate_t x, coordinate_t y) {
		return sgn(x - y);
	}

	auto cartesian(const coordinate_t real, const coordinate_t imag) {
		return Point(real, imag);
	}
	auto polar(const coordinate_t rho, const coordinate_t theta) {
		return Point(rho * std::cos(theta), rho * std::sin(theta));
	}
	auto cis(const coordinate_t theta) {
		return Point(std::cos(theta), std::sin(theta));
	}
	auto conj(const Point &z) {
		return Point(z.real(), -z.imag());
	}
	auto arg(const Point &z) {
		return std::atan2(z.imag(), z.real());
	}
	auto square_abs(const Point &z) {
		return z.real() * z.real() + z.imag() * z.imag();
	}
	auto abs(const Point &z) {
		return std::sqrt(square_abs(z));
	}
	auto rot(const Point &z, const coordinate_t theta) {
		return cis(theta) * z;
	}
	auto dot(const Point &a, const Point &b) {
		return a.real() * b.real() + a.imag() * b.imag();
	}
	auto det(const Point &a, const Point &b) {
		return a.real() * b.imag() - a.imag() * b.real();
	}
	bool equals(const Point &a, const Point &b) {
		return sgn(a.real() - b.real()) == Sign::ZERO and sgn(a.imag() - b.imag()) == Sign::ZERO;
	}
	bool equals(coordinate_t a, coordinate_t b) {
		return compare(a, b) == 0;
	}
	
	// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_C
	int isp(const Point &a, const Point &b, const Point &c) {
		Point ab = b - a, ac = c - a;
		int s = sgn(det(ab, ac));
		if (s == Sign::POSITIVE) return ISP::L_CURVE;
		if (s == Sign::NEGATIVE) return ISP::R_CURVE;
		if (sgn(dot(ab, ac)) == Sign::NEGATIVE) return ISP::BACK;
		Point ba = a - b, bc = c - b;
		if (sgn(dot(ba, bc)) == Sign::NEGATIVE) return ISP::FRONT;
		return ISP::MIDDLE;
	}

	struct Line {
		Point a, b;
		Line() : Line(ZERO, ZERO) {}
		Line(const Point &from, const Point &to) : a(from), b(to) {}
	};
	struct Ray {
		Point a, b;
		Ray() : Ray(ZERO, ZERO) {}
		Ray(const Point &from, const Point &to) : a(from), b(to) {}
	};
	struct Segment {
		Point a, b;
		Segment() : Segment(ZERO, ZERO) {}
		Segment(const Point &from, const Point &to) : a(from), b(to) {}
	};
	struct Circle {
		Point center;
		coordinate_t radius;
		Circle() : Circle(ZERO, 0) {}
		Circle(const Point &c, const coordinate_t &r) : center(c), radius(r) {}
	};

	// Triangle
	
	coordinate_t signed_area(const Point &a, const Point &b, const Point &c) {
		return det(b - a, c - a) / 2;
	}
	coordinate_t area(const Point &a, const Point &b, const Point &c) {
		return std::abs(signed_area(a, b, c));
	}
	Point pG(const Point &a, const Point &b, const Point &c) {
		return (a + b + c) / 3;
	}
	// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_B
	Circle pI(const Point &a, const Point &b, const Point &c) {
		auto la = std::abs(b - c), lb = std::abs(c - a), lc = std::abs(a - b);
		auto l = la + lb + lc;
		la /= l, lb /= l, lc /= l;
		Point center = la * a + lb * b + lc * c;
		auto radius = 2. * area(a, b, c) / l;
		return Circle(center, radius);
	}
	// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_7_C
	Circle pO(const Point &a, const Point &b, const Point &c) {
		Point ab = b - a, bc = c - b, ca = a - c;
		auto la = square_abs(bc), lb = square_abs(ca), lc = square_abs(ab);
		auto s = la * (lb + lc - la), t = lb * (lc + la - lb), u = lc * (la + lb - lc);
		auto l = s + t + u;
		s /= l, t /= l, u /= l;
		Point center = a * s + b * t + c * u;
		return Circle(center, std::abs(center - a));
	}
	Point pH(const Point &a, const Point &b, const Point &c) {
		return a + b + c - 2 * pO(a, b, c).center;
	}
	auto pIabc(const Point &a, const Point &b, const Point &c) {
		return std::make_tuple(pI(-a, b, c), pI(a, -b, c), pI(a, b, -c));
	}

	// Line

	// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A
	template <typename line_t_1, typename line_t_2>
	auto is_parallel(const line_t_1 &l1, const line_t_2 &l2) -> decltype(l1.a, l1.b, l2.a, l2.b, bool()) {
		return sgn(det(l1.b - l1.a, l2.b - l2.a)) == Sign::ZERO;
	}
	// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_A
	template <typename line_t_1, typename line_t_2>
	auto is_orthogonal(const line_t_1 &l1, const line_t_2 &l2) -> decltype(l1.a, l1.b, l2.a, l2.b, bool())  {
		return sgn(dot(l1.b - l1.a, l2.b - l2.a)) == Sign::ZERO;
	}
	template <typename line_t_1, typename line_t_2>
	auto on_the_same_line(const line_t_1 &l1, const line_t_2 &l2) -> decltype(l1.a, l1.b, l2.a, l2.b, bool())  {
		return is_parallel(l1, l2) and sgn(det(l1.b - l1.a, l2.a - l1.a)) == Sign::ZERO;
	}

	// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_A
	template <typename line_t>
	Point projection(const Point &p, const line_t &line) {
		Point a = p - line.a;
		Point b = line.b - line.a;
		return line.a + dot(a, b) / square_abs(b) * b;
	}

	// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_1_B
	template <typename line_t>
	Point reflection(const Point &p, const line_t &line) {
		Point h = projection(p, line);
		return p + (h - p) * 2;
	}

	// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D
	coordinate_t square_distance(const Point &p, const Segment &l) {
		Point h = projection(p, l);
		if (isp(l.a, l.b, h) == ISP::MIDDLE) {
			return square_abs(h - p);
		} else {
			return std::min(square_abs(p - l.a), square_abs(p - l.b));
		}
	}
	coordinate_t square_distance(const Segment &l, const Point &p) {
		return square_distance(p, l);
	}
	coordinate_t square_distance(const Point &p, const Ray &l) {
		Point h = projection(p, l);
		int dir = isp(l.a, l.b, h);
		return dir == ISP::MIDDLE or dir == ISP::FRONT ? square_abs(h - p) : std::min(square_abs(p - l.a), square_abs(p - l.b));
	}
	coordinate_t square_distance(const Ray &l, const Point &p) {
		return square_distance(p, l);
	}
	coordinate_t square_distance(const Point &p, const Line &l) {
		return square_abs(projection(p, l) - p);
	}
	coordinate_t square_distance(const Line &l, const Point &p) {
		return square_distance(p, l);
	}
	// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D
	coordinate_t distance(const Point &p, const Segment &l) {
		return std::sqrt(square_distance(p, l));
	}
	// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_D
	coordinate_t distance(const Segment &l, const Point &p) {
		return distance(p, l);
	}
	coordinate_t distance(const Point &p, const Ray &l) {
		return std::sqrt(square_distance(p, l));
	}
	coordinate_t distance(const Ray &l, const Point &p) {
		return distance(p, l);
	}
	coordinate_t distance(const Point &p, const Line &l) {
		return std::sqrt(square_distance(p, l));
	}
	coordinate_t distance(const Line &l, const Point &p) {
		return distance(p, l);
	}

	Containment contains(const Segment &l, const Point &p) {
		return sgn(distance(l, p)) == 0 ? Containment::ON : Containment::OUT;
	}
	Containment contains(const Ray &l, const Point &p) {
		return sgn(distance(l, p)) == 0 ? Containment::ON : Containment::OUT;
	}
	Containment contains(const Line &l, const Point &p) {
		return sgn(distance(l, p)) == 0 ? Containment::ON : Containment::OUT;
	}

	bool equals(const Line &l, const Line &m) {
		return on_the_same_line(l, m);
	}
	bool equals(const Ray &l, const Ray &m) {
		return on_the_same_line(l, m) and equals(l.a, m.a);
	}
	bool equals(const Segment &l, const Segment &m) {
		return (equals(l.a, m.a) and equals(l.b, m.b)) or (equals(l.a, m.b) and equals(l.b, m.a));
	}

	// "https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_B"
	bool has_common_point(const Segment &l1, const Segment &l2) {
		int isp_1a = isp(l1.a, l1.b, l2.a), isp_1b = isp(l1.a, l1.b, l2.b);
		if (isp_1a * isp_1b > 0) return false;
		int isp_2a = isp(l2.a, l2.b, l1.a), isp_2b = isp(l2.a, l2.b, l1.b);
		if (isp_2a * isp_2b > 0) return false;
		return true;
	}

	namespace internal {
		template <typename line_t_1, typename line_t_2>
		Point cross_point(const line_t_1 &l1, const line_t_2 &l2) {
			assert(not is_parallel(l1, l2));
			Point u = l1.b - l1.a, v = l2.a - l2.b, c = l2.a - l1.a;
			return l2.a - det(u, c) / det(u, v) * v;
		}
	}

	// "https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_2_C"
	std::variant<std::nullptr_t, Point, Segment> common_point(const Segment &l1, const Segment &l2) {
		if (not has_common_point(l1, l2)) return nullptr;
		if (not is_parallel(l1, l2)) return internal::cross_point(l1, l2);
		std::vector<Point> ps { l1.a, l1.b, l2.a, l2.b };
		for (int i = 0; i <= 2; ++i) for (int j = 2; j >= i; --j) {
			if (XY_COMPARATOR(ps[j + 1], ps[j])) std::swap(ps[j], ps[j + 1]);
		}
		if (equals(ps[1], ps[2])) return ps[1];
		return Segment(ps[1], ps[2]);
	}
}
} // namespace suisen

using namespace geometry;

Point read_point() {
	coordinate_t x, y;
	read(x, y);
	return { x, y };
}

int main() {
	while (true) {
		input(int, n);
		if (n == 0) break;

		Point s = read_point();
		vector<Point> ps(n);
		rep(i, n) ps[i] = read_point();

		auto check = [&](vector<int> ord) -> bool {
			vector<Point> P = ps;

			Point l = P[ord[0]], r = P[ord[1]];

			rep(idx, 1, n) {
				int i = ord[idx];
				Point A = P[i], B = P[(i + 1) % n];
				bool al = isp(s, l, A) == ISP::L_CURVE;
				bool ar = isp(s, r, A) == ISP::R_CURVE;
				bool bl = isp(s, l, B) == ISP::L_CURVE;
				bool br = isp(s, r, B) == ISP::R_CURVE;
				if (al and ar and bl and br) {
					l = A, r = B;
					if (isp(s, l, r) == ISP::R_CURVE) swap(l, r);
				} else if (al and ar) {
					if (has_common_point(Segment { A, B }, Segment { s, l * 10000 })) {
						r = A;
					} else {
						l = A;
					}
				} else if (bl and br) {
					if (has_common_point(Segment { A, B }, Segment { s, l * 10000 })) {
						r = B;
					} else {
						l = B;
					}
				} else {
					if (has_common_point(Segment { A, B }, Segment { s, l * 10000 }) or has_common_point(Segment { A, B }, Segment { s, r * 10000 })) {
						
					} else {
						return false;
					}
				}
				Line mirror { A, B };
				rep(j, n) P[j] = reflection(P[j], mirror);
			}
			return true;
		};

		int ans = 0;
		vector<int> ord(n);
		iota(all(ord), 0);
		do ans += check(ord); while (next_permutation(all(ord)));
		print(ans);
	}
	return 0;
}


