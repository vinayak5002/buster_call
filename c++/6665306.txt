#define READ_FROM_FILE 0
#if READ_FROM_FILE
#include <fstream>
#endif

#include <iostream>
#include <vector>
using namespace std;

typedef pair<int, int> Pii; //first:最短距離，second:頂点番号


#define MAX_COST (1000000000)


class Edge {
public:
	int from;
	int to;
	int cost;

	Edge() : from(-1), to(-1), cost(-1) {
		return;
	}
	~Edge() {
		return;
	}
};

bool bellman_ford(int num_vertexes, const vector<Edge>& edges, int start, vector<long>& min_cost) {
	bool is_there_negative_cycle = false;

	min_cost.clear();
	min_cost.resize(num_vertexes, MAX_COST);
	min_cost[start] = 0;
	for (int i = 0; i < num_vertexes; i++) {
		bool update = false;
		for (const Edge& e : edges) {
			if (min_cost[e.from] != MAX_COST && min_cost[e.to] > min_cost[e.from] + e.cost) {
				min_cost[e.to] = min_cost[e.from] + e.cost;
				update = true;

				if (i == num_vertexes - 1) {
					is_there_negative_cycle = true;
					break;
				}
			}

		}
		if (!update) { break; }
		if (is_there_negative_cycle) { break; }
	}
	return is_there_negative_cycle;
}

int main() {
#if READ_FROM_FILE
	ifstream ifs("test0.txt");
	cin.rdbuf(ifs.rdbuf());
#endif
	int n, m, r;
	vector<Edge> edges;
	vector<long> min_cost;
	bool is_there_negative_cycle = false;

	cin >> n >> m >> r;
	edges.resize(m);
	for (int i = 0; i < m; i++) {
		int s, t, d;
		Edge edge;

		cin >> s >> t >> d;
		edge.from = s;
		edge.to = t;
		edge.cost = d;
		edges[i] = edge;
	}

	is_there_negative_cycle = bellman_ford(n, edges, r, min_cost);
	if (is_there_negative_cycle) {
		cout << "NEGATIVE CYCLE" << endl;
	}
	else {
		for (int i = 0; i < n; i++) {
			if (min_cost[i] == MAX_COST) {
				cout << "INF" << endl;
			}
			else {
				cout << min_cost[i] << endl;
			}
		}
	}
	return 0;
}
