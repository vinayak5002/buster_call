#line 1 "main.cpp"
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <map>
#line 5 "/home/kokoro601/compro_library/String/AhoCorasick.hpp"
#include <queue>
#line 3 "/home/kokoro601/compro_library/String/Trie.hpp"
#include <cstring>
#line 5 "/home/kokoro601/compro_library/String/Trie.hpp"
#include <functional>
#line 7 "/home/kokoro601/compro_library/String/Trie.hpp"

template <int char_size> class TrieNode {
public:
    int nxt[char_size];

    static const int NULLNODE = -1;

    int exist, depth;
    std::vector<int> accept_ids; // one node might have multiple ids

    TrieNode(int depth): exist(0), depth(depth) {
        memset(nxt, NULLNODE, sizeof(nxt));
    }
};

template <int char_size, int margin> class Trie {

    void update_exist(int node_index) {
        ++nodes[node_index].exist;
    }

    void update_cur_node(int node_index, int id) { 
        nodes[node_index].accept_ids.push_back(id);
    }

    void add(const std::string &str, int str_index, int node_index, int id) {
        if (str_index == str.size()) update_cur_node(node_index, id);
        else {
            const int c = str[str_index] - margin;
            if (nodes[node_index].nxt[c] == Node::NULLNODE) {
                nodes[node_index].nxt[c] = (int)nodes.size();
                nodes.push_back(Node(str_index));
            }
            add(str, str_index + 1, nodes[node_index].nxt[c], id);
            update_exist(node_index);
        }
    }

public:
    using Node = TrieNode<char_size>;
    std::vector<Node> nodes;
    const int root;

    Trie() : root(0) {
        nodes.push_back(Node(-1));
    }

    void add(const std::string &str, int id) {
        add(str, 0, root, id);
    }

    void add(const std::string &str) { 
        add(str, nodes[0].exist);
    }

    void add(const std::vector<std::string> &patterns) {
        for (auto &str : patterns) add(str);
    }

    void query(const std::string &str, const std::function<void(int)> &f, int str_index, int node_index) {
        for (auto &idx : nodes[node_index].accept) f(idx);

        if (str_index == str.size()) return;
        else {
            const int c = str[str_index] - margin;
            if (nodes[node_index].nxt[c] == Node::NULLNODE) return;
            query(str, f, str_index + 1, nodes[node_index].nxt[c]);
        }
    }

    void query(const std::string &str, const std::function<void(int)> &f) {
        query(str, f, 0, root);
    }

    int size() const { // return the number of nodes
        return (int)nodes.size();
    }

    int count() const {
        return nodes[root].exist;
    }

    int is_accept(int node_index) const {
        return nodes[node_index].accept_ids.size() > 0;
    }
};
#line 7 "/home/kokoro601/compro_library/String/AhoCorasick.hpp"

template <int char_size, int margin> class AhoCorasick : 
    public Trie<char_size + 2, margin> {

    const int FAIL = char_size;
    const int OUTPUT = char_size + 1;
    const int TOTCHAR = char_size + 2;
    using Node = typename Trie<char_size + 2, margin>::Node;
    using Trie<char_size + 2, margin>::nodes;
    using Trie<char_size + 2, margin>::root;

    void build() {
        std::queue<int> que;

        // nodes[root].nxt[FAIL] is root
        // nodes[root].nxt[OUTPUT] is NULLNODE
        for (int i = 0; i <= FAIL; i++) {
            int nxt_node = nodes[root].nxt[i];
            if (nxt_node != Node::NULLNODE) {
                nodes[nxt_node].nxt[FAIL] = root; // set failure link of the next node
                nodes[nxt_node].nxt[OUTPUT] = Node::NULLNODE; // set output link of the next node
                que.push(nxt_node);
            } else {
                nodes[root].nxt[i] = root; 
            }
        }

        while(!que.empty()) {
            auto &cur_node = nodes[que.front()]; que.pop();
            for (int i = 0; i < char_size; i++) {
                if (cur_node.nxt[i] == Node::NULLNODE) continue;
                auto &nxt_node = nodes[cur_node.nxt[i]];

                // set failure link of the next node
                int fail = cur_node.nxt[FAIL];
                // if fail is root, nodes[fail].nxt[i] is not NULLNODE because of the initialization above.
                while (nodes[fail].nxt[i] == Node::NULLNODE) 
                    fail = nodes[fail].nxt[FAIL];
                nxt_node.nxt[FAIL] = nodes[fail].nxt[i];


                // set output link of the next node
                if (this->is_accept(nxt_node.nxt[FAIL])) nxt_node.nxt[OUTPUT] = nxt_node.nxt[FAIL];
                else nxt_node.nxt[OUTPUT] = nodes[nxt_node.nxt[FAIL]].nxt[OUTPUT]; 

                que.push(cur_node.nxt[i]);
            }
        }
    }

public:
    AhoCorasick(std::vector<std::string> &patterns) {
        this->add(patterns);
        build();
    }

    std::map<std::pair<int,int>, std::vector<int> > match(std::string &str) {
        std::map<std::pair<int,int>, std::vector<int> > result;
        int now_id = 0;
        int str_index = 0;
        for (auto &c : str) {
            int i = c - margin;
            while (nodes[now_id].nxt[i] == Node::NULLNODE) now_id = nodes[now_id].nxt[FAIL];
            now_id = nodes[now_id].nxt[i];

            int now_id_tmp = now_id;
            while (now_id_tmp != Node::NULLNODE) {
                for (auto &v : nodes[now_id_tmp].accept_ids)
                    result[std::make_pair(str_index - nodes[now_id_tmp].depth, str_index)].push_back(v);
                now_id_tmp = nodes[now_id_tmp].nxt[OUTPUT];
            }
            str_index++;
        }
        return result;
    }
};
#line 7 "main.cpp"

using namespace std;
using ll = long long;
using Graph = vector<vector<int> >;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string t; cin >> t;
    int q; cin >> q;
    vector<string> p; p.resize(q);
    for (int i = 0; i < q; i++) cin >> p[i];

    AhoCorasick<26, 'a'> ac(p);
    auto res = ac.match(t);

    vector<int> ans(q);
    for(auto &x : res) {
        auto v = x.second;
        for (auto id : v) ans[id] = 1; 
    }

    for (int i = 0; i < q; i++) cout << ans[i] << endl;



    return 0;
}



