#include <bits/stdc++.h>

using namespace std;

using P = pair<int, int>;
using VC = vector<char>;
using VVC = vector<VC>;

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int h, w, n;
    cin >> h >> w >> n;

    VVC grid(h + 2, VC(w + 2, 'X'));
    P st;
    vector<P> cheese(n + 1);
    for (int i = 1; i <= h; ++i) {
        string s;
        cin >> s;
        for (int j = 1; j <= w; ++j) {
            grid[i][j] = s[j - 1];
            if (s[j - 1] == 'S') {
                st = make_pair(i, j);
            } else if (s[j - 1] >= '1' && s[j - 1] <= '0' + n) {
                cheese[s[j - 1] - '0'] = make_pair(i, j);
            }
        }
    }
    
    int time = 0;
    vector<int> dy = {0, -1, 0, 1};  // 左、上、右、下
    vector<int> dx = {-1, 0, 1, 0};
    for (int i = 0; i < n; ++i) {
        deque<P> dq;
        vector<vector<int>> visited(h + 2, vector<int>(w + 2, -1));
        if (i == 0) {
            dq.push_back(st);
            visited[st.first][st.second] = 0;
        } else {
            dq.push_back(cheese[i]);
            visited[cheese[i].first][cheese[i].second] = 0;
        }
        while (!dq.empty()) {
            P p = dq.front();
            dq.pop_front();
            if (p == cheese[i + 1]) {
                time += visited[p.first][p.second];
                break;
            } else {
                for (int r = 0; r < 4; ++r) {
                    int ny = p.first + dy[r];
                    int nx = p.second + dx[r];
                    if (grid[ny][nx] != 'X' && visited[ny][nx] == -1) {
                        dq.push_back(make_pair(ny, nx));
                        visited[ny][nx] = visited[p.first][p.second] + 1;
                    }
                }
            }
        }
    }
    cout << time << endl;
    return 0;
}

