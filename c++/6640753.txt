#include <bits/stdc++.h>
//#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
#define all(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

bool chmax(ll& p, ll q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

bool chmin(ll& p, ll q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll sti(string S) {
    ll res = 0;
    rep(i, S.size()) {
        res += S[i] - '0';
        res *= 10;
    }
    return res / 10;
}

string ist(ll n, ll L = -1) {
    string res = "";
    if (L >= 0)rep(l, L)res += '0';
    ll p = L - 1;
    if (L != -1)while (n > 0) {
        res[p] = char(n % 10 + '0');
        p--;
        n /= 10;
    }
    else {
        while (n > 0) {
            res.push_back(char(n % 10 + '0'));
            p--;
            n /= 10;
        }
        reverse(all(res));
    }
    return res;
}

ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}

int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    while (1) {
        ll W, H;
        cin >> W >> H;
        if (W == 0)return 0;

        vvll A(H, vll(W));
        rep(i, H)rep(j, W)cin >> A[i][j];
        vll C(4);
        rep(i, 4)cin >> C[i];

        set<tuple<ll, ll, ll>> seen;
        map<tuple<ll, ll, ll>, ll> dist;
        vll dx = { 1,0,-1,0 };
        vll dy = { 0,1,0,-1 };

        priority_queue<pair<ll, tuple<ll, ll, ll>>, vector<pair<ll, tuple<ll, ll, ll>>>, greater<pair<ll, tuple<ll, ll, ll>>>> Q;

        Q.push({ 0,{0,0,0} });
        while (!Q.empty()) {
            auto p = Q.top();
            Q.pop();
            if (seen.count(p.second))continue;
            seen.insert(p.second);

            ll y = get<0>(p.second);
            ll x = get<1>(p.second);
            ll d = get<2>(p.second);

            ll ny = -1, nx = -1, nd = -1;
            if (A[y][x] != 4) {
                nd = d;
                nd += A[y][x];
                nd %= 4;
                ny = y + dy[nd];
                nx = x + dx[nd];

                if (ny >= 0 && ny < H && nx >= 0 &&nx < W) {
                    if (!seen.count({ ny,nx,nd })) {
                        if (!dist.count({ ny,nx,nd })) {
                            dist[{ny, nx, nd}] = dist[{y, x, d}];
                            Q.push({ dist[{ny,nx,nd}],{ny,nx,nd} });
                        }
                        else if (dist[{ny, nx, nd}] > dist[{y, x, d}]) {
                            dist[{ny, nx, nd}] = dist[{y, x, d}];
                            Q.push({ dist[{ny,nx,nd}],{ny,nx,nd} });
                        }
                    }
                }


            }
            rep(dd, 4) {
                nd = d + dd;
                nd %= 4;
                ny = y + dy[nd];
                nx = x + dx[nd];

                if (ny >= 0 && ny < H && nx >= 0 && nx < W) {
                    if (!seen.count({ ny,nx,nd })) {
                        if (!dist.count({ ny,nx,nd })) {
                            dist[{ny, nx, nd}] = dist[{y, x, d}] + C[dd];
                            Q.push({ dist[{ny,nx,nd}],{ny,nx,nd} });
                        }
                        else if (dist[{ny, nx, nd}] > dist[{y, x, d}] + C[dd]) {
                            dist[{ny, nx, nd}] = dist[{y, x, d}] + C[dd];
                            Q.push({ dist[{ny,nx,nd}],{ny,nx,nd} });
                        }
                    }
                }
            }

        }

        ll an = 1e18;
        rep(d, 4) {
            if (dist.count({ H - 1,W - 1,d })) {
                chmin(an, dist[{H - 1, W - 1, d}]);
            }
        }
        cout << an << endl;

    }

}
