#include <iostream>
using namespace std;
typedef long long Int;

Int INF = (1LL<<31) -1;
Int seg[1 << 20], lazy[1 << 20];

void eval(int pos, int sl, int sr){
  if(lazy[pos] != 0){
    seg[pos] += lazy[pos];
    // 最下層でないなら
    if(sr - sl > 1){
      lazy[2*pos] += lazy[pos] / 2;
      lazy[2*pos+1] += lazy[pos] / 2;
    }
    lazy[pos] = 0;
  }
}
void add(int ql, int qr, int x, int sl = 0, int sr = 1 << 19, int pos = 1) {
  eval(pos, sl, sr);

  // かぶっていない
  if(qr <= sl || sr<= ql) return;
  //包まれる
  if(ql <= sl && sr <= qr){
    lazy[pos] += x * (sr - sl);
    eval(pos, sl, sr);
    return;
  }
  Int sm = (sl+sr) / 2;
  add(ql, qr, x, sl, sm, pos*2);
  add(ql, qr, x, sm, sr, pos*2+1);
  // update
  seg[pos] = seg[pos*2] + seg[pos*2+1];
}

Int get_sum(int ql, int qr, int sl = 0, int sr = 1 << 19, int pos = 1) {
  eval(pos, sl, sr);
  // かぶっていない
  if(qr <= sl || sr <= ql) return 0;
  // 完全に包まれる
  if(ql <= sl && sr <= qr) return seg[pos];
  Int sm =(sl + sr) / 2;
  Int rsum = get_sum(ql, qr, sl, sm, pos*2);
  Int lsum = get_sum(ql, qr, sm, sr, pos*2+1);
  return lsum + rsum;

}

int main(){
  Int n, q, com, s, t, x;
  cin >> n >> q;
  for(int i=0; i<q;i++){
    cin >> com;
    if(com == 0){
      cin >> s >> t >> x;
      add(s, t+1, x);
    }else{
      cin >> s >> t;
      cout << get_sum(s, t+1) << endl;
    }
  }
}
