#include <stdio.h>
#include <stdlib.h>
#include <math.h>

void minkowski(int *a, int *b, int n);
void manhattan(int *a, int *b, int n);
void euclidean(int *a, int *b, int n);
void chebyshev(int *a, int *b, int n);

int main(void) {

    int n, i;
    int *a, *b;

    scanf("%d", &n);

    a = (int *)malloc(sizeof(int) * n);
    b = (int *)malloc(sizeof(int) * n);

    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    for (i = 0; i < n; i++) {
        scanf("%d", &b[i]);
    }

    // p = 1
    manhattan(a, b, n);

    // p = 2
    euclidean(a, b, n);

    // p = 3
    minkowski(a, b, n);

    // p = 無限
    chebyshev(a, b, n);

    free(a);
    free(b);

    return 0;
}

void manhattan (int *a, int *b, int n) {
    int i;
    double ans;

    ans = 0;

    for(i = 0; i < n; i++) {
        ans += abs(a[i] - b[i]);
    }

    printf("%lf\n", ans);
}

void euclidean (int *a, int *b, int n) {
    int i;
    double sum, ans;

    sum = 0;

    for (i = 0; i < n; i++) {
        sum += pow((a[i] - b[i]), 2);
    }

    ans = sqrt(sum);

    printf("%lf\n", ans);
}

void minkowski (int *a, int *b, int n) {
    int i;
    double sum, ans, x;

    sum = 0;
    x = 1.0 / 3;

    for (i = 0; i < n; i++) {
        sum += pow(abs(a[i] - b[i]), 3);
    }

    ans = pow(sum, x);

    printf("%lf\n", ans);
}

void chebyshev (int *a, int *b, int n) {
    int i;
    double sum, ans;

    sum = 0;
    ans = 0;

    for (i = 0; i < n; i++) {
        sum = abs(a[i] - b[i]);
        if (ans < sum) {
            ans = sum;
        }
    }

    printf("%lf\n", ans);
}

