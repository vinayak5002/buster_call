#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define rep(i, n) for (int i = 0; i < (n); i++)
#define coutf(f) cout << fixed << setprecision(f)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define pb push_back
#define P pair<int,int>

const ll INF = 1LL << 60;

struct Edge {
    int to;
    ll w;
    Edge(int to, ll w) : to(to), w(w) {}
};

using Graph = vector<vector<Edge>>;

template<class T> bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

int main(){
    int N, M, s;
    cin >> N >> M >> s;
    Graph G(N);
    rep (i,M) {
        int a, b, w;
        cin >> a >> b >> w;
        G[a].pb(Edge({b,w}));
    }

    //ベルマンフォード法
    bool exist_negative_cycle = false;
    vector<ll> dist(N, INF);
    dist[s] = 0;
    rep (iter, N) {
        bool update = false;
        rep (v, N) {
            if (dist[v] == INF) continue;
            for(auto e : G[v]) {
                if (chmin(dist[e.to], dist[v] + e.w)) update = true;
            }
        }
        if (!update) break;

        if(iter == N - 1 && update) exist_negative_cycle = true;
    }

    if(exist_negative_cycle) cout << "NEGATIVE CYCLE" << endl;
    else {
        rep (v,N) {
            if (dist[v] < INF) cout << dist[v] << endl;
            else cout << "INF" << endl;
        }
    }

}
