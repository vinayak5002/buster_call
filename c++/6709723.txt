#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <iostream>
#include <stack>
#include <queue>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <cmath>
#include<sstream>
#include<list>
#include<iomanip>
#include <cstdlib>
#include <cstring>
#include <stack>
#include <bitset>
#include <cassert>
#include <stdlib.h>
#include <stdio.h>
using namespace std;
const int INF = 1000000000;
const long long LINF = 3e18 + 7;
const int MAX_N = 50010;
const int MAX_W = 1000010;
const int MAX_ARRAYK = 100000;
double PI = 3.14159265358979323846;
//using ll = long long;



char field[1010][1010];
char original[1010][1010];
int cost[1010][1010];
int dx[4] = { -1, 0, 1, 0 };
int dy[4] = { 0, 1, 0, -1 };
int H, W, N;
int sx, sy;
int gx, gy;

int main() {

	cin >> H >> W >> N;


	for (int i = 0; i < H; i++) {
		for (int j = 0; j < W; j++) {
			cin >> field[i][j];
			if (field[i][j] == 'S') {
				field[i][j] = '0';
			}
			original[i][j] = field[i][j];
		}
	}


	int ans = 0;
	for (int n = 0; n < N; n++) {
		char sh = '0' + n;
		char gh = '0' + (n + 1);

		for (int i = 0; i < H; i++) {
			for (int j = 0; j < W; j++) {
				if (field[i][j] == sh) {
					sy = i;
					sx = j;
				}
				if (field[i][j] == gh) {
					gy = i;
					gx = j;
				}
			}
		}

		for (int i = 0; i < H; i++) {
			for (int j = 0; j < W; j++) {
				field[i][j] = original[i][j];
				cost[i][j] = INF;
			}
		}

		queue<pair<int, int> > que;
		cost[sy][sx] = 0;
		que.push(make_pair(sy, sx));

		while (!que.empty()) {
			int x = que.front().second;
			int y = que.front().first;
			que.pop();

			if (x == gx && y == gy) {
				break;
			}

			for (int i = 0; i < 4; i++) {
				int nx = x + dx[i];
				int ny = y + dy[i];

				if (nx >= 0 && nx < W && ny >= 0 && ny < H && field[ny][nx] != 'X' && cost[ny][nx] > cost[y][x] + 1) {
					cost[ny][nx] = cost[y][x] + 1;
					que.push(make_pair(ny, nx));
				}

			}
		}

		ans += cost[gy][gx];

	}

	cout << ans << endl;

	return 0;
}
