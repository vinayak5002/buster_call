#include<bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef long double ld;

const ll INF = 1e18;
const ld EPS = 1e-10;

class edge{
public:
  ll to, cost;
  edge(ll to, ll cost): to(to), cost(cost) {}
};

void dijkstra(ll s, vector<vector<edge> > &G, vector<ll> &dist){
  priority_queue<pair<ll, ll>, vector<pair<ll, ll> >, greater<pair<ll, ll> > > que;
  
  ll n = dist.size();
  for(ll i = 0; i < n; i++){
    dist[i] = INF; //par[i] = i;
  }

  dist[s] = 0;
  que.push(make_pair(0, s));

  while(!que.empty()){
    pair<ll, ll> p = que.top();
    que.pop();
    ll v = p.second;
    if(dist[v] < p.first) continue;
    for(ll i = 0; i < G[v].size(); i++){
      edge e = G[v][i];
      if(dist[e.to] > dist[v] + e.cost){
        dist[e.to] = dist[v] + e.cost;
        //par[e.to] = v;
        que.push(make_pair(dist[e.to], e.to));
      }
    }
  }
}

/*

// s -> tの最短路の復元
vector<ll> get_path(ll t){
  vector<ll> res;
  ll i = t;
  while(i != par[i]){
    res.push_back(i);
    i = par[i];
  }
  reverse(res.begin(), res.end());
  return res;
}
*/


int main(){
  cout << fixed << setprecision(20);

  ll v, e, r;
  cin >> v >> e >> r;
  vector<ll> dist(v);
  vector<vector<edge> > G(v, vector<edge>());
  for(ll i = 0; i < e; i++){
    ll s, t, d;
    cin >> s >> t >> d;
    G[s].push_back(edge(t, d));
  }
  dijkstra(r, G, dist);
  for(ll i = 0; i < v; i++){
    if(dist[i] == INF) cout << "INF" << endl;
    else cout << dist[i] << endl;
  }
  
  return 0;
}


