#include <bits/stdc++.h>
//#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vd = vector<double>;
using vvd = vector<vd>;
using vvvd = vector<vvd>;
#define all(A) A.begin(),A.end()
#define ciN cin
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}

ll dfs(string S) {
    ll n = S.size();

    if (S[0] != '[') {
        ll res = 0;
        rep(i, n) {
            res += S[i] - '0';
            res *= 10;
        }
        res /= 10;
        return res/2+1;
    }
    ll L = -1;
    ll k = 0;
    vll D;
    rep(i, n) {
        if (S[i] == '[') {
            if (L == -1) {
                L = i;
            }
            k++;
        }
        else if (S[i] == ']') {
            k--;
            if (k == 0) {
                
                ll P = dfs(S.substr(L + 1, i - L - 1));
                L = -1;
                D.push_back(P);
            }
        }
    }
    sort(all(D));
    ll an = 0;
    rep(i, D.size() / 2 + 1) {
        an += D[i];
    }
    return an;
}

int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    ll N;
    cin >> N;
    rep(i, N) {
        string S;
        cin >> S;
        cout << dfs(S) << endl;

    }
}

