#include <iostream>
#include <cassert>
#include <cmath>

#define PI 3.141592653589

struct Coordinate
{
    double x;
    double y;
    bool operator==(const Coordinate &rhv) const //中身が変わらないですよ～のconst
    {
        return this->x == rhv.x && this->y == rhv.y;
    }
};

Coordinate getS(Coordinate p1, Coordinate p2)
{
    Coordinate result = p1;
    result.x += (p2.x - p1.x) / 3;
    result.y += (p2.y - p1.y) / 3;
    return result;
}
Coordinate getT(Coordinate p1, Coordinate p2)
{
    Coordinate result = p1;
    result.x += (p2.x - p1.x) * 2 / 3;
    result.y += (p2.y - p1.y) * 2 / 3;
    return result;
}

Coordinate getU(Coordinate p1, Coordinate p2)
{
    Coordinate result = p1;

    result.x = (p2.x - p1.x) * cos(PI * 1 / 3) - (p2.y - p1.y) * sin(PI * 1 / 3) + p1.x;
    result.y = (p2.x - p1.x) * sin(PI * 1 / 3) + (p2.y - p1.y) * cos(PI * 1 / 3) + p1.y;

    return result;
}

void printXY(Coordinate A)
{
    printf("%.8lf %.8lf\n", A.x, A.y);
}

void kock(int n, Coordinate p1, Coordinate p2)
{
    if (n == 0)
    {
        return;
    }
    Coordinate s = getS(p1, p2);
    Coordinate t = getT(p1, p2);
    Coordinate u = getU(s, t);

    kock(n - 1, p1, s);
    printXY(s);
    kock(n - 1, s, u);
    printXY(u);
    kock(n - 1, u, t);
    printXY(t);
    kock(n - 1, t, p2);
}

int main()
{
    assert(Coordinate({30, 30}) == Coordinate({30, 30}));
    assert(!(Coordinate({30, 30}) == Coordinate({40, 40})));
    assert(getS({0, 0}, {90, 0}) == Coordinate({30, 0}));
    assert(getS({0, 0}, {90, 30}) == Coordinate({30, 10}));
    assert(getS({30, 0}, {60, 0}) == Coordinate({40, 0}));
    assert(getT({0, 0}, {90, 0}) == Coordinate({60, 0}));
    assert(getT({0, 0}, {90, 30}) == Coordinate({60, 20}));
    //assert(getU({55.55555556, 19.24500897}, {61.11111111, 9.62250449}) == Coordinate({66.66666667, 19.24500897})); //ダメ

    int n;
    std::cin >> n;
    Coordinate p1 = {0, 0};
    Coordinate p2 = {100, 0};
    printXY(p1);
    kock(n, p1, p2);
    printXY(p2);

    return 0;
}

