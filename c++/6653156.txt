#include <stdio.h>
#include <string.h> 

#define MAX_TEXT 1000000
#define MAX_PATTERN 1000

void makeTable1(int *table1,char *pattern,int pattern_len){
    int i,pos;
    
    for(i=0;i<256;i++)
        table1[i]=pattern_len;

    for(pos=0;pos<pattern_len;pos++)
        table1[pattern[pos]]=pattern_len-1-pos;
}

void makeTable2(int *table2,char *pattern,int pattern_len){
    int pattern_pos,tail_pos;
    int eq_len;
    int i;
    
    for(pattern_pos=0;pattern_pos<pattern_len;pattern_pos++)
        table2[pattern_pos]=-1;

    for(tail_pos=0;tail_pos<pattern_len-1;tail_pos++){

        eq_len=0;
        while(eq_len<tail_pos&&pattern[tail_pos-eq_len]==pattern[pattern_len-1-eq_len])
            eq_len++;

        if(eq_len==0)
            continue;

        if(pattern[tail_pos-eq_len]!=pattern[pattern_len-1-eq_len])
            table2[pattern_len-1-eq_len]=pattern_len-1-tail_pos+eq_len;
    }

    tail_pos=-1;
    for(pattern_pos=pattern_len-2;pattern_pos>=0;pattern_pos--){
        eq_len=pattern_len-1-pattern_pos;

        i=0;
        while(i<eq_len&&pattern[i]==pattern[pattern_pos+1+i])
            i++;
        
        if(eq_len==i)
            tail_pos=eq_len-1;
        
        if(table2[pattern_pos]==-1)
            if(tail_pos!=-1)
                table2[pattern_pos]=pattern_len-1-tail_pos+pattern_len-1-pattern_pos;
    }

    for(pattern_pos=pattern_len-2;pattern_pos>=0;pattern_pos--)
        if(table2[pattern_pos]==-1)
            table2[pattern_pos]=pattern_len+(pattern_len-1-pattern_pos);
}

int bmSearch(char *text,int text_len,char *pattern,int pattern_len){
    int text_pos;
    int pattern_pos; 
    int table1[256];
    int table2[MAX_PATTERN];

    makeTable1(table1,pattern,pattern_len);
    makeTable2(table2,pattern,pattern_len);

    pattern_pos=pattern_len-1;

    text_pos=pattern_len-1;

    while(text_pos<text_len){

        if(text[text_pos]==pattern[pattern_pos]){

            if(pattern_pos==0)
                return text_pos;
            
            text_pos--;
            pattern_pos--;

        }
        else{
            if (table1[text[text_pos]]>table2[pattern_pos])
                text_pos+=table1[text[text_pos]];
            else
                text_pos+=table2[pattern_pos];
            
            pattern_pos=pattern_len-1;
        }
    }

    return -1;
}

int main(void){
	int number,find;
	int i;
    char text[MAX_TEXT];
    char pattern[MAX_PATTERN];
    
	scanf("%s",text);
	scanf("%d",&number);
	
	for(i=0;i<number;i++){
		scanf("%s",pattern);
	
    	find=bmSearch(text,strlen(text),pattern,strlen(pattern));
    
    	if(find!=-1)
        	printf("1\n");
		else 
        	printf("0\n");
    }

    return 0;
}
