#line 1 "solve/main.cpp"
#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <chrono>
#include <cmath>
#include <complex>
#include <cstdint>
#include <cstdlib>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <type_traits>
#include <unordered_map>
#include <utility>
#include <vector>

/* template start */

#line 2 "lib/utility/type_alias.hpp"

#line 4 "lib/utility/type_alias.hpp"

using u64 = std::uint64_t;
using u32 = std::uint32_t;
using u16 = std::uint16_t;
using u8 = std::uint8_t;

using i64 = std::int64_t;
using i32 = std::int32_t;
using i16 = std::int16_t;
using i8 = std::int8_t;

using usize = std::size_t;
using isize = std::ptrdiff_t;

constexpr i64 operator"" _i64(unsigned long long num) { return i64(num); }

constexpr u64 operator"" _u64(unsigned long long num) { return u64(num); }
#line 33 "solve/main.cpp"

#define rep(i, a, b) for (i64 i = (a); (i) < (b); (i)++)
#define all(i) i.begin(), i.end()

#ifdef LOCAL
#define debug(...)                                                    \
  std::cerr << "LINE: " << __LINE__ << "  [" << #__VA_ARGS__ << "]:", \
      debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

void debug_out() { std::cerr << std::endl; }

template <typename Head, typename... Tail>
void debug_out(Head h, Tail... t) {
  std::cerr << " " << h;
  if (sizeof...(t) > 0) std::cerr << " :";
  debug_out(t...);
}

template <typename T1, typename T2>
std::ostream& operator<<(std::ostream& os, std::pair<T1, T2> pa) {
  return os << pa.first << " " << pa.second;
}

template <typename T>
std::ostream& operator<<(std::ostream& os, std::vector<T> vec) {
  for (std::size_t i = 0; i < vec.size(); i++)
    os << vec[i] << (i + 1 == vec.size() ? "" : " ");
  return os;
}

template <typename T1, typename T2>
inline bool chmax(T1& a, T2 b) {
  return a < b && (a = b, true);
}

template <typename T1, typename T2>
inline bool chmin(T1& a, T2 b) {
  return a > b && (a = b, true);
}

template <typename Num, typename Func = std::multiplies<Num>>
constexpr Num mypow(Num a, u64 b, Num id = 1, Func mul = Func()) {
  if (b == 0) return id;
  Num x = id;
  while (b > 0) {
    if (b & 1) x = mul(x, a);
    a = mul(a, a);
    b >>= 1;
  }
  return x;
}

/* template end */

int main() {
  std::cin.tie(nullptr);
  std::ios::sync_with_stdio(false);

  i64 h, w, r, c;
  std::cin >> h >> w >> r >> c;

  i64 n;
  std::cin >> n;

  std::vector<std::vector<char>> map(h, std::vector<char>(w, 0));

  rep(i, 0, n) {
    i64 tr, tc;
    std::cin >> tr >> tc;
    tr--;
    tc--;
    map[tr][tc] = 1;
  }

  std::vector<std::vector<int>> right_sum(h, std::vector<int>(w, 0));
  std::vector<std::vector<int>> left_sum(h, std::vector<int>(w, 0));

  std::vector<std::vector<int>> width_sum(h, std::vector<int>(w, 0));

  rep(i, 0, h) {
    if (map[i][w - 1] != 1) right_sum[i][w - 1] = 1;

    for (i64 j = w - 2; j >= 0; j--) {
      if (map[i][j] != 1)
        right_sum[i][j] = right_sum[i][j + 1] + 1;
      else
        right_sum[i][j] = 0;
    }
  }

  rep(i, 0, h) {
    if (map[i][0] != 1) left_sum[i][0] = 1;

    for (i64 j = 1; j < w; j++) {
      if (map[i][j] != 1)
        left_sum[i][j] = left_sum[i][j - 1] + 1;
      else
        left_sum[i][j] = 0;
    }
  }

  rep(i, 0, w) {
    width_sum[0][i] = left_sum[0][i] + right_sum[0][i];
    for (i64 j = 1; j < h; j++)
      width_sum[j][i] = width_sum[j - 1][i] + left_sum[j][i] + right_sum[j][i];
  }

  std::vector<std::vector<int>> down_sum(h, std::vector<int>(w, 0));
  std::vector<std::vector<int>> up_sum(h, std::vector<int>(w, 0));

  std::vector<std::vector<int>> height_sum(h, std::vector<int>(w, 0));

  rep(i, 0, w) {
    if (map[h - 1][i] != 1) down_sum[h - 1][i] = 1;

    for (i64 j = h - 2; j >= 0; j--) {
      if (map[j][i] != 1)
        down_sum[j][i] = down_sum[j + 1][i] + 1;
      else
        down_sum[j][i] = 0;
    }
  }

  rep(i, 0, w) {
    if (map[0][i] != 1) up_sum[0][i] = 1;

    for (i64 j = 1; j < h; j++) {
      if (map[j][i] != 1)
        up_sum[j][i] = up_sum[j - 1][i] + 1;
      else
        up_sum[j][i] = 0;
    }
  }

  rep(i, 0, h) {
    height_sum[i][0] = up_sum[i][0] + down_sum[i][0];
    for (i64 j = 1; j < w; j++)
      height_sum[i][j] = height_sum[i][j - 1] + up_sum[i][j] + down_sum[i][j];
  }

  std::vector<std::vector<int>> down_ok_sum(h, std::vector<int>(w, 0));

  rep(i, 0, w) {
    if (right_sum[h - 1][i] >= c) down_ok_sum[h - 1][i] = 1;

    for (i64 j = h - 2; j >= 0; j--) {
      if (right_sum[j][i] >= c)
        down_ok_sum[j][i] = down_ok_sum[j + 1][i] + 1;
      else
        down_ok_sum[j][i] = 0;
    }
  }

  i64 ans = 0;

  rep(i, 0, h) {
    rep(j, 0, w) {
      if (down_ok_sum[i][j] >= r) {
        i64 val = 0;
        val += width_sum[i + r - 1][j];
        if (i != 0) val -= width_sum[i - 1][j];

        val -= r;

        val += height_sum[i][j + c - 1];
        if (j != 0) val -= height_sum[i][j - 1];

        val -= c;

        val -= r * c;
        val -= r * c;

        chmax(ans, val);
        debug(i, j, val);
      }
    }
  }

  std::cout << ans << "\n";

  return 0;
}

