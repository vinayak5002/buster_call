#include<bits/stdc++.h>
using namespace std;
#define eps (1e-10)
#define equals(a,b) (fabs((a)-(b))<eps)
const int N=105;
class point{//点 
    public:
        double x,y;
        point(double a=0,double b=0){x=a,y=b;}
        point operator + (point p){
            return point(x+p.x,y+p.y);
        }
        point operator - (point p){
            return point(x-p.x,y-p.y);
        }       
        point operator * (double p){
            return point(x*p,y*p);
        }
        point operator / (double p){
            return point(x/p,y/p);
        }
        double abs(){//向量模
            return sqrt(norm());
        }
        double norm(){//向量长
            return x*x+y*y;
        }
        bool operator < (const point &p)const{//注意访问顺序
            return (x!=p.x?x<p.x:y<p.y);
        }
        bool operator == (const point &p)const{
            return fabs(x-p.x)<eps&&fabs(y-p.y)<eps;
        }
};
typedef point Vector;//向量 
typedef vector<point> Polygon;//多边形 
struct Segment{//线段 
    point p1,p2;
};
typedef Segment Line;//直线 

double dot(Vector a,Vector b){//点积
    return a.x*b.x+a.y*b.y;
}
double cross(Vector a,Vector b){//叉积
    return a.x*b.y-a.y*b.x;
}
point project(Segment s,point p){//投影
    Vector base=s.p2-s.p1;
    double r=dot(p-s.p1,base)/base.norm();
    return s.p1+base*r;
}
point reflect(Segment s,point p){//映像
    return p+(project(s,p)-p)*2.0;
}
static const int COUNTER_CLOCKWISE=1;
static const int CLOCKWISE=-1;
static const int ONLINE_BACK=2;
static const int ONLINE_FRONT=-2;
static const int ON_SEGMENT=0;
int ccw(point p0,point p1,point p2){//旋转方向
    Vector a=p1-p0;
    Vector b=p2-p0;
    if(cross(a,b)>eps) return COUNTER_CLOCKWISE;
    if(cross(a,b)<-eps) return CLOCKWISE;
    if(dot(a,b)<-eps) return ONLINE_BACK;
    if(a.norm()<b.norm()) return ONLINE_FRONT;
    return ON_SEGMENT;
}
bool intersect(point p1,point p2,point p3,point p4){//判线段相交
    return (ccw(p1,p2,p3)*ccw(p1,p2,p4)<=0&&ccw(p3,p4,p1)*ccw(p3,p4,p2)<=0);
}
bool intersect(Segment s1,Segment s2){//判线段相交
    return intersect(s1.p1,s1.p2,s2.p1,s2.p2);
}
bool isOrthogonal(Vector a,Vector b){//判线段正交
    return equals(dot(a,b),0.0);
}
bool isOrthogonal(point a1,point a2,point b1,point b2){//判线段正交
    return isOrthogonal(a1-a2,b1-b2);
}
bool isOrthogonal(Segment s1,Segment s2){//判线段正交
    return equals(dot(s1.p2-s1.p1,s2.p2-s2.p1),0.0);
}
bool isParallel(Vector a,Vector b){//判线段平行
    return equals(cross(a,b),0.0);
}
bool isParallel(point a1,point a2,point b1,point b2){//判线段平行
    return isOrthogonal(a1-a2,b1-b2);
}
bool isParallel(Segment s1,Segment s2){//判线段平行
    return equals(cross(s1.p2-s1.p1,s2.p2-s2.p1),0.0);
}
point getCrossPoint(Segment s1,Segment s2){//线段交点
    Vector base=s2.p2-s2.p1;
    double d1=abs(cross(base,s1.p1-s2.p1));
    double d2=abs(cross(base,s1.p2-s2.p1));
    double t=d1/(d1+d2);
    return s1.p1+(s1.p2-s1.p1)*t;
}
double getDistance(point a,point b){//点到点距离
    return (a-b).abs();
}
double getDistanceLp(Line s,point p){//点到直线距离
    return abs(cross(s.p2-s.p1,p-s.p1)/(s.p2-s.p1).abs());
}
double getDistanceSp(Segment s,point p){//点到线段距离
    if(dot(s.p2-s.p1,p-s.p1)<0.0) return getDistance(p,s.p1); 
    if(dot(s.p1-s.p2,p-s.p2)<0.0) return getDistance(p,s.p2);
    return getDistanceLp(s,p);
}
double getDistance(Segment s1,Segment s2){//线段到线段距离
    if(intersect(s1,s2)) return 0.0;
    return min(min(getDistanceSp(s1,s2.p1),getDistanceSp(s1,s2.p2)),min(getDistanceSp(s2,s1.p1),getDistanceSp(s2,s1.p2)));
}
double polygonArea(Polygon g,int n){//多边形面积
    double area=0.0;
    for(int i=1;i<n-1;i++) area+=cross(g[i]-g[0],g[i+1]-g[0]);
    return area/2.0;
}
int judgegConvex(Polygon g,int n){//判凸多边形，下标从0开始 
    int f1=1,f2=1;
    for(int i=0;i<n;i++){
        if(ccw(g[i],g[(i+1)%n],g[(i+2)%n])==-1) f1=0;
        if(ccw(g[i],g[(i+1)%n],g[(i+2)%n])==1) f2=0;
    }
    return f1|f2;
}
int contains(Polygon g,point p,int n){//判点是否在凸多边形上 
	bool res=false;
	for(int i=0;i<n;i++){
		point a=g[i]-p,b=g[(i+1)%n]-p;
		if(abs(cross(a,b))<eps&&dot(a,b)<eps) return 1;
		if(a.y>b.y) swap(a,b);
		if(a.y<eps&&eps<b.y&&cross(a,b)>eps) res=!res;
	}
	return (res?2:0);
}
Polygon andrewScan(Polygon g){//求凸包
	Polygon up,dw;
	if(g.size()<3) return g;
	sort(g.begin(),g.end());
	up.push_back(g[0]);
	up.push_back(g[1]);
	dw.push_back(g[g.size()-1]);
	dw.push_back(g[g.size()-2]);
	for(int i=2;i<(int)g.size();i++){//上凸包 
		for(int j=up.size();j>=2&&ccw(up[j-2],up[j-1],g[i])==COUNTER_CLOCKWISE;j--) up.pop_back();
		up.push_back(g[i]);
	}
	for(int i=(int)g.size()-3;i>=0;i--){//下凸包
		for(int j=dw.size();j>=2&&ccw(dw[j-2],dw[j-1],g[i])==COUNTER_CLOCKWISE;j--) dw.pop_back();
		dw.push_back(g[i]);
	}
	reverse(dw.begin(),dw.end());
	for(int i=up.size()-2;i>=1;i--) dw.push_back(up[i]);
	return dw;
} 
double compare(point p1,point p2,point p3){
    Vector a=p2-p1,b=p3-p1;
    return cross(a,b);
}
double getMax(Polygon g){
    double res=0.0;
    int n=g.size();
    for(int i=0,j=1;i<n;i++){
        while(compare(g[i],g[i+1],g[j])<compare(g[i],g[i+1],g[j+1])) j=(j+1)%n;
        res=max(res,max(getDistance(g[i],g[j]),getDistance(g[i+1],g[j+1])));
    }
    return res;
} 
int n;
Polygon g;
point p;
signed main(){
    // freopen(".in","r",stdin);
    // freopen(".out","w",stdout);
    std::ios::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    cin>>n;
    while(n--){
        cin>>p.x>>p.y;
        g.push_back(p);
    }
    printf("%.4lf",getMax(g));
	return 0;
}
