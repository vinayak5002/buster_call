#include<bits/stdc++.h>

using namespace std;
using ll=long long;

const double EPS=1e-7;

template<typename T>
int sign(T a){return (a<-EPS)?-1:(a>EPS)?1:0;}

template<typename T, typename U>
int cmp(T a, U b){
    /* a<b: -1, a==b: 0, a>b: 1 */
    return sign(a-b);}

template<typename T>
struct Point{
    T x,y;

    Point(): x(0), y(0){}
    Point(T x, T y): x(x), y(y){}

    // マイナス
    Point operator-() const { return Point(-x,-y);}

    // 和
    Point& operator+=(const Point &P){
        x+=P.x; y+=P.y;
        return *this;
    }

    Point operator+(const Point &P) const {return Point(*this)+=P;}

    // 差
    Point& operator-=(const Point &P){
        x-=P.x; y-=P.y;
        return *this;
    }

    Point operator-(const Point &P) const {return Point(*this)-=P;}

    // 積
    Point operator*(const Point &P) const {
        T a=x*P.x-y*P.y, b=x*P.y+y*P.x;
        return Point<T>(a,b);
    }

    //スカラー倍
    template<typename U>
    Point& operator*=(const U &a){
        x*=a; y*=a;
        return *this;
    }

    template<typename U>
    Point operator*(const U &a) const {return Point(*this)*=a;}

    template<typename U>
    Point& operator/=(const U &a){
        x/=a; y/=a;
        return *this;
    }

    template<typename U>
    Point operator/(const U &a) const {return Point(*this)/=a;}

    // ノルム
    T norm_2() const {return x*x+y*y;}
    double norm() const {return sqrt(x*x+y*y);}

    // クロス積
    T cross(const Point &P) const {return x*P.y-y*P.x;}
    T det(const Point &P) const {return x*P.y-y*P.x;}

    // ドット積
    T dot(const Point &P) const {return x*P.x+y*P.y;}

    // 角度
    double arg() const {return atan2(y,x);}

    // 比較
    bool operator<(const Point &P) const {
        if (cmp(x,P.x)) return cmp(x,P.x)<0;
        return cmp(y,P.y)<0;
    }

    bool operator>(const Point &P) const {return P<*this;}
    bool operator==(const Point &P) const {return (cmp(x,P.x)==0) && (cmp(y,P.y)==0);}

    bool operator<=(const Point &P) const {return (*this<P) || (this==P);}
    bool operator>=(const Point &P) const {return (*this>P) || (this==P);}
    bool operator!=(const Point &P) const {return !(*this==P);}


    // 単位化
    Point<double> unitalize() const {return *this/(this->norm());}

    // 入力
    friend istream &operator>>(istream &is, Point &P) {is >> P.x >> P.y; return (is);}

    // 出力
    friend ostream &operator<<(ostream &os, const Point &P) {return os << P.x << " " << P.y;}
};

template<typename T, typename U>
Point<U> operator*(const T &a, const Point<U> &P){return Point<U>(a*P.x, a*P.y);}

template<typename T>
struct Line{
    Point<T> begin, end;

    Line(const Point<T> &P, const Point<T> &Q): begin(P), end(Q){}

    Point<T> vectorize() const {return end-begin;}
    Point<T> counter_vectorize() const {return begin-end;}

    bool is_on(const Point<T> &P){
        return sign((begin-P).cross(end-P))==0;
    }
};

template<typename T, typename U>
struct Circle{
    Point<T> center;
    U radius;

    Circle<T,U> (const Point<T> &P, const U &r): center(P), radius(r){}

    bool is_on(const Point<T> &P){
        return cmp((P-center).norm(), radius)==0;
    }
};

// 2円の位置関係
template<typename T1, typename T2, typename U1, typename U2>
int Relationship(const Circle<T1,T2> &C, const Circle<U1,U2> &D){
    /*
    (共通接戦の本数)
    4: 離れている
    3: 外接
    2: 交わっている
    1: 内接
    0: 含んでいる
    */

    auto d=(C.center-D.center).norm();
    T2 r=C.radius; U2 s=D.radius;

    int a=cmp(d,r+s);
    if (a==1) return 4;
    if (a==0) return 3;

    int b=cmp(d,abs(r-s));
    if (b==1) return 2;
    if (b==0) return 1;
    return 0;
}

// 円と円の共有点
template<typename T, typename U>
vector<Point<T>> Cross_Point(const Circle<T,U> &C, const Circle<T,U> &D){
    Point<T> v=D.center-C.center, w;
    double d=v.norm();
    U r=C.radius, s=D.radius;

    v=v.unitalize(); w=v*Point<T>(0,1);
    double x=(d*d+r*r-s*s)/(2*d), y=sqrt(max(r*r-x*x,U(0)));

    return {C.center+x*v+y*w, C.center+x*v-y*w};
}

// ある点から円へ引く接線の接点
template<typename T, typename U>
vector<Point<T>> Tangent_Point(const Circle<T,U> &C, const Point<T> &P){
    double r=sqrt(max((P-C.center).norm_2()-C.radius*C.radius, 0.0));
    return Cross_Point(C, Circle(P, r));
}

// ある点から円へ引く接線の接点
template<typename T, typename U>
vector<Line<T>> Tangent(const Circle<T,U> &C, const Point<T> &P){
    auto X=Tangent_Point(C,P);
    return {Line(P,X[0]), Line(P,X[1])};
}


// 共通接線の円 C1 における接点
template<typename T, typename U>
vector<Point<T>> Common_Tangent_Point(const Circle<T,U> &C, const Circle<T,U> &D){
    int k=Relationship(C,D);
    vector<Point<T>> X;

    U r=C.radius, s=D.radius;
    auto v=D.center-C.center;
    double d=v.norm(), theta=v.arg();
    Point<double> R=Point(cos(theta), sin(theta));

    if (k>=1){
        double a=r*(r-s)/d, b=sqrt(max(r*r-a*a,0.0));
        X.emplace_back(C.center+Point(a,b)*R);
        if (k>1){X.emplace_back(C.center+Point(a,-b)*R);}
    }

    if (k>=3){
        double a=r*(r+s)/d, b=sqrt(max(r*r-a*a,0.0));
        X.emplace_back(C.center+Point(a,b)*R);
        if (k>3){X.emplace_back(C.center+Point(a,-b)*R);}
    }

    return X;
}

int main(){
    Point<double> p1,p2; double r1,r2;
    cin >> p1 >> r1 >> p2 >> r2;
    Circle<double,double> C1(p1,r1), C2(p2,r2);

    vector<Point<double>> X=Common_Tangent_Point(C1,C2);
    sort(X.begin(), X.end());
    
    cout << setprecision(15);

    for (auto P: X){
        if (sign(P.x)==0) P.x=0.0;
        if (sign(P.y)==0) P.y=0.0;

        cout << P << "\n";
    }
}

