#include<bits/stdc++.h>
using namespace std;

using ll = long long;

ll Add(ll a,ll b){return a + b;}
ll Sub(ll a,ll b){return a - b;}
ll Mul(ll a,ll b){return a * b;}
ll BitOR(ll a,ll b){return a | b;}
ll BitXOR(ll a,ll b){return a ^ b;}
ll BitAND(ll a,ll b){return a & b;}

using OP = pair<string,function<ll(ll,ll)>>;
vector<vector<OP>> ops;

string readToken(string str,string token,bool &success){
	success = false;
	if(str.substr(0,token.size()) == token){
		success = true;
		return str.substr(token.size());
	}
	return "";
}

bool isDigit(char c){
	return '0' <= c and c <= '9';
}
bool isPlusDigit(char c){
	return '1' <= c and c <= '9';
}

string readNumber(string str,ll &value,bool &success){
	ll res = 0;
	success = false;
	if(str.empty() or not isPlusDigit(str.front()))return "";
	res = str.front() - '0';
	str.erase(str.begin());
	while(str.size() and isDigit(str.front())){
		res = res * 10 + str.front() - '0';
		str.erase(str.begin());
	}
	success = true;
	value = res;
	return str;
}

string expression(string str,int level,ll &value,bool &success){
	if(level == ops.size()){
		do{
			bool s;
			string s1 = readToken(str,"(",s);
			if(not s)break;
			string s2 = expression(s1,0,value,s);
			if(not s)break;
			string s3 = readToken(s2,")",s);
			if(not s)break;
			success = true;
			return s3;
		}while(false);
		do{
			bool s;
			string s1 = readNumber(str,value,s);
			if(not s)break;
			success = true;
			return s1;
		}while(false);
		success = false;
		return "";
	}
	ll v1;
	bool s;
	str = expression(str,level+1,v1,s);
	if(not s){
		success = false;
		return "";
	}
	value = v1;
	while(true){
		bool flag = false;
		for(auto op:ops[level]){
			string next = str;
			next = readToken(next,op.first,s);
			if(not s)continue;
			ll v2;
			next = expression(next,level+1,v2,s);
			if(not s)continue;
			flag = true;
			value = op.second(value,v2);
			str = next;
			break;
		}
		if(not flag)break;
	}
	success = true;
	return str;
}

ll func(int n,string str){
	if(n & 1){
		ll res = 0;
		for(int i=0;i<str.size()+1;++i){
			for(auto c:"()*+-&^|0123456789"){
				string ns = str.substr(0,i);
				ns += c;
				ns += str.substr(i);
				bool s;
				ll value;
				string remind = expression(ns,0,value,s);
				if(remind=="" and s){
					res = max(res,value);
				}
			}
		}
		for(int i=0;i<str.size();++i){
			string ns = str.substr(0,i) + str.substr(i+1);
			bool s;
			ll value;
			string remind = expression(ns,0,value,s);
			if(remind=="" and s){
				res = max(res,value);
			}
		}
		return res;
	}else{
		ll v;
		bool s;
		expression(str,0,v,s);
		return v;
	}
}


int main(){
	ops.emplace_back(vector<OP>({{"|",BitOR}}));
	ops.emplace_back(vector<OP>({{"^",BitXOR}}));
	ops.emplace_back(vector<OP>({{"&",BitAND}}));
	ops.emplace_back(vector<OP>({{"+",Add},{"-",Sub}}));
	ops.emplace_back(vector<OP>({{"*",Mul}}));
	while(true){
		int n;
		cin >> n;
		string str;
		cin >> str;
		if(n == 0)break;
		cout << func(n,str) << endl;
	}
}

