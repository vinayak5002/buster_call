#include <bits/stdc++.h>
using namespace std;

// template {{{
using i32 = int;
using u32 = unsigned int;
using i64 = long long;
using u64 = unsigned long long;

#define  range(i, l, r) for (i64 i = (i64)(l); i < (i64)(r); (i) += 1)
#define rrange(i, l, r) for (i64 i = (i64)(r) - 1; i >= (i64)(l); (i) -= 1)

#define  whole(f, x, ...) ([&](decltype((x)) container) { return (f)(  begin(container),  end(container), ## __VA_ARGS__); })(x)
#define rwhole(f, x, ...) ([&](decltype((x)) container) { return (f)( rbegin(container), rend(container), ## __VA_ARGS__); })(x)

#define debug(x) cerr << "(" << __LINE__ << ")" << #x << ": " << (x) << endl

constexpr i32 inf   = 1001001001;
constexpr i64 infll = 1001001001001001001ll;

// constexpr i32 dx[] = {0, -1, 1, 0, -1, 1, -1, 1}; 
// constexpr i32 dy[] = {-1, 0, 0, 1, -1, -1, 1, 1};

struct IoSetup { IoSetup(i32 x = 15){ cin.tie(0); ios::sync_with_stdio(0); cout << fixed << setprecision(x); cerr << fixed << setprecision(x); } } iosetup;

template <typename T = i64> T input() { T x; cin >> x; return x; }

template <typename T> ostream &operator<<(ostream &os, vector<T> &v) { range(i, 0, v.size()) { os << v[i] << (i + 1 != (int)v.size() ? " " : ""); } return os; } 
template <typename T> istream &operator>>(istream &is, vector<T> &v) { for (T &in : v) is >> in; return is; }

template <typename T1, typename T2> ostream &operator<<(ostream &os, pair<T1, T2> p) { os << "(" << p.first << ", " << p.second << ")"; return os; }
template <typename T1, typename T2> istream &operator>>(istream &is, pair<T1, T2> &p) { is >> p.first >> p.second; return is; }

template <typename T> vector<T> make_vector(size_t a, T b) { return vector<T>(a, b); }
template <typename... Ts> auto make_vector(size_t a, Ts... ts) { return vector<decltype(make_vector(ts...))>(a, make_vector(ts...)); }

template <typename T1, typename T2> inline bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
template <typename T1, typename T2> inline bool chmin(T1 &a, T2 b) { return a > b && (a = b, true); }
// }}}

// base
namespace geometry {
  using namespace std;
  using real_number = long double;

  const real_number PI = acosl(-1);

  inline static real_number &eps() {
    static real_number EPS = 1e-10;
    return EPS;
  }

  static void set_eps(real_number EPS) {
    eps() = EPS;
  }

  inline int sign(real_number r) {
    set_eps(1e-10);
    if (r < -eps()) return -1;
    if (r > +eps()) return +1;
    return 0;
  }

  inline bool equals(real_number r1, real_number r2) {
    return sign(r1 - r2) == 0;
  }
}

// point
namespace geometry {
  using point = complex< real_number >;
  using points = vector< point >;

  istream &operator>>(istream &is, point &p) {
    real_number x, y;
    is >> x >> y;
    p = point(x, y);
    return is;
  }

  ostream &operator<<(ostream &os, const point &p) {
    return os << p.real() << " " << p.imag();
  }

  point operator*(const point &p, const real_number &k) {
    return point(p.real() * k, p.imag() * k);
  }

  point rotate(const real_number &theta, const point &p) {
    return point(cos(theta) * p.real() + sin(-theta) * p.imag(),
                 sin(theta) * p.real() + cos(-theta) * p.imag());
  }

  bool equals(const point &a, const point &b) {
    return equals(a.real(), b.real()) and equals(a.imag(), b.imag());
  }
}

using geometry::operator>>;
using geometry::operator<<;

// line 
namespace geometry {
  struct line {
    point a, b;

    line() = default;
    line(point a, point b) : a(a), b(b) {}
  };

  using lines = vector< line >;
}

// segment
namespace geometry {
  struct segment : line {
    segment() = default;
    using line::line;
  };

  using segments = vector< segment >;
}

// product
namespace geometry {
  real_number cross(const point &a, const point &b) {
    return a.real() * b.imag() - a.imag() * b.real();
  }

  real_number dot(const point &a, const point &b) {
    return a.real() * b.real() + a.imag() * b.imag();
  }
}

// cross point
namespace geometry {
  point cross_point_ll(const line &l1, const line &l2) {
    real_number a = cross(l1.b - l1.a, l2.b - l2.a);
    real_number b = cross(l1.b - l1.a, l1.b - l2.a);
    if (equals(a, 0) && equals(b, 0)) return l2.a;
    return l2.a + (l2.b - l2.a) * b / a;
  }
}

// projection
namespace geometry {
  point projection(const line &l, const point &p) {
    real_number t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);
    return l.a + (l.a - l.b) * t;
  }
}

// ccw
namespace geometry {
  constexpr int COUNTER_CLOCKWISE = +1;
  constexpr int CLOCKWISE         = -1;
  constexpr int ONLINE_BACK       = +2; // c-a-b
  constexpr int ONLINE_FRONT      = -2; // a-b-c
  constexpr int ON_SEGMENT        =  0; // a-c-b
  int ccw(const point &a, point b, point c) {
    b = b - a, c = c - a;
    if (sign(cross(b, c)) == +1) return COUNTER_CLOCKWISE;
    if (sign(cross(b, c)) == -1) return CLOCKWISE;
    if (sign(dot(b, c)) == -1) return ONLINE_BACK;
    if (norm(b) < norm(c)) return ONLINE_FRONT;
    return ON_SEGMENT;
  }
}

namespace geometry {
  real_number distance_sp(const segment &s, const point &p) {
    point pr = projection(s, p);
    if (ccw(s.a, s.b, pr) == 0) return abs(pr - p);
    return min(abs(s.a - p), abs(s.b - p));
  }
}

namespace geometry {
  bool compare_x(const point &a, const point &b) {
    return !equals(a.real(), b.real()) ? a.real() < b.real() : a.imag() < b.imag();
  }

  bool compare_y(const point &a, const point &b) {
    return !equals(a.imag(), b.imag()) ? a.imag() < b.imag() : a.real() < b.real();
  }
}
using namespace geometry;

pair<bool, point> cross_point_ls(const line &l, const segment &s) {
  point p = cross_point_ll(l, s);
  return {sign(distance_sp(s, p)) == 0, p};
}

void solve() {
  int h = input(), w = input();
  vector< string > ss(h + 2, string(w, '.'));
  range(i, 1, h + 1) {
    string s = '.' + input<string>() + '.';
    ss[i] = s;
  }

  h += 2;
  w += 2;

  constexpr int cdx[4] = {0, 1, 0, -1};
  constexpr int cdy[4] = {-1, 0, 1, 0};

  const points ds({point(-0.5, 0.5), point(0.5, 0.5), point(0.5, -0.5), point(-0.5, -0.5)});
  const points gd({point(0, 1), point(1, 0), point(0, -1), point(-1, 0)});
  
  // {{{
  // auto make_segments = [&](int cy, int cx) {
  //   segments segs;
  //   
  //   point p(cx, (h - cy));
  //   segs.emplace_back(p - point(0, 1), p);
  //   int x = cx, y = cy;
  //   int k = 0;

  //   while (sign(abs(segs.front().a - segs.back().b)) != 0) {
  //     int ny = y + cdy[k], nx = x + cdx[k];
  //     debug(ss[ny][nx]);
  //     if (ss[ny][nx] == '#') {
  //       p += gd[k];
  //       segs.back().b = p;
  //     } else {
  //       k = (k == 3 ? 0 : k + 1);
  //       segs.emplace_back(p, p + gd[k]);
  //       p += gd[k];
  //     }
  //     y += cdy[k];
  //     x += cdx[k];

  //     debug(p);
  //     debug(segs.back().a);
  //     debug(segs.back().b);
  //     cerr << endl;
  //     this_thread::sleep_for(chrono::milliseconds(1000));
  //   }

  //   for (auto &seg: segs) {
  //     cerr << "(" << seg.a << ", " << seg.b << ")" << endl;
  //   }
  //   return segs;
  // };
  // }}}

  segments segs;
  range(cy, 1, h - 1) range(cx, 1, w - 1) {
    if (ss[cy][cx] != '#') continue;
    point p(cx + 0.5, h - cy - 0.5);
    range(k, 0, 4) {
      int ny = cy + cdy[k];
      int nx = cx + cdx[k];
      if (ss[ny][nx] == '#') continue;
      segs.emplace_back(p + ds[k], p + ds[(k+1) % 4]);
    }
  }
  // {{{
  // rrange(cy, 0, h) range(cx, 0, w) {
  //   if (not segs.empty()) break;
  //   if (ss[cy][cx] != '#') continue;

  //   segs = make_segments(cy, cx);
  // }
  // }}}

  points pts;
  range(cy, 1, h - 1) range(cx, 1, w - 1) {
    if (ss[cy][cx] != '#') continue;

    point cnt(cx + 0.5, (h - cy) - 0.5);
    range(k, 0, 4) {
      int ny = cy + cdy[k];
      int nx = cx + cdx[k];
      if (ss[ny][nx] == '#') continue;

      point p = cnt + gd[k] * 0.5;
      if (equals(p.real(), 1) or equals(p.imag(), 1)) continue;
      pts.emplace_back(p);
    }
  }

  int ans = 1;
  for (auto &b: pts) {
    points cpts;
    line l(point(1, 1), b);
    for (auto &seg: segs) {
      auto [is_cross, p] = cross_point_ls(l, seg);
      if (not is_cross) continue;
      cpts.emplace_back(p);
    }

    whole(sort, cpts, compare_x);
    range(i, 1, cpts.size()) if (equals(cpts[i - 1], cpts[i])) cpts[i - 1] = point(inf, inf);
    whole(sort, cpts, compare_y);
    range(i, 1, cpts.size()) if (equals(cpts[i - 1], cpts[i])) cpts[i - 1] = point(inf, inf);
    whole(sort, cpts, compare_x);
    while (not cpts.empty() and equals(cpts.back(), point(inf, inf))) cpts.pop_back();
    chmax(ans, (int)cpts.size() / 2 + 1);
  }

  cout << ans << endl;
}

signed main() {
  solve();
}

