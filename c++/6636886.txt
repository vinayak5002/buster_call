#include<bits/stdc++.h>

using namespace std;

using ll = long long;
using ld = long double;

#define rep(i, a, b) for(ll i = (ll)a; i < (ll)b; i++)
#define irep(i, v) for(auto i = (v).begin(); i != (v).end(); i++)
#define ALL(v) (v).begin(), (v).end()
#define SZ(v) (ll)(v).size()

const ll INF = 1e18;
const ld EPS = 1e-10;
const ll MOD = 1e9 + 7;
const ld PI = M_PI;

vector<ll> dx = {0, 1, 0, -1};
vector<ll> dy = {1, 0, -1, 0};
string dir = "rdlu";

const ll LIM = 45; // 深さの制限

ll mdis[16][16];

struct puzzle{
  ll f[16];
  ll space, md, cost;

  bool operator < (const puzzle &p) const{
    for(ll i = 0; i < 16; i++){
      if(f[i] == p.f[i]) continue;
      return f[i] < p.f[i];
    }
    return false;
  }
};

struct state{
  puzzle pz;
  ll est;
  bool operator < (const state &s) const{
    return est > s.est;
  }
};

ll getallmd(puzzle &p){
  ll res = 0;
  for(ll i = 0; i < 16; i++){
    if(p.f[i] == 16) continue; // space
    res += mdis[i][p.f[i] - 1];
  }
  return res;
}

ll aster(puzzle &p){
  priority_queue<state> que;
  p.md = getallmd(p);
  p.cost = 0;
  map<puzzle, bool> V;
  puzzle u, v;

  state initial;
  initial.pz = p;
  initial.est = p.md; //getallmd(p);
  que.push(initial);

  while(!que.empty()){
    state st = que.top();
    que.pop();
    u = st.pz;

    if(u.md == 0) return u.cost;
    V[u] = 1;

    ll sx = u.space / 4;
    ll sy = u.space % 4;

    for(ll k = 0; k < 4; k++){
      ll tx = sx + dx[k];
      ll ty = sy + dy[k];
      if(tx < 0 || ty < 0 || tx >= 4 || ty >= 4) continue;
      v = u;

      ll spos = sx * 4 + sy;
      ll tpos = tx * 4 + ty;

      v.md -= mdis[tpos][v.f[tpos] - 1];
      v.md += mdis[spos][v.f[tpos] - 1];

      swap(v.f[spos], v.f[tpos]);
      v.space = tpos;
      if(!V[v]){
        v.cost++;
        state news;
        news.pz = v;
        news.est = v.cost + v.md;
        que.push(news);
      }
    }
  }
  return -1;
}

void calcmdis(){
  for(ll i = 0; i < 16; i++){
    for(ll j = 0; j < 16; j++){
      mdis[i][j] = abs(i / 4 - j / 4) + abs(i % 4 - j % 4);
    }
  }
}

int main(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  srand((unsigned)time(NULL));
  cout << fixed << setprecision(20);

  calcmdis();

  puzzle init;
  for(ll i = 0; i < 16; i++){
    cin >> init.f[i];
    if(init.f[i] == 0){
      init.f[i] = 16;
      init.space = i;
    }
  }

  cout << aster(init) << endl;

  return 0;
}

