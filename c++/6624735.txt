#define _USE_MATH_DEFINES
#include<bits/stdc++.h>

using namespace std;
#define LP(I,S,G) for (long long int I = (S); I < (G); I++)
#define IN(X) 	for (int in = 0; in < X.size(); in++)cin >> X[in]
#define OUT(X) 	for (int in = 0; in < X.size(); in++)cout << X[in]<<" "
#define SORT(X) sort((X).begin(), (X).end())
#define CSORT(X,Y) sort(X.begin(), X.end(),Y)
#define COPY(X,Y) copy(X.begin(), X.end(), Y.begin())
#define ALL(X,Y) for (auto X = (Y).begin(); X != (Y).end(); X++)
#define FULL(a)  (a).begin(),(a).end()
#define BFS(Q,S) for(Q.push(S);Q.size()!=0;Q.pop())
typedef long long int ll;
typedef unsigned long long int ull;
long long int M = pow(10, 9) + 7;


int dx[] = { 0,-1,0,1 }, dy[] = { -1,0,1,0 };

ll MAX(ll A, ll B) { return ((A) > (B) ? (A) : (B)); }
ll MIN(ll A, ll B) { return ((A) < (B) ? (A) : (B)); }
long long int xor128() {
	static long long int x = 123456789, y = 362436069, z = 521288629, w = 88675123;
	long long int t = (x ^ (x << 11));
	x = y; y = z; z = w;
	return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
}

struct HashPair {
	//注意 constがいる
	template<class T1, class T2>
	size_t operator()(const pair<T1, T2> &p) const {
		//first分をハッシュ化する
		auto hash1 = hash<T1>{}(p.first);
		//second分をハッシュ化する
		auto hash2 = hash<T2>{}(p.second);
		//重複しないようにハッシュ処理
		size_t seed = 0;
		seed ^= hash1 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		seed ^= hash2 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		return seed;
	}
};
template<class I1, class I2>
istream& operator>>(istream& s, pair<I1, I2>& in) {
	s >> in.first >> in.second;
	return s;
}

class calculator {
	ll x;
	bool fail;
	ll cal_add_sub(string& s, ll& now) {
		ll ret = cal_mult_div(s, now);
		while (1) {
			if (s[now] == '+') {
				now++;
				ret += cal_mult_div(s, now);
			}
			else if (s[now] == '-') {
				now++;
				ret -= cal_mult_div(s, now);
			}
			else return ret;
		}
	}
	ll cal_mult_div(string& s, ll& now) {
		ll ret = cal_child(s, now);
		while (1) {
			if (s[now] == '*') {
				now++;
				ret *= cal_child(s, now);
			}
			else if (s[now] == '/') {
				now++;
				ret /= cal_child(s, now);
			}
			else return ret;
		}
	}

	ll cal_child(string& s, ll& now) {
		if (s[now] == '(') {
			now++;
			ll ret = cal_add_sub(s, now);
			now++;
			return ret;
		}
		return get_number(s, now);
	}
	ll get_number(string& s, ll& now) {
		ll ret = 0;
		ll k = 0;
		bool past = fail;
		while ((s[now] - '0' >= 0 && s[now] - '0' <= 9)||(s[now]=='X')) {
			k++;
			ret *= 10;
			if (s[now] == 'X') {
				if (ret == 0 && x == 0)fail = 1;
				ret += x;
			}
			else ret += s[now] - '0';
			now++;
			if (now == s.size()) {
				if (k == 1)fail = past;
				return ret;
			}
		}
		if (k == 1)fail = past;
		return ret;
	}
public:
	ll solve(string& s) {
		ll now = 0;
		string l,r;
		bool f = 0;
		LP(i, 0, s.size()) {
			if (s[i] == '=')f = 1;
			else if (!f)l.push_back(s[i]);
			else if (f)r.push_back(s[i]);
		}
		LP(i, 0, 10) {
			x = i;
			ll lid = 0, rid = 0;
			fail = 0;
			if (cal_add_sub(l, lid) == cal_add_sub(r, rid)&&(!fail))return x;
		}
		return -1;
	}
};

int main() {
	calculator c;
	string s;

	while (cin >> s) {
		
		ll x = c.solve(s);
		if (x == -1)cout << "NA\n";
		else cout << x<<"\n";
	}
	return 0;
}
