#include <bits/stdc++.h>
using namespace std;

bool f[10005];
using P=pair<long,long>;

#include <bits/stdc++.h>
using namespace std;

int parents[10005], ra[10005], si[10005];
void make(int n){
    for(int i=0;i<n;i++){
        parents[i] = i;
        si[i] = 1;
    }
}
int root(int x){
    if(x!=parents[x]){
        parents[x]=root(parents[x]);
    }
    return parents[x];
}
bool same(int x, int y){
    return root(x)==root(y);
}
int unite(int x, int y){
    x=root(x); y=root(y);
    if(ra[x]>ra[y]) {
        parents[y]=x;
        si[x]+=si[y];
        return si[x];
    } else if(ra[x]==ra[y]) {
        parents[y]=x;
        ra[x]++;
        si[x]+=si[y];
        return si[x];
    } else {
        parents[x]=y;
        si[y]+=si[x];
        return si[y];
    }
}

int main() {
    int n,m;
    long x,y,w;
    long sum=0;
    cin>>n>>m;
    make(n);
    priority_queue<P,vector<P>,greater<P>> pq;
    for(int i=0;i<m;i++){
        cin>>x>>y>>w;
        pq.emplace(w,x*100000+y);
    }
    while(!pq.empty()){
        P p=pq.top(); pq.pop();
        w=p.first; long xy=p.second;
        x=xy/100000; y=xy%100000;
        if(same(x,y)) continue;
        else {
            sum+=w;
            if(unite(x,y)==n)break;
        }
    }
    cout<<sum<<endl;
}
