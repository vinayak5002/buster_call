from collections import deque

#隣接リスト形式で入力を行う関数
def input_Adjacency_list():
    N = int(input()) # the number of nodes
    G = [None for i in range(N)] # adjacency list
    for i in range(N):
        u, k, *vs = map(int, input().split())
        #print("u",u,"k",k,"vs",vs)
        G[u-1] = [e-1 for e in vs] 
    return G, N

def bfs(s):
    que = deque([s])
    distance[s] = 0
    while que:
        u = que.popleft()
        d = distance[u]
        for v in G[u]:
            if distance[v] == -1:
                distance[v] = d + 1
                que.append(v)

#main
G, N = input_Adjacency_list()

discovered = [-1]*N # discovered time by DFS
finished = [-1]*N # finished time by DFS
distance = [-1]*N # shortest distance by BFS
bfs(0)

for i in range(N):
    print(i+1, distance[i])
