from typing import Optional
import sys
sys.setrecursionlimit(10 ** 6)


class TreeNode:
    def __init__(self, key=0, left=None, right=None):
        self.key = key
        self.left = left
        self.right = right


class BinarySearchTree:
    def __init__(self):
        self.root = None

    def insert(self, node: Optional[TreeNode]):
        if self.root is None:
            self.root = node
            return

        y = None
        x = self.root
        while x is not None:
            if node.key == x.key:
                return
            y = x
            if node.key < x.key:
                x = x.left
            else:
                x = x.right

        if node.key < y.key:
            y.left = node
        else:
            y.right = node

    def print_traversal(self, mode):
        if mode == 0:
            self.print_preorder(self.root)
        if mode == 1:
            self.print_inorder(self.root)

    def print_preorder(self, node: Optional[TreeNode]):
        print(' ' + str(node.key), end='')
        if node.left is not None:
            self.print_preorder(node.left)
        if node.right is not None:
            self.print_preorder(node.right)

    def print_inorder(self, node: Optional[TreeNode]):
        if node.left is not None:
            self.print_inorder(node.left)
        print(' ' + str(node.key), end='')
        if node.right is not None:
            self.print_inorder(node.right)


m = int(input())
bst = BinarySearchTree()
for _ in range(m):
    operation = input().split()
    if operation[0] == 'print':
        bst.print_traversal(1)
        print()
        bst.print_traversal(0)
    if operation[0] == 'insert':
        key = int(operation[1])
        bst.insert(TreeNode(key))
