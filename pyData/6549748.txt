from functools import lru_cache
import sys
sys.setrecursionlimit(10**7)

@lru_cache(maxsize=4096)
def ld(s, t):
    '''文字列のレーベンシュタイン距離を計算する'''

    # 一方が空文字列なら、他方の長さが求める距離
    if not s: return len(t)
    if not t: return len(s)

    # 一文字目が一致なら、二文字目以降の距離が求める距離
    if s[0] == t[0]: return ld(s[1:], t[1:])

    # 一文字目が不一致なら、追加／削除／置換のそれぞれを実施し、
    # 残りの文字列についてのコストを計算する

    # Sの先頭に追加
    l1 = ld(s, t[1:])

    # Sの先頭を削除
    l2 = ld(s[1:], t)

    # Sの先頭を置換
    l3 = ld(s[1:], t[1:])

    # 追加／削除／置換を実施した分コスト（距離）1の消費は確定
    # 残りの文字列についてのコストの最小値を足せば距離となる
    return 1 + min(l1, l2, l3)

s = input()
t = input()

print(ld(s, t))
