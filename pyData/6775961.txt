from collections import deque

def dfs(m, w, h):
  s = deque()   
  s.append([w, h])            
  c = 1                         
  while s:                      
    cur = s.pop()              
    D0 = [1, 0, -1, 0]             
    D1 = [0, -1, 0, 1]
    for d in range(4):          
        nc = [0,0]                    
        nc[0] = cur[0]+D0[d]           
        nc[1] = cur[1]+D1[d]
        if m[nc[0]][nc[1]] == 1:   
            m[nc[0]][nc[1]] = 0        
            s.append([nc[0],nc[1]])                               
  return m

def solve(w, h):
  m = [[0 for i in range(w+2)] for j in range(h+2)]
  for i in range(h):
    r = list(map(int,input().split()))
    for j in range(w):
      m[i+1][j+1] = r[j]
  ans = 0
  for x in range(h):
    for y in range(w):
      if m[x][y] > 0:
        ans += 1
        m = dfs(m, x, y)
  return ans

while True:
  w, h = map(int, input().split())
  if w == 0 and h == 0:
      break
  print(solve(w,h))
