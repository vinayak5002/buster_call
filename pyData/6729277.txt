def solve(V, E, std):
    if E == 0:
        return -1
    edge = [0] * V
    cost = [[float('inf') for _ in range(V)] for _ in range(V)]
    for s, t, d in std:
        edge[s] = (1 << t)
        cost[s][t] = d

    dp = [[float('inf') for _ in range(V)] for _ in range(1<<V)]
    dp[0][0] = 0
    for s in range(1<<V):
        for v in range(V):
            if ((s >> v) & 1) == 1 and (edge[v] & s) != 0:
                continue
            for u in range(V):
                if v == u:
                    continue
                dp[s|1<<v][v] = min(dp[s|1<<v][v], dp[s][u]+cost[u][v])
    ans = dp[(1<<V)-1][0]
    if ans == float('inf'):
        ans = -1
    return ans

if __name__ == '__main__':
    V, E = map(int, input().split())
    std = [tuple(map(int, input().split())) for _ in range(E)]
    ans = solve(V, E, std)
    print(ans)


