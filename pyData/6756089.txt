from collections import deque
import sys
sys.setrecursionlimit(10 ** 9 + 7)

ans = []
while 1:
  W, H = map(int, input().split())
  if W == H == 0:
    break
  w = []
  h = []
  for i in range(2 * H - 1):
    m = list(map(int, input().split()))
    if i % 2 == 0:
      w.append(m)
    else:
      h.append(m)
  root = [[-1 for i in range(W)] for j in range(H)]
  #searched = []
  next = []
  def dfs(i, j, next, r, w, h):
    if i == H - 1 and j == W - 1:
      return r[i][j]
    dist = r[i][j]
    #searched.append(r[i][j])
    if i > 0 and r[i - 1][j] == -1 and h[i - 1][j] != 1:
      next.append([i - 1, j])
      r[i - 1][j] = dist + 1
    if i < len(r) - 1 and r[i + 1][j] == -1 and h[i][j] != 1:
      next.append([i + 1, j])
      r[i + 1][j] = dist + 1
    if j > 0 and r[i][j - 1] == -1 and w[i][j - 1] != 1:
      next.append([i, j - 1])
      r[i][j - 1] = dist + 1
    if j < len(r[0]) - 1 and r[i][j + 1] == -1 and w[i][j] != 1:
      next.append([i, j + 1])
      r[i][j + 1] = dist + 1
    if len(next) == 0:
      return 0
    nextD = next.popleft()
    next_i = nextD[0]
    next_j = nextD[1]
    return dfs(next_i, next_j, next, r, w, h)

  root[0][0] = 1
  next = deque()
  cnt = dfs(0, 0, next, root, w, h)
  ans.append(cnt)

for i in ans:
  print(i)
