import sys
from heapq import heappush, heappop

# READ_FROM_FILE = True
READ_FROM_FILE = False


def calc_upper_bound(n, vw_list, max_w, weight, value, i):
    for j in range(i, n):
        v, w = vw_list[j]
        if weight + w > max_w:
            return -value, -value - (v / w) * (max_w - weight)
        weight += w
        value += v
    return -value, float(-value)


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    n, max_w = map(int, f.readline().split())
    vw_list = []
    for _ in range(n):
        v, w, m = map(int, f.readline().split())
        j = 1
        while True:
            if j <= m:
                vw_list.append((j * v, j * w))
                m -= j
                j <<= 1
            else:
                if m > 0:
                    vw_list.append((m * v, m * w))
                break

    n = len(vw_list)
    vw_list.sort(key=lambda x: x[1], reverse=True)
    vw_list.sort(key=lambda x: x[0] / x[1], reverse=True)

    u, c = calc_upper_bound(n, vw_list, max_w, 0, 0, 0)
    max_cost = u
    hq = [(c, u, 0, 0, 0)]
    while hq:
        cost, ub, weight, value, i = heappop(hq)
        if cost > max_cost:
            break
        if i < n:
            v, w = vw_list[i]
            if weight + w <= max_w:
                heappush(hq, (cost, ub, weight + w, value + v, i + 1))
            u, c = calc_upper_bound(n, vw_list, max_w, weight, value, i + 1)
            if c < max_cost:
                if u < max_cost:
                    max_cost = u
                heappush(hq, (c, u, weight, value, i + 1))

    print(-max_cost)

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

