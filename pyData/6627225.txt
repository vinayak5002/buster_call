class BinarySearchTree:
    def __init__(self):
        self.root = None
    def insert(self,value):
        new_node = Node(value)
        node = self.root
        parent = None
        while node is not None:
            parent = node
            if(value <= node.value):
                node = node.left
            else:
                node = node.right
        new_node.parent = parent

        if(parent is None):
            self.root = new_node
        elif(value <= parent.value):
            parent.left = new_node
        else:
            parent.right = new_node
                    
    def print_inorder(self,node = None):
        if(node is None): node = self.root
        if(node.left is not None): self.print_inorder(node.left)
        print(" "+str(node.value),end="")
        if(node.right is not None): self.print_inorder(node.right)
        if(node is self.root): print()
    def print_preorder(self,node = None):
        if(node is None): node = self.root
        print(" "+str(node.value),end="")
        if(node.left is not None): self.print_preorder(node.left)
        if(node.right is not None): self.print_preorder(node.right)
        if(node is self.root): print()

class Node:
    def __init__(self,value,parent=None,left=None,right=None):
        self.value = value
        self.parent = parent
        self.left = left
        self.right = right

m = int(input())
tree = BinarySearchTree()

for i in range(0,m):
    inp = input().split()
    command = inp[0] if(len(inp) > 0) else "default"
    key = int(inp[1]) if(len(inp) > 1) else 0
    if(command == "insert"):
        tree.insert(key)
    if(command == "print"):
        tree.print_inorder()
        tree.print_preorder()

