from collections import deque
def gcd2(m, n):
    while n:
        m, n = n, m % n
    return m 
 
class Dinic:
    def __init__(self, n):
        self.n = n
        self.links = [[] for _ in range(n)]
        self.depth = None
        self.progress = None
 
    def add_link(self, _from, to, cap):
        self.links[_from].append([cap, to, len(self.links[to])])
        self.links[to].append([0, _from, len(self.links[_from]) - 1])
 
    def bfs(self, s):
        depth = [-1] * self.n
        depth[s] = 0
        q = deque([s])
        while q:
            v = q.popleft()
            for cap, to, rev in self.links[v]:
                if cap > 0 and depth[to] < 0:
                    depth[to] = depth[v] + 1
                    q.append(to)
        self.depth = depth
 
    def dfs(self, v, t, flow):
        if v == t:
            return flow
        links_v = self.links[v]
        for i in range(self.progress[v], len(links_v)):
            self.progress[v] = i
            cap, to, rev = link = links_v[i]
            if cap == 0 or self.depth[v] >= self.depth[to]:
                continue
            d = self.dfs(to, t, min(flow, cap))
            if d == 0:
                continue
            link[0] -= d
            self.links[to][rev][0] += d
            return d
        return 0
 
    def max_flow(self, s, t):
        flow = 0
        while True:
            self.bfs(s)
            if self.depth[t] < 0:
                return flow
            self.progress = [0] * self.n
            current_flow = self.dfs(s, t, float('inf'))
            while current_flow > 0:
                flow += current_flow
                current_flow = self.dfs(s, t, float('inf'))
def solve(m,n,B,R):
    dinic = Dinic(m + n + 2)
    for i in range(1,m+1):
        dinic.add_link(0,i,1)
    for k in range(1,n+1):
        dinic.add_link(m + k,m + n + 1,1)
    for i in range(1,m+1):
        for k in range(1,n + 1):
            if gcd2(B[i-1],R[k-1]) != 1:
                dinic.add_link(i,m + k,1)
    return dinic.max_flow(0,m+n+1)


while True:
    m,n = map(int,input().split())
    if m == 0 and n == 0:
        break
    B = list(map(int,input().split()))
    R = list(map(int,input().split()))
    print(solve(m,n,B,R))

