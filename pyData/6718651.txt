import bisect
def primes(n):
    is_prime = [True] * (n + 1)
    is_prime[0] = False
    is_prime[1] = False
    for i in range(2, int(n**0.5) + 1):
        if not is_prime[i]:
            continue
        for j in range(i * 2, n + 1, i):
            is_prime[j] = False
    return [i for i in range(n + 1) if is_prime[i]]
Y = primes(8*(10 ** 5))
while True:
    n,p = map(int,input().split())
    if n == -1 and p == -1:
        break
    else:
        if n <= 1:
            C = 0
        else:
          ok = -1
          ng = len(Y)
          while abs(ng - ok)>1:
              mid = (ok + ng)//2
              if n <= Y[mid]:
                  ng = mid
              else:
                  ok = mid
          C = ok
        t = []
        #print(C)
        for x in range(C,C+100):
            for y in range(x,C+100):
                if Y[x] > n and Y[y] > n:
                    t.append(Y[x]+Y[y])
        t.sort()
        print(t[p-1])
