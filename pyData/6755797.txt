from collections import deque

def bfs(w,h):
    odd = []
    even = []
    for i in range(2 * h - 1):
        wall = list(map(int, input().split()))
        if i % 2 == 0:
            odd.append(wall)
        else:
            even.append(wall)
    checked = [[False] * w for _ in range(h)]
    checked[0][0] = True
    que = deque()
    que.append((1, 0, 0))
    while que:
        score, x, y = que.popleft()
        if (x, y) == (w - 1, h - 1):
            return score

        if x < w - 1 and odd[y][x] == 0 and not checked[y][x + 1]:
            checked[y][x + 1] = True
            que.append((score + 1, x + 1, y))

        if x > 0 and odd[y][x - 1] == 0 and not checked[y][x - 1]:
            checked[y][x - 1] = True
            que.append((score + 1, x - 1, y))

        if y < h - 1 and even[y][x] == 0 and not checked[y + 1][x]:
            checked[y + 1][x] = True
            que.append((score + 1, x, y + 1))

        if y > 0 and even[y - 1][x] == 0 and not checked[y - 1][x]:
            checked[y - 1][x] = True
            que.append((score + 1, x, y - 1))
    else:
        return 0


while 1:
    w, h = map(int, input().split())
    if w ==0 and h ==0:
        break
    print(bfs(w, h))
