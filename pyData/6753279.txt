import itertools
import sys
import math
import heapq
from collections import deque, Counter, defaultdict
from sys import stdin
import copy
import bisect
from decimal import Decimal, ROUND_HALF_UP
# from atcoder.dsu import DSU

MOD = 10 ** 9 + 7
int1 = lambda x: int(x) - 1
stinput = lambda: stdin.readline()[:-1]
ii = lambda: int(stinput())  # int input
mi = lambda: map(int, stdin.readline().split())  # map input (int)
li = lambda: list(mi())  # list input (int)
mi1 = lambda: map(int1, stdin.readline().split())  # map input (int)-1
li1 = lambda: list(mi1())  # list input (int)-1
mis = lambda: map(str, stdin.readline().split())  # map input (string)
lis = lambda: list(mis())  # list input (string)

while True:
    N, M = mi()
    if N == 0 and M == 0:
        break
    N = str(N)
    while len(N) < M:
        N = '0' + N
    N_li = list(N)
    N_li.sort()
    N_reverce = sorted(N_li,reverse=True)
    che_li = [int(N)]
    for i in range(21):
        N_li.sort()
        N_reverce = sorted(N_li,reverse=True)
        st1 = ''
        st2 = ''
        for j in range(M):
            st1 += N_li[j]
            st2 += N_reverce[j]
        tmp = int(st2) - int(st1)
        if len(str(tmp)) < M:
            tmp = '0'*(M - len(str(tmp))) + str(tmp)
        N_li = list(str(tmp))
        if int(tmp) in che_li:
            idx = che_li.index(int(tmp))
            print(idx, int(tmp), i+ 1 - idx)
            break   
        che_li.append(int(tmp))

