import sys

# READ_FROM_FILE = True
READ_FROM_FILE = False


class RangeSumQuery:
    def __init__(self, n, init_val):
        self._n = n
        self._bit = [init_val] * (self._n + 1)
        return

    """i: one-based"""
    def get_sum(self, i):
        s = 0
        while i > 0:
            s += self._bit[i]
            i -= i & -i
        return s

    """i: one-based"""
    def add(self, i, x):
        while i <= self._n:
            self._bit[i] += x
            i += i & -i
        return


class RangeAddSumQuery:
    def __init__(self, num_nodes, init_val=0):
        self._rsq0 = RangeSumQuery(num_nodes + 1, init_val)
        self._rsq1 = RangeSumQuery(num_nodes + 1, init_val)
        return

    """[s, t), one-based"""
    def add(self, s, t, x):
        self._rsq0.add(s, -x * s)
        self._rsq0.add(t, x * t)
        self._rsq1.add(s, x)
        self._rsq1.add(t, -x)
        return

    """[s, t), one-based"""
    def get_sum(self, s, t):
        sum_s = self._rsq0.get_sum(s) + self._rsq1.get_sum(s) * s
        sum_t = self._rsq0.get_sum(t) + self._rsq1.get_sum(t) * t
        return sum_t - sum_s


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    n, q = map(int, f.readline().split())
    ras_q = RangeAddSumQuery(n, 0)
    for _ in range(q):
        query_list = list(map(int, f.readline().split()))
        s = query_list[1]
        t = query_list[2] + 1
        if query_list[0] == 0:
            x = query_list[3]
            ras_q.add(s, t, x)
        else:
            print(ras_q.get_sum(s, t))

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

