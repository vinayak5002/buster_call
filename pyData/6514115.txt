S = ' ' + input()
T = ' ' + S[::-1][:-1]

#i文字目より右(i文字目は含まないことに注意)で最左のindexを返す
#渡す文字列の最初は空白にしておくことにも注意
def calc_nxt(s):
    N = len(s)
    a = ord('a')
    nxt = [[N] * 26 for _ in range(N)]
    for i in range(N-1, 0, -1):
        for j in range(26):
            if i+1 < N:
                nxt[i-1][j] = nxt[i][j]
        nxt[i-1][ord(s[i])-a] = i
    return nxt

nxtS = calc_nxt(S)
nxtT = calc_nxt(T)

MOD = 10**9+7
N = len(S)
kinds_cnt = [0] * N
seen = set()
for i in range(1, N):
    kinds_cnt[i] = kinds_cnt[i-1]
    if S[i] not in seen:
        seen.add(S[i])
        kinds_cnt[i] += 1

dp = [[0] * N for _ in range(N)]
dp[0][0] = 1
for i in range(N):
    for j in range(N):
        if dp[i][j] == 0:continue
        for c in range(26):
            ni = nxtS[i][c]
            nj = nxtT[j][c]
            #ni + nj > Nならそのような回文部分文字列は作れない(niとnjが同じ場所を指している場合もNG)。
            if ni + nj >= N:continue
            dp[ni][nj] += dp[i][j]
            dp[ni][nj] %= MOD

ans = 0
#1文字は確実に回文になるが、1文字の回文は両端が空白の回文である場合の種類数によって求められる。
#i + jがN未満(Nは空白文字を加味した値なので未満)ならそのような回文部分文字列は存在する。
for i in range(N):
    for j in range(N):
        #i+j < Nが両端を削るための条件
        if i + j < N:
            num = 1
            for k in range(26):
                #i ~ jの間に何種類の文字種があるかをnumに加算（もとの1はなにもとらない場合、偶数長の回文）
                #nxtS[i][k]はiより後ろで文字種がchar(k)であるindexなのでその和がN未満ならi+1~j-1の間にその文字種が存在する
                #nxtS[i][k] がjのもとのindex(N-j)以上なら同じ場所もしくはそれ以降の場所、つまり(i, j)の区間の外側を指すのでその文字種は存在しない判定ができる
                if nxtS[i][k] + j < N:
                    num += 1
            #print(i, j, dp[i][j], calc_kinds(i, j))
            ans += dp[i][j] * num % MOD
            ans %= MOD
#空白のみの回文を引く
ans -= 1
ans %= MOD
print(ans)

            


