N = int(input())
S = set(map(int, input().split()))
Q = int(input())
T = list(map(int, input().split()))

# def meguru_bisect(K):#リストの番号でこいつをやらなきゃいけない
#     ng = -1
#     ok = Q
#     while abs(ok - ng)>1:
#         mid = (ng + ok)//2
#         if K <= T[mid]:
#             ok = mid
#         else:
#             ng = mid
#     return ok
c = 0

for i in S:
    ng = -1
    ok = Q
    while abs(ok - ng)>1:
        mid = (ng + ok)//2
        if i <= T[mid]:
            ok = mid
        else:
            ng = mid
    if T[ok] == i:
        c += 1

print(c)





#この問題では、入力の配列が整列された状態で与えられましたが、そうでない場合でも、前処理としてあらかじめ整列を行えば二分探索を適用することができます。このように、「整列すれば二分探索が使える」という考え方は様々な問題に応用することができます。ただし、データの大きさを考えると、ほとんどの場合、高等的なソートアルゴリズムが必要になります。
