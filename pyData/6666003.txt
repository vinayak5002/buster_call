import pprint

def kukan_dp(N,L):

	dp = [[0]* (N +1) for _ in range(N + 1)]

	for r in range(N+1):
		for l in range(r-1,-1,-1):
			if r - l == 1:
				dp[l][r] = 0
			if r - l == 2:
				if abs(L[l] - L[r-1]) <= 1:
					dp[l][r] = 2
				else:
					dp[l][r] = 0

			if dp[l+1][r-1] == r-l-2:
				if abs(L[l] - L[r-1]) <= 1:
					dp[l][r] = max(dp[l][r], r-l)
				else:
					dp[l][r] = max(dp[l][r], r-l-2)

			for mid in range(l+1,r-1):
				dp[l][r] = max(dp[l][r], dp[l][mid]+dp[mid][r])


	return dp[0][N]



while True:
	N = int(input())
	if N == 0:
		exit()
	L = list(map(int,input().split()))

	pprint.pprint(kukan_dp(N,L))

