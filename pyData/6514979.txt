class UnionFind:
    
    def __init__(self, n):
        self.number = n
        self.par = [-1] * n
        self.rank = [0] * n
        self.size = [1] * n
    
    def root(self, x):
        
        if self.par[x] == -1:
            return x
        else:
            self.par[x] = self.root(self.par[x])
            return self.par[x]
    
    def is_same(self, x, y):
        
        root_x = self.root(x)
        root_y = self.root(y)
        if root_x == root_y:
            return True
        else:
            return False
    
    def unite(self, x, y):
        
        root_x = self.root(x)
        root_y = self.root(y)
        if root_x == root_y:
            return
        else:
            
            if self.rank[root_x] < self.rank[root_y]:
                self.par[root_x] = root_y
                self.size[root_y] += self.size[root_x]
            else:
                self.par[root_y] = root_x
                self.size[root_x] += self.size[root_y]
                if self.rank[root_x] == self.rank[root_y]:
                    self.rank[root_x] += 1

n, q = map(int, input().split())
uf = UnionFind(n)

for i in range(q):
    
    com, x, y = map(int, input().split())
    
    if com == 0:
        uf.unite(x, y)
    else:
        print(1 if uf.is_same(x, y) else 0)
      
