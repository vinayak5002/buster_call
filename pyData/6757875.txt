class DisjointSet:
    def __init__(self, value):
        self.parent = self
        self.rank = 0
        self.value = value
    
def union_(x, y):
    link(find_set(x), find_set(y))

def link(x, y):
    if x.rank > y.rank:
        y.parent = x
    else:
        x.parent = y
        if x.rank == y.rank:
            y.rank += 1

def find_set(x):
    if x != x.parent:
        x.parent = find_set(x.parent)
    
    return x.parent

if __name__ == "__main__":
    n_nodes, n_edges = [int(e) for e in input().split()]
    
    nodes = []
    for i in range(n_nodes):
        nodes.append(DisjointSet(i))

    edges = []
    for _ in range(n_edges):
        src, dest, weight = [int(e) for e in input().split()]
        edges.append((src, dest, weight))
    edges = sorted(edges, key=lambda item: item[2])

    MST = []
    for src, dest, weight in edges:
        if find_set(nodes[src]) != find_set(nodes[dest]):
            union_(nodes[src], nodes[dest])
            MST.append((src, dest, weight))
    
    print(sum([item[2] for item in MST]))


