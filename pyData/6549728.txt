import heapq
k = int(input())
#N = input()
#N,K = map(int,input().split())
#P = list(map(int,input().split()))
rc = []
for _ in range(k):
    rc.append(list(map(int,input().split())))

q = []
q.append([])
heapq.heapify(q)
visited = [False]*8
all = []
while q:
    S = heapq.heappop(q)
    if len(S) == 8:
        all.append(S)
        continue
    for n in range(8):
        if n in S:
            continue
        heapq.heappush(q,S+[n])
ans = 0
for b in all:
    board = [[False]*8 for _ in range(8)]
    ok = True
    for i in range(k):
        r,c = rc[i]
        if b[r] != c:
            ok = False
            break
    if not ok:
        continue
    for n in range(8):
        board[n][b[n]] = True
    for x in range(8):
        count = 0
        for a in range(8-x):
            if board[x+a][a]:
                count += 1
        if count > 1:
            ok = False
            break
    if not ok:
        continue
    for y in range(8):
        count = 0
        for a in range(8-y):
            if board[a][y+a]:
                count += 1
        if count > 1:
            ok = False
            break
    if not ok:
        continue
    for x in range(8):
        count = 0
        for a in range(8-x):
            if board[7-x-a][a]:
                count += 1
        if count > 1:
            ok = False
            break
    if not ok:
        continue
    for y in range(8):
        count = 0
        for a in range(8-y):
            if board[a+y][7-a]:
                count += 1
        if count > 1:
            ok = False
            break
    if not ok:
        continue
    else:
        for x in range(8):
            for y in range(8):
                if board[x][y]:
                    print("Q",end="")
                else:
                    print(".",end="")
            print()
