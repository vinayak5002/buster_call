import sys

# READ_FROM_FILE = True
READ_FROM_FILE = False


class UnionFindTree:
    def __init__(self, num_elements):
        self._num_elements = num_elements
        self._parents = list(range(num_elements))
        self._rank = [0] * num_elements
        return

    def find(self, idx):
        parent = self._parents[idx]
        if parent == idx:
            return idx
        self._parents[idx] = self.find(parent)
        return self._parents[idx]

    def unite(self, idx0, idx1):
        root0 = self.find(idx0)
        root1 = self.find(idx1)

        if root0 == root1:
            return

        if self._rank[root0] < self._rank[root1]:
            root0, root1 = root1, root0
        if self._rank[root0] == self._rank[root1]:
            self._rank[root0] += 1

        self._parents[root1] = root0
        return

    def is_same(self, idx0, idx1):
        return self.find(idx0) == self.find(idx1)


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    n, q = list(map(int, f.readline().split()))
    uft = UnionFindTree(n)
    for _ in range(q):
        query_list = list(map(int, f.readline().split()))
        x = query_list[1]
        y = query_list[2]
        if query_list[0] == 0:
            uft.unite(x, y)
        else:
            if uft.is_same(x, y):
                print(1)
            else:
                print(0)

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

