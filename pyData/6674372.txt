class Card:
    def __init__(self, suit, value):
        self.suit = suit
        self.value = value
    
    def get_card(self):
        return ''.join((self.suit,str(self.value)))
    
    def __eq__(self, other):
        return self.suit == other.suit and self.value == other.value

def bubble_sort(C, N):
    for i in range(N):
        for j in range(N-1,i,-1):
            if C[j].value < C[j-1].value:
                x = C[j]
                C[j] = C[j-1]
                C[j-1] = x


def selection_sort(C, N):
    for i in range(N):
        minj = i
        for j in range(i,N):
            if C[j].value < C[minj].value: minj = j
        x = C[i]
        C[i] = C[minj]
        C[minj] = x

def is_stable(i, o):
    n = len(i)
    for x in range(n):
        for y in range(x+1,n):
            for a in range(n):
                for b in range(a+1,n):
                    if i[x].value == i[y].value and i[x] == o[b] and i[y] == o[a]:
                        return False
    return True

N = int(input())
cards = input().split()
C0 = [Card(card[0],int(card[1])) for card in cards]
C1 = [Card(card[0],int(card[1])) for card in cards]
C2 = [Card(card[0],int(card[1])) for card in cards]

bubble_sort(C1,N)
selection_sort(C2,N)

print(' '.join(c.get_card() for c in C1))
print("Stable" if is_stable(C0,C1) else "Not stable")
print(' '.join(c.get_card() for c in C2))
print("Stable" if is_stable(C0,C2) else "Not stable")
