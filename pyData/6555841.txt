import sys
from operator import itemgetter

def main(ioi):
    rxs = lambda: map(int, ioi.readline().split())
    N, W = rxs()
    vwm = [[*rxs()] for _ in range(N)]

    # dp[i][j     ] = max(dp[i-1][j-(k  )*w[i]]+k*v[i] for k in range(m[i]))
    # dp[i][j-w[i]] = max(dp[i-1][j-(k+1)*w[i]]+k*v[i] for k in range(m[i]))

    dp = [[]]
    ss = [[]]

    v, w, m = vwm[0]
    for j in range(W+1):
        dp[0].append(v * min((j // w), m))

    for i in range(1, N):
        ss.append([])
        dp.append([])
        v, w, m = vwm[i]
        for j in range(W+1):
            dp[i].append(max((dp[i-1][j-k*w]+k*v for k in range(m+1) if j >= k*w)))
            # if j < w:
            #     p, q = j, dp[i-1][j]
            # elif ss[i][j-w] == j-(m+1)*w:
            #     p, q = max(((j-k*w, dp[i-1][j-k*w]+k*v) for k in range(m+1) if j >= k*w), key=lambda x:(x[1], -x[0]))
            # else:
            #     p, q = ss[i][j-w], dp[i][j-w]+v
            #     if q <= dp[i-1][j]: p, q = j, dp[i-1][j]
                
            # ss[i].append(p)
            # dp[i].append(q)
            
    # from pprint import pprint
    # pprint(dp)
    # pprint(ss)
    return dp[-1][-1]

DBG = False
if not DBG: print(main(sys.stdin))
else:
    import io
    print(main(io.StringIO("""4 8
4 3 2
2 1 1
1 2 4
3 2 2
""")))

