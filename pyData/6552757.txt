N = int(input())
S = set(map(int, input().split()))
Q = int(input())
T = list(map(int, input().split()))

K=0

def is_ok(ang):
    if K <= T[ang]:
        return True
    else:
        return False

def meguru_bisect(K):#リストの番号でこいつをやらなきゃいけない
    ng = 0
    ok = Q-1
    while abs(ok - ng)>1:
        mid = (ng + ok)//2
        if is_ok(mid):
            ok = mid
        else:
            ng = mid
    return ok    

c = 0

for i in S:
    K = i
    if T[meguru_bisect(i)] == i:
        c += 1

print(c)

#この問題では、入力の配列が整列された状態で与えられましたが、そうでない場合でも、前処理としてあらかじめ整列を行えば二分探索を適用することができます。このように、「整列すれば二分探索が使える」という考え方は様々な問題に応用することができます。ただし、データの大きさを考えると、ほとんどの場合、高等的なソートアルゴリズムが必要になります。

