
import sys,random,bisect
from collections import deque,defaultdict
from heapq import heapify,heappop,heappush
from itertools import permutations
from math import log,gcd

input = lambda :sys.stdin.readline().rstrip()
mi = lambda :map(int,input().split())
li = lambda :list(mi())

while True:
    INF = 10**9
    n,m = mi()
    if n==0 and m==0:
        break
    A = li()
    B = li()

    C = [(B[i]-A[i])%m for i in range(n)]

    dp = [m*i+C[0] for i in range(n)]
    for i in range(1,n):
        ndp = [dp[j]+max(C[i]-C[i-1],0) for j in range(n)]
        for j in range(n):
            if j!=0:
                ndp[j] = min(ndp[j],dp[j-1]+max(C[i]+m-C[i-1],0))
            if j!=n-1:
                ndp[j] = min(ndp[j],dp[j+1])
        dp = ndp
    print(min(dp))

