from collections import deque

tenkey = [[7, 8, 9],
          [4, 5, 6],
          [1, 2, 3],
          [0, -1, -1]]
dx = [1, 0, -1, 0]
dy = [0, 1, 0, -1]
INF = 100000000


def is_key_exist(x_, y_):
    return 0 <= x_ < 4 and 0 <= y_ < 3 and tenkey[x_][y_] != -1


m, r = map(int, input().split())
dist = [[[0 for _ in range(3)] for _ in range(4)] for _ in range(m)]
for i in range(m):
    for j in range(4):
        for k in range(3):
            dist[i][j][k] = INF
dq = deque()
dq.append((0, 3, 0))
dist[0][3][0] = 0
while len(dq) > 0:
    (rem, x, y) = dq.popleft()
    newrem = (rem * 10 + tenkey[x][y]) % m
    if dist[newrem][x][y] == INF:
        dist[newrem][x][y] = dist[rem][x][y] + 1
        dq.append((newrem, x, y))
    for j in range(4):
        nx = x + dx[j]
        ny = y + dy[j]
        if is_key_exist(nx, ny) and dist[rem][nx][ny] == INF:
            dist[rem][nx][ny] = dist[rem][x][y] + 1
            dq.append((rem, nx, ny))

ans = INF
for i in range(4):
    for j in range(3):
        ans = min(ans, dist[r][i][j])
print(ans)

