class Node:

    def __init__(self, node, length):
        self.node = node
        self.length = length


class Edge:
    
    def __init__(self, x, y, length):
        self.x = x
        self.y = y
        self.length = length


class Prim:
    def __init__(self, n, m):
        self.n = n  
        self.m = m
        self.v = [[] for i in range(n+1)]  
        self.e = []  
        self.s = []  
        self.vis = [False for i in range(n+1)]  

    def graphy(self):
        for i in range(self.m):
            x, y, length = list(map(int, input().split()))
            self.v[x].append(Node(y, length)) 
            self.v[y].append(Node(x, length))  
        # print(self.v)

    def insert(self, point):
        for i in range(len(self.v[point])):
            if not self.vis[self.v[point][i].node]:
                self.e.append(Edge(point, self.v[point][i].node, self.v[point][i].length))
        self.vis[point] = True
        self.e = sorted(self.e, key=lambda e: e.length)  

    def run(self, start):
        self.insert(start)  
        while self.n - len(self.s) > 1:  
            for i in range(len(self.e)):  
                if not self.vis[self.e[i].y]:  
                    self.s.append(self.e[i])  
                    self.insert(self.e[i].y)  
                    break  

    def print(self):
        edge_sum = 0
        for i in range(len(self.s)):
            edge_sum += self.s[i].length
        print(edge_sum)


def main():
    n, m = list(map(int, input().split()))
    prim = Prim(n, m)
    prim.graphy()
    prim.run(1)
    prim.print()


if __name__ == '__main__':
    main()
