import bisect
import array
import heapq
from collections import deque, defaultdict
import math
import copy
from itertools import cycle, permutations

INF = float("inf")
mod = 10**9+7

k = int(input())
#S = input()
#N,K = map(int,input().split())
#P = list(map(int,input().split()))
x = [-1]*8
for _ in range(k):
    r,c = map(int,input().split())
    x[r] = c
N = 8
L = []
stck = [[]]
heapq.heapify(stck)
while stck:
    n_list = heapq.heappop(stck)
    #print(n_list)
    if len(n_list) == N:
        L.append(n_list)
        continue
    for i in range(N):
        if i not in n_list:
            heapq.heappush(stck,n_list+[i])

def diag(board):
    for i in range(2*N-1):
        s = 0
        for j in range(i+1):
            if (i-j>=N or j>=N):
                continue
            s += board[i-j][j]
        if s >= 2:
            return False
    return True
def diag2(board):
    for i in range(2*N-1):
        s = 0
        for j in range(i+1):
            if (i-j>=N or j>=N):
                continue
            s += board[i-j][j]
            print(board[i-j][j],end="")
        print()
        print(s)
for l in L:
    f = True
    B = [[0]*8 for _ in range(N)]
    for i in range(N):
        if x[i] != -1:
            if x[i] != l[i]:
                f = False
        B[i][l[i]] = 1
    if diag(B) and diag(B[::-1]) and f:
        break
    
for i in range(N):
    for j in range(N):
        if B[i][j]:
            print("Q",end="")
        else:
            print(".",end="")
    print()

