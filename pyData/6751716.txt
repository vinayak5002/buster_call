V, E = map(int, input().split())
# cost[(a, b)] := weight of the edge from a to b
cost = defaultdict(lambda: INF)
for _ in range(E):
    s, t, d = map(int, input().split())
    cost[(s, t)] = d

pattern_count = pow(2, V)
dp = [[INF] * V for _ in range(pattern_count)]
for bit in range(1, pattern_count):
    for last in range(V):
        # last is visited in bit
        if not (bit & (1<<last)):
            continue
        is_first = True
        for second_last in range(V):
            if last == second_last or not (bit & (1<<second_last)):
                continue
            dp[bit][last] = min(dp[bit][last], dp[bit&(~(1<<last))][second_last] + cost[(second_last, last)])
            is_first = False
        if is_first:
            dp[bit][last] = cost[(0, last)]

print(dp[-1][0] if dp[-1][0] != INF else -1)

