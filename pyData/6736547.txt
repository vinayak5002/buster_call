from collections import Counter, deque, defaultdict
from itertools import permutations, combinations, accumulate, product, chain
from functools import lru_cache
from bisect import bisect, bisect_left, insort, insort_left
from heapq import heapify, heappush, heappop
from array import array
from decimal import Decimal
from copy import deepcopy
from pprint import pprint
from string import ascii_uppercase, ascii_lowercase, ascii_letters
from math import factorial, floor, ceil, sqrt, log, log2, log10
import math
import sys
sys.setrecursionlimit(1<<30)

read = sys.stdin.read
readline = sys.stdin.readline
readlines = sys.stdin.readlines

dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

if __name__ == '__main__':
    while True:
        W, H = map(int, readline().split())

        if H == W == 0:
            break

        Yoko, Tate = [list() for _ in range(2)]
        for i in range(2*H-1):
            tmp = list(map(int, readline().split()))
            if i % 2:
                Yoko.append(tmp)
            else:
                Tate.append(tmp)

        dist = [[0] * W for _ in range(H)]
        dist[0][0] = 1
        que = deque([[0, 0]])

        K = [Yoko, Tate]
        f = [-1, 0, 0, 0]
        s = [0, 0, 0, -1]

        while que:
            x, y = que.popleft()
            for i in range(4):
                xx = x + dx[i]
                yy = y + dy[i]
                if not (0<=xx<H and 0<=yy<W):
                    continue
                if dist[xx][yy]:
                    continue
                if not K[i%2][x+f[i]][y+s[i]]:
                    dist[xx][yy] = dist[x][y] + 1
                    que.append([xx, yy])

        print(dist[-1][-1])

