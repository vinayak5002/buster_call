import sys
import math
from heapq import heappush, heappop
from bisect import bisect_left

# READ_FROM_FILE = True
READ_FROM_FILE = False


def count_visitable_rooms(w, h, grid, sx, sy, l_list):
    dx_dy_tuple = ((1, 0), (0, 1), (-1, 0), (0, -1))
    p_l = l_list[0]
    hq = [(p_l, sx, sy)]
    c_idx = 0
    c_l = 1
    is_visited_grid = [[False] * w for _ in range(h)]
    is_visited_grid[sy][sx] = True
    count_list = [1] * len(l_list)

    while hq:
        c_l, cx, cy = heappop(hq)
        if p_l < c_l:
            count_list[c_idx] = sum([1 for x in range(w) for y in range(h)
                                     if is_visited_grid[y][x] and grid[y][x] <= p_l])
            p_l = c_l
            c_idx = l_list.index(c_l)

        for dx, dy in dx_dy_tuple:
            nx = cx + dx
            ny = cy + dy

            if 0 <= nx < w and 0 <= ny < h and not is_visited_grid[ny][nx]:
                is_visited_grid[ny][nx] = True
                n_l = c_l if grid[ny][nx] <= c_l else grid[ny][nx]
                heappush(hq, (n_l, nx, ny))

    count_list[c_idx] = sum([1 for x in range(w) for y in range(h)
                            if is_visited_grid[y][x] and grid[y][x] <= c_l])

    return count_list


def calc_min_l(r, l0_list, l1_list, count0_list, count1_list):
    min_l = math.inf
    if count0_list[-1] >= r:
        min_l = l0_list[-1]
    if count1_list[-1] >= r:
        min_l = min(min_l, l1_list[-1])

    for idx0, l0 in enumerate(l0_list):
        d = r - count0_list[idx0]
        idx1 = bisect_left(count1_list, d)
        if idx1 <= len(count1_list) - 1:
            min_l = min(min_l, l0 + l1_list[idx1])

    return min_l


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    while True:
        r = int(f.readline())
        if r == 0:
            break

        w0, h0, sx0, sy0 = map(int, f.readline().split())
        sx0 -= 1
        sy0 -= 1
        grid0 = [list(map(int, f.readline().split())) for _ in range(h0)]
        l0_list = list(set([grid0[y][x] for x in range(w0) for y in range(h0)]))
        l0_list.sort()

        w1, h1, sx1, sy1 = map(int, f.readline().split())
        sx1 -= 1
        sy1 -= 1
        grid1 = [list(map(int, f.readline().split())) for _ in range(h1)]
        l1_list = list(set([grid1[y][x] for x in range(w1) for y in range(h1)]))
        l1_list.sort()

        count_list0 = count_visitable_rooms(w0, h0, grid0, sx0, sy0, l0_list)
        count_list1 = count_visitable_rooms(w1, h1, grid1, sx1, sy1, l1_list)

        min_l = calc_min_l(r, l0_list, l1_list, count_list0, count_list1)
        print(min_l)

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

