N = 8
FREE = -1
NOT_FREE = 1

row = [FREE for _ in range(N)]
col = [FREE for _ in range(N)]
dpos = [FREE for _ in range(2*N-1)]
dneg = [FREE for _ in range(2*N-1)]
preq = [[False for j in range(N)] for i in range(N)]

def printQ():
	for i in range(N):
		for j in range(N):
			if preq[i][j]:
				if row[i] != j: return             #事前に置いたクイーンが、得られた盤面のクイーンに一致するかどうかを判定し、一致しない場合再び探索させる
	for i in range(N):
		for j in range(N):
			if row[i] == j:
				print('Q', end='')
			else:
				print('.', end='')
			if j == N-1:
				print()

def dfs(i):
	if i == N:
		printQ()
		return
	for j in range(N):
		if col[j] == NOT_FREE or dpos[i+j] == NOT_FREE or dneg[i-j+N-1] == NOT_FREE: continue
		row[i] = j
		col[j] = NOT_FREE
		dpos[i+j] = NOT_FREE
		dneg[i-j+N-1] = NOT_FREE
		dfs(i+1)
		row[i] = col[j] = dpos[i+j] = dneg[i-j+N-1] = FREE             #iがNまで行って再帰が止まり盤面が完成し、printQで事前のクイーンとマッチできなかったとき、以前のjのクイーンをリセットし、新しいjへクイーンを置けるようにする。

k = int(input())
for i in range(k):
	x, y = map(int, input().split())
	preq[x][y] = True
dfs(0)
