import sys
sys.setrecursionlimit(10 ** 6)
INF = float('inf')

# from cmath import inf
# import math
# import re
# import copy
# from re import A
# import time

# from itertools import permutations
# from itertools import combinations
# import numpy as np


def input_int(lines=1):
    if lines == 1:
        return list(map(int, sys.stdin.readline().split()))
    return [list(map(int, sys.stdin.readline().split()))[0] for l in range(lines)]


def input_float(lines=1):
    if lines == 1:
        return list(map(float, sys.stdin.readline().split()))
    return [list(map(float, sys.stdin.readline().split()))[0] for l in range(lines)]


def input_str(lines=1):
    if lines == 1:
        return list(sys.stdin.readline().split())
    return [list(sys.stdin.readline().split())[0] for l in range(lines)]


def input_intmat(lines=1):
    return [list(map(int, sys.stdin.readline().split())) for l in range(lines)]


def input_floatmat(lines=1):
    return [list(map(float, sys.stdin.readline().split())) for l in range(lines)]


def input_strmat(lines=1):
    return [list(sys.stdin.readline().split()) for l in range(lines)]


def bs(search_value: int,sorted_list) -> bool:#二分探索
    left_index: int = 0
    right_index: int = len(sorted_list) - 1
    while left_index <= right_index:
        middle_index: int = (left_index + right_index) // 2
        middle_value: int = sorted_list[middle_index]

        if search_value < middle_value:
            right_index = middle_index - 1
            continue
        if search_value > middle_value:
            left_index = middle_index + 1
            continue
        return True
    return False


def main():
    # pass
    [N]=input_int()
    S=input_int()
    [q]=input_int()
    T=input_int()
    c=0
    for t in T:
        if bs(t,S):
            c+=1
    print(c)
main()
