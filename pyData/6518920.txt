import bisect

N,q = map(int,input().split())

#A = [3,7,4,6,5,9,2,8]
#N = int(input())
#N = len(A)
#print("N=",N)
tmp = [1]
tmp2 = 1

while tmp2<N:
    tmp2*=2
    tmp.append(tmp2)

#print(tmp)

size = bisect.bisect_left(tmp,N)
size2 = tmp[size]*2
INF = 2**31-1

data = [INF]*size2

#print(data)
#for i,v in enumerate(A):
#    data[i+tmp2] = A[i]

#for i in range(tmp2-1,0,-1):
#    data[i] = min(data[i*2],data[i*2+1])

#print(data)

def updata(k,a):
    kk = (k-1)+tmp2
    data[kk] = a
    
    while kk>1:
        if kk%2 == 0:
            data[kk//2] = min(data[kk],data[kk+1])
        else:
            data[kk//2] = min(data[kk],data[kk-1])
        kk = kk//2
    return

def query(l,r):
    left = (l-1)+tmp2
    right = (r-1)+tmp2

    winleft = data[left]
    winright = data[right]

    flag = True
 
    while flag:
        if left//2 == right//2:
            flag = False
            return min(winleft,winright)
        else:
            if left%2 == 0:
                if left+1<=right:
                    winleft = min(winleft,data[left+1])
            left = left//2

            if right%2 == 1:
                if right-1>=left:
                    winright = min(winright,data[right-1])
            right = right//2
 

for i in range(q):
    qq = list(map(int,input().split()))
    if qq[0] == 0:
        updata(qq[1]+1,qq[2])
    else:
        print(query(qq[1]+1,qq[2]+1))

#        print(query(qq[1]+1,qq[2]+1),"i=",i,)
#        if i == 19:
#            print("data",data,"qq",qq)

