import heapq
import typing
class DSU:
	'''
	Implement (union by size) + (path compression)
	Reference:
	Zvi Galil and Giuseppe F. Italiano,
	Data structures and algorithms for disjoint set union problems
	'''

	def __init__(self, n: int = 0):            #初期化
		self._n = n
		self.parent_or_size = [-1] * n

	def merge(self, a: int, b: int) -> int:    #結合
		assert 0 <= a < self._n
		assert 0 <= b < self._n

		x = self.leader(a)
		y = self.leader(b)

		if x == y:
			return x

		if -self.parent_or_size[x] < -self.parent_or_size[y]:
			x, y = y, x

		self.parent_or_size[x] += self.parent_or_size[y]
		self.parent_or_size[y] = x

		return x

	def same(self, a: int, b: int) -> bool:    #判定
		assert 0 <= a < self._n
		assert 0 <= b < self._n

		return self.leader(a) == self.leader(b)

	def leader(self, a: int) -> int:           #所属するグループのリーダー
		assert 0 <= a < self._n

		if self.parent_or_size[a] < 0:
			return a

		self.parent_or_size[a] = self.leader(self.parent_or_size[a])
		return self.parent_or_size[a]

	def size(self, a: int) -> int:             #所属するグループのサイズ
		assert 0 <= a < self._n

		return -self.parent_or_size[self.leader(a)]

	def groups(self) -> typing.List[typing.List[int]]:     #グループを全表示
		leader_buf = [self.leader(i) for i in range(self._n)]

		result: typing.List[typing.List[int]] = [[] for _ in range(self._n)]
		for i in range(self._n):
			result[leader_buf[i]].append(i)

		return list(filter(lambda r: r, result))

n,m = map(int,input().split())
edge = []
heapq.heapify(edge)
for s,t,v in [map(int,input().split()) for _ in range(m)]:
	heapq.heappush(edge,(v,s,t))
ans = 0
dsu = DSU(n)
while(len(edge)>0):
	v,s,t = heapq.heappop(edge)
	if not(dsu.same(s,t)):
		dsu.merge(s,t)
		ans += v

print(ans)


