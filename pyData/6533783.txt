
def prime_factor_table(N):
	
	#1～Nの最も小さい素因数を格納しておく箇所
	D=[0]*(N+1)
	
	for i in range(2,N+1):
	    if D[i]!=0:
	        continue
	    for k in range(1,N+1):
	        if i*k<N+1:
	            if D[i*k]==0:
	                D[i*k]=i
	        else:
	            break
	return D

#素因数分解をしたい値xを入れると、xを最小の素因数で割っては、xをその商で更新することを繰り返す
def fast_prime_fact(x):

    #primeは素因数の入れ物
    prime=[]

    while 1<x:
        prime.append(D[x])
        x//=D[x]
    return prime

n=int(input())
D=prime_factor_table(n)
p=fast_prime_fact(n)
print(str(n)+":",*p)
