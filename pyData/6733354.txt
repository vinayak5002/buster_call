import Data.Monoid (mconcat)
import Data.Functor ((<$>))
import Data.List (foldl')
import Data.Maybe (fromJust)
import qualified Data.ByteString.Char8 as BC

main :: IO ()
main = do
  _n <- readInt <$> BC.getLine :: IO Int
  as <- BC.words <$> BC.getLine
  let (mini, maxi, s) = solve as
  putStrLn $ mconcat [show mini, " ", show maxi, " ", show s]

readInt :: BC.ByteString -> Int
readInt = fst . fromJust . BC.readInt

solve :: [BC.ByteString] -> (Int, Int, Int)
solve [] = (0, 0, 0)
solve (b:bs) = let x = readInt b
               in foldl' go (x, x, x) bs
  where
    go (mini, maxi, s) bc = let x = readInt bc                             in if x <= mini
                                then (x, maxi, s+x)
                                else if x >= maxi
                                     then (mini, x, s+x)
                                     else (mini, maxi, s+x)

