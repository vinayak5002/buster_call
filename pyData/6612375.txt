import sys
while True:
  N,M = map(int,input().split())
  if N == 0 and M == 0:
    sys.exit()
  BookL = [int(input()) for _ in range(M)]
  sigL = [int(input()) for _ in range(N)]
  INF = float('inf')
  DP = [[INF for j in range(256)] for i in range(N+1)]
  DP2 = [[INF for j in range(256)] for i in range(N+1)]
  #DP3 = [[INF for j in range(256)] for i in range(N+1)]
  DP[0][128] = 0
  for k in range(128,256):
    DP2[0][k] = 0
  for i in range(1,N+1):
    std = INF
    for j in range(256):
      for x in BookL:
        if x >= 0:
          if j >= 255-x:
            std = min(std,DP[i-1][j])
          if j >= x:
            if j != 255:
              DP[i][j] = min(DP[i][j],DP[i-1][j-x]+(j-sigL[i-1])**2)
              if j != 0:
                DP2[i][j] = min(DP2[i][j-1],DP[i][j])
              else:
                DP2[i][j] = DP[i][j]
            else:
              DP[i][j] = min(DP[i][j],std+(j-sigL[i-1])**2)
              DP2[i][j] = min(DP2[i][j-1],DP[i][j])
        else:
          if j-x <= 255:
            if j != 0:
              DP[i][j] = min(DP[i][j],DP[i-1][j-x]+(j-sigL[i-1])**2)
              DP2[i][j] = min(DP2[i][j-1],DP[i][j])
            else:
              DP[i][j] = min(DP[i][j],DP2[i-1][j-x]+(j-sigL[i-1])**2)
              DP2[i][j] = DP[i][j]
  print(min(DP[-1]))
        

