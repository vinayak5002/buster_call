
class UnionFind():
    def __init__(self, n):
        self.n = n
        self.parents = [-1] * n
    
    def find(self, x):
        if self.parents[x] < 0:
            return x
        else:
            self.parents[x] = self.find(self.parents[x])
            return self.parents[x]

    def unite(self, x, y):
        x = self.find(x)
        y = self.find(y)

        if x == y:
            return
        
        if (self.parents[x] > self.parents[y]):
            x, y = y, x
        
        self.parents[x] += self.parents[y]
        self.parents[y] = x
    
    def same(self, x, y):
        return self.find(x) == self.find(y)
    

V, E = map(int, input().split())
Es = []
for _ in range(E):
    s, t, w = map(int, input().split())
    Es.append([s, t, w])

Es = sorted(Es, key=lambda x: x[2])

cost = 0
u = UnionFind(V)
for e in Es:
    if not u.same(e[0], e[1]):
        cost += e[2]
        u.unite(e[0], e[1])

print(cost)



