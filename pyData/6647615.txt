V,E = map(int,input().split())
Graph = [[] for _ in range(V)]
startL = []
for _ in range(E):
  a,b,c = map(int,input().split())
  Graph[b].append((a,c))
  if a == 0:
    startL.append((b,c))
DP = [[float('inf') for j in range(V-1)] for i in range(2**(V-1))]
stdL = [format(i,'b').zfill(V-1) for i in range(2**(V-1))]
stdL.sort(key = lambda x: x.count('1'))
stdD = dict()
for i in range(2**(V-1)):
  stdD[stdL[i]] = i
#for x in startL:
#  DP[0][x[0]-1] = x[1]
#  L = list(format(0,'b').zfill(V-1))
#  L[x[0]-1] = '1'
#  DP[stdD[''.join(L)]][x[0]-1] = x[1]
for i in range(1,2**(V-1)):
  for j in range(V-1):
    if stdL[i][j] == '0':
      pass
    else:
      ans = DP[i][j]
      x = list(stdL[i])
      x[j] = '0'
      y = stdD[''.join(x)]
      for l in Graph[j+1]:
        if l[0] != 0:
          ans = min(ans,DP[y][l[0]-1]+l[1])
        else:
          if y == 0:
            ans = min(ans,l[1])
      DP[i][j] = ans
#print(stdL)
#print(DP)
ans2 = float('inf')
for l in Graph[0]:
  ans2 = min(ans2,DP[-1][l[0]-1]+l[1])
if ans2 != float('inf'):
  print(ans2)
else:
  print(-1)
      
    
  
