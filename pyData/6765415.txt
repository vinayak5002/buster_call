import sys
input = lambda: sys.stdin.readline().rstrip()

# def __init__(self, n, op=lambda x,y: x+y, default=0, V=[]):
class SegmentTree:

  def __init__(self, n, op=lambda x,y: x+y, default=0, V=[]):
    "Make a new Segment Tree. / 0 <= n <= 10**8. / O(N)" # default=lambda x:0
    assert 0 <= n <= 10**8
    self._n       = n
    self._log     = (n-1).bit_length()
    self._size    = 2 ** self._log
    self._op      = op
    self._default = default
    self._dat     = [self._default] * (2*self._size)
    if V:
      for i in range(self._n):
        self._dat[self._size+i] = V[i]
      for i in range(self._size-1, 0, -1):
        self._update(i)

  def _update(self, k: int):
    "Update a[k]. / O(1)"
    self._dat[k] = self._op(self._dat[2*k], self._dat[2*k+1])

  def set(self, p: int, x):
    "Change a[p] into x. / O(logN)"
    assert 0 <= p <= self._size
    p += self._size
    self._dat[p] = x
    for i in range(self._log):
      p >>= 1
      self._update(p)

  def get(self, p: int):
    "Return a[p]. / O(1)"
    assert 0 <= p < self._n
    return self._dat[p+self._size]

  def prod(self, l: int, r: int):
    "Return op([l, r)). / 0 <= l <= r <= n / O(logN)"
    assert 0 <= l <= r <= self._n
    l += self._size
    r += self._size
    lres, rres = self._default, self._default
    while l < r:
      if l & 1:
        lres = self._op(lres, self._dat[l])
        l += 1
      if r & 1:
        r -= 1
        rres = self._op(self._dat[r], rres)
      l >>= 1
      r >>= 1
    return self._op(lres, rres)

  def all_prod(self):
    "Return op([0, n)). / O(1)"
    return self._dat[1]

  def max_right(self, l: int, f=lambda x: x):
    "Find the largest index R: f([l, R)) == True. / O(logN)"
    assert 0 <= l <= self._n
    # assert f(self._default)
    if l == self._n:
      return self._n 
    l += self._size
    tmp = self._default
    while True:
      while not (l & 1):
        l >>= 1
      if not f(self._op(tmp, self._dat[l])):
        while l < self._size:
          l <<= 1
          if f(self._op(tmp, self._dat[l])):
            tmp = self._op(tmp, self._dat[l])
            l += 1
        return l - self._size
      tmp = self._op(tmp, self._dat[l])
      l += 1
      if l & -l == l:
        break
    return self._n

  def min_left(self, r: int, f=lambda x: x):
    "Find the smallest index L: f([L, r)) == True. / O(logN)"
    assert 0 <= r <= self._n 
    # assert f(self._default)
    if r == 0:
      return 0 
    r += self._size
    tmp = self._default
    while True:
      r -= 1
      while r > 1 and r & 1:
        r >>= 1
      if not f(self._op(self._dat[r], tmp)):
        while r < self._size:
          r = 2*r + 1
          if f(self._op(self._dat[r], tmp)):
            tmp = self._op(self.dat[r], tmp)
            r -= 1
        return r + 1 - self._size
      tmp = self._op(self._dat[r], tmp)
      if r & -r == r:
        break 
    return 0

  def __str__(self):
    ret = []
    for i in range(self._log+1):
      tmp = [' ']
      for j in range(2**i):
        tmp.append(self._dat[2**i+j])
      ret.append(' '.join(map(str, tmp)))
    return '<SegmentTree> [\n' + '\n'.join(map(str, ret)) + '\n]\n'


#  -----------------------  #

n, q = map(int, input().split())

segtree = SegmentTree(n, op=lambda x,y:x+y, default=0)

for _ in range(q):
  com, x, y = map(int, input().split())
  if com == 0:
    segtree.set(x, y)
  else:
    print(segtree.prod(x, y+1))

