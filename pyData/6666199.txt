import sys
import math
from collections import defaultdict, deque

sys.setrecursionlimit(10 ** 6)
stdin = sys.stdin

INF = float('inf')

ni = lambda: int(ns())
na = lambda: list(map(int, stdin.readline().split()))
ns = lambda: stdin.readline().strip()

N = ni()
G = [[] for _ in range(N)]
d = [0] * N
f = [0] * N
used = [False] * N

def dfs(v):
    global cnt
    used[v] = True
    d[v] = cnt
    cnt += 1
    for to in G[v]:
        if not used[to]:
            dfs(to)
            cnt += 1
    f[v] = cnt

for _ in range(N):
    A = na()
    for i in range(len(A) - 2):
        G[A[0] - 1].append(A[i + 2] - 1)
        G[A[i + 2] - 1].append(A[0] - 1)
    G[A[0] - 1].sort()


cnt = 1
for i in range(N):
    if not used[i]:
        dfs(i)

for i in range(N):
    print(i + 1, d[i], f[i])

