import Data.Maybe (fromJust)
import Data.Functor ((<$>))
import Data.Monoid (mconcat)
import Data.ByteString.Char8 (ByteString)
import qualified Data.ByteString.Char8 as BC

readInt :: ByteString -> Int
readInt = fst . fromJust . BC.readInt

main :: IO ()
main = do
  s <- readInt <$> BC.getLine
  let sec  = s `mod` 60
      m = s `div` 60
      mini = m `mod` 60
      hour = s `div` 3600
  putStrLn $ mconcat [show hour, ":", show mini, ":", show sec]

