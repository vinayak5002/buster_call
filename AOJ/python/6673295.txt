import sys
import math

# READ_FROM_FILE = True
READ_FROM_FILE = False


def calc_inverse(v):
    iv = []
    for element in v:
        iv.append(-element)
    return iv


def calc_length(v):
    length = 0
    for element in v:
        length += element ** 2
    return math.sqrt(length)


def normalize(v):
    length = calc_length(v)
    nv = []
    for element in v:
        nv.append(element / length)
    return nv


def v_sum(v0, v1):
    v_result = []
    for i in range(len(v0)):
        v_result.append(v0[i] + v1[i])
    return v_result


def v_diff(v0, v1):
    dif = []
    for i in range(len(v0)):
        dif.append(v1[i] - v0[i])
    return dif


def inner_product(v0, v1):
    ip = 0
    for i in range(len(v0)):
        ip += v0[i] * v1[i]
    return ip


# v01: normalized
def calc_projection_point(p0, v01, p2):
    v02 = v_diff(p0, p2)
    ip = inner_product(v01, v02)
    projection_p = []
    for i in range(len(v01)):
        projection_p.append(p0[i] + v01[i] * ip)
    return projection_p


# v01: normalized
def calc_reflection_point(p0, v01, p2):
    pp = calc_projection_point(p0, v01, p2)
    vp = v_diff(pp, p2)
    ivp = calc_inverse(vp)
    pr = v_sum(pp, ivp)
    return pr


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    x0, y0, x1, y1 = list(map(int, f.readline().split()))
    p0 = (x0, y0)
    p1 = (x1, y1)
    v01 = normalize(v_diff(p0, p1))

    q = int(f.readline())
    for _ in range(q):
        px, py = list(map(int, f.readline().split()))
        p2 = (px, py)
        pr = calc_reflection_point(p0, v01, p2)
        print(f'{pr[0]:.8f} {pr[1]:.8f}')

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

