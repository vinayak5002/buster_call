"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const str = `4
0 0
1 3 2 3 0
2 0
3 0`;
const inputs = str.trim().split('\n');
const count = Number(inputs.shift());
const tree = [...Array(count)].map(_ => ({ parentIndex: -1 }));
inputs.forEach(input => {
    const [id, childCount, ...rest] = input.split(' ').map(Number);
    const node = tree[id];
    node.childIndex = rest[0];
    for (let i = 0; i < rest.length - 1; i++) {
        tree[rest[i]].siblingIndex = rest[i + 1];
        tree[rest[i]].parentIndex = id;
        tree[rest[i + 1]].parentIndex = id;
    }
});
const depth = [...Array(count)].map(_ => 0);
const setDepth = (index, d) => {
    depth[index] = d;
    if (tree[index].siblingIndex !== undefined) {
        setDepth(tree[index].siblingIndex, d);
    }
    if (tree[index].childIndex !== undefined) {
        setDepth(tree[index].childIndex, d + 1);
    }
};
let rootIndex = 0;
for (let i = 0; i < count; i++) {
    if (tree[i].parentIndex === -1) {
        rootIndex = i;
    }
}
setDepth(rootIndex, 0);
tree.forEach((node, index) => {
    const type = node.parentIndex === -1
        ? 'root'
        : node.childIndex === undefined
            ? 'leaf'
            : 'internal node';
    const children = [];
    let idx = node.childIndex;
    while (idx !== undefined) {
        children.push(idx);
        idx = tree[idx].siblingIndex;
    }
    console.log(`node ${index}: parent = ${node.parentIndex}, depth = ${depth[index]}, ${type}, [${children.join(', ')}]`);
});

