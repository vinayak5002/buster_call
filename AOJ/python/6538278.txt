import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Main {
    static int w;
    static int h;
    static int[][] map;
    static UnionFind islands;
    static final int isSea = -1;
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            w = sc.nextInt();
            h = sc.nextInt();
            if (w == 0 && h == 0) break;

            map = new int[h][w];
            int NumOfLand = 0;
            for (int i = 0; i < h; i++) {
                for (int j = 0; j < w; j++) {
                    int input = sc.nextInt();
                    if (input == 1){
                        map[i][j] = NumOfLand++;
                    }else{
                        map[i][j] = isSea;
                    }
                }
            }

            islands = new UnionFind(NumOfLand);
            for (int i = 0; i < h; i++) {
                for (int j = 0; j < w; j++) {
                    check(i, j);
                }
            }

            System.out.println(islands.NumberOfGroups());
        }
        sc.close();
    }

    static void check(int index0, int index1){
        if(map[index0][index1] == isSea) return;

        for (int i = index0 - 1; i <= index0 + 1 ; i++) {
            for (int j = index1 - 1; j <= index1 + 1; j++) {
                if (i == index0 && j == index1) continue;

                try {
                    if(map[i][j] >= 0){
                        islands.Merge(map[index0][index1], map[i][j]);
                    }
                } catch (Exception e) {
                    continue;
                }
            }
        }
    }
}

class UnionFind {
    int n;
    int[] parentSize;

    public UnionFind(int _n) {
        this.n = _n;
        this.parentSize = new int[_n];
        Arrays.fill(this.parentSize, -1);
    }

    public void Merge(int a, int b) {
        int x = this.Leader(a);
        int y = this.Leader(b);
        if (x == y) {
            return;
        } else {
            if (Math.abs(this.parentSize[x]) < Math.abs(this.parentSize[y])) {
                int tmp = x;
                x = y;
                y = tmp;
            }
            this.parentSize[x] += this.parentSize[y];
            this.parentSize[y] = x;
            return;
        }
    }

    public boolean isSame(int a, int b) {
        return this.Leader(a) == this.Leader(b);
    }

    public int Leader(int a) {
        if (this.parentSize[a] < 0) // 自分がリーダー
        {
            return a;
        } else { // リーダーのリーダーのリーダーの…のように根を辿って最終的なリーダーを自分の直接のリーダーに更新（根の付け替え）
            this.parentSize[a] = this.Leader(this.parentSize[a]);
            return this.parentSize[a];
        }
    }
}
