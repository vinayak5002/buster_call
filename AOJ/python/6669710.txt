// ALDS1_2_C
#include <bits/stdc++.h>
#include <string>
#include <utility>
using namespace std;

#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

struct Fast {
  Fast() {
    std::cin.tie(0);
    ios::sync_with_stdio(false);
  }
} fast;

void pv(const vector<pair<string, int>> &vec) {
  for (int i = 0; i < vec.size() - 1; i++) {
    cout << vec[i].first << vec[i].second << " ";
  }
  cout << vec.back().first << vec.back().second << endl;
}

void BubbleSort(vector<pair<string, int>> &C, int N) {
  for (int i = 0; i < N; i++) {
    for (int j = N - 1; j > i; j--) {
      if (C[j].second < C[j - 1].second) {
        swap(C[j], C[j - 1]);
      }
    }
  }
}

void SelectionSort(vector<pair<string, int>> &C, int N) {
  for (int i = 0; i < N; i++) {
    int minj = i;
    for (int j = i; j < N; j++) {
      if (C[j].second < C[minj].second) {
        minj = j;
      }
    }
    swap(C[i], C[minj]);
  }
}

bool isStable(const vector<pair<string, int>> &in,
              const vector<pair<string, int>> &out, const int N) {
  for (int i = 0; i < N; i++) {
    for (int j = i + 1; j < N; j++) {
      for (int a = 0; a < N; a++) {
        for (int b = a + 1; b < N; b++) {
          if ((in[i].second == in[j].second) && in[i] == out[b] &&
              in[j] == out[a]) {
            return false;
          }
        }
      }
    }
  }
  return true;
}

int main() {
  int N;
  cin >> N;
  vector<pair<string, int>> ary(N);
  for (int i = 0; i < N; i++) {
    string buf;
    cin >> buf;
    ary[i].first = buf[0];
    ary[i].second = buf[1] - '0';
  }

  vector<pair<string, int>> bubble_ary = ary;
  vector<pair<string, int>> selection_ary = ary;

  BubbleSort(bubble_ary, N);
  pv(bubble_ary);
  if (isStable(ary, bubble_ary, N)) {
    cout << "Stable" << endl;
  } else {
    cout << "Not stable" << endl;
  }

  SelectionSort(selection_ary, N);
  pv(selection_ary);
  if (isStable(ary, selection_ary, N)) {
    cout << "Stable" << endl;
  } else {
    cout << "Not Stable" << endl;
  }

  return 0;
}

