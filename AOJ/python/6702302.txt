import java.util.*;
import java.awt.Point;

public class Main{
    static int[][] map;
    static boolean[][] used;
    static int[] dx = new int[]{1, 0, -1, 0, -1, -1, 1, 1};
    static int[] dy = new int[]{0, 1, 0,-1, -1, 1, -1, 1};
    static Deque<Point> q;
    static int cnt;
    static int ans;
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        boolean flag = true;
        while(flag){
            int w = sc.nextInt(), h = sc.nextInt();
            if(w == 0 && h == 0)return;
            map = new int[h][w];
            q = new ArrayDeque<>();
            for(int i=0;i<h;i++)for(int j=0;j<w;j++){
                map[i][j] = sc.nextInt();
                if(map[i][j]==1){
                    Point p = new Point(i,j);
                    q.add(p);
                }
            }
            used = new boolean[h][w];
            ans = 0;
            if(q.size()==0){
                System.out.println(ans);
            }else{
                while(q.size()>0){
                    Point p = q.poll();
                    int x = p.x; int y = p.y;
                    if(!used[x][y]){
                        ans++;
                        dfs(x, y);
                    }
                }
                System.out.println(ans);
            }
        }
        sc.close();
    }
    static void dfs(int x, int y) {
        used[x][y] = true;
        for(int i=0;i<8;i++) {
            int nx = x+dx[i], ny = y+dy[i];
            if(nx<0 || nx>=map.length || ny<0 || ny>=map[0].length)continue;
            if(map[nx][ny] == 1 && !used[nx][ny]){
                dfs(nx, ny);
            }
        }
    }
}

