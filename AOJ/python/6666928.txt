// #define _GLIBCXX_DEBUG
#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define rep2(i, k, n) for (decltype(n) i = k; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i--)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i--)
#define repr2(i, k, n) for (decltype(n) i = n; i >= k; i--)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret; };
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret; };
template <typename T>
using pq_inv = priority_queue<T, vector<T>, greater<T>>;

struct Solver {
    vector<int> L, R;
    int cost(int i, int k, int j) {
        return L[i] * R[k] * R[j];
    }
    void solve() {
        int n;
        cin >> n;
        L.resize(n), R.resize(n);
        rep(i, n) {
            cin >> L[i] >> R[i];
        }
        vector<vector<int>> dp(n, vector<int>(n,1<<20));
        rep(i,n) dp[i][i]=0;
        for (int width = 1; width < n; width++) {
            for (int left = 0; left < n; left++) {
                int right = left + width;
                if (right >= n) break;
                for (int mid = left; mid + 1 <= right; mid++) {
                    dp[left][right] = min(dp[left][right], dp[left][mid] + dp[mid + 1][right] + cost(left, mid, right));
                }
                if (left + 1 <= right - 1) {
                    dp[left][right] = min(
                        dp[left][right],
                        dp[0][left] + dp[left + 1][right - 1] + dp[right][n - 1] + cost(0, left, right - 1) + cost(0, right - 1, n - 1));
                }
            }
        }
        cout << dp[0][n-1] << endl;
    }
};

int main() {
    std::cin.tie(nullptr);
    Solver solver;
    solver.solve();
    return 0;
}


