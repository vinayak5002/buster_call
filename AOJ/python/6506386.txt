const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {

	const line = si[0].split(" ");
	let n = parseInt(line[0]);
	let q = parseInt(line[1]);
	let tree = new Array(n);
	
	for (let i = 0; i < n; i++) {
		tree[i] = new Tree();
	}
	
	let ans = '';
	for (let i = 1; i <= q; i++) {
		let order = si[i].split(" ");
		
		switch (order[0]) {
			case '0':
				tree[order[1]].insertNode(parseInt(order[2]));
				break;
				
			case '1':
				let length = tree[order[1]].getLength();
				if (length !== 0) {
					let value = tree[order[1]].getBiggestNode();
					//so.write(value + '\n');
					ans += value + '\n';
				}
				break;
				
			case '2':
				tree[order[1]].deleteBiggestNode();
				break;
		}
	}
	so.write(ans);
}


class Node_Tree {
	constructor(value) {
		this.data = value;
		this.parent = null;
		this.left = null;
		this.right = null;
	}

	getData() {
		return this.data;
	}
	
	getParent() {
		return this.parent;
	}
	
	setParent(node) {
		this.parent = node;
	}
	
	getLeft() {
		return this.left;
	}
	
	setLeft(node) {
		this.left = node;
	}
	
	getRight() {
		return this.right;
	}
	
	setRight(node) {
		this.right = node;
	}
	
	isLeaf() {
		if (this.left === null && this.right === null) {
			return true;
		} else {
			return false;
		}
	}
}

class Tree {
	constructor() {
		this.root = null;
		this.numOfNode = 0;
	}
	
	//ノードを追加
	insertNode(value, node) {
		if (this.root === null) {
			this.root = new Node_Tree(value);
			this.numOfNode++;
			return;
		}
		
		
		node = node || this.root;
		/*
		//再起関数ver
		if (node.getData() > value) {
			if (node.getLeft() === null) {
				node.setLeft(new Node_Tree(value));
				this.numOfNode++;
				node.left.setParent(node);
			} else {
				this.insertNode(value, node.getLeft());
			}
		} else {
			if (node.getRight() === null) {
				node.setRight(new Node_Tree(value));
				this.numOfNode++;
				node.right.setParent(node);
			} else {
				this.insertNode(value, node.getRight());
			}
		}
		*/
		//再起関数じゃないver
		let new_node = new Node_Tree(value);
		while (new_node.getParent() === null) {
			if (node.getData() > value) {
				if (node.getLeft() === null) {
					node.setLeft(new_node);
					this.numOfNode++;
					new_node.setParent(node);
				} else {
					node = node.getLeft();
				}
			} else {
				if (node.getRight() === null) {
					node.setRight(new_node);
					this.numOfNode++;
					new_node.setParent(node);
				} else {
					node = node.getRight();
				}
			}
		}
		
		
	}
	
	//最大値のノードの値を取得
	getBiggestNode(node) {
		if (this.root === null) {
			return;
		}
		node = node || this.root;
		/*
		//再起関数ver
		if (node.getRight() !== null) {
			return this.getBiggestNode(node.getRight());
		} else {
			return node.getData();
		}
		*/
		while (node.getRight() !== null) {
			node = node.getRight();
		}
		return node.getData();
		
	}
	
	//最大値のノードを削除
	deleteBiggestNode(node) {
		if (this.root === null) {
			return;
		}
		node = node || this.root;
		//console.log('now node : ' + node.getData());
		/*
		if (node.getRight() !== null) {
			this.deleteBiggestNode(node.getRight());
		} else {	//node.right === null
			
			if (node.getLeft() === null) {	//node is Leaf
				if (node === this.root) {
					this.root = null;
					this.numOfNode--;
				} else {
					node.parent.right = null;
					this.numOfNode--;
				}
			} else {	//node is not Leaf
				if (node === this.root) {
					this.root = node.getLeft();
					this.numOfNode--;
				} else {
					node.parent.setRight(node.getLeft());
					node.left.setParent(node.getParent());
					this.numOfNode--;
				}
			}
		}
		*/
		while (node.getRight() !== null) {
			node = node.getRight();
		}
		
		if (node.getLeft() === null) {	//node is Leaf
			if (node === this.root) {
				this.root = null;
				this.numOfNode--;
			} else {
				node.parent.right = null;
				this.numOfNode--;
			}
		} else {	//node is not Leaf
			if (node === this.root) {
				this.root = node.getLeft();
				this.numOfNode--;
			} else {
				node.parent.setRight(node.getLeft());
				node.left.setParent(node.getParent());
				this.numOfNode--;
			}
		}
	}
	
	getLength() {
		return this.numOfNode;
	}
}
