//#define _GLIBCXX_DEBUG
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <ctime>
#include <deque>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <tuple>
#include <utility>
#include <vector>

using namespace std;

// https://onlinejudge.u-aizu.ac.jp/problems/GRL_2_A

struct UnionFind {
  vector<int> par;
  UnionFind(int n) : par(n, -1) {}
  int root(int x) {
    if (par.at(x) == -1) return x;
    return par.at(x) = root(par.at(x));
  }
  void unite(int x, int y) {
    int rx = root(x);
    int ry = root(y);
    if (rx != ry) par.at(ry) = rx;
    return;
  }
  bool same(int x, int y) { return root(x) == root(y); }
};

int main() {
  int v, e, ans = 0;
  cin >> v >> e;
  vector<tuple<int, int, int>> edges(e);
  for (int i = 0; i < e; ++i) {
    int s, t, w;
    cin >> s >> t >> w;
    edges[i] = {w, s, t};
  }
  sort(edges.begin(), edges.end());
  UnionFind uf(v);
  for (int i = 0; i < e; ++i) {
    int weight, x, y;
    tie(weight, x, y) = edges[i];
    if (uf.same(x, y)) continue;
    ans += weight;
    uf.unite(x, y);
  }
  cout << ans << '\n';
  return 0;
}
