import <a class="keyword" href="http://d.hatena.ne.jp/keyword/java">java</a>.io.BufferedReader;
import <a class="keyword" href="http://d.hatena.ne.jp/keyword/java">java</a>.io.IOException;
import <a class="keyword" href="http://d.hatena.ne.jp/keyword/java">java</a>.io.InputStreamReader;
 
public class InsertionSort {
 
  public static void main(String[] args) {
    // TODO 自動生成されたメソッド・スタブ
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    try {
       
      int N = Integer.parseInt(br.readLine()); // 配列の大きさ
      String[] strArr = br.readLine().split("\\s"); // 文字列の配列
      int[] intArr = new int[N]; // 数値の配列
       
      // 数値の配列の各要素に、値を代入
      for (int i = 0; i < N; i++) {
        intArr[i] = Integer.parseInt(strArr[i]);
      }
       
      int tmp = 0; // 退避用
      int j = 0; // インデックス用
       
      // 配列の大きさだけ繰り返し
      for (int i = 0; i < N ; i++) {
        // 配列の中身を表示
        for (int k = 0; k < N; k++) {
          System.out.print(intArr[k]);
          // 配列の最後の要素以外は、半角スペースを付ける
          if (k != N -1) {
            System.out.print(" ");
          }
        }
        System.out.println();
        // 配列の最後の要素になったら、並び替えせず、処理を抜ける
        if (i == N -1) {
          break;
        }
        // 並び替え
        tmp = intArr[i+1]; // 右隣の要素を退避しておく
        j = i;
        // 右隣の要素のほうが小さい場合
        while (j >= 0 && intArr[j] > tmp) {
          // 入れ替え
          intArr[j+1] = intArr[j];
          j--;
        }
        intArr[j+1] = tmp;
      }
       
    } catch (NumberFormatException e) {
      // TODO 自動生成された catch ブロック
      e.printStackTrace();
    } catch (IOException e) {
      // TODO 自動生成された catch ブロック
      e.printStackTrace();
    } 
  }
}

