import sys
import math
from heapq import heappush, heappop
from bisect import bisect_left
from itertools import accumulate

# READ_FROM_FILE = True
READ_FROM_FILE = False


def count_visitable_rooms(w, h, grid, sx, sy, l_list, l2idx_dic):
    dx_dy_tuple = ((1, 0), (0, 1), (-1, 0), (0, -1))
    hq = [(l_list[0], sx, sy, 0)]
    is_visited_grid = [[False] * w for _ in range(h)]
    is_visited_grid[sy][sx] = True
    count_list = [0] * len(l_list)
    count_list[0] = 1

    while hq:
        c_l, cx, cy, c_idx = heappop(hq)

        for dx, dy in dx_dy_tuple:
            nx = cx + dx
            ny = cy + dy

            if 0 <= nx < w and 0 <= ny < h and not is_visited_grid[ny][nx]:
                is_visited_grid[ny][nx] = True
                if grid[ny][nx] <= c_l:
                    n_l = c_l
                    n_idx = c_idx
                else:
                    n_l = grid[ny][nx]
                    n_idx = l2idx_dic[n_l]

                count_list[n_idx] += 1
                heappush(hq, (n_l, nx, ny, n_idx))

    count_list = list(accumulate(count_list))
    return count_list


def calc_min_l(r, l0_list, l1_list, count0_list, count1_list):
    min_l = math.inf
    if count0_list[-1] >= r:
        min_l = l0_list[-1]
    if count1_list[-1] >= r:
        min_l = min(min_l, l1_list[-1])

    for idx0, l0 in enumerate(l0_list):
        d = r - count0_list[idx0]
        idx1 = bisect_left(count1_list, d)
        if idx1 <= len(count1_list) - 1:
            min_l = min(min_l, l0 + l1_list[idx1])

    return min_l


def main():
    if READ_FROM_FILE:
        f = open('test1.txt', 'r')
    else:
        f = sys.stdin

    while True:
        r = int(f.readline())
        if r == 0:
            break

        w0, h0, sx0, sy0 = map(int, f.readline().split())
        sx0 -= 1
        sy0 -= 1
        grid = [list(map(int, f.readline().split())) for _ in range(h0)]
        l0_list = list(set([grid[y][x] for x in range(w0) for y in range(h0)]))
        l0_list.sort()
        l2idx_dic = {}
        for i, l0 in enumerate(l0_list):
            l2idx_dic[l0] = i
        count_list0 = count_visitable_rooms(w0, h0, grid, sx0, sy0, l0_list, l2idx_dic)

        w1, h1, sx1, sy1 = map(int, f.readline().split())
        sx1 -= 1
        sy1 -= 1
        grid = [list(map(int, f.readline().split())) for _ in range(h1)]
        l1_list = list(set([grid[y][x] for x in range(w1) for y in range(h1)]))
        l1_list.sort()
        l2idx_dic = {}
        for i, l1 in enumerate(l1_list):
            l2idx_dic[l1] = i
        count_list1 = count_visitable_rooms(w1, h1, grid, sx1, sy1, l1_list, l2idx_dic)

        min_l = calc_min_l(r, l0_list, l1_list, count_list0, count_list1)
        print(min_l)

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

