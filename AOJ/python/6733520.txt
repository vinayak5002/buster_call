
class TreeNode: 
    def __init__(self, val, left=None, right=None):
        self.val = val 
        self.left = left 
        self.right = right

class Solution: 
    def buildTree(self, preorder: list(), inorder: list()) -> TreeNode: 
        if not preorder or not inorder: 
            return None 
        
        root = TreeNode(preorder[0])
        mid = inorder.index(preorder[0])
        root.left = self.buildTree(preorder[1:mid + 1], inorder[:mid])
        root.right = self.buildTree(preorder[mid + 1:], inorder[mid + 1:])
        return root 
    
    def postorder_tree_walk(self, root: TreeNode):
        if root.left != None: 
            self.postorder_tree_walk(root.left) 
        if root.right != None: 
            self.postorder_tree_walk(root.right)
        print(root.val, end=' ')
    
    def load_data(self): 
        num_nodes = int(input())
        # read preorder 
        prelist = input()
        inlist = input()

        preorder = list(map(int, prelist.split(' ')))
        inorder = list(map(int, inlist.split(' ')))
        return preorder, inorder

    def solution(self): 
        preorder, inorder = self.load_data()
        root = self.buildTree(preorder, inorder)
        self.postorder_tree_walk(root)

if __name__=='__main__': 
    Solution().solution()
    print()
