def solve():
    from sys import stdin
    from collections import deque
    
    INF = 300 * 300 + 1
    
    f_i = stdin
    H, W, N = map(int, f_i.readline().split())
    
    W += 2
    
    field = '#' * W
    for i in range(H):
        line = f_i.readline().rstrip()
        field += '#' + line + '#'
    field += '#' * W
    
    rec = dict()
    move = (1, -1, W, -W)
    
    # first search
    # Also create an adjacency list.
    r, c = map(int, f_i.readline().split())
    start = W * r + c
    rec[start] = 0
    q = deque()
    q.append((0, start))
    adj_left = dict()
    adj_right = dict()
    while q:
        dmg, pos = q.popleft()
        adj_left_pos = []
        adj_right_pos = []
        for m in move:
            next_pos = pos + m
            next_cell = field[next_pos]            
            if next_cell == '.':
                adj_left_pos.append(next_pos)
                if next_pos not in rec:
                    q.appendleft((dmg, next_pos))
                    rec[next_pos] = dmg
            elif next_cell == '@':
                adj_right_pos.append(next_pos)
                if next_pos not in rec:
                    new_dmg = dmg + 1
                    q.append((new_dmg, next_pos))
                    rec[next_pos] = new_dmg
        adj_left[pos] = tuple(adj_left_pos)
        adj_right[pos] = tuple(adj_right_pos)
    
    # serach after the second
    for i in range(N - 1):
        r, c = map(int, f_i.readline().split())
        start = W * r + c
        if start not in rec:
            return "-1 -1"
        
        tmp_rec = [INF] * len(field)
        tmp_rec[start] = 0
        q = deque()
        q.append(start)
        while q:
            pos = q.popleft()
            dmg = tmp_rec[pos]
            
            for next_pos in adj_left[pos]:
                if tmp_rec[next_pos] == INF:
                    tmp_rec[next_pos] = dmg
                    q.appendleft(next_pos)
            for next_pos in adj_right[pos]:
                if tmp_rec[next_pos] == INF:
                    tmp_rec[next_pos] = dmg + 1
                    q.append(next_pos)
        for pos, dmg in rec.items():
            if dmg < tmp_rec[pos]:
                rec[pos] = tmp_rec[pos]
    
    candidate = ((dmg, pos) for pos, dmg in rec.items() if field[pos] == '.')
    ans_dmg, ans_pos = min(candidate)
    ans_r = ans_pos // W
    ans_c = ans_pos % W
    return f'{ans_r} {ans_c}'

print(solve())
