// common part begin
#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfenv>
#include <cfloat>
#include <chrono>
#include <cinttypes>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <fstream>
#include <functional>
#include <initializer_list>
#include <iomanip>
#include <ios>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <streambuf>
#include <string>
#include <tuple>
#include <type_traits>
#include <typeinfo>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;
#define INF (1ll) << 60
#define rep(i, n) for (long long i = 0; i < n; i++)
#define all(v) v.begin(), v.end()
typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
void chmax(ll &a, ll b)
{
  if (a < b)
    a = b;
}
void chmin(ll &a, ll b)
{
  if (a > b)
  {
    a = b;
  }
}
// common part end
#define hi_ cout << "hi" << endl;
#define yes cout << "yes" << endl
#define no cout << "no" << endl
#define Yes cout << "Yes" << endl
#define No cout << "No" << endl
#define llV(name, size)                   \
  std::vector<long long> name(size);      \
  for (unsigned int i = 0; i < size; i++) \
  cin >> name[i]
#define die(x)       \
  cout << x << endl; \
  return 0;
class Print
{
public:
  Print() {}
};

void operator<<(Print p, vector<ll> v)
{
  for (auto i : v)
    cout << i << " ";
  cout << endl;
}

void operator<<(Print p, vector<vector<ll>> v)
{
  for (auto i : v)
  {
    for (auto j : i)
    {
      cout << j << " ";
    }
    cout << endl;
  }
}

void operator<<(Print p, ull x)
{
  cout << x << endl;
}
void operator<<(Print p, vector<ull> v)
{
  for (auto i : v)
    cout << i << " ";
  cout << endl;
}

void operator<<(Print p, vector<vector<ull>> v)
{
  for (auto i : v)
  {
    for (auto j : i)
    {
      cout << j << " ";
    }
    cout << endl;
  }
}

void operator<<(Print p, ll x)
{
  cout << x << endl;
}

void operator<<(Print p, string s)
{
  cout << s << endl;
}
void operator<<(Print p, vector<string> s)
{
  for (auto i : s)
    cout << i << endl;
}

void operator<<(Print p, vector<pair<pair<ll, ll>, ll>> v)
{
  for (auto i : v)
  {
    cout << i.first.first << " " << i.first.second << " " << i.second << endl;
  }
}
void operator<<(Print p, vector<pair<ll, pair<ll, ll>>> v)
{
  for (auto i : v)
  {
    cout << i.first << " " << i.second.first << " " << i.second.second << endl;
  }
}
void operator<<(Print p, pair<ll, ll> v)
{
  cout << v.first << " " << v.second << endl;
}

Print print;


template <typename X, typename M>
struct lazy_segment_tree
{
  using FX = function<X(X, X)>;
  using FA = function<X(X, M)>;
  using FM = function<M(M, M)>;
  int n;
  FX fx;
  FA fa;
  FM fm;
  const X ex;
  const M em;
  vector<X> node;
  vector<M> lazy;
  lazy_segment_tree(int n_, FX fx_, FA fa_, FM fm_, X ex_, M em_) : n(), fx(fx_), fa(fa_), fm(fm_), ex(ex_), em(em_), node(n_*4,ex_), lazy(n_ *4,em_)
  {
    ll x=1;
    while(n_>x)x*=2;
    n=x;
  }
  void set(int i, X x)
  {
    node[i + n - 1] = x;
  }
  void eval(int k)
  {
    if (lazy[k] != em)
    {
      if (k < n - 1)
      {
        lazy[2 * k + 1] = fm(lazy[2 * k + 1], lazy[k]);
        lazy[2 * k + 2] = fm(lazy[2 * k + 2], lazy[k]);
      }
      node[k] = fa(node[k], lazy[k]);
      lazy[k] = em;
    }
  }    

  void update(int l, int r, M x, int k, int n_l, int n_r)
  {
    eval(k);
    if (l <= n_l && n_r <= r)
    {
      lazy[k] = fm(lazy[k], x);
      eval(k);
    }
    else if (l < n_r && n_l < r)
    {
      update(l, r, x, k * 2 + 1, n_l, (n_l + n_r) / 2);
      update(l, r, x, k * 2 + 2, (n_l + n_r) / 2, n_r);
      node[k] = fx(node[2 * k + 1], node[2 * k + 2]);
    }
  }

  void update(int l, int r, M x)
  {
    update(l, r, x, 0, 0, n);
  }
  X query_sub(int l, int r, int k, int n_l, int n_r)
  {
    eval(k);
    if (n_r <= l || r <= n_l)
    {
      return ex;
    }
    else if (l <= n_l && n_r <= r)
    {
      return node[k];
    }
    else
    {
      X vl = query_sub(l, r, 2 * k + 1, n_l, (n_l + n_r) / 2);
      X vr = query_sub(l, r, 2 * k + 2, (n_l + n_r) / 2, n_r);
      return fx(vl, vr);
    }
  }

  X query(int l, int r)
  {
    return query_sub(l, r, 0, 0, n);
  }
};
/* SegTreeLazy<X,M>(n,fx,fa,fm,ex,em): モノイド(集合X, 二項演算fx,fa,fm, 単位元ex,em)についてサイズnで構築
    set(int i, X x), build(): i番目の要素をxにセット。まとめてセグ木を構築する。O(n)
    update(i,x): i 番目の要素を x に更新。O(log(n))
    query(a,b):  [a,b) 全てにfxを作用させた値を取得。O(log(n))
*/
template <typename X, typename M>
struct SegTreeLazy {
    using FX = function<X(X, X)>;
    using FA = function<X(X, M)>;
    using FM = function<M(M, M)>;
    int n;
    FX fx;
    FA fa;
    FM fm;
    const X ex;
    const M em;
    vector<X> dat;
    vector<M> lazy;
    SegTreeLazy(int n_, FX fx_, FA fa_, FM fm_, X ex_, M em_)
        : n(), fx(fx_), fa(fa_), fm(fm_), ex(ex_), em(em_), dat(n_ * 4, ex), lazy(n_ * 4, em) {
        int x = 1;
        while (n_ > x) x *= 2;
        n = x;
    }

    void set(int i, X x) { dat[i + n - 1] = x; }
    void build() {
        for (int k = n - 2; k >= 0; k--) dat[k] = fx(dat[2 * k + 1], dat[2 * k + 2]);
    }

    /* lazy eval */
    void eval(int k) {
        if (lazy[k] == em) return;  // 更新するものが無ければ終了
        if (k < n - 1) {            // 葉でなければ子に伝搬
            lazy[k * 2 + 1] = fm(lazy[k * 2 + 1], lazy[k]);
            lazy[k * 2 + 2] = fm(lazy[k * 2 + 2], lazy[k]);
        }
        // 自身を更新
        dat[k] = fa(dat[k], lazy[k]);
        lazy[k] = em;
    }

    void update(int a, int b, M x, int k, int l, int r) {
        eval(k);
        if (a <= l && r <= b) {  // 完全に内側の時
        
            lazy[k] = fm(lazy[k], x);
            eval(k);
        } else if (a < r && l < b) {  
                             // 一部区間が被る時
 
            update(a, b, x, k * 2 + 1, l, (l + r) / 2);  // 左の子
            update(a, b, x, k * 2 + 2, (l + r) / 2, r);  // 右の子
            dat[k] = fx(dat[k * 2 + 1], dat[k * 2 + 2]);
        }
    }
    void update(int a, int b, M x) { update(a, b, x, 0, 0, n); }

    X query_sub(int a, int b, int k, int l, int r) {
        eval(k);
        if (r <= a || b <= l) {  // 完全に外側の時
            return ex;
        } else if (a <= l && r <= b) {  // 完全に内側の時
            return dat[k];
        } else {  // 一部区間が被る時
            X vl = query_sub(a, b, k * 2 + 1, l, (l + r) / 2);
            X vr = query_sub(a, b, k * 2 + 2, (l + r) / 2, r);
            return fx(vl, vr);
        }
    }
    X query(int a, int b) { return query_sub(a, b, 0, 0, n); }
};
int main()
{
  cin.tie(0);
ios::sync_with_stdio(false);
  ll n, q;
  cin >> n >> q;
  lazy_segment_tree<ll, ll> seg(
      n, [](ll x, ll y)
      { return min(x, y); },
      [](ll x, ll y)
      { return y; },
      [](ll x, ll y)
      { return y; },4,4);
  SegTreeLazy<ll, ll> seg2(
      n, [](ll x, ll y)
      { return min(x, y); },
      [](ll x, ll y)
      { return y; },
      [](ll x, ll y)
      { return y; },4,4);
  
      // pow(2, 31) - 1, pow(2, 31) - 1);
  rep(i, q)
  {
    ll flag;
    cin >> flag;
    if (flag==0)
    {
      ll s, t, x;
      cin >> s >> t >> x;
      seg.update(s, t+1, x);
      seg2.update(s,t+1,x);
      // print<<seg.lazy;
      // print<<seg2.lazy;
      // print<<seg.node;
      // print<<seg2.dat;
      // cout<<endl;

    }
    else
    {
      ll s, t;
      cin >> s >> t;
      print << seg.query(s, t+1);
    }
  }
}
