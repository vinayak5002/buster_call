/* create at 2022.06.03 */
// #pragma GCC optimize(2)
// #pragma GCC optimize(3,"Ofast","inline")
#include<bits/stdc++.h>
using namespace std;
#define rep(i, x, y) for(int i = (int)x; i < (int)y; ++ i)
#define _rep(i, x, y) for(int i = (int)x; i > (int)y; -- i)
#define PII pair<int,int>
#define eb emplace_back
#define pb push_back
#define fi first
#define se second
#define PQ priority_queue
#define lb lower_bound
#define ub upper_bound
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define SZ(x) (int)(x).size()
typedef long long ll;
typedef vector<int> VI;
typedef vector<VI> VII;
typedef vector<ll> VL;
typedef vector<vector<ll>> VLL;
constexpr int mod = 1e9 + 7;
constexpr int KINF = 0x3f3f3f3f;
template <typename T> static constexpr T INF = numeric_limits<T>::max() / 2;
template <class T> auto vect(const T& v, int n) { return vector<T>(n, v); }
template <class T, class... D> auto vect(const T& v, int n, D... m) {
  return vector<decltype(vect(v, m...))>(n, vect(v, m...));
}
template <class T> void out(const vector<T>& a){ 
	for(int i = 0; i < SZ(a); ++ i) cout << a[i] << " \n"[i == SZ(a) - 1]; 
}
template <class T> void out(const T* a, int n){ 
	for(int i = 0; i < n; ++ i) cout << a[i] << " \n"[i == n - 1]; 
}
template <typename T>
void debug(string_view name, const T & x) {
 	cerr << name << " = " << x << "\n";
}
template <typename T, typename... Ts>
void debug(string_view name, const T & x, const Ts&... others) {
	size_t pos = name.find(',');
	cerr << name.substr(0, pos) << " = " << x << ",";
	debug(name.substr(pos + 1), others...);
}
using db = long long;
struct P{
	ll x, y;
	P(ll _x, ll _y) : x(_x), y(_y){}
	P(){}
};
using L = pair<P,P>;

struct Circle{
	P o;
	db r;
	Circle(){}
};
db len2(const P& a, const P& b){
	return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y); 
}
db len(const P& a, const P& b){
	return sqrt(len2(a, b));
}
int main(){
	ios::sync_with_stdio(false); cin.tie(nullptr), cout.tie(nullptr);
	cout << fixed << setprecision(11);
	Circle c1, c2;
	cin >> c1.o.x >> c1.o.y >> c1.r;
	cin >> c2.o.x >> c2.o.y >> c2.r;
	if(len2(c1.o, c2.o) > (c1.r + c2.r) * (c1.r + c2.r)){
		cout << 4 << "\n";
	}
	else if(len2(c1.o, c2.o) == (c1.r + c2.r) * (c1.r + c2.r)){
		cout << 3 << "\n";
	}
	else if(len(c1.o, c2.o) + min(c1.r, c2.r) > max(c1.r, c2.r)){
		cout << "2\n";
	}
	else if(len(c1.o, c2.o) + min(c1.r, c2.r) == max(c1.r, c2.r)){
		cout << "1\n";
	}
	else cout << "0\n";
	return 0;
} 
// 小心左移运算符导致的int溢出
// dp记得处理非法状态
// resize并不会初始化数组
// 全局函数一定要记得inline
// 带空格字符串不能直接cin,要用getline
// 最好用"\n"代替endl


