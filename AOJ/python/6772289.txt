//    https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=GRL_1_A
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Scanner;


public class Main {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		//入力受け取り
		int v = sc.nextInt();
		int e = sc.nextInt();
		int r = sc.nextInt();

		//エッジ用リスト
		//[自分のノード番号][隣接しているノードたち][隣接しているノードまでの距離, 隣接しているノード番号]
		ArrayList<ArrayList<ArrayList<Integer>>> rel = new ArrayList<ArrayList<ArrayList<Integer>>>();
		for (int i = 0; i < v; i++) rel.add(new ArrayList<ArrayList<Integer>>());

		//エッジ入力受け取り、隣接リスト構築(有向グラフ)
		for (int i = 0; i < e; i++) {
			int s = sc.nextInt();
			int t = sc.nextInt();
			int d = sc.nextInt();
			rel.get(s).add(new ArrayList<>(Arrays.asList(t, d)));
		}
		
		//指定地点からの最短距離(指定地点のみ0、その他は無限で初期化)
		int distFromR[] = new int[v];
		Arrays.fill(distFromR, Integer.MAX_VALUE);
		distFromR[r] = 0;

		//ノードの探索可フラグ
		boolean[] lookable = new boolean[v];
		Arrays.fill(lookable, true);
		
		//ダイクストラ法用の優先度付きキュー
		//比較キーを指定地点からの距離に指定
		PriorityQueue<List<Integer>> queue = new PriorityQueue<>(new Comparator<List>() {
			@Override
			public int compare(List a, List b) {
				return (int)a.get(0) > (int)b.get(0) ? 1 : a.get(0) == b.get(0) ? 0 : -1;
			}
		});

		//初期位置をキューに入れる
		queue.add(List.of(0, r));

		//キューが無くなるまで
		while (!queue.isEmpty()) {
			//現在地をキューから取り出し現在地を探索済みに
			List<Integer> now = queue.poll();
			lookable[now.get(1)] = false;
			//隣接しているノードを探索
			for (ArrayList<Integer> i : rel.get(now.get(1))) {
				//そのノードが探索済みでないなら距離を更新し優先度付きキューに追加
				if (lookable[i.get(0)]) {
					distFromR[i.get(0)] = Math.min(distFromR[now.get(1)] + i.get(1), distFromR[i.get(0)]);
					queue.add(List.of(distFromR[i.get(0)], i.get(0)));
				}
			}
		}

		//各ノードの距離を出力(初期位置と連結出ないなら"INF"を出力)
		int ans = 0;
		for (int i : distFromR) ans += i;
		System.out.println(ans);
	}
}
