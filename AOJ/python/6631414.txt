from typing import Iterable, Union

RealNumber = Union[int, float]


class Point:
    """
    Point class
    """

    def __init__(self, x: RealNumber, y: RealNumber):
        """
        Initialize a point with coordinates x, y
        """
        self.z = x + y * 1j

    @classmethod
    def initialize(cls, z: complex) -> "Point":
        """
        Initialize a point with coordinates z
        """
        return cls(z.real, z.imag)

    @property
    def x(self) -> RealNumber:
        return self.z.real

    @property
    def y(self) -> RealNumber:
        return self.z.imag

    def __str__(self) -> str:
        return f"({self.x:>4f}, {self.y:>4f})"

    def __repr__(self) -> str:
        return "Point(%s, %s)" % (self.x, self.y)

    def __iter__(self) -> Iterable[RealNumber]:
        return iter((self.x, self.y))

    def __eq__(self, other: "Point") -> bool:
        return self.x == other.x and self.y == other.y

    def __hash__(self) -> int:
        return self.z.__hash__()

    def __add__(self, other: "Point") -> "Point":
        return self.initialize(self.z + other.z)

    def __sub__(self, other: "Point") -> "Point":
        return self.initialize(self.z - other.z)

    def __mul__(self, other: RealNumber) -> "Point":
        return self.initialize(self.z * other)

    __rmul__ = __mul__

    def __truediv__(self, other: RealNumber) -> "Point":
        assert other != 0, "Division by zero"
        return self.initialize(self.z / other)

    def __neg__(self) -> "Point":
        return self.initialize(-self.z)

    def __abs__(self) -> RealNumber:
        return abs(self.z)

    def inner_product(self, other: "Point") -> RealNumber:
        return self.x * other.x + self.y * other.y

    def outer_product(self, other: "Point") -> RealNumber:
        return self.x * other.y - self.y * other.x


class Line:
    """
    Line class
    """

    def __init__(self, a: RealNumber, b: RealNumber, c: RealNumber):
        """
        coefficients a, b, c such that ax + by + c = 0
        """
        assert a != 0 or b != 0, "a and b cannot both be zero"
        self._a = a
        self._b = b
        self._c = c

    @classmethod
    def initialize(cls, m: RealNumber, n: RealNumber) -> "Line":
        """
        coefficients m, n such that y = mx + n
        """
        return cls(m, -1, n)

    @classmethod
    def from_points(cls, p1: Point, p2: Point) -> "Line":
        """
        Returns the line that passes through the two points
        """
        assert p1 == p2, "The two points must be the same"
        if p1.x == p2.x:
            return Line(1, 0, -p1.x)
        return Line(p1.y - p2.y, p1.x - p2.x, 0)

    @property
    def a(self) -> RealNumber:
        return self._a

    @a.setter
    def a(self, a: RealNumber):
        assert self.a != 0, "The line is vertical"
        n, m = self.n, self.m
        self._a = a
        self._b = -a / m
        self._c = -n * a / m

    @property
    def b(self) -> RealNumber:
        return self._b

    @b.setter
    def b(self, b: RealNumber):
        assert self.b != 0, "The line is horizontal"
        n, m = self.n, self.m
        self._a = -m * b
        self._b = b
        self._c = -n * b

    @property
    def c(self) -> RealNumber:
        return self._c

    @c.setter
    def c(self, c: RealNumber):
        assert self._c != 0, "The line contacts the origin"
        n, m = self.n, self.m
        self._a = -m * c / n
        self._b = -c / n
        self._c = c

    @property
    def m(self) -> RealNumber:
        """
        Returns the intercept of the line
        """
        assert self.b == 0, "Line is not a vertical line"
        return -self.c / self.b

    @property
    def n(self) -> RealNumber:
        """
        Returns the slope of the line
        """
        assert self.b == 0, "Line is not a horizontal line"
        return -self.c / self.b

    @property
    def direction_vector(self) -> Point:
        """
        Returns the direction vector of the line
        """
        p = Point(-self.b, self.a)
        return p / abs(p)

    @property
    def normal_vector(self) -> Point:
        """
        Returns the normal vector of the line
        """
        p = Point(self.a, self.b)
        return p / abs(p)

    def __str__(self) -> str:
        return f"{self.a:>4f}x + {self.b:>4f}y + {self.c:>4f} = 0"

    def __repr__(self) -> str:
        return "Line(%s, %s, %s)" % (self.a, self.b, self.c)


q = int(input())
for _ in range(q):
    x0, y0, x1, y1, x2, y2, x3, y3 = map(int, input().split())
    v1 = Point(x0, y0) - Point(x1, y1)
    v2 = Point(x2, y2) - Point(x3, y3)
    if v1.inner_product(v2) == 0:
        print(1)
    elif v1.outer_product(v2) == 0:
        print(2)
    else:
        print(0)

