const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
    let n = si[0];
    array = [];
    for (let i = 0; i < n; i++) {
        array[i] = i + 1;// 配列は初項1
    }
    array = getPerm_enum(array, n);
    array = arr_to_str(array);
    console.log(array);
}


function getPerm_enum(array, rec) {
    // 順列を列挙する.
    // 参考: https://qiita.com/hinaqiita/items/3cc8a2951b0da6b08fce
    let result = [];

    if (rec === 1) {// 残った1つの要素を別々の配列に分ける
        for (let i = 0; i < array.length; i++) {
            result[i] = array[i];
        }
        return result;
    }

    for (let i = 0; i < array.length; i++) {
        let parts = array.slice();
        parts.splice(i, 1)// 要素を1つ除く.
        let tmp = getPerm_enum(parts, rec - 1);// 再帰: 残り2個になるまで要素を除く操作を繰り返す.
        for (let j = 0; j < tmp.length; j++) {
            result.push([array[i]].concat(tmp[j]));// 配列resultに
        }
    }

    return result;
};

function arr_to_str(array) {
    // 配列から文字列へと変換（非破壊的）
    let str = "";

    for (let i = 0; i < kaijo(array[1].length); i++) {
        for (let j = 0; j < array[1].length; j++) {
            str += array[i][j];
            if (j < array[1].length - 1) {
                str += " ";
            }
        }
        str += "\n"
    }
    return str;
}

function kaijo(n) {
    // 引数（整数）を階乗にする（破壊的）.
    let factorial = n;
    for (let i = 1; i < n; i++) {
        factorial *= n - i
    }
    return factorial;
}
