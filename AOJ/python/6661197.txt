// #define _GLIBCXX_DEBUG

#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define rep2(i, k, n) for (decltype(n) i = k; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i--)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i--)
#define repr2(i, k, n) for (decltype(n) i = n; i >= k; i--)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret;};
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret;};
template<typename T> using pq_inv = priority_queue<T, vector<T>, greater<T>>;



struct Solver{
    bool bisect(vector<int>&S, int x ){
        int l=-1, r=S.size();
        while(r-l>1){
            int mid= l + (r-l)/2;
            if(S[mid]>=x) r=mid;
            else l=mid;
        }
        return S[r]==x;
    }
    void solve(){
        int n;
        cin >> n;
        vector<int> S(n);
        rep(i,n) cin >> S[i];
        sort(S.begin(), S.end());
        int q;
        cin >> q;
        int ans=0;
        rep(i,q){
            int x;
            cin >> x;
            if(bisect(S,x))ans++;
        }
        cout << ans << endl;
    };
};

int main() {
    std::cin.tie(nullptr);
    Solver solver;
    solver.solve();
    return 0;
}


