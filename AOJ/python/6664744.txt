//L
#include<bits/stdc++.h>
using namespace std;
const int N=10005;
struct node{
	int fa;
	int l,r;
}tree[N];
int n,D[N],H[N];
 
void setdepth(int u,int d){
	if(u==-1) return ;
	D[u]=d;
	setdepth(tree[u].l,d+1);
	setdepth(tree[u].r,d+1);
}
 
int sethight(int u){
	int h1=0,h2=0;
	if(tree[u].l!=-1)
       h1=sethight(tree[u].l)+1;
	if(tree[u].r!=-1)
	   h2=sethight(tree[u].r)+1;
	return H[u]=( h1 > h2 ? h1 : h2);       
}
 
int getsibling(int u){
	if(tree[u].fa==-1) return -1;
	if(tree[tree[u].fa].l!=u&&tree[tree[u].fa].l!=-1) return tree[tree[u].fa].l;
	if(tree[tree[u].fa].r!=u&&tree[tree[u].fa].r!=-1) return tree[tree[u].fa].r;
	return -1;
}
void print(int u){
	printf("node %d: ",u);
	printf("parent = %d, ",tree[u].fa);
	printf("sibling = %d, ",getsibling(u));
	int deg=0;
	if(tree[u].l!=-1) deg++;
	if(tree[u].r!=-1) deg++;
	printf("degree = %d, ",deg);
	printf("depth = %d, ",D[u]);
	printf("height = %d, ",H[u]);
	if(tree[u].fa==-1){
		printf("root\n");
	} else if(tree[u].l==-1&&tree[u].r==-1){
		printf("leaf\n");
	} else{
		printf("internal node\n");
	}
}
 
int main(){
	int v,l,r,root=0;
    scanf("%d",&n);
	for(int i=0;i<n;i++) tree[i].fa=-1;
	for(int i=0;i<n;i++){
		scanf("%d %d %d",&v,&l,&r);
		tree[v].l=l;
		tree[v].r=r;
		if(l!=-1) tree[l].fa=v;
		if(r!=-1) tree[r].fa=v;
	}
	for(int i=0;i<n;i++){
		if(tree[i].fa==-1) root=i;
	}
	setdepth(root,0);
	sethight(root);
	for(int i=0;i<n;i++){
		print(i);
	}
	return 0;
}
