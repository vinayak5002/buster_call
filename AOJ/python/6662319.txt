// https://qiita.com/DaikiSuyama/items/9dba963ba74396b9b7fd
// https://luling.hatenablog.com/entry/2018/12/01/212805
// https://zenn.dev/antyuntyun/articles/atcoder-cpp-template
//
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

// rep macro
#define reps(i, a, n) for (ll i = (a); i < (ll)(n); ++i)
#define rreps(i, a, n) for (ll i = (a); i > (ll)(n); --i)
#define rep(i, n) reps(i, 0, n)
#define rrep(i, n) reps(i, 1, n + 1)
#define repd(i,n) for(ll i=n-1;i>=0;i--)
#define rrepd(i,n) for(ll i=n;i>=1;i--)

#define optimize_cin() cin.tie(0); ios::sync_with_stdio(false)

#define pb push_back
#define mp make_pair
#define all(obj) (obj).begin(), (obj).end()
#define YESNO(bool) if(bool){cout<<"YES"<<endl;}else{cout<<"NO"<<endl;}
#define yesno(bool) if(bool){cout<<"yes"<<endl;}else{cout<<"no"<<endl;}
#define YesNo(bool) if(bool){cout<<"Yes"<<endl;}else{cout<<"No"<<endl;}

//定数
#define INF32 2147483647           // 2.147483647 x 10^{9}:32bit整数のinf
#define INF64 9223372036854775807  // 9.22337203685477580 x 10^{18}:64bit整数のinf
#define MOD 1000000007             //問題による
#define PI 3.14159265359           // 円周率

//略記
#define F first
#define S second

//出力(空白区切りで昇順に)
#define dump(x)                                                 \
  for (auto i = x.begin(); i != --x.end(); i++) cout << *i << " "; \
  cout << *--x.end() << endl;
#define echo(x) cout << (x) << endl;

#define dumpMatrix(ms, row, col) \
for (auto i = 0; i < row; i++) { \
  for (auto j = 0; j < col; j++) { \
    if (j != 0) cout << " "; \
    cout << ms[i][j]; \
  } \
  cout << endl; \
}

// aをbで割る時の繰上げ,繰り下げ
ll _ceil(ll a, ll b) { return (a + (b - 1)) / b; }
ll _floor(ll a, ll b) { return a / b; }

// 大きい方、小さい方を残す
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }

// 参考 : https://algo-logic.info/dijkstra/#:~:text=%E3%82%B0%E3%83%A9%E3%83%95%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%8D%98%E4%B8%80%E5%A7%8B%E7%82%B9,%E6%B1%82%E3%82%81%E3%82%8B%E5%95%8F%E9%A1%8C%E3%81%AE%E3%81%93%E3%81%A8%E3%81%A7%E3%81%99%E3%80%82

struct Edge {
  ll from, to, cost;
  // コストの大小で順序付け
  bool operator<(const Edge &o) const { return cost < o.cost; }
};

void dumpEdge(Edge &e) {
  cout << e.from << " " << e.to << " " << e.cost << endl;
}

using P = pair<long, int>;

struct Graph {
  int n;               // 頂点数
  vector<vector<Edge>> edges;  // 辺集合
  Graph(ll _n) : n(_n) {}
  // 開始点"s"を起点とする各点までの最短距離を算出する
  vector<ll> dijkstra(int s) {
    vector<ll> dis(n, INF32);
    // 仮の最短距離、頂点の順に昇順に並ぶ
    priority_queue<P, vector<P>, greater<P>> pq;
    dis[s] = 0;
    pq.emplace(dis[s], s);
    while (!pq.empty()) {
      P p = pq.top();
      pq.pop();
      int v = p.second;
      if (dis[v] < p.first) {
        // 最短距離でなければ無視
        continue;
      }
      for (auto &e: edges[v]) {
        if (dis[e.to] > dis[v] + e.cost) {
          // 最短距離候補ならばキューに積む
          dis[e.to] = dis[v] + e.cost;
          pq.emplace(dis[e.to], e.to);
        }
      }
    }
    return dis;
  }
};

signed main() {
  int n;
  cin >> n;
  Graph gs(n);
  gs.edges.resize(n);
  rep(i, n) {
    int from;
    cin >> from;
    int m;
    cin >> m;
    rep(j, m) {
      int to;
      cin >> to;
      int cost;
      cin >> cost;
      Edge edge = {from, to, cost};
      gs.edges[from].push_back(edge);
    }
  }
  //
  auto ds = gs.dijkstra(0);
  rep(i, ds.size()) {
    cout << i << " " << ds[i] << endl;
  }
}

