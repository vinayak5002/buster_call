class Gasoline{
    private int[] queue=new int[10000];    
    public int head=0;
    public int tail=0;

    Gasoline(){
	int[] queue=new int[10000];
	this.head=0;
	this.tail=0;
    }

    void enqueue(int x){
	queue[this.tail]=x;
	this.tail++;
    }

    int dequeue(){
	return queue[this.head++];
    }

    int head(){
        return this.head;
    }    

    int tail(){
        return this.tail;
    }
    
}

import java.util.Scanner;

class GasolineApplication{
    public static void main(String[] args){
	Scanner sc = new Scanner(System.in);
	int N=sc.nextInt();
	int M=sc.nextInt();
	int i=0;
	int x=0;
	int car=0;
	int l=0;
	int min=10000;
	int y=0;
	int j=0;
	int t=0;
	int a=0;
	int k=0;
	Gasoline[] lane = new Gasoline[N];
		for(i=0;i<N;i++){
		    lane[i]=new Gasoline();	
		}

		for(i=0;i<M;i++){
			j=0;
			min=10000;
		    if((x=sc.nextInt())==0){
			l=sc.nextInt();
			System.out.println(lane[l-1].dequeue());
		    }

		    else if(x==1){
			car=sc.nextInt();
			for(k=1;k<=N;k++){
			    if(lane[k-1].head()==lane[k-1].tail()){
				lane[k-1].enqueue(car);
				j=1;
				break;
			    }
			}
			if(j==1)continue;
			else if(j==0){
				for(k=1;k<=N;k++){
				    t=lane[k-1].tail()-lane[k-1].head();
				    a+=t;
				    if(min>t){
					min=t;
					y=k;
			    	}
				}

				if(a/N==min){
			    	lane[0].enqueue(car);
				}
				else lane[y-1].enqueue(car);
			    }
			}
	    }
	}
}
