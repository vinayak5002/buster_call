// #define _GLIBCXX_DEBUG

#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define rep2(i, k, n) for (decltype(n) i = k; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i--)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i--)
#define repr2(i, k, n) for (decltype(n) i = n; i >= k; i--)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret;};
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret;};
template<typename T> using pq_inv = priority_queue<T, vector<T>, greater<T>>;



struct Solver{
    vector<vector<int>> graph;
    vector<int> visited,completed;
    void dfs(int v, int& count){
        visited[v]=count++;
        for(auto&& e:graph[v]){
            if(visited[e]==1)continue;
            dfs(e, count);
        }
        completed[v]=count++;
    }
    
    void solve(){
        int n;
        cin >> n;
        graph.resize(n);
        visited.resize(n);
        completed.resize(n);
        rep(i,n){
            int v,k;
            cin >> v >> k;
            v--;
            rep(j,k){
                int x;
                cin >> x;
                x--;
                graph[v].push_back(x);
            }
        }
        for(auto&& e:graph)sort(e.begin(), e.end());
        int count=1;
        dfs(0,count);
        rep(i,n){
            cout << i+1 << ' ' << visited[i] << ' ' << completed[i] << endl;
        }
    };
};

int main() {
    std::cin.tie(nullptr);
    Solver solver;
    solver.solve();
    return 0;
}


