import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

class Main{
     public static void main(String[] args){
         Scanner s = new Scanner(System.in);
         int n = s.nextInt(),c = 0;
         List<String> bool = new ArrayList<String>();
         List<Long> dic = new ArrayList<Long>();
         for(int i=0;i<n;i++){
            String order = s.next();
            String str = s.next();
            char ch = order.charAt(0);
            if(ch == 'i'){
                long LONG = convert(str);
                insert(dic,LONG);
            }else if(ch == 'f'){
                bool.add(find(dic,convert(str)));
            }
        }
        for(int i=0;i<bool.size();i++){
                System.out.println(bool.get(i));
        }
    }

    static String find(List<Long> str,long key){
        String y = "yes";
        String n = "no";
        int left = 0;
        int right = str.size();
        while(left < right){
            int mid = (left + right) / 2;
            if(str.get(mid) == key){
                return y;
            }else if(key < str.get(mid)){
                right = mid;
            }else left = mid + 1;
        }
        return n;
    }

    static long convert(String str){
        long a = 0;
        StringBuilder s = new StringBuilder();
        for(int i=0;i<str.length();i++){
            char ch = str.charAt(i);
            switch(ch){
                case 'A': s.append("1"); break;
                case 'C': s.append("2"); break;
                case 'G': s.append("3"); break;
                case 'T': s.append("4"); break;
            }
        }
        a = Long.parseLong(s.toString());
        return a;
    }

    static void insert(List<Long> list,long key){
        if(list.size() == 0){
            list.add(key);
            return;
        }
        if(list.size() == 1){
            if(list.get(0) <= key){
                list.add(key);
            }else list.add(0,key);
        }
        int left = 0;
        int right = list.size();
        while(left < right){
            int mid = (left + right) / 2;
            if(list.get(mid) == key){
                list.add(mid,key);
                return;
            }else if(key < list.get(mid)){
                if(mid != 0 && key >= list.get(mid-1)){
                    list.add(mid,key);
                    return;
                }else if(mid == 0){
                    list.add(mid,key);
                }
                right = mid;
            }else {
                if(mid == right-1){
                    list.add(key);
                    return;
                } 
                left = mid + 1;
            }
        }
        
    }
}
