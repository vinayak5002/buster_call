import sys
input = lambda: sys.stdin.readline().rstrip()


# import pypyjit
# pypyjit.set_param('max_unroll_recursion=-1')
from collections import defaultdict
class UnionFind():
  def __init__(self, n):
    self.n = n
    self.parents = [-1] * n

  def find(self, x):
    if self.parents[x] < 0:
      return x
    else:
      self.parents[x] = self.find(self.parents[x])
      return self.parents[x]

  def unite(self, x, y):
    x = self.find(x)
    y = self.find(y)
    if x == y:
      return
    if self.parents[x] > self.parents[y]:
      x, y = y, x
    self.parents[x] += self.parents[y]
    self.parents[y] = x

  def size(self, x):
      return -self.parents[self.find(x)]

  def same(self, x, y):
      return self.find(x) == self.find(y)

  def members(self, x):
      root = self.find(x)
      return [i for i in range(self.n) if self.find(i) == root]

  def roots(self):
      return [i for i, x in enumerate(self.parents) if x < 0]

  def group_count(self):
      return len(self.roots())

  def all_group_members(self):
    group_members = defaultdict(list)
    for member in range(self.n):
      group_members[self.find(member)].append(member)
    return group_members

  def __str__(self):
    return '\n'.join(f'{r}: {m}' for r, m in self.all_group_members().items())


##################

n, m = map(int, input().split())
E = []
for _ in range(m):
  s, t, w = map(int, input().split())
  s -= 1
  t -= 1
  E.append((s, t, w))
E.sort(key=lambda x:x[2])
ans = 0
uf = UnionFind(n+10)
for s,t,w in E:
  if uf.same(s, t):
    continue
  uf.unite(s, t)
  ans += w
print(ans)

