use std::io;

fn main() {
    let mut metadata = String::new();
    io::stdin().read_line(&mut metadata).ok();
    let metadata: Vec<u8> = metadata.trim().split_whitespace().map(|s| s.parse::<u8>().unwrap()).collect();

    let mut matrix_nm: Vec<Vec<u32>> = Vec::new();
    let mut vector_m1: Vec<u32> = Vec::new();

    for _ in 0..metadata[0] {
        let mut input = String::new();
        io::stdin().read_line(&mut input).ok();
        let input: Vec<u32> = input.trim().split_whitespace().map(|s| s.parse::<u32>().unwrap()).collect();
        matrix_nm.push(input);
    }

    for _ in 0..metadata[1] {
        let mut input = String::new();
        io::stdin().read_line(&mut input).ok();
        let input: u32= input.trim().parse().unwrap();
        vector_m1.push(input);
    }

    let mut product: Vec<u32> = Vec::new();
    
    for i in 0..metadata[0] {
        let mut item: u32 = 0;
        for j in 0..metadata[1] {
          item += matrix_nm[i as  usize][j as usize] * vector_m1[j as usize];
        }
        product.push(item);
    }
    
    // output
    for i in 0..product.len() {
        println!("{}", product[i as usize]);
    }
    
}

