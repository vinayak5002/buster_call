from collections import Counter, defaultdict, deque
import itertools
import re
import math
from functools import reduce
import operator
import bisect
from heapq import *
import functools

mod=998244353

import sys
input = sys.stdin.readline
n=int(input())
xl = []
yl = []
def compress(mylist):
    B = list(set(mylist))
    B.sort()
    D = { v: i for i, v in enumerate(B) }
    return list(map(lambda v: D[v], mylist)),B
for _ in range(n):
    x1,y1,x2,y2 = map(int,input().split())
    xl.append(x1)
    yl.append(y1)
    xl.append(x2)
    yl.append(y2)
cmpxl,xD = compress(xl)
cmpyl,yD = compress(yl)
maxl = max(cmpxl)
mayl = max(cmpyl)
imos = [[0] * (mayl+1) for _ in range(maxl+1)]
for i in range(n):
    x1 = cmpxl[2 * i]
    x2 = cmpxl[2 * i + 1]
    y1 = cmpyl[2 * i]
    y2 = cmpyl[2 * i + 1]
    imos[x2][y2] += 1
    imos[x1][y2] -= 1
    imos[x2][y1] -= 1
    imos[x1][y1] += 1
for i in range(mayl+1):
    for j in range(1,maxl+1):
        imos[j][i] += imos[j-1][i]
for i in range(maxl+1):
    for j in range(1,mayl+1):
        imos[i][j] += imos[i][j-1]
ans = 0
for i in range(maxl):
    for j in range(mayl):
        if imos[i][j]:
            ans += (xD[i+1] - xD[i]) * (yD[j+1] - yD[j])
print(ans)
