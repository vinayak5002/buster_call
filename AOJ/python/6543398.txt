import java.io.*;
import java.util.*;
import java.math.BigDecimal;
import java.lang.Object;
import java.util.function.*;

public class Main {
  public static void main(String[] args){
      int n,m,w,p,q,h,s=0,t,ans=0,mx,mn,sum,cnt,now;
      //int[] a=new int[100000],b=new int[8];
      int[][] c = new int[200][200];
      boolean flag;
      ArrayList<String> str=new ArrayList<String>();
      Scanner scanner =new Scanner(System.in);
      ArrayList<Integer>vec=new ArrayList<Integer>();
      while(true){
        str=new ArrayList<String>();
        n=Integer.parseInt(scanner.next());
        m=Integer.parseInt(scanner.next());
        if(n==0&&m==0)break;
        for(int i=0;i<m;i++)str.add(scanner.next());
        System.out.println(dfs(str,0,n));
      }
    }
  public static int dfs(ArrayList<String> str,int mask,int n){
    int ret=100;
    ArrayList<String>L=new ArrayList<String>(),R=new ArrayList<String>();
    if(str.size()==1)return 0;
    for(int i=0;i<n;i++){
      if((mask&(1<<i))==0){
        L=new ArrayList<String>();R=new ArrayList<String>();
        for(int j=0;j<str.size();j++){
          if(str.get(j).charAt(i)=='0')L.add(str.get(j));
          else R.add(str.get(j));
        }
          if(L.size()==str.size()||L.size()==0)continue;
          ret=Math.min(ret,Math.max(dfs(L,mask+(1<<i),n),dfs(R,mask+(1<<i),n)));
      }
    }
    if(ret==100)return -1;
    return ret+1;
  }
  public interface Compare<T>{
	  public boolean func(T x,T y);
  }
  static String swap(String str, int i, int j){
      char ch[] = str.toCharArray();
      char tempo = ch[i];
      ch[i] = ch[j];
      ch[j] = tempo;
      return new String(ch);
  }
static class Pair<T,E>{
    T first;
    E second;
    public Pair(T a,E b){
      first=a;
      second=b;
    }
    public Pair(Pair<T,E>x){
      first=x.first;
      second=x.second;
    }
    public Pair(){}
    void print(){
      System.out.println("first:"+first+" second:"+second);
    }
  }
  public static <T> ArrayList<T> sort(ArrayList<T> x, Compare<T> comp,int l,int r){
    //[l,r)
    ArrayList<T>ret=new ArrayList<T>();
    if(l-r==2){
      if(comp.func(x.get(l),x.get(l+1))==false){
        ret.add(x.get(l+1));
        ret.add(x.get(l));
        return ret;
      }
      ret.add(x.get(l));
      ret.add(x.get(l+1));
      return ret;
    }
    if(r-l==1){
      ret.add(x.get(l));
      return ret;
    }
    ArrayList<T> A=sort(x,comp,l,(l+r)/2);
    ArrayList<T> B=sort(x,comp,(l+r)/2,r);
    int a=0,b=0;
    while(a<A.size()&&b<B.size()){
      if(comp.func(A.get(a),B.get(b))==true){
        ret.add(A.get(a));
        a++;
      }
      else{
        ret.add(B.get(b));
        b++;
      }
    }
    while(a<A.size()){
        ret.add(A.get(a));
        a++;
    }
     while(b<B.size()){
        ret.add(B.get(b));
        b++;
    }
    return ret;
  }
static class Query{
    int P,T,id;
    double ans=0.0;
    public Query(){}
    public Query(int x,int y,int z){
      P=x;T=y;id=z;
    }
    public Query(int x,int y,int z,double w){
      P=x;T=y;id=z;ans=w;
    }
 }
 static class Node{
  int H,W;
  double Wt=0.0;
  public Node(){}
  public Node(int x,int y){
    H=x;W=y;
  }
 }
}

