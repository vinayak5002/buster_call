/*#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")*/
#include<bits/stdc++.h>
#define rep(i,s,n) for(int i = s; i < n; ++i)
#define rrep(i,s,n) for(int i = s; i >= n; --i)
#define fi first
#define se second
#define all(a) a.begin(),a.end()
#define rall(a) a.rbegin(),a.rend()
#define SUM(a) accumulate(all(a),0LL)
#define MAX(a) *max_element(all(a))
#define MIN(a) *min_element(all(a))
#define fi first
#define se second
#define len(x) (int)(x).size()
#define dup(x,y) (((x)+(y)-1)/(y))
#define pb push_back
#define eb emplace_back
#define em emplace
#define pq(T) priority_queue<T,vector<T>,greater<T>>
using namespace std;
template <class T> inline vector<vector<T>> vector2(const size_t &i, const size_t &j, const T &init = T()) {
  return vector<vector<T>>(i, vector<T>(j, init));
}
template <class T> inline vector<vector<vector<T>>> vector3(const size_t &i, const size_t &j, const int &k, const T &init = T()) {
  return vector<vector<vector<T>>>(i, vector<vector<T>>(j, vector<T>(k, init)));
}
template <class T> inline vector<vector<vector<vector<T>>>> vector4(const size_t &i, const size_t &j, const size_t &k, const size_t &l, const T &init = T()) {
  return vector<vector<vector<vector<T>>>>(i, vector<vector<vector<T>>>(j, vector<vector<T>>(k, vector<T>(l, init))));
}
template<class T,class U>bool chmax(T &a,const U &b){return ((a<b) ? (a=b, true) : false);}
template<class T,class U>bool chmin(T &a,const U &b){return ((a>b) ? (a=b, true) : false);}
using ll = long long;
using P = pair<ll,ll>;
using PP = pair<P, P>;
using Pint = pair<P, int>;
using intP = pair<int, P>;
// ================= ここまでテンプレ =================


int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  while(true){
    string s;
    cin >> s;
    if (s == "#") break;
    vector<string> rec;
    rep(bit,0,1<<len(s)){
      string check = "";
      bool flag = true;
      vector<bool> seen(26,false);
      rep(i,0,len(s)){
        if(bit & (1 << i)){
          if (s[i] == 'z'){
            flag = false;
            break;
          }
          if(seen[s[i]-'a'+1]){
            flag = false;
            break;
          }
          seen[s[i]-'a'+1] = true;
          check += s[i]+1;
        }else{
          if (!seen[s[i]-'a'] && s[i] != 'a'){
            flag = false;
            break;
          }
          check += s[i];
        }
      }
      if (!flag) continue;
      rec.pb(check);
    }
    sort(all(rec));
    cout << len(rec) << endl;
    if (len(rec) >= 10){
      rep(i,0,5){
        cout << rec[i] << endl;
      }
      rep(i,0,5){
        cout << rec[len(rec)-5+i] << endl;
      }
    }else{
      for(auto i:rec){
        cout << i << endl;
      }
    }
  }

  return 0;
}
