
#include <bits/stdc++.h>
/*--------------------------------------------------------------------*/
#define INF 3*100*1000 + 5
#define MAX 1000000
#define pb push_back
#define fi first
#define se second
#define pii pair<int, int>
#define vi vector<int>
#define vvi vector<vector<int>>
#define intt int64_t
#define piic pair<int64_t, int64_t>
#define forn(i, n) for(int i = 1; i <= n; ++i)
typedef long long ll;
using namespace std;

const int64_t mod = 1e9 + 7;
const int N = 1000;
int64_t minval = -1e14;

/*--------------------------------------------------------------------*/

template<typename T, size_t N>

class segmentTree{
private:
    T tree[4*N], dval;
    function<T(const T&, const T&)> merge;

    void build(int t, int tl, int tr){
        if(tree[tl] == tree[tr]){
            tree[t] = dval;
            return;
        }
        build(t << 1, tl, (tl + tr) >> 1);
        build(t << 1 | 1, ((tl + tr) >> 1) + 1, tr);
        tree[t] = merge(tree[t << 1], tree[t << 1 | 1]);
    }

    void update(int i, T v, int t, int tl, int tr){
        if(tl == tr){
            tree[t] = v;
            return;
        }
        if(i <= (tl + tr) >> 1)
            update(i, v, t << 1, tl, (tl + tr) >> 1);
        else
            update(i, v, t << 1|1, ((tl + tr) >> 1) + 1, tr);

        tree[t] = merge(tree[t << 1], tree[t << 1 | 1]);
    }

    T query(int l, int r, int t, int tl, int tr){
        if(r < tl || tr < l)
            return dval;
        if(l <= tl && tr <= r)
            return tree[t];
        return merge(query(l, r, t << 1, tl, (tl + tr) >> 1), query(l, r, t << 1 | 1, ((tl + tr) >> 1) + 1, tr));
    }

public:

    segmentTree(function<T(const T&, const T&)> merge, T dval = 0) : merge(merge), dval(dval) {
		build();
	}

	inline void build() { build(1, 0, N - 1); }

	inline void update(int i, T v) { update(i, v, 1, 0, N - 1); }

	inline T query(int l, int r) { return query(l, r, 1, 0, N - 1); }

};


int t, n, m, q;
int cnt = 1;
vector<vi> g;
vector<int> h, first, last, euler;

void dfs(int v, int par, int curH = 0){
    h[v] = curH;
    euler.pb(v);
    first[v] = euler.size() - 1;
    for(auto child : g[v]){
        if(child == par) continue;
        dfs(child, v, curH + 1);
        euler.pb(v);
    }
    euler.pb(v);
    last[v] = euler.size() - 1;
}
segmentTree<pair<intt, intt>, N> st ([](const pair<intt, intt> &a, const pair<intt, intt> &b)
                                    {return (a.fi < b.fi) ? a : b;}, {INT_MAX, 0});

int main(int argc, const char * argv[]) {
    ios::sync_with_stdio(0); cin.tie(0);

    cin >> n;
    g.resize(n + 1); first.resize(n + 1); last.resize(n + 1); h.resize(n + 1);
    int x;
    for(int i = 0; i < n; ++i){
        cin >> m;
        for(int j = 1; j <= m; ++j){
            cin >> x;
                g[i].pb(x);
        }
    }

    cin >> q;

    cout << "Case " << cnt++ << ":\n";
    dfs(0, -1, 0);
    for(int i = 0; i < euler.size(); ++i){
        st.update(i, make_pair(h[euler[i]], euler[i]));
    }
       // for(int i = 1; i<= n; ++i) cout << h[i] << '\n';
    int ans, minh, a, b;
    while(q--){
        cin >> a >> b;
        if(first[a] > first[b]) swap(a, b);
        ans = st.query(first[a], first[b]).se;
        cout << ans << '\n';
    }


    return 0;

}

