import numpy as np 

INF = 2**31 - 1
class SegmentTree: 
    def __init__(self, N):
        self.array = np.zeros(N, dtype=np.int32)
        # D[i] is the minimum values for the range represented by the node i for the segment tree 
        self.D, self.N = self.initRMQ(N)
        # self.D = np.zeros(2*N - 1, dtype=np.int32) 
    
    def initRMQ(self,n_):
        '''
        _n: input of the require array size 
        '''

        n = 1 
        while n < n_: # the size of the array is the power of 2 
            n *= 2
        D = np.zeros(2*n-1, dtype=np.int32)
        # initialize all node in the segment tree 
        for i in range(2*n-1):
            D[i] = INF
        return D, n 
    
    def update(self, k, x): 
        '''
        k: the index of the node 
        x: the value to update 
        '''
        k += self.N - 1 # convert array index to tree index 
        self.D[k] = x
        while k > 0:
            k = (k - 1) // 2
            self.D[k] = min(self.D[k*2+1], self.D[k*2+2])

    def query(self, a, b, k, l, r):
        if (r <= a) or (b <= l): # case 1 
            return np.Inf 
        if (a <= l) and (r <= b): # case 2 
            return self.D[k]
        
        # case 3 
        vl = self.query(a, b, k*2+1, l, (l+r)//2)
        vr = self.query(a, b, k*2+2, (l+r)//2, r)
        return min(vl, vr)
    
    def find_min(self, a, b):
        return self.query(a, b + 1, 0, 0, self.N)

# num_nodes, num_queries = map(int, input().split())
# st = SegmentTree(num_nodes)
# for _ in range(num_queries): 
#     op, x0, x1 = map(int, input().split())
#     if op == 0:
#         st.update(x0, x1)
#     elif op == 1: 
#         # print(st.D)
#         print(st.find_min(x0, x1))


num_nodes, num_queries = map(int, input().split())
st = SegmentTree(num_nodes)
queries = []
for _ in range(num_queries): 
    op, x0, x1 = map(int, input().split())
    queries.append((op, x0, x1))

for query in queries: 
    if query[0] == 0: 
        st.update(query[1], query[2])
    elif query[0] == 1: 
        # print(st.D)
        print(st.find_min(query[1], query[2]))
