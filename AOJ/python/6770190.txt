from curses import flash
import itertools
import sys
import math
import heapq
from collections import deque, Counter, defaultdict
from sys import stdin
import copy
import bisect
from decimal import Decimal, ROUND_HALF_UP
# from atcoder.dsu import DSU

MOD = 10 ** 9 + 7
int1 = lambda x: int(x) - 1
stinput = lambda: stdin.readline()[:-1]
ii = lambda: int(stinput())  # int input
mi = lambda: map(int, stdin.readline().split())  # map input (int)
li = lambda: list(mi())  # list input (int)
mi1 = lambda: map(int1, stdin.readline().split())  # map input (int)-1
li1 = lambda: list(mi1())  # list input (int)-1
mis = lambda: map(str, stdin.readline().split())  # map input (string)
lis = lambda: list(mis())  # list input (string)

while True:
    n, l, r = mi()
    if n == 0:
        break
    A = [[0, i+1] for i in range(n)]
    ans = 0
    cnt = 0
    for i in range(n):
        A[i][0] = ii()
    for i in range(l,r+1):
        cnt = 0
        flag = True
        for num in A:
            if i % num[0] == 0:
                if num[1] % 2 == 1:
                    ans += 1
                flag = False
                break
        if n % 2 == 0 and flag:
            ans += 1
    print(ans)

