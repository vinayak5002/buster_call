   #include <bits/stdc++.h>
    using namespace std;
    #include <math.h>
    #include <iomanip>
    #include <cstdint>
    #include <string>
    #include <sstream>
    
    template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
    template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
    #define rep(i,n) for (int i = 0; i < (n); ++i)

    typedef long long ll;
    typedef unsigned long long ull;
    using P=pair<ll,ll>;
    using tp=tuple<ll,ll,ll>;
    const int INF=1001001001;
    const ll INFL=1e18;
    const int mod=1e9+7;
    
    const int MAX_N=100005;
    vector<int>G[MAX_N];
    int d[MAX_N],in[MAX_N],p[MAX_N];
    void dfs(int i,int depth,int pre){
        p[i]=pre;
        d[i]=depth;
        for(int u:G[i]){
            if(u!=pre){
                dfs(u,depth+1,i);
            }
        }
    }
    void solve(){
        int n;
        cin>>n;
        rep(i,n){
            int j,k;
            cin>>j>>k;
            rep(v,k){
                int c;
                cin>>c;
                G[j].push_back(c);
                in[c]++;
            }
        }
        int root=-1;
        rep(i,n){
            if(in[i]==0){root=i;}
        }
        dfs(root,0,-1);
        rep(i,n){
            string t="root";
            if(i!=root){
                if(G[i].size()>1){
                    t="internal node";
                }
                else{
                    t="leaf";
                }
            }
            
            cout<<"node "<<i<<": parent = "<<p[i]<<", depth = "<<d[i]<<", "<<t<<", [";
            rep(j,G[i].size()){
                if(j){cout<<", ";}
                cout<<G[i][j];
            }
            cout<<"]"<<endl;
        }
    }

    int main(){
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
        solve();
        
        return 0;
    }
