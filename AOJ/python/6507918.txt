rxs = lambda: map(int, input().split())
N, Q = rxs()
rN = int(N**(1/2))
rQ = int(Q**(1/2))
As = [(1<<31)-1]*N
Bs = [None]*((N+rN-1)//rN)
Qs = [tuple(rxs()) for _ in range(Q)]

for i in range(0, Q, rQ):
    cache = []
    for j in range(i, min(Q, i+rQ)):
        q = Qs[j]
        if q[0] == 0:
            cache.append((q[1], q[2], q[3]))
        else:
            p, ans = q[1], None
            for s, t, x in reversed(cache):
                if s <= p <= t:
                    ans = x
                    break
            ans = ans if ans != None else Bs[p//rN]
            print(ans if ans != None else As[p])
    for s, t, x in cache:
        t += 1
        sb, sf = s//rN, s%rN
        tb, tf = t//rN, t%rN

        if sb == tb:
            if Bs[sb] == None:
                for i in range(s, t): As[i] = x
            else:
                for i in range(sb*rN, min(Q, (sb+1)*rN)):
                    As[i] = x if s <= i < t else Bs[sb]
                Bs[sb] = None
            continue
        if sf != 0:
            if Bs[sb] == None:
                for i in range(s, (sb+1)*rN): As[i] = x
            else:
                for i in range(sb*rN, (sb+1)*rN):
                    As[i] = x if s <= i else Bs[sb]
                Bs[sb] = None
            sb += 1
        if tf != 0:
            if Bs[tb] == None:
                for i in range(tb*rN, t): As[i] = x
            else:
                for i in range(tb*rN, min(Q, (tb+1)*rN)):
                    As[i] = x if i < t else Bs[tb]
                Bs[tb] = None
        for i in range(sb, tb):
            Bs[i] = x

