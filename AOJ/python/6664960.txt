// https://qiita.com/DaikiSuyama/items/9dba963ba74396b9b7fd
// https://luling.hatenablog.com/entry/2018/12/01/212805
// https://zenn.dev/antyuntyun/articles/atcoder-cpp-template
//
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

// rep macro
#define reps(i, a, n) for (ll i = (a); i < (ll)(n); ++i)
#define rreps(i, a, n) for (ll i = (a); i > (ll)(n); --i)
#define rep(i, n) reps(i, 0, n)
#define rrep(i, n) reps(i, 1, n + 1)
#define repd(i,n) for(ll i=n-1;i>=0;i--)
#define rrepd(i,n) for(ll i=n;i>=1;i--)

#define optimize_cin() cin.tie(0); ios::sync_with_stdio(false)

#define pb push_back
#define mp make_pair
#define all(obj) (obj).begin(), (obj).end()
#define YESNO(bool) if(bool){cout<<"YES"<<endl;}else{cout<<"NO"<<endl;}
#define yesno(bool) if(bool){cout<<"yes"<<endl;}else{cout<<"no"<<endl;}
#define YesNo(bool) if(bool){cout<<"Yes"<<endl;}else{cout<<"No"<<endl;}

//定数
#define INF32 2147483647           // 2.147483647 x 10^{9}:32bit整数のinf
#define INF64 9223372036854775807  // 9.22337203685477580 x 10^{18}:64bit整数のinf
#define MOD 1000000007             //問題による
#define PI 3.14159265359           // 円周率

//略記
#define F first
#define S second

//出力(空白区切りで昇順に)
#define dump(x)                                                 \
  for (auto i = x.begin(); i != --x.end(); i++) cout << *i << " "; \
  cout << *--x.end() << endl;
#define echo(x) cout << (x) << endl;

#define dumpMatrix(ms, row, col) \
for (auto i = 0; i < row; i++) { \
  for (auto j = 0; j < col; j++) { \
    if (j != 0) cout << " "; \
    cout << ms[i][j]; \
  } \
  cout << endl; \
}

// aをbで割る時の繰上げ,繰り下げ
ll _ceil(ll a, ll b) { return (a + (b - 1)) / b; }
ll _floor(ll a, ll b) { return a / b; }

// 大きい方、小さい方を残す
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }

// 参考 : https://algorithmbeginner.blogspot.com/2019/08/8.html

#define EMPTY -1
#define FILL 1

class Queen {
 public:
  Queen(int _n) : n(_n) {
    col.resize(n, EMPTY);
    row.resize(n, EMPTY);
    dpos.resize(2 * n - 1, EMPTY);
    dneg.resize(2 * n - 1, EMPTY);
    board.resize(n);
    rep(i, n) { board[i].resize(n, false); }
  }

  void solve() { recur(0); }

  void print() {
    rep(i, n) {
      rep(j, n) {
        if (board[i][j]) {
          if (row[i] != j) {
            // 入力時に置かれたQueenと同じでない場合は出力しない
            return;
          }
        }
      }
    }
    rep(i, n) {
      rep(j, n) { cout << ((row[i] == j) ? "Q" : "."); }
      cout << endl;
    }
  }

  void updateDPos(int i, int j, int value) { dpos[i + j] = value; }
  void updateDNeg(int i, int j, int value) { dneg[i - j + n - 1] = value; }
  bool isFillDPos(int i, int j) { return dpos[i + j] == FILL; }
  bool isFillDNeg(int i, int j) { return dneg[i - j + n - 1] == FILL; }

  void recur(int i) {
    if (i == n) {
      print();
      return;
    }
    rep(j, n) {
      if (col[j] == FILL || isFillDPos(i, j) || isFillDNeg(i, j))
        continue;  // 置けない
      // (i, j)に配置する
      row[i] = j;
      col[j] = FILL;
      updateDPos(i, j, FILL);
      updateDNeg(i, j, FILL);
      // 次の行
      recur(i + 1);
      // ダメだった場合に元に戻す
      row[i] = EMPTY;
      col[j] = EMPTY;
      updateDPos(i, j, EMPTY);
      updateDNeg(i, j, EMPTY);
    }
    // Failure
  }

  void set(int i, int j) { board[i][j] = true; }

 private:
  int n;
  vector<vector<bool>> board;
  // 基本的に0行目から確定していくので
  // 自分より下の盤面で移動できない箇所を記録していく
  // (*) dpos, dnegの位置関係については参考サイトを参照のこと。
  //     board全体の配置不可情報を持たなくても、射影した15点を保持すれば良いという感じ
  vector<int> col;
  vector<int> row;
  vector<int> dpos;  // 左下方向の射影情報
  vector<int> dneg;  // 右下方向の射影情報
};

signed main() {
  int n;
  cin >> n;
  Queen queen(8);
  rep(k, n) {
    int i, j;
    cin >> i;
    cin >> j;
    queen.set(i, j);
  }
  queen.solve();
}

