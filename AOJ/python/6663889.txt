// #define _GLIBCXX_DEBUG

#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define rep2(i, k, n) for (decltype(n) i = k; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i--)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i--)
#define repr2(i, k, n) for (decltype(n) i = n; i >= k; i--)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret;};
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret;};
template<typename T> using pq_inv = priority_queue<T, vector<T>, greater<T>>;



struct Solver{
    void solve(){
        int n,w;
        cin >> n >> w;
        vector<vector<int>> dp(n+1,vector<int>(w+1));
        vector<int> V(n+1), W(n+1);
        rep(i,n) cin>>V[i]>>W[i];
        rep(i,n)rep(j,w){
            chmax(dp[i+1][j], dp[i][j]);
            if(j+W[i]<=w){
                chmax(dp[i][j+W[i]], dp[i][j] + V[i]);
                chmax(dp[i+1][j+W[i]], dp[i][j] + V[i]);
            }
        }
        // for(auto&& x:dp){
        //     for(auto&& y:x){
        //         printf("%d ",y);
        //     }
        //     printf("\n");
        // }
        cout << *max_element(dp[n].begin(), dp[n].end()) << endl;

    };
};

int main() {
    std::cin.tie(nullptr);
    Solver solver;
    solver.solve();
    return 0;
}


