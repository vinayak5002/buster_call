class DNode[A](var prev:DNode[A] = null, var next:DNode[A] = null)
class Node[A](val value:A) extends DNode[A] {
  override def toString(): String = value.toString()
}

class NodeList[A]() {
  private val head = new DNode[A]()
  head.next = head
  head.prev = head
  def append(v:A):Unit = {
    val n = new Node[A](v)
    val m = head.next
    m.prev = n
    n.next = m
    n.prev = head
    head.next = n
  }
  def remove(node:DNode[A]):Unit = {
    if (node != head) {
      val p = node.prev
      val n = node.next
      p.next = n
      n.prev = p
    }
  }
  def fetch(v:A): Option[Node[A]] = {
    def iter(m:DNode[A]): Option[Node[A]] = {
      if (m == head) None
      else m match {
        case n:Node[A] if n.value == v => Some(n)
        case _ => iter(m.next)
      }
    }
    iter(head.next)
  }
  def removeFirst():Unit = {
    remove(head.next)
  }
  def removeLast():Unit = {
    remove(head.prev)
  }
  def toList(): List[A] = {
    def iter(m:DNode[A], ac:List[A]): List[A] = {
      m match {
        case n:Node[A] => iter(n.prev, n.value::ac)
        case _ => ac
      }
    }
    iter(head.prev, List[A]())
  }
}

trait Command {
  def execute(nodes:NodeList[Int]):Unit
}
case class InsertCommand(val x:Int) extends Command {
  override def execute(nodes:NodeList[Int]):Unit = {
    nodes.append(x)
    // println(s"insert $x:${nodes.toList().mkString(" ")}")
  }
}
case class DeleteCommand(val v:Int) extends Command {
  override def execute(nodes:NodeList[Int]):Unit = {
    // println(s"delete $v: ${nodes.fetch(v).toString()}")
    nodes.fetch(v) match {
      case Some(n) => nodes.remove(n)
      case None => ()
    }
    // println(s"delete $v:${nodes.toList().mkString(" ")}")
  }
}
case class DeleteFirstCommand() extends Command {
  override def execute(nodes:NodeList[Int]):Unit = {
    nodes.removeFirst()
    // println(s"delete First:${nodes.toList().mkString(" ")}")
  }
}
case class DeleteLastCommand() extends Command {
  override def execute(nodes:NodeList[Int]):Unit = {
    nodes.removeLast()
    // println(s"delete Last:${nodes.toList().mkString(" ")}")
  }
}

object Main extends App { 
  def readCommand():Command = {
    io.StdIn.readLine().split(' ').toList match {
      case "insert"::xs => InsertCommand(xs.head.toInt)
      case "delete"::xs => DeleteCommand(xs.head.toInt)
      case "deleteFirst"::_ => DeleteFirstCommand()
      case "deleteLast"::_ => DeleteLastCommand()
      case _ => throw new RuntimeException("Illegal command found")
     }
  }

  val N = io.StdIn.readLine().toInt
  val commands = (for (i <- 0 until N) yield readCommand()).toList
  val nodes = new NodeList[Int]()
  for (cmd <- commands) cmd.execute(nodes)
  println(nodes.toList().mkString(" "))
}

