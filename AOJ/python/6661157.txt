// #define _GLIBCXX_DEBUG
#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define rep2(i, k, n) for (decltype(n) i = k; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i--)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i--)
#define repr2(i, k, n) for (decltype(n) i = n; i >= k; i--)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret; };
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret; };
template <typename T>
using pq_inv = priority_queue<T, vector<T>, greater<T>>;

struct Solver {
    int N=8;
    void solve() {
        int k;
        cin >> k;
        vector<int> X(k), Y(k);
        vector<int>p(N);
        iota(p.begin(), p.end(),0);
        rep(i, k) cin >> X[i] >> Y[i];
        do {
            bool ok=true;
            rep(i,k) if(p[X[i]]!=Y[i]) ok=false;
            if(!ok)continue;
            rep(i,N)rep(j,N) if(i!=j && abs(i-j)==abs(p[i]-p[j])) ok=false;
            if(ok)break;

        } while (next_permutation(p.begin(), p.end()));
        vector<vector<char>> B(N,vector<char>(8,'.'));
        rep(i,N) B[i][p[i]]='Q';
        rep(i,N){
            rep(j,N) cout << B[i][j];
            cout << endl;
        }
    };
};

int main() {
    std::cin.tie(nullptr);
    Solver solver;
    solver.solve();
    return 0;
}


