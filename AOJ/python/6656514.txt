import sys
import math

# READ_FROM_FILE = True
READ_FROM_FILE = False


def dfs(num_nodes, dist_matrix, visited_node_tuple, n, dp):
    if len(visited_node_tuple) == num_nodes and n == 0:
        if visited_node_tuple not in dp:
            dp[visited_node_tuple] = {n: 0}
        elif n not in dp[visited_node_tuple]:
            dp[visited_node_tuple][n] = 0
        return 0

    if visited_node_tuple in dp:
        if n in dp[visited_node_tuple]:
            return dp[visited_node_tuple][n]

    result = math.inf
    for nn in range(num_nodes):
        if nn == n:
            continue
        if nn not in visited_node_tuple:
            n_visited_node_tuple = list(visited_node_tuple)
            n_visited_node_tuple.append(nn)
            n_visited_node_tuple.sort()
            n_visited_node_tuple = tuple(n_visited_node_tuple)
            n_cost = dfs(num_nodes, dist_matrix, n_visited_node_tuple, nn, dp) + dist_matrix[n][nn]
            result = min(result, n_cost)

    if visited_node_tuple not in dp:
        dp[visited_node_tuple] = {n: result}
    elif n not in dp[visited_node_tuple]:
        dp[visited_node_tuple][n] = result
    return result


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    num_nodes, num_edges = list(map(int, f.readline().split()))
    dist_matrix = [[math.inf] * num_nodes for _ in range(num_nodes)]
    for _ in range(num_edges):
        s, t, d = list(map(int, f.readline().split()))
        dist_matrix[s][t] = d

    dp = {}
    visited_nodes_tuple = ()
    result = dfs(num_nodes, dist_matrix, visited_nodes_tuple, 0, dp)
    if result != math.inf:
        print(result)
    else:
        print(-1)

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

