def main():
  import sys
  input = lambda: sys.stdin.readline().rstrip()
  sys.setrecursionlimit(10**6)
  from heapq import heapify, heappush, heappop
  from collections import deque

  ##################

  n = int(input())
  p = [int(input()) for _ in range(n)]

  roop, noroop = set(), set()
  tmp_set = set()
  def rec(x):
    if x in tmp_set:
      return (False, tmp_set)
    tmp_set.add(i)
    if p[x] == 0:
      return (True, tmp_set)
    if x >= n:
      return (True, tmp_set)
    if x < 0:
      return (False, tmp_set)
    if x in roop:
      return (False, tmp_set)
    if x in noroop:
      return (True, tmp_set)
    return rec(x+p[x])

  for i in range(n):
    if p[i] == 0:
      noroop.add(i)
      continue
    tmp_set.clear()
    flag, st = rec(i)
    if flag:
      noroop |= st
    else:
      roop |= st 

  inf = float('inf')

  G = [[] for _ in range(n)]
  for i in range(n):
    if p[i] == 0:
      for j in range(1, 7):
        if i+j >= n:
          G[i].append((n-1, 1))
        else:
          G[i].append((i+j, 1))
    elif i not in roop:
      if 0 <= i+p[i] < n:
        G[i].append((i+p[i], 0))
        G[i+p[i]].append((i, 0))
      elif i+p[i] >= n:
        G[i].append((n-1, 0))

  def dijkstra(G: int, s: int) -> list:
    dist = [inf] * n
    ans = []
    dist[s] = 0
    hq = []
    heappush(hq, (0, s))
    while hq:
      d, v = heappop(hq)
      if dist[v] < d:
        continue
      for x,c in G[v]:
        nd = d + c
        if dist[x] > nd:
          dist[x] = nd
          heappush(hq, (nd, x))
    return dist

  dist = dijkstra(G, 0)

  print(min(dist[n-1:]))

main()

