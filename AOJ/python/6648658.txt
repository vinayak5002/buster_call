fn main() {
    input! {
        len: usize,
        m: usize,
        s: [chars; m],
    }
    let mut s = s
        .iter()
        .map(|s| {
            s.iter()
                .map(|s| "AGCT?".find(*s).unwrap() as u8)
                .collect::<Vec<_>>()
        })
        .collect::<Vec<_>>();
    s.sort_by_cached_key(|s| {
        let cnt = s.iter().filter(|s| **s == 4).count();
        !cnt
    });
    let iteration = 1 << 15;
    let mut cnt = vec![0; m];
    for (i, cnt) in cnt.iter_mut().enumerate() {
        let src = &s[i];
        let s = &s[..i];
        let mut tmp = src.clone();
        for _ in 0..iteration {
            for (tmp, src) in tmp.iter_mut().zip(src.iter()) {
                *tmp = *src;
                if *tmp == 4 {
                    *tmp = (rand() % 4) as u8;
                }
            }
            *cnt += s
                .iter()
                .position(|s| s.iter().zip(tmp.iter()).all(|(&a, &b)| a == 4 || a == b))
                .is_none() as usize;
        }
    }
    let mut ans = 0f64;
    for (s, cnt) in s.iter().zip(cnt.iter()).rev() {
        let c = len - s.iter().filter(|s| **s == 4).count();
        ans += 4f64.powi(-(c as i32)) * *cnt as f64;
    }
    ans /= iteration as f64;
    println!("{}", ans);
}

// ---------- begin rand ----------
fn rand_memory() -> usize {
    Box::into_raw(Box::new("I hope this is a random number")) as usize
}

fn rand() -> usize {
    static mut X: usize = 0;
    unsafe {
        if X == 0 {
            X = rand_memory();
        }
        X ^= X << 13;
        X ^= X >> 17;
        X ^= X << 5;
        X
    }
}
// ---------- end rand ----------
// ---------- begin input macro ----------
// reference: https://qiita.com/tanakh/items/0ba42c7ca36cd29d0ac8
#[macro_export]
macro_rules! input {
    (source = $s:expr, $($r:tt)*) => {
        let mut iter = $s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
    ($($r:tt)*) => {
        let s = {
            use std::io::Read;
            let mut s = String::new();
            std::io::stdin().read_to_string(&mut s).unwrap();
            s
        };
        let mut iter = s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
}

#[macro_export]
macro_rules! input_inner {
    ($iter:expr) => {};
    ($iter:expr, ) => {};
    ($iter:expr, $var:ident : $t:tt $($r:tt)*) => {
        let $var = read_value!($iter, $t);
        input_inner!{$iter $($r)*}
    };
}

#[macro_export]
macro_rules! read_value {
    ($iter:expr, ( $($t:tt),* )) => {
        ( $(read_value!($iter, $t)),* )
    };
    ($iter:expr, [ $t:tt ; $len:expr ]) => {
        (0..$len).map(|_| read_value!($iter, $t)).collect::<Vec<_>>()
    };
    ($iter:expr, chars) => {
        read_value!($iter, String).chars().collect::<Vec<char>>()
    };
    ($iter:expr, bytes) => {
        read_value!($iter, String).bytes().collect::<Vec<u8>>()
    };
    ($iter:expr, usize1) => {
        read_value!($iter, usize) - 1
    };
    ($iter:expr, $t:ty) => {
        $iter.next().unwrap().parse::<$t>().expect("Parse error")
    };
}
// ---------- end input macro ----------

