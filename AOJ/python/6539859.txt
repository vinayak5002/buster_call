struct SA_IS {
    // LSMをそれぞれ0, 1, 2とする
    string str;
    int length, seg_size = 1;
    vector<int> s_array, l_array, s_array_inv, seg_tree;
    SA_IS(string _str) : str(_str) {
        length = (int)(str.size());
        vector<char> t(str.begin(), str.end());
        t.push_back('$');
        s_array = induced_sort(t);
        s_array_inv.assign(length + 1, 0);
        for (int i = 0; i <= length; ++i) s_array_inv[s_array[i]] = i;
        calc_l_array();
        make_l_seg();
    }
    template <class T> vector<int> categorize(vector<T>& s) {
        int n = (int)s.size();
        vector<int> L_S(n);
        L_S[n - 1] = 1;
        for (int i = n - 2; i >= 0; i--) {
            if (s[i] < s[i + 1]) {
                L_S[i] = 1;
            } else if (s[i] > s[i + 1]) {
                L_S[i] = 0;
            } else {
                L_S[i] = L_S[i + 1];
            }
        }
        for (int i = 1; i < n; ++i) {
            if (L_S[i] == 1 && L_S[i - 1] == 0) { L_S[i] = 2; }
        }
        return L_S;
    }
    template <class T>
    void bucket_sort(vector<T>& s, vector<int>& bucket, vector<int>& cat,
                     map<T, array<int, 3>>& LSM, vector<int>& is_sort) {
        int n = (int)(cat.size()), t;
        if ((int)is_sort.size() > 0) {
            // ソートしたMをバケツに突っ込む。そのうち置き換える
            for (int& temp : is_sort) {
                bucket[LSM[s[temp]][2]] = temp;
                LSM[s[temp]][2]--;
            }
        } else {
            // M-typeを入れる。
            for (int i = 0; i < n; ++i) {
                if (cat[i] == 2) {
                    bucket[LSM[s[i]][2]] = i;
                    LSM[s[i]][2]--;
                }
            }
        }
        // L-typeを入れる。
        for (int i = 0; i < n; ++i) {
            t = bucket[i] - 1;
            if (t >= 0) {
                if (cat[t] == 0) {
                    bucket[LSM[s[t]][0]] = t;
                    ++LSM[s[t]][0];
                }
            }
        }
        // S-typeを入れる。
        for (int i = n - 1; i >= 0; i--) {
            t = bucket[i] - 1;
            if (t >= 0) {
                if (cat[t] != 0) {
                    bucket[LSM[s[t]][1]] = t;
                    --LSM[s[t]][1];
                }
            }
        }
    }
    template <class T> vector<int> induced_sort(vector<T>& s) {
        int t, t2, before, after;  // temp変数
        int n = (int)s.size();
        vector<int> bucket(n, -1), bucket_pre(n, -1);
        if (n == 1) {
            bucket = {0};
            return bucket;
        }
        // 出てくる回数を記録
        map<T, int> counter;
        for (int i = 0; i < n; ++i) {
            T c = s[i];
            if (counter.find(c) == counter.end()) {
                counter[c] = 1;
            } else {
                ++counter[c];
            }
        }
        // バケツに入れる場所を記録するmap
        map<T, array<int, 3>> LSM, LSM_pre;
        int sum_count = 0;
        for (auto& [idx, cnt] : counter) {
            LSM[idx][0] = sum_count, sum_count += cnt;
            LSM[idx][1] = sum_count - 1;
            LSM[idx][2] = sum_count - 1;
        }
        LSM_pre = LSM;
        // L,S,Mに分類
        vector<int> cat = categorize(s);
        // 一旦バケットソートでMの順序を決定する
        vector<int> M_rec(0);
        map<int, int> M_map;
        bucket_sort(s, bucket_pre, cat, LSM_pre, M_rec);
        M_map[bucket_pre[0]] = 0, t = 0, before = n - 1;
        for (int i = 1; i < n; ++i) {
            if (cat[bucket_pre[i]] != 2) continue;
            after = bucket_pre[i];
            t2 = 0;
            while (true) {
                if (s[before] < s[after + t2]) {
                    ++t;
                    break;
                }
                ++t2, ++before;
                if (before == n) {
                    ++t;
                    break;
                }
                if (cat[before] == 2) {
                    if (cat[after + t2] != 2) ++t;
                    break;
                }
            }
            M_map[after] = t;
            before = after;
        }
        for (auto& [_, cnt] : M_map) M_rec.push_back(cnt);
        int m = (int)M_rec.size();
        // Mのリストを作る
        vector<int> M_list;
        for (int i = 0; i < n; ++i) {
            if (cat[i] == 2) M_list.push_back(i);
        }
        // Mについて、再帰的にinduced_sortを行う
        vector<int> is_sort(m);
        if (m > 0) {
            vector<int> is = induced_sort(M_rec);
            for (int i = 0; i < m; ++i) is_sort[m - i - 1] = M_list[is[i]];
        }
        bucket_sort(s, bucket, cat, LSM, is_sort);
        return bucket;
    }
    // lcp_arrayの計算
    vector<int> calc_l_array() {
        l_array.resize(length);
        int h = 0, j;
        for (int i = 0; i < length; ++i) {
            j = s_array[s_array_inv[i] - 1];
            while (i + h < length && j + h < length) {
                if (str[i + h] == str[j + h]) {
                    ++h;
                } else {
                    break;
                }
            }
            l_array[s_array_inv[i] - 1] = h;
            if (h > 0) h--;
        }
        return l_array;
    }
    // セグ木を作る
    void make_l_seg() {
        int basesize = (int)l_array.size(), e = 10000000;
        while (seg_size < basesize) seg_size <<= 1;
        seg_tree.assign(seg_size << 1, e);
        for (int i = 0; i < basesize; ++i) seg_tree[i + seg_size] = l_array[i];
        for (int i = seg_size - 1; i > -1; --i)
            seg_tree[i] = min(seg_tree[2 * i], seg_tree[2 * i + 1]);
    }
    // 0→'<', 1→'>', 2→'=='
    int smaller(string& s, int& temp) {
        int t = s_array[temp];
        int n = (int)(s.size()), m = length - t, i = 0;
        while (true) {
            if (i == n) { return 2; }
            if (i == m) { return 0; }
            if (s[i] < str[t + i]) {
                return 1;
            } else if (s[i] > str[t + i]) {
                return 0;
            } else {
                ++i;
            }
        }
    }
    // 存在するかどうか
    bool find(string s) {
        int ok = 0, ng = length, mid, v;
        while (abs(ok - ng) > 1) {
            mid = (ok + ng) / 2, v = smaller(s, mid);
            if (v == 0) {
                ok = mid;
            } else if (v == 1) {
                ng = mid;
            } else {
                return true;
            }
        }
        return smaller(s, ok) == 2 || smaller(s, ng) == 2;
    }
    // suffix_arrayを返す
    vector<int> suffix_array() { return s_array; }
    // suffix_array_invを返す
    vector<int> suffix_array_inv() { return s_array_inv; }
    // lcp_arrayを返す
    vector<int> lcp_array() { return l_array; }
    // S_xとS_yのlcpを求める
    int lcp(int x, int y) {
        int l = s_array_inv[x], r = s_array_inv[y], e = 10000000;
        if (l == r) return e;
        if (l > r) swap(l, r);
        l += seg_size, r += seg_size;
        int sml = e, smr = e;
        while (l < r) {
            if (l & 1) sml = min(sml, seg_tree[l++]);
            if (r & 1) smr = min(seg_tree[--r], smr);
            l >>= 1, r >>= 1;
        }
        return min(sml, smr);
    }
};
