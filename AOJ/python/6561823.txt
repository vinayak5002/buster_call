use std::io::{Read, Write};

fn main() {
    let out = std::io::stdout();
    let mut out = std::io::BufWriter::new(out.lock());
    let mut input = String::new();
    std::io::stdin().read_to_string(&mut input).unwrap();
    let mut iter = input.split_ascii_whitespace();
    let n: usize = iter.next().unwrap().parse().unwrap();
    let a = (0..n).map(|_| iter.next().unwrap().parse().unwrap()).collect::<Vec<i32>>();

    let ans = solve(&a);

    writeln!(out, "{}", ans).unwrap();
    out.write(b"\n").unwrap();
}

fn solve(src: &[i32]) -> i32 {
    let mut ans: i32 =0;
    let mut a = src.to_vec();
    let mut b = src.to_vec();
    let mut p = &mut a;
    let mut q = &mut b;
    let mut is_flipped = false;
    let len = src.len();

    let mut n: usize = 1;
    loop {
        let mut l=0;
        let mut m=n;
        let mut r=std::cmp::min(n+n, len);

        loop {
            let mut i=l;
            let mut j=m;
            let mut k=l;
            while i<m && j<r {
                if p[i] <= p[j] {
                    q[k]=p[i];
                    i+=1;
                } else {
                    q[k]=p[j];
                    ans+=(j-k) as i32;
                    j+=1;
                }
                k+=1;
            }
            while i<m {
                q[k] = p[i];
                i+=1;
                k+=1;
            }
            while j<r {
                q[k] = p[j];
                ans+=(j-k) as i32;
                j+=1;
                k+=1;
            }
            if len <= r+n {
                break;
            }
            l = r;
            m = l + n;
            r = std::cmp::min(l+n+n, len);
        }

        std::mem::swap(&mut p,&mut q);
        is_flipped = !is_flipped;
        n=n*2;
        if n >= len {
            break;
        }
    }
    ans
}

