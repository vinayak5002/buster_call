use std::io::{stdin, BufRead, BufReader};

fn main() -> std::io::Result<()> {
    let input: Vec<String> = BufReader::new(stdin().lock())
        .lines()
        .map(Result::unwrap)
        .collect();

    let mut dp = vec![0u32; 1E6 as usize];
    let mut dp_odd = vec![0u32; 1E6 as usize];

    for i in 0usize..100000 {
        dp[i] = i as u32;
        dp_odd[i] = i as u32;
    }

    for i in 2u64..181 {
        let cnt = (i * (i + 1) * (i + 2) / 6) as usize;

        for j in 0usize..100000 {
            if j >= cnt {
                dp[j] = (dp[j - cnt] + 1).min(dp[j]);
            }
        }

        if cnt & 0b01 == 0 {
            continue;
        }

        for j in 0usize..100000 {
            if j >= cnt {
                dp_odd[j] = (dp_odd[j - cnt] + 1).min(dp_odd[j]);
            }
        }
    }

    for line in input {
        if line == "0" {
            break;
        }

        let cnt = line.parse::<usize>().unwrap();
        println!("{} {}", dp[cnt], dp_odd[cnt]);
    }

    Ok(())
}

