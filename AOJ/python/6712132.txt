using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using static System.Math;

namespace OtherCoder
{
    internal static class TheProgram
    {
        private static void Main(string[] args)
        {
            checked
            {
                int n = Si();
                int q = Si();

                SqrtDecomposition<long> sd = new SqrtDecomposition<long>(Enumerable.Repeat(0L, n).ToArray(), false,
                    ((l, l1) => l + l1), ((l, l1, l2) => l - l1 + l2));
                
                Loop(q, () =>
                {
                    int num = Si();
                    int x = Si();
                    int y = Si();
                    if (num == 0)
                    {
                        sd.Update(x-1, y);
                    }
                    else
                    {
                        Answerer.Build(sd.QueryValue(x-1,y-1).Sum());
                    }
                });
                
                Answerer.OutBuild();
            }
        }

        #region Utility

        private const int InfinityInt = Common.InfinityInt;
        private const long Infinity = Common.Infinity;
        private static readonly StreamScanner Scanner = new StreamScanner(Console.OpenStandardInput());
        private static int Si() => Scanner.Integer();
        private static long Sl() => Scanner.Long();
        private static string Ss() => Scanner.Scan();
        private static int[] Sai(int count) => Scanner.ArrayInt(count);
        private static long[] Sal(int count) => Scanner.ArrayLong(count);
        private static int[][] Sqi(int yCount, int xCount) => Scanner.SquareInt(yCount, xCount);
        private static long[][] Sql(int yCount, int xCount) => Scanner.SquareLong(yCount, xCount);
        private static string[] Sss(int count) => Enumerable.Repeat(0, count).Select(_ => Ss()).ToArray();
        private static T[] Make<T>(int n, Func<T> creator) => Enumerable.Repeat(0, n).Select(_ => creator()).ToArray();

        private static void Loop(long n, Action action)
        {
            for (int i = 0; i < n; i++)
            {
                action();
            }
        }

        #endregion
    }
    
    public static class Common
    {
        public const int InfinityInt = 1 << 29;
        public const long Infinity = (long) 1 << 60;
    }
    
    public class StreamScanner
    {
        private const int Size = 1024 * 16;

        public StreamScanner(Stream stream)
        {
            str = stream;
        }

        private readonly Stream str;
        private readonly byte[] buf = new byte[Size];
        private int len, ptr;
        public bool IsEof { get; private set; }

        private byte Read()
        {
            if (IsEof) throw new EndOfStreamException();
            if (ptr >= len)
            {
                ptr = 0;
                if ((len = str.Read(buf, 0, Size)) <= 0)
                {
                    IsEof = true;
                    return 0;
                }
            }

            return buf[ptr++];
        }

        public char Char()
        {
            byte b = 0;
            do b = Read();
            while (b < 33 || 126 < b);
            return (char) b;
        }

        public string Scan()
        {
            var sb = new StringBuilder();
            for (char b = Char(); b >= 33 && b <= 126; b = (char) Read())
                sb.Append(b);
            return sb.ToString();
        }

        public string ScanIncludeSpace()
        {
            var sb = new StringBuilder();
            for (char b = Char(); b >= 32 && b <= 126; b = (char) Read())
                sb.Append(b);
            return sb.ToString();
        }

        public long Long()
        {
            long ret = 0;
            byte b = 0;
            bool ng = false;
            do b = Read();
            while (b != '-' && (b < '0' || '9' < b));
            if (b == '-')
            {
                ng = true;
                b = Read();
            }

            for (; true; b = Read())
            {
                if (b < '0' || '9' < b)
                    return ng ? -ret : ret;
                else ret = ret * 10 + b - '0';
            }
        }

        public int Integer()
        {
            return (int) Long();
        }

        public double Double()
        {
            return double.Parse(Scan(), CultureInfo.InvariantCulture);
        }

        /// <summary> 数値読み込み </summary>
        public long[] ArrayLong(int count = 0)
        {
            long[] scan = new long[count];
            for (int i = 0; i < count; i++)
            {
                scan[i] = Long();
            }

            return scan;
        }

        /// <summary> 数値読み込み </summary>
        public int[] ArrayInt(int count = 0)
        {
            int[] scan = new int[count];
            for (int i = 0; i < count; i++)
            {
                scan[i] = Integer();
            }

            return scan;
        }

        public long[][] SquareLong(int row, int col)
        {
            long[][] scan = new long[row][];
            for (int i = 0; i < row; i++)
            {
                scan[i] = ArrayLong(col);
            }

            return scan;
        }

        public int[][] SquareInt(int row, int col)
        {
            int[][] scan = new int[row][];
            for (int i = 0; i < row; i++)
            {
                scan[i] = ArrayInt(col);
            }

            return scan;
        }
    }
    
    public class Answerer
    {

        public static StringBuilder sb;

        public static void Build<T>(T item) => Build(item, "\n");
        public static void BuildByLine<T>(T item) => Build(item, "\n");
        public static void BuildBySpace<T>(T item) => Build(item, " ");
        public static void Build<T>(T item, string splitter)
        {
            if (sb != null)
            {
                sb.Append(splitter);
            }
            else
            {
                sb = new StringBuilder();
            }
            sb.Append(item);
        }

        public static void OutBuild()
        {
            Console.WriteLine(sb);
        }
        
        /// <summary> Yes出力 </summary>
        public static void Yes() => Console.WriteLine("Yes");
        
        /// <summary> No出力 </summary>
        public static void No() => Console.WriteLine("No");
        
        /// <summary> Yes/No型出力 </summary>
        public static void YesNo(bool condition)
        {
            Console.WriteLine(condition ? "Yes" : "No");
        }

        /// <summary> 一括出力 </summary>
        public static void OutAllLine<T>(IEnumerable<T> items)
        {
            var sb = new StringBuilder();
            foreach (T result in items)
            {
                sb.Append(result + "\n");
            }

            if (sb.Length == 0)
            {
                Console.WriteLine();
                return;
            }

            sb = sb.Remove(sb.Length - 1, 1);
            Console.WriteLine(sb);
        }

        public static void OutEachSpace<T>(IEnumerable<T> items)
        {
            var sb = new StringBuilder();
            foreach (T result in items)
            {
                sb.Append(result + " ");
            }

            if (sb.Length == 0)
            {
                Console.WriteLine();
                return;
            }
            
            sb = sb.Remove(sb.Length - 1, 1);
            Console.WriteLine(sb);
        }
    }

    public static class MathPlus
    {
        public static long CeilingLong(long value, long div)
        {
            return value % div == 0 ? value / div : value / div + 1;
        }

        public static int Digit(long num, int b)
        {
            int digit = 0;
            while (num > 0)
            {
                num /= b;
                digit++;
            }
            return digit;
        }

        public static long Gcd(long a, long b)
        {
            return a > b ? GcdRecursive(a, b) : GcdRecursive(b, a);
        }

        private static long GcdRecursive(long a, long b)
        {
            while (true)
            {
                if (b == 0) return a;
                long a1 = a;
                a = b;
                b = a1 % b;
            }
        }
        
        /// <summary> a*x + b*y = 1 となるx,yを求める(1をnにする場合返り値をn倍) </summary>
        public static (long, long, long) ExtGcd(long a, long b, long x = 0, long y = 0)
        {
            if (b == 0) {
                return (1, 0, a);
            }
            (long xx, long yy, long aa) = ExtGcd(b, a%b, y, x);
            xx -= a/b * yy;
            return (yy, xx, aa);
        }

        /// <summary> Ax ≡ B mod Mとなるxを求める </summary>
        public static long Inv(long a, long b, long mod)
        {
            var dd = ExtGcd(a, mod);
            if (dd.Item1 < 0)
            {
                dd.Item1 += mod;
            }
            return (dd.Item1 * b) % mod;
        }

        public static long Lcm(long a, long b)
        {
            checked
            {
                return (a / Gcd(a, b)) * b;
            }
        }

        public static long Combination(long n, long m)
        {
            if (m == 0) return 1;
            if (n == 0) return 0;
            return n * Combination(n - 1, m - 1) / m;
        }

        public static long Permutation(long n, long m)
        {
            if (m == 0) return 1;
            if (n == 0) return 0;
            long value = 1;
            for (long i = n; i >= n - m + 1; i--)
            {
                value *= i;
            }

            return value;
        }

        public static IEnumerable<IEnumerable<T>> GetPermutations<T>(params T[] array) where T : IComparable
        {
            var a = new List<T>(array);
            int n = a.Count;

            yield return array;

            bool next = true;
            while (next)
            {
                next = false;
                int i;
                for (i = n - 2; i >= 0; i--)
                {
                    if (a[i].CompareTo(a[i + 1]) < 0) break;
                }

                if (i < 0) break;

                int j = n;
                do
                {
                    j--;
                } while (a[i].CompareTo(a[j]) > 0);

                if (a[i].CompareTo(a[j]) < 0)
                {
                    (a[i], a[j]) = (a[j], a[i]);
                    a.Reverse(i + 1, n - i - 1);
                    yield return a;
                    next = true;
                }
            }
        }

        public static IEnumerable<T[]> GetCombinations<T>(IEnumerable<T> items, int k, bool withRepetition = false)
        {
            if (k == 1)
            {
                foreach (var item in items)
                    yield return new T[] {item};
                yield break;
            }

            IEnumerable<T> enumerable = items as T[] ?? items.ToArray();
            foreach (var item in enumerable)
            {
                var leftside = new T[] {item};

                var unused = withRepetition ? enumerable : enumerable.SkipWhile(e => !e.Equals(item)).Skip(1).ToList();

                foreach (var rightside in GetCombinations(unused, k - 1, withRepetition))
                {
                    yield return leftside.Concat(rightside).ToArray();
                }
            }
        }
        
        public static long BigPow(long baseValue, long pow, long mod = long.MaxValue)
        {
            long p = baseValue % mod;
            long x = 1;
            long ret = 1;

            while (true) {
                if ((pow & x) > 0) {
                    ret = (ret * p) % mod;
                }

                x *= 2;
                if (x > pow) return ret;
                p = (p * p) % mod;
            }
        }
    }

    class SqrtDecomposition<T>
    {
        private readonly SqrtBucket[] buckets;
        private readonly int bucketSize;

        public SqrtDecomposition(T[] array, bool isBuildSet, Func<T, T, T> indexOperation, Func<T, T, T, T> allOperation)
        {
            var size = array.Length;
            bucketSize = (int)Sqrt(size);
            var bucketLength = (int)MathPlus.CeilingLong(size, bucketSize);
            buckets = Enumerable.Repeat(0, bucketLength)
                .Select(_ => new SqrtBucket(isBuildSet, indexOperation, allOperation)).ToArray();
            for (int i = 0; i < size; i++)
            {
                buckets[i / bucketSize].Create(array[i]);
            }
        }

        public void Update(int index, T value)
        {
            int bucketIndex = index / bucketSize;
            int innerIndex = index % bucketSize;
            buckets[bucketIndex].Update(value, innerIndex);
        }

        public IEnumerable<T> QueryValue(int l, int r)
        {
            int leftBucket = l / bucketSize;
            int leftIndex = l % bucketSize;
            int rightBucket = r / bucketSize;
            int rightIndex = l % bucketSize;

            if (leftBucket == rightBucket)
            {
                foreach (var value in buckets[leftBucket].GetValues(leftIndex, rightIndex))
                {
                    yield return value;
                }
                yield break;
            }

            foreach (var value in buckets[leftBucket].GetValues(leftIndex, bucketSize))
            {
                yield return value;
            }
            for (int i = leftIndex + 1; i <= rightIndex - 1; i++)
            {
                yield return buckets[i].Value;
            }
            foreach (var value in buckets[rightBucket].GetValues(0, rightIndex))
            {
                yield return value;
            }
        }
        
        public IEnumerable<Set<T>> QuerySet(int l, int r)
        {
            int leftBucket = l / bucketSize;
            int leftIndex = l % bucketSize;
            int rightBucket = r / bucketSize;
            int rightIndex = l % bucketSize;

            var s = new Set<T>(true);
            if (leftBucket == rightBucket)
            {
                foreach (var value in buckets[leftBucket].GetValues(leftIndex, rightIndex))
                {
                    s.Add(value);
                }
                yield return s;
                yield break;
            }

            foreach (var value in buckets[leftBucket].GetValues(leftIndex, bucketSize))
            {
                s.Add(value);
            }
            foreach (var value in buckets[rightBucket].GetValues(0, rightIndex))
            {
                s.Add(value);
            }
            yield return s;
            for (int i = leftIndex + 1; i <= rightIndex - 1; i++)
            {
                yield return buckets[i].BucketSet;
            }
        }

        class SqrtBucket
        {
            private readonly Func<T, T, T> indexOperation;
            private readonly Func<T, T, T, T> allOperation;
            public T Value { get; private set; }
            public Set<T> BucketSet { get; private set; }
            private readonly bool isBuildSet;
            private readonly List<T> bucket = new List<T>();

            public SqrtBucket(bool isBuildSet, Func<T, T, T> indexOperation, Func<T, T, T, T> allOperation)
            {
                this.isBuildSet = isBuildSet;
                this.indexOperation = indexOperation;
                this.allOperation = allOperation;
                if (isBuildSet)
                {
                    BucketSet = new Set<T>(true);
                }
            }

            public void Create(T value)
            {
                bucket.Add(value);
                Value = bucket.Count == 1 ? value : allOperation(Value, default(T), value);
            }

            public void Update(T value, int index)
            {
                var old = bucket[index];
                bucket[index] = indexOperation(old, value);
                Value = allOperation(Value, old, value);
            }

            public IEnumerable<T> GetValues(int left, int right)
            {
                var max = Math.Min(bucket.Count - 1, right);
                for (int i = left; i <= max; i++)
                {
                    yield return bucket[i];
                }
            }
        }
    }
    public class Set<T>
    {
        private Node root;
        private readonly IComparer<T> comparer;
        private readonly Node nil;
        public bool IsMultiSet { get; set; }

        public Set(IComparer<T> comparer, bool isMultiSet = false)
        {
            nil = new Node(default(T));
            root = nil;
            this.comparer = comparer;
            IsMultiSet = isMultiSet;
        }

        public Set(Comparison<T> comparision, bool isMultiSet = false) : this(Comparer<T>.Create(comparision), isMultiSet)
        {
        }

        public Set(bool isMultiSet) : this(Comparer<T>.Default, isMultiSet)
        {
        }
        
        public Set() : this(false)
        {
        }

        public bool Add(T v)
        {
            return Insert(ref root, v);
        }

        public bool Remove(T v)
        {
            return Remove(ref root, v);
        }

        public T this[int index] => Find(root, index);
        public int Count => root.Count;

        public void RemoveAt(int k)
        {
            if (k < 0 || k >= root.Count) throw new ArgumentOutOfRangeException();
            RemoveAt(ref root, k);
        }

        public T[] Items
        {
            get
            {
                var ret = new T[root.Count];
                var k = 0;
                Walk(root, ret, ref k);
                return ret;
            }
        }

        private static void Walk(Node t, IList<T> a, ref int k)
        {
            while (true)
            {
                if (t.Count == 0) return;
                Walk(t.Lst, a, ref k);
                a[k++] = t.Key;
                t = t.Rst;
            }
        }

        private bool Insert(ref Node t, T key)
        {
            if (t.Count == 0)
            {
                t = new Node(key);
                t.Lst = t.Rst = nil;
                t.Update();
                return true;
            }

            var cmp = comparer.Compare(t.Key, key);
            bool res;
            if (cmp > 0)
                res = Insert(ref t.Lst, key);
            else if (cmp == 0)
            {
                if (IsMultiSet) res = Insert(ref t.Lst, key);
                else return false;
            }
            else res = Insert(ref t.Rst, key);

            Balance(ref t);
            return res;
        }

        private bool Remove(ref Node t, T key)
        {
            if (t.Count == 0) return false;
            var cmp = comparer.Compare(key, t.Key);
            bool ret;
            if (cmp < 0) ret = Remove(ref t.Lst, key);
            else if (cmp > 0) ret = Remove(ref t.Rst, key);
            else
            {
                ret = true;
                var k = t.Lst.Count;
                if (k == 0)
                {
                    t = t.Rst;
                    return true;
                }

                if (t.Rst.Count == 0)
                {
                    t = t.Lst;
                    return true;
                }


                t.Key = Find(t.Lst, k - 1);
                RemoveAt(ref t.Lst, k - 1);
            }

            Balance(ref t);
            return ret;
        }

        private void RemoveAt(ref Node t, int k)
        {
            var cnt = t.Lst.Count;
            if (cnt < k) RemoveAt(ref t.Rst, k - cnt - 1);
            else if (cnt > k) RemoveAt(ref t.Lst, k);
            else
            {
                if (cnt == 0)
                {
                    t = t.Rst;
                    return;
                }

                if (t.Rst.Count == 0)
                {
                    t = t.Lst;
                    return;
                }

                t.Key = Find(t.Lst, k - 1);
                RemoveAt(ref t.Lst, k - 1);
            }

            Balance(ref t);
        }

        private static void Balance(ref Node t)
        {
            var balance = t.Lst.Height - t.Rst.Height;
            if (balance == -2)
            {
                if (t.Rst.Lst.Height - t.Rst.Rst.Height > 0) { RotR(ref t.Rst); }

                RotL(ref t);
            }
            else if (balance == 2)
            {
                if (t.Lst.Lst.Height - t.Lst.Rst.Height < 0) RotL(ref t.Lst);
                RotR(ref t);
            }
            else t.Update();
        }

        private T Find(Node t, int k)
        {
            if (k < 0 || k > root.Count) throw new ArgumentOutOfRangeException();
            for (;;)
            {
                if (k == t.Lst.Count) return t.Key;
                else if (k < t.Lst.Count) t = t.Lst;
                else
                {
                    k -= t.Lst.Count + 1;
                    t = t.Rst;
                }
            }
        }

        public int LowerBound(T v)
        {
            var k = 0;
            var t = root;
            for (;;)
            {
                if (t.Count == 0) return k - 1;
                if (comparer.Compare(v, t.Key) <= 0) t = t.Lst;
                else
                {
                    k += t.Lst.Count + 1;
                    t = t.Rst;
                }
            }
        }

        public int UpperBound(T v)
        {
            var k = 0;
            var t = root;
            for (;;)
            {
                if (t.Count == 0) return k;
                if (comparer.Compare(t.Key, v) <= 0)
                {
                    k += t.Lst.Count + 1;
                    t = t.Rst;
                }
                else t = t.Lst;
            }
        }

        private static void RotR(ref Node t)
        {
            var l = t.Lst;
            t.Lst = l.Rst;
            l.Rst = t;
            t.Update();
            l.Update();
            t = l;
        }

        private static void RotL(ref Node t)
        {
            var r = t.Rst;
            t.Rst = r.Lst;
            r.Lst = t;
            t.Update();
            r.Update();
            t = r;
        }


        private class Node
        {
            public Node(T key)
            {
                Key = key;
            }

            public int Count { get; private set; }
            public sbyte Height { get; private set; }
            public T Key { get; set; }
            public Node Lst, Rst;

            public void Update()
            {
                Count = 1 + Lst.Count + Rst.Count;
                Height = (sbyte) (1 + Math.Max(Lst.Height, Rst.Height));
            }

            public override string ToString()
            {
                return $"Count = {Count}, Key = {Key}";
            }
        }
    }

}
