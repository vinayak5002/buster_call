import sys

def main(ioi):
    rxs = lambda: map(int, ioi.readline().split())
    N, K, L, R = rxs()
    As = [*rxs()]
    # dp[n][k][r] = dp[n-1][k][r] + dp[n-1][k-1][r+A[n]]
    # dp[n][0][r] = 0
    # dp[n][1][r] = dp[n-1][1][r] + (1 if L-A[n] <= r <= R-A[n] else 0)
    # dp[0][1][r] = 1 if L-A[0] <= r <= R-A[0] else 0
    # dp[1][2][r] = dp[0][1][r+A[1]]
    # dp[2][1][r] = dp[1][1][r] + dp[1][0][r+A[2]] = dp[0][1][r]

    def solve(n, k, r):
        if (n, k) == (0, 1): return 1 if L-As[n] <= r <= R-As[n] else 0
        if k == 0 or k > n+1: return 0
        if r > R: return 0
        if k == 1: return solve(n-1, 1, r) + (1 if L-As[n] <= r <= R-As[n] else 0)
        return solve(n-1, k, r) + solve(n-1, k-1, r+As[n])
        
    return solve(N-1, K, 0)

DBG = False
if not DBG: print(main(sys.stdin))
else:
    import io
    print(main(io.StringIO("""2 2 1 9
5 1
""")))
    print(main(io.StringIO("""5 2 7 19
3 5 4 2 2
""")))

