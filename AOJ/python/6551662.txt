import Control.Monad ( (<=<) )
import Data.Bifunctor ( Bifunctor(bimap) )

type Point = (Double,Double)
type Line = (Point,Point)

main :: IO ()
main = do
  n <- readLn
  mapM_ putStrLn $ solve n
  putStrLn "100 0"

solve :: Int -> [String]
solve n = map (\((x,y),_) -> show x ++ " " ++ show y) $ f n where
  f 0 = [((0,0),(100,0))]
  f n = foldr1 (<=<) (replicate n koch) ((0,0),(100,0))

koch :: Line -> [Line]
koch ((sx,sy),(ex,ey)) = [(p0,p1),(p1,p2),(p2,p3),(p3,p4)] where
  dx = ex - sx
  dy = ey - sy
  p0 = (sx,sy)
  p1 = (sx+dx/3,sy+dy/3)
  p2 = bimap (fst p1 +) (snd p1 +) p2
  p3 = (sx+dx*2/3,sy+dy*2/3)
  p4 = (ex,ey)
