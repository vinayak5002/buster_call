using System;
using System.Collections.Generic;
using System.Linq;
using CoderLib8.DataTrees;

class E
{
	static int[] Read() => Array.ConvertAll(Console.ReadLine().Split(), int.Parse);
	static void Main()
	{
		var n = Read()[0];
		var map = Array.ConvertAll(new bool[n], _ => Read().Skip(1).ToArray());
		var qc = Read()[0];
		var qs = Array.ConvertAll(new bool[qc], _ => Read());

		var hld = new HLD(n, map, 0);
		var st = new LST<long, long>(n,
			(x, y) => x + y, 0,
			(x, y) => x + y, 0,
			(x, p, _, l) => p + x * l);

		Console.SetOut(new System.IO.StreamWriter(Console.OpenStandardOutput()) { AutoFlush = false });
		foreach (var q in qs)
		{
			if (q[0] == 0)
			{
				var (v, w) = (hld.Nodes[q[1]], q[2]);

				while (v != null)
				{
					var gr = v.Group.Root;
					st.Set(gr.Order, v.Order + 1, w);
					v = gr.Parent;
				}
			}
			else
			{
				var v = hld.Nodes[q[1]];
				var r = -st.Get(hld.Root.Order);

				while (v != null)
				{
					var gr = v.Group.Root;
					r += st.Get(gr.Order, v.Order + 1);
					v = gr.Parent;
				}
				Console.WriteLine(r);
			}
		}
		Console.Out.Flush();
	}
}

public class HLD
{
	public static List<int>[] ToMapList(int n, int[][] es, bool directed)
	{
		var map = Array.ConvertAll(new bool[n], _ => new List<int>());
		foreach (var e in es)
		{
			map[e[0]].Add(e[1]);
			if (!directed) map[e[1]].Add(e[0]);
		}
		return map;
	}

	[System.Diagnostics.DebuggerDisplay(@"\{{Id}\}")]
	public class Node
	{
		public int Id;
		public int Size = 1, Depth, Order;
		public Node Parent, HeavyChild;
		public Group Group;
	}

	[System.Diagnostics.DebuggerDisplay(@"\{{Root.Id}, Count = {Count}\}")]
	public class Group
	{
		public List<Group> Children = new List<Group>();
		public Group Parent;
		public int Depth;

		public List<Node> Nodes = new List<Node>();
		public int Count => Nodes.Count;
		public Node Root => Nodes[0];
	}

	public int[][] Map { get; }
	public Node[] Nodes { get; }
	public Node[] NodesByOrder { get; }
	public List<Group> Groups { get; } = new List<Group>();
	public Node Root { get; }

	public HLD(int n, int[][] map, int root)
	{
		Map = map;
		Nodes = new Node[n];
		for (int i = 0; i < n; ++i) Nodes[i] = new Node { Id = i };
		Root = Nodes[root];

		Dfs(Root, new Node { Id = -1 });

		NodesByOrder = new Node[n];
		var order = -1;
		foreach (var g in Groups)
		{
			g.Nodes.Reverse();
			foreach (var cn in g.Nodes)
			{
				cn.Order = ++order;
				NodesByOrder[order] = cn;
			}
			if (g.Root.Parent != null)
			{
				g.Parent = g.Root.Parent.Group;
				g.Parent.Children.Add(g);
			}
		}
		DfsForGroup(Root.Group);
	}

	void Dfs(Node cn, Node pn)
	{
		Node hc = null;

		foreach (var nv in Map[cn.Id])
		{
			if (nv == pn.Id) continue;
			var nn = Nodes[nv];
			nn.Depth = cn.Depth + 1;
			nn.Parent = cn;
			Dfs(nn, cn);
			cn.Size += nn.Size;
			if ((hc?.Size ?? 0) < nn.Size) hc = nn;
		}

		cn.HeavyChild = hc;
		if (hc == null) Groups.Add(cn.Group = new Group());
		else cn.Group = hc.Group;
		cn.Group.Nodes.Add(cn);
	}

	void DfsForGroup(Group g)
	{
		foreach (var ng in g.Children)
		{
			ng.Depth = g.Depth + 1;
			DfsForGroup(ng);
		}
	}
}

namespace CoderLib8.DataTrees
{
	// 範囲更新・範囲取得
	// TO は作用素を表します。
	// TV は値を表します。
	// 外見上は 0-indexed, 0 <= i < n
	// 内部では 1-indexed, 1 <= i < n2
	class LST<TO, TV>
	{
		public struct STNode
		{
			public int i;
			public static implicit operator STNode(int i) => new STNode { i = i };
			public override string ToString() => $"{i}";

			public STNode Parent => i >> 1;
			public STNode Child0 => i << 1;
			public STNode Child1 => (i << 1) + 1;
			public STNode LastLeft(int length) => i * length;
			public STNode LastRight(int length) => (i + 1) * length;
		}

		// Power of 2
		public int n2 = 1;
		public TO[] a1;
		public TV[] a2;

		public Func<TO, TO, TO> Multiply;
		public TO id;
		Func<TO, TO, bool> TOEquals = System.Collections.Generic.EqualityComparer<TO>.Default.Equals;

		public Func<TV, TV, TV> Union;
		public TV v0;

		// (operator, currentValue, node, length) => newValue
		public Func<TO, TV, STNode, int, TV> Transform;

		public LST(int n, Func<TO, TO, TO> multiply, TO _id, Func<TV, TV, TV> union, TV _v0, Func<TO, TV, STNode, int, TV> transform, TV[] a0 = null)
		{
			while (n2 < n << 1) n2 <<= 1;
			a1 = new TO[n2];
			a2 = new TV[n2];

			Multiply = multiply;
			id = _id;
			Union = union;
			v0 = _v0;
			Transform = transform;
			if (!TOEquals(id, default(TO)) || !Equals(v0, default(TV)) || a0 != null) Init(a0);
		}

		public void Init(TV[] a0 = null)
		{
			for (int i = 1; i < n2; ++i) a1[i] = id;

			if (a0 == null)
			{
				for (int i = 1; i < n2; ++i) a2[i] = v0;
			}
			else
			{
				Array.Copy(a0, 0, a2, n2 >> 1, a0.Length);
				for (int i = (n2 >> 1) + a0.Length; i < n2; ++i) a2[i] = v0;
				for (int i = (n2 >> 1) - 1; i > 0; --i) a2[i] = Union(a2[i << 1], a2[(i << 1) + 1]);
			}
		}

		public STNode Actual(int i) => (n2 >> 1) + i;
		public int Original(STNode n) => n.i - (n2 >> 1);

		void PushDown(STNode n, int length)
		{
			var op = a1[n.i];
			if (TOEquals(op, id)) return;
			STNode c0 = n.Child0, c1 = n.Child1;
			a1[c0.i] = Multiply(op, a1[c0.i]);
			a1[c1.i] = Multiply(op, a1[c1.i]);
			a2[c0.i] = Transform(op, a2[c0.i], c0, length >> 1);
			a2[c1.i] = Transform(op, a2[c1.i], c1, length >> 1);
			a1[n.i] = id;
		}

		public void Set(int i, TO op) => Set(i, i + 1, op);
		public void Set(int l_in, int r_ex, TO op)
		{
			int al = (n2 >> 1) + l_in, ar = (n2 >> 1) + r_ex;
		Action<STNode, int> Dfs = null;
		Dfs = (n, length) =>
		{
			int nl = n.i * length, nr = nl + length;

			if (al <= nl && nr <= ar)
			{
				a1[n.i] = Multiply(op, a1[n.i]);
				a2[n.i] = Transform(op, a2[n.i], n, length);
			}
			else
			{
				PushDown(n, length);
				var nm = (nl + nr) >> 1;
				if (al < nm && nl < ar) Dfs(n.Child0, length >> 1);
				if (al < nr && nm < ar) Dfs(n.Child1, length >> 1);
				a2[n.i] = Union(a2[n.Child0.i], a2[n.Child1.i]);
			}
		};
		Dfs(1, n2 >> 1);
		}

		public TV Get(int i) => Get(i, i + 1);
		public TV Get(int l_in, int r_ex) => Aggregate(l_in, r_ex, v0, (p, n, l) => Union(p, a2[n.i]));

		// (previous, node, length) => result
		public TR Aggregate<TR>(int l_in, int r_ex, TR r0, Func<TR, STNode, int, TR> func)
		{
			int al = (n2 >> 1) + l_in, ar = (n2 >> 1) + r_ex;
		var rv = r0;
		Action<STNode, int> Dfs = null;
		Dfs = (n, length) =>
		{
			int nl = n.i * length, nr = nl + length;

			if (al <= nl && nr <= ar)
			{
				rv = func(rv, n, length);
			}
			else
			{
				PushDown(n, length);
				var nm = (nl + nr) >> 1;
				if (al < nm && nl < ar) Dfs(n.Child0, length >> 1);
				if (al < nr && nm < ar) Dfs(n.Child1, length >> 1);
			}
		};
		Dfs(1, n2 >> 1);
		return rv;
		}
	}
}

