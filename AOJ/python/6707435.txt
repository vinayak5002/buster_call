import java.math.BigInteger
import java.util.*
import kotlin.math.sqrt

fun main() {
    fun readInt(): Int {
        return readLine()!!.toInt()
    }

    fun readIntList(): List<Int> {
        return readLine()!!.split(" ").map { it.toInt() }
    }

    val n = readInt()
    val g = Array(n) { readIntList().toIntArray() }
    var ans = MutableList(n) { MutableList(2) { -1 } }
    var que = ArrayDeque<Int>()
    var cnt = 1
    for (i in 0 until n) {
        if (ans[i][0] == -1) {
            que.push(i)
            while (que.isNotEmpty()) {
                val now = que.first
                if (ans[now][0] == -1) {
                    ans[now][0] = cnt++
                }
                var f = true
                for (j in g[now][1] - 1 downTo 0) {
                    val tmp = g[now][2 + j] - 1
                    if (ans[tmp][0] == -1) {
                        que.push(tmp)
                        f = false
                    }
                }
                if (f) {
                    que.pop()
                    if (ans[now][1] == -1) {
                        ans[now][1] = cnt++
                    }
                }
            }
        }
    }
    ans.forEachIndexed { index, li -> println("${index + 1} ${li[0]} ${li[1]}") }
}

fun Int.isEven(): Boolean = this % 2 == 0

fun Int.isOdd(): Boolean = !isEven()

fun Int.factorial() = (1..this).reduce { a, b -> a * b }

fun Int.permutation(k: Int = 1) = (k..this).reduce { a, b -> a * b }

fun <T> List<T>.permutations(): Set<List<T>> {
    val source = this
    val permutations = mutableSetOf<List<T>>()
    fun permutation(source: List<T>, perm: List<T>) {
        if (source.size <= 1) {
            permutations += perm + source
        } else {
            repeat(source.size) {
                permutation(source.take(it) + source.drop(it + 1), perm + source[it])
            }
        }
    }
    permutation(source, emptyList())
    return permutations
}

/*fun <T> List<T>.permutations(): List<List<T>> {
    if (this.isEmpty()) return listOf(emptyList())

    val result: MutableList<List<T>> = mutableListOf()
    for (i in this.indices) {
        (this - this[i]).permutations().forEach { item ->
            result.add(0, item + this[i])
        }
    }
    return result
}*/

fun Int.combination(k: Int = 1) = permutation(k) / k.factorial()

// digitToIntが1.5からなので自前で定義
fun Char.digitToInt(): Int {
    @Suppress("DEPRECATION")
    return Character.digit(this.toInt(), 10).also {
        if (it < 0) throw IllegalArgumentException("Char $this is not a decimal digit")
    }
}


operator fun Regex.contains(text: CharSequence): Boolean = this.matches(text)

fun divisor(value: Long): List<Long> {
    return (1..(sqrt(value.toDouble()).toLong() + 1)).filter { value % it == 0L }
        .flatMap {
            if (value / it == it) listOf(it) else listOf(
                it,
                value / it
            )
        }//.also { println("value: $value, divisors $it") }
}

fun primeFactor(value: Long): List<Long> {
    if (value == 1L) return listOf(1)
    val max = Math.sqrt(value.toDouble()).toLong()
    return prime(2, max).filter { value % it == 0L }.also { println("value: $value, primeFactor $it") }
}

// 範囲内の素数を取得
// fromだけ指定すると戻り値の個数で素数判定ができる
fun prime(from: Long, to: Long = from): List<Long> {
    return (from..to).filter { i ->
        val max = Math.sqrt(i.toDouble()).toLong()
        (2..max).all { j -> i % j != 0L }
    }
}


fun readInt(): Int = readLine()!!.toInt()

fun readLong(): Long = readLine()!!.toLong()

fun readDouble(): Double = readLine()!!.toDouble()

fun readInts(): List<Int> = readLine()!!.split(" ").map { it.toInt() }

fun readBigInts(): List<BigInteger> = readLine()!!.split(" ").map { it.toBigInteger() }

fun readLongs(): List<Long> = readLine()!!.split(" ").map { it.toLong() }

fun readDoubles(): List<Double> = readLine()!!.split(" ").map { it.toDouble() }

fun readStrList(): List<String> = readLine()!!.split(" ")

fun Double.decimalFormat(decimalCount: Int): String = String.format("%.${decimalCount}f", this)
