const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
	//0 ~ n - 1 で考えられるすべての組み合わせを列挙
	//
	const n = parseInt(si[0].split("\n"));
	const BIT_NUM = n;

	let combi = new Combination(n);

	let result  = [];
	
	for (let i = 1; i <= n; i++) {
		result.push(combi.getCombination(i));
	}

	let ans = combi.makeAns(result);
	so.write(ans);

}

class Combination {
	constructor(vol) {
		this.array = [];
		for (let i = 0; i < vol; i++) {
			this.array.push(i);
		}
	}

	getCombination(r, types) {
		const result = [];
		types = types || this.array;
		r = r || this.array.length;
		if (types.length < r) {
			return [];
		}
		if (r === 1) {
			for (let i = 0; i < types.length; i++) {
				result[i] = [types[i]];
			}
		} else {
			for (let i = 0; i < types.length; i++) {
				const parts = types.slice(i + 1);
				//parts.splice(i, 1);
				const row = this.getCombination(r - 1, parts);
				for (let j = 0; j < row.length; j++) {
					result.push([types[i]].concat(row[j]));
				}
			}
		}
		return result;
	}
	
	makeAns(result) {
		let map = new Map();
		for (let i = 0; i < result.length; i++) {
			for (let j = 0; j < result[i].length; j++) {
				let d = Math.pow(2, result[i][j][0]);
				for (let k = 0; k < result[i][j].length; k++) {
					d = d | Math.pow(2, result[i][j][k]);
				}
				map.set(d, result[i][j]);
			}
		}
		let ans = '0:\n';
		for (let i = 1; i <= map.size; i++) {
			ans += i + ':';
			for (let j = 0; j < map.get(i).length; j++) {
				ans += ' ' + map.get(i)[j];
			}
			ans += '\n';
		}
		return ans;
	}
}
