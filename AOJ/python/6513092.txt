const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
	const bitNum = 64
	let flag = new Array(bitNum).fill(0)
	let queryNum = si[0]
	
	for (let i = 1; i <= queryNum; i++) {
		let query = si[i].split(" ")
		let order = query[0]
		let elem = bitNum - query[1] - 1
		
		if(order == 0) {
			// flagがON(1)のとき1、OFF(0)のとき0を表示
			so.write(flag[elem] + "\n")
		} else if(order == 1) {
			// 指定されたflagをON
			flag[elem] = 1
		} else if(order == 2) {
			// 指定されたflagをOFF
			flag[elem] = 0
		} else if(order == 3) {
			// 指定されたflagを反転
			if (flag[elem]) {
				flag[elem] = 0
			} else {
				flag[elem] = 1
			}
		} else if(order == 4) {
			// flagがすべてONで1、そうでないなら0
			let offFlagNum = flag.filter(function(val){
				return val == 0
			})
			if (offFlagNum.length){
				so.write("0\n")
			} else {
				so.write("1\n")
			}
		} else if(order == 5) {
			// いずれかのflagがONで1、そうでないなら0
			if (parseInt(flag.join(""), 2)) {
				so.write("1\n")
			} else {
				so.write("0\n")
			}
		} else if(order == 6) {
			// flagがすべてOFFで1、そうでないなら0
			if (0 == parseInt(flag.join(""), 2)) {
				so.write("1\n")
			} else {
				so.write("0\n")
			}
		} else if(order == 7) {
			// ONになってるflagの数を表示
			let onFlagNum = flag.filter(function(val){
				return val == 1
			})
			so.write(onFlagNum.length + "\n")
		} else if(order == 8) {
			// flagの整数値を表示
			so.write(parseInt(flag.join(""), 2) + "\n")
		}
	}
}

