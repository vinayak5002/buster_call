from heapq import heappop, heappush
to = [{1, 4}, {0, 2, 5}, {1, 3, 6}, {2, 7}, {0, 5, 8}, {1, 4, 6, 9}, {2, 5, 7, 10}, {3, 6, 11},
      {4, 9, 12}, {5, 8, 10, 13}, {6, 9, 11, 14}, {7, 10, 15}, {8, 13}, {9, 12, 14}, {10, 13, 15}, {11, 14}]

N = 4                                                    # N * N pieces
LIMIT = 45
target = 0

pieces = [[[0] for j in range(N)] for i in range(N)]     # contents for simulation
op = [[0,0] for i in range(LIMIT+1)]                       # operations for simulation

MD = [[ abs(i//N - j//N) + abs(i%N - j%N) for j in range(N*N) ] for i in range(N*N)]    # manhattan dist between point i and point j
PW = [ 16**i for i in range(N*N)]

initial = []
initial_v = 0
initial_s = -1                                           # the position of space
p = 0
for i in range(N):
    row = list(map(int, input().split()))
    for j in range(N):
        pieces[i][j] = row[j]
        if row[j] == 0:
            initial.append(N*N)
            initial_s = i*N + j
        else:
            initial.append(row[j])
            initial_v += row[j]*PW[p]
        if (p+1) <= 15: target += (p+1)*PW[p]
        p += 1

heuristic = limit = 0
space = initial_s
statev = initial_v

SW = [[ i*PW[j] for j in range(N*N) ] for i in range(N*N)]

visited = set()

h = 0
for i in range(N*N):
    if initial[i] != N*N: h += MD[i][initial[i]-1]

queue = [(h, 0, h, statev, space)]
visited = set()

while True:
    c, d, h, statev, space = heappop(queue)
    if statev in visited: continue
    elif statev == target:
        print(d)
        break
    visited.add(statev)

    for nx in to[space]:
        val = (statev >> (4*nx)) & 15
        nstatev = statev - SW[val][nx] + SW[val][space]
        if nstatev in visited: continue
        nh = h + MD[space][val-1] - MD[nx][val-1]
        if d+1 > LIMIT: continue
        heappush(queue, (d + 1 + nh, d+1, nh, nstatev, nx))






