

#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <cmath>
#include <iomanip>
#include <random>
#include <stdio.h>
#include <fstream>
#include <functional>
#include <cassert>
#include <unordered_map>
//#include <atcoder/all>

using namespace std;
//using namespace atcoder;


#define rep(i,n) for (int i=0;i<n;i+=1)
#define rrep(i,n) for (int i=n-1;i>-1;i--)
#define pb push_back
#define all(x) (x).begin(), (x).end()

template<class T>
using vec = vector<T>;
template<class T>
using vvec = vec<vec<T>>;
template<class T>
using vvvec = vec<vvec<T>>;
using ll = long long;
using pii = pair<int,int>;
using pll = pair<ll,ll>;


template<class T>
bool chmin(T &a, T b){
  if (a>b){
    a = b;
    return true;
  }
  return false;
}

template<class T>
bool chmax(T &a, T b){
  if (a<b){
    a = b;
    return true;
  }
  return false;
}

template<class T>
T sum(vec<T> x){
  T res=0;
  for (auto e:x){
    res += e;
  }
  return res;
}

template<class T>
void printv(vec<T> x){
  for (auto e:x){
    cout<<e<<" ";
  }
  cout<<endl;
}


int main(){
  ios::sync_with_stdio(false);
  std::cin.tie(nullptr);

  int N,M;
  while (true){
    cin>>N>>M;
    if (N==0 && M==0){
      break;
    }
    vec<int> A(N);
    vec<int> B(N);
    rep(i,N){
      cin>>A[i];
    }
    rep(i,N){
      cin>>B[i];
      if (B[i] >= A[i]){
        B[i] -= A[i];
      }
      else{
        B[i] = B[i] + M - A[i];
      }
    }

    vec<int> dp(N);
    rep(i,N){
      dp[i] = B[0] + M * i;
    }
    for (int i=1;i<N;i++){
      vec<int> ndp(N,1e9);
      for (int j=0;j<N;j++){
        if (j!=0){
          chmin(ndp[j],dp[j-1]+max(B[i]-B[i-1]+M,0));
        }
        chmin(ndp[j],dp[j]+max(B[i]-B[i-1],0));
        if (j!=N-1){
          chmin(ndp[j],dp[j+1]+max(B[i]-B[i-1]-M,0));
        }
      }
      dp = ndp;
    }

    int res = 1e9;
    for (auto a:dp){
      res = min(res,a);
    }

    cout<<res<<endl;
    

  }


  
}
