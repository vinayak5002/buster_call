const { findSourceMap } = require('module');

const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
    let q = si[0];
    let multi = new Array(); // 重複を許すため, setオブジェクトは用いない.
    let str = "";

    for (let i = 0; i < q; i++) {
        let pair = si[i + 1].split(" ");

        let leftN = Number(pair[0]);
        let middleN = Number(pair[1]);
        let rightN = Number(pair[2]);

        /* so.write("leftN = " + leftN + ", middleN = " + middleN);// forDebug
        if (rightN) {
            console.log(", rightN = " + rightN);
        } else {
            console.log("");
        }*/ // forDebug

        switch (leftN) {
            case 0:
                multi.push(middleN);
                str += multi.length + "\n";
                break;

            case 1:
                let count = 0;
                for (let j = 0; j < multi.length; j++) {// O(n)でmiddleNの数を数える.
                    if (multi[j] === middleN) {
                        count++;
                    }
                }
                str += count + "\n";
                break;

            case 2:
                for (let j = 0; j < multi.length; j++) {// O(n)でmiddleNの数を数える.
                    if (multi[j] === middleN) {
                        multi.splice(j, 1);
                    }
                }
                break;

            case 3:
                multi.sort((a, b) => a - b);
                let dump = "";
                for (let j = 0; j < multi.length; j++) {
                    if (multi[j] >= middleN && multi[j] <= rightN) {
                        dump += multi[j] + "\n";
                    }
                }
                //str += ("dump : { ")// forDebug
                str += dump;
                //str += (" }")// forDebug
                break;
        }
    }
    so.write(str);
}

