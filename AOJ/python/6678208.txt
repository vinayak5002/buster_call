class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
 
class bst:
    def __init__(self, key):
        self.root = Node(key)
 
    def insert(self, key):
        node = self.root
        while node != None:
            parent = node
            if node.key == key:
                return
            elif node.key > key:
                node = node.left
                flag = 'left'
            else:
                node = node.right
                flag = 'right'
        newnode = Node(key)
        if flag == 'left':
            parent.left = newnode
        else:
            parent.right = newnode

    def pre_order(self, t):#先行
        if t != None:
            print('',t.key, end='')
            self.pre_order(t.left)
            self.pre_order(t.right)
            
        
    def ino_order(self, t):
        if t != None:
            self.ino_order(t.left)
            print('',t.key, end='')
            self.ino_order(t.right)

N = int(input())

for i in range(N):
    ope = input()
    if ope == 'insert':
        value = input()
        if i == 0:    
            tree = bst(value)
        else:
            tree.insert(value)
    else:
        tree.pre_order(tree.root)
        print()
        tree.ino_order(tree.root)
        print()
