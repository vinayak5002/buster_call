import Data.Monoid (mconcat)
import Data.Functor ((<$>))
import Data.Maybe (fromJust)
import qualified Data.ByteString.Char8 as BC
import Control.Monad (when, forM_)

main :: IO ()
main = do
  n <- readInt <$> BC.getLine :: IO Int
  forM_ [1..n] $ \i ->
    when (i `mod` 3 == 0 || '3' `elem` show i) (putStr $ mconcat [show i, " "])
  putStrLn ""

readInt :: BC.ByteString -> Int
readInt = fst . fromJust . BC.readInt

