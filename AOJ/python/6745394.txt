
#[allow(unused_imports)]
use std::collections::HashMap;
#[allow(unused_imports)]
use std::collections::{VecDeque, BinaryHeap};
#[allow(unused_imports)]
use std::hash::Hash;
#[allow(unused_imports)]
use std::io::{BufWriter, Write};
#[allow(unused_imports)]
use std::iter::Sum;
#[allow(unused_imports)]
use std::ops::{Add, Div, Deref};
#[allow(unused_imports)]
use std::ops::Index;
#[allow(unused_imports)]
use std::ops::Mul;
#[allow(unused_imports)]
use std::ops::Sub;
#[allow(unused_imports)]
use std::ptr::NonNull;
#[allow(unused_imports)]
use std::str::FromStr;
#[allow(unused_imports)]
use std::{collections::BTreeMap, collections::BTreeSet, fs::read, ops::AddAssign, ops::Neg, ops::RangeInclusive, rc::Rc, vec};
#[allow(unused_imports)]
use std::cmp::{Ordering, Reverse};
#[allow(unused_imports)]
use std::fmt::Debug;

const PARSE_ERROR: &str = "Can't Parse";
const EOF_ERROR: &str = "No Line";
#[allow(unused_macros)]
macro_rules! freeze {
    ($($id:ident), *) => {
        $(let $id = $id;)*
    };
}
#[allow(unused_macros)]
macro_rules! read_line {
    () => {
        {
            let mut buffer = String::new();
            std::io::stdin().read_line(&mut buffer).expect(EOF_ERROR);
            buffer.trim().to_owned()
        }
    };
    (&mut $buffer: ident) => {
        {
            std::io::stdin().read_line(&mut $buffer).expect(EOF_ERROR);
            $buffer.trim().to_owned()
        }
    };
}
#[allow(unused_macros)]
macro_rules! show {
    () => {};
    ($tt:expr) => {
        println!("{} {} => {:?}", line!(), stringify!($tt), $tt);
    };
    ($tt:tt) => {
        println!("{} {} => {:?}", line!(), stringify!($tt), $tt);
    };
    ($head:expr, $($tail:expr)*) => {
        show!($head);
        show!($($tail)*);
    };
}
#[allow(unused_macros)]
macro_rules! read {
    () => {
        read_line!()
    };
    ([[char]; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!([char])).collect::<Vec<_>>()
    };
    ([[usize1]; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!([usize1])).collect::<Vec<_>>()
    };
    ([[$ty:ty]; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!([$ty])).collect::<Vec<_>>()
    };
    ([usize1; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!(usize1)).collect::<Vec<_>>()
    };
    ([$ty:ty; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!($ty)).collect::<Vec<_>>()
    };
    ([$block: block; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!($block)).collect::<Vec<_>>()
    };
    
    ([f64] ASC) => {
        {
            read!(mut vec: [f64]);
            vec.sort_by(|a, b| a.partial_cmp(b).unwrap());
            vec
        }
    };
    ([f64; $len: expr] ASC) => {
        {
            read!(mut vec: [f64; $len]);
            vec.sort_by(|a, b| a.partial_cmp(b).unwrap());
            vec
        }
    };
    ([$($tt: tt)*] ASC) => {
        {
            read!(mut vec: [$($tt)*]);
            vec.sort();
            vec
        }
    };
    ([f64] DESC) => {
        {
            read!(mut vec: [f64]);
            vec.sort_by(|a, b| a.partial_cmp(b).unwrap().reverse());
            vec
        }
    };
    ([f64; $len: expr] DESC) => {
        {
            read!(mut vec: [f64; $len]);
            vec.sort_by(|a, b| a.partial_cmp(b).unwrap().reverse());
            vec
        }
    };
    ([$($tt: tt)*] DESC) => {
        {
            read!(mut vec: [$($tt)*]);
            vec.sort_by_key(|&v| Reverse(v));
            vec
        }
    };
    ([char]) => {
        read_line!().chars().collect::<Vec<_>>()
    };
    ([String]) => {
        read_line!().split_whitespace().map(|s| s.to_owned()).collect::<Vec<String>>()
    };
    ([usize1]) => {
        read_line!().split_whitespace().map(|x| x.parse::<usize>().ok().expect(PARSE_ERROR) - 1).collect::<Vec<usize>>()
    };
    ([$ty: ty]) => {
        read_line!().split_whitespace().map(|x| x.parse().ok().expect(PARSE_ERROR)).collect::<Vec<$ty>>()
    };
    (usize1) => {
        read_line!().parse::<usize>().ok().expect(PARSE_ERROR) - 1
    };
    ($ty: ty) => {
        read_line!().parse::<$ty>().ok().expect(PARSE_ERROR)
    };
    ($block: block) => {
        $block
    };
    ($ident: ident: [$($tt:tt)*]) => {
        let $ident = read!([$($tt)*]);
    };
    (mut $ident: ident: [$($tt:tt)*]) => {
        let mut $ident = read!([$($tt)*]);
    };
    ($ident: ident: [$($tt:tt)*] ASC) => {
        let $ident = read!([$($tt)*] ASC);
    };
    ($ident: ident: [$($tt:tt)*] DESC) => {
        let $ident = read!([$($tt)*] DESC);
    };
    ($ident: ident: String) => {
        let $ident = read!();
    };
    (mut $ident: ident: String) => {
        let mut $ident = read!();
    };
    ($ident: ident: $ty: ty) => {
        let $ident = read_line!().parse::<$ty>().unwrap();
    };
    (mut $ident: ident: $ty: ty) => {
        let mut $ident = read_line!().parse::<$ty>().unwrap();
    };
    ($($token: tt)*) => {
        let line = read_line!();
        let mut iter = line.split_whitespace().into_iter();
        read_from_iter!(iter; $($token)*);
    };
}
#[allow(unused_macros)]
macro_rules! read_from_iter {
    ($iter:expr; mut $ident:ident:usize1, $($rest:tt)*) => {
        let mut $ident = $iter.next().unwrap().parse::<usize>().expect(PARSE_ERROR) - 1;
        read_from_iter!($iter; $($rest)*);
    };
    ($iter:expr; mut $ident:ident:$ty:ty, $($rest:tt)*) => {
        let mut $ident = $iter.next().unwrap().parse::<$ty>().expect(PARSE_ERROR);
        read_from_iter!($iter; $($rest)*);
    };
    ($iter:expr; $ident:ident:usize1, $($rest:tt)*) => {
        let $ident = $iter.next().unwrap().parse::<usize>().expect(PARSE_ERROR) - 1;
        read_from_iter!($iter; $($rest)*);
    };
    ($iter:expr; $ident:ident:$ty:ty, $($rest:tt)*) => {
        let $ident = $iter.next().unwrap().parse::<$ty>().expect(PARSE_ERROR);
        read_from_iter!($iter; $($rest)*);
    };
    ($iter:expr; mut $ident:ident:usize1) => {
        let mut $ident = $iter.next().unwrap().parse::<usize>().expect(PARSE_ERROR) - 1;
    };
    ($iter:expr; mut $ident:ident:$ty:ty) => {
        let mut $ident = $iter.next().unwrap().parse::<$ty>().expect(PARSE_ERROR);
    };
    ($iter:expr; $ident:ident:usize1) => {
        let $ident = $iter.next().unwrap().parse::<usize>().expect(PARSE_ERROR) - 1;
    };
    ($iter:expr; $ident:ident:$ty:ty) => {
        let $ident = $iter.next().unwrap().parse::<$ty>().expect(PARSE_ERROR);
    };
    ($iter: expr; ) => {};
}
#[derive(Clone)]
struct Replace {
    vec: Vec<usize>
}
impl Replace {
    fn new(size: usize) -> Replace {
        Replace{vec: (0 .. size).collect()}
    }
    fn and_then(&self, other: &Self) -> Replace {
        Replace{vec: other.vec.iter().map(|&i| self.vec[i]).collect()}
    }
    fn pow(&self, mut exp: usize) -> Replace {
        let mut result = Replace::new(self.vec.len());
        let mut base = self.clone();
        while exp > 0 {
            if exp & 1 == 1 {
                result = result.and_then(&base);
            }
            base = base.and_then(&base);
            exp >>= 1;
        }
        result
    }
    fn swap(&mut self, x: usize, y: usize) {
        let temp = self.vec[x];
        self.vec[x] = self.vec[y];
        self.vec[y] = temp;
    }
    fn apply<T: Copy>(&self, vec: &Vec<T>) -> Vec<T> {
        self.vec.iter().map(|&i| vec[i]).collect()
    }
}

fn main() {
    read!(n: usize);
    read!(initial: [u32]);
    read!(q: usize);
    read!(queries: [[usize]; q]);
    let mut result = Replace::new(n);
    let mut current = Replace::new(n);
    let mut stack = Vec::new();
    for query in queries {
        match query[..] {
            [1, x, y] => {
                current.swap(x - 1, y - 1);
                stack.push((x - 1, y - 1));
            },
            [2] => {
                let (x, y) = stack.pop().unwrap();
                current.swap(x, y);
            },
            [3, k] => {
                result = result.and_then(&current.pow(k));
            },
            _ => panic!()
        }
    }
    let result = result.apply(&initial);
    println!("{}", result.into_iter().map(|c| c.to_string()).collect::<Vec<_>>().join(" "));
}
