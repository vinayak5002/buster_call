// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DPL_5_G&lang=en
#include <iostream>
#include <vector>
using namespace std;

template <int MOD>
struct Fp
{
  long long val;
  constexpr Fp(long long v = 0) noexcept : val(v % MOD)
  {
    if (val < 0)
      v += MOD;
  }
  constexpr int getmod() { return MOD; }
  constexpr Fp operator-() const noexcept
  {
    return val ? MOD - val : 0;
  }
  constexpr Fp operator+(const Fp &r) const noexcept { return Fp(*this) += r; }
  constexpr Fp operator-(const Fp &r) const noexcept { return Fp(*this) -= r; }
  constexpr Fp operator*(const Fp &r) const noexcept { return Fp(*this) *= r; }
  constexpr Fp operator/(const Fp &r) const noexcept { return Fp(*this) /= r; }
  constexpr Fp &operator+=(const Fp &r) noexcept
  {
    val += r.val;
    if (val >= MOD)
      val -= MOD;
    return *this;
  }
  constexpr Fp &operator-=(const Fp &r) noexcept
  {
    val -= r.val;
    if (val < 0)
      val += MOD;
    return *this;
  }
  constexpr Fp &operator*=(const Fp &r) noexcept
  {
    val = val * r.val % MOD;
    return *this;
  }
  constexpr Fp &operator/=(const Fp &r) noexcept
  {
    long long a = r.val, b = MOD, u = 1, v = 0;
    while (b)
    {
      long long t = a / b;
      a -= t * b;
      swap(a, b);
      u -= t * v;
      swap(u, v);
    }
    val = val * u % MOD;
    if (val < 0)
      val += MOD;
    return *this;
  }
  constexpr bool operator==(const Fp &r) const noexcept
  {
    return this->val == r.val;
  }
  constexpr bool operator!=(const Fp &r) const noexcept
  {
    return this->val != r.val;
  }
  friend constexpr ostream &operator<<(ostream &os, const Fp<MOD> &x) noexcept
  {
    return os << x.val;
  }
  friend constexpr istream &operator>>(istream &is, Fp<MOD> &x) noexcept
  {
    return is >> x.val;
  }
  friend constexpr Fp<MOD> modpow(const Fp<MOD> &a, long long n) noexcept
  {
    if (n == 0)
      return 1;
    auto t = modpow(a, n / 2);
    t = t * t;
    if (n & 1)
      t = t * a;
    return t;
  }
};

template <class T>
struct BiCoef
{
  vector<T> fact_, inv_, finv_;
  constexpr BiCoef(int n) noexcept : fact_(n, 1), inv_(n, 1), finv_(n, 1)
  {
    int MOD = fact_[0].getmod();
    for (int i = 2; i < n; i++)
    {
      fact_[i] = fact_[i - 1] * i;
      inv_[i] = -inv_[MOD % i] * (MOD / i);
      finv_[i] = finv_[i - 1] * inv_[i];
    }
  }
  constexpr T com(int n, int k) const noexcept
  {
    if (n < k || n < 0 || k < 0)
      return 0;
    return fact_[n] * finv_[k] * finv_[n - k];
  }
  constexpr T fact(int n) const noexcept
  {
    if (n < 0)
      return 0;
    return fact_[n];
  }
  constexpr T inv(int n) const noexcept
  {
    if (n < 0)
      return 0;
    return inv_[n];
  }
  constexpr T finv(int n) const noexcept
  {
    if (n < 0)
      return 0;
    return finv_[n];
  }
};

const int MOD = 1'000'000'007;
using mint = Fp<MOD>;
BiCoef<mint> bc(5100);

// B(n, k) = sigma ((i^n/fact(i)*sigma((-1)^j/fact(j) j=0..k-i) i=0..k)
mint Bell(int n, int k)
{
  if (k > n)
    k = n;
  vector<mint> jsum(k + 2, 0);
  for (int j = 0; j <= k; j++)
  {
    mint add = bc.finv(j);
    if (j % 2 == 0)
      jsum[j + 1] = jsum[j] + add;
    else
      jsum[j + 1] = jsum[j] - add;
  }
  mint res = 0;
  for (int i = 0; i <= k; i++)
  {
    res += modpow(mint(i), n) * bc.finv(i) * jsum[k - i + 1];
  }
  return res;
}

int main()
{
  
  int n, k;
  cin >> n >> k;
  cout << Bell(n, k) << endl;
  return 0;
}
