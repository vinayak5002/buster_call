/*~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
*$* WRITER:kakitamasziru/OxOmisosiru *$*
~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=*/
#ifdef LOCAL_JUDGE
#define _GLIBCXX_DEBUG
#endif
#include <stdio.h>
#include <iostream> // cout, endl, cin
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <iomanip> //setprecision
#include <map> // map
#include <unordered_map> //unordered_map
#include <queue> // queue, priority_queue
#include <set> // set,multiset
#include <stack> // stack
#include <deque> // deque
#include <math.h>//pow,,,
#include <cmath>//abs,,,
#include <bitset> // bitset
#include <numeric> //accumulate,,,
#include <sstream>
#include <initializer_list>
// #include <random>
// #include <atcoder/all>
// using namespace atcoder;
using namespace std;

const long long INF = 4000000000000000001; // 4*10^18
const int inf = 1001001001;
const long long MOD = 1000000007;
const double pi = 3.141592653589;
#define endl "\n";

long long mod_pow(long long N, long long M, long long mod) {
    if (M == 0) return 1;
    long long res = mod_pow((N * N) % mod, M / 2,mod);

    if (M & 1) res = (res * N) % mod;
    return res %= mod;
}
long long gcd(long long a, long long b) {
    if (b == 0) return a; else return gcd(b, a % b);
}
long long lcm(long long a, long long b) {
    return a / gcd(a, b) * b ;
}
long long get_mod(long long res){
    if(res < 0) res += MOD;
    return res % MOD;
}
double DegToRad(double deg){
    return deg*(pi/180.0);
}
double RadToDeg(double rad){
    return rad/(pi/180.0);
}

//0-indexed
vector<long long> segment;
int leaf;

void initialize(int N){
    leaf = 1;
    while(leaf < N) leaf *= 2;
    segment = vector<long long>(2*leaf-1,0); // 単位元(sumなら0)で初期化
}

void seg_sum_update(int i, long long x) { // 0-index !!!
    // i 番目の葉の値を x に変える
    i += leaf - 1; // i 番目の葉のノード番号
    segment[i] += x; // add
    while (i > 0) {
        i = (i - 1) / 2; // ノード i の親ノードの番号に変える
        segment[i] = (segment[i * 2 + 1] + segment[i * 2 + 2]); // 左右の子の sum を計算しなおす
    }
}
 
int seg_sum_query(int a, int b, int k, int l, int r) { // トップダウンで計算するなら k,l=0 , r = N (0-indexed!!!)
    // [a, b) の区間に対するクエリについて 半開区間なので注意！！ bは1足して実行！！
    // ノード k （区間 [l, r) 担当）が答える
    if (r <= a || b <= l) {
        return 0; // 区間が被らない場合は 単位元0 を返す
    }
    if (a <= l && r <= b){
        return segment[k]; // ノード k の担当範囲がクエリ区間 [a, b) に完全に含まれる
    }
    else {
        long long c1 = seg_sum_query(a, b, 2 * k + 1, l, (l + r) / 2); // 左の子に値を聞く
        long long c2 = seg_sum_query(a, b, 2 * k + 2, (l + r) / 2, r); // 右の子に値を聞く
        return (c1 + c2); // 左右の子の値の sum を取る
    }
}

int main() {
    ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    // FILE* in = freopen("in/in1.txt" , "r" , stdin); //2つ以上のケースを試したい場合はファイル名をループ回してin2.txt等で指定していく
    // FILE* out = freopen("out/out1.txt", "w", stdout);
    // ifstream ifs("in.txt"); // 巨大ケースは in.txt に書いてifsで標準入力

    int N,Q;cin >> N >> Q;
    initialize(N);
    for(int q = 0;q<Q;q++){
        int t; long long x,y;cin >> t >> x >> y;
        if(t == 0){
            x--;
            seg_sum_update(x,y);
        }
        else if(t == 1){
            x--;y--;
            y++;
            cout << seg_sum_query(x,y,0,0,N) << endl;
        }
    }

}
