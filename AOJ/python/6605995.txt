/*109006279 Kisoon Jang*/

#include <stdio.h>

int main()
{
    int n, max[100000], count = 0;
	while(1)
	{
	    scanf("%d", &n);
	    int i, j, k, grid[255][255], sum;
        char c[255];
	    int maximum = 0;
		if (n == 0)
        {
            for (i = 0; i < count; i++)
            {
                printf("%d\n", max[i]);
            }
            break;
        }
		for (i = 0; i < n; i++)
		{
			scanf("%s", c);
			for (j = 0; j < n-1; j++)
			{
				if (c[j] == '1')
                {
                    grid[i][j] = 1;
                }
				else
                {
                    grid[i][j] = 0;
                }
			}
		}

		for (i = 0; i < n; i++)
		{
		    sum = 0;
			for (j = 0; j < n; j++) //horizontal
			{
				sum += grid[i][j];
			}
			if (sum > maximum)
            {
                maximum = sum;
            }

			sum = 0;
			for (j = 0; j < n; j++) //vertical
            {
                sum += grid[j][i];
            }
            if (sum > maximum)
            {
                maximum = sum;
            }

            sum = 0;
            k = i;
			for (j = 0; j <= i; j++) // left_top
            {
                sum += grid[j][k];
                k--;
            }
            if (sum > maximum)
            {
                maximum = sum;
            }

            sum = 0;
            k = 0;
			for (j = n-1-i; j < n; j++) //right_top
            {
                sum += grid[k][j];
                k++;
            }
            if (sum > maximum)
            {
                maximum = sum;
            }

            sum = 0;
            k = n-1-i;
			for (j = 0; j <= i; j++) //left_bottom
            {
                sum += grid[k][j];
                k++;
            }
            if (sum > maximum)
            {
                maximum = sum;
            }

            sum = 0;
            k = n-1-i;
			for (j = n-1; j >= n-1-i; j--) //right_bottom
            {
                sum += grid[k][j];
                k++;
            }
            if (sum > maximum)
            {
                maximum = sum;
            }
		}

		max[count] = maximum;
		count++;
	}

	return 0;
}

