def maxHeapify(dic,i):
    global H
    largest=i
    if "left" in dic[i]:
        l=dic[i]["left"]
        if l<=H and dic[l]["key"]>dic[i]["key"]:
            largest=l
        else:
            largest=i
    if "right" in dic[i]:
        r=dic[i]["right"]
    #左の子、自分、右の子で最大のnodeを選ぶ
        if r<=H and dic[r]["key"]>dic[largest]["key"]:
            largest=r
    if not largest==i:
        dic[i]["key"],dic[largest]["key"]=dic[largest]["key"],dic[i]["key"]
        maxHeapify(dic,largest)
        
def buildMaxHeap(dic):
    for i in range(H//2,0,-1):
        maxHeapify(dic,i)


H=int(input())
A=list(map(int,input().split()))

dic={}
for i in range(H):
    dic[i+1]={"key":A[i]}

for i in range(1,H+1):
    if 2*i in dic:
        dic[i]["left"]=2*i
    if 2*i+1 in dic:
        dic[i]["right"]=2*i+1
    if i//2 in dic:
        dic[i]["parent"]=i//2

buildMaxHeap(dic)

for i in range(H):
    if i==H-1:
        print(dic[i+1]["key"])
    else:
        print(dic[i+1]["key"],end=" ")
