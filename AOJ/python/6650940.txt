//Codeforcesで128bit整数を使いたいとき
//→__int128_tを使う&GNU C++17 (64)で提出する

//インクルードなど
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

//イテレーション
#define REP(i,n) for(ll i=0;i<ll(n);i++)
#define REPD(i,n) for(ll i=n-1;i>=0;i--)
#define FOR(i,a,b) for(ll i=a;i<=ll(b);i++)
#define FORD(i,a,b) for(ll i=a;i>=ll(b);i--)
#define FORA(i,I) for(const auto& i:I)
//x:コンテナ
#define ALL(x) x.begin(),x.end() 
#define SIZE(x) ll(x.size()) 
//定数
#define INF32 2147483647 //2.147483647×10^{9}:32bit整数のinf
#define INF64 9223372036854775807 //9.223372036854775807×10^{18}:64bit整数のinf
#define MOD 1000000007 //問題による
//略記
#define F first
#define S second
//出力(空白区切りで昇順に)
#define coutALL(x) for(auto i=x.begin();i!=--x.end();i++)cout<<*i<<" ";cout<<*--x.end()<<endl;

//aをbで割る時の繰上げ,繰り下げ
ll myceil(ll a,ll b){return (a+(b-1))/b;}
ll myfloor(ll a,ll b){return a/b;}

int w,h;
std::vector<int> cnts;
std::vector<std::vector<int> > c(50,std::vector<int> (50));

void dfs(int i,int j) {
    if(c[i][j]==0){return;}
    // cout<<"startDFS"<<i<<" "<<j<<endl;
    c[i][j]=0;
    // 横移動
    if(j>0){ dfs(i,j-1); }
    if(j<w-1){ dfs(i,j+1); }
    // 縦移動
    if(i>0){ dfs(i-1,j); }
    if(i<h-1){ dfs(i+1,j); }
    // 斜め移動
    if(j>0 && i>0){dfs(i-1,j-1);}
    if(j>0 && i<h-1){dfs(i+1,j-1);}
    if(j<w-1 && i>0){dfs(i-1,j+1);}
    if(j<w-1 && i<h-1){dfs(i+1,j+1);}
}

signed main(){
    while(true) {
        cin>>w>>h;
        if(w==0&&h==0){break;}
        int cnt=0;
        for (int i = 0; i < 50; ++i)
        {
            for (int j = 0; j < 50; ++j)
            {
                c[i][j]=0;
            }
        }
        for (int i = 0; i < h; ++i)
        {
            for (int j = 0; j < w; ++j)
            {
                cin>>c[i][j];
            }
        }

        for (int i = 0; i < h; ++i)
        {
            for (int j = 0; j < w; ++j)
            {
                if(c[i][j]>0){cnt++;dfs(i,j);}
            }
        }
        cnts.push_back(cnt);
    }
    for (int i = 0; i < cnts.size(); ++i)
    {
        cout<<cnts[i]<<endl;
    }
}
