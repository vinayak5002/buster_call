from collections import defaultdict, deque, Counter
from itertools import permutations, product
from heapq import heapify, heappop, heappush
import math
import bisect
import sys
sys.setrecursionlimit(700000)
input = sys.stdin.readline
inf = float('inf')
mod1 = 10**9+7
mod2 = 998244353

#################################################

class LowLink():

    def __init__(self, adj):
        self.n = len(adj)
        self.adj = adj
        self.ord = [inf]*self.n
        self.low = [inf]*self.n
        self.son = [[] for _ in range(self.n)]
        o = 0
        l = inf
        for s in range(N):
            if self.ord[s] != inf: continue
            stack = [(None, s)]
            while stack:
                pre, now = stack.pop()
                if now >= 0:
                    l = inf
                    if self.ord[now] != inf:
                        l = self.ord[now]
                        continue
                    if pre is not None:
                        self.son[pre].append(now)
                    self.ord[now] = o
                    self.low[now] = o
                    o += 1
                    for next in self.adj[now]:
                        if next == pre: continue
                        stack.append((None, ~now))
                        stack.append((now, next))
                else:
                    now = ~now
                    l = min(self.low[now], l)
                    self.low[now] = l

    def articlation_points(self):
        ret = []
        for i in range(self.n):
            if self.ord[i] == 0:
                if len(self.son[i]) >= 2:
                    ret.append(i)
            else:
                for j in self.son[i]:
                    if self.ord[i] <= self.low[j]:
                        ret.append(i)
        return ret

    def bridges(self):
        ret = []
        for i in range(self.n):
            for j in self.son[i]:
                if self.ord[i] < self.low[j]:
                    ret.append((i, j) if i < j else (j, i))
        return ret

N, M = map(int, input().rstrip('\n').split())
adj = [[] for _ in range(N)]
for _ in range(M):
    u, v = map(int, input().rstrip('\n').split())
    adj[u].append(v)
    adj[v].append(u)

ll = LowLink(adj)
ap = ll.articlation_points()
if ap:
    print(*ll.articlation_points(), sep="\n")
