import java.util.Scanner

object Main extends App {
  val sc = new Scanner(System.in)
  val N = sc.nextInt()
  val as = (for (_ <- 0 until N) yield sc.nextInt()).toArray

  def sort(array:Array[Int]):Int = {
    val Sentinel = Int.MaxValue
    val l = array.length
    val m = (l >> 1) +2
    val leftArray = Array.ofDim[Int](m)
    val rightArray = Array.ofDim[Int](m)
    var inversion = 0L

    def merge(left:Int, middle:Int, right:Int):Unit = {
      val ln = middle - left
      val rn = right - middle
      Array.copy(array, left, leftArray, 0, ln)
      Array.copy(array, middle, rightArray, 0, rn)
      leftArray(ln) = Sentinel
      rightArray(rn) = Sentinel
      var i = 0
      var j = 0
      for (k <- 0 until right - left) {
        if (leftArray(i) <= rightArray(j)) {
          array(k+left) = leftArray(i)
          i = i + 1
        } else {
          inversion = inversion + ln -i
          array(k+left) = rightArray(j)
          j = j + 1
        }
      }
    }
    def mergeSort(left:Int, right:Int):Unit = {
      if (left+1 < right) {
        val middle = (left+right) >> 1
        mergeSort(left, middle)
        mergeSort(middle, right)
        merge(left, middle, right)
      }
    }
    mergeSort(0, l)
    inversion
  }

  println(s"${sort(as)}")
}
