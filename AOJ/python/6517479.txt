require('readline')
  .createInterface({ input: process.stdin })
  .on('line', (line) => main(line, process.stdout))
// .on('close', () => main(stdin, process.stdout))

/**
 * 
 * @param {string} str 
 * @returns {string} padded string
 */
function padStart32(str) {
  return (str + '0'.repeat(32)).slice(-32)
}

/**
 * 
 * @param {string} line 
 * @param {NodeJS.WriteStream} so 
 */
function main(line, so) {

  const [a, b] = line.split(' ').map(s => {
    const buf = Buffer.alloc(4)
    buf.writeUint32LE(Number(s))
    return buf
  });

  const band = Buffer.from(a.map((_, i) => a[i] & b[i]))
  const bor = Buffer.from(a.map((_, i) => a[i] | b[i]))
  const bxor = Buffer.from(a.map((_, i) => a[i] ^ b[i]))

  so.write(padStart32(band.readUint32LE().toString(2)) + '\n');
  so.write(padStart32(bor.readUint32LE().toString(2)) + '\n');
  so.write(padStart32(bxor.readUint32LE().toString(2)) + '\n');
}

