from collections import deque

#隣接リスト形式で入力を行う関数
def input_Adjacency_list():
    N, E = map(int, input().split()) #N:The number of nodes #E:The number of edges
    G = [[] for i in range(N)]                     # G: Adjacency list 
    for i in range(E):                             # Read edges ...
        s, t = map(int, input().split()) # There is an edge between (x1, y1) and (x2, y2)
        G[s].append(t), G[t].append(s)             # Add an undirected edge
    return N, G

def input_question():
    Q = int(input()) #Q: The number of questions
    S = list() 
    T = list()
    for i in range(Q):
        s, t = map(int, input().split())
        S.append(s), T.append(t)
    return Q, S, T

def search(s, ngroup_list, ngroup_num, N, G):
    openList = deque([s])                      # An open list by a dequeue
    closeList = [False]*N                      # A close list by an array (flag table)
    closeList[s] = True
    while openList:
        u = openList.popleft()                 # use the deque as a que
        ngroup_list[u] = ngroup_num
        #print(u) 
        for v in G[u]:
            if closeList[v] == False:
                closeList[v] = True
                openList.append(v)
    return ngroup_list

def check_q(s, t):
    if s == t:
        print("yes")
    else:
        print("no")

#main
n, G = input_Adjacency_list()
q, S, T = input_question()

ngroup_list =  [-1]*n # finished time by DFS 
ngroup_num = 0

for s in range(n):
    if(ngroup_list[s] == -1):
        ngroup_num += 1
        ngroup_list = search(s, ngroup_list, ngroup_num, n, G)

#debugs
#print("debug G", G)
#print("debug S", S)
#print("debug T", T)
#print("debug ngroup", ngroup_list)

for c in range(q):
    check_q(ngroup_list[S[c]], ngroup_list[T[c]])
