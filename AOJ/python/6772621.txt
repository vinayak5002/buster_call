def answer(input_file_name, output_file_name):
    input_file = open(input_file_name)
    output_file = open(output_file_name, 'w')
    while True:
        w, h = map(int, input_file.readline().split())
        if w == 0 and h == 0:
            break
        c = []
        for i in range(h):
            c.append(list(map(int, input_file.readline().split())))
        G = nx.Graph()
        for i in range(h):
            for j in range(w):
                if c[i][j] == 1:
                    G.add_node((i, j))
                if j < w - 1 and c[i][j] == 1 and c[i][j + 1] == 1:
                    G.add_edge((i, j), (i, j + 1))
                if i < h - 1 and c[i][j] == 1 and c[i + 1][j] == 1:
                    G.add_edge((i, j), (i + 1, j))
                if i < h - 1 and j > 0 and c[i][j] == 1 and c[i + 1][j - 1] == 1:
                    G.add_edge((i, j), (i + 1, j - 1))
                if i < h - 1 and j < w - 1 and c[i][j] == 1 and c[i + 1][j + 1] == 1:
                    G.add_edge((i, j), (i + 1, j + 1))
        output_file.write(f'{nx.number_connected_components(G)}\n')
    input_file.close()
    output_file.close()
    return
