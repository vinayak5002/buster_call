import java.io.*;
import java.util.*;
import java.math.BigDecimal;
import java.lang.Object;
import java.util.function.*;

public class Main {
  public static void main(String[] args){
    
    int n,m,w,p,q,h,s=0,t,ans=0,mx,mn,sum,cnt,now;
    int[] a=new int[100000],b=new int[8];
    int[][] cost = new int[200][200];
    int[] dx={0,1,0,-1},dy={1,0,-1,0};
    boolean flag;
    Scanner scanner =new Scanner(System.in);
      
    while(true){
      String[] str=new String[100];
      HashMap<String,Integer> hs= new HashMap<String,Integer>();
      ArrayList<Integer>vec=new ArrayList<Integer>();
      m=Integer.parseInt(scanner.next());
      n=Integer.parseInt(scanner.next());
      if(m==0&&n==0)break;
      for(int i=0;i<n;i++){
        str[i]=scanner.next();
        vec.add(i);
      }
      ans=dfs(str,vec,0,hs,m,n);
      System.out.println(ans);
      hs.clear();
      vec.clear();
    }
    
  }
    public static int dfs(String[] str,ArrayList<Integer> id,int mask, HashMap<String,Integer> hs, int m,int n){
      int ret=100;
      if(id.size()==1)return 0;
      String s="";
      int id_num=0;
      for(int i=0;i<n;i++){
        if(id_num<id.size()&&i==id.get(id_num)){
          s=s+"1";
          id_num++;
        }
        else s=s+"0";
      }
      if(hs.containsKey(s)){
        return hs.get(s);
      }
      for(int i=0;i<m;i++){
        if((mask&(1<<m))==0){
          ArrayList<Integer> L=new ArrayList<Integer>(),R=new ArrayList<Integer>();
          for(int j=0;j<id.size();j++){
            if(str[id.get(j)].charAt(i)=='0')L.add(id.get(j));
            else R.add(id.get(j));
          }
          if(L.size()==id.size()||L.size()==0)continue;
          ret=Math.min(ret,Math.max(dfs(str,L,mask+(1<<i),hs,m,n), dfs(str,R,mask+(1<<i),hs,m,n)));
          L.clear();R.clear();
        }
      }
      if(ret==100)return 100;
      ret++;
      hs.put(s, ret);
      return ret;
    }
  public interface Compare<T>{
	  public boolean func(T x,T y);
  }
  static String swap(String str, int i, int j){
      char ch[] = str.toCharArray();
      char tempo = ch[i];
      ch[i] = ch[j];
      ch[j] = tempo;
      return new String(ch);
  }
static class Pair<T,E>{
    T first;
    E second;
    public Pair(T a,E b){
      first=a;
      second=b;
    }
    public Pair(Pair<T,E>x){
      first=x.first;
      second=x.second;
    }
    public Pair(){}
    void print(){
      System.out.println("first:"+first+" second:"+second);
    }
  }
  public static <T> ArrayList<T> sort(ArrayList<T> x, Compare<T> comp,int l,int r){
    //[l,r)
    ArrayList<T>ret=new ArrayList<T>();
    if(l-r==2){
      if(comp.func(x.get(l),x.get(l+1))==false){
        ret.add(x.get(l+1));
        ret.add(x.get(l));
        return ret;
      }
      ret.add(x.get(l));
      ret.add(x.get(l+1));
      return ret;
    }
    if(r-l==1){
      ret.add(x.get(l));
      return ret;
    }
    ArrayList<T> A=sort(x,comp,l,(l+r)/2);
    ArrayList<T> B=sort(x,comp,(l+r)/2,r);
    int a=0,b=0;
    while(a<A.size()&&b<B.size()){
      if(comp.func(A.get(a),B.get(b))==true){
        ret.add(A.get(a));
        a++;
      }
      else{
        ret.add(B.get(b));
        b++;
      }
    }
    while(a<A.size()){
        ret.add(A.get(a));
        a++;
    }
     while(b<B.size()){
        ret.add(B.get(b));
        b++;
    }
    return ret;
  }
static class Query{
    int P,T,id;
    double ans=0.0;
    public Query(){}
    public Query(int x,int y,int z){
      P=x;T=y;id=z;
    }
    public Query(int x,int y,int z,double w){
      P=x;T=y;id=z;ans=w;
    }
 }
 static class Node{
  int H,W;
  double Wt=0.0;
  public Node(){}
  public Node(int x,int y){
    H=x;W=y;
  }
 }
}

