use std::{io::Read, cmp::Ordering};
fn main() {
    let mut input = String::new();
    std::io::stdin().read_to_string(&mut input).unwrap();

    let mut lines = input.lines();
    let s = lines.nth(1).unwrap().split_ascii_whitespace().map(|e| {
        e.parse::<i32>().unwrap()
    }).collect::<Vec<_>>();

    let t = lines.nth(1).unwrap().split_ascii_whitespace().map(|e| {
        e.parse::<i32>().unwrap()
    }).collect::<Vec<_>>();

    let cnt = t.iter().fold(0i32, |c,e| {
        match binary_search(*e, &s[..]) {
            true => c + 1,
            false => c,
        }
    });
    println!("{}", cnt);
}


fn binary_search <T: PartialOrd> (q: T, v: &[T]) -> bool {
    if v.len() == 0 {return false}
    let i = v.len() / 2;
    let res = match q.partial_cmp(&v[i]).unwrap() {
        Ordering::Equal => true,
        Ordering::Greater => binary_search(q, &v[(i+1)..v.len()]),
        Ordering::Less => binary_search(q, &v[0..i]),
    };
    res
}
