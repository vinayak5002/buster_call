   #include <bits/stdc++.h>
    using namespace std;
    #include <math.h>
    #include <iomanip>
    #include <cstdint>
    #include <string>
    #include <sstream>
    
    template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
    template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
    #define rep(i,n) for (int i = 0; i < (n); ++i)

    typedef long long ll;
    typedef unsigned long long ull;
    using P=pair<ll,ll>;
    using tp=tuple<ll,ll,ll>;
    const int INF=1001001001;
    const ll INFL=1e18;
    const int mod=1e9+7;
    
    const int MAX_N=2000005;
    int H,A[MAX_N];

    int left(int i){
        return i*2<H?i*2:INF;
    }
    int right(int i){
        return i*2+1<H?i*2+1:INF;
    }
    void maxHeapify(int i){
        int l=left(i),r=right(i),largest=i;
        if(l<H&&A[l]>A[i]){largest=l;}
        if(r<H&&A[r]>A[largest]){largest=r;}
        
        if(largest!=i){
            swap(A[i],A[largest]);
            maxHeapify(largest);
        }
    }
    
    int extract(){
        int maxv;
        if(H<1){return -INF;}
        maxv=A[1];
        A[1]=A[H--];
        maxHeapify(1);
        return maxv;
    }

    void increaseKey(int i,int key){
        if(key<A[i]){return;}
        A[i]=key;
        while(i>1&&A[i/2]<A[i]){
            swap(A[i],A[i/2]);
            i=i/2;
        }
    }

    void insert(int key){
        H++;
        A[H]=-INF;
        increaseKey(H,key);
    }
    void solve(){
        int key;
        string s;
        while(1){
            cin>>s;
            if(s=="end"){break;}
            if(s=="insert"){
                cin>>key;
                insert(key);
            }
            else{
                cout<<extract()<<endl;
            }
        }
    }

    int main(){
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
        solve();
        
        return 0;
    }
