import sys
import collections
import copy
import math
import itertools
import numpy as np
import scipy
import scipy.special
import bisect
import functools
import heapq
import statistics
import random
from collections import defaultdict,deque
from fractions import Fraction
from decimal import Decimal

# input = sys.stdin.readline
sys.setrecursionlimit(10**9)

DX = [1,0,-1,0]
DY = [0,1,0,-1]
# dx2 = [1,1,-1,-1]
# dy2 = [-1,1,1,-1]

def UG(n,m):
    G=[[] for i in range(n)]
    for i in range(m):
        a,b=rdi()
        a,b=a-1,b-1
        G[a].append(b)
        G[b].append(a)
    return G
def DG(n,m):
    G=[[] for i in range(n)]
    for i in range(m):
        a,b=rdi()
        a,b=a-1,b-1
        G[a].append(b)
    return G

ep = lambda s:exit(print(s))
rdi = lambda:map(int,input().split())
lrdi = lambda:list(rdi())
MOD,MOD7 = 998244353,7+10**9
INF = float("inf")
cnt,ans,Ans = 0,0,[]


class UnionFind:

    def __init__(self,Size):
        self.par = [i for i in range(Size)]
        # print(Size)

    def b(self):
        print(self.par)
        return self.par

    def root(self,x):
        if x == self.par[x]:
            return x
        else:
            self.par[x] = self.root(self.par[x])
            return self.par[x]

    def unite(self,x,y):
        x,y = self.root(x),self.root(y)
        if x != y: self.par[x] = y

    def same(self,x,y):
        if self.root(x) == self.root(y): return True
        else: False

n,q = rdi()
U = UnionFind(n)
for i in range(q):
    c,a,b = rdi()
    if c == 0: U.unite(a,b)
    else: print(1) if U.same(a,b) else print(0)

