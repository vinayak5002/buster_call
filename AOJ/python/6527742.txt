import java.util.*;

public class Main {
    static Scanner sc = new Scanner(System.in);
    public static void main(String[] args) {
        int n = getInt();
        RootedTree rt = new RootedTree(n);
        for (int i = 0; i < n; i++) {
            int id = getInt();
            int degree = getInt();
            int[] childIds = new int[degree];
            Arrays.setAll(childIds, dm -> getInt());
            rt.add(id, degree, childIds);
            rt.addChilds(childIds, id);
        }
        rt.setting();
        System.out.println(rt);
    }
    static int getInt() {
        return Integer.parseInt(sc.next());
    }
}

class RootedTree {
    int size;
    Node[] nodes;
    Node root;
    RootedTree(int size) {
        this.size = size;
        nodes = new Node[size];
        Arrays.setAll(nodes, dm -> new Node());
    }
    void add(int id, int degree, int[] childIds) {
        Node node = nodes[id];
        node.id = id;
        node.degree = degree;
        node.childIds = childIds;
    }
    void add(int id, int parentId) {
        Node node = nodes[id];
        node.id = id;
        node.parentId = parentId;
    }
    void addChilds(int[] childIds, int parentId) {
        Arrays.stream(childIds).forEach(childId -> add(childId, parentId));
    }
    void setting() {
        for (Node node : nodes) {
            if (node.parentId == -1) {
                root = node;
                root.depth = 0;
                root.type = "root";
                break;
            }
        }
        if (root.childIds.length == 0) {
            return;
        }
        setChildDepth(root);
    }
    void setChildDepth(Node parent) {
        if (parent.childIds.length == 0) {
            parent.type = "leaf";
            return;
        }
        for (int childId : parent.childIds) {
            Node child = nodes[childId];
            child.depth = parent.depth + 1;
            setChildDepth(child);
        }
    }
    @Override
    public String toString() {
        StringBuilder res = new StringBuilder();
        Arrays.stream(nodes).forEach(node -> res.append(node.toString()).append('\n'));
        res.deleteCharAt(res.length()-1);
        return res.toString();
    }
}

class Node {
    int id;
    int degree;
    int depth;
    String type = "internal node";
    int parentId = -1;
    int[] childIds;

    @Override
    public String toString() {
        return String.format("node %d: parent = %d, depth = %d, %s, %s", id, parentId, depth, type, Arrays.toString(childIds));
    }
}
