INF = 1e100


V, E, F = map(int, input().split())

G = [[] for _ in range(V)]


def add_edge(u, v, capacity, cost):
    G[u].append([v, capacity, cost, len(G[v])])
    G[v].append([u, 0, -cost, len(G[u]) - 1])


def bellman_ford(s):
    dist = [INF] * V
    dist[s] = 0

    prev_v = [0] * V
    prev_e = [0] * V
    while True:
        update = False
        for v in range(V):
            if dist[v] == INF:
                continue

            for i in range(len(G[v])):
                next, cost = G[v][i]

                if dist[next] > dist[v] + cost:
                    dist[next] = dist[v] + cost
                    prev_v[next] = v
                    prev_e[next] = i
                    update = True
        if not update:
            break

    return dist, prev_v, prev_e


def calc_min_cost_flow(s, t, flow):
    result = 0
    while flow > 0:
        dist, prev_v, prev_e = bellman_ford(s)

        if dist[t] == INF:
            return -1

        f = flow
        v = t
        while v != s:
            f = min(f, G[prev_v[v]][prev_e[v]][1])
            v = prev_v[v]
        flow -= f

        result += f * dist[t]

        v = t
        while v != s:
            G[prev_v[v]][prev_e[v]][1] -= f
            rev = G[prev_v[v]][prev_e[v]][3]
            G[v][rev][1] += f
            v = prev_v[v]
    return result


for _ in range(E):
    u, v, capacity, cost = map(int, input().split())
    add_edge(u, v, capacity, cost)

ans = calc_min_cost_flow(0, V - 1, F)
print(ans)

