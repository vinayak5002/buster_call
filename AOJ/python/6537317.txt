const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
	let elemNum = Number(si[0])
	let res = Subset.enumeration(elemNum)
	let intValue = Subset.generateIntegerValue(res)
	so.write(Subset.output(res, intValue))
}

class Subset{
	// 全ての部分集合を列挙
	static enumeration (num) {
		let ans = new Array()
		ans[0] = []
		for (let i = 0; i < num; i++) {
			let length = ans.length
			for (let j = 0; j < length; j++) {
				let tmp = ans[j].slice()
				if (tmp) {
					// 中身が入っている時、末尾に追加
					tmp.push(i)
				} else {
					// 中身が空の時、上書き
					tmp = [i]
				}
				ans.push(tmp)
			}
		}
		return ans
	}
	
	// 整数値を生成
	static generateIntegerValue (ans) {
		let intVal = new Array(ans.length).fill(0)
		for (let i = 0; i < ans.length; i++) {
			for (let val of ans[i]) {
				if (val === null) {
					continue;
				}
				intVal[i] += Math.pow(2, val)
			}
		}
		return intVal
	}
	
	// 出力する文字列を生成
	static output (res, intVal) {
		let out =""
		for (let i = 0; i < res.length; i++) {
			if (res[i] === null) {
				out += (intVal[i] + ":\n")
			} else {
				out += (intVal[i] + ": " + res[i].join(" ") + "\n")
			}
		}
		return out
	}
}
