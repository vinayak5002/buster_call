import sys
import math

# READ_FROM_FILE = True
READ_FROM_FILE = False


def count_visited_nodes(state):
    counter = 0
    while state > 0:
        counter += state & 1
        state >>= 1
    return counter


def dfs(num_nodes, dist_matrix, c_state, n, dp):
    if count_visited_nodes(c_state) == num_nodes and n == 0:
        if c_state not in dp:
            dp[c_state] = {n: 0}
        elif n not in dp[c_state]:
            dp[c_state][n] = 0
        return 0

    if c_state in dp:
        if n in dp[c_state]:
            return dp[c_state][n]

    result = math.inf
    for nn in range(num_nodes):
        if nn == n:
            continue
        if c_state & (1 << nn) == 0:
            n_state = c_state | (1 << nn)
            n_cost = dfs(num_nodes, dist_matrix, n_state, nn, dp) + dist_matrix[n][nn]
            result = min(result, n_cost)

    if c_state not in dp:
        dp[c_state] = {n: result}
    elif n not in dp[c_state]:
        dp[c_state][n] = result

    return result


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    num_nodes, num_edges = list(map(int, f.readline().split()))
    dist_matrix = [[math.inf] * num_nodes for _ in range(num_nodes)]
    for _ in range(num_edges):
        s, t, d = list(map(int, f.readline().split()))
        dist_matrix[s][t] = d

    dp = {}
    result = dfs(num_nodes, dist_matrix, 0, 0, dp)

    if result != math.inf:
        print(result)
    else:
        print(-1)

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

