// #define _GLIBCXX_DEBUG
#include <bits/stdc++.h>
//#include <atcoder/all>
using namespace std;
//using namespace atcoder;

#define int long long
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define rep(i, n) for (int i = 0; i < n; ++i)
#define REP(i, n) for (int i = 0; i < n; ++i)
#define range(i,a,b) ((a)<=(i) && (i)<(b))
#define debug(x) cout << #x << " = " << (x) << endl;
#define fs first
#define sc second
#define pb push_back
#define eb emplace_back
#define SP << " " <<

typedef long long ll;
typedef pair<int, int> P;
typedef tuple<int, int, int> T;
typedef vector<int> vec;
typedef vector<P> pvec;
typedef vector<vector<int>> vvec;
typedef vector<vector<P>> pvvec;
typedef priority_queue<int> PQI;
typedef priority_queue<P> PQP;
typedef priority_queue<int,vector<int>,greater<int>> PQIG;
typedef priority_queue<P,vector<P>,greater<P>> PQPG;

const vector<int> DX = {0, -1, 0, 1, 1, 1, -1, -1};
const vector<int> DY = {1, 0, -1, 0, 1, -1, 1, -1};
constexpr int MOD = (1000000007);
// const int MOD = (998244353);
// const int INF = (1 << 30); // 1073741824
const ll INF = (1LL << 60); // 1152921504606846976
const double PI = (3.141592653589794);
const double EPS = (0.0000000001); // 10^(-10)

template<class T> inline bool chmin(T& a, T b) {if (a > b) {a = b; return 1;} return 0;}
template<class T> inline bool chmax(T& a, T b) {if (a < b) {a = b; return 1;} return 0;}
template<class T> inline T ceil(T a, T b) {return T((a + b - 1) / b);}
template<class T> inline T round(T a, T b) {return T(a / b);}
template< typename T1, typename T2 > istream &operator>>(istream &is, pair< T1, T2 > &p) { is >> p.first >> p.second; return is; }
template <class T> inline void out(T &a) { bool flag=true; for(auto&x:a){if(flag) {flag=false;} else{ cout << ' '; } cout<<x; } cout << endl; }



//----------------------------------------------------------------
int nmax=200000; // 2*(10^5)
vvec G(nmax);

template<class T> std::vector<std::string> split(const std::string& s, const T& separator, bool ignore_empty = 0, bool split_empty = 0) {
  struct {
    auto len(const std::string&             s) { return s.length(); }
    auto len(const std::string::value_type* p) { return p ? std::char_traits<std::string::value_type>::length(p) : 0; }
    auto len(const std::string::value_type  c) { return c == std::string::value_type() ? 0 : 1; /*return 1;*/ }
  } util;
  
  if (s.empty()) { /// empty string ///
    if (!split_empty || util.len(separator)) return {""};
    return {};
  }
  
  auto v = std::vector<std::string>();
  auto n = static_cast<std::string::size_type>(util.len(separator));
  if (n == 0) {    /// empty separator ///
    if (!split_empty) return {s};
    for (auto&& c : s) v.emplace_back(1, c);
    return v;
  }
  
  auto p = std::string::size_type(0);
  while (1) {      /// split with separator ///
    auto pos = s.find(separator, p);
    if (pos == std::string::npos) {
      if (ignore_empty && p - n + 1 == s.size()) break;
      v.emplace_back(s.begin() + p, s.end());
      break;
    }
    if (!ignore_empty || p != pos)
      v.emplace_back(s.begin() + p, s.begin() + pos);
    p = pos + n;
  }
  return v;
}

int gcd(int x, int y) { return y ? gcd(y, x%y) : x; }
int lcm(int x, int y) { return x/gcd(x, y)*y; }
int mod_pow(int x, int y) { int res = 1; while (y > 0) { if (y & 1) { res = res * x % MOD; } x = x * x % MOD; y >>= 1; } return res; }
int cmb(int n,int k){ if(n<k){ return 0;} int res=1,nn=n,kk=1;k=min(k,n-k); for(int i=0;i<k;i++){ res*=nn-i;res/=kk+i;} return res; }
ll comb(ll n,ll k){ ll res=1; for(int i=0;i<k;i++){ (res*=(n-i)%MOD)%=MOD; } for(int i=1;i<=k;i++){ (res*=mod_pow(i,MOD-2))%=MOD; } return res; }
int to_int(string s) { int n = s.size(); int ans = 0; for (int i = 0; i < n; i++) { ans = ((ans * 10) + (s[i] - '0')) % MOD; } return ans; }
int DigitSum(int x){ int ret=0; while(x){ ret++;x/=10;} return ret; }
bool is_prime(int n) { for(int i = 2; i*i <= n; i++) { if (n % i == 0) return false; } return n != 1; }
int extgcd(int a, int b, int& x, int& y) { // ax+by = gcd(a,b) >> gcd(a,b)
  int d = a;
  if(d != 0) { d = extgcd(b, a%b, y, x); y -= (a/b)*x; }
  else { x = 1, y = 0; }
  return 0;
}


void solve4ts()
{
  
  
  string s;
  cin>>s;
  vec a;
  string memo="";
  vvec group(100);
  rep(i,s.size()-1){
    if(s[i]=='[' || s[i]==']'){
      if(memo!="") a.pb(to_int(memo)/2+1);
      memo="";
    }
    else{
      memo+=s[i];
    }

    int count=0;
    for(int j=i;j<s.size();j++){
      if(s[j]==']') count++;
      else break;
    }
    for(int j=1;j<=count;j++) if(group[j].size()==0 || group[j][group[j].size()-1]!=a.size()) group[j].pb(a.size());
//    if(count>0) group[count].pb(a.size());
  }

  // out(a);
  int ans=0;
  rep(i,group.size()){
      if(group[i+1].size()==0) break;
      // out(group[i+1]);
      vec b(a.size());
      int index=0;
      for(auto x:group[i+1]){
        PQIG q;
        int cnt=0;
        for(int j=index;j<x;j++){
          if(a[j]!=0){
            q.push(a[j]);
            cnt++;
            a[j]=0;
          }
        }
        int tmp=0;
        rep(j,cnt/2+1){
          tmp+=q.top();
          q.pop();
        }
        a[index]=tmp;
        index=x;
      }
      // out(a);

    // int wake=group[i+1]/group[i];
    // vec b;
    // for(int j=0;j<a.size();j+=wake){
    //   PQIG q;
    //   int tmp=0;
    //   rep(k,wake){
        
    //     q.push(a[j+k]);
    //   }
    //   rep(k,wake/2+1){
    //     cout<<q.top()<<" ";
    //     tmp+=q.top(); q.pop();
    //   }
    //   cout<<endl;
    //   b.pb(tmp);
    // }
    // a = b;
    // out(a);
  }
  cout<<a[0]<<endl;
}
//-----------------------------------------------------------------

signed main(){ ios::sync_with_stdio(false); cin.tie(0); cout << fixed << setprecision(15);
  int repeat = 1;
  cin >> repeat;
  while(repeat--) solve4ts();
}

/*

g++ -std=c++1z code.cpp

./a.out

python3 expander.py code.cpp

*/
