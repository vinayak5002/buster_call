/* ***************************
   データ構造
   AOJ 1130 解答例
   スタックを利用した深さ優先探索
   *************************** */

#include<stdio.h>
#include<stdlib.h>

#define MX 20

// セル表現用 構造体
typedef struct {
  int row;               // 行番号
  int col;               // 列番号
} Coord;

// スタック用 構造体
typedef struct _stack {
  struct _stack *next;
  Coord point;
} *stack, stackelem;

// プロトタイプ宣言
int dfs (char M[][MX+2], int W, int H, Coord start);
int solve (int W, int H);
void display_map (char M[][MX+2], int W, int H);

// スタック用
stack  new_stack (void);
int is_empty (stack);
int push (stack, Coord);
Coord top (stack);
Coord pop (stack);

// main 関数
int main () {
  while (1) {
    int W, H;

    scanf("%d%d", &W, &H);
    if (W==0 && H==0) break;
    printf("%d\n", solve(W,H));
  }
  return 0;
}

// 深さ優先探索
int dfs (char M[][22], int W, int H, Coord start) {
  stack S = new_stack ();                 // 訪問セルを保持するスタック
  int c = 1;                              // 訪問したセル数
  push(S, start);                         // スタート地点を push
  while (!is_empty(S)) {                  // スタックが空でない間
    Coord cur = pop(S);                       // pop されたセル
    int d;                                    // 方向
    int D1[]={1,0,-1,0}; int D2[]={0,-1,0,1}; // 方向転換制御用
    for (d=0; d<4; d++) {
      Coord nc = cur;                             // Next Cell
      nc.row+=D1[d]; nc.col+=D2[d];               // 次の探索先候補
      if (M[nc.row][nc.col]=='.') {               // nc が未探索なら
	M[nc.row][nc.col]='*';                        // nc を探索済に
	push(S, nc);                                  // nc を push
	c++;                                          // c をインクリメント
      }
    }
  }
  return c;
}

int solve (int W, int H) {
  char M[H+2][22];
  Coord start;
  int i, j;
  for (i=0; i<=W+1; i++) { M[0][i] = '#'; M[H+1][i] = '#'; }
  for (i=1; i<=H; i++) { M[i][0] = '#'; M[i][W+1] = '#'; }
  for (i=1; i<=H; i++) {
    for (j=1; j<=W; j++) {
      scanf(" %c", &M[i][j]);
      if (M[i][j]=='@') {
	start.row = i;
	start.col = j;
      }
    }
  }
  return dfs(M, W, H, start);
}

/* 新しいスタックを確保（＋初期化） */
stack new_stack (void) {
  stack s;
  s = (stack) malloc (sizeof (stackelem));
  if (s == NULL) return NULL;
  s->next = NULL;
  return s;
}
    
/* スタックが空かどうか検査 */
int is_empty (stack s) {
  return (s && s->next == NULL);
}

/* 新しい要素をプッシュ */
int push (stack s, Coord v) {
  stack p;
  if (s == NULL) return 0;
  p = (stack) malloc (sizeof (stackelem));
  if (p == NULL) return 0;
  p->point = v;
  p->next = s->next;
  s->next =  p;
  return 1;
}

/* 先頭の要素を返す */
Coord top (stack s) {
  if (s && s->next) 
    return s->next->point;
  exit (1);
}

/* ポップ */
Coord pop (stack s) {
  stack p;
  Coord v = top (s);
  p = s->next;
  s->next = p->next;
  free (p);
  return v;
}
