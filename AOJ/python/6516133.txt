from math import inf
from itertools import count, islice

rxs = lambda: map(int, input().split())
N, Q = rxs()
Qs = [tuple(rxs()) for _ in range(Q)]
m = 1; while m < N: m*=2
u_tree = [0] * (2*m-1)
f_tree = [0] * (2*m-1)

def update(s, t, x, node=0, lft=0, rht=m):
    if t <= lft or  rht <= s: return f_tree[node]
    if s <= lft and rht <= t:
        u_tree[node] += x
        f_tree[node] += x*(rht-lft)
        return f_tree[node]
    mid = (lft+rht)//2
    if u_tree[node] != 0:
        z, u_tree[node] = u_tree[node], 0
        update(lft, mid, z, 2*node+1, lft, mid)
        update(mid, rht, z, 2*node+2, mid, rht)
    a = update(s, t, x, 2*node+1, lft, mid)
    b = update(s, t, x, 2*node+2, mid, rht)
    f_tree[node] = a+b
    return f_tree[node]

def find(s, t, node=0, lft=0, rht=m):
    if t <= lft or  rht <= s: return 0
    if s <= lft and rht <= t: return f_tree[node]
    mid = (lft+rht)//2
    if u_tree[node] != 0:
        z, u_tree[node] = u_tree[node], 0
        update(lft, mid, z, 2*node+1, lft, mid)
        update(mid, rht, z, 2*node+2, mid, rht)
    return sum([
        find(s, t, node*2+1, lft, mid),
        find(s, t, node*2+2, mid, rht),
    ])

for q in Qs:
    if q[0] == 0:
        # print(f"update({q[1]}, {q[2]+1}, {q[3]})")
        update(q[1]-1, q[2], q[3])
        # print(f"u={u_tree}")
        # print(f"f={f_tree}")
    else:
        # print(f"u={u_tree}")
        # print(f"f={f_tree}")
        print(find(q[1]-1, q[2]))


