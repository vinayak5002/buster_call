import sys
readline = sys.stdin.readline

n,q=map(int,input().split())

LV=(n-1).bit_length()
N0=2**LV
data=[2**31-1]*2*N0
lazy=[None]*2*N0

def gindex(l, r):
    L = (l + N0) >> 1; R = (r + N0) >> 1
    lc = 0 if l & 1 else (L & -L).bit_length()
    rc = 0 if r & 1 else (R & -R).bit_length()
    for i in range(LV):
        if rc <= i:
            yield R
        if L < R and lc <= i:
            yield L
        L >>= 1; R >>= 1

def propagates(*ids):
    for i in reversed(ids):
        v = lazy[i-1]
        if v == None:
            continue
        lazy[2*i - 1] = v
        lazy[2*i] = v
        data[2*i-1] = v
        data[2*i] = v
        lazy[i-1] = None

def update(l,r,x):
    L = N0+l
    R = N0+r
    *ids, = gindex(l,r)
    propagates(*ids)
    while L < R:
        if R & 1:
            R-=1
            data[R-1] = lazy[R-1] = x
        if L&1:
            data[L-1] = lazy[L-1] = x
            L+=1
        L >>= 1
        R >>= 1
    for i in ids:
        data[i-1] = min(data[2*i-1],data[2*i])


def query(l, r):
    propagates(*gindex(l, r))
    L = N0 + l; R = N0 + r

    s = 2**31-1
    while L < R:
        if R & 1:
            R -= 1
            s = min(s, data[R-1])
        if L & 1:
            s = min(s, data[L-1])
            L += 1
        L >>= 1; R >>= 1
    return s

for i in range(q):
    l=list(map(int,input().split()))
    if l[0] == 0:
        s,t,x = l[1:]
        update(s,t+1,x)
    else:
        s,t = l[1:]
        print(query(s,t+1))
