use std::{cmp::Ordering, collections::HashMap, io::Read};

macro_rules! read {
    ($($xs: tt)*) => {
        let mut buf = String::new();
        std::io::stdin().read_to_string(&mut buf).unwrap();
        let mut iter = buf.split_whitespace();
        expand!(iter, $($xs)*);
    };
}

macro_rules! expand {
    ($iter: expr, $(,)* mut $var: ident : $type: tt $(,)* ) => {
        let mut $var = read_value!($iter, $type);
    };
    ($iter: expr, $(,)* mut $var:ident : $type: tt $($xs: tt)*) => {
        let mut $var = read_value!($iter, $type);
        expand!($iter $($xs)*);
    };
    ($iter: expr, $(,)* $var: ident : $type: tt $(,)*) => {
        let $var = read_value!($iter, $type);
    };
    ($iter: expr, $(,)* $var: ident : $type: tt $($xs: tt)*) => {
        let $var = read_value!($iter, $type);
        expand!($iter $($xs)*);
    };
}

macro_rules! read_value {
    ($iter:expr, ($($type: tt),*)) => {
        ($(read_value!($iter, $type)),*)
    };

    ($iter: expr, [$type: tt; $len: expr]) => {
        (0..$len).map(|_| read_value!($iter, $type)).collect::<Vec<_>>()
    };

    ($iter: expr, $type: ty) => {
        $iter.next().unwrap().parse::<$type>().unwrap()
    };
}

#[macro_export]
macro_rules! min {
    ($x: expr) => {
        $x
    };
    ($x: expr, $($xs: expr),+) => {
        std::cmp::min($x, min!($($xs),+))
    };
}

#[macro_export]
macro_rules! max {
    ($x: expr) => {
        $x
    };
    ($x: expr, $($xs: expr),+) => {
        std::cmp::max($x, max!($($xs),+))
    };
}

#[macro_export]
macro_rules! chmin {
    ($a: expr, $b: expr) => {{
        $a > $b && {
            $a = $b;
            true
        }
    }};
    ($a: expr, $($xs: expr),+) => {{
        chmin!($a, min!($($xs),+))
    }};
}

#[macro_export]
macro_rules! chmax {
    ($a: expr, $b: expr) => {{
        $a < $b && {
            $a = $b;
            true
        }
    }};
    ($a: expr, $($xs: expr),+) => {{
        chmax!($a, max!($($xs),+))
    }};
}

#[derive(Clone, PartialEq, Eq)]
pub struct Edge<T> {
    pub src: usize,
    pub dst: usize,
    pub weight: T,
}

impl<T> Ord for Edge<T>
where
    T: Ord,
{
    fn cmp(&self, other: &Self) -> Ordering {
        self.weight.cmp(&other.weight)
    }
}

impl<T> PartialOrd for Edge<T>
where
    T: Ord,
{
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

#[derive(Clone)]
pub struct Graph<T> {
    pub edges: Vec<Vec<Edge<T>>>,
}

impl<T> Graph<T>
where
    T: Clone,
{
    pub fn new(size: usize) -> Self {
        Graph {
            edges: vec![vec![]; size],
        }
    }

    pub fn size(&self) -> usize {
        self.edges.len()
    }

    pub fn add_edge(&mut self, src: usize, dst: usize, weight: T) {
        self.edges[src].push(Edge { src, dst, weight });
    }
}

fn rec(
    set: usize,
    id: usize,
    memo: &mut HashMap<(usize, usize), Option<usize>>,
    g: &Graph<usize>,
) -> Option<usize> {
    if let Some(res) = memo.get(&(set, id)) {
        return *res;
    }

    let res = if (set, id) == (0, 0) {
        Some(0)
    } else if set & (1 << id) == 0 {
        None
    } else {
        let mut res = std::usize::MAX;
        for e in &g.edges[id] {
            if let Some(dist) = rec(set & !(1 << e.src), e.dst, memo, g) {
                chmin!(res, dist + e.weight);
            }
        }

        if res != std::usize::MAX {
            Some(res)
        } else {
            None
        }
    };

    memo.insert((set, id), res);
    res
}

fn main() {
    read! {
        v_size: usize, e_size: usize,
        std: [(usize, usize, usize); e_size],
    }

    let mut g = Graph::new(v_size);
    for &(s, t, d) in &std {
        g.add_edge(s, t, d);
    }

    let mut memo = HashMap::new();
    let ans = rec((1 << v_size) - 1, 0, &mut memo, &g);

    if let Some(d) = ans {
        println!("{}", d);
    } else {
        println!("-1");
    }
}
