import sys
import math

# READ_FROM_FILE = True
READ_FROM_FILE = False


class FordFulkerson:
    def __init__(self, num_vertexes):
        self._num_vertexes = num_vertexes
        self._goal = math.inf
        self._graph = [[] for _ in range(num_vertexes)]
        self._is_used = [False] * num_vertexes
        return

    def _dfs(self, v, f):
        if v == self._goal:
            return f

        self._is_used[v] = True
        for edge in self._graph[v]:
            u, c, b_edge = edge
            if c > 0 and not self._is_used[u]:
                mf = self._dfs(u, min(c, f))
                if mf > 0:
                    edge[1] -= mf
                    b_edge[1] += mf
                    return mf

        return 0

    def add_edge(self, v, u, c):
        f_edge = [u, c, None]
        f_edge[2] = b_edge = [v, 0, f_edge]
        self._graph[v].append(f_edge)
        self._graph[u].append(b_edge)
        return

    def calc_max_flow(self, s, t):
        self._goal = t
        total_flow = 0
        f = math.inf
        while f > 0:
            self._is_used = [False] * self._num_vertexes
            f = self._dfs(s, math.inf)
            total_flow += f

        return total_flow


class BipartiteMatching:
    def __init__(self, x_size, y_size):
        self._x_size, self. _y_size = x_size, y_size
        self._ff = FordFulkerson(self._x_size + self. _y_size + 2)
        for i in range(self._x_size):
            self._ff.add_edge(0, i + 1, 1)
        for i in range(self._y_size):
            self._ff.add_edge(self._x_size + i + 1, self._x_size + self._y_size + 1, 1)
        return

    def add_edge(self, fr, to):
        self._ff.add_edge(fr + 1, to + self._x_size + 1, 1)
        return

    def solve(self):
        return self._ff.calc_max_flow(0, self._x_size + self._y_size + 1)


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    num_x_vertexes, num_y_vertexes, num_edges = map(int, f.readline().split())
    bm = BipartiteMatching(num_x_vertexes, num_y_vertexes)
    for i in range(num_edges):
        x, y = map(int, f.readline().split())
        bm.add_edge(x, y)
    print(bm.solve())

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

