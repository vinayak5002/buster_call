const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
    //console.time("whole")
    const q = si[0];
    const map = new Map();
    let str = "";
    for (let i = 0; i < q; i++) {
        let inp = si[i + 1].split(" ");
        let leftN = Number(inp[0]);
        let middleN = String(inp[1]);
        let rightN = String(inp[2]);
        //console.log("leftN = " + leftN + ", middleN = " + middleN + ", rightN = " + rightN);// forDebug
        switch (leftN) {
            case 0:
                map.set(middleN, rightN);// setメソッドはキーの重複時に値を上書きする.
                break;

            case 1:
                if (map.has(middleN)) {
                    str += map.get(middleN) + "\n"
                } else {
                    str += 0 + "\n";
                }
                break;

            case 2:
                map.delete(middleN);
                break;

            case 3: 
                // キーを配列に格納し, 辞書順に並び替える => sorted
                // 並び替えられた配列をもとに, O(n)でmiddleN以上rightN以下か判定する.
                // キーと値の組を出力する.
                const iter = map.keys();
                let array = [];
                for (let i = 0; i < map.size; i++) {
                    array[i] = iter.next().value;
                    if (array[i] > rightN) {
                        break;
                    } else if (middleN <= array[i] && array[i] <= rightN) {
                        str += array[i] + " " + map.get(array[i]) + "\n";
                    }// array[i] < middleN のときはなにもしない.
                }
                break;
        }
        //console.log(map); // forDebug
    }
    so.write(str);
    //console.timeEnd('whole')
}

