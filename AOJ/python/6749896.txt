import java.util.*;

public class Main {
    public static void main(String[] args) {
        HashMap<Integer, Integer> visitCost = new HashMap<>();
        HashMap<Integer, Integer> returnCost = new HashMap<>();
        HashMap<Integer, ArrayList<int[]>> roadMap = new HashMap<>();
        Scanner sc = new Scanner(System.in);
        int town_num = sc.nextInt();
        int road_num = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < road_num; i++) {
            String str = sc.nextLine();
            String[] input = str.split(",");
            int a = Integer.parseInt(input[0]);
            int b = Integer.parseInt(input[1]);
            int c = Integer.parseInt(input[2]);
            int d = Integer.parseInt(input[3].trim());
            if (roadMap.get(a) == null) {
                ArrayList<int[]> al = new ArrayList<>();
                al.add(new int[]{b, c});
                roadMap.put(a, al);
            } else {
                roadMap.get(a).add(new int[]{b, c});
            }
            if (roadMap.get(b) == null) {
                ArrayList<int[]> al = new ArrayList<>();
                al.add(new int[]{a, d});
                roadMap.put(b, al);
            } else {
                roadMap.get(b).add(new int[]{a, d});
            }
        }
        String str = sc.nextLine();
        String[] input = str.split(",");
        int start = Integer.parseInt(input[0]);
        int goal = Integer.parseInt(input[1]);
        int value = Integer.parseInt(input[2]);
        int payment = Integer.parseInt(input[3]);

        visitCost.put(start, 0);
        returnCost.put(goal, 0);

        UniqueQueue<Integer> uq = new UniqueQueue<>();
        uq.add(start);
        while (uq.size() > 0) {
            int now = uq.poll();
            ArrayList<int[]> next = roadMap.get(now);
            for (int[] r :
                    next) {
                if (visitCost.get(r[0]) == null) {
                    visitCost.put(r[0], visitCost.get(now) + r[1]);
                    uq.add(r[0]);
                    continue;
                }
                if (visitCost.get(now) + r[1] < visitCost.get(r[0])) {
                    visitCost.put(r[0], visitCost.get(now) + r[1]);
                    uq.add(r[0]);
                    continue;
                }
            }
        }
        UniqueQueue<Integer> uq2 = new UniqueQueue<>();
        uq2.add(goal);
        while (uq2.size() > 0) {
            int now = uq2.poll();
            ArrayList<int[]> next = roadMap.get(now);
            for (int[] r :
                    next) {
                if (returnCost.get(r[0]) == null) {
                    returnCost.put(r[0], returnCost.get(now) + r[1]);
                    uq2.add(r[0]);
                    continue;
                }
                if (returnCost.get(now) + r[1] < returnCost.get(r[0])) {
                    returnCost.put(r[0], returnCost.get(now) + r[1]);
                    uq2.add(r[0]);
                    continue;
                }
            }
        }

        System.out.println(value - payment - visitCost.get(goal) - returnCost.get(start));
    }
}

class UniqueQueue<Object> extends ArrayDeque<Object> {
    @Override
    public boolean add(Object o) {
        if (super.contains(o)) return false;
        return super.add(o);
    }
}

