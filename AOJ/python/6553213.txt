import sys
from heapq import heappush, heappop

# READ_FROM_FILE = True
READ_FROM_FILE = False


def dijkstra(n, max_l, adjacency_list):
    hq = [(0, 0, 0)]
    length_from_s = [max_l + 1] * n

    length_from_s[0] = 0
    while len(hq) > 0:
        cl, c_num_inversions, cv = heappop(hq)

        if cv == n - 1:
            return c_num_inversions

        for nv, length, is_inverse_edge in adjacency_list[cv]:
            nl = cl + length
            if nl <= max_l and length_from_s[nv] > nl:
                length_from_s[nv] = nl
                n_num_inversions = c_num_inversions if not is_inverse_edge else c_num_inversions + 1
                heappush(hq, (nl, n_num_inversions, nv))

    return -1


def is_reachable(n, max_l, adjacency_list, cv, cl, max_num_inversions, is_visited_set):
    if cv == n - 1:
        return True

    for num_inversions in range(max_num_inversions + 1):
        for nv, length, is_inverse_edge in adjacency_list[cv]:
            if nv not in is_visited_set:
                nl = cl + length
                if nl <= max_l:
                    is_visited_set.add(nv)
                    if is_inverse_edge:
                        if num_inversions > 0:
                            if is_reachable(n, max_l, adjacency_list, nv, nl, num_inversions - 1, is_visited_set):
                                return True
                    else:
                        if is_reachable(n, max_l, adjacency_list, nv, nl, num_inversions, is_visited_set):
                            return True
                    is_visited_set.discard(nv)

    return False


def main():
    if READ_FROM_FILE:
        f = open('test1.txt', 'r')
    else:
        f = sys.stdin

    n, m, max_l = map(int, f.readline().split())
    adjacency_list = [[] for _ in range(n)]
    for _ in range(m):
        a, b, c = map(int, f.readline().split())
        a -= 1
        b -= 1
        adjacency_list[a].append((b, c, False))
        adjacency_list[b].append((a, c, True))

    max_num_inversions = dijkstra(n, max_l, adjacency_list)
    if max_num_inversions < 0:
        print(-1)
    elif max_num_inversions == 0:
        print(0)
    elif max_num_inversions == m:
        print(m)
    else:
        for i in range(max_num_inversions):
            if is_reachable(n, max_l, adjacency_list, 0, 0, i, {0}):
                print(i)
                break
        else:
            print(max_num_inversions)

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

