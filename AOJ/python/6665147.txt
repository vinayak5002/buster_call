/* *** Shipul *** */

/* The more you practice the better it is! */

#include<bits/stdc++.h>

using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

typedef long long ll;
typedef long double ld;

#define a1(a) int a; cin >> a;
#define a2(a,b) int a,b; cin >> a >> b;
#define a3(a,b,c) int a,b,c; cin >> a >> b >> c;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define nn '\n'

#define max3(a,b,c) max(a, max(b,c))           /// max from 3
#define min3(a,b,c) min(a, min(b,c))           /// min from 3

#define for1(i,n) for(int i=1; i<=n; i++)
#define for0(i,n) for(int i=0; i<n; i++)        ///looping
#define forr(i,n) for(int i=n-1; i>=0; i--)
#define all(p)    p.begin(),p.end()
#define grtr(p)   sort(p.begin(), p.end(), greater<ll>())

#define SR ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

int dr8[8] = {1,-1,0,0,1,-1,-1,1};       ///8 direction move
int dc8[8] = {0,0,-1,1,1,1,-1,-1};
int dr4[4] = {0,0,1,-1};                 ///4 direction move
int dc4[4] = {-1,1,0,0};                 ///or adjacent dir.
int kn8r[8] = {1,2,2,1,-1,-2,-2,-1};     /// knight moves
int kn8c[8] = {2,1,-1,-2,-2,-1,1,2};

const long long N=200007, INF=2000000000000000000;

int lcm(int a, int b)
{
    int k=__gcd(a,b);

    return a/k*b;
}

int power(int a, int b, int p) /// binary exponentiation
{
    if(a==0)
        return 0;

    int res = 1;
    a%=p;

    while(b>0)
    {
        if(b&1)
        res = (res*a) % p;
        b>>=1;
        a=(a*a)%p;
    }

    return res;
}

ll fact(ll n)
{
    if(n==1 || n==0)
    return 1;

    return n*fact(n-1);
}


const int sz=2e5+5;
vector<int>adj[sz];
vector<int>col(sz, -1); /// initialize to -1
bool vis[sz];

bool dfs(int u) /// bipartite or not
{
    vis[u]=1;

    for(int v:adj[u])
    {
        if(col[v]==col[u])
        return false;   /// same colour

        else if(!vis[v])
        {
            col[v]=!col[u];
            if(!dfs(v))
            return false;
        }
    }

    return true;
}

inline ll nxt()
{
    ll x;
    cin >> x;

    return x;
}

const ll md=998244353;

bool ar[20000];

bool pal(string s)
{
    string ss=s;

    reverse(ss.begin(), ss.end());

    if(ss==s) return true;

    else return false;
}

ll ans(ll x, ll y)
{
    return (x+y);
}

void solve()
{
    ordered_set os;

    string s, s2;
    cin >> s >> s2;

    s=s+s;

    if(s.find(s2)!=-1) cout << "YES" << nn;

    else cout << "NO" << nn;
}

int main()
{
    SR;
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    /*int t;
    cin >> t;

    while(t--)
    {
        solve();
    } */

    solve();

    return 0;
}

/* two step for recursive problem...
   1) Design a recursive tree
   2) <\> the problem
*/


/*Conceptually you should be strong
 and have practical knowledge. */

