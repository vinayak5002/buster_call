// https://algo-logic.info/union-find-tree/

#include <iostream>
#include <cmath>
#include <vector>
#include <iterator>
#include <algorithm>

class DisjointSet{
    private:
        std::vector<int> rank, root, weight;
    public:
        DisjointSet(int size = 0){
            rank.resize(size);
            root.resize(size);
            weight.resize(size);

            for(int i=0; i<size; i++) makeSet(i);
        }
        void makeSet(int x){
            this->root[x] = x;
            this->rank[x] = 0;
            this->weight[x] = 0;
        }

        bool same(int x, int y){
            return (findSet(x).first == findSet(y).first);
        }

        void link(int x, int y, int z){
            if(this->rank[x] > this->rank[y]){
                this->root[y] = x;
                this->weight[y] = -z;
            }else{
                this->root[x] = y;
                this->weight[x] = z;
                if(this->rank[x] == this->rank[y]) this->rank[y]++;
            }
        }

        std::pair<int, int> findSet(int x){
            std::pair <int, int> p;
            if(x != this->root[x]){
                p = findSet(this->root[x]);
                this->root[x] = p.first;
                this->weight[x] += p.second;
            }
            return std::pair<int, int> (this->root[x], this->weight[x]);
        }

        void merge(int x, int y, int z){
            link(findSet(x).first, findSet(y).first, z - this->weight[x] + this->weight[y]);
        }

        void diff(int x, int y){
            if(!same(x,y)) std::cout << "?" << std::endl;
            else std::cout << this->weight[x] - this->weight[y] << std::endl;
        }
};

int main(){
    int n, q, com, x, y, z;
    std::cin >> n >> q;
    DisjointSet ds = DisjointSet(n);

    for(int i = 0 ; i < q ; i++){
        std::cin >> com;
        if(com == 0){
            std::cin >> x >> y >> z;
            ds.merge(x, y, z);
        }
        else if(com == 1){
            std::cin >> x >> y;
            ds.diff(x, y);
        }
    }

    return 0;
}
