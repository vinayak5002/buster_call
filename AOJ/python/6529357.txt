abstract class Shape{
 public void print(){
 System.out.print(this.getClass().getName() + ": ");
 }
 public abstract void move(int dx, int dy);
}

class Circle extends Shape{
 Point P;
 int wide;
 public Circle(Point p, int w){
     P = p;
     wide = w;
 }
 public void print(){
 super.print();
 System.out.print("(" + P.x + ", " + P.y + ") " + "radius = " + wide);
 System.out.println();
 }
 public void move(int dx, int dy){
     P.x += dx;
     P.y += dy;
 }
}

class Quadrangle extends Shape{
 public Point[] P;
 public Quadrangle(Point p1, Point p2, Point p3, Point p4){
 P = new Point[4];
 P[0] = p1;
 P[1] = p2;
 P[2] = p3;
 P[3] = p4;
 }
 public void print(){
 super.print();
 System.out.print(P[0].x);
 for ( int i = 0; i < 4; i++ ) {
 if ( i > 0 ) System.out.print("-");
 System.out.print("(" + P[i].x + ", " + P[i].y + ")");
 }
 System.out.println();
 }
 public void move(int dx, int dy){
     for ( int i = 0; i < 4; i++ ) {
      P[i].x += dx;
      P[i].y += dy;
     }
 }
}

class Parallelogram extends Shape{
 protected Point[] P;
 protected int wide;
 public Parallelogram(Point p1, Point p2, int w){
 P = new Point[2];
 P[0] = p1;
 P[1] = p2;
 
 wide = w;
 }
 public void print(){
 super.print();
 for ( int i = 0; i < 4; i++ ) {
 if ( i > 0 ) System.out.print("-");
 
 switch(i){
     case 0:
         System.out.print("(" + P[0].x + ", " + P[0].y + ")");
         break;
     case 1:
         System.out.print("(" + (P[0].x - wide) + ", " + P[0].y + ")");
         break;
     case 2:
         System.out.print("(" + P[1].x + ", " + P[1].y + ")");
         break;
     case 3:
         System.out.print("(" + (P[1].x - wide) + ", " + P[1].y + ")");
         break;
         
 }
 }
 System.out.println();
 }
 public void move(int dx, int dy){
     for ( int i = 0; i < 2; i++ ) {
          P[i].x += dx;
      P[i].y += dy;
     }
 }
}

class Rectangle extends Shape{
 protected Point[] P;
 public Rectangle(Point p1, Point p2){
 P = new Point[2];
 P[0] = p1;
 P[1] = p2;
 
 }
 public void print(){
 super.print();
 for ( int i = 0; i < 4; i++ ) {
 if ( i > 0 ) System.out.print("-");
 switch(i){
     case 0:
         System.out.print("(" + P[0].x + ", " + P[0].y + ")");
         break;
     case 1:
         System.out.print("(" + P[1].getX() + ", " + P[0].getY() + ")");
         break;
     case 2:
         System.out.print("(" + P[1].getX() + ", " + P[1].getY() + ")");
         break;
     case 3:
         System.out.print("(" + (P[0].getX() - wide) + ", " + P[1].getY() + ")");
         break;
         
 }
 }
 System.out.println();
 }
 public void move(int dx, int dy){
     for ( int i = 0; i < 2; i++ ) {
          P[i].x += dx;
      P[i].y += dy;
     }
 }
}

class Square extends Shape{
 protected Point P;
 protected int wide;
 public Square(Point p1,int w){
     P = new Point[1];
 P[0] = p1;
 wide = w;
 }
 public void print(){
 super.print();
 for ( int i = 0; i < 4; i++ ) {
 if ( i > 0 ) System.out.print("-");
 switch(i){
     case 0:
         System.out.print("(" + P[0].x + ", " + P[0].y + ")");
         break;
     case 1:
         System.out.print("(" + (P[0].x + wide) + ", " + P[0].y + ")");
         break;
     case 2:
         System.out.print("(" + P[0].x + ", " + (P[0].y + wide)+ ")");
         break;
     case 3:
         System.out.print("(" + (P[0].x + wide) + ", " + (P[0].y + wide) + ")");
         break;
         
 }
 }
 System.out.println();
 }
 public void move(int dx, int dy){
      P[0].x += dx;
      P[0].y += dy;
 }
}

class ShapeApplication{
 public static void main(String[] args){
 Shape[] shapes = {
 new Circle(new Point(0, 0), 3),
 new Quadrangle(
 new Point(0, 0),
new Point(4, 3),
new Point(1, 5),
new Point(0, 2)),
 new Parallelogram(new Point(5, 4), new Point(12, 7), 5),
 new Rectangle(new Point(3, 2), new Point(7, 5)),
 new Square(new Point(5, 6), 2)
 };
 for ( int i = 0; i < shapes.length; i++)
 shapes[i].move(8, 5);
 for ( int i = 0; i < shapes.length; i++)
 shapes[i].print();
 }
}


