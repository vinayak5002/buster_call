class Graph():
    def __init__(self,size):
        self.size = size
        self.vertexes = []
        for i in range(0,size): self.vertexes.append(Vertex(i))
    def setAdj(self,id,adj_id):
        adjs = []
        for a in adj_id:
            adjs.append(self.vertexes[a])
        self.vertexes[id].adj = adjs
        
    def __len__(self):
        return self.size

    def __getitem__(self,id):
        return self.vertexes[id]
    def __setitem__(self,vertex):
        self.vertexes[vertex.id].adj = vertex.adj
    def __iter__(self):
        return iter(self.vertexes)
    def DepthFirstSearch(self):
        self.t = 1
        for v in self.vertexes:
            if(v.visited== False):
                v.visited = True
                self.Search(v)
                self.t += 1
    def Search(self,root):
        root.t1 = self.t
        for adj in root.adj:
            if(adj.visited==False):
                self.t += 1
                adj.visited = True
                self.Search(adj)
        self.t += 1
        root.t2 = self.t

class Vertex():
    def __init__(self,id,adj = []):
        self.id = id
        self.adj = []
        self.t1 = 0
        self.t2 = 0
        self.visited = False



n = int(input())
graph = Graph(n)
for i in range(0,n):
    inp = input().split()
    inp = [int(n)-1 for n in inp]
    graph.setAdj(id=inp[0],adj_id=inp[2:])

graph.DepthFirstSearch()

for v in graph:
    print(str(v.id+1)+" "+str(v.t1)+" "+str(v.t2))





