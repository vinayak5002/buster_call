class Graph:
    def __init__(self,V,E,edges):
        self.V = V
        self.E = E
        self.edges = sorted(edges,key=lambda x: x[0])

        self.ind_edges = [-1] * V
        pre = -1

        for i in range(V):
            if pre != edges[i][0]:
                self.ind_edges[edges[i][0]] = i
            pre = edges[i][0]

        

def dfs(g,s,n):
    ans = False

    if n in s:
        return True
    s.add(n)
    
    if g.ind_edges[n] == -1:
        pass
    else:
        id = g.ind_edges[n]
        while  id < V:
            if g.edges[id][0] != n :
                break
            ans = dfs(g,s,g.edges[id][1]) or ans
            if ans:
                return ans

            id += 1

    s.remove(n)

    return ans
    
        



V,E = map(int,input().split())
edges = [[0] * 2 for i in range(E)]


for i in range(E):
    edges[i][0],edges[i][1] = map(int,input().split())

g = Graph(V,E,edges)


for i in range(V):
    ans = dfs(g,set(),i)

if ans :
    print(1)
else:
    print(0)

