import java.io.BufferedReader
import java.io.PrintWriter
import kotlin.math.sqrt

fun main() {
    val re = System.`in`.bufferedReader()
    val pw = PrintWriter(System.out)

    val (n, q) = re.readInts()
    val uf = UnionFind(n)
    repeat(q) {
        val (com, x, y) = re.readInts()
        when (com) {
            0 -> uf.unite(x, y) // unite
            1 -> pw.println(
                if (uf.isSame(x, y)) "1" else "0"
            )  // unite
        }
    }

    pw.flush()
    re.close()
}

class UnionFind(size: Int) {
    val parnet: MutableList<Int> // 各頂点の親頂点の番号. 自身が根の場合は-1
    val rank: MutableList<Int> // 各頂点の属する根付き木の頂点数

    init {
        // 全部根で初期化
        parnet = MutableList(size) { -1 }
        this.rank = MutableList(size) { 1 }
    }

    // 根を求める
    fun root(x: Int): Int =
        if (parnet[x] == -1) {
            x
        } else {
            parnet[x] = root(parnet[x]) // 親を根に張り替える(経路圧縮)
            parnet[x]
        }

    // xを含むグループと、yを含むグループを併合する
    fun unite(x: Int, y: Int) {
        val X = root(x)
        val Y = root(y)
        if (X == Y) return // 同じグループの時は何もしない
        if (rank[X] > rank[Y]) {
            unite(Y, X) // 常に第一引数を根、第二引数を子として併合する union by size (union by rank)
            return
        }
        if (rank[X] == rank[Y]) {
            rank[Y] += 1
        }
        parnet[X] = root(Y)
    }

    fun isSame(x: Int, y: Int): Boolean = root(x) == root(y)

}

inline fun <T, R : Comparable<R>> Iterable<T>.maxOf(selector: (T) -> R): R {
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var maxValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        if (maxValue < v) {
            maxValue = v
        }
    }
    return maxValue
}

fun Int.isEven(): Boolean = this % 2 == 0

fun Int.isOdd(): Boolean = !isEven()

fun Int.factorial() = (1..this).reduce { a, b -> a * b }

fun Int.permutation(k: Int = 1) = (k..this).reduce { a, b -> a * b }

fun <T> List<T>.permutations(): Set<List<T>> {
    val source = this
    val permutations = mutableSetOf<List<T>>()
    fun permutation(source: List<T>, perm: List<T>) {
        if (source.size <= 1) {
            permutations += perm + source
        } else {
            repeat(source.size) {
                permutation(source.take(it) + source.drop(it + 1), perm + source[it])
            }
        }
    }
    permutation(source, emptyList())
    return permutations
}

fun Int.combination(k: Int = 1) = permutation(k) / k.factorial()

// digitToIntが1.5からなので自前で定義
fun Char.digitToInt(): Int {
    @Suppress("DEPRECATION") return Character.digit(this.toInt(), 10).also {
        if (it < 0) throw IllegalArgumentException("Char $this is not a decimal digit")
    }
}


operator fun Regex.contains(text: CharSequence): Boolean = this.matches(text)

fun divisor(value: Long): List<Long> {
    return (1..(sqrt(value.toDouble()).toLong() + 1)).filter { value % it == 0L }.flatMap {
        if (value / it == it) listOf(it) else listOf(
            it, value / it
        )
    }//.also { println("value: $value, divisors $it") }
}

fun primeFactor(value: Long): List<Long> {
    if (value == 1L) return listOf(1)
    val max = Math.sqrt(value.toDouble()).toLong()
    return prime(2, max).filter { value % it == 0L }.also { println("value: $value, primeFactor $it") }
}

// 範囲内の素数を取得
// fromだけ指定すると戻り値の個数で素数判定ができる
fun prime(from: Long, to: Long = from): List<Long> {
    return (from..to).filter { i ->
        val max = Math.sqrt(i.toDouble()).toLong()
        (2..max).all { j -> i % j != 0L }
    }
}


fun BufferedReader.readInt(): Int = this.readLine()!!.toInt()

fun BufferedReader.readLong(): Long = this.readLine()!!.toLong()

fun BufferedReader.readDouble(): Double = this.readLine()!!.toDouble()

fun BufferedReader.readInts(): List<Int> = readLine()!!.split(" ").map { it.toInt() }


fun readLongs(reader: BufferedReader): List<Long> = reader.readLine()!!.split(" ").map { it.toLong() }

fun readDoubles(reader: BufferedReader): List<Double> = reader.readLine()!!.split(" ").map { it.toDouble() }


fun Double.decimalFormat(decimalCount: Int): String = String.format("%.${decimalCount}f", this)
