def inputLine():
    return [int(x) for x in input().split(" ")]


class DisjointSet:
    def __init__(self, n) -> None:
        self.p = [i for i in range(n)]
        self.rank = [0 for _ in range(n)]

    def unite(self, x, y):
        root_x = self.findSet(x)
        root_y = self.findSet(y)

        if self.rank[root_x] > self.rank[root_y]:
            self.p[root_y] = root_x# xを最上位rootに
        else:
            self.p[root_x] = root_y
            if self.rank[root_x] == self.rank[root_y]:
                self.rank[root_y] += 1# 同じ高さなら高さ増える

    def findSet(self, x):
        if self.p[x] != x:# root部分まで繰り返す
            x = self.findSet(self.p[x])

        return x

    def same(self, x, y):
        root_x = self.findSet(x)
        root_y = self.findSet(y)

        return root_x == root_y


if __name__ == "__main__":
    [V, E] = inputLine()
    DSInst = DisjointSet(V)
    w_sum = 0

    edge_list = sorted([inputLine() for _ in range(E)], key=lambda x: x[2])
    for s,t,w in edge_list:
        root_s = DSInst.findSet(s)
        root_t = DSInst.findSet(t)

        if root_s != root_t:
            DSInst.unite(s, t)
            w_sum += w

    print(w_sum)
