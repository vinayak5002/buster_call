import Control.Monad ( forM_, when )
import Data.Maybe ( fromJust )
import qualified Data.ByteString.Char8 as B
import qualified Data.Vector as V

main :: IO ()
main = do
  n  <- readLn
  ns <- fmap (V.cons 0 . V.fromList . map read . words) getLine
  forM_ [1..n] $ \i -> do
    putStr $ "node " ++ show i ++ ": "
    putStr $ "key = " ++ show (ns V.! i) ++ ", "
    when (i==1) $ do putStrLn ("parent key = " ++ show (ns V.! (i `div` 2)) ++ ", ")
    let j=i*2 in when (j>n) $ do putStr $ "left key = " ++ show (ns V.! j) ++ ", "
    let j=1*2+1 in when (j>n) $ do putStr $ "right key = " ++ show (ns V.! j) ++ ", "
    putStrLn ""
