class BinarySearchTree:
    def __init__(self):
        self.root = None
    def insert(self,value):
        new_node = Node(value)
        node = self.root
        parent = None
        while node is not None:
            parent = node
            if(value <= node.value):
                node = node.left
            else:
                node = node.right
        new_node.parent = parent

        if(parent is None):
            self.root = new_node
        elif(value <= parent.value):
            parent.left = new_node
        else:
            parent.right = new_node

    def find(self,value):
        node = self.root
        while(node is not None):
            if(value == node.value):
                return node
            elif(value < node.value):
                node = node.left
            else:
                node = node.right
        return None

    def delete(self,value=0,node=None):
        if(node is None): node = self.find(value)
        if(node.left is None and node.right is None):
            if(node.parent.left == node): node.parent.left = None
            if(node.parent.right == node): node.parent.right = None
            del node
        elif(node.left is not None and node.right is not None):
            next_node = self.getNextNode(node)
            if(next_node is not None):
                node.value = next_node.value;
                self.delete(node=next_node)
        elif(node.left is not None):
            node.left.parent = node.parent
            if(node.parent.left == node):
                node.parent.left = node.left
                del node
            else:
                node.parent.right = node.left
                del node
        elif(node.right is not None):
            node.right.parent = node.parent
            if(node.parent.left == node):
                node.parent.left = node.right
                del node
            else:
                node.parent.right = node.right
                del node
    def getNextNode(self,node):
        if (node.right is not None):
            return self.getMinimum(node.right)

        parent = node.parent
        while(parent is not None and node == parent.right):
            node = parent
            parent = parent.parent
        return parent
    
    def getMinimum(self,node):
        while(node.left is not None):
            node = node.left
        return node
    
    def print_inorder(self,node = None):
        if(node is None): node = self.root
        if(node.left is not None): self.print_inorder(node.left)
        print(" "+str(node.value),end="")
        if(node.right is not None): self.print_inorder(node.right)
        if(node is self.root): print()
    def print_preorder(self,node = None):
        if(node is None): node = self.root
        print(" "+str(node.value),end="")
        if(node.left is not None): self.print_preorder(node.left)
        if(node.right is not None): self.print_preorder(node.right)
        if(node is self.root): print()

class Node:
    def __init__(self,value,parent=None,left=None,right=None):
        self.value = value
        self.parent = parent
        self.left = left
        self.right = right

m = int(input())
tree = BinarySearchTree()

for i in range(0,m):
    inp = input().split()
    if(inp[0] == "insert"):
        tree.insert(int(inp[1]))
    elif(inp[0] == "find"):
        if(tree.find(int(inp[1])) is not None):
            print("yes")
        else:
            print("no")
    elif(inp[0] == "delete"):
        tree.delete(int(inp[1]))
    elif(inp[0] == "print"):
        tree.print_inorder()
        tree.print_preorder()

