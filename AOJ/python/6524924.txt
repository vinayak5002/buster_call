import java.util.*;
import java.util.stream.IntStream;

public class Main {
    static Scanner sc = new Scanner(System.in);
    public static void main(String[] args) {
        Dice dice = new Dice();
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < 6; i++) {
            dice.setNum(i, getInt());
        }
        int q = getInt();
        for (int i = 0; i < q; i++) {
            res.append(dice.getRight(getInt(), getInt())).append('\n');
        }
        System.out.print(res);
    }
    static int getInt() {
        return Integer.parseInt(sc.next());
    }
    static class Dice {
        int[] nums = new int[6];
        int[][] rights = {
                {-1, 2, 4, 1, 3, -1},
                {3, -1, 0, 5, -1, 2},
                {1, 5, -1, -1, 0, 4},
                {4, 0, -1, -1, 5, 1},
                {2, -1, 5, 0, -1, 3},
                {-1, 3, 1, 4, 2, -1}
        };
        void rotate(char direction) {
            if (direction == 'N') {
                int tmp = nums[4];
                nums[4] = nums[0];
                nums[0] = nums[1];
                nums[1] = nums[5];
                nums[5] = tmp;
            }
            if (direction == 'S') {
                int tmp = nums[1];
                nums[1] = nums[0];
                nums[0] = nums[4];
                nums[4] = nums[5];
                nums[5] = tmp;
            }
            if (direction == 'W') {
                int tmp = nums[3];
                nums[3] = nums[0];
                nums[0] = nums[2];
                nums[2] = nums[5];
                nums[5] = tmp;
            }
            if (direction == 'E') {
                int tmp = nums[2];
                nums[2] = nums[0];
                nums[0] = nums[3];
                nums[3] = nums[5];
                nums[5] = tmp;
            }
        }
        void setNum(int idx, int num) {
            nums[idx] = num;
        }
        int getRight(int top, int left) {
            return nums[rights[indexOf(top)][indexOf(left)]];
        }
        int indexOf(int num) {
            return IntStream.range(0, nums.length).filter(i -> nums[i] == num).findFirst().orElse(-1);
        }
    }
}

