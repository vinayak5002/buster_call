use std::iter::zip;

fn main() {
    let s: Vec<u32> = read_vec();
    let a: Vec<Vec<i32>> = read_vec2(s[0]);
    let b: Vec<i32> = read_vec3(s[1]);
    for a_row in a {
        let mut v = 0;
        // for (a_val, b_val) in a_row.iter().zip(b.iter()) {
        for (a_val, b_val) in zip(&a_row, &b) {
            v += a_val * b_val;
        }
        println!("{}", v);
    }
}

fn read<T: std::str::FromStr>() -> T {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).ok().unwrap();
    s.trim().parse().ok().unwrap()
}

fn read_vec<T: std::str::FromStr>() -> Vec<T> {
    read::<String>()
        .split_whitespace()
        .map(|e| e.parse().ok().unwrap())
        .collect()
}

fn read_vec2<T: std::str::FromStr>(n: u32) -> Vec<Vec<T>> {
    (0..n).map(|_| read_vec()).collect()
}

fn read_vec3<T: std::str::FromStr>(n: u32) -> Vec<T> {
    (0..n).map(|_| read()).collect()
}

