from math import *
from random import *
from time import *
from collections import deque,Counter
import heapq
import itertools
# abs
abs
# sin/cos/tan
sin,cos,tan
# min/max
min,max
# gcd,lcm
gcd
def lcm(a,b):
    return a//gcd(a,b)*b
# rand
randint(0,(1<<31))
# time
t=time()
time()-t
# reverse
# l.reverse (inplace)
# sort
sorted
# stack
l=[]
l.append
l.pop
# queue
d=deque(l)
d.append
d.popleft
# pripority queue/heap queue/ popは最小値を取り出す。/最大値を取りたいならpushの時に-1していけ
heapq.heapify
heapq.heappop
heapq.heappush
import bisect
bisect.bisect_left
bisect.bisect_right
INF=1e9
def IN():
    return tuple(map(int,input().split()))
def tateLINE(n,lista):
    for i in range(n):
        line=IN()
        for i,v in enumerate(line):
            lista[i].append(v)
    return lista
def yokoLINE(n):
    a=[]
    for i in range(n):
        a.append(IN())
    return a

def INstr():
    return tuple(input().split())

def tateLINEstr(n,lista):
    for i in range(n):
        line=INstr()
        for i,v in enumerate(line):
            lista[i].append(v)
    return lista
def yokoLINEstr(n):
    a=[]
    for i in range(n):
        a.append(INstr())
    return a
def chmin(a,b):
    if a>b:
        return b,True
    return a,False
def chmax(a,b):
    if a<b:
        return b, True
    return a,False
while True:
    n,x=IN()
    res=0
    if n==0 and x==0:
        break
    l=list(range(1,n+1))
    for v in itertools.combinations(l,3):
        if x==v[0]+v[1]+v[2]:
            res+=1
    print(res)
