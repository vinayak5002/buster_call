import java.util.Scanner

case class Process(id:String, time:Int)

class Que(var dequeue:List[Process]) {
  var enqueue = List[Process]()
  def deque():Option[Process] = {
    (dequeue.isEmpty, enqueue.isEmpty) match {
      case (true, true) => None
      case (true, false) => {
        val tl = enqueue.reverse
        dequeue = tl.tail
        enqueue = List[Process]()
        Some(tl.head)
      }
      case _ => {
        val h = dequeue.head
        dequeue = dequeue.tail 
        Some(h)
      }
    }
  }
  def enque(p:Process):Unit = {
    enqueue = p::enqueue
  }
}

object Main extends App { 
  val sc = new Scanner(System.in)
  val N  = sc.nextInt()
  val q  = sc.nextInt()

  val plist = (for (i <- 0 until N) yield Process(sc.next(), sc.nextInt())).toList
  val queue = new Que(plist)
  var elapsed = 0

  def solver():Unit = {
    queue.deque() match {
      case Some(Process(id, time)) if time > q => {
          elapsed = elapsed + q          
          queue.enque(Process(id, time - q))
          solver()
        }
      case Some(Process(id, time)) if time <= q => { 
          elapsed = elapsed + time          
          println(s"$id $elapsed")
          solver()
        }
      case _ => ()
    }
  }

  solver()
}

