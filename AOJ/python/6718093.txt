from typing import List, Optional


class Node(object):
    """Node has key, previous node pointer and next node pointer.

    Args:
        None

    Returns:
        None
    """

    def __init__(self, key: int) -> None:
        """Constructor. If optional args are passed, its set variables.

        Args:
            key (int): Key of node.
            prev_node (Optional[Node], optional): Previous node. Defaults to None.
            next_node (Optional[Node], optional): Next node. Defaults to None.

        Returns:
            None
        """
        self.key = key
        self.prev_node: Optional[Node] = None
        self.next_node: Optional[Node] = None


class DoubleLinkedList(object):
    def __init__(self) -> None:
        self.head_node: Optional[Node] = None
        self.tail_node: Optional[Node] = None
        self.length: int = 0


    def print_aoj(self) -> None:
        curt_node = self.head_node
        keys: str = ''

        while curt_node:
            keys += str(curt_node.key) + ' '

            curt_node = curt_node.next_node

        print(keys.strip())


    def insert(self, key: int) -> None:
        new_node = Node(key)

        # リストが空
        if self.head_node is None:
            self.head_node = new_node
            self.tail_node = self.head_node
            self.length += 1
            return

        # ヘッドノードを追加されたノードの次に移す
        self.head_node.prev_node = new_node
        new_node.next_node = self.head_node
        self.head_node = new_node
        self.length += 1


    def remove(self, key: int) -> None:
        curt_node = self.head_node
        # 削除対象が空ではないヘッドノード
        if curt_node and curt_node.key == key:
            # リストの要素がヘッドノードのみ
            if curt_node.next_node is None:
                curt_node = None
                self.head_node = None
                self.tail_node = None
                self.length = 0
                return
            # リストの要素が複数
            else:
                next_node = self.head_node.next_node  # type: ignore
                next_node.prev_node = None  # type: ignore
                curt_node = None
                self.head_node = next_node
                self.length -= 1
                return

        # 削除対象を探す
        while curt_node and curt_node.key != key:
            curt_node = curt_node.next_node

        # リストが空か削除対象が存在しない
        if curt_node is None:
            return

        # 削除対象がリストの末端
        if curt_node.next_node is None:
            prev_node = curt_node.prev_node
            prev_node.next_node = None  # type: ignore
            self.tail_node = prev_node
            curt_node = None
            self.length -= 1
            return
        # 削除対象が非両端
        else:
            prev_node = curt_node.prev_node
            next_node = curt_node.next_node
            prev_node.next_node = next_node  # type: ignore
            next_node.prev_node = prev_node  # type: ignore
            curt_node = None
            self.length -= 1
            return


n = int(input())
commands: List[str] = [input() for _ in range(n)]

dll = DoubleLinkedList()

for command in commands:
    if command == 'deleteFirst':
        dll.remove(dll.head_node.key)  # type: ignore
        continue
    elif command == 'deleteLast':
        dll.remove(dll.tail_node.key)  # type: ignore
        continue

    command, key = command.split()
    if command == 'insert':
        dll.insert(int(key))
    elif command == 'delete':
        dll.remove(int(key))

dll.print_aoj()

