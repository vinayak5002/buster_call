/*
Simple Calculator
Write a program which reads two integers a, b and an operator op, and then prints the value of a op b.

The operator op is '+', '-', '*' or '/' (sum, difference, product or quotient). The division should truncate any fractional part.

Input
The input consists of multiple datasets. Each dataset is given in the following format.

a op b
The input ends with a dataset where op = '?'. Your program should not process for this dataset.

Output
For each dataset, print the value in a line.

Constraints
0 ≤ a, b ≤ 20000
No divisions by zero are given.
Sample Input 1
1 + 2
56 - 18
13 * 2
100 / 10
27 + 81
0 ? 0
Sample Output 1
3
38
26
10
108
*/

#include<stdio.h>
#include<stdlib.h>

void get_eq(int* px, int* py, char* pc) {
    char test_char;
    char space;
    char x_string[6];
    char y_string[6];
    
    int i=0, op_index=2;
    while ( (test_char = getchar()) != '\n') {
        if (test_char >= 48 && test_char <= 57 && i < op_index) {
            x_string[i] = test_char;
            op_index++;
        } else if (test_char == ' ') {
            space = test_char; 
        } else if (test_char == '+' || test_char == '-' || test_char == '*' || test_char == '/' || test_char == '?') {
            *pc = test_char;
            op_index = i;
        } else if (test_char == ' ') {
            space = test_char;
        } else if (test_char >= 48 && test_char <= 57 && i > op_index) {
            y_string[i-op_index-2] = test_char;
        }
        i++;
    }
    x_string[op_index-1] = '\0';
    y_string[i] = '\0';
    *px = atoi(x_string);
    *py = atoi(y_string);
    
    return;
}


int main() {
    
    int a, b;
    int* pa=&a;
    int* pb=&b;
    char op;
    char* p_op=&op;
    
    while(1) {
        
        get_eq(pa,pb,p_op);
        printf("%d %d %c\n", a, b, op);
        if (op == '?') {
            break;
        }
        
        switch(op) {
            case '+':
                printf("%d\n", a + b);
                break;
            case '-':
                printf("%d\n", a - b);
                break;
            case '*':
                printf("%d\n", a * b);
                break;
            case '/':
                printf("%d\n", a / b);
                break;
            default:
                break;
        }
        
    }
    
    
    return 0;
    
}
