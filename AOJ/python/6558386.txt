typedef long long ll;
#include <bits/stdc++.h>

using namespace std;

class Node {
    public:
    int parent;
    int node_id;
    int sibling;
    int right;
    int left;
    int depth;
    int degree;
    int hight;
    Node() {
        parent = -1;
        sibling = -1;
        depth = 0;
        hight = 0;
        degree = 0;
    }
    void set_node(int id, int right_node, int left_node){
        node_id = id;
        right = right_node;
        left = left_node;
    }
};

class Tree {
    public:
    int node_size;
    vector<Node> tree_node;
    Tree() {
    }
    void assign_tree_node(){
        Node node;
        tree_node.assign(node_size, node);
    }
    void set_tree_node(int id, int right, int left){
        tree_node.at(id).set_node(id, right, left);
        if(right != -1){
            tree_node.at(right).parent = id;
            tree_node.at(right).sibling = left;
            tree_node.at(id).degree++;
        }
        if(left != -1){
            tree_node.at(left).parent = id;
            tree_node.at(left).sibling = right;
            tree_node.at(id).degree++;
        }
    }
    int get_parent(){
        int id = 0;
        for(int i = 0; i < node_size; i++){
            if(tree_node.at(i).parent == -1){
                id = tree_node.at(i).node_id;
                break;
            }
        }
        return id;
    }
    void set_depth(int parent_id, int depth){
        tree_node.at(parent_id).depth = depth;
        depth++;
        if(tree_node.at(parent_id).left != -1){
            set_depth(tree_node.at(parent_id).left, depth);
        }
        if(tree_node.at(parent_id).right != -1){
            set_depth(tree_node.at(parent_id).right, depth);
        }
    }
    int set_hight(int parent_id, int hight){
        int right_hight = 0;
        int left_hight = 0;
        if(tree_node.at(parent_id).left != -1){
            right_hight = set_hight(tree_node.at(parent_id).left, hight);
        }
        if(tree_node.at(parent_id).right != -1){
            left_hight = set_hight(tree_node.at(parent_id).right, hight);
        }
        if(tree_node.at(parent_id).left == -1 && tree_node.at(parent_id).right == -1){
            tree_node.at(parent_id).hight = hight;
            hight++;
            return hight;
        }else{
            hight = max(right_hight, left_hight);
            tree_node.at(parent_id).hight = max(hight, tree_node.at(parent_id).hight);
            return tree_node.at(parent_id).hight + 1;
        }
        return 0;
    }
};

template < typename T > std::string to_string( const T& n )
{
    std::ostringstream stm ;
    stm << n ;
    return stm.str() ;
}

int main(){
    int n;
    cin >> n;
    Tree tree;
    tree.node_size = n;
    tree.assign_tree_node();
    for(int i = 0; i < n; i++){
        int id, right, left;
        cin >> id >> right >> left;
        tree.set_tree_node(id, right, left);
    }
    int parent_id = tree.get_parent();
    tree.set_depth(parent_id, 0);
    tree.set_hight(parent_id, 0);
    for(int i = 0; i < tree.node_size; i++){
        cout << "node " << tree.tree_node.at(i).node_id;
        cout << ": parent = " << tree.tree_node.at(i).parent;
        cout << ", sibling = " << tree.tree_node.at(i).sibling;
        cout << ", degree = " << tree.tree_node.at(i).degree;
        cout << ", depth = " << tree.tree_node.at(i).depth;
        cout << ", height = " << tree.tree_node.at(i).hight;
        if(tree.tree_node.at(i).parent == -1){
            cout << ", root";
        }else if(tree.tree_node.at(i).degree != 0){
            cout << ", internal node";
        }else{
            cout << ", leaf";
        }
        cout << endl;
    }
    return 0;
}

