// https://qiita.com/tanakh/items/0ba42c7ca36cd29d0ac8
macro_rules! input {
    (source = $s:expr, $($r:tt)*) => {
        let mut iter = $s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
    ($($r:tt)*) => {
        let s = {
            use std::io::Read;
            let mut s = String::new();
            std::io::stdin().read_to_string(&mut s).unwrap();
            s
        };
        let mut iter = s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
}

macro_rules! input_inner {
    ($iter:expr) => {};
    ($iter:expr, ) => {};

    ($iter:expr, $var:ident : $t:tt $($r:tt)*) => {
        let $var = read_value!($iter, $t);
        input_inner!{$iter $($r)*}
    };
}

macro_rules! read_value {
    ($iter:expr, ( $($t:tt),* )) => {
        ( $(read_value!($iter, $t)),* )
    };

    ($iter:expr, [ $t:tt ; $len:expr ]) => {
        (0..$len).map(|_| read_value!($iter, $t)).collect::<Vec<_>>()
    };

    ($iter:expr, chars) => {
        read_value!($iter, String).chars().collect::<Vec<char>>()
    };

    ($iter:expr, usize1) => {
        read_value!($iter, usize) - 1
    };

    ($iter:expr, $t:ty) => {
        $iter.next().unwrap().parse::<$t>().expect("Parse error")
    };
}

const INF: usize = 1 << 60;

fn main() {
    input! {
        n: usize,
        m: usize,
        data: [(usize, usize, usize); m],
    }
    let dist = {
        let mut dist = vec![vec![INF; n]; n];
        for (s, t, d) in data {
            dist[s][t] = d;
        }
        dist
    };
    let mut dp = vec![vec![INF; n + 1]; 1 << n];
    let ans = rec(n, 0, 0, &mut dp, &dist);
    if ans != INF {
        println!("{}", ans);
    } else {
        println!("-1");
    }
}

// メモ化再帰
fn rec(n: usize, s: usize, now_v: usize, dp: &mut Vec<Vec<usize>>, dist: &[Vec<usize>]) -> usize {
    if dp[s][now_v] < INF {
        return dp[s][now_v];
    }
    if s == (1 << n) - 1 {
        if now_v == 0 {
            dp[s][now_v] = 0;
        } else {
            dp[s][now_v] = INF;
        }
        return dp[s][now_v];
    }
    let mut res = INF;
    for v in 0..n {
        if (s >> v) & 1 == 0 && dist[now_v][v] != INF {
            // 都市vが未訪問
            res = res.min(rec(n, s | (1 << v), v, dp, dist) + dist[now_v][v]);
        }
    }
    dp[s][now_v] = res;
    res
}

