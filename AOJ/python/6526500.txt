using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _20220416_AOJ
{
    class ITP2_6D
    {
        static int ReadInt() { return int.Parse(Console.ReadLine()); }
        static double ReadDouble() { return double.Parse(Console.ReadLine()); }
        static int[] ReadIntArr(char dlm = ' ') { return Console.ReadLine().Split(dlm).Select(x => int.Parse(x)).ToArray(); }
        static double[] ReadDoubleArr(char dlm = ' ') { return Console.ReadLine().Split(dlm).Select(x => double.Parse(x)).ToArray(); }
        static string[] ReadStringArr(char dlm = ' ') { return Console.ReadLine().Split(dlm).ToArray(); }

        static void Main(string[] args)
        {
            string line = Console.ReadLine();
            int n = int.Parse(line);
            int[] A = ReadIntArr();
            int q = ReadInt();

            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < q; i++)
            {
                int k = ReadInt();
                int lb = LowerBound(A, k, 0, n - 1);
                int ub = UpperBound(A, k, 0, n - 1);
                sb.AppendLine(String.Format("{0} {1}", lb, ub));
            }

            Console.Write(sb);
        }

        static int LowerBound(int[] arr, int k, int b, int e)
        {
            int rv = -1;
            if (b == e)
            {
                if (k <= arr[b])
                {
                    rv = b;
                }
                else
                {
                    rv = b + 1;
                }
            }
            else
            {
                int h = (b + e) / 2;
                if (k <= arr[h])
                {
                    rv = LowerBound(arr, k, b, h);
                }
                else
                {
                    rv = LowerBound(arr, k, h + 1, e);
                }
            }

            return rv;
        }

        static int UpperBound(int[] arr, int k, int b, int e)
        {
            int rv = -1;
            if (b == e)
            {
                if (k < arr[b])
                {
                    rv = b;
                }
                else
                {
                    rv = b + 1;
                }
            }
            else
            {
                int h = (b + e) / 2;
                if (k >= arr[h])
                {
                    rv = UpperBound(arr, k, h + 1, e);
                }
                else
                {
                    rv = UpperBound(arr, k, b, h);
                }
            }

            return rv;
        }
    }
}

