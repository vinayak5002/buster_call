// https://qiita.com/DaikiSuyama/items/9dba963ba74396b9b7fd
// https://luling.hatenablog.com/entry/2018/12/01/212805
// https://zenn.dev/antyuntyun/articles/atcoder-cpp-template
//
#include <bits/stdc++.h>
#include <numeric>
using namespace std;
typedef long long ll;

// rep macro
#define reps(i, a, n) for (ll i = (a); i < (ll)(n); ++i)
#define rreps(i, a, n) for (ll i = (a); i > (ll)(n); --i)
#define rep(i, n) reps(i, 0, n)
#define rrep(i, n) reps(i, 1, n + 1)
#define repd(i,n) for(ll i=n-1;i>=0;i--)
#define rrepd(i,n) for(ll i=n;i>=1;i--)

#define optimize_cin() cin.tie(0); ios::sync_with_stdio(false)

#define pb push_back
#define mp make_pair
#define all(obj) (obj).begin(), (obj).end()
#define YESNO(bool) if(bool){cout<<"YES"<<endl;}else{cout<<"NO"<<endl;}
#define yesno(bool) if(bool){cout<<"yes"<<endl;}else{cout<<"no"<<endl;}
#define YesNo(bool) if(bool){cout<<"Yes"<<endl;}else{cout<<"No"<<endl;}

//定数
#define INF32 2147483647           // 2.147483647 x 10^{9}:32bit整数のinf
#define INF64 9223372036854775807  // 9.22337203685477580 x 10^{18}:64bit整数のinf
#define MOD 1000000007             //問題による
#define PI 3.14159265359           // 円周率

//略記
#define F first
#define S second

//出力(空白区切りで昇順に)
#define dump(x)                                                 \
  for (auto i = x.begin(); i != --x.end(); i++) cout << *i << " "; \
  cout << *--x.end() << endl;
#define echo(x) cout << (x) << endl;

// aをbで割る時の繰上げ,繰り下げ
ll _ceil(ll a, ll b) { return (a + (b - 1)) / b; }
ll _floor(ll a, ll b) { return a / b; }

// 大きい方、小さい方を残す
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }

vector<vector<int>> createCyclicGroups(vector<int> &xs) {
  int n = xs.size();
  vector<pair<int, int>> originalTable(n);
  rep(i, n) originalTable[i] = mp(xs[i], i);
  vector<pair<int, int>> sortedTable(originalTable);
  sort(all(sortedTable));
  vector<pair<int, int>> cyclicGroupTable(n);
  rep(i, n) {
    auto current = sortedTable[i];
    auto next = sortedTable[current.second];
    cyclicGroupTable[i] = mp(current.first, next.first);
  }
  map<int, int> indexMap;
  rep(i, n) indexMap[xs[i]] = i;
  //rep(i, n) {
  //  auto table = cyclicGroupTable[i];
  //  cout << table.first << " " << table.second << endl;
  //}
  //
  int count = 0;
  bool isFirst = true;
  vector<vector<int>> groups;
  vector<int> group;
  vector<bool> isCheckList(n);
  int index = 0;
  bool isAllChecked = false;
  while (true) {
    if (isFirst) {
      auto element = cyclicGroupTable[index];
      group.push_back(element.first);
      isCheckList[index] = true;
      isFirst = false;
      //cout << "group[" << groups.size() << "] : " << index;
      int nextIndex = indexMap[element.first];
      index = nextIndex;
      //cout << " -> " << index << endl;
    } else {
      if (isCheckList[index]) {
        groups.push_back(group);
        group.clear();
        isFirst = true;
        rep(i, n) {
          if (!isCheckList[i]) {
            index = i;
            break;
          }
          isAllChecked = true;
        }
      } else {
        auto element = cyclicGroupTable[index];
        group.push_back(element.first);
        isCheckList[index] = true;
        //cout << "group[" << groups.size() << "] : " << index;
        int nextIndex = indexMap[element.first];
        index = nextIndex;
        //cout << " -> " << index << endl;
      }
    }
    if (count > n) {
      break;
    }
    count++;
  }
  return groups;
}

int solve(vector<int> &ws) {
  int totalCost = 0;
  auto groups = createCyclicGroups(ws);
  rep(i, groups.size()) {
    auto group = groups[i];
    if (group.size() <= 1) {
      continue;
    } else {
      vector<int> diffList(group.size());
      rep(j, group.size()) {
        int nextIndex = (j+1 >= group.size()) ? 0 : j+1;
        diffList[j] = group[j] + group[nextIndex];
      }
      int cost = accumulate(all(diffList), 0) - *max_element(all(diffList));
      totalCost += cost;
    }
  }
  return totalCost;
}

signed main() {
  int n;
  cin >> n;
  vector<int> ws(n);
  rep(i, n) cin >> ws[i];
  //
  int res = solve(ws);
  echo(res);
}


