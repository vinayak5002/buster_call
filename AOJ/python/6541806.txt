import sys
from math import inf
from operator import itemgetter

class segtree:
    def __init__(self, xs):
        i, n = 0, len(xs)
        while 2**i < n: i += 1
        self.i = i
        self.m = m = 2**i
        self.xs = [(None, inf)]*(2*m-1)
        self.xs[m-1:m-1+n] = enumerate(xs)
        for j in reversed(range(i)):
            for k in range(2**j-1, 2**(j+1)-1):
                self.xs[k] = min(self.xs[k*2+1], self.xs[k*2+2], key=itemgetter(1))
    def query(self, s, t):
        def _query(node, lft, rht):
            if t <= lft or rht <= s: return (None, inf)
            if s <= lft and rht <= t: return self.xs[node]
            mid = (lft+rht)//2
            a = _query(node*2+1, lft, mid)
            b = _query(node*2+2, mid, rht)
            return min(a, b, key=itemgetter(1))
        return _query(0, 0, self.m)
    def dump(self):
        for i in range(self.i+1):
            print(" ".join(map(str, self.xs[2**i-1:2**(i+1)-1])))
        
def main(ioi):
    rxs = lambda: map(int, ioi.readline().split())
    N, L = rxs()
    As = [*rxs()]
    seg = segtree(As)
    ans = []
    i, a, rht = -1, inf, L-1

    while rht < N:
        #assert rht <= i+L
        # if rht == 4:
        #     import ipdb; ipdb.set_trace()

        if rht == i+L:
            i, a = seg.query(i+1, rht+1)
            ans.append(a)
            rht += 1
            continue

        k = min(N, i+L)
        while rht < k:
            j, b = seg.query(rht, k)
            if a <= b: break
            #assert rht <= (rht+k)//2 < k
            k = (rht+k)//2

        if a < b: a = b
        ans[len(ans):] = [a]*(j-rht+1)
        rht = j+1
        if a <= b: i = j

    return " ".join(map(str, ans))

print(main(sys.stdin))
            
# import io
# print(main(io.StringIO("""7 3
# 1 7 7 4 8 1 6
# """)))

# import io
# print(main(io.StringIO("""10 3
# 5 4 1 2 3 6 7 2 1 8
# """)))


