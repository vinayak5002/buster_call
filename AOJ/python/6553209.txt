/*
	Name: Programme
	Author: XZC(L_Wave)
	App: Dev-C++
	Lang: Cpp
	Description: Hello, world!
	Windows 10 Creation
*/

//#pragma GCC optimize("Ofast")
#include<bits/stdc++.h>
#define Rep(i, n) for(int i=0; i< (int)(n); i++)
#define Rpp(i, n) for(int i=1; i<=(int)(n); i++)
#define Drp(i, n) for(int i=(int)n-1; ~i; i--)
#define Dpp(i, n) for(int i=(int)n; i; i--)
#define Rco(it, cont) for(const auto& it : cont)
#define For(i, s, e) for(int i=(int)(s); i< (int)(e); i++)
#define Frr(i, s, e) for(int i=(int)(s); i<=(int)(e); i++)
#define Tc int T; cin >> T; while(T--)
#define Eps 1e-7
#define Pinf 0x3f3f3f3f3f3f3f3fLL
#define Ninf 0xcfcfcfcfcfcfcfcfLL
#define Mem0(Cont) memset(Cont, 0, sizeof(Cont))
#define MemP(Cont) memset(Cont, 0x3f, sizeof(Cont))
#define MemN(Cont) memset(Cont, 0xcf, sizeof(Cont))
#define endl '\n'
#define int long long
#define YES cout << "YES\n"
#define NO cout << "NO\n"
#define Yes cout << "Yes\n"
#define No cout << "No\n"
#define yes cout << "yes\n"
#define no cout << "no\n"
//#define Files
using namespace std;

inline bool CheckMax(int& x, int y) { if(x < y) { x = y; return 1; } else return 0; }
inline bool CheckMin(int& x, int y) { if(x > y) { x = y; return 1; } else return 0; }
template <typename T> inline void Print(T x, char ed = '\n') { cout << x << ed; }
template <typename T> inline void Exit(T x, int cd = 0) { cout << x << endl; exit(cd); }

struct Nd { int d, v, p; };
struct Comp
{
	bool operator() (Nd& a, Nd& b)
		{ return a.d > b.d; }
};

int N, M, dis[155555], mc[155555];
vector <Nd> G[155555];
priority_queue <Nd, vector <Nd>, Comp> Q;

void Dijkstra(int s)
{
	MemP(dis); MemP(mc);
	dis[s] = mc[s] = 0; Q.push({0, s, 0});
	while(Q.size())
	{
		Nd p = Q.top(); Q.pop();
		int v = p.v; if(p.d > dis[v]) continue;
		if(dis[v] < p.d) continue;
		Rco(pe, G[v])
		{
			int u = pe.v, w = pe.d;
			if(dis[u] == dis[v]+w) mc[u] = pe.p;
			else if(CheckMin(dis[u], dis[v]+w))
				Q.push({dis[u], u}), mc[u] = pe.p;
		}
	}
}

signed main()
{
#ifdef Files
	freopen(".in", "r", stdin);
	freopen(".out", "w",stdout);
#endif
	ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);
	
	while(cin >> N >> M && N && M)
	{
		while(Q.size()) Q.pop();
		Rpp(i, N) G[i].clear();
		Rpp(i, M)
		{
			int u, v, w, p;
			cin >> u >> v >> w >> p;
			G[u].push_back({w, v, p});
			G[v].push_back({w, u, p});
		} Dijkstra(1); int res=0;
		Rpp(i, N) res += mc[i];
		cout << res << endl << flush;
	}

	return 0;
}

/*
 *	things to check
 *	1.  int overflow or long long memory need
 *	2.  recursion/array/binary search/dp/loop bounds
 *	3.  precision
 *	4.  special cases(n=1,bounds)
 *	5.  delete debug statements
 *	6.  initialize(especially multi-tests)
 *	7.  = or == , n or m ,++ or -- , i or j , > or >= , < or <=
 *	8.  keep it simple and stupid
 *	9.  do not delete, use // instead
 *	10. operator priority
 *	11. is there anything extra to output?
 *	12. THINK TWICE CODE ONCE, THINK ONCE DEBUG FOREVER
 *	13. submit ONCE, AC once. submit twice, WA forever
 *	14. calm down and you'll get good rank
 *	15. even a bit wrong scores zero
 *	16. ...
 **/

/*
 *	something to think about
 *	1. greedy? dp? searching? dp with matrix/ segment tree? binary search? ...?
 *	2. If it is difficult, why not the opposite?
 **/


