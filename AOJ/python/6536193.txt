const { findSourceMap } = require('module');

const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
    let n = si[0];
    // 入力された内容を数列に変換する.
    let nums = [];
    let imp = si[1].split(" ");
    for (let i = 0; i < n; i++) {
        nums[i] = Number(imp[i]);
    }
    let seq_A = new BinarySearch(nums);//

    // 入力された内容を一つ一つ検証する.
    // 1つでも含まれない要素がある場合, ansは0になる.
    let q = si[2];
    let seq_B = si[3].split(" ");
    let ans = 1;
    for (let i = 0; i < q; i++) {
        seq_B[i] = Number(seq_B[i]);
        if (seq_A.find(seq_B[i]) === 0) {
            ans = 0;
        }
    }

    so.write(ans + "\n");

}

class BinarySearch {
    constructor(array) {
        this.seq = array.slice();
        this.head = 0
        this.tail = array.length - 1;
        this.center = Math.floor((this.tail - this.head) / 2) + this.head;
    }
    find(x) {// sequence内を二分探索で探し, xが見つかったら1を返す. 見つからない場合, -1を返す.
        let left = this.head;
        let right = this.tail;
        while (left <= right) {
            let middle = Math.floor((left + right) / 2);
            //console.log(left + " " + middle + " " + right)// forDebug
            if (x === this.seq[middle]) {
                return 1;
            } else if (x < this.seq[middle]) {
                right = middle - 1;
            } else if (x > this.seq[middle]) {
                left = middle + 1;
            }
        }
        return 0;
    }

}
