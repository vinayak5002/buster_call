//Union by size

#include<iostream>
#include<vector>
#include<map>

struct UnionFind {
	vector<int> par;

	UnionFind() { }
    UnionFind(int n) : par(n, -1) { }
    void init(int n) { par.assign(n, -1); }

	int root(int x) {
		if(par[x] < 0) return x;
		else return par[x] = root(par[x]);
	}

	bool issame(int x, int y) {
		return root(x) == root(y);
	}

	/*
	void unite(int x, int y) {
		x = root(x); y = root(y);
		if(x == y) return;
		par[x] = y;
	}
	*/

	bool merge(int x, int y) {
		x = root(x); y = root(y);
		if(x == y) return false;
		if(par[x] > par[y]) swap(x, y); //merge technique
		par[x] += par[y];
		par[y] = x;
		return true;
	}

	int size(int x) {
		return -par[root(x)];
	}
};

int main() {
	int N, Q;
	cin >> N >> Q;
	UnionFind uf(N);
	for(int q = 0; q < Q; q++) {
		int com, x, y;
		cin >> com >> x >> y;
		if(com == 0) {
			uf.merge(x, y);
		} else {
			if(uf.issame(x, y)) cout << 1 << endl;
			else cout << 0 << endl;
		}
	}
}

//Union by rank
