/*
    ダイクストラ法による最短経路探索
*/

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using P = pair<int, int>;
#define sz(x) int(x.size())
#define rep(i,n) for (int i = 0; i < (n); ++i)
#define all(a) (a).begin(),(a).end()

constexpr int INF = 1001001001;

struct edge {int to, cost; };

// dijkstra algorithm
int n; // 頂点数
int m; // 辺数
vector<vector<edge>> g; // {重み, 行き先頂点}
vector<int> dist; // 各頂点への最小コスト

void dijkstra(int s) {
    priority_queue<P, vector<P>, greater<P>> pq; // {最小コスト, 頂点}
    fill(all(dist), INF);

    dist[s] = 0;
    pq.push({dist[s], s});

    while (sz(pq)) {
        P p = pq.top(); pq.pop();
        int v = p.second;
        
        if (dist[v] < p.first) continue;

        for (edge &e : g[v]) {
            if (dist[e.to] > dist[v] + e.cost) {
                dist[e.to] = dist[v] + e.cost;
                pq.push({dist[e.to], e.to});
            }
        }
    }
}

int main(){
    int s;
    cin >> n >> m >> s;
    g.resize(n);
    rep(i,m) {
        int v, u, w;
        cin >> v >> u >> w;
        // v--; u--;
        g[v].push_back(edge{u, w});
        // g[u].push_back(edge{v, w});
    }
    dist.resize(n);
    dijkstra(s);
    rep(i,n) {
        if (dist[i] < INF) cout << dist[i] << endl;
        else cout << "INF" << endl;
    }
} 
