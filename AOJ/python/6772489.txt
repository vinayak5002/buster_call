import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Scanner;

public class Main{
	public static void main(String[]args) {
		Scanner sc = new Scanner(System.in);
		int vertexNum = sc.nextInt();
		int edgeNum = sc.nextInt();
		
		UnionFind uf = new UnionFind(vertexNum);
		
		PriorityQueue<Edge> edges = new PriorityQueue<>(new Comparator<Edge>() {
			@Override
			public int compare(Edge o1, Edge o2) {
				return (int)o1.w > (int)o2.w ? 1 : o1.w == o2.w ? 0 : -1;
			}
			
		});
		
		for (int i = 0; i < edgeNum; i++) {
			int s = sc.nextInt();
			int t = sc.nextInt();
			int w = sc.nextInt();
			edges.add(new Edge(s, t, w));
		}
		
		int ans = 0;
		
		while (!edges.isEmpty()) {
			Edge edge = edges.poll();
			uf.root(edge.s);
			uf.root(edge.t);
			if (uf.same(edge.s, edge.t) == false) {
				ans += edge.w;
//				System.out.println(edge.toString() + " " + uf.parent.get(edge.s) + " " + uf.parent.get(edge.t));
//				for (Integer i : uf.parent) System.out.print(i + " ");
//				System.out.println();
//				System.out.println();
			}
			uf.unite(edge.s, edge.t);
		}
		
		System.out.println(ans);
	}
}

class Edge {
	int s;
	int t;
	int w;
	
	public Edge(int s, int t, int w) {
		this.s = s;
		this.t = t;
		this.w = w;
	}
	
	@Override
	public String toString() {
		return this.s + " " + this.t + " " + this.w;
	}
}

class UnionFind{
	ArrayList<Integer> parent;
	public UnionFind(int num) {
		this.parent = new ArrayList<>();
		for (int i = 0; i < num; i++) {
			this.parent.add(i);
		}
	}
	
	public int root(int n) {
		if (this.parent.get(n) == n) {
			return n;
		}else {
			return this.parent.set(n, root(this.parent.get(n)));
		}
	}
	
	public void unite(int x, int y) {
		int rx = this.root(x);
		int ry = this.root(y);
		if (rx == ry) {
			return;
		}
		this.parent.set(rx, ry);
	}
	
	public boolean same(int x, int y) {
		return this.parent.get(x) == this.parent.get(y);
	}
}




