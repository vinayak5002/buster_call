// #include<bits/stdc++.h>
#include <iostream>
#include <set>
#include <map>
#include <list>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <vector>
#include <string>
#include <bitset>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <utility>
#include <numeric>
#include <complex>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cassert>
#include <iterator>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <string>

using namespace std;

typedef long long ll;
#define rep(i, n) for(int i = 0; i < (n); i++)
#define pb push_back
const int maxn = 10000;
const int INF32 = 1050000000; // 1'050'000'000
const long long INF64 = 4000000000000000000; // 4'000'000'000'000'000'000
const int MOD7 = 1000000007; // 1'000'000'007
const int MOD9 = 1000000009; // 1'000'000'009
const int mod = MOD7;
const double EPS = 1e-9;

void ERROR(int num) { cout << "ERROR" << num << endl; }
ll gcd(ll a, ll b) { return b ? gcd(b, a%b) : a; }
int dx[8]={-1,0,1,0,1,1,-1,-1};
int dy[8]={0,-1,0,1,1,-1,1,-1};
//std::setprecision

bool is_prime(long long N) {
    if (N == 1) return false;
    for (long long i = 2; i * i <= N; ++i) {
        if (N % i == 0) return false;
    }
    return true;
}


// vector<vector<bool>> G(8, vector<bool>(8, 0));
set<pair<int, int>> memo1;
vector<bool> memo_arr(8,0);
set<pair<int, int>> memo2;


bool check(int x, int y){
    for(auto cor : memo1){
        if(abs(x-cor.first) == abs(y-cor.second) || 
            x == cor.first || y == cor.second ){
            return false;
        }
    }
    for(auto cor : memo2){
        if(abs(x-cor.first) == abs(y-cor.second) ||
            x == cor.first || y == cor.second ){
            return false;
        }
    }
    return true;
}



void dfs(int row){
    if(row == 8){
        // print
        // cout << "???????????" << endl;
        for(int i = 0; i < 8; i++){
            for(int j = 0; j < 8; j++){
                if(memo1.count({i,j})) cout << 'Q';
                else if(memo2.count({i,j})) cout << 'Q';
                else cout << '.';
            }
            cout << endl;
        }
    } else {
        if(!memo_arr[row]){ // 存在しない場合おいてよい
            for(int col = 0; col < 8; col++){
                if(check(row, col)) { // 置いていいかをチェック
                    memo2.insert({row, col});
                    dfs(row+1);
                    memo2.erase({row, col});
                }
            }
        } else {
            dfs(row+1);
        }
    }
}


int main(){
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    //===============================
    
    int n;
    cin >> n;
    for(int i = 0; i < n; i++) {
        int x, y;
        cin >> x >> y;
        memo1.insert({x,y});
        memo_arr[x] = true;
    }

    // for(int i = 0; i < 8; i++) 
    //     cout << memo_arr[i];
    // cout << endl;

    dfs(0);

}


