class Card():
    def __init__(self,alphabet,number):
        self.alphabet = alphabet
        self.number = number
    def __str__(self):
        return self.alphabet+str(self.number)

    def equal(self,other):
        return self.alphabet == other.alphabet and self.number == other.number


def BubbleSort(cards):
    for i in range(0,len(cards)):
        for j in range(len(cards)-1,i,-1):
            if(cards[j-1].number > cards[j].number):
                cards[j-1],cards[j] = cards[j],cards[j-1]

def SelectionSort(cards):
    for i in range(0,len(cards)-1):
        min_j = i
        for j in range(i+1,len(cards)):
            if(cards[min_j].number > cards[j].number):
                min_j = j
        cards[i],cards[min_j] = cards[min_j],cards[i]

def isStable(cards,sorted_cards):
    for i in range(1,len(cards)):
        if(sorted_cards[i-1].number == sorted_cards[i].number):
            hit1 = 0
            hit2 = 0
            for j in range(len(cards)):
                if(sorted_cards[i].equal(cards[j])):
                    hit1 = j
                if(sorted_cards[i-1].equal(cards[j])):
                    hit2 = j
            if(hit1 - hit2 < 0):
                return False 
    return True

n = int(input())
inputs = input().split()
cards1 = []
cards2 = []
cards3 = []
for input in inputs:
    cards1.append(Card(alphabet=input[0],number=int(input[1])))
    cards2.append(Card(alphabet=input[0],number=int(input[1])))
    cards3.append(Card(alphabet=input[0],number=int(input[1])))

BubbleSort(cards1)
SelectionSort(cards2)

for i in range(len(cards1)-1): print(cards1[i],end=" ")
print(cards1[-1])
if(isStable(cards3,cards1)): print("Stable")
else:print("Not Stable")
for i in range(len(cards2)-1): print(cards2[i],end=" ")
print(cards2[-1])
if(isStable(cards3,cards2)): print("Stable")
else:print("Not stable")

