// 連鎖消滅パズル
// 2022 04 30
#include <bits/stdc++.h>
using namespace std;
// using ll = long long;
// #define sz(x) int(x.size())
#define rep(i,n) for (int i = 0; i < (n); ++i)
// #define all(a) (a).begin(),(a).end()

// template<class t,class u> bool chmax(t&a,u b){if(a<b){a=b;return true;}else return false;}
// template<class t,class u> bool chmin(t&a,u b){if(b<a){a=b;return true;}else return false;}

// const int INF = 1001001001;
// const ll LINF = 1001001001001001001ll;
// const int dx[] = {1, 0, -1, 0};
// const int dy[] = {0, 1, 0, -1};

bool solve() {
    int H;
    cin >> H;
    if (H == 0) return false;

    vector<vector<int>> p(5, vector<int>(H));
    rep(i,H) rep(j,5) cin >> p[j][i];
    rep(j,5) reverse(p[j].begin(), p[j].end());
    
    vector<queue<int>> qs(5);
    rep(j,5) rep(i,H) qs[j].push(p[j][i]);
    int score = 0;

    while (1) {
        bool changed = false;
        vector<queue<int>> nqs(5);
        while (1) {
            if (qs[2].empty()) break;
            int target = qs[2].front();
            int cnt = 1;
            if (!qs[1].empty() && qs[1].front() == target) {
                cnt++;
                if (!qs[0].empty() && qs[0].front() == target) {
                    cnt++;
                }
            }
            if (!qs[3].empty() && qs[3].front() == target) {
                cnt++;
                if (!qs[4].empty() && qs[4].front() == target) {
                    cnt++;
                }
            }
            if (cnt >= 3) {
                changed = true;
                score += target;
                if (qs[1].empty() || qs[1].front() != target) {
                    nqs[1].push(qs[1].front());
                    nqs[0].push(qs[0].front());
                } else if (qs[0].empty() || qs[0].front() != target) {
                    nqs[0].push(qs[0].front());
                    score += target;
                } else {
                    score += target * 2;
                }
                if (qs[3].empty() || qs[3].front() != target) {
                    nqs[3].push(qs[3].front());
                    nqs[4].push(qs[4].front());
                } else if (qs[4].empty() || qs[4].front() != target) {
                    nqs[4].push(qs[4].front());
                    score += target;
                } else {
                    score += target * 2;
                }
            } else {
                rep(j,5) if (!qs[j].empty()) nqs[j].push(qs[j].front());
            }
            rep(j,5) qs[j].pop();
        }
        qs = nqs;
        if (!changed) break;
    }
    // rep(i,H) rep(j,5) cerr << p[j][i] << (j == 4 ? '\n' : ' ');
    cout << score << endl;
    return true;
}

int main(){
    while(solve()){}
} 
/* 

1
6 9 9 9 9
5
5 9 5 5 9
5 5 6 9 9
4 6 3 6 9
3 3 2 9 9
2 2 1 1 1
10
3 5 6 5 6
2 2 2 8 3
6 2 5 9 2
7 7 7 6 1
4 6 6 4 9
8 9 1 1 8
5 6 1 8 1
6 8 2 1 2
9 6 3 3 5
5 3 8 8 8
5
1 2 3 4 5
6 7 8 9 1
2 3 4 5 6
7 8 9 1 2
3 4 5 6 7
3
2 2 8 7 4
6 5 7 7 7
8 8 9 9 9
0

*/
