import sys
import math
from collections import defaultdict, deque

sys.setrecursionlimit(10 ** 6)
stdin = sys.stdin

INF = float('inf')

ni = lambda: int(ns())
na = lambda: list(map(int, stdin.readline().split()))
ns = lambda: stdin.readline().strip()

V, E = na()
G = [[INF] * V for _ in range(V)]
for _ in range(E):
    s, t, d = na()
    s -= 1
    t -= 1
    G[s][t] = d

dp = [[INF] * (V + 1) for _ in range(1 << V)]
dp[0][0] = 0

for S in range(1 << V):
    for v in range(V):
        for u in range(V):
            if S != 0 and not (S & 1 << u):
                continue
            if (S & 1 << v) == 0 and v != u:
                dp[S | 1 << v][v] = min(dp[S | 1 << v][v], dp[S][u] + G[u][v])


if dp[(1 << V) - 1][0] != INF:
    print(dp[(1 << V) - 1][0])
else:
    print(-1)
