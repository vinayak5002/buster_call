/**
 * @file GRL_6_A.cpp
 * @author skawaguc
 * @brief
 * https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=GRL_6_A&lang=jp
 * @version 0.1
 * @date 2022-06-26
 *
 * @copyright Copyright (c) 2022
 *
 */
#define NDEBUG
#include <cassert>
#include <iostream>
#include <vector>

using namespace std;
#define rep2(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
#define rep(i, b) rep2(i, 0, b)
#define rrep2(i, b, a) for (int i = (int)(b); i >= (int)(a); i--)
#define rrep(i, b) rrep2(i, b, 0)
typedef long long ll;

int V, E;
vector<int> u, v, c;

void get_input();
void solve();

constexpr int INF = 1e8;
// 辺を表す構造体（行き先、容量、逆辺）
struct edge {
  int to, cap, rev;
};
// グラフの隣接リスト表現
vector<vector<edge>> G;
// DFSですでに調べたかのフラグ
vector<bool> used;

void add_edge(int from, int to, int cap);
int dfs(int v, int t, int f);
int max_flow(int s, int t);

/**
 * @brief メイン処理.
 *
 * @return int 0
 */
int main() {
  cin.tie(0);
  ios::sync_with_stdio(false);

  // 標準入力を取得
  get_input();

  // 求解処理
  solve();

  return 0;
}

/**
 * @brief 標準入力を取得する.
 *
 */
void get_input() {
  cin >> V >> E;
  u.resize(E);
  v.resize(E);
  c.resize(E);
  rep(i, E) cin >> u[i] >> v[i] >> c[i];
}

/**
 * @brief 求解処理.
 *
 */
void solve() {
  G.resize(V, vector<edge>());
  used.resize(V);
  rep(i, E) add_edge(u[i], v[i], c[i]);
  const int ans = max_flow(0, V - 1);
  cout << ans << endl;
}

// fromからtoへ向かう容量capの辺をグラフに追加する
void add_edge(int from, int to, int cap) {
  G[from].push_back((edge){to, cap, (int)G[to].size()});
  G[to].push_back((edge){from, 0, (int)G[from].size() - 1});
}

// 増加パスをDFSで探す
int dfs(int v, int t, int f) {
  if (v == t) return f;
  used[v] = true;
  for (edge &e : G[v]) {
    if (!used[e.to] && e.cap > 0) {
      const int d = dfs(e.to, t, min(f, e.cap));
      if (d > 0) {
        e.cap -= d;
        G[e.to][e.rev].cap += d;
        return d;
      }
    }
  }
  return 0;
}

// sからtへの最大流を求める
int max_flow(int s, int t) {
  int flow = 0;
  while (true) {
    fill(used.begin(), used.end(), false);
    const int f = dfs(s, t, INF);
    if (f == 0) return flow;
    flow += f;
  }
}

