// https://algo-logic.info/union-find-tree/

#include <iostream>
#include <cmath>
#include <vector>
#include <iterator>
#include <algorithm>

class DisjointSet{
    private:
        std::vector<int> rank, root;
    public:
        DisjointSet(int size = 0){
            rank.resize(size);
            root.resize(size);
            for(int i=0; i<size; i++) makeSet(i);
        }
        void makeSet(int x){
            this->root[x] = x;
            this->rank[x] = 0;
        }
        void unite(int x, int y){
            link(findSet(x), findSet(y));
        }
        bool same(int x, int y){
            return (findSet(x) == findSet(y));
        }
        void link(int x, int y){
            if(this->rank[x] > this->rank[y]){
                this->root[y] = x;
            }else{
                this->root[x] = y;
                if(this->rank[x] == this->rank[y]){
                    this->rank[y]++;
                }
            }
        }
        int findSet(int x){
            if(x != this->root[x]){
                this->root[x] = findSet(this->root[x]);
            }
            return this->root[x];
        }

};

int main(){
    int n, q, com, x, y;
    std::cin >> n >> q;
    DisjointSet ds = DisjointSet(n);

    for(int i = 0 ; i < q ; i++){
        std::cin >> com >> x >> y;
        if(com == 0){ds.unite(x,y);}
        else{
            if(ds.same(x,y)){std::cout << 1 << std::endl;}
            else{std::cout << 0 << std::endl;}
        }
    }

    return 0;
}
