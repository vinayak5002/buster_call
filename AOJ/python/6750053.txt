import sys
class Graph():
    def __init__(self,size):
        self.size = size
        self.v = []
        self.e = []
        for i in range(size): self.v.append(None)
    def addVertex(self,v):
        if(self.v[v.id] == None):
            self.v[v.id] = v
            return v
        else:
            self.v[v.id].id = v.id
            self.v[v.id].cost = v.cost
            for e in v.edge:
                self.v[v.id].edge.append(e)
            return self.v[v.id]
        
    def addEdge(self,v1,v2,cost):
        v1 = self.addVertex(v1)
        v2 = self.addVertex(v2)
        e = Edge(v1,v2,cost)
        v1.edge.append(e)
        v2.edge.append(e)
        for i in range(len(self.e)):
            if(cost < self.e[i].cost):
                self.e.insert(i,e)
                return
        self.e.append(e)
    def getVertex(self):
        return self.v
    def getEdge(self):
        return self.e
    def getAdj(self,v):
        adj = []
        for e in v.edge:
            if(v == e.v1): adj.append(e.v2)
            elif(v == e.v2): adj.append(e.v1)
        return adj
    def existEdge(self,v1,v2):
        for e1 in v1.edge:
            for e2 in v2.edge:
                if(e1 == e2):
                    return e1
                
    def setMinCost(self,start):
        self.start = start
        self.finished = []
        self.notFinished = []
        for v in self.v:
            self.notFinished.append(v)
            v.cost = sys.maxsize
        self.start.cost = 0
        while(self.notFinished != []):
            self.dijkstra()
        del self.finished
        del self.notFinished
    def dijkstra(self):
        min_i = 0
        for i in range(len(self.notFinished)):
            if(self.notFinished[min_i].cost > self.notFinished[i].cost):
                min_i = i
        min_v = self.notFinished[min_i]
        
        self.b = self.notFinished[min_i]
        self.getAdj(self.notFinished[min_i])
        
        for adj_v in self.getAdj(min_v):
            e = self.existEdge(min_v,adj_v)
            if(e != None):
                newcost = min_v.cost + e.cost
                if(adj_v.cost > newcost):
                    adj_v.cost = newcost
        self.notFinished.pop(min_i)
        self.finished.append(min_v)
            
                
            
                
            
class Vertex():
    def __init__(self,id):
        self.id = id
        self.cost = 0
        self.edge = []
    def __str__(self):
        return str(self.id) + " " + str(self.cost)
    def __repr__(self):
        return str(self.id) + " " + str(self.cost)
    def __int__(self):
        return self.id

class Edge():
    def __init__(self,v1,v2,cost):
        self.v1 = v1
        self.v2 = v2
        self.cost = cost
    def __str__(self):
        return "[v1,v2]=["+str(self.v1.id)+","+str(self.v2.id)+"] cost="+str(self.cost)

n = int(input())
graph = Graph(n)
for i in range(n):
    inp = list(map(int,input().split()))
    id = inp[0]
    adj_id = inp[2::2]
    cost = inp[3::2]
    for j in range(inp[1]):
        graph.addEdge(Vertex(id),Vertex(adj_id[j]),cost[j])

graph.setMinCost(start=graph.v[0])
for v in graph.getVertex():
    print(v)
    
    


