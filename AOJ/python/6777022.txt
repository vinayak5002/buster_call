INF = 2**31 - 1
n, q = map(int, input().split())

N = 2 
while N < n :
    N *= 2 
d = [INF for _ in range(0, 2 * N - 1)]

def update(k, x): 
    k = k + N - 1 # Index of node in the tree 
    d[k] = x 
    # update its parent 
    while k > 0: 
        k = (k - 1) // 2 
        d[k] = min(d[k * 2 + 1], d[k * 2 + 2])

def query(a, b, k, l, r): 
    if r <= a or b <= l: 
        return INF 
    if a <= l and r <= b: 
        return d[k]
    vl = query(a, b, k * 2 + 1, l, (l + r) // 2)
    vr = query(a, b, k * 2 + 2, (l + r) // 2, r)
    return min(vl, vr) 

def find_min(a, b): 
    return query(a, b + 1, 0, 0, N)

for _ in range(q): 
    p = tuple(map(int, input().split()))
    if p[0] == 0: 
        update(p[1], p[2])
    elif p[0] == 1:
        print(find_min(p[1], p[2]))
