import itertools
import sys
import math
import heapq
from collections import deque, Counter, defaultdict
from sys import stdin
import copy
import bisect
from decimal import Decimal, ROUND_HALF_UP
# from atcoder.dsu import DSU

MOD = 10 ** 9 + 7
int1 = lambda x: int(x) - 1
stinput = lambda: stdin.readline()[:-1]
ii = lambda: int(stinput())  # int input
mi = lambda: map(int, stdin.readline().split())  # map input (int)
li = lambda: list(mi())  # list input (int)
mi1 = lambda: map(int1, stdin.readline().split())  # map input (int)-1
li1 = lambda: list(mi1())  # list input (int)-1
mis = lambda: map(str, stdin.readline().split())  # map input (string)
lis = lambda: list(mis())  # list input (string)

while True:
    N = ii()
    if N == 0:
        break
    ans = 0
    cnt = 0
    s_li = []
    for i in range(N):
        s_li.append(input())
    che_li = [5,7,5,7,7]
    for j in range(N-4):
        i = 0
        tmp = 0
        flag = True
        for k in range(N):
            if j+k >= N:
                break
            tmp += len(s_li[j+k])
            if i == 4 and tmp == che_li[-1]:
                print(j+1)
                flag = False
                break
            if tmp == che_li[i]:
                tmp = 0
                i += 1
        if not flag:
            break
            
            


