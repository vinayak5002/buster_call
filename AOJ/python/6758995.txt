class WeightedUnionFind
  attr_reader :parent, :rank, :diff_weight

  def initialize(n)
    @parent = Array.new(n) { |i| i }
    @rank = Array.new(n, 0)
    @diff_weight = Array.new(n, 0)
  end

  def root(x)
    return x if x == parent[x]
    res = root(parent[x])
    diff_weight[x] += diff_weight[parent[x]]
    parent[x] = res
  end

  def weight(x)
    root(x)
    diff_weight[x]
  end

  def same?(x, y)
    root(x) == root(y)
  end

  def unite(x, y, w)
    w += weight(x)
    w -= weight(y)
    x = root(x)
    y = root(y)
    return false if x == y
    if rank[x] < rank[y]
      x, y = y, x
      w = -w
    end
    rank[x] += 1 if rank[x] == rank[y]
    parent[y] = x
    diff_weight[y] = w
    true
  end

  def diff(x, y)
    weight(y) - weight(x)
  end
end

n, q = gets.split.map(&:to_i)
wuf = WeightedUnionFind.new(n)
q.times do
  t, l, r, d = gets.split.map(&:to_i)
  if t == 0
    wuf.unite(l, r, d)
  else
    if wuf.same?(l, r)
      puts wuf.diff(l, r)
    else
      puts '?'
    end
  end
end

