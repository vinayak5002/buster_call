
from heapq import heappush, heappop


V,E,r = map(int,input().split())

edge_L = [[] for _ in range(V)]

for i in range(E):
	s,t,d = map(int,input().split())
	edge_L[s].append([t,d])

# V: 頂点数
# g[v] = {(w, cost)}:
#     頂点vから遷移可能な頂点(w)とそのコスト(cost)
# r: 始点の頂点
 

INF = 10**10

def dijkstra(N, G, s):
    dist = [INF] * N
    que = [(0, s)]
    dist[s] = 0
    while que:
        c, v = heappop(que)
        if dist[v] < c:
            continue
        for t, cost in G[v]:
            if dist[v] + cost < dist[t]:
                dist[t] = dist[v] + cost
                heappush(que, (dist[t], t))
    return dist

ans_L = dijkstra(V, edge_L, r )
for length in ans_L:
    print(length if length!=INF else 'INF')
