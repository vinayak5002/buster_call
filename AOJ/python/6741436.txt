//include
//------------------------------------------
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include<queue>
#include<complex>
using namespace std;
//conversion
//------------------------------------------
inline long long toint(string s) {long long v; istringstream sin(s);sin>>v;return v;}
template<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}
//math
//-------------------------------------------
template<class T> inline T sqr(T x) {return x*x;}
//typedef
//------------------------------------------
typedef long long ll;
typedef long long LL;
typedef vector<int > vi;
typedef vector<long long > VLL;
typedef vector<long long > vll;
typedef vector<string > ves;
typedef vector<char > vech;

typedef pair<long long , long long> pll;
typedef pair<long long , long long> PLL;
typedef map<ll , ll >mll;
typedef map<int , int >mii;
typedef map<char , int >mci;
typedef map<char , ll >mcl;
typedef vector<pair<ll , ll> > vpll;

//container util
//------------------------------------------
#define ALL(a)  (a).begin(),(a).end()
#define RALL(a) (a).rbegin(), (a).rend()
#define VECMAX(x) *max_element(ALL(x))
#define VECMIN(x) *min_element(ALL(x))
#define PB push_back
#define MP make_pair
#define SZ(a) int((a).size())
#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)
#define EXIST(s,e) ((s).find(e)!=(s).end())
#define SORT(c) sort((c).begin(),(c).end())
//repetition
//------------------------------------------
#define FOR(i,a,b) for(long long i=(a);i<(b);++i)
#define REP(i,n)  FOR(i,0,n)
//#define MULTIPLE(i,n,k) for(int i = (k) ; i<(n) ; i+=k+1)//倍数ループ
//constant
//------------------------------------------
const double EPS = 1e-10;
#define debug(x) cerr << #x << " = " << (x) << " (L" << __LINE__ << ")" << " " << __FILE__ << endl;
const double PI  = acos(-1.0);
//clear memory
#define CLR(a) memset((a), 0 ,sizeof(a))
//debug




























/*

    splitした後はmergeを忘れずに！！(それかSplitした頂点のrootを覚えておこう)

    頂点にアクセスしたら、その頂点をsplayするのを忘れるな！！
    頂点をいじったらsplayの後、Updateするのを忘れないで(順番も注意)


    rootを頂点とする部分木において{
        split(l,root) := lで分割

        merge(l_root , r_root) := 頂点がl_root ,r_rootであるような部分木を連結

        insert_sub(ind,NODE,root) := ind番目にNODEが挿入される

        Delete_sub(ind ,root) := ind番目を削除(返り値はfirstが新しいroot , secondが削除したNode)

    }
    これらを駆使し、様々な操作を実装可能

    reverse(l,r)で[l,r)を反転できるが、verifyできてないので注意
    遅延評価でrange_add,range_updateもできる


*/
template<class T>
class LazySplayTree{
    public:


    /*
        ------------------------------------------------------------------------------------------------------------------------------------------------------------
        ------------------------------------------------------------------------------------------------------------------------------------------------------------
            SplayTreeの、Nodeのデータ構造。
            SplayTreeでは、Glaphの配列上で操作のやり取りをするのではなく、
            SplayNodeというデータ構造に持たせたデータでやり取りをする
        ------------------------------------------------------------------------------------------------------------------------------------------------------------   
        ------------------------------------------------------------------------------------------------------------------------------------------------------------

    */
    
    struct SplayNode{

        SplayNode *parent;//親ノード
        SplayNode *left;//左の子ノード
        SplayNode *right;//右の子ノード

        T Value;//値(普通、頂点には値や重みが割り当てられることが多い)
        T Min,Max,Sum;//部分木のうち、値の最大、最小、和

        /*
            この頂点の部分木に対応する区間に対する操作を行うかどうかをlazy(遅延)なフラグで持っておき、
            この頂点にアクセスされた時にtrueなら操作を行い、左右の子に伝播させる

            reverse : 左右の子を反転させる(左右の子に伝播させることで、結果的に対応する区間全てが反転する)
            add : 部分木が対応する区間のValueすべてに +x する
            update : 部分木が対応する区間のValueをすべて x にする

        */
        bool reverse_flag_lazy = false;
        bool add_flag_lazy = false;
        bool update_flag_lazy = false;

        //遅延中の加算クエリ(の値)
        T lazy_add = 0;
        //遅延中の更新クエリ(の値)
        T lazy_update = 0;

        int SubTreeSize = 1;//1は初期化値(自分自身)


        SplayNode(){
            parent = nullptr;
            left = nullptr;
            right = nullptr;
        }
        SplayNode(T val){
            parent = nullptr;
            left = nullptr;
            right = nullptr;
            Value = val;
            Min = val;
            Max = val;
            Sum = val;
        }


        bool isExist(SplayNode *Nd){
            if(Nd!=nullptr)return true;
            else return false;
        } 



        /*
            ある地点を回転させる
            回転時、自分自身(this)と親(Parent)の位置関係が逆になる
            よって、
            下から　Parent　⇨  this の順番でupdateする

            lazy作用については結構ややこしい図を書いて理解しないといけないが、とりあえずは
            回転を行う前にthisから遅延評価を降ろして、
            回転後にParent(回転後は子)のlazy作用値をthisに移動(swapで解決)
            その後Parentの左右の子の遅延評価を降ろし、Parent->thisの順にupdate()
            ただし、直接swapしているので最後のthis->updateは不要
        */
        void rotate(){

            SplayNode *Parent , *GrandParent , *Child;
            Parent = this->parent;
            GrandParent = Parent->parent;
            Child = nullptr;

            if(isExist(Parent) == false){
                return;
            }
            
            this->eval();


            //元の親に対する位置で場合分け
            if(Parent->left == this){
                Child = this->right;//Childはnullptrかもしれない
                this->right = Parent;
                Parent->left = Child;

            }else if(Parent->right == this){
                Child = this->left;
                this->left = Parent;
                Parent->right = Child;

            }

            if(isExist(GrandParent)){
                //GrandParentのどちらの辺なのかで場合分け
                if(Parent == GrandParent->left){
                    GrandParent->left = this;

                }else if(Parent == GrandParent->right){
                    GrandParent->right = this;
                    
                }
            }

            //GrandParentがnullptrの場合でも代入OK
            this->parent = GrandParent;


            //親と位置を入れ替えるので
            Parent->parent = this;



            //Childは移動するので。
            if(isExist(Child))Child->parent = Parent;


            /*
                Nodeの持つ情報をupdateしないといけないが、順番に注意！！
                ChildはChild以下の部分木が変化してないので何もしなくてOK
                GrandParentは、部分木の中の順番が変わったけど、集合としては変わってないので何もしなくてOK
                Parentと自分自身(this)は順番が変わって、部分木の内容も変わったので、
                下から　Parent　⇨  this の順番でupdateする

                lazy作用については結構ややこしい図を書いて理解しないといけないが、とりあえずは
                回転を行う前にthisから遅延評価を降ろして、
                その後Parentの左右の子の遅延評価を降ろし、Parent->thisの順にupdate()　

                ちなみに、この時すでにthisの遅延評価は何も残っていない(さっきevalしたから)ので、
                遅延評価をswapしてもParentの方には余計な遅延評価は入らない
            */

            if(isExist(Parent->left))Parent->left->eval();
            if(isExist(Parent->right))Parent->right->eval();
            
            Parent->update(false);
            this->update();
            

            

            return;

        }







        /*
            自分の親から見た自分の位置
            0 -> 親がそもそもいない or 例外の場合
            1 -> 親から見て左の子の場合
            2 -> 親から見て右の子の場合 
        */
        int state(){
            if(isExist(this->parent)== false){
                return 0;
            }else{
                if(this->parent->left == this){
                    return 1;
                }else if(this->parent->right == this){
                    return 2;
                }else {
                    return 0;
                }
            }
        }







        /*
            あるNodeを回転を駆使し一番上まで持っていく
            この時、回転する順番に注意
        */
        void splay(){

            if(isExist(this) == false)return;
            
            while(isExist(this->parent)){
                if(isExist(this->parent->parent)==false){
                    //(自分のGrandParentがいない場合、rotateは一回のみ)
                    this->rotate();
                    return;


                //それ以外の場合、(自分、親、親の親)の位置関係が大事
                }else if(this->state() == this->parent->state()){
                    //GrandParentからの道が(右、右)or (左、左)の場合
                    //GrandParentを一つ下に下ろして、自分を上げる
                    this->parent->rotate();
                    this->rotate();

                }else{
                    //それ以外の場合、単純に自分を2回上に上げれば良い
                    this->rotate();
                    this->rotate();
                }
            }



            return;
        }   






        /*
            サイズなど、Nodeの持っている情報をupdateする(順番大事)
            evaluate = trueなら遅延評価を下に伝播
            
        */
        void update(bool evaluate = true){
            if(isExist(this) == false)return;
            if(isExist(this->left) && evaluate)this->left->eval();
            if(isExist(this->right) && evaluate)this->right->eval();


            this->SubTreeSize = 1;
            this->Min = this->Value;
            this->Max = this->Value;
            this->Sum = this->Value;


            if(isExist(this->left)){
                this->SubTreeSize += this->left->SubTreeSize;
                if(this->left->Min < this->Min)this->Min = this->left->Min;
                if(this->left->Max > this->Max)this->Max = this->left->Max;
                this->Sum += this->left->Sum;
            }

            if(isExist(this->right)){
                this->SubTreeSize += this->right->SubTreeSize;
                if(this->right->Min < this->Min)this->Min = this->right->Min;
                if(this->right->Max > this->Max)this->Max = this->right->Max;
                this->Sum += this->right->Sum;

            }

            if(evaluate)this->eval();//

            

            return;
        }

        /*
            この頂点にアクセスされるたびに、各flagがtrueなら遅延させていた処理を実行し、
            左右の子にflagを伝播する
            各処理の概要
            reverse : 自分の左右の子を入れ替えて、左右の子に遅延伝播(最終的に区間全体が反転する)
            update : 自分自身のValue,Min,Maxをlazy_updateに変更し、SumにSubTreeSize*lazy_updateに変更
            add : 自分自身のValue,Min,Maxにlazy_addを加算し、SumにSubTreeSize*lazy_addを加算

            特に、回転を行う際は伝播の仕方に要注意

            また、updateクエリが来た際は、それ以前の(add , update)クエリは全て無効になるので、
            {
                lazy_add = 0;
                lazy_update = 更新する値
            }
            とし、updateクエリを左右の子に伝播させる時も、左右の子のlazy_addを0にして、lazy_updateを更新する

            クエリの処理の順番は、
            update -> addの順番で行う(上記の理由)

            なお、rotateでのMin,Max,valueなどの更新に対応するため、
            頂点xにアクセスし、左右に伝播させた時点でx->left,x->rightの持つ値を更新しておく

        */
        void eval(){


            if(this->reverse_flag_lazy == true){
                swap(this->left , this->right);
                //下に伝播
                if(isExist(this->left))this->left->reverse_flag_lazy = !(this->left->reverse_flag_lazy);
                if(isExist(this->right))this->right->reverse_flag_lazy = !(this->right->reverse_flag_lazy);
                this->reverse_flag_lazy = false;
            }

            SplayNode *Left = this->left;
            SplayNode *Right = this->right;

            //updateクエリの処理が先
            if(this->update_flag_lazy == true){
                this->Value = this->lazy_update;
                this->Min = this->lazy_update;
                this->Max = this->lazy_update;
                this->Sum = ( this->lazy_update )* (this->SubTreeSize);
                if(isExist(Left)){
                    Left->update_flag_lazy = true;
                    Left->lazy_update = this->lazy_update;
                    Left->add_flag_lazy = false;//これまでの加算クエリは無駄になるから
                    Left->lazy_add = 0;
                }
                if(isExist(Right)){
                    Right->update_flag_lazy = true;
                    Right->lazy_update = this->lazy_update;
                    Right->add_flag_lazy = false;//これまでの加算クエリは無駄になるから
                    Right->lazy_add = 0;
                }
                //伝播したらフラグを折る
                this->lazy_update = 0;
                this->update_flag_lazy = false;
            }

            if(this->add_flag_lazy == true){
                this->Value += this->lazy_add;
                this->Min += this->lazy_add;
                this->Max += this->lazy_add;
                this->Sum += ( this->lazy_add )* (this->SubTreeSize);
                if(isExist(Left)){
                    Left->add_flag_lazy = true;//これまでの加算クエリは無駄になるから
                    Left->lazy_add += this->lazy_add;
                }
                if(isExist(Right)){
                    Right->add_flag_lazy = true;//これまでの加算クエリは無駄になるから
                    Right->lazy_add += this->lazy_add;
                }
                //伝播したらフラグを折る
                this->lazy_add = 0;
                this->add_flag_lazy = false;
            }
        }   

    };



    /*
        ------------------------------------------------------------------------------------------------------------------------------------------------------------
        ------------------------------------------------------------------------------------------------------------------------------------------------------------
            ここからやっとSplayTreeに載せる関数たちの出番
            rootを根とする部分木において、
              split(ind,root) , merge(l_root, r_root) , delete_sub(ind,root) , insert_sub()　など
            これらは主にclass内で使われる。
            classの外で使う関数として、
                Delete , insert, RangeSumQuery , shiftなどが想定される
        ------------------------------------------------------------------------------------------------------------------------------------------------------------   
        ------------------------------------------------------------------------------------------------------------------------------------------------------------

    */



    //これは、Nodeを管理する配列のサイズで、木のサイズではない(変更しないので、あらかじめ大きめにとっておく)
    int Size = 0;

    //この木のroot,splitした後はmergeして戻す！！rootが迷子にならないように！！
    SplayNode *Root = nullptr;

    //エラー時の返り値
    T initializer = 0;



    LazySplayTree(){

    }

    LazySplayTree(int size_){
  
    }

    bool isExist(SplayNode *Nd){
        if(Nd==nullptr){
            return false;
        }else{
            return true;
        }
    }




    /*
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        ここからは、クラス内で動かす関数たちです。俗にいうブラックボックスです。
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    */


    private:







    /*
        rootを根とする部分木において、
        indexを左からの0-indexとすると、

        求めたいindexになるまで降りていく

    */
    SplayNode *getNode(int index , SplayNode *root){
        
        if(isExist(root)==false)return root;
        

        SplayNode *now = root;

        while(1){
            now->eval();
            //left_sizeに代入する前にeval。（後でevalするとleft_sizeの値が変わるから）
            int left_size = 0;
            if(isExist(now->left)){
                left_size = now->left->SubTreeSize;
            } 

            if(index < left_size){
                now = now->left;
            }else if(index == left_size){
                now->splay();
                break;
            }else if(index > left_size){
                now = now->right;
                index = index - left_size-1;
            }

        }
        

        return now;
    }













    /*
        それぞれ、leftrootとrightrootが根であるような部分木をくっつける

        splitした後、これをしてまたsplitしたものをくっつける
        splitしたまま放置すると分割された木のrootが行方不明になりそう
        leftとrightの順番大事！！
    */
    SplayNode *merge(SplayNode *leftRoot , SplayNode *rightRoot){

       
        if(isExist(leftRoot) == false)return rightRoot;//右のみあり
        if(isExist(rightRoot) == false )return leftRoot;//左のみあり


        leftRoot = getNode(leftRoot->SubTreeSize-1 , leftRoot);
        leftRoot->right = rightRoot;
        rightRoot->parent = leftRoot;
        leftRoot->update();
        
        
        return leftRoot;
    }









    /*
         rootを根とする部分木において、
        左からleftnum番目の頂点で左右にsplit。
        splitした後はmergeしないと,splitした木の頂点が行方不明になりそう
    */
    std::pair<SplayNode*,SplayNode*> split(int leftnum, SplayNode *root){

        if(leftnum<=0)return std::make_pair(nullptr , root);

        if(leftnum >= root->SubTreeSize)return std::make_pair(root, nullptr);



        root = getNode(leftnum , root);
        
        SplayNode *leftRoot , *rightRoot;

        leftRoot = root->left; 
        
        rightRoot = root; 


        if(isExist(rightRoot))rightRoot->left = nullptr;
        
        if(isExist(leftRoot))leftRoot->parent = nullptr; 
        
        
        
        rightRoot->update();
        leftRoot->update();
        

        return std::make_pair(leftRoot,rightRoot);

    }





    /*
        rootを根とする部分木において、
        indexの場所を切り離して、NODEを追加して元に戻す(merge)
    */
    SplayNode  *insert_sub(int index , SplayNode *NODE , SplayNode *root){
        if(isExist(root) == false){
            root=NODE;
            Size=1;
            return root;
        }
        if(Size<index || index<0)return root;

        std::pair<SplayNode*,SplayNode*> Trees = split(index,root);

        SplayNode *leftRoot = Trees.first;
        SplayNode *rightRoot = Trees.second;
        Size++;

        return merge(merge(leftRoot , NODE),rightRoot);
    }









    /*  
        rootを根とする部分木において、
        左からindexの場所を削除して、両端をくっつける
        firstは消したやつ以外をmergeした時のroot
        secondは消したSplayNode
    */
    std::pair<SplayNode*,SplayNode*> Delete_sub(int index , SplayNode *root){
        
        if(isExist(root) == false){
            
            return std::make_pair(root,root);
        }
        if(index<0 || index >= Size){

            return std::make_pair(root,root);
        }
        
        if(Size == 1){

            Size = 0;
            root = nullptr;
            return std::make_pair(nullptr,nullptr);
        }

        root = getNode(index,root);

        SplayNode *leftRoot = root->left;
        SplayNode *rightRoot = root->right;

        if(isExist(leftRoot))leftRoot->parent = nullptr;
        if(isExist(rightRoot))rightRoot->parent = nullptr;
        root->left = nullptr;
        root->right = nullptr;

        Size--;
        
        root->update();
        
        return std::make_pair(merge(leftRoot,rightRoot) , root );
    }




    /*
        rootを根とする部分木の[l,r)区間を削除
    */
    SplayNode* RangeDelete_sub(int l , int r , SplayNode *root){
 
        SplayNode *leftRoot , *centerRoot , *rightRoot; 
        r--;//半開区間なので
 
        std::pair<SplayNode*,SplayNode*>  tmp = split(r+1,root);
        rightRoot = tmp.second;
        
        tmp = split(l,tmp.first);
        leftRoot = tmp.first;
        centerRoot = tmp.second;

        Size-=centerRoot->SubTreeSize;

        return merge(leftRoot,rightRoot);
    }
 
 




    /*
        rootを根とする部分きにおいて、
        0-indexの区間[l,r)を右シフト(右端は左端へ)する
    */
    SplayNode *shift_right_sub(int l , int r , SplayNode *root ){
        r--;//半開区間なので

        std::pair<SplayNode*,SplayNode*> tmp = Delete_sub(r,root);
        root = tmp.first;
        SplayNode *N = tmp.second;

        return insert_sub(l,N,root);

    }



    /*
        rootを根とする部分きにおいて、
        0-indexの区間[l,r)を左シフト(左端は右端へ)する
    */
    SplayNode *shift_left_sub(int l , int r , SplayNode *root ){
        r--;//半開区間なので

        std::pair<SplayNode*,SplayNode*> tmp = Delete_sub(l,root);
        root = tmp.first;
        SplayNode *N = tmp.second;

        return insert_sub(r,N,root);

    }









    /*
        rootを根とする部分木の[l,r)の区間取得クエリ
        modeが 0->Min, 1->Max ,2->Sum 
    */
    std::pair<SplayNode*,T> RangeQuery_sub(int l , int r , int mode , SplayNode *root){

        SplayNode *leftRoot , *centerRoot , *rightRoot; 
        r--;//半開区間なので

        std::pair<SplayNode*,SplayNode*>  tmp = split(r+1,root);
        rightRoot = tmp.second;
        
        tmp = split(l,tmp.first);
        leftRoot = tmp.first;
        centerRoot = tmp.second;
        
        T ans;
        //modeによって取得する値が違う
        if(mode == 0){
            ans  = centerRoot->Min;
        }else if(mode == 1){
            ans  = centerRoot->Max;
        }else if(mode == 2){
            ans = centerRoot->Sum;
        }else{
            ans = centerRoot->Sum;
        }

        return std::make_pair(merge(merge(leftRoot,centerRoot),rightRoot),ans);
    }




    /*
        半開区間[l , r)の要素のValue全てに +x する(区間加算クエリ)
    */
    SplayNode* RangeAdd_sub(int l , int r , T x , SplayNode* root){
        SplayNode *leftRoot , *centerRoot , *rightRoot; 
        r--;//半開区間なので

        std::pair<SplayNode*,SplayNode*>  tmp = split(r+1,root);
        rightRoot = tmp.second;
        
        tmp = split(l,tmp.first);
        leftRoot = tmp.first;
        centerRoot = tmp.second;

        
        centerRoot->add_flag_lazy = true;
        centerRoot->lazy_add+=x;

        

        return merge(merge(leftRoot,centerRoot),rightRoot);
    }










    /*
        半開区間[l , r)の要素のValue全てをxにする(区間更新クエリ)
    */
    SplayNode* RangeUpdate_sub(int l , int r , T x , SplayNode* root){
        SplayNode *leftRoot , *centerRoot , *rightRoot; 
        r--;//半開区間なので

        std::pair<SplayNode*,SplayNode*>  tmp = split(r+1,root);
        rightRoot = tmp.second;
        
        tmp = split(l,tmp.first);
        
        leftRoot = tmp.first;
        centerRoot = tmp.second;
        
        
        centerRoot->update_flag_lazy = true;
        centerRoot->add_flag_lazy = false;//これ以前のaddクエリは無効化
        centerRoot->lazy_add = 0;//これ以前のaddクエリは無効化
        centerRoot->lazy_update=x;

        return merge(merge(leftRoot,centerRoot),rightRoot);
    }






    /*
        半開区間[l , r)を反転させる
    */
    SplayNode* reverse_sub(int l , int r , SplayNode* root){
        SplayNode *leftRoot , *centerRoot , *rightRoot; 
        r--;//半開区間なので

        std::pair<SplayNode*,SplayNode*>  tmp = split(r+1,root);
        rightRoot = tmp.second;
        
        tmp = split(l,tmp.first);
        leftRoot = tmp.first;
        centerRoot = tmp.second;
        
        centerRoot->reverse_flag_lazy = !(centerRoot->reverse_flag_lazy);//反転flagを更新

        return merge(merge(leftRoot,centerRoot),rightRoot);
    }




    /*
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        ここからは、クラスの外で動かす関数たちです。
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    */



     public:



    /*
        木全体のindex番目のNode(値渡し)を取得
    */
    SplayNode get(int index){
        if(index<0 || index>=Size){
            std::cerr<< "index exceeds Size" << std::endl;
            return SplayNode(initializer);
        }

        Root = getNode(index,Root);
        Root->update();

        return *(Root);

    }




    /*
        index番目にSplayNode*を挿入
    */
    void insert(int index , SplayNode *NODE){
        if(index<0 || index> Size)return;

        Root = insert_sub(index , NODE , Root);
        Root->update();

        return;

    }





    /*
        末尾に追加

    */
    void push_back(T val){
        insert(Size , new SplayNode(val)); 

        return;
    }

    /*
        先頭に追加
    */
    void push_front(T val){
        insert(0 , new SplayNode(val));
        return;
    }


    /*
        index番目に追加
    */
    void push(int index , T val){
        insert(index , new SplayNode(val));
        return;
    }









    /*
        木全体の[l,r)のRMQ
    */
    T RangeMinQuery(int l , int r){
        l = max(0,l);
        r = min(Size,r);
        if(l>=r){
            cerr << "right must be larger than left " << endl;
            return initializer;
        }

        std::pair<SplayNode*,T> tmp = RangeQuery_sub(l,r,0,Root);
        Root = tmp.first;
        
        Root->update();

        return tmp.second;
    }


    /*
        木全体の[l,r)のRMQ
    */
    T RangeMaxQuery(int l , int r){
        l = max(0,l);
        r = min(Size,r);
        if(l>=r){
            cerr << "right must be larger than left " << endl;
            return initializer;
        }

        std::pair<SplayNode*,T> tmp = RangeQuery_sub(l,r,1,Root);
        Root = tmp.first;
        Root->update();

        return tmp.second;
    }



    /*
        木全体の[l,r)のRSQ
    */
    T RangeSumQuery(int l , int r){
        l = max(0,l);
        r = min(Size,r);
        if(l>=r){
            cerr << "right must be larger than left " << endl;
            return initializer;
        }

        std::pair<SplayNode*,T> tmp = RangeQuery_sub(l,r,2,Root);

        Root = tmp.first;
        Root->update();

        return tmp.second;
    }



    /*
        [l,r)を反転
    */
    void reverse(int l , int r){
        l = max(0,l);
        r = min(Size,r);
        if(l>=r){
            cerr << "right must be larger than left " << endl;
            return;
        }

        Root  = reverse_sub(l,r,Root);

        Root->update();

        return;
    }





    /*
        木全体の[l,r)に区間加算(区間内の要素全てに+x)
    */
    void RangeAdd(int l , int r , T x){
        l = max(0,l);
        r = min(Size,r);
        if(l>=r){
            cerr << "right must be larger than left " << endl;
            return;
        }

        Root = RangeAdd_sub(l,r,x,Root);
        Root->update();

        return;
    }







    /*
        木全体の[l,r)に区間更新(区間内の要素全てをxにする)
    */
    void RangeUpdate(int l , int r , T x){
        l = max(0,l);
        r = min(Size,r);
        if(l>=r){
            cerr << "right must be larger than left " << endl;
            return;
        }

        Root = RangeUpdate_sub(l,r,x,Root);
        Root->update();

        return;
    }







    /*
        木全体で、[l,r)を右シフト(右端は左端へ)
    */
    void shift_right(int l , int r){
        l = max(0,l);
        r = min(Size,r);
        if(l>=r)return;

        Root = shift_right_sub(l,r,Root);
        Root->update();

        return;
    }





    /*
        木全体で、[l,r)を左シフト(左端は右端へ)
    */
    void shift_left(int l , int r){
        l = max(0,l);
        r = min(Size,r);
        if(l>=r)return;

        Root = shift_left_sub(l,r,Root);
        Root->update();

        return;
    }






    /*
        木全体のx番目のvalueをyにする
    */
    void update_val(int x , T y){
    
        Root = getNode(x,Root);
        if(isExist(Root)==false)return;
        Root->Value = y;
        Root->update();

        return;
    }


    /*
        index番目のNodeを消去
    */
    void Delete(int index){
        std::pair<SplayNode*,SplayNode*> tmp = Delete_sub(index,Root);
        
        Root = tmp.first;
        if(isExist(Root) == false )return;
        Root->update();

        return;
    }





    /*
        [lef,rig)に対応する区間を全削除
    */
    void RangeDelete(int lef , int rig){
        lef = max(0,lef);
        rig = min(rig,Size);
        if(lef>=rig){
            cerr << "right must be larger than left " << endl;
            return;
        }
        Root = RangeDelete_sub(lef,rig,Root);
        Root->update();
        return;
    }



    /*
        一列に表示
    */
    void Debug(){
        std::cerr<<"DEBUG:" << std::endl;
        for( int i = 0 ; i < Size ; i++){
            std::cerr<< get(i).Value << " ";
        }
        std::cerr<< std::endl;
    }




};

































int main(){
    ll n ,q;cin >> n >> q;
    LazySplayTree<ll> S;
    REP(i,n){
        S.push_back(0);
    }
    REP(i,q){
        int t,l,r,x;
        
        cin >> t >> l >> r;
        l--;r--;
        
        S.reverse(l,r+1);
        S.RangeAdd(l,r+1,10);
        S.reverse(l,r+1);
        
         
        S.RangeAdd(l,r+1,-10);

        
        if(t==0){  
            cin >> x;
            S.RangeAdd(l,r+1,x);
        }else{
            
            cout << S.RangeSumQuery(l,r+1) << endl;
        }
        
        
    }

    return 0;
}
