use std::{fmt, io::BufRead};
#[derive(Clone, Copy)]
struct Point {
    x: f64,
    y: f64,
}

impl Point {
    fn new(x: f64, y: f64) -> Self {
        Point { x, y }
    }
    fn rotate_90(self) -> Self {
        Point::new(self.y * -1.0, self.x)
    }
}

impl std::ops::Add for Point {
    type Output = Point;
    fn add(self, rhs: Point) -> Self::Output {
        Point::new(self.x + rhs.x, self.y + rhs.y)
    }
}

impl std::ops::Sub for Point {
    type Output = Point;
    fn sub(self, rhs: Point) -> Self::Output {
        Point::new(self.x - rhs.x, self.y - rhs.y)
    }
}

impl std::ops::Mul<f64> for Point {
    type Output = Point;
    fn mul(self, rhs: f64) -> Self::Output {
        Point::new(self.x * rhs, self.y * rhs)
    }
}

impl fmt::Display for Point {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        if let Some(p) = f.precision() {
            write!(f, "{:.*} {:.*}", p, self.x, p, self.y)
        } else {
            write!(f, "{} {}", self.x, self.y)
        }
    }
}

fn koch(order: u32, p1: Point, p2: Point) {
    if order == 0 {
        println!("{:.8}", p2);
        return;
    }
    let s = Point::new((p1.x * 2.0 + p2.x) / 3.0, (p1.y * 2.0 + p2.y) / 3.0);
    let t = Point::new((p1.x + p2.x * 2.0) / 3.0, (p1.y + p2.y * 2.0) / 3.0);
    let v12 = p2 - p1;
    let u = p1
        + Point::new(
            v12.x * 0.5 - v12.y * 0.28867513459,
            v12.x * 0.28867513459 + v12.y * 0.5,
        );
    koch(order - 1, p1, s);
    koch(order - 1, s, u);
    koch(order - 1, u, t);
    koch(order - 1, t, p2);
}

fn main() {
    let mut input = String::new();
    std::io::BufReader::new(std::io::stdin())
        .read_line(&mut input)
        .unwrap();
    let order = input.trim().parse::<u32>().unwrap();
    println!("{:.8}", Point::new(0.0, 0.0));
    koch(order, Point::new(0.0, 0.0), Point::new(100.0, 0.0));
}

