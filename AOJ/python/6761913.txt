class CumulativeSum2DDestroy:
    def __init__(self, c):
        """
        O(hw)
        入力 : c(リスト)
        cum[i][j] = [0, i] * [0, j]の和(面積)
        """
        # c[0] = []の時注意
        h = len(c)
        w = len(c[0])
        self.cum = c
        cur = c[0]
        for j in range(1, w):
            cur[j] += cur[j - 1]

        for i in range(1, h):
            prev = c[i - 1]
            cur = c[i]
            now = cur[0]
            cur[0] += prev[0]
            for j in range(1, w):
                cur[j], now = cur[j] + prev[j] + now, now + cur[j]

    def sum(self, a, b, x, y):
        """sum(a, b, x, y) = [a, b] * [x, y]の和(面積)"""
        if a > b or x > y:
            return 0
        if a == 0 and x == 0:
            return self.cum[b][y]
        if a == 0:
            return self.cum[b][y] - self.cum[b][x - 1]
        if x == 0:
            return self.cum[b][y] - self.cum[a - 1][y]
        return self.cum[b][y] - self.cum[b][x - 1] - self.cum[a - 1][y] + self.cum[a - 1][x - 1]


from bisect import bisect_left, bisect_right


import sys
input = sys.stdin.readline

n, m = map(int, input().split())
xs = [0] * n
ys = [0] * n
for i in range(n):
    xs[i], ys[i] = map(int, input().split())
xs.append(-10**10)
xs.append(10**10)

a = sorted(set(xs) | set((10**10, -10**10)))
b = sorted(set(ys) | set((10**10, -10**10)))

board = [[0] * (len(b) + 1) for _ in range(len(a) + 1)]
for i, j in zip(xs, ys):
    board[bisect_left(a, i)][bisect_left(b, j)] += 1

cs = CumulativeSum2DDestroy(board)

for _ in range(m):
    x1, y1, x2, y2 = map(int, input().split())
    a1 = bisect_left(a, x1)
    b1 = bisect_left(b, y1)
    a2 = bisect_right(a, x2) - 1
    b2 = bisect_right(b, y2) - 1
    print(cs.sum(a1, a2, b1, b2))

