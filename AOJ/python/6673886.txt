
import java.util.Scanner;

/*太郎が花子と一緒にトランプ遊びをしようとしたところ、52枚あるはずのカードが
 *  n 枚のカードしか手元にありません。
 *  これらの n 枚のカードを入力として、足りないカードを出力するプログラムを作成して下さい。
 *  太郎が最初に持っていたトランプはジョーカーを除く52枚のカードです。

52枚のカードは、スペード、ハート、クラブ、ダイヤの４つの絵柄に分かれており、各絵柄には13のランクがあります。

■Input
最初の行に太郎が持っているカードの枚数 n (n ≤ 52)が与えられます。
続いて n 組のカードがそれぞれ１行に与えられます。各組は１つの空白で区切られた文字と整数です。文字はカードの絵柄を表し、
スペードが'S'、ハートが'H'、クラブが'C'、ダイヤが'D'で表されています。整数はそのカードのランク(1 〜 13)を表しています。
■Output
足りないカードをそれぞれ1行に出力して下さい。各カードは入力と同様に１つの空白で区切られた文字と整数です。出力するカードの順番は以下のとおりとします：
絵柄がスペード、ハート、クラブ、ダイヤの順番で優先的に出力する。
絵柄が同じ場合は、ランクが小さい順に出力する。*/
//■考察 多次元配列を使用する。

public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		char ch = 0;
		int lank = 0;
		// 多次元配列
		boolean[][] cardArray = new boolean[5][14];
		int n = sc.nextInt();// n枚のカード
		// n枚のカード枚数分ループ
		for (int i = 1; i <= n; i++) {
			ch = sc.next().charAt(0);// カードの絵柄(S,H,C,D)
			lank = sc.nextInt();// カードランク(1~13)
			switch (ch) {
			case 'S': {
				ch = 1;
				break;
			}
			case 'H': {
				ch = 2;
				break;
			}
			case 'C': {
				ch = 3;
				break;
			}
			case 'D': {
				ch = 4;
				break;
			}
			};
			// カードの状態を記録。true=持っているカード
			cardArray[ch][lank] = true;
		}
		for (int i = 1; i <= 4; i++) {
			for (int j = 1; j <= 13; j++) {
				//不足しているカード
				if(!cardArray[i][j]) {
					switch (i) {
					case 1: {
						ch = 'S';
						break;
					}
					case 2: {
						ch = 'H';
						break;
					}
					case 3: {
						ch = 'C';
						break;
					}
					case 4: {
						ch = 'D';
						break;
					}
					};
					System.out.println(ch + " " + j);
				}
			}
		}
	}
}
