use std::cmp::{min, Eq, Ord, Ordering, PartialEq, PartialOrd};
use std::ops::{Add, AddAssign};
use std::{num::ParseIntError, str::FromStr};
use InfInt::*;
type Chars = Vec<char>;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let sc = Scanner::new();
    let (v, e): (usize, usize) = sc.read();
    let mut g = vec![vec![PosInf; v]; v];
    let mut dp = vec![vec![PosInf; v]; 1 << v];
    for _ in 0..e {
        let (s, t, d): (usize, usize, i64) = sc.read();
        g[s][t] = d.into();
    }
    dp[0][0] = 0.into();
    let ans = rec((1 << v) - 1, 0, &mut dp, &g);
    println!(
        "{}",
        match ans {
            Finite(i) => i,
            PosInf => -1,
            NegInf => unreachable!(),
        }
    );
    Ok(())
}

fn rec(s: usize, v: usize, dp: &mut Vec<Vec<InfInt>>, g: &Vec<Vec<InfInt>>) -> InfInt {
    if s == 0 {
        return if v == 0 { Finite(0) } else { PosInf };
    }
    if let Finite(i) = dp[s][v] {
        return Finite(i);
    }
    if s & (1 << v) == 0 {
        return PosInf;
    }
    let mut ret = PosInf;
    for u in 0..g.len() {
        ret = min(ret, rec(s ^ (1 << v), u, dp, g) + g[u][v]);
    }
    ret
}

#[derive(Debug, Clone, Copy)]
pub enum InfInt {
    Finite(i64),
    PosInf,
    NegInf,
}

macro_rules! impl_finite_add {
    ($self:expr, $rhs:expr) => {
        match ($self, $rhs) {
            (Finite(i), Finite(j)) => Finite(i + j),
            (PosInf | Finite(_), PosInf | Finite(_)) => PosInf,
            (NegInf | Finite(_), NegInf | Finite(_)) => NegInf,
            (_, _) => unreachable!(),
        }
    };
}

impl Add for InfInt {
    type Output = Self;
    fn add(self, rhs: Self) -> Self::Output {
        impl_finite_add!(self, rhs)
    }
}

impl AddAssign for InfInt {
    fn add_assign(&mut self, rhs: Self) {
        *self = impl_finite_add!(*self, rhs);
    }
}

impl PartialEq for InfInt {
    fn eq(&self, other: &Self) -> bool {
        match (*self, *other) {
            (Finite(i), Finite(j)) => i.eq(&j),
            (PosInf, PosInf) => true,
            (NegInf, NegInf) => true,
            (_, _) => false,
        }
    }
}

impl Eq for InfInt {}

impl PartialOrd for InfInt {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        match (*self, *other) {
            (Finite(i), Finite(j)) => i.partial_cmp(&j),
            (Finite(_) | PosInf, NegInf | Finite(_)) => Some(Ordering::Greater),
            (_, _) => Some(Ordering::Less),
        }
    }
}

impl Ord for InfInt {
    fn cmp(&self, other: &Self) -> Ordering {
        match (*self, *other) {
            (Finite(i), Finite(j)) => i.cmp(&j),
            (Finite(_) | PosInf, NegInf | Finite(_)) => Ordering::Greater,
            (_, _) => Ordering::Less,
        }
    }
}

impl From<i64> for InfInt {
    fn from(i: i64) -> Self {
        Finite(i)
    }
}

pub struct Scanner {
    handle: std::io::Stdin,
}

impl Scanner {
    fn new() -> Self {
        Scanner {
            handle: std::io::stdin(),
        }
    }

    fn scan_line(&self) -> String {
        let mut buf = String::new();
        self.handle.read_line(&mut buf).unwrap();
        buf.trim_end_matches('\n')
            .trim_end_matches('\r')
            .to_string()
    }

    fn read<T>(&self) -> T
    where
        T: Scannable,
    {
        <T as Scannable>::from_scan(self.scan_line())
    }
}

pub trait Scannable {
    fn from_scan(s: String) -> Self;
}

macro_rules! impl_Scannable_for_numeical {
    ($($t:ty)*) => {
        $(
            impl Scannable for $t  {
                fn from_scan(s: String) -> Self {
                    s.as_str().parse().unwrap()
                }
            }
        )*
    };
}
impl_Scannable_for_numeical!(usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64);

macro_rules! impl_Scannable_for_numeical_vector {
    ($($t:ty)*) => {
        $(
            impl Scannable for Vec<$t> {
                fn from_scan(s: String) -> Self {
                    s.split_whitespace()
                        .map(|i| i.parse().unwrap())
                        .collect()
                }
            }
        )*
    };
}
impl_Scannable_for_numeical_vector!(usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64);

impl Scannable for Chars {
    fn from_scan(s: String) -> Self {
        s.chars().collect()
    }
}

impl Scannable for Vec<String> {
    fn from_scan(s: String) -> Self {
        s.split_whitespace().map(|s| s.to_string()).collect()
    }
}

impl<T, U> Scannable for (T, U)
where
    T: FromStr<Err = ParseIntError>,
    U: FromStr<Err = ParseIntError>,
{
    fn from_scan(s: String) -> Self {
        let mut it = s.split_whitespace();
        (
            it.next().unwrap().parse().unwrap(),
            it.next().unwrap().parse().unwrap(),
        )
    }
}

impl<T, U, V> Scannable for (T, U, V)
where
    T: FromStr<Err = ParseIntError>,
    U: FromStr<Err = ParseIntError>,
    V: FromStr<Err = ParseIntError>,
{
    fn from_scan(s: String) -> Self {
        let mut it = s.split_whitespace();
        (
            it.next().unwrap().parse().unwrap(),
            it.next().unwrap().parse().unwrap(),
            it.next().unwrap().parse().unwrap(),
        )
    }
}

