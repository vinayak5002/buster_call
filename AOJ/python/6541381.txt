
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Main {

    static int MaxDis = 10000000;
    static class Edge
    {
        int weight;
        int v;
        public Edge(int v ,int weight)
        {
            this.v = v;
            this.weight = weight;
        }

    }

    static class Node
    {
        ArrayList<Edge> NodeArray = new ArrayList<>();
    }


    public static void main(String[] args) {
        Main main = new Main();
        Scanner scan = new Scanner(System.in);
        int v = scan.nextInt();
        int e = scan.nextInt();
        int r = scan.nextInt();

   //     ArrayList<Edge>[] Lgraph = new ArrayList[v];

        Node[] Lgraph = new Node[v];

        for(int i = 0 ; i < v ; i++)
        {
            Lgraph[i] = new Node();
        }



        for(int i = 0 ; i<e ;i ++)
        {
            int s = scan.nextInt();
            int t = scan.nextInt();
            int d = scan.nextInt();

            Edge temp = new Edge(t,d);
            Lgraph[s].NodeArray.add(temp);
        }
        
        scan.close();
        //-----------------------------------------------
        //Dijistra

        int[] dis = new int[v];
        boolean[] collected = new boolean[v];
        Arrays.fill(dis, MaxDis);
        dis[r] = 0;

        while(true)
        {
            int vertex = min_uncollected(dis, collected);
            if(vertex==-1)
                break;

            for(int i = 0 ; i< Lgraph[vertex].NodeArray.size();i++)
            {
                int w = Lgraph[vertex].NodeArray.get(i).v;
                int weightofw = Lgraph[vertex].NodeArray.get(i).weight;

                if(dis[vertex] + weightofw < dis[w] && !collected[w])
                {
                    dis[w] = dis[vertex] + weightofw;
                }

            }


        }


        for (int i = 0; i < v; i++) {
            if (dis[i] != MaxDis)
                System.out.println(dis[i]);
            else
                System.out.println("INF");
        }






    }
    public static int min_uncollected(int[] dis, boolean[] collected) {
        int temp = Main1.Maxdis;
        int res = -1;

        for (int i = 0; i < dis.length; i++) {

            if (dis[i] < temp && !collected[i]) {
                temp = dis[i];
                res = i;

            }
        }
        if (res != -1)
            collected[res] = true;
        return res;


    }
}

