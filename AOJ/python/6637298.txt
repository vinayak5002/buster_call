/*
    2022-05-22
    二叉堆
*/

#include <iostream>
#include <algorithm>
using namespace std;
const int MAXN = 500010;
int heap[MAXN];

void maxHeapify(int x, int H) {
    int l = x << 1;
    int r = (x << 1) + 1;
    int largest;
    if (l <= H && heap[l] > heap[x]) largest = l;
    else largest = x;
    if (r <= H && heap[r] > heap[largest]) largest = r;

    if (largest != x) {
        swap(heap[x], heap[largest]);
        maxHeapify(largest, H);
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int H; cin >> H;
    for (int i = 1; i <= H; ++i) cin >> heap[i];

    for (int i = H / 2; i >= 1; --i) maxHeapify(i, H);

    for (int i = 1; i <= H; ++i) {
        cout << " " << heap[i];
    }
    cout << endl;
    return 0;
}
