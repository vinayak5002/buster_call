/*
Dice III

Write a program which reads the two dices constructed in the same way as Dice I, and determines whether these two dices are identical. You can roll a dice in the same way as Dice I, and if all integers observed from the six directions are the same as that of another dice, these dices can be considered as identical.

Input
In the first line, six integers assigned to faces of a dice are given in ascending order of their corresponding labels.
In the second line, six integers assigned to faces of another dice are given in ascending order of their corresponding labels.

Output
Print "Yes" if two dices are identical, otherwise "No" in a line.

Constraints
0
≤
 the integer assigned to a face 
≤
100
Sample Input 1
1 2 3 4 5 6
6 2 4 3 5 1
Sample Output 1
Yes

Sample Input 2
1 2 3 4 5 6
6 5 4 3 2 1
Sample Output 2
No
*/

#define FACE_NUM 6
#define VALUE_MAX 100
#define VALUE_MIN 0

/*Initialization for an int array*/
void initialize (int a[FACE_NUM]);
/*Error check for input values*/
void checkValue (int a);
/*Get an array from console input*/
void getArray (int a[FACE_NUM]);
void rolltoE (int a[FACE_NUM]);
void rolltoN (int a[FACE_NUM]);
void rolltoC (int a[FACE_NUM]);
void rotate(int x, int a[FACE_NUM]);
int isIdentical (int a[FACE_NUM], int b[FACE_NUM]);

#include<stdio.h>
#include<stdlib.h>

int main()
{
    int dice1[FACE_NUM];
    int dice2[FACE_NUM];
    initialize(dice1);
    initialize(dice2);
    getArray(dice1);
    getArray(dice2);

    if (isIdentical(dice1,dice2))
    {
        printf("Yes\n");
    }
    else
    {
        printf("No\n");
    }
    return 0;
}

/*Function to initialize an integer array to zeros*/
void initialize (int a[FACE_NUM])
{
    int i=0;
    for (i=0;i<FACE_NUM;i++)
    {
        a[i]=0;
    }
    return;
}

/*Function to check a value if it fits the constraints*/
void checkValue (int a)
{
    if (a>VALUE_MAX)
    {
        printf("ERROR: The input value must be less than or equal to %d.\n",VALUE_MAX);
        exit(0);
    }
    else if (a<VALUE_MIN)
    {
        printf("ERROR: The input value must be greater than or equal to %d.\n",VALUE_MIN);
        exit(0);
    }
    return;
}

/*Function to get an array from console input*/
void getArray (int a[FACE_NUM])
{
    int i=0;
    for (i=0;i<FACE_NUM;i++)
    {
        scanf("%d",&a[i]);
        /*Error check for the input value*/
        checkValue(a[i]);
    }
    return;
}

void rolltoE (int a[FACE_NUM])
{
    int temp_arr[6]={0,0,0,0,0,0};
    temp_arr[0]=a[3];
    temp_arr[1]=a[1];
    temp_arr[2]=a[0];
    temp_arr[3]=a[5];
    temp_arr[4]=a[4];
    temp_arr[5]=a[2];
    
    int i=0;
    for(i=0;i<FACE_NUM;i++)
    {
        a[i]=temp_arr[i];
    }
    return;
}

void rolltoN (int a[FACE_NUM])
{
    int temp_arr[6]={0,0,0,0,0,0};
    temp_arr[0]=a[1];
    temp_arr[1]=a[5];
    temp_arr[2]=a[2];
    temp_arr[3]=a[3];
    temp_arr[4]=a[0];
    temp_arr[5]=a[4];

    int i=0;
    for(i=0;i<FACE_NUM;i++)
    {
        a[i]=temp_arr[i];
    }
    return;
}


void rolltoC (int a[FACE_NUM])
{
   int temp_arr[6]={0,0,0,0,0,0};
    temp_arr[0]=a[0];
    temp_arr[1]=a[2];
    temp_arr[2]=a[4];
    temp_arr[3]=a[1];
    temp_arr[4]=a[3];
    temp_arr[5]=a[5];

    int i=0;
    for(i=0;i<FACE_NUM;i++)
    {
        a[i]=temp_arr[i];
    }
    return;    
}


void rotate(int x, int a[FACE_NUM])
{
    int b[3];
    int r=0;
    int i=0;
    int j=0;
    int k=0;
    /*Convert to Quaternary b[0]b[1]b[2] */
    for(i=1;x>0;i--)
    {
        b[i] = x % 4;
        x = x / 4;
    }

    for(i=0;i<b[0];i++)
    {
        rolltoE(a);
        for(j=0;j<b[1];j++)
        {
            rolltoN(a);
            
            for(k=0;k<b[2];k++)
            {
                rolltoC(a);
            }
            
        }
    }
    return;
}

int isIdentical (int a[FACE_NUM], int b[FACE_NUM])
{
    int result=0;
    int i=0;
    int j=0;
    for (i=0;i<64;i++)
    {
        rotate(i,a);
        for (j=0;j<FACE_NUM;j++)
        {
            if (a[j]!=b[j])
            {
                break;
            }
        }
        if (j==FACE_NUM)
        {
            result=1;
            break;
        }
    }
    return result;
}
