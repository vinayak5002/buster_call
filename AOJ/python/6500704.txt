//ALDS1_2_C
//安定なソート
#include <iostream>
#include <string>

using namespace std;

//トランプclass
class card{
public:
  char mark;
  int value;
};

//Stableの確認
string stable_check(card *C, int N, string b_mark){

  for(int i=0; i<N; i++){
    if(b_mark[i] != C[i].mark) return "Not stable";
  }
  return "Stable";
}

//バブルソート
void BubbleSort(card *C, int N){

  for(int i=0; i<N-1; i++){
    for(int j=N-1; j>=i+1; j--){
      if(C[j].value < C[j-1].value){
        swap(C[j], C[j-1]);
      }
    }
  }
}

//選択ソート
void SelectionSort(card *C, int N){

  int minj;
  for(int i=0; i<=N-1; i++){
    minj = i;
    for(int j=i; j<=N-1; j++){
      if(C[j].value < C[minj].value) minj = j;
    }
    swap(C[i], C[minj]);
  }
}

int main(){
  int N;
  string input;
  string before_marks[9];
  string before_mark;
  cin >> N;

  //配列Cの入力(Bubble用・Selection用)
  card C_B[N];
  card C_S[N];
  for(int i=0; i<N; i++){
    cin >> input;
    before_marks[input[1]-'0'-1] += input[0];
    C_B[i].mark = input[0];
    C_S[i].mark = input[0];
    C_B[i].value = input[1]-'0';
    C_S[i].value = input[1]-'0';
  }

  for(int i=0; i<9; i++){
    before_mark += before_marks[i];
  }

  //BubbleSort
  BubbleSort(C_B, N);

  //SelectionSort
  SelectionSort(C_S, N);

  //出力
  for(int i=0; i<N; i++){
    cout << C_B[i].mark << C_B[i].value;
    if(i<N-1) cout << " ";
  }
  cout << endl;
  cout << stable_check(C_B, N, before_mark) << endl;

  for(int i=0; i<N; i++){
    cout << C_S[i].mark << C_S[i].value << " ";
    if(i<N-1) cout << " ";
  }
  cout << endl;
  cout << stable_check(C_S, N, before_mark) << endl;

}

