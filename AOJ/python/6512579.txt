const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
	let n = si[0];
	let ele = si[1].split(" ");
	let q = si[2];
	
	
	let set = new Set();
	for (let i =0; i < n; i++) {
		set.add(Number(ele[i]));
	}
	//console.log(set);// forDebug
	
	let range = set.size;
	set = Array.from(set);
	
	let count = new Array(range);
	for (let i = 0; i < range; i++) {// 二次元配列をn個作成
		let tmp = [];
		count[i] = tmp;
	}
	// 数列内の整数の個数は, 整数ごとの配列の長さでカウントする.
	// 整数ごとの配列は, setに対応した配列countに格納する.
	
	for (let i = 0; i < n; i++) {// 重複を数える.
	//console.log("ele[" + i + "] = " + ele[i])// forDebug
		for (let j = 0; j < range; j++) {
			//console.log("set[" + j + "] = " + set[j])// forDebug
			if (Number(ele[i]) === Number(set[j])) {
				count[j].push(i);
				break;
			}
		}
	}
	//console.log(count);// forDebug;
	let str = "";
	for (let i = 0; i < q; i++) {// q回命令を繰り返す.
			let pair = si[i + 3].split(" ");
			let start = Number(pair[0]);
			let end = Number(pair[1]) - 1;
			let int = Number(pair[2]);
			//console.log(count[int].length);// forDebug
			let index = 0;
			for (let j = 0; j < range; j++) {
				if (int == set[j]) {
					index = j;
				}
			}
			let counter = 0
			//console.log("count[index].length is " + count[index].length)// forDebug
			for (let j = 0; j < count[index].length; j++) {// 範囲外の場合は, (配列の長さ)を縮めて調整.
				//console.log("count[index][" + j + "] is " + count[index][j])// forDebug
				if (Number(count[index][j]) >= start && Number(count[index][j]) <= end) {
					counter++;
				}
			}
			str += counter + "\n";
	}
	so.write(str);
}
