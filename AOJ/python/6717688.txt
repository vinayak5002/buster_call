flag = 0

class Graph:
    def __init__(self,V,E,edges):
        self.V = V
        self.E = E
        self.edges = sorted(edges,key=lambda x: x[0])

        self.ind_edges = [-1] * V
        self.visited = [0] * V
        pre = -1

        for i in range(V):
            if pre != edges[i][0]:
                self.ind_edges[edges[i][0]] = i
            pre = edges[i][0]

        

def dfs(g,n):
    g.visited[n] = 1

    id = g.ind_edges[n]

    if id == -1:
        pass
    else :
        while id < V:
            if g.edges[id][0] != n:
                break
            n_node = g.edges[id][1]

            if g.visited[n_node] == 1:
                global flag
                flag = 1
                return
            dfs(g,n_node)
            if flag == 1:
                return
            id += 1

    g.visited[n] = 0

    return


    
        
V,E = map(int,input().split())
edges = [[0] * 2 for i in range(E)]


for i in range(E):
    edges[i][0],edges[i][1] = map(int,input().split())

g = Graph(V,E,edges)


# dfs(g,0)
for i in range(V):
    dfs(g,i)
    if flag == 1:
        break

print(flag)



