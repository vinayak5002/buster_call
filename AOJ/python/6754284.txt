using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace ITP_1_6A
{
    public class Card
    {
        public int B { get; set; }
        public int F { get; set; }
        public int R { get; set; }
        public int V { get; set; }
    }
    //public class CardComparer : IEqualityComparer<Card>
    //{
    //    public bool Equals(Card i_lhs, Card i_rhs)
    //    {
    //        if (i_lhs.Suit == i_rhs.Suit &&
    //            i_lhs.Number == i_rhs.Number)
    //        {
    //            return true;
    //        }
    //        return false;
    //    }

    //    public int GetHashCode(Card i_obj)
    //    {
    //        // 本当はnullチェックをしなきゃ駄目だよ。
    //        return i_obj.Number ^ i_obj.Suit.GetHashCode();
    //    }
    //}


    public class Dice
    {
        public int A, B, C, D, E, F, T;
        public Dice(int a, int b, int c, int d, int e, int f)
        {
            A = a;
            B = b;
            C = c;
            D = d;
            E = e;
            F = f;
        }

        public void turn_W()
        {
            T = A;

            A = C; C = F; F = D; D = T;
        }
        public void turn_E()
        {
            T = A;

            A = D; D = F; F = C; C = T;
        }
        public void turn_N()
        {
            T = A;

            A = B; B = F; F = E; E = T;
        }
        public void turn_S()
        {
            T = A;

            A = E; E = F; F = B; B = T;
        }
        public void turnRight()
        {
            T = B;

            B = C; C = E; E = D; D = T;
        }
        public void turn_Left()
        {
            T = B;

            B = D; D = E; E = C; C = T;
        }

    }

    class Program
    {
        static String[] pattern = { "", "N", "N", "N", "E", "EE" };
        static void Main(string[] args)
        {
            var X = Console.ReadLine().Trim().Split(' ').Select(s => int.Parse(s)).ToArray();

            Dice[] dices = new Dice[X[0]];
            for (int i = 0; i < X[0]; i++)
            {
                var line = Console.ReadLine().Trim().Split(' ').Select(s => int.Parse(s)).ToArray();
                dices[i] = new Dice(line[0],line[1],line[2],line[3],line[4],line[5]);
            }

            for (int i = 0; i < X[0] - 1; i++)
            {
                for (int j = i + 1; j < X[0]; j++)
                {
                    if (isSame(dices[i], dices[j]) == true)
                    {
				Console.WriteLine("No");
                        return;
                    }
                }
            }

            Console.WriteLine("Yes");

            return;
        }

        static bool isSame(Dice d1, Dice d2)
        {

                int j = 0;

                while (j < 6)
                {
                    foreach (var item in pattern[j])
                    {
                        if (item == 'W') d2.turn_W();
                        else if (item == 'E') d2.turn_E();
                        else if (item == 'N') d2.turn_N();
                        else if (item == 'S') d2.turn_S();
                    }

                    //右に回転させる
                    for (int k = 0; k < 4; k++)
                    {
                        d2.turnRight();
                        if (d1.A == d2.A && d1.B == d2.B && d1.C == d2.C &&
                            d1.D == d2.D && d1.E == d2.E && d1.F == d2.F)
                        {
                            return true;
                        }
                    }
                    j++;
                }
            return false;

        }
    }

}

