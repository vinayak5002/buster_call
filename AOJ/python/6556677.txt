// https://qiita.com/DaikiSuyama/items/9dba963ba74396b9b7fd
// https://luling.hatenablog.com/entry/2018/12/01/212805
// https://zenn.dev/antyuntyun/articles/atcoder-cpp-template
//
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

// rep macro
#define reps(i, a, n) for (ll i = (a); i < (ll)(n); ++i)
#define rep(i, n) reps(i, 0, n)
#define rrep(i, n) reps(i, 1, n + 1)
#define repd(i,n) for(ll i=n-1;i>=0;i--)
#define rrepd(i,n) for(ll i=n;i>=1;i--)

#define optimize_cin() cin.tie(0); ios::sync_with_stdio(false)

#define pb push_back
#define mp make_pair
#define all(obj) (obj).begin(), (obj).end()
#define YESNO(bool) if(bool){cout<<"YES"<<endl;}else{cout<<"NO"<<endl;}
#define yesno(bool) if(bool){cout<<"yes"<<endl;}else{cout<<"no"<<endl;}
#define YesNo(bool) if(bool){cout<<"Yes"<<endl;}else{cout<<"No"<<endl;}

//定数
#define INF32 2147483647           // 2.147483647 x 10^{9}:32bit整数のinf
#define INF64 9223372036854775807  // 9.22337203685477580 x 10^{18}:64bit整数のinf
#define MOD 1000000007             //問題による
#define PI 3.14159265359

//略記
#define F first
#define S second

//出力(空白区切りで昇順に)
#define dump(x)                                                 \
  for (auto i = x.begin(); i != --x.end(); i++) cout << *i << " "; \
  cout << *--x.end() << endl;
#define echo(x) cout << (x) << endl;

// aをbで割る時の繰上げ,繰り下げ
ll _ceil(ll a, ll b) { return (a + (b - 1)) / b; }
ll _floor(ll a, ll b) { return a / b; }

// 大きい方、小さい方を残す
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }

// 参考
//   https://manabisystem.com/aizu-online-judge-alds1-5-c/

struct Point {
  double x;
  double y;
};

void dumpPoint(Point p) {
  cout << fixed << setprecision(8) << p.x << " " << p.y << endl;
}

void kochCurve(int depth, Point p1, Point p2) {
  if (depth == 0) {
    return;
  }

  Point s, t, u;
  // sはp1, p2の1:2の内分点
  s.x = (2 * p1.x + p2.x) / 3.0;
  s.y = (2 * p1.y + p2.y) / 3.0;
  // tはp1, p2の2:1の内分点
  t.x = (p1.x + 2 * p2.x) / 3.0;
  t.y = (p1.y + 2 * p2.y) / 3.0;
  // 回転行列で点uを算出する
  // vector(S->U) = 回転行列(60度) * vector(S->T);
  double theta = PI / 3; // 60度
  u.x = (t.x - s.x) * cos(theta) - (t.y - s.y) * sin(theta) + s.x;
  u.y = (t.x - s.x) * sin(theta) + (t.y - s.y) * cos(theta) + s.y;

  kochCurve(depth-1, p1, s);
  dumpPoint(s);
  kochCurve(depth-1, s, u);
  dumpPoint(u);
  kochCurve(depth-1, u, t);
  dumpPoint(t);
  kochCurve(depth-1, t, p2);
}

signed main() {
  // Read Parameters
  int n;
  cin >> n;
  // Solve
  Point p1 = {0, 0}, p2 = {100, 0};
  dumpPoint(p1);
  kochCurve(n, p1, p2);
  dumpPoint(p2);
}


