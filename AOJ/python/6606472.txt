use std::{io, fmt::Display};

fn main() {
    let mut buf = String::new();
    io::stdin().read_line(&mut buf).unwrap();
    let mut buf = String::new();
    io::stdin().read_line(&mut buf).unwrap();
    let mut arr: Vec<i32> = buf.split_whitespace().map(|x| x.parse().unwrap()).collect();
    let answer = counting_sort(arr);
    print_arr(&answer);
}

fn print_arr<T: Display>(arr: &[T]) {
    let answer = arr.iter().map(|x| x.to_string()).collect::<Vec<String>>().join(" ");
    println!("{}", answer)
}

fn counting_sort(arr: Vec<i32>) -> Vec<i32> {
    let mut counts = (0..10_000).map(|_| 0).collect::<Vec<usize>>();
    for item in arr.iter() {
        counts[(*item) as usize]+=1;
    }

    for i in 1..counts.len() {
            counts[i] += counts[i-1];
    }

    let mut answer: Vec<i32> = (0..arr.len()).map(|x| x as i32).collect();
    for i in ( 0..arr.len() ).rev() {
        answer[counts[arr[i] as usize]-1] = arr[i];
        counts[arr[i] as usize] -= 1;
    }

    answer
}
