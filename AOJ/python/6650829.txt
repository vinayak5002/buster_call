//#include <bits/stdc++.h>
#include<iostream>
#include<vector>
#include<utility>
#include<string>
#include<algorithm>
//#include <atcoder/all>
using namespace std;
//using namespace atcoder;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vs = vector<string>;
using vc = vector<char>;
using vvc = vector<vc>;
using pll = pair<ll,ll>;
using vp = vector<pll>;
using graph = vector<vector<pll>>;
#define all(a) a.begin(),a.end()
#define F(index,start,end) for(ll index=start;index<end;++index)
#define IA(array,size) F(index,0,size) cin >> array[index]
#define IA2(array,height,width) F(i,0,height) F(j,0,width) cin >> array[i][j]
#define PA(array,size) F(index,0,size) { cout << array[index]; if(index!=size-1) cout << " ";} cout << endl
#define PA2(array,height,width) F(i,0,height) {F(j,0,width) cout << array[i][j]<< (j!=width-1?" ":""); cout << endl;}
#define P(str) cout << str << endl
#define sz(str) ll(str.size())
constexpr int64_t INF=1e18;
constexpr int32_t MOD=1000000007;

/* 
木である各頂点において、それぞれその頂点から始めてすべての頂点をまわる最短移動数を求める。
 */

ll n;
vvll G;
vll D;
vll ans;

// D_iに一番遠い頂点までの距離を入れる。
void dfs(ll u, ll p){
    for(auto& v:G[u]){
        if(p==v) continue;
        dfs(v,u);
        D[u]=max(D[u],D[v]+1);
    }
}

void rerooting(ll u, ll par, ll d_par){
    vp child; // child : value, next
    child.emplace_back(0,-1);
    for(auto& v:G[u]){ // e : next, value
        if(v==par) child.emplace_back(d_par+1,v);
        else child.emplace_back(D[v]+1,v);
    }

    sort(all(child),greater<>());

    // uから考えた各部分木での最大長
    ans[u]=child[0].first;
    for(auto& v:G[u]){ // e : next, value
        if(v==par) continue;
        rerooting(v,u,child[child[0].second==v].first);
    }
}

int main(){
    cin.tie(0), ios::sync_with_stdio(false);

    cin>>n;
    G.resize(n);
    D.resize(n);
    ans.resize(n);
    F(i,0,n-1){
        ll u,v;
        cin>>u>>v; --u; --v;
        G[u].emplace_back(v);
        G[v].emplace_back(u);
    }

    dfs(0,-1);
    rerooting(0,-1,0);

    // 2×辺の数から最大の長さの辺を引けば良い。
    F(i,0,n) P(2*(n-1)-ans[i]);

    return 0;
}
