import copy
to = [{1, 4}, {0, 2, 5}, {1, 3, 6}, {2, 7}, {0, 5, 8}, {1, 4, 6, 9}, {2, 5, 7, 10}, {3, 6, 11},
      {4, 9, 12}, {5, 8, 10, 13}, {6, 9, 11, 14}, {7, 10, 15}, {8, 13}, {9, 12, 14}, {10, 13, 15}, {11, 14}]

N = 4                                                    # N * N pieces
LIMIT = 45
target = 0

pieces = [[[0] for j in range(N)] for i in range(N)]     # contents for simulation
op = [[0,0] for i in range(LIMIT+1)]                       # operations for simulation

MD = [[ abs(i//N - j//N) + abs(i%N - j%N) for j in range(N*N) ] for i in range(N*N)]    # manhattan dist between point i and point j
PW = [ 16**i for i in range(N*N)]

initial = []
initial_v = 0
initial_s = -1                                           # the position of space
p = 0
for i in range(N):
    row = list(map(int, input().split()))
    for j in range(N):
        pieces[i][j] = row[j]
        if row[j] == 0:
            initial.append(N*N)
            initial_s = i*N + j
        else:
            initial.append(row[j])
            initial_v += row[j]*PW[p]
        if (p+1) <= 15: target += (p+1)*PW[p]
        p += 1

heuristic = limit = 0
#state, space = copy.copy(initial), initial_s
space = initial_s
statev = initial_v

SW = [[ i*PW[j] for j in range(N*N) ] for i in range(N*N)]

visited = set()
def dfs(depth, prev, v, h, sp):
    global space, heuristic, limit, statev, visited
#    if statev == target: return True
#    if heuristic == 0: return True
    if h == 0: return True
    if depth + h > limit:  return False

    for nx in to[sp]:
        if nx == prev: continue

#        val = (statev >> (4*nx)) & 15
        val = (v >> (4*nx)) & 15

#        tmps, tmph = space, heuristic
        #heuristic += MD[space][state[nx]-1] - MD[nx][state[nx]-1] # diff of manhattan distance
#        heuristic += MD[space][val-1] - MD[nx][val-1] # diff of manhattan distance
        nh = h + MD[sp][val-1] - MD[nx][val-1]
        #state[nx], state[space] = state[space], state[nx]            # move a piece
#        tmpv = statev
#        statev = statev - val*PW[nx] + val*PW[space]
#        statev = statev - SW[val][nx] + SW[val][sp]
        nv = v - SW[val][nx] + SW[val][sp]
#        space = nx
#        if nv in visited: continue
#        visited.add(nv)
        if dfs( depth + 1, sp, nv, nh, nx ):
                 #op[depth] = r
             return True

#        space, heuristic = tmps, tmph                                # backtrack
#        state[nx], state[space] = state[space], state[nx]            # move a piece
#        statev = tmpv

    return False

def iterative_deepening():
    global heuristic, limit, state, space, statev, visited

    h = 0
    for i in range(N*N):
        if initial[i] != N*N: h += MD[i][initial[i]-1]

    limit = h
    while limit <= LIMIT:
  #      state, heuristic, space = copy.copy(initial), h, initial_s
        heuristic, space = h, initial_s
        statev = initial_v
        visited = set()
        if dfs(0, -100, initial_v, h, space): return True
        limit += 1

    return False

#def simulate():
#    print(0, ': initial state\n');
#    for r in range(N): print(pieces[r])
#    si, sj = initial_s // N, initial_s % N
#    for i in range(limit):
#        ti, tj = si + di[op[i]], sj + dj[op[i]]
#        print('\n', (i+1), ': move', pieces[ti][tj], 'to', ['LEFT', 'DOWN', 'RIGHT', 'UP'][op[i]], '\n')
#        pieces[si][sj], pieces[ti][tj] = pieces[ti][tj], pieces[si][sj]
#        si, sj = ti, tj
#        for r in range(N): print(pieces[r])

if iterative_deepening():
    print(limit)
 #   simulate()
else:
    print("unsolvable")

