use std::io;
use std::io::Read;

fn main() {
    let mut buf = String::new();
    io::stdin().read_to_string(&mut buf).unwrap();
    let mut iter = buf.split_whitespace();

    let n: usize = iter.next().unwrap().parse().unwrap();
    let p: i32 = iter.next().unwrap().parse().unwrap();
    let q: i32 = iter.next().unwrap().parse().unwrap();

    let mut c: Vec<i32> = Vec::with_capacity(n);
    let mut c_ip: Vec<(i32, usize)> = Vec::with_capacity(n);

    for i in 0..n {
        let c_i: i32 = iter.next().unwrap().parse().unwrap();
        c.push(c_i);
        c_ip.push((c_i + i as i32 * p, i));
    }

    c_ip.sort();

    let mut jisui1: Vec<bool> = Vec::with_capacity(n);
    let mut jisui2: Vec<bool> = Vec::with_capacity(n);

    jisui1.resize(n, false);
    jisui2.resize(n, false);

    for d in 0..n {
        if c_ip[d].0 >= 2 * (d as i32 + 1) * p {
            break;
        } else {
            jisui1[c_ip[d].1] = true;
        }
    }

    for d in 0..n {
        if c_ip[d].0 >= 2 * (d as i32) * p {
            break;
        } else {
            jisui2[c_ip[d].1] = true;
        }
    }

    let mut ans1 = 0;
    let mut q_ = q;

    for i in 0..n {
        if jisui1[i] {
            ans1 += q_ * p;
            q_ += 1
        } else {
            ans1 += c[i];
            q_ -= 1
        }
    }

    let mut ans2 = 0;
    q_ = q;

    for i in 0..n {
        if jisui2[i] {
            ans2 += q_ * p;
            q_ += 1
        } else {
            ans2 += c[i];
            q_ -= 1
        }
    }

    println!("{}", std::cmp::max(ans1, ans2));
}

