/**
 *    author:  ekusiadadus
 *    created: 04.22.2022 06:56:35
 **/

#include <bits/stdc++.h>
using namespace std;
// auto mod int
// https://youtu.be/L8grWxBlIZ4?t=9858
// https://youtu.be/ERZuLAxZffQ?t=4807 : optimize
// https://youtu.be/8uowVvQ_-Mo?t=1329 : division
const int mod = 1000000007;
struct mint {
  long long x;  // typedef long long long long;
  mint(long long x = 0) : x((x % mod + mod) % mod) {}
  mint operator-() const { return mint(-x); }
  mint& operator+=(const mint a) {
    if ((x += a.x) >= mod) x -= mod;
    return *this;
  }
  mint& operator-=(const mint a) {
    if ((x += mod - a.x) >= mod) x -= mod;
    return *this;
  }
  mint& operator*=(const mint a) {
    (x *= a.x) %= mod;
    return *this;
  }
  mint operator+(const mint a) const { return mint(*this) += a; }
  mint operator-(const mint a) const { return mint(*this) -= a; }
  mint operator*(const mint a) const { return mint(*this) *= a; }
  mint pow(long long t) const {
    if (!t) return 1;
    mint a = pow(t >> 1);
    a *= a;
    if (t & 1) a *= *this;
    return a;
  }

  // for prime mod
  mint inv() const { return pow(mod - 2); }
  mint& operator/=(const mint a) { return *this *= a.inv(); }
  mint operator/(const mint a) const { return mint(*this) /= a; }
};
istream& operator>>(istream& is, mint& a) { return is >> a.x; }
ostream& operator<<(ostream& os, const mint& a) { return os << a.x; }

int main() {
  cin.tie(0);
  ios_base::sync_with_stdio(false);

  string s;
  mint ans = 0;
  cin >> s;
  int n = s.size();
  string t = s;
  reverse(t.begin(), t.end());
  vector<vector<int>> ns(n + 1, vector<int>(26, n));
  vector<vector<int>> nt(n + 1, vector<int>(26, n));
  for (int i = n - 1; i >= 0; --i) {
    for (int j = 0; j < 26; ++j) ns[i][j] = ns[i + 1][j];
    ns[i][s[i] - 'a'] = i;
  }
  for (int i = n - 1; i >= 0; --i) {
    for (int j = 0; j < 26; ++j) nt[i][j] = nt[i + 1][j];
    nt[i][t[i] - 'a'] = i;
  }
  vector<vector<mint>> dp(n + 1, vector<mint>(n + 1, 0));
  dp[0][0] = 1;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      for (int k = 0; k < 26; ++k) {
        int ni = ns[i][k];
        int nj = nt[j][k];
        if (ni + nj + 2 > n) continue;
        dp[ni + 1][nj + 1] += dp[i][j];
      }
    }
  }
  for (int i = 0; i <= n; ++i) {
    for (int j = 0; i + j <= n; ++j) {
      int num = 1;
      for (int k = 0; k < 26; ++k)
        if (ns[i][k] + 1 + j <= n) ++num;
      ans = (ans + dp[i][j] * num);
    }
  }
  ans = ans - 1;
  cout << ans << endl;
  return 0;
}

