// 最長増加部分列(Longest Increasing Subsequence)
fn main() {
    let n: usize = read();
    let mut a: Vec<i32> = vec![0; n];
    for i in 0..n {
        a[i] = read()
    }
    println!("{}", lis1(&a))
}
#[allow(dead_code)]
// 最長増加部分列 : 計算量O(n)
fn lis1(a: &Vec<i32>) -> i32 {
    let mut s: Vec<i32> = vec![a[0]];
    for i in 1..a.len() {
        if a[i] > *s.last().unwrap() {
            s.push(a[i])
        } else {
            let pos = lower_bound(&s, a[i]);
            s[pos as usize] = a[i];
        }
    }
    s.len() as i32
}
#[allow(dead_code)]
fn lower_bound(s: &Vec<i32>, x: i32) -> i32 {
    let mut left: i32 = -1;
    let mut right: i32 = s.len() as i32;
    while right - left > 1 {
        let mid = (left + right) / 2;
        if s[mid as usize] >= x {
            right = mid;
        } else {
            left = mid;
        }
    }
    right
}
#[allow(dead_code)]
fn read<T: std::str::FromStr>() -> T {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).ok();
    s.trim().parse().ok().unwrap()
}

#[allow(dead_code)]
fn read_vec<T: std::str::FromStr>() -> Vec<T> {
    read::<String>()
        .split_whitespace()
        .map(|e| e.parse().ok().unwrap())
        .collect()
}

#[allow(dead_code)]
fn read_vec2<T: std::str::FromStr>(n: u32) -> Vec<Vec<T>> {
    (0..n).map(|_| read_vec()).collect()
}

