class Node:
    def __init__(self):
        self.parent = -1
        self.child = []
    
def cal_depth(node_id, d = 0):
    Tree[node_id].depth = d
    for ch in Tree[node_id].child:
        cal_depth(ch, d+1)

n = int(input())
Tree = [Node() for _ in range(n)]

for _ in range(n):
    tree_info = list(map(int, input().split()))
    node_id = tree_info[0]
    k = tree_info[1]
    if k > 0:
        child = tree_info[2:]
        Tree[node_id].child = child
        Tree[node_id].type = 'internal node'
    else:
        Tree[node_id].type = 'leaf'

root_id = [i for i, t in enumerate(Tree) if t.parent == -1][0]
Tree[root_id].type = 'root'
cal_depth(root_id)

for i, t in enumerate(Tree):
    print("node {}: parent = {}, depth = {}, {}, {}" 
    .format(i, t.parent, t.depth, t.type, t.child))
