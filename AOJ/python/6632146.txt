 #include <bits/stdc++.h>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <vector>
#include <cstring>
#include <map>
#include <stack>
#include <set>
#include <queue>
using namespace std;
typedef long long int ll;
#define rep(i,a,n) for(int i=a;i<n;i++)
#define repn(i,a,n) for(int i=a;i<=n;i++)
#define per(i,a,n) for(int i=a;i>=n;i--)
#define mem(a,b) memset(a,b,sizeof(a))
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<long double,long double>
#define vl vector<ll>
#define vi vector<int>
#define x first
#define y second
#define eachit(x,y) for(auto x=y.begin();x!=y.end();x++)
#define each(x,y) for(auto& x:y)
#define fastio ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define all(x) (x).begin(), (x).end()
typedef unsigned long long int ull;
#define pb push_back
#define endl '\n'
ll gcd(ll a,ll b){if(b==0)return abs(a);else return gcd(b,a%b);}
ll lcm(ll a,ll b){return a/gcd(a,b)*b;}
const int mod = 998244353;
const ll INFLL=0x3f3f3f3f3f3f3f3fll;
const int INF=0x3f3f3f3f;
const double pi=acos(-1.0);
ll ksm(ll a,ll b)
{ll rec=1;while(b){if(b%2){rec*=a;rec%=mod;}ll tmp=a%mod;a=tmp*tmp;a%=mod;b>>=1;rec%=mod;}rec%=mod;return rec;}
ull fpow(ull a,ull b)
{ull rec=1;while(b){if(b%2){rec*=a;}ull tmp=a;a=tmp*tmp;b>>=1;}return rec;}
double dpow(double a,ll b)
{double rec=1;while(b){if(b%2){rec*=a;}double tmp=a;a=tmp*tmp;b>>=1;}return rec;}
int lowbit(int lowbitn){return lowbitn&(-lowbitn);}
ll lowbit(ll lowbitn){return lowbitn&(-lowbitn);}
using Point = complex<double>;

double f(Point p, Point q, double r)
{
	if (p == q) return 0;
	auto rot = (q - p) / abs(q - p);
	p /= rot; q /= rot;
	double rr = r * r, y = p.imag(), xx = rr - y * y;
	if (xx <= 0) return rr * arg(q / p);
	auto x = sqrt(xx);
	if (q.real() < -x || +x < p.real()) return rr * arg(q / p);
	double a = 0;
	if (p.real() < -x) a += rr * arg(Point(-x, y) / p);
	if (+x < q.real()) a += rr * arg(q / Point(+x, y));
	a -= y * (min(x, q.real()) - max(-x, p.real()));
	return a;
}

int main()
{
	int n;
	double x, y, r;
	cin >> n >> r;
	vector<Point> P(n);
	for (auto& p : P) {
		cin >> x >> y;
		p = {x, y};
	}
	double a = f(P.back(), P[0], r);
	for (int i = 1; i < n; ++i) a += f(P[i - 1], P[i], r);
	cout << fixed << setprecision(12) << 0.5 * a << endl;

	return 0;
}


