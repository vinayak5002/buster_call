//  6_C:クイックソート

#include <stdio.h>


struct card{
    char mark;
    int value;
};

int isStable(struct card in[],struct card out[],int N){
    for (int i=0; i<N; i++) {
        for (int j=i+1; j<N; j++) {
            for (int a=0; a<N; a++) {
                for (int b=a+1; b<N; b++) {
                    if (in[i].value==in[j].value &&
                        in[i].mark==out[b].mark &&
                        in[j].mark==out[a].mark &&
                        in[i].value==out[b].value &&
                        in[j].value==out[a].value) {
                        return 0;
                    }
                }
            }
        }
    }
    return 1;
}

int partition(struct card A[],int p,int r){
    int x = A[r].value;
    int i = p-1;
    struct card a;
    
    for (int j=p; j<r; j++) {
        if (A[j].value <= x) {
            i = i+1;
            a=A[i]; A[i]=A[j]; A[j]=a;
        }
    }
    
    a=A[i+1]; A[i+1]=A[r]; A[r]=a;
    
    return i+1;
}

void quickSort(struct card A[],int p,int r){
    
    int q;
    
    if (p<r) {
        q = partition(A,p,r);
        quickSort(A, p, q-1);
        quickSort(A, q+1, r);
    }
}

int main() {
    struct card C[100000],in[100000];
    int n;
    
    scanf("%d\n",&n);
    for(int i=0;i<n;i++){
        scanf("%c %d\n",&C[i].mark,&C[i].value);
        in[i] = C[i];
    }
    
    quickSort(C,0,n-1);
    
    
    if(isStable(in, C, n))
        puts("Stable");
    else
        puts("Not stable");
    
    //配列を表示
    for(int i=0;i<n;i++)
        printf("%c %d\n",C[i].mark,C[i].value);

    
    return 0;
}

