import sys
from itertools import combinations as comb

def main2(ioi):
    rxs = lambda: map(int, ioi.readline().split())
    N, K, L, R = rxs()
    As = [*rxs()]
    # a = lambda r: 1 if L <= r <= R else 0
    # dp[n][k][r] = dp[n-1][k][r] + dp[n-1][k-1][r+A[n]]
    # dp[n][0][r] = 0
    # dp[n][1][r] = dp[n-1][1][r] + a(r+A[n])
    # dp[0][1][r] = a(r+A[0])
    # dp[1][2][r] = dp[0][1][r+A[1]] = a(r+A[0]+A[1])
    # dp[2][1][r] = dp[1][1][r] + dp[1][0][r+A[2]] = dp[0][1][r] = a(r+A[0])
    # dp[2][2][r] = dp[1][2][r] + dp[1][1][r+A[2]] = a(r+A[0]+A[1]) + a(r+A[0]+A[2]) + a(r+A[2])

    dp = [[{} for _ in range(K+1)] for _ in range(N)]

    def solve(n, k, r):
        if r in dp[n][k]: return dp[n][k][r]
        if (n, k) == (0, 1): return 1 if L-As[n] <= r <= R-As[n] else 0
        if k == 0 or k > n+1: return 0
        if r > R: return 0
        if k == 1:
            ans = dp[n][k][r] = solve(n-1, 1, r) + (1 if L-As[n] <= r <= R-As[n] else 0)
            return ans
        ans = dp[n][k][r] = solve(n-1, k, r) + solve(n-1, k-1, r+As[n])
        return ans

    return solve(N-1, K, 0)

def main(ioi):
    rxs = lambda: map(int, ioi.readline().split())
    N, K, L, R = rxs()
    As = [*rxs()]
    return [L<=sum(a)<=R for a in comb(As, K)].count(True)

DBG = False
if not DBG: print(main(sys.stdin))
else:
    import io
    print(main(io.StringIO("""2 2 1 9
5 1
""")))
    print(main(io.StringIO("""5 2 7 19
3 5 4 2 2
""")))

