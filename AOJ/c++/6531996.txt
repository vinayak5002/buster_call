#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

int main() {
    //まずは出力を受け取る仕組み
    while (1) {
        int N, M;
        //出力を受け取る配列（縦がn、横がm)
        vector<int> a_n(1505), a_m(1505);
        cin >> N >> M;
        
        if (N == 0 && M == 0) break;
        for (int i = 0; i < N; i++)
        {
            cin >> a_n[i];
        }
        for (int i = 0; i < M; i++)
        {
            cin >> a_m[i];
        }
        //辺の長さの取りうる値をすべて集めたような配列を縦(row)横(column)で考える
        vector<int> vr, vc;
        int cnt1 = 0;
        for (int i = 1; i <= N; i++)//まずは辺がi個からできているとき（１個１個の辺の区別は道路で行われているとする）
        {
            for (int j = 0; j < N + 1 - i; j++)//辺のスタートがどこか
            {
                vr.push_back(0);
                for (int k = 0; k < i; k++) {//辺の長さを求めるために足し合わせ
                    vr[cnt1] += a_n[j + k];
                }
                cnt1++;
                //vrの要素を追加していく。indexのためにカウンターのcntを設けた
            }
        }
        //例えばinputが1,1,4だと辺の取りうる値は、1,1,4,(1+1=)2,(1+4)=5,(1+1+4=)6
        //隣合う所では無いと正方形の変にならないことに注意
        int cnt2 = 0;
        for (int i = 1; i <= M; i++)
        {
            for (int j = 0; j < M + 1 - i; j++)
            {
                vc.push_back(0);
                for (int k = 0; k < i; k++) {
                    vc[cnt2] += a_m[j + k];
                }
                cnt2++;
            }
        }
        //sortすることで比較しやすくする。計算量もおとす。
        //上の例でいうとinputが1,1,4のとき、vrはsort前は1,1,4,2,5,6でsort後は1,1,2,4,5,6
        sort(vr.begin(), vr.end());
        sort(vc.begin(), vc.end());

        //ここからはsortしたvr,vcを使って実際に要素を比較して答え(ans)を求める
        //アイデアは、vcの要素を小さい順に見ていって、それがvrにあるかどうかチェックする
        //小さい順に見ていくことで計算量が高々O((定数)×vc.size())になる
        //実装が（個人的には）すごい大変だった
        
        int cntr = 0, cntc = 0;
        int ans = 0;
        while (cntc < vc.size()) {
            int x = 1;
            while (cntc+1< vc.size() && vc[cntc] == vc[cntc + 1]) {
                x++;
                cntc++;
            }
            int y = 0;
            while (cntr < vr.size() && vr[cntr] < vc[cntc]) {
                cntr++;
            }
            while (cntr < vr.size() && vr[cntr] == vc[cntc]) {
                y++;
                cntr++;
            }
            ans += x * y;
            cntc++;
        }
        cout << ans << endl;
    }
    return 0;

}
