#include <iostream>
using namespace std;
//宽度优先搜索 
int map[1005][1005]={0};
int H,W,N;
int book[1005][1005]={0};
int target[10][2]={0};//目标点 
int total_step=0;//总步数 
int direction[4][2]={{1,0},{0,1},{-1,0},{0,-1}};//方向 
void init_book(){
	for(int i=0;i<H;i++)
		for(int j=0;j<W;j++)
			book[i][j]=0;
}
struct point{
	int x;
	int y;
	int step;//步数 
}points[1000005];
int main(){
	cin>>H>>W>>N;
	int startx,starty;//起始点
	char s;
	for(int i=0;i<H;i++){
		for(int j=0;j<W;j++){
			cin>>s;
			if (s>='1' && s<='9') {
				map[i][j]=s-'0';
				target[s-'1'][0]=i;
				target[s-'1'][1]=j;
			}
			else if (s=='.')	map[i][j]=0;
			else {
				if (s=='S'){
					map[i][j]=0;
					startx = i;
					starty = j;
					
				}
				else map[i][j]=-1;
			}
		}
	}
	points[0].x=startx; 
	points[0].y=starty;
	points[0].step=0;
	int endx,endy;//终点
	int start,end;//当前队列中的起始与末尾 
	for (int num=0;num<N;num++){//有多少个工厂就遍历工厂多少次
		//初始化	
		init_book();
		if (num>0){
		points[0].x=target[num-1][0];
		points[0].y=target[num-1][1];
		points[0].step=0;}
		book[points[0].x][points[0].y]=1;
		start=0;
		end=1;
		int flag=0;
		while(start<=end && flag==0){
			//对四个方向进行遍历 
			for(int i=0;i<4;i++){
				int new_x = points[start].x+direction[i][0];
				int new_y = points[start].y+direction[i][1];
				if (new_x<0 || new_x>=H)
					continue;
				if (new_y <0 || new_y>=W)
					continue;
				if (book[new_x][new_y]==0 && map[new_x][new_y]!=-1){
					points[end].x = new_x;
					points[end].y = new_y;
					book[new_x][new_y]=1;
					points[end].step = points[start].step+1;
					end++;
					//如果已经找到目标点，直接停止即可
					if (map[new_x][new_y]==num+1){
						flag=1;
						total_step+=points[end-1].step;
						break;
					} 
				}
			}
			start++;
		}
	}
	cout<<total_step<<endl;
	return 0;
} 
