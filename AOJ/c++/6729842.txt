#include <bits/stdc++.h>
////#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vd = vector<double>;
using vvd = vector<vd>;
using vvvd = vector<vvd>;
#define all(A) A.begin(),A.end()
#define ALL(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}

bool OK = 1;
string S;
map<char, ll> M;

ll dfs(string S) {
    ll n = S.size();
    
    if (S.size() == 1) {
        return M[S[0]];
    }
    ll k = 0;
    rep(i, n) {
        if (S[i] == '[')k++;
        else if (S[i] == ']')k--;
        else if (S[i] == '-' && k == 0) {
            ll A = dfs(S.substr(0, i));
            ll B = dfs(S.substr(i + 1, n - i - 1));
            if (A != 0 && B != 0) {
                OK = 0;
                return -1;
            }
            else {
                return max(A, B) - 1;
            }
        }
    }
    if (S[0] == '[') {
        return dfs(S.substr(1, n - 2));
    }
    return -1;
}

int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    cin >> S;
    ll N = 0;
    rep(i, S.size()) {
        if ('a' <= S[i] && S[i] <= 'z')N++;
    }
    char c;
    rep(i, N) {
        cin >> c;
        ll P;
        cin >> P;
        M[c] = P;
    }
    ll P = dfs(S);
    cout << (P == 0 && OK ? "Yes" : "No") << endl;
}

