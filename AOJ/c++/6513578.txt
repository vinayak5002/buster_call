#include <iostream>
#include <string>
#include <vector>
#include <utility>
#include <cstdio>
#include <limits>

using namespace std;

std::string to_string_my(long long int val)
{
  char buffer[std::numeric_limits<long long int>::digits10 + 1
          + 2]; // '-' + '\0'
  std::sprintf(buffer, "%lld", val);
  return buffer;
}

class My_que{
    private:
    unsigned int q;
    unsigned long long int time{};
    vector<pair<string, unsigned int> > proseses{};
    unsigned long long int index{};
    unsigned long long int size{};
    void start_pro(){
        if(proseses[index].second==0){
            index++;
        }else if(proseses[index].second<=q){
            time+=proseses[index].second;
            cout<<(proseses[index].first+" "+to_string_my(time)+"\n");
            proseses[index].second=0;
            --size;
        }else{
            time+=q;
            proseses[index++].second-=q;
        }
        if(index==proseses.size())index=0;
    }
    public:
    My_que(unsigned int quantum): q{quantum} {}
    ~My_que(){}
    void add(pair<string, long int>& pro){
        proseses.push_back(pro);
        ++size;
    }
    void run(){
        while(proseses.size()!=0){
            start_pro();
            if(size==0)break;
        }
    }
    
};
class Que{
    class Flag{
        const unsigned long long int size;
        unsigned long long int flag{};
        public:
        Flag(unsigned long long int s):size{s}{}
        inline const unsigned long long int& operator()() const {return flag;}
        inline unsigned long long int& operator++(){
            ++flag;
            if(flag==size)return flag=0;
            return flag;
        }
        inline unsigned long long int& operator+=(const int num){
            if(flag+num>=size-1){
                flag=flag+num-(size-1);
            }else{flag+=num;}
            return flag;
        }
    };
    pair<string, unsigned long int>* que;
    Flag head, tail;
    unsigned long long int time{};
    unsigned int q;
    void start_pro(){
        pair<string, unsigned long int>* npro = que+head();
        if(npro->second<=q){
            time+=npro->second;
            cout<<(npro->first+" "+to_string_my(time)+"\n");
            ++head;
        }else{
            time+=q;
            npro->second-=q;
            add(*(npro));
            ++head;
        }
    }
    public:
    Que(unsigned long long int n, unsigned int q_a): 
        head{n}, tail{n}, q{q_a}{que = new pair<string, unsigned long int>[n+1];}
    ~Que(){delete[] que;}
    void add(pair<string, unsigned long int>& p){
        *(que+tail()) = p;
        ++tail;
    }
    void run(){
        while(head()!=tail()){
            start_pro();
        }
    }
};

int main(){
    unsigned long long int n;
    unsigned int q;
    cin>>n>>q;
    Que que(n+1, q);
    string name;
    long t;
    pair<string, long> temp;
    for(unsigned long long int i=0;i<n;++i){
        cin>>name>>t;
        temp={name, t};
        que.add(temp);
    }
    que.run();
}
