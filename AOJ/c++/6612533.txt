#include <stdio.h>

#define SIZE 8

int queens(int *board[], int size, int q_remain);
int q_place(int *board[], int size, int i, int j);
int q_replace(int *board[], int size, int i, int j);

int main(void)
{
    int i, j;
    int k;
    int r, c;
    
    int board[SIZE][SIZE];     /* 位置(r,c) は board[r][c] 個のqueenからthreatened     -1 : (r,c) にqueenあり */
    for(i=0;i<=SIZE-1;i++){for(j=0;j<=SIZE-1;j++){ board[i][j] = 0; }}
    
    scanf("%d", &k);
    for( i = 0 ; i <= k - 1 ; i++ )
    {
        scanf("%d %d", &r, &c);
        if( q_place(board, SIZE, r, c) == -1 ){ return -1; }
    }
    
    if( queens(board, SIZE, SIZE - k) == -1 ){ return -1; }
    
    printf("\n");
    for( j = 0 ; j <= SIZE - 1 ; j++ )
    {
        for( i = 0 ; i <= SIZE - 1 ; i++ )
        {
            if( board[i][j] == -1 ){ printf("Q"); }
            else{ printf("."); }
        }
        printf("\n");
    }
}

int queens(int *board[], int size, int q_remain)
{
    int i, j;
    
    if( q_remain <= 0 ){ return 0; }
    
    for( i = 0 ; i <= size - 1 ; i++ )
    {
        for( j = 0 ; j <= size - 1 ; j++ )
        {
            if( board[i][j] == 0 )
            {
                if( q_place(board, size, i, j) == -1 ){ return -1; }
                
                if( queens(board, size, q_remain-1) == 0 ){ return 0; }
                else{ if( q_replace(board, size, i, j) == -1){ return -1; } }
            }
        }
    }
    
    return -1;
}

int q_place(int *board[], int size, int i, int j)     /* board 上の (i,j) にqueen を設置 */
{
    int n;
    
    if( board[i][j] != 0 ){ return -1; }
    board[i][j] = -1;
    
    for( n = 1 ; n <= size - 1 ; n++ ){ board[(i+n)%size][j]++; }
    for( n = 1 ; n <= size - 1 ; n++ ){ board[i][(j+n)%size]++; }
    for( n = 1 ; i + n > size || j + n > size ; n++ ){ board[i+n][j+n]++; }
    for( n = 1 ; i - n < 0 || j - n < 0 ; n++ ){ board[i-n][j-n]++; }
    for( n = 1 ; i + n > size || j - n < 0 ; n++ ){ board[i+n][j-n]++; }
    for( n = 1 ; i - n < 0 || j + n > size ; n++ ){ board[i-n][j+n]++; }
    
    return 0;
}

int q_replace(int *board[], int size, int i, int j)     /* board 上の (i,j) からqueen を除く */
{
    int n;
    
    if( board[i][j] != -1 ){ return -1; }
    board[i][j] = 0;
    
    for( n = 1 ; n <= size - 1 ; n++ ){ board[(i+n)%size][j]--; }
    for( n = 1 ; n <= size - 1 ; n++ ){ board[i][(j+n)%size]--; }
    for( n = 1 ; i + n > size || j + n > size ; n++ ){ board[i+n][j+n]--; }
    for( n = 1 ; i - n < 0 || j - n < 0 ; n++ ){ board[i-n][j-n]--; }
    for( n = 1 ; i + n > size || j - n < 0 ; n++ ){ board[i+n][j-n]--; }
    for( n = 1 ; i - n < 0 || j + n > size ; n++ ){ board[i-n][j+n]--; }
    
    return 0;
}
