#include <iostream>
#include <vector>
using namespace std;
typedef long long Int;

Int INF = (1LL << 31) - 1;
Int seg[1 << 20], lazy[1 << 20];

void eval(int pos, int sl, int sr) {
  if (lazy[pos] != INF) {
    seg[pos] = lazy[pos];
    if (sr - sl > 1) {
      lazy[pos * 2] = lazy[pos];
      lazy[pos * 2 + 1] = lazy[pos];
    }
    lazy[pos] = INF;
  }
}

void update(int ql, int qr, int x, int sl = 0, int sr = 1 << 19, int pos = 1) {
  eval(pos, sl, sr);
  if (qr <= sl || sr <= ql) return;
  if (ql <= sl && sr <= qr) {
    lazy[pos] = x;
    eval(pos, sl, sr);
    return;
  }
  int sm = (sl + sr) / 2;
  update(ql, qr, x, sl, sm, pos * 2);
  update(ql, qr, x, sm, sr, pos * 2 + 1);
  seg[pos] = min(seg[pos * 2], seg[pos * 2 + 1]);
}

Int get_min(int ql, int qr, int sl = 0, int sr = 1 << 19, int pos = 1) {
  eval(pos, sl, sr);
  if (qr <= sl || sr <= ql) return INF;
  if (ql <= sl && sr <= qr) return seg[pos];

  int sm = (sl + sr) / 2;
  Int lmin = get_min(ql, qr, sl, sm, pos * 2);
  Int rmin = get_min(ql, qr, sm, sr, pos * 2 + 1);
  return min(lmin, rmin);
}

int main() {
  Int n, q, com, s, t, x;
  cin >> n >> q;
  // 初期化
  for (int i = 0; i < (1LL << 20); i++) seg[i] = INF, lazy[i] = INF;

  vector<Int> ans;
  for (int i = 0; i < q; i++) {
    cin >> com;
    if (com == 0) {
      cin >> s >> t >> x;
      update(s, t + 1, x);
    } else {
      cin >> s >> t;
      ans.push_back(get_min(s, t + 1));
    }
  }
  for (auto a : ans) {
    cout << a << endl;
  }
}
