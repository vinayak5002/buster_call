#include <stdio.h>
#include <limits.h>
#define H_LEN 524288

void print_heap(int h[], int index, int n)
{
    printf("node %d: key = %d, ", index, h[index]);
    if (index != 1)
    {
        printf("parent key = %d, ", h[index / 2]);
    }
    if (2 * index <= n)
    {
        printf("left key = %d, ", h[2 * index]);
    }
    if (2 * index + 1 <= n)
    {
        printf("right key = %d, ", h[index * 2 + 1]);
    }
    printf("\n");
}

void swap(int A[], int i, int j)
{
    int temp = A[i];
    A[i] = A[j];
    A[j] = temp;
}

void maxHeapify(int A[], int i, int n)
{
    int largest;
    int l = 2 * i;
    int r = l + 1;
    if (l <= n && A[l] > A[i])
    {
        largest = l;
    }
    else
    {
        largest = i;
    }

    if (r <= n && A[r] > A[largest])
    {
        largest = r;
    }

    if (largest != i)
    {
        swap(A, i, largest);
        maxHeapify(A, largest, n);
    }
}

void buildMaxHeap(int A[], int n)
{
    for (int i = n / 2; i >= 1; i--)
    {
        maxHeapify(A, i, n);
    }
}

int main(void)
{
    int H[H_LEN];
    int n, temp;
    scanf("%d", &n);
    for (int i = 1; i <= n; i++)
    {
        scanf("%d", &temp);
        H[i] = temp;
    }

    buildMaxHeap(H, n);
    for (int i = 1; i <= n; i++)
    {
        printf(" %d", H[i]);
    }
    printf("\n");

    return 0;
}

