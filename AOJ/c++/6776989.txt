#include <bits/stdc++.h>
using namespace std;
const double eps = 0.00001;
const double INF = 10000;
struct point{
  double x, y;
  point(){
  }
  point(double x, double y): x(x), y(y){
  }
  point operator +(point P){
    return point(x + P.x, y + P.y);
  }
  point operator -(point P){
    return point(x - P.x, y - P.y);
  }
  point operator *(double k){
    return point(x * k, y * k);
  }
  point operator /(double k){
    return point(x / k, y / k);
  }
};
point rotate(point P, double t){
  return point(P.x * cos(t) - P.y * sin(t), P.x * sin(t) + P.y * cos(t));
}
double abs(point P){
  return sqrt(P.x * P.x + P.y * P.y);
}
double dot(point P, point Q){
  return P.x * Q.x + P.y * Q.y;
}
double cross(point P,  point Q){
  return P.x * Q.y - P.y * Q.x;
}
struct line{
  point A, B;
  line(point A, point B): A(A), B(B){
  }
};
point vec(line L){
  return L.B - L.A;
}
bool point_on_line(point P, line L){
  return abs(cross(vec(L), P - L.A)) < eps;
}
bool is_parallel(line L1, line L2){
  return abs(cross(vec(L1), vec(L2))) < eps;
}
bool is_same(line L1, line L2){
  return point_on_line(L2.A, L1) && point_on_line(L2.B, L1);
}
point line_intersection(line L1, line L2){
  return L1.A + vec(L1) * cross(L2.A - L1.A, vec(L2)) / cross(vec(L1), vec(L2));
}
bool point_on_segment(point P, line L){
  return point_on_line(P, L) && dot(P - L.A, vec(L)) > 0 && dot(P - L.B, vec(L)) < 0;
}
bool point_in_polygon(point P, vector<point> A){
  int N = A.size();
  line L1(P, point(P.x, INF));
  int cnt = 0;
  for (int i = 0; i < N; i++){
    int j = (i + 1) % N;
    line L2(A[i], A[j]);
    point X = line_intersection(L1, L2);
    if (point_on_segment(X, L1) && point_on_segment(X, L2)){
      cnt++;
    }
  }
  return cnt % 2 == 1;
}
int main(){
  int N;
  cin >> N;
  vector<int> C(N);
  vector<vector<point>> A(N);
  for (int i = 0; i < N; i++){
    cin >> C[i];
    A[i].resize(C[i]);
    for (int j = 0; j < C[i]; j++){
      cin >> A[i][j].x >> A[i][j].y;
    }
  }
  int Q;
  cin >> Q;
  vector<point> S(Q), T(Q);
  for (int i = 0; i < Q; i++){
    cin >> S[i].x >> S[i].y >> T[i].x >> T[i].y;
  }
  for (int i = 0; i < N; i++){
    for (int j = 0; j < C[i]; j++){
      A[i][j] = rotate(A[i][j], 0.01);
    }
  }
  for (int i = 0; i < Q; i++){
    S[i] = rotate(S[i], 0.01);
    T[i] = rotate(T[i], 0.01);
  }
  vector<line> L;
  for (int i = 0; i < N; i++){
    for (int j = 0; j < C[i]; j++){
      int k = (j + 1) % C[i];
      L.push_back(line(A[i][j], A[i][k]));
    }
  }
  int Lcnt = L.size();
  vector<double> X;
  for (int i = 0; i < N; i++){
    for (int j = 0; j < C[i]; j++){
      X.push_back(A[i][j].x);
    }
  }
  for (int i = 0; i < Q; i++){
    X.push_back(S[i].x);
    X.push_back(T[i].x);
  }
  for (int i = 0; i < Lcnt; i++){
    for (int j = i + 1; j < Lcnt; j++){
      if (!is_parallel(L[i], L[j])){
        point P = line_intersection(L[i], L[j]);
        if (point_on_segment(P, L[i]) && point_on_segment(P, L[j])){
          X.push_back(P.x);
        }
      }
    }
  }
  sort(X.begin(), X.end());
  vector<double> X2;
  X2.push_back(X[0]);
  for (int i = 1; i < X.size(); i++){
    if (X[i] - X[i - 1] > eps){
      X2.push_back(X[i]);
    }
  }
  X = X2;
  int M = X.size();
  vector<vector<double>> Y(M);
  for (int i = 0; i < Lcnt; i++){
    int l = lower_bound(X.begin(), X.end(), min(L[i].A.x, L[i].B.x) - eps) - X.begin();
    int r = lower_bound(X.begin(), X.end(), max(L[i].A.x, L[i].B.x) - eps) - X.begin();
    for (int j = l; j <= r; j++){
      point P = line_intersection(L[i], line(point(X[j], 0), point(X[j], 1)));
      Y[j].push_back(P.y);
    }
  }
  for (int i = 0; i < M; i++){
    if (!Y[i].empty()){
      int cnt = Y[i].size();
      sort(Y[i].begin(), Y[i].end());
      vector<double> Y2;
      Y2.push_back(Y[i][0]);
      for (int j = 1; j < cnt; j++){
        if (Y[i][j] - Y[i][j - 1] > eps){
          Y2.push_back(Y[i][j]);
        }
      }
      Y[i] = Y2;
    }
  }
  vector<vector<pair<int, int>>> L2(M + 1);
  for (int i = 0; i < Lcnt; i++){
    int l = lower_bound(X.begin(), X.end(), min(L[i].A.x, L[i].B.x) - eps) - X.begin();
    int r = lower_bound(X.begin(), X.end(), max(L[i].A.x, L[i].B.x) - eps) - X.begin();
    for (int j = l; j < r; j++){
      point P1 = line_intersection(L[i], line(point(X[j], 0), point(X[j], 1)));
      point P2 = line_intersection(L[i], line(point(X[j + 1], 0), point(X[j + 1], 1)));
      int p1 = lower_bound(Y[j].begin(), Y[j].end(), P1.y - eps) - Y[j].begin();
      int p2 = lower_bound(Y[j + 1].begin(), Y[j + 1].end(), P2.y - eps) - Y[j + 1].begin();
      L2[j + 1].push_back(make_pair(p1, p2));
    }
  }
  for (int i = 0; i <= M; i++){
    sort(L2[i].begin(), L2[i].end());
    L2[i].erase(unique(L2[i].begin(), L2[i].end()), L2[i].end());
  }
  vector<int> sum(M + 2);
  sum[0] = 0;
  for (int i = 0; i <= M; i++){
    sum[i + 1] = sum[i] + L2[i].size() + 1;
  }
  int V = sum[M + 1];
  vector<int> con(V, 0);
  for (int i = 0; i <= M; i++){
    int cnt = L2[i].size();
    for (int j = 1; j < cnt; j++){
      double px = (X[i - 1] + X[i]) / 2;
      double py = (Y[i - 1][L2[i][j - 1].first] + Y[i - 1][L2[i][j].first] + Y[i][L2[i][j - 1].second] + Y[i][L2[i][j].second]) / 4;
      point P(px, py);
      for (int k = 0; k < N; k++){
        if (point_in_polygon(P, A[k])){
          con[sum[i] + j]++;
        }
      }
    }
  }
  vector<vector<pair<int, int>>> E(V);
  for (int i = 0; i <= M; i++){
    int cnt = L2[i].size();
    for (int j = 0; j < cnt - 1; j++){
      int u = sum[i] + j;
      int v = sum[i] + j + 1;
      int c = abs(con[u] - con[v]);
      E[u].push_back(make_pair(c, v));
      E[v].push_back(make_pair(c, u));
    }
  }
  for (int i = 0; i < M; i++){
    int cnt = Y[i].size();
    vector<int> id1(cnt + 1), id2(cnt + 1);
    int cnt1 = L2[i].size(), cnt2 = L2[i + 1].size();
    if (cnt1 == 0){
      id1 = vector<int>(cnt + 1, sum[i]);
    } else {
      for (int j = 0; j <= L2[i][0].second; j++){
        id1[j] = sum[i];
      }
      for (int j = 0; j < cnt1 - 1; j++){
        for (int k = L2[i][j].second + 1; k < L2[i][j + 1].second + 1; k++){
          id1[k] = sum[i] + j + 1;
        }
      }
      for (int j = L2[i][cnt1 - 1].second + 1; j <= cnt; j++){
        id1[j] = sum[i] + cnt1;
      }
    }
    if (cnt2 == 0){
      id2 = vector<int>(cnt + 1, sum[i + 1]);
    } else {
      for (int j = 0; j <= L2[i + 1][0].first; j++){
        id2[j] = sum[i + 1];
      }
      for (int j = 0; j < cnt2 - 1; j++){
        for (int k = L2[i + 1][j].first + 1; k <= L2[i + 1][j + 1].first; k++){
          id2[k] = sum[i + 1] + j + 1;
        }
      }
      for (int j = L2[i + 1][cnt2 - 1].first + 1; j <= cnt; j++){
        id2[j] = sum[i + 1] + cnt2;
      }
    }
    for (int j = 0; j <= cnt; j++){
      int c = abs(con[id1[j]] - con[id2[j]]);
      E[id1[j]].push_back(make_pair(c, id2[j]));
      E[id2[j]].push_back(make_pair(c, id1[j]));
    }
  }
  for (int i = 0; i < Q; i++){
    int xs = lower_bound(X.begin(), X.end(), S[i].x - eps) - X.begin();
    int xt = lower_bound(X.begin(), X.end(), T[i].x - eps) - X.begin();
    int s;
    int cnt1 = L2[xs].size();
    if (cnt1 == 0){
      s = sum[xs];
    } else if (S[i].y < Y[xs][0]){
      s = sum[xs];
    } else if (S[i].y > Y[xs][Y[xs].size() - 1]){
      s = sum[xs] + cnt1;
    } else {
      for (int j = 0; j < cnt1 - 1; j++){
        if (Y[xs][L2[xs][j].second] < S[i].y && S[i].y < Y[xs][L2[xs][j + 1].second]){
          s = sum[xs] + j + 1;
        }
      }
    }
    int t;
    int cnt2 = L2[xt].size();
    if (cnt2 == 0){
      t = sum[xt];
    } else if (T[i].y < Y[xt][0]){
      t = sum[xt];
    } else if (T[i].y > Y[xt][Y[xt].size() - 1]){
      t = sum[xt] + cnt2;
    } else {
      for (int j = 0; j < cnt2 - 1; j++){
        if (Y[xt][L2[xt][j].second] < T[i].y && T[i].y < Y[xt][L2[xt][j + 1].second]){
          t = sum[xt] + j + 1;
        }
      }
    }
    vector<int> d(V, -1);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push(make_pair(0, s));
    while (!pq.empty()){
      int c = pq.top().first;
      int v = pq.top().second;
      pq.pop();
      if (d[v] == -1){
        d[v] = c;
        for (auto P : E[v]){
          int w = P.second;
          pq.push(make_pair(c + P.first, w));
        }
      }
    }
    cout << d[t] << endl;
  }
}
