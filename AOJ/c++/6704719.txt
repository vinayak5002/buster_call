######################
# AtCoderテンプレ
import sys
from collections import deque, defaultdict, Counter
from bisect import bisect, bisect_left, bisect_right, insort_left
from heapq import heappop, heappush, heappushpop, heapify
from itertools import combinations, permutations, accumulate
from math import gcd, ceil, floor, sqrt, factorial
from functools import lru_cache

sys.setrecursionlimit(10**7)
mod = 998244353
MOD = 1000000007
INF = float("inf")
arrays = [(-1, 0), (0, 1), (1, 0), (0, -1)]

input = sys.stdin.readline
def ii(): return int(input())
def fi(): return float(input())
def si(): return input().rstrip()
def mii(): return map(int, input().split())
def mfi(): return map(float, input().split())
def mi1i(): return map(lambda x: int(x) - 1, input().split())

def lmii(): return list(map(int, input().split()))
def lmi1i(): return list(map(lambda x: int(x) - 1, input().split()))
def lmfi(): return list(map(float, input().split()))
def lsi(): return list(input().rstrip())
def lmsi(): return list(map(str, input().split()))

def iir(n): return [int(input()) for _ in range(n)]
def fir(n): return [float(input()) for _ in range(n)]
def isr(n): return [input().rstrip() for _ in range(n)]

def lmiir(n): return [list(map(int, input().split())) for _ in range(n)]
def lmi1ir(n): return [list(map(lambda x: int(x) - 1, input().split())) for _ in range(n)]
def lmfir(n): return [list(map(float, input().split())) for _ in range(n)]
def lsir(n): return [list(input().rstrip()) for _ in range(n)]

def lii_alp(): return list(map(lambda x: ord(x) - 97, input().rstrip()))
def lii_ALP(): return list(map(lambda x: ord(x) - 65, input().rstrip()))
# テンプレここまで
##########################

class UnionFind:
    def __init__(self, n):
        self.n = n
        self.parents = [-1] * n

    def find(self, x):
        if self.parents[x] < 0:
            return x
        else:
            self.parents[x] = self.find(self.parents[x])
            return self.parents[x]

    def union(self, x, y):
        x = self.find(x)
        y = self.find(y)

        if x == y:
            return

        if self.parents[x] > self.parents[y]:
            x, y = y, x

        self.parents[x] += self.parents[y]
        self.parents[y] = x

    def size(self, x):
        return -self.parents[self.find(x)]

    def same(self, x, y):
        return self.find(x) == self.find(y)

    def members(self, x):
        root = self.find(x)
        return [i for i in range(self.n) if self.find(i) == root]

    def roots(self):
        return [i for i, x in enumerate(self.parents) if x < 0]

    def group_count(self):
        return len(self.roots())

    def all_group_members(self):
        group_members = defaultdict(list)
        for member in range(self.n):
            group_members[self.find(member)].append(member)
        return group_members

    def __str__(self):
        return '\n'.join(f'{r}: {m}' for r, m in self.all_group_members().items())

v, e = mii()
h = []
for _ in range(e):
    s, t, w = mii()
    heappush(h, [w, s, t])

UF = UnionFind(v)
ans = 0

for _ in range(e):
    w_i, s_i, t_i = heappop(h)
    if UF.same(s_i, t_i):
        continue
    else:
        ans += w_i
        UF.union(s_i, t_i)

print(ans)

