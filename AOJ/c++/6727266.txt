#include<bits/stdc++.h>
using namespace std;

struct dsu {
  public:
    dsu() : _n(0) {}
    dsu(int n) : _n(n), parent_or_size(n, -1) {}

    int merge(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        int x = leader(a), y = leader(b);
        if (x == y) return x;
        if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);
        parent_or_size[x] += parent_or_size[y];
        parent_or_size[y] = x;
        return x;
    }

    bool same(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        return leader(a) == leader(b);
    }

    int leader(int a) {
        assert(0 <= a && a < _n);
        if (parent_or_size[a] < 0) return a;
        return parent_or_size[a] = leader(parent_or_size[a]);
    }

    int size(int a) {
        assert(0 <= a && a < _n);
        return -parent_or_size[leader(a)];
    }

    std::vector<std::vector<int>> groups() {
        std::vector<int> leader_buf(_n), group_size(_n);
        for (int i = 0; i < _n; i++) {
            leader_buf[i] = leader(i);
            group_size[leader_buf[i]]++;
        }
        std::vector<std::vector<int>> result(_n);
        for (int i = 0; i < _n; i++) {
            result[i].reserve(group_size[i]);
        }
        for (int i = 0; i < _n; i++) {
            result[leader_buf[i]].push_back(i);
        }
        result.erase(
            std::remove_if(result.begin(), result.end(),
                           [&](const std::vector<int>& v) { return v.empty(); }),
            result.end());
        return result;
    }

  private:
    int _n;
    // root node: -1 * component size
    // otherwise: parent
    std::vector<int> parent_or_size;
};

int main(){
    int n;
    while(cin >> n, n){
        vector<string> s(n);
        vector<vector<string>> tb;
        map<string,int> mp;
        dsu uf;
        auto parse = [&](string s){
            for(int i = 0, pre = 0; i < s.size(); i++){
                if(s[i] == ':'){
                    string t = s.substr(0, i);
                    pre = i + 1;
                    mp[t] = tb.size();
                    tb.push_back(vector<string>());
                }else if(s[i] == ',' || s[i] == '.'){
                    string t = s.substr(pre, i - pre);
                    pre = i + 1;
                    tb.back().push_back(t);
                }
            }
        };
        function<void(int)> dfs = [&](int pos){
            for(int i = 0; i < tb[pos].size(); i++){
                if(mp.find(tb[pos][i]) == mp.end())continue;
                int v = mp[tb[pos][i]];
                uf.merge(pos, v);
                dfs(v);
            }
        };
        for(int i = 0; i < n; i++){
            cin >> s[i];
            parse(s[i]);
        }
        uf = dsu(tb.size());
        dfs(0);
        set<string> S;
        for(int i = 0; i < tb.size(); i++){
            if(!uf.same(0, i))continue;
            for(auto &&t:tb[i]){
                if(mp.find(t) == mp.end())S.insert(t);
            }
        }
        cout << S.size() << '\n';
    }
}
