#include <iostream>
#include <array>
#include <cmath>
#include <vector>
#include <algorithm>

//////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////     HEADER    ///////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
constexpr double EPS = 1e-10;
#define fequal(a, b) (fabs((a) - (b)) < EPS)

class Point2D
{
public:
    Point2D(double X = 0, double Y = 0) : x(X), y(Y) {}
    Point2D(std::istream &is) { is >> x >> y; };

    inline void read(std::istream &is) { is >> x >> y; };

    inline double X() const { return x; };
    inline double Y() const { return y; };

    inline Point2D operator+(const Point2D &p) const { return Point2D{x + p.x, y + p.y}; };
    inline Point2D operator-(const Point2D &p) const { return Point2D{x - p.x, y - p.y}; };

    inline bool operator==(const Point2D &p) const { return fequal(x, p.x) && fequal(y, p.y); };
    inline bool operator!=(const Point2D &p) const { return !(*this == p); };

    inline double distance(const Point2D &p) const { return std::sqrt((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y)); };

    inline double elevation_angle(const Point2D &p) const { return std::atan2(p.x - x, p.y - y); };

    inline void print() const { printf("%f %f\n", x, y); };

private:
    double x, y;
};

class Vector2D
{
public:
    Vector2D(double x, double y) : x(x), y(y) {}
    Vector2D(const Point2D &p_start, const Point2D &p_end) : x(p_end.X() - p_start.X()), y(p_end.Y() - p_start.Y()) {}

    inline double X() const { return x; };
    inline double Y() const { return y; };

    inline Vector2D operator+(const Vector2D &v) const { return Vector2D(x + v.x, y + v.y); };
    inline Vector2D operator-(const Vector2D &v) const { return Vector2D(x - v.x, y - v.y); };
    inline Vector2D operator*(double k) const { return Vector2D(x * k, y * k); };
    inline Vector2D operator/(double k) const { return Vector2D(x / k, y / k); };

    inline double dot(const Vector2D &v) const { return x * v.x + y * v.y; };
    inline double cross(const Vector2D &v) const { return x * v.y - y * v.x; };
    inline double norm() const { return std::sqrt(x * x + y * y); };
    inline Vector2D unit() const { return (*this) / norm(); };

    inline bool parallel(const Vector2D &v) const { return fequal(cross(v), 0); };
    inline bool orthogonal(const Vector2D &v) const { return fequal(dot(v), 0); };

    double subtended_angle(const Vector2D &v) const { return std::acos(dot(v) / (norm() * v.norm())); };

private:
    double x, y;
};

enum ClockWise
{
    ON_SEGMENT = 0,
    CLOCKWISE = -1,
    COUNTER_CLOCKWISE = 1,
    ONLINE_FRONT = -2,
    ONLINE_BACK = 2,
};

ClockWise counter_clockwise(const Point2D &p0, const Point2D &p1, const Point2D &p2)
{
    auto v_p0_p1 = Vector2D(p0, p1);
    auto v_p0_p2 = Vector2D(p0, p2);

    if (v_p0_p1.cross(v_p0_p2) > 0.0)
        return COUNTER_CLOCKWISE;
    if (v_p0_p1.cross(v_p0_p2) < 0.0)
        return CLOCKWISE;
    if (v_p0_p1.dot(v_p0_p2) < 0.0)
        return ONLINE_BACK;
    if (v_p0_p1.norm() + EPS < v_p0_p2.norm())
        return ONLINE_FRONT;
    return ON_SEGMENT;
};

class Segment2D
{
public:
    Segment2D(const Point2D &p_start, const Point2D &p_end) : s(p_start), e(p_end) {}

    inline Point2D S() const { return s; };
    inline Point2D E() const { return e; };
    inline Vector2D vec() const { return Vector2D(s, e); };
    inline double len() const { return s.distance(e); };

    inline Segment2D operator+(const Segment2D &seg) const { return Segment2D(s + seg.s, e + seg.e); };
    inline Segment2D operator-(const Segment2D &seg) const { return Segment2D(s - seg.s, e - seg.e); };

    inline bool parallel(const Segment2D &seg) const { return vec().parallel(seg.vec()); };
    inline bool orthogonal(const Segment2D &seg) const { return vec().orthogonal(seg.vec()); };

    inline bool include(const Point2D &p) const
    {
        const double sum_dist = p.distance(s) + p.distance(e);
        return fequal(sum_dist, len());
    };

    bool intercect(const Segment2D &seg) const
    {
        if (counter_clockwise(seg.S(), seg.E(), s) * counter_clockwise(seg.s, seg.E(), e) <= 0 && counter_clockwise(s, e, seg.S()) * counter_clockwise(s, e, seg.E()) <= 0)
            return true;

        return false;
    };

    Point2D projection(const Point2D &p) const
    {
        double t = Vector2D(s, p).dot(vec()) / vec().dot(vec());
        Vector2D v = vec() * t;

        return Point2D(s.X() + v.X(), s.Y() + v.Y());
    };

    Point2D reflect(const Point2D &p) const
    {
        Point2D p_proj = projection(p);
        Vector2D v(p, p_proj);
        return Point2D(p_proj.X() + v.X(), p_proj.Y() + v.Y());
    };

    double distance(const Point2D &p) const
    {
        if (include(p))
            return 0;

        Point2D p_proj = projection(p);

        if (include(p_proj))
            return p.distance(p_proj);

        return std::min(s.distance(p), e.distance(p));
    };

    double distance(const Segment2D &seg)
    {
        if (intercect(seg))
            return 0;

        return std::min({distance(seg.s), distance(seg.e), seg.distance(s), seg.distance(e)});
    };

private:
    Point2D s;
    Point2D e;
};

class Polygon2D
{
public:
    Polygon2D(const int Npoints) : N(Npoints), points(Npoints){};

    inline int get_N() const { return points.size(); };

    inline void set_point(const int index, const Point2D &p) { points[index] = p; };
    inline void push_back(const Point2D &p) { points.push_back(p); };

    inline Point2D operator[](const int index) const { return points[index]; };

    double area() const
    {
        double sum = 0;
        for (int i = 0; i < N; i++)
            sum += points[i].X() * points[(i + 1) % N].Y() - points[i % N].Y() * points[(i + 1) % N].X();

        return abs(sum) / 2.0;
    }

    bool is_convex() const
    {
        for (int i = 0; i < N; i++)
        {
            Point2D p0 = points[i % N];
            Point2D p1 = points[(i + 1) % N];
            Point2D p2 = points[(i + 2) % N];

            Vector2D v1(p1, p0);
            Vector2D v2(p1, p2);

            double sub_angle = v1.subtended_angle(v2);

            if (v1.cross(v2) > 0)
                sub_angle = 2 * M_PI - sub_angle;

            if (sub_angle > M_PI)
                return false;
        }
        return true;
    }

    bool is_contain(const Point2D &p) const
    {
        if (is_on_side(p))
            return false;

        double sum_angle = 0;
        for (int i = 0; i < N; i++)
        {
            Point2D p0 = points[i % N];
            Point2D p1 = points[(i + 1) % N];

            Vector2D v1(p, p0);
            Vector2D v2(p, p1);

            double sub_angle = v1.subtended_angle(v2);

            if (v1.cross(v2) < 0)
                sub_angle = -sub_angle;

            if (v1.parallel(v2))
                sub_angle = 0;

            sum_angle += sub_angle;
        }

        if (sum_angle < 1e-3)
            return false;

        return true;
    }

    bool is_on_side(const Point2D &p) const
    {
        for (int i = 0; i < N; i++)
        {
            Point2D p0 = points[i % N];
            Point2D p1 = points[(i + 1) % N];

            if (Segment2D(p0, p1).include(p))
                return true;
        }
        return false;
    }

private:
    int N;
    std::vector<Point2D> points;
};

;


int main()
{
    int n;
    std::cin >> n;

    std::vector<Point2D> pnts(n);
    for (auto &pnt : pnts)
        pnt.read(std::cin);

    // std::sort(pnts.begin(), pnts.end(), [](const Point2D &lhs, const Point2D &rhs)
    //           { return lhs.X() + lhs.Y() < rhs.X() + rhs.Y(); });

    Point2D min_pnt = *std::min_element(pnts.begin(), pnts.end(), [](const Point2D &lhs, const Point2D &rhs)
                                        { return lhs.X() + lhs.Y() < rhs.X() + rhs.Y(); });

    std::sort(pnts.begin(), pnts.end(), [&min_pnt](const Point2D &lhs, const Point2D &rhs)
              { return lhs.elevation_angle(min_pnt) > rhs.elevation_angle(min_pnt); });

    // for (auto &pnt : pnts)
    //     pnt.print();

    std::vector<Point2D> convex_hull = {pnts[0], pnts[1]};
    for (int i = 2; i < n; i++)
    {
        Point2D p0 = convex_hull[convex_hull.size() - 2];
        Point2D p1 = convex_hull[convex_hull.size() - 1];
        Point2D p2 = pnts[i];

        // std::cout << p0.X() << " " << p0.Y() << " "
        //           << p1.X() << " " << p1.Y() << " "
        //           << p2.X() << " " << p1.Y() << " "
        //           << counter_clockwise(p0, p1, p2) << std::endl;

        if (counter_clockwise(p0, p1, p2) == ClockWise::COUNTER_CLOCKWISE ||
            counter_clockwise(p0, p1, p2) == ClockWise::ONLINE_FRONT)
        {
            convex_hull.push_back(p2);
        }
        else
        {
            convex_hull.pop_back();
            convex_hull.push_back(p2);
        }
    }

    std::cout << convex_hull.size() << std::endl;

    for (auto &p : convex_hull)
        p.print();
}
