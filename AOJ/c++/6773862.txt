#include <iostream>
#include <vector>
#include <set>

using namespace std;

struct edge
{
    int to;
    int weight;
    bool operator<(const edge &e) const
    {
        return this->weight < e.weight;
    }
    edge(int to = 0, int weight = 0) : to(to), weight(weight) {}
};

vector<vector<edge>> G;
pair<int, vector<edge>> dfs(int now, int end, vector<edge> selected, set<int> visited, int min)
{
    if (now == end)
    {
        return make_pair(min, selected);
    }
    for (auto next : G[now])
    {
        if (visited.find(next.to) == visited.end() && next.weight > 0)
        {
            min = std::min(min, next.weight);
            selected.push_back(next);
            visited.insert(next.to);
            auto val = dfs(next.to, end, selected, visited, min);
            if (val.first != -1)
            {
                return val;
            }
            selected.erase(selected.end() - 1);
            visited.erase(next.to);
        }
    }
    return make_pair(-1, selected);
}

int main()
{
    int v, e;
    cin >> v >> e;
    G.resize(v, vector<edge>(0));
    vector<edge> start;
    for (int i = 0; i < e; i++)
    {
        int from, to, weight;
        cin >> from >> to >> weight;
        G[from].push_back(edge(to, weight));
        G[to].push_back(edge(from, 0));
        if (from == 0)
        {
            start.push_back(edge(to, weight));
        }
    }
    pair<int, vector<edge>> returnval;
    do
    {
        returnval = dfs(0, v - 1, vector<edge>(), set<int>{0}, int(10000));
        int next = 0;
        for (auto e : returnval.second)
        {
            int from = next;
            next = e.to;
            for (int i = 0; i < G[from].size(); i++)
            {
                if (next != G[from][i].to)
                {
                    continue;
                }
                G[from][i] = edge(G[from][i].to, G[from][i].weight - returnval.first);
            }
            for (int i = 0; i < G[e.to].size(); i++)
            {
                if (from != G[e.to][i].to)
                {
                    continue;
                }
                G[e.to][i] = edge(G[e.to][i].to, G[e.to][i].weight + returnval.first);
            }
        }
    } while (returnval.first > 0);
    int ans = 0;
    for (int i = 0; i < start.size(); i++)
    {
        ans += start[i].weight - G[0][i].weight;
    }
    cout << ans << endl;
    return 0;
}
