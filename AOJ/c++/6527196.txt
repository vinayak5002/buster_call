#include <iostream>
#include <vector>
#include <cmath>
#include <iomanip>
#include <limits>

using namespace std;

const long double pi=3.14159265359;

struct point{
    long double x, y;
    point(long double a, long double b): x{a}, y{b}{}
    point():point{0,0}{}
};
ostream& operator<<(ostream& os, point p){
    return os<< std::fixed << std::setprecision(8)<<p.x<<" "<<p.y<<endl;
}
long double calc_d(const point& a, const point& b){
    long double dis_pow2=pow(a.x-b.x, 2)+pow(a.y-b.y,2);
    return sqrt(dis_pow2);
}
point calc_p(const point& left, const point& right){
    point mid;
    long double dis=calc_d(left, right);
    long double tan_lr=(right.y-left.y)/(right.x-left.x);
    long double rad_lr=atan(tan_lr);
    long double rad_lm=rad_lr+(pi/3);
    mid.x=left.x+dis*cos(rad_lm);
    mid.y=left.y+dis*sin(rad_lm);
    return mid;
}
void cough(int times, vector<point>& vec){
    for(int i=0; i<times; ++i){
        int x=0;
        for(int k=0;k<vec.size()-1;k+=4){
            auto p=(begin(vec)+k);
            point left{(p->x*2+(p+1)->x)/3, (p->y*2+(p+1)->y)/3};
            point right{(p->x+(p+1)->x*2)/3, (p->y+(p+1)->y*2)/3};
            point mid=calc_p(left, right);
            vec.insert(p+1, {left, mid, right});
        }
    }
}
int main(){
    int n;
    cin>>n;
    vector<point> vec{{0.0, 0.0}, {100.0, 0.0}};
    cough(n, vec);
    for(auto x: vec){
        cout<<x;
    }
}
