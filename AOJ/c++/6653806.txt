#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline double time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n,m,X; cin >> n >> m >> X;
    vector<int> k(n);
    for(int i=0;i<n;i++){
        cin >> k[i];
    }
    sort(k.begin(), k.end());
    vector<ll> s(m+1);
    for(int i=1;i<=m;i++){
        cin >> s[i];
        s[i] += s[i-1];
    }
    vector<vector<ll>> dp(n,vector<ll>(n,-1));
    auto calc = [&](auto calc,int l,int r)->ll{
        if(dp[l][r] != -1){
            return dp[l][r];
        }
        ll res = 1LL<<60;
        // これはindex
        int L = min(l,r);
        int R = max(l,r);
        if(L == 0){
            ll sum = s[k[R]] - s[k[L]-1];
            res = sum/X; 
        }
        else{
            int nxt = L-1;
            // leftに追加
            {
                ll sum = s[k[l]] - s[k[nxt]-1];
                res = min(res, calc(calc,nxt,r)+sum/X);
            }
            // rightに追加
            {
                ll sum = s[k[r]] - s[k[nxt]-1];
                res = min(res, calc(calc,l,nxt)+sum/X);
            }
        }
        dp[l][r] = res;
        return res;
    };
    cout << calc(calc,n-1,n-1) << endl;
}

