#include <bits/stdc++.h>

using namespace std;

vector<int> compose(const vector<int>& p, const vector<int>& q) {
    assert(p.size() == q.size());
    int n = p.size();
    vector<int> r(n);
    for (int i = 0; i < n; ++i) {
        r[i] = p[q[i]];
    }
    return r;
}
vector<int> pow(vector<int> p, long long k) {
    int n = p.size();
    vector<int> res(n);
    iota(res.begin(), res.end(), 0);
    for (; k; k >>= 1) {
        if (k & 1) res = compose(res, p);
        p = compose(p, p);
    }
    return res;
}

bool is_digit(char c) {
    return '0' <= c and c <= '9';
}

pair<int, int> read_int(const string& s, int i) {
    int j = i;
    while (is_digit(s[j])) ++j;
    return { stoi(s.substr(i, j - i)), j };
}

int main() {
    int n, k;
    cin >> n >> k;

    array<vector<int>, 256> ps{};
    for (int i = 0; i < k; ++i) {
        char id;
        cin >> id;
        int h;
        cin >> h;
        
        vector<int> p(n);
        iota(p.begin(), p.end(), 0);
        for (int j = 0; j < h - 1; ++j) {
            for (int c = 0; c < n - 1; ++c) {
                int g;
                cin >> g;
                if (g == 1) swap(p[c], p[c + 1]);
            }
        }
        ps[id] = move(p);
    }

    int m;
    cin >> m;
    for (int i = 0; i < m; ++i) {
        string s;
        cin >> s;
        int l = s.size();
        vector<int> rp(l, -1);
        vector<int> st;
        for (int pos = 0; pos < l; ++pos) {
            if (s[pos] == '(') {
                st.push_back(pos);
            } else if (s[pos] == ')') {
                rp[st.back()] = pos;
                st.pop_back();
            }
        }
        auto scan = [&](auto scan, int l, int r) -> vector<int> {
            vector<int> res(n);
            iota(res.begin(), res.end(), 0);
            for (int i = l; i < r;) {
                int c = 1;
                if (is_digit(s[i])) {
                    auto [v, j] = read_int(s, i);
                    c = v;
                    i = j;
                }
                if (s[i] == '(') {
                    int j = rp[i];
                    res = compose(res, pow(scan(scan, i + 1, j), c));
                    i = j + 1;
                } else {
                    res = compose(res, pow(ps[s[i]], c));
                    i = i + 1;
                }
                if (i < r) {
                    assert(s[i] == '+');
                    ++i;
                }
            }
            return res;
        };
        auto ans = scan(scan, 0, l);
        for (int i = 0; i < n; ++i) {
            cout << ans[i] + 1 << " \n"[i == n - 1];
        }
    }

    return 0;
}
