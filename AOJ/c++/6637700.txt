#include <iostream>
#include <queue>
#include <cstring>
using namespace std;
int dir[4][2] = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
int map[3][3];
bool visited[1000000005]; 
int h(int map[3][3]) {
	int num = 0;
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) num = num * 10 + map[i][j];
	}
	return num;
}
bool ok(int x, int y) {
	return x >= 0 && x < 3 && y >= 0 && y < 3;
}
int bfs() {
	queue<int> q;
	q.push(h(map));
	int steps = 0;
	while (!q.empty()) {
		int sz = q.size();
		for (int i = 0; i < sz; i++) {
			int cur = q.front();
			q.pop();
			if (cur == 123456780) return steps;
			int x, y;
			for (int i = 0; i < 9; i++) {
				map[(8 - i) / 3][(8 - i) % 3] = cur % 10;
				if (cur % 10 == 0) x = (8 - i) / 3, y = (8 - i) % 3;
				cur /= 10;
			}
			int cmap[3][3];
			memcpy(cmap, map, sizeof(cmap));
			for (int j = 0; j < 4; j++) {
				memcpy(map, cmap, sizeof(map));
				int tx = x + dir[j][0];
				int ty = y + dir[j][1];
			    if (ok(tx, ty)) {
			    	swap(map[x][y], map[tx][ty]);
			    	if (!visited[h(map)]) {
			    		q.push(h(map));
			    		visited[h(map)] = true;
					}
			    	else swap(map[x][y], map[tx][ty]);
				}
			}
		}
		steps++;
	}
}
int main() {
	for (int i = 0; i < 3; i++) {
		cin >> map[i][0] >> map[i][1] >> map[i][2];
	}
	cout << bfs();
	return 0;
}
//1 3 0
//4 2 5
//7 8 6
