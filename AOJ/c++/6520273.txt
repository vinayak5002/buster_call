#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#define _GLIBCXX_DEBUG
using namespace std;
using std::cout;
using std::cin;
using std::endl;
using ll=long long;
using ld=long double;
ll ILL=2167167167167167167;
const int INF=1050000000;
const ll mod=1e9+7;
#define rep(i,a) for (ll i=0;i<a;i++)
#define all(p) p.begin(),p.end()
template<class T> using _pq = priority_queue<T, vector<T>, greater<T>>;
template<class T> ll LB(vector<T> &v,T a){return lower_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> ll UB(vector<T> &v,T a){return upper_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> bool chmin(T &a,const T &b){if(a>b){a=b;return 1;}else return 0;}
template<class T> bool chmax(T &a,const T &b){if(a<b){a=b;return 1;}else return 0;}
template<class T> void So(vector<T> &v) {sort(v.begin(),v.end());}
template<class T> void Sore(vector<T> &v) {sort(v.begin(),v.end(),[](T x,T y){return x>y;});}
void yneos(bool a){if(a) cout<<"Yes\n"; else cout<<"No\n";}
template<class T> void vec_out(vector<T> &p){for(int i=0;i<(int)(p.size());i++){if(i) cout<<" ";cout<<p[i];}cout<<"\n";}

vector<int> z_algo(string S){
	int N=S.size();
	vector<int> ans(N);
	ans[0]=N;
	int i=1,j=0,k=0;
	while(N>i){
		//if(S[0]=='a') cout<<i<<" "<<j<<" "<<k<<endl;
		j=0;
		while(i+k<N&&S[i+k]==S[j+k]){
			k++;
		}
		ans[i]=k;
		j=1,k=0;
		while(j<ans[i]&&ans[i]+i>ans[j]+i+j){
			ans[i+j]=ans[j];
			j++;
		}
		if(ans[i]>=j) k=ans[i]-j;
		i+=j;
	}
	return ans;
}

void solve();
// oddloop
int main() {
	solve();
}

void solve(){
	string S,T;
	cin>>S>>T;
	int N=S.size(),M=T.size();
	string X=T;
	X+="#";
	X+=S;
	auto p=z_algo(X);
	reverse(all(S));
	reverse(all(T));
	X=T;
	X+="#";
	X+=S;
	auto q=z_algo(X);
	int ans=0;
	rep(i,N-M+1){
		if(p[M+i+1]+q[N-i+1]==M-1) ans++;
	}
	cout<<ans<<"\n";
	//vec_out(p);
}

