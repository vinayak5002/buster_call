#include<bits/stdc++.h>
using namespace std;
//#include<atcoder/all>
//using namespace atcoder;
using ll = long long;
int n,m;
int s,g;
using Edge = tuple<int,double,double>;
vector<vector<Edge>> G;
const double INF = 1e9;

void solve(){
	double dp[33][33][33];
	for(int i = 0;i<33;i++){
		for(int j = 0;j<33;j++){
			for(int k = 0;k<33;k++){
				dp[i][j][k] = INF;
			}
		}
	}
	using TUP = tuple<double,int,int,int>;
	priority_queue<TUP,vector<TUP>,greater<>> PQ;
	dp[s][1][32] = 0;
	PQ.emplace(0,s,1,32);
	while(PQ.size()){
		auto [dist,cur,v,par] = PQ.top();
		PQ.pop();
		if(dp[cur][v][par]!=dist)continue;
		for(auto [to,cost,cap]:G[cur]){
			if(to==par)continue;
			for(int i = -1;i<=1;i++){
				if(v==0)continue;
				double ndist = dist + (double)cost/v;
				int nv = v + i;
				if(cap>=v&&dp[to][nv][cur]>ndist){
					dp[to][nv][cur] = ndist;
					PQ.emplace(ndist,to,nv,cur);
				}
			}
		}
	}
	double ans = INF;
	for(int i = 0;i<33;i++){
		ans = min(ans,dp[g][0][i]);
	}
	if(ans==INF)printf("unreachable\n");
	else printf("%.12lf\n",ans);
}

signed main(){
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	while(1){
		cin >> n >> m;
		if(n==0)break;
		cin >> s >> g;
		s--,g--;
		G = vector<vector<Edge>>(n);
		for(int i = 0;i<m;i++){
			int x,y,d,c;
			cin >> x >> y >> d >> c;
			x--;y--;
			G[x].emplace_back(Edge(y,d,c));
			G[y].emplace_back(Edge(x,d,c));
		}
		solve();
	}
}

