#include<bits/stdc++.h>
using namespace std;
using ll = long long;
const ll inf = (1LL << 60);

struct Edge {ll to, cost;};
using Graph = vector<vector<Edge>>;
void dijkstra(const Graph &g, ll s, vector<ll> &dis){
    ll n = g.size();
    dis.resize(n, inf);
    priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>> pq;
    dis[s] = 0;
    pq.emplace(0, s);
    while(!pq.empty()){
        pair<ll, ll> p = pq.top();
        pq.pop();
        ll v = p.second;
        if(dis[v] < p.first)continue;
        for(auto &e : g[v]){
            if(dis[e.to] > dis[v] + e.cost){
                dis[e.to] = dis[v] + e.cost;
                pq.emplace(dis[e.to], e.to);
            }
        }
    }
}

int main(){
    ll v, e, r; cin >> v >> e >> r;
    Graph g(v);
    ll s, t, d;
    for(ll i = 0; i < e; i++){
        cin >> s >> t >> d;
        g[s].push_back({t, d});
    }
    vector<ll> dis;
    dijkstra(g, r, dis);
    for(auto e : dis){
        if(e == inf)cout << "INF" << endl;
        else cout << e << endl;
    }
}
