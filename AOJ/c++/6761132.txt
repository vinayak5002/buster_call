#include<bits/stdc++.h>
#define fi first
#define se second
#define pb push_back
using namespace std;
typedef long long LL;
typedef double db;
const db pi = acos(-1.0);
const db eps=1e-8;
const db INF=1e20;
const int maxp=20010;
const int N=5e5+10;

int sgn(double x){
    if(fabs(x)<eps) return 0;
    if(x<0) return -1;
    return 1;
}

struct Point{
	db x,y;
	Point(){}
	Point(db _x,db _y){
		x = _x;
		y = _y;
	}
	
	void input(){
		scanf("%lf%lf",&x,&y);
	}
	
	void output(){
		printf("%.10lf %.10lf\n",x,y);
		// printf("%d %d\n",(int)x,(int)y);
	}
	
	bool operator < (Point b)const{
		return sgn(x-b.x)==0?sgn(y-b.y)<0:x<b.x;
	}
	bool operator == (Point b)const{
		return sgn(x-b.x)==0&&sgn(y-b.y)==0;
	}
	Point operator -(const Point &b)const{
		return Point(x-b.x,y-b.y);
	}
	Point operator +(const Point &b)const{
		return Point(x+b.x,y+b.y);
	}
	db operator ^(const Point &b)const{
		return x*b.y-y*b.x;
	}
	db operator *(const Point &b)const{
		return x*b.x+y*b.y;
	}
	Point operator *(const db &k)const{
		return Point(x*k,y*k);
	}
	Point operator /(const db &k)const{
		return Point(x/k,y/k);
	}
	db distance(Point p){
		return hypot(x-p.x,y-p.y);
	}
	db len(){
		return hypot(x,y);
	}
	db len2(){
		return x*x+y*y;
	}
	db rad(Point a,Point b){
		Point p=*this;
		return fabs(atan2(fabs((a-p)^(b-p)),(a-p)*(b-p)));
	}
	Point trunc(db r){
		db l=len();
		if(!sgn(l)) return *this;
		r/=l;
		return Point(x*r,y*r);
	}
	Point rotleft(){
		return Point(-y,x);
	}
	Point rotright(){
		return Point(y,-x);
	}
	Point rotate(Point p,db angle){
		Point v=(*this)-p;
		db c=cos(angle),s=sin(angle);
		return Point(p.x+v.x*c-v.y*s,p.y+v.x*s+v.y*c);
	}
};

struct Line{
	Point s,e;
	Line(){}
	Line(Point _s,Point _e){
		s = _s;
		e = _e;
	}
    
    Line(Point p,double angle){
        s=p;
        if(sgn(angle-pi/2) == 0){
            e=(s+Point(0,1));
        }
        else{
            e=(s+Point(1,tan(angle)));
        }
    }
    
    bool parallel(Line v){
        return sgn((e-s)^(v.e-v.s))==0;
    }
    
    int relation(Point p){
        int c =sgn((p-s)^(e-s));
        if(c<0) return 1;
        else if(c>0) return 2;
        else return 3;
    }
    
    bool pointonseg(Point p){
    	return sgn((p-s)^(e-s))==0&&sgn((p-s)*(p-e))<=0;
    }
    
    int linecrossline(Line v){
        if((*this).parallel(v))
            return v.relation(s)==3;
        return 2;
    }
    
    Point crosspoint(Line v){
        db a1=(v.e-v.s)^(s-v.s);
        db a2=(v.e-v.s)^(e-v.s);
        return Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));
    }
    
	Point lineprog(Point p){
		return s+(((e-s)*((e-s)*(p-s)))/((e-s).len2()));
	}
	Point symmetrypoint(Point p){
		Point q=lineprog(p);
		return Point(2*q.x-p.x,2*q.y-p.y);
	}
	db length(){
		return s.distance(e);
	}
	db dispointtoline(Point p){
		return fabs((p-s)^(e-s))/length();
	}
	db dispointtoseg(Point p){
		if(sgn((p-s)*(e-s))<0 || sgn((p-e)*(s-e))<0)
			return min(p.distance(s),p.distance(e));
		return dispointtoline(p);
	}
	db dissegtoseg(Line v){
		return min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v.dispointtoseg(s),v.dispointtoseg(e)));
	}
};

struct circle{
	Point  p;
	db r;
	circle(){}
	circle(Point _p,db _r){
		p=_p;
		r=_r;
	}
	circle(db x,db y,db _r){
		p=Point(x,y);
		r=_r;
	}
	db area(){
		return pi*r*r;
	}
	//三角形外切圆
	circle(Point a,Point b,Point c){
		Line u=Line((a+b)/2,((a+b)/2)+((b-a).rotleft()));
		Line v=Line((b+c)/2,((b+c)/2)+((c-b).rotleft()));
		p=u.crosspoint(v);
		r=p.distance(a);
	}
	//三角形内切圆
	circle(Point a,Point b,Point c,bool t){
		db bc=b.distance(c),ac=a.distance(c),ab=a.distance(b);
		p=Point((bc*a.x+ac*b.x+ab*c.x)/(bc+ac+ab),(bc*a.y+ac*b.y+ab*c.y)/(bc+ac+ab));
		db s=fabs((b-a)^(c-a));
		r=s/(bc+ac+ab);
	}
	void input(){
		p.input();
		scanf("%lf",&r);
	}
	void output(){
		printf("%.20lf %.20lf %.20lf\n",p.x,p.y,r);
	}
	
	int relation(Point b){
		db dst=b.distance(p);
		if(sgn(dst-r)<0) return 2;
		else if(sgn(dst-r)==0) return 1;
		return 0;
	}
	
	int relationcircle(circle v){
		db d=p.distance(v.p);
		if(sgn(d-r-v.r)>0) return 5;
		if(sgn(d-r-v.r)==0) return 4;
		db l=fabs(r-v.r);
		if(sgn(d-l)>0) return 3;
		if(sgn(d-l)==0) return 2;
		if(sgn(d-l)<0) return 1;
	}
	int relationline(Line v){
		db dst=v.dispointtoline(p);
		if(sgn(dst-r)<0) return 2;
		else if(sgn(dst-r)==0) return 1;
		return 0;
	}
	
	int pointcrosscircle(circle v,Point &p1,Point &p2){
		int rel=relationcircle(v);
		if(rel==1||rel==5) return 0;
		db d=p.distance(v.p);
		db l=(d*d+r*r-v.r*v.r)/(2*d);
		db h=sqrt(r*r-l*l);
		Point tmp=p+(v.p-p).trunc(l);
		p1=tmp+((v.p-p).rotleft().trunc(h));
		p2=tmp+((v.p-p).rotright().trunc(h));
		if(rel==2||rel==4) return 1;
		return 2;
	}
	
	int pointcrossline(Line v,Point &p1,Point &p2){
		if(!(*this).relationline(v)) return 0;
		Point a=v.lineprog(p);
		db d=v.dispointtoline(p);
		d=sqrt(r*r-d*d);
		if(sgn(d)==0){
			p1=a;
			p2=a;
			return 1;
		}
		p1=a+(v.e-v.s).trunc(d);
		p2=a-(v.e-v.s).trunc(d);
		return 2;
	}
	
	int tangentline(Point q,Line &u,Line &v){
		int x=relation(q);
		if(x==2) return 0;
		if(x==1){
			u=Line(q,q+(q-p).rotleft());
			v=u;
			return 1;
		}
		db d=p.distance(q);
		db l=r*r/d;
		db h=sqrt(r*r-l*l);
		u=Line(q,p+((q-p).trunc(l)+(q-p).rotleft().trunc(h)));
		v=Line(q,p+((q-p).trunc(l)+(q-p).rotright().trunc(h)));
		return 2;
	}
	// 过一点知道角度和距离 求另一点 
    Point GP(double b) { 
        return Point(p.x + cos(b)*r, p.y+sin(b)*r);
    }
	
	db areatriangle(Point a,Point b){
		if(sgn((p-a)^(p-b))==0) return 0.0;
		Point q[5];
		int len=0;
		q[len++]=a;
		Line l(a,b);
		Point p1,p2;
		if(pointcrossline(l,q[1],q[2])==2){
			if(sgn((a-q[1])*(b-q[1]))<0) q[len++]=q[1];
			if(sgn((a-q[2])*(b-q[2]))<0) q[len++]=q[2];
		}
		q[len++]=b;
		if(len==4&&sgn((q[0]-q[1])*(q[2]-q[1]))>0) swap(q[1],q[2]);
		db res=0;
		for(int i=0;i<len-1;i++)
		{
			if(relation(q[i])==0||relation(q[i+1])==0){
				db arg=p.rad(q[i],q[i+1]);
				res+=r*r*arg/2.0;
			}
			else{
				res+=fabs((q[i]-p)^(q[i+1]-p))/2.0;
			}
		}
		return res;
	}
	
	db areacircle(circle v){
		int rel=relationcircle(v);
		if(rel>=4) return 0.0;
		if(rel<=2) return min(area(),v.area());
		db d=p.distance(v.p);
		db hf=(r+v.r+d)/2.0;
		db ss=2*sqrt(hf*(hf-r)*(hf-v.r)*(hf-d));
		db a1=acosl((r*r+d*d-v.r*v.r)/(2.0*r*d));
		a1=a1*r*r;
		db a2=acosl((v.r*v.r+d*d-r*r)/(2.0*v.r*d));
		a2=a2*v.r*v.r;
		return a1+a2-ss;
	}
};

struct polygon{
	int n;
	Point p[maxp];
	Line l[maxp];
	void input(int _n){
		n = _n;
		for(int i=0;i<n;i++)
			p[i].input();
	}
	void output(){
		printf("%d\n",n);
		for(int i=0;i<n;i++) p[i].output();
	}
	void getline(){
		for(int i=0;i<n;i++){
			l[i]=Line(p[i],p[(i+1)%n]);
		}
	}
	db getarea(){
		db sum=0;
		for(int i=0;i<n;i++){
			sum+=(p[i]^p[(i+1)%n]);
		}
		return sum/2;
	}
	struct cmp{
		Point p;
		cmp(const Point &p0){p=p0;}
		bool operator ()(const Point &aa,const Point &bb){
			Point a=aa,b=bb;
			int d=sgn((a-p)^(b-p));
			if(d==0){
				return sgn(a.distance(p)-b.distance(p)) < 0;
			}
			return d>0;
		}
	};
	
	void norm(){
		Point mi = p[0];
		for(int i=1;i<n;i++) mi = min(mi,p[i]);
		sort(p,p+n,cmp(mi));
	}
	
	void getconvex(polygon &convex){
		sort(p,p+n);
		convex.n=n;
		for(int i=0;i<min(n,2);i++){
			convex.p[i]=p[i];
		}
		if(convex.n==2&&(convex.p[0]==convex.p[1])) convex.n--;
		if(n<=2) return ;
		int &top=convex.n;
		top=1;
		for(int i=2;i<n;i++){
			while(top&&sgn((convex.p[top]-p[i])^(convex.p[top-1]-p[i]))<=0) top--;
			convex.p[++top]=p[i];
		}
		int temp=top;
		convex.p[++top]=p[n-2];
		for(int i=n-3;i>=0;i--){
			while(top!=temp&&sgn((convex.p[top]-p[i])^(convex.p[top-1]-p[i]))<=0) top--;
			convex.p[++top]=p[i];
		}
		if(convex.n==2&&(convex.p[0]==convex.p[1])) convex.n--;
		convex.norm();
	}
	
	void Graham(polygon &convex){
		norm();
		int &top = convex.n;
		top=0;
		if(n==1){
			top=1;
			convex.p[0]=p[0];
			return ;
		}
		if(n==2){
			top=2;
			convex.p[0]=p[0];
			convex.p[1]=p[1];
			if(convex.p[0]==convex.p[1]) top--;
			return ;
		}
		top=2;
		convex.p[0]=p[0];
		convex.p[1]=p[1];
		for(int i=2;i<n;i++){
			while(top>1&&sgn((convex.p[top-1]-convex.p[top-2])^(p[i]-convex.p[top-2]))<=0) top--;
			convex.p[top++]=p[i];
		}
		if(convex.n==2&&(convex.p[0]==convex.p[1])) convex.n--;
	}
	
	db rc(){
		db res=0;
		if(n==1) return res;
		if(n==2) 
		{
			res=p[0].distance(p[1]);
			return res;
		}
		int now=2;
		for(int i=0;i<n;i++)
		{
			while(sgn(((p[(i+1)%n]-p[i])^(p[(now+1)%n]-p[i]))-((p[(i+1)%n]-p[i])^(p[now]-p[i])))>0) now=(now+1)%n;
			db x=p[i].distance(p[now]);
			db y=p[(i+1)%n].distance(p[now]);
			if(sgn(x-y)<0) x=y;
			if(sgn(res-x)<0) res=x;
		}
		return res;
	}
	
	void convexcut(Line u,polygon &po){
		int &top=po.n;
		top=0;
		for(int i=0;i<n;i++){
			int d1 = sgn((u.e-u.s)^(p[i]-u.s));
			int d2 = sgn((u.e-u.s)^(p[(i+1)%n]-u.s));
			if(d1>=0) po.p[top++]=p[i];
			if(d1*d2<0) po.p[top++] = u.crosspoint(Line(p[i],p[(i+1)%n]));
		}
	}
	
	bool isconvex() {
		bool s[10];
		memset(s,false,sizeof(s));
		for (int i=0; i<n; i++) {
			int j=(i+1)%n;
			int k=(j+1)%n;
			s[sgn((p[j]-p[i])^(p[k]-p[i]))+1]=true;
			if (s[0] && s[2]) return false;
		}
		return true;
	}
	int relationpoint(Point q){
		for(int i=0;i<n;i++){
			if(p[i] == q) return 1000000000;
		}
		getline();
		for(int i=0;i<n;i++){
			if(l[i].pointonseg(q)) return 1000000000;
		}
		int cnt=0;
		for(int i=0;i<n;i++){
			int j=(i+1)%n;
			int k=sgn((q-p[j])^(p[i]-p[j]));
			int u=sgn(p[i].y-q.y);
			int v=sgn(p[j].y-q.y);
			if(k>0&&u<0&&v>=0) cnt++;
			if(k<0&&v<0&&u>=0) cnt--;
		}
		return cnt;
	}
	db areacircle(circle c){
		db ans=0;
		for(int i=0;i<n;i++){
			int j=(i+1)%n;
			if(sgn((p[j]-c.p)^(p[i]-c.p))>=0)
				ans+=c.areatriangle(p[i],p[j]);
			else ans-=c.areatriangle(p[i],p[j]);
		}
		return fabs(ans);
	}
};

Point p[N];
Point tmpt[N];
bool cmpx(Point a,Point b){
	return a.x<b.x||(sgn(a.x-b.x)==0 && a.y<b.y);
}


bool cmpy(Point a,Point b){
	return a.y<b.y||(sgn(a.y-b.y)==0 && a.x<b.x);
}

db Closest_Pair(int left,int right){
	db d=INF;
	if(left==right) return d;
	if(left+1==right) return p[left].distance(p[right]);
	int mid=(left+right)/2;
	db d1=Closest_Pair(left,mid);
	db d2=Closest_Pair(mid+1,right);
	d=min(d1,d2);
	int cnt=0;
	for(int i=left;i<=right;i++){
		if(fabs(p[mid].x-p[i].x)<=d)
			tmpt[cnt++]=p[i];
	}
	sort(tmpt,tmpt+cnt,cmpy);
	for(int i=0;i<cnt;i++){
		for(int j=i+1;j<cnt&&tmpt[j].y-tmpt[i].y<d;j++)
			d=min(d,tmpt[i].distance(tmpt[j]));
	}
	return d;
}

const double Pi=acos(-1.0);
 
struct Intersect{
    Point P[2];
   bool operator <(const Intersect &rtm) const{
       return sgn(P[0].x-rtm.P[0].x)<0||(sgn(P[0].x-rtm.P[0].x)==0&&sgn(P[0].y-rtm.P[0].y)<0);
   }
}ANS[7];
 
typedef Point Vector;
 
double GPA(Vector A){//Get_Polar_Angle
    return atan2(A.y,A.x);
}
double GL(Vector A){//Get_Length
   return sqrt(A*A);
}
//求公切线，这个模板都没问题
int GCCI(circle A,circle B){//Get_Circle_Circle_Intersection
    int cnt=0,a=0,b=1;
    if(A.r<B.r) swap(A,B),swap(a,b);
    Vector u=B.p-A.p;
    double d=GL(u),rdec=A.r-B.r,radd=A.r+B.r;
    if(sgn(d-rdec)<0) return 0;                 //内含
    if(sgn(d)==0&&A.r==B.r) {
        ANS[1].P[a] = A.p;
        ANS[1].P[b] = A.GP(Pi);
        return -1;             //重合，无线多，原本返回-1，但这题特殊
    }
    double base=GPA(u);
    if(sgn(d-rdec)==0){                            //内切
        ANS[++cnt].P[a]=A.GP(base); ANS[cnt].P[b]=B.GP(base);
        return cnt;
    }
    double da=acos((A.r-B.r)/d);                    //2条外公切线
    ANS[++cnt].P[a]=A.GP(base+da); ANS[cnt].P[b]=B.GP(base+da);
    ANS[++cnt].P[a]=A.GP(base-da); ANS[cnt].P[b]=B.GP(base-da);
    if(sgn(d-radd)==0){                            //1条内公切线
        ANS[++cnt].P[a]=A.GP(base); ANS[cnt].P[b]=B.GP(base+Pi);
    }
    else if(sgn(d-radd)>0){                     //2条内公切线
        da=acos((A.r+B.r)/d);
        ANS[++cnt].P[a]=A.GP(base+da); ANS[cnt].P[b]=B.GP(base+da+Pi);
        ANS[++cnt].P[a]=A.GP(base-da); ANS[cnt].P[b]=B.GP(base-da+Pi);
    }
    return cnt;
}
 


int main()
{
	circle c1,c2;
	c1.input(),c2.input();
	printf("%.12lf\n",c1.areacircle(c2));
    return 0;
}
