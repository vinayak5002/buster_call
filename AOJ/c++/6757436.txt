#include<bits/stdc++.h>
#define rep(i,a,...) for(int i = (a)*(strlen(#__VA_ARGS__)!=0);i<(int)(strlen(#__VA_ARGS__)?__VA_ARGS__:(a));++i)
#define per(i,a,...) for(int i = (strlen(#__VA_ARGS__)?__VA_ARGS__:(a))-1;i>=(int)(strlen(#__VA_ARGS__)?(a):0);--i)
#define foreach(i, n) for(auto &i:(n))
#define all(x) (x).begin(), (x).end()
#define bit(x) (1ll << (x))
#define lambda(RES_TYPE, ...) (function<RES_TYPE(__VA_ARGS__)>)[&](__VA_ARGS__) -> RES_TYPE
#define method(FUNC_NAME, RES_TYPE, ...) function<RES_TYPE(__VA_ARGS__)> FUNC_NAME = lambda(RES_TYPE, __VA_ARGS__)
using namespace std;
using ll = long long;
using pii = pair<int,int>;
using pll = pair<ll,ll>;
//const ll MOD = (ll)1e9+7;
const ll MOD = 998244353;
const int INF = (ll)1e9+7;
const ll INFLL = (ll)1e18;
template<class t>
using vvector = vector<vector<t>>;
template<class t>
using vvvector = vector<vector<vector<t>>>;
template<class t>
using priority_queuer = priority_queue<t, vector<t>, greater<t>>;
template<class t, class u> bool chmax(t &a, u b){if(a<b){a=b;return true;}return false;}
template<class t, class u> bool chmin(t &a, u b){if(a>b){a=b;return true;}return false;}
#ifdef DEBUG
#define debug(x) cout<<"LINE "<<__LINE__<<": "<<#x<<" = "<<x<<endl;
#else
#define debug(x) (void)0
#endif

namespace templates{
    ll modpow(ll x, ll b,ll mod=MOD){
        ll res = 1;
        while(b){
            if(b&1)res = res * x % mod;
            x = x * x % mod;
            b>>=1;
        }
        return res;
    }

    ll modinv(ll x){
        return modpow(x, MOD-2);
    }

    bool was_output = false;

    void print();
    template <class t> void print(const vector<t> &);
    template <class t, class u> void print(const pair<t, u> &);
    template <class t> void print(const t&);
    template <class Head, class... Tail> void print(const Head&, const Tail&...);

    template <class t> void println(const vector<vector<t>>&);
    template <class t> void println(const vector<t>&);
    template <class t> void println(const t&);
    template <class Head, class... Tail> void println(const Head&, const Tail&...);
    void println();
    void newline();

    void print(){
        return;
    }

    template <class t>
    void print(const vector<t>&x){
        for(const t&i:x)print(i);
    }
    template <class t, class u>
    void print(const pair<t,u>&p){
        print(p.first);
        print(p.second);
    }
    template <class t>
    void print(const t&x){
        if(was_output)cout<<" ";
        cout<<x;
        was_output = true;
    }
    template <class Head, class... Tail>
    void print(const Head&head,const Tail&...tail){
        print(head);
        print(tail...);
    }

    template<class t>
    void println(const vector<vector<t>>&x){
        for(vector<t> i:x)println(i);
    }
    template<class t>
    void println(const vector<t>&x){
        for(const t&i:x)print(i);
        println();
    }
    template <class t>
    void println(const t&x){
        print(x);
        println();
    }
    void println(){
        if(was_output){
            cout << endl;
            was_output = false;
        }
    }
    template <class Head, class... Tail>
    void println(const Head&head,const Tail&...tail){
        print(head);
        println(tail...);
    }

    void newline(){
        was_output = true;
        println();
    }

    template<class t>
    istream& operator>>(istream&is, vector<t>&x){
        for(auto &i:x)is >> i;
        return is;
    }

    template<class t, class u>
    istream& operator>>(istream&is, pair<t, u>&x){
        is >> x.first >> x.second;
        return is;
    }

    template<class t>
    ostream& operator<<(ostream&os, vector<t> &v){
        os << "{";
        for(t &i:v){
            os << i << ", ";
        }
        os << "}";
        return os;
    }

    template<class t = long long>
    t in(){
        t res; cin >> res; return res;
    }

    template<class t>
    vector<t> sorted(vector<t> line,function<bool(t,t)> comp=[](t a,t b){return a<b;}){
        sort(line.begin(),line.end(),comp);
        return line;
    }

    template<class t>
    vector<t> reversed(vector<t> line){
        reverse(line.begin(),line.end());
        return line;
    }
    string reversed(string str){
        reverse(str.begin(),str.end());
        return str;
    }

    long long gcd(long long a,long long b){
        while(b){
            a %= b;
            swap(a,b);
        }
        return a;
    }

    long long lcm(long long a,long long b){
        return a / gcd(a,b) * b;
    }

    class output_initializer{
    public:
        output_initializer(){
            ios::sync_with_stdio(false);
            cin.tie(nullptr);
            cout << setprecision(20);
        }
    };output_initializer OUTPUT_INITIALIZER_INSTANCE = output_initializer();
}

using namespace templates;

using P = pii;

P operator+(P a,P b){
    return P(a.first+b.first,a.second+b.second);
}

array<P,6> nexts(P pos){
    array<P,6> res;
    res[0] = pos+P(0,1);
    res[1] = pos+P(-1,1);
    res[2] = pos+P(1,0);
    res[3] = pos+P(0,-1);
    res[4] = pos+P(1,-1);
    res[5] = pos+P(-1,0);
    return res;
}

bool connected(P a,P b){
    int dx = a.first - b.first;
    int dy = a.second - b.second;
    return dx * dy < 1 and abs(dx) <= 1 and abs(dy) <= 1;
}

vvector<P> nexts(vector<P> snake){
    vvector<P> res;
    vector<P> current;
    set<P> has;
    method(rec,void,int p,bool last){
        if(p == snake.size()){
            res.emplace_back(current);
            return;
        }
        if(not last){
            foreach(next,nexts(snake[p])){
                if(has.count(next))continue;
                int cnt= 0;
                foreach(side,nexts(next)){
                    if(has.count(side))++cnt;
                }
                if(cnt>1)continue;
                if(current.size() and not connected(current.back(),next))continue;
                current.emplace_back(next);
                has.emplace(next);
                rec(p+1,true);
                current.pop_back();
                has.erase(next);
            }
        }
        {
            P next = snake[p];
            do{
                if(has.count(next))break;
                int cnt= 0;
                foreach(side,nexts(next)){
                    if(has.count(side))++cnt;
                }
                if(cnt>1)break;
                if(current.size() and not connected(current.back(),next))break;
                current.emplace_back(next);
                has.emplace(next);
                rec(p+1,false);
                current.pop_back();
                has.erase(next);
            }while(false);
        }
    };
    rec(0,false);
    return res;
}

class state{
public:
    int cost;
    vector<P> snake;
    P goal;
    int dist(){
        return abs(snake[0].first-goal.first) + abs(snake[0].second-goal.second);
    }
    state(int cost,vector<P> snake,P goal):cost(cost),snake(snake),goal(goal){}
};

bool operator<(state a,state b){
    return a.dist()+a.cost < b.dist()+b.cost;
}
bool operator>(state a,state b){
    return a.dist()+a.cost > b.dist()+b.cost;
}

int func(int n){
    vector<P> snake;
    rep(_,n){
        int x = in();
        int y = in();
        snake.emplace_back(x,y);
    }
    set<P> stones;
    int q = in();
    rep(_,q){
        int x = in();
        int y = in();
        stones.emplace(x,y);
    }
    P goal;
    goal.first = in();
    goal.second = in();
    map<vector<P>,int> m;
    priority_queuer<state> pq;
    map<P,int> heads;
    method(add,void,state p){
        if(m.count(p.snake) and m[p.snake] <= p.cost+p.dist())return;
        m[p.snake] = p.cost+p.dist();
        heads[p.snake[0]] = p.cost+p.dist();
        pq.emplace(p);
    };
    method(rock,bool,vector<P> p){
        foreach(i,p){
            if(stones.count(i))return true;
        }
        return false;
    };
    add(state(0,snake,goal));
    while(not heads.count(goal)){
        auto p = pq.top();
        pq.pop();
        foreach(next,nexts(p.snake)){
            if(not rock(next)){
                add(state(p.cost+1,next,goal));
            }
        }
    }
    return heads[goal];
}

int main(){
    while(true){
        int n = in();
        if(n==0)break;
        println(func(n));
    }
    return 0;
}

