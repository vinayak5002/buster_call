#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

#define rep(i,n) for(ll (i)=0; (i)<(ll)(n); (i)++)
#define FOR(i, b, e) for(ll (i)=(b); (i)<=(ll)(e); (i)++)
#define ALL(x) (x).begin(), (x).end()

const ll INF = 100100100100100100;

const ll TREE_SIZE = 100100;
// 引数は 0-index で実装は 1-index であることに注意
class BinaryIndexTree_RSQ_RAQ {
  public:
    vector<ll> dat1, dat2;
    BinaryIndexTree_RSQ_RAQ();
    ll sum(ll a, ll b, ll k, ll l, ll r);
    void add(ll a, ll b, ll x, ll k, ll l, ll r);
};
BinaryIndexTree_RSQ_RAQ::BinaryIndexTree_RSQ_RAQ() {
  dat1.resize(2*TREE_SIZE);
  dat2.resize(2*TREE_SIZE);
  rep(i, 2*TREE_SIZE) {
    dat1[i] = 0;
    dat2[i] = 0;
  }
}
// 区間 [a, b) に x を足す
// 呼ぶときは add(a, b, x, 0, 0, n) で呼ぶ
void BinaryIndexTree_RSQ_RAQ::add(ll a, ll b, ll x, ll k, ll l, ll r) {
  if(a <= l && r <= b) {
    dat1[k] += x;
  } else if(l < b && a < r) {
    dat2[k] += (min(b, r) - max(a, l))*x;
    add(a, b, x, k*2+1, l, (l+r)/2);
    add(a, b, x, k*2+2, (l+r)/2, r);
  }
}
// 区間 [a, b) の和を求める
// 呼ぶときは sum(a, b, 0, 0, n) で呼ぶ
ll BinaryIndexTree_RSQ_RAQ::sum(ll a, ll b, ll k, ll l, ll r) {
  if(b <= l || r <= a) {
    return 0;
  } else if(a <= l && r <= b) {
    return dat1[k]*(r-l) + dat2[k];
  } else {
    ll res = (min(b, r) - max(a, l))*dat1[k];
    res += sum(a, b, k*2+1, l, (l+r)/2);
    res += sum(a, b, k*2+2, (l+r)/2, r);
    return res;
  }
}

int main() {
  ll n, q; cin >> n >> q;
  BinaryIndexTree_RSQ_RAQ bit;

  rep(i, q) {
    ll a; cin >> a;
    if(a == 0) {
      ll s, t, x; cin >> s >> t >> x;
      s--; t--;
      bit.add(s, t+1, x, 0, 0, n);
    } else {
      ll s, t; cin >> s >> t;
      s--; t--;
      cout << bit.sum(s, t+1, 0, 0, n) << endl;
    }
  }

  return 0;
}

