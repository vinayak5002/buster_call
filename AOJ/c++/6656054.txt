#include<string>
#include<iostream>
#include<map>
#include<vector>

std::map<char, int> makeLUT(const std::string& str) {
	const int size = str.size();
	std::map<char, int> lut; //look up table
	for (int i = 0; i < str.size() - 1; i++) {
		lut[str[i]] = size - i - 1;
	}
	return lut;
}

void strSearchBM(const std::string& target, const std::string& str) {
	std::map<char, int> lut = makeLUT(str);
	if (target.size() < str.size()) return;
	const int size = str.size();
	for (int i = 0; i < target.size() - str.size() + 1;) {
		// 比較
		for (int j = size - 1; j >= 0; j--) {
			if (target[i + j] != str[j]) {
				const auto& itr = lut.find(target[i + j]);
				if (itr == lut.end()) {
					i += j + 1;
				}
				else {
					const int slide = itr->second - size + j + 1;
					i += slide > 0 ? slide : 2;
				}
				break;
			}
			if (j == 0) {
				std::cout << i << std::endl;
				i++;
			}
		}
	}
}

std::vector<int> makeKMPTable(const std::string& str) {
	std::vector<int> ret(str.size() + 1, 0);
	int tarIdx = 1;
	int strIdx = 0;
	while (tarIdx < str.size()) {
		if (str[tarIdx] == str[strIdx]) {
			tarIdx++;
			strIdx++;
			ret[tarIdx] = strIdx;
		}
		else {
			if (strIdx == 0) {
				tarIdx++;
			}
			else {
				strIdx = ret[strIdx];
			}
		}
	}
	return ret;
}

void strSearchKMP(const std::string& target, const std::string& str) {
	std::vector<int> KMPtable = makeKMPTable(str);

	int tarIdx = 0;
	int strIdx = 0;
	while (tarIdx < target.size()) {
		if (target[tarIdx] == str[strIdx]) {
			if (strIdx == str.size() - 1) {
				// 完全一致
				std::cout << 1 << std::endl;
				return;
			}
			tarIdx++;
			strIdx++;
		}
		else {
			if (strIdx == 0) {
				tarIdx++;
			}
			else {
				strIdx = KMPtable[strIdx];
			}
		}
	}
	std::cout << 0 << std::endl;
}

int main() {
	// read
	std::string target;
	std::cin >> target;

	int x;
	std::cin >> x;
	for (int i = 0; i < x; i++) {
		std::string str;
		std::cin >> str;

		strSearchKMP(target, str);
	}
}
