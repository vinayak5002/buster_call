#include<bits/stdc++.h>
using namespace std;

long long inf = 1001001001001001001;

template <typename T>
struct LazySegmentTree{
    int n;
    vector<T> dat;
    vector<T>lazy;
    LazySegmentTree() {};
    LazySegmentTree(int N) {
        n = 1;
        while(n < N) {
            n *= 2;
        }
        dat.resize(n*2,0);
        lazy.resize(n*2,0);
    }
    void eval(int k,int l,int r) {
        if(lazy[k] == 0) return;
        if(k < n) {
            lazy[k*2] += lazy[k];
            lazy[k*2+1] += lazy[k];
        }
        dat[k] += lazy[k];
        lazy[k] = 0;
    }
    void update(int a, int b, T x, int k, int l, int r) {
        eval(k,l,r);
        if(a <= l && r <= b) {
            lazy[k] += x;
            eval(k,l,r);
        }
        else if(a < r && l < b) {
            update(a, b, x, k*2, l, (l+r)/2);
            update(a, b, x, k*2+1, (l+r)/2, r);
            dat[k] = min(dat[k*2],dat[k*2+1]);
        }
    }
    void update(int a, int b, T x) {//[a,b)
        update(a, b, x, 1, 0, n);
    }
    T query_sub(int a, int b, int k, int l, int r) {
        eval(k,l,r);
        if (r <= a || b <= l) {
            return inf;
        }
        else if (a <= l && r <= b) {
            return dat[k];
        }
        else {
            T vl = query_sub(a, b, k*2, l, (l+r)/2);
            T vr = query_sub(a, b, k*2+1, (l+r)/2, r);
            return min(vl,vr);
        }
    }
    T query(int a, int b) {//[a,b)
        return query_sub(a, b, 1, 0, n);
    }
};

int main() {
    int n,q;
    cin >> n >> q;
    LazySegmentTree<long long>Seg(n);
    for(int i = 0; i < q; i++) {
        int f;
        cin >> f;
        if(f == 0) {
            int s,t,x;
            cin >> s >> t >> x;
            Seg.update(s,t+1,x);
        }
        else {
            int s,t;
            cin >> s >> t;
            cout << Seg.query(s,t+1) << endl;
        }
    }
}
