# coding: utf-8
# Your code here!
import sys

def input_mulitiple_line_numbers():
    input_list = []
    # [num, num1 num1' num1'' ... , num2 num2' num2'', ...]
    for l in sys.stdin:
        input_list.append(l)
    line_num = int(input_list[0])
    list_in_list = []
    # [[num1, num1', num1'', ...], [num2, num2', num2'', ...], ...]
    for i in range(1, len(input_list)):
        digit_list = list(map(int, input_list[i].split()))
        list_in_list.append(digit_list)
    return line_num, list_in_list
    

def set_nums(A, length):
    T = []
    line = 0
    for i in range(length):
        T.append({'parent': -1, 'left': -1, 'right': -1})
    for i in range(length):
        id = A[i][0]
        left, right = A[i][1], A[i][2]
        T[id]['left'] = left
        T[id]['right'] = right
        if left != -1:
            T[left]['parent'] = id
        if right != -1:
            T[right]['parent'] = id
    return T
    

def get_sibling(T, id):
    if T[id]['parent'] == -1:
        return -1
    if T[T[id]['parent']]['left'] != id and T[T[id]['parent']]['left'] != -1:
        return T[T[id]['parent']]['left']
    if T[T[id]['parent']]['right'] != id and T[T[id]['parent']]['right'] != -1:
        return T[T[id]['parent']]['right']
    return -1


def set_depth(T, D, u, d):
    if u == -1:
        return D
    D[u] = d
    set_depth(T, D, T[u]['left'], d+1)
    set_depth(T, D, T[u]['right'], d+1)
    

def set_degree(T, C):
    for i in range(len(T)):
        if T[i]['left'] != -1:
            C[i] += 1
        if T[i]['right'] != -1:
            C[i] += 1


def set_hight(T, H, u):
    h1, h2 = 0, 0
    if T[u]['left'] != -1:
        h1 = set_hight(T, H, T[u]['left']) + 1
    if T[u]['right'] != -1:
        h2 = set_hight(T, H, T[u]['right']) + 1
    H[u] = max(h1, h2)
    return H[u]
    

def print_one_line(i, T, D, A, H, C, S):
    print(f"node {i}: parent = {T[i]['parent']}, sibling = {S[i]}, degree = {C[i]}, depth = {D[i]}, height = {H[i]},", end=' ')
    if T[i]['parent'] == -1:
        print("root")
    elif T[i]["left"] == -1:
        print("leaf")
    else:
        print("internal node")

if __name__ == "__main__":
    length, A = input_mulitiple_line_numbers()
    T = set_nums(A, length)
    D = [i for i in range(length)]
    C = [0 for _ in range(length)]
    H = [0 for _ in range(length)]
    r = 0
    for i in range(0, length):
        if T[i]['parent'] == -1:
            root = i
    set_depth(T, D, root, 0)
    set_hight(T, H, root)
    set_degree(T, C)
    S = [i for i in range(length)]
    for i in range(length):
        S[i] = get_sibling(T, i)
    
    for i in range(length):
        print_one_line(i, T, D, A, H, C, S)

