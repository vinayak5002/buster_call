#include <algorithm>
#include <iostream>
#include <math.h>
#include <stdio.h>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <iterator>
#include <queue>
#define ll long long int
using namespace std;

// Union Find tree
struct Unionfind {
  vector<int> par;
  Unionfind(int N) : par(N,-1){
  }
  bool unite(int x, int y) {
    x = root(x), y = root(y);
    if(x == y) return 0;
    if(par[x] > par[y]) swap(x, y);
    par[x] += par[y];
    par[y] = x;
    return 1;
  }
  int root(int k) {
    if(par[k] < 0) return (k);
    return (par[k] = root(par[k]));
  }
  bool same(int x, int y){
    x = root(x);
    y = root(y);
    return x==y;
  }
  int size(int k) {
    return (-par[root(k)]);
  }
  int groupnum(){
    int ret{};
    for(auto i:par){
      ret += i<0;
    }
    return ret;
  }
  bool isroot(int k){
    return root(k)==k;
  }
  vector<int> groupsize(){
    int N = par.size();
    vector<int> ret(N,-1); //初期値-1
    for(int i=0; i<N; i++){
      if(isroot(i)) ret[i] = size(i);
    }
    return ret;
  }
};

bool isPrime(ll N){
  if(N==1) return false;
  for(ll i = 2; i*i <= N; i++){
    if(N%i==0) return false;
  }
	return true;
}

//約数列挙
// const auto 
vector<ll> enum_divisors(ll n){
  vector<ll> res;
  for(ll i = 1; i*i <= n; i++){
    if(n%i==0){
      res.push_back(i);
      if(n/i != i) res.push_back(n/i);
    }
  }
  sort(res.begin(),res.end());
  return res;
}

vector<pair<ll,ll>> prime_factorize(ll n){
  vector<pair<ll,ll>> res;
  for(ll a = 2; a*a <= n; a++){
    if(n%a != 0) continue;
    ll ex = 0;  //指数

    //割れる限り続ける
    while(n%a == 0){
      ex++;
      n /= a;
    }
    res.push_back({a,ex});
  }
  //最後に残った数について
  if(n!=1) res.push_back({n,1});
  return res;
}

ll gcd(ll x,ll y){
  if(y > x){
    return gcd(y,x);
  }else if(x % y==0){
    return y;
  }else{
    return gcd(y,x%y);
  }
}


int main()
{
  int V,E;
  cin>>V>>E;
  vector<vector<pair<int,int>>> G(V);
  vector<pair<int,pair<int,int>>> edge;
  for(int i = 0; i < E; i++){
    int s,t,w;
    cin>>s>>t>>w;
    edge.push_back(make_pair(w,make_pair(s,t)));
  }
  sort(edge.begin(),edge.end());
  struct Unionfind uf(V);
  int ans = 0;
  for(int i = 0; i < E; i++){
    int s,t,w;
    w = edge[i].first;
    s = edge[i].second.first;
    t = edge[i].second.second;
    if(uf.same(s,t)==false){
      ans += w;
      uf.unite(s,t);
    }
  }
  cout<<ans<<endl;
  return 0;
};


