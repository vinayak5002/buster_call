#include<bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef long double ld;

const ll INF = 1e18;
const ld EPS = 1e-10;

class edge{
  public:
    ll to, cost;
    edge(ll to, ll cost): to(to), cost(cost) {}
};

bool warshall_floyd(vector<vector<edge> > &G, vector<vector<ll> > &dist){
  bool negative = false;
  ll n = dist.size();

  for(ll i = 0; i < n; i++){
    for(ll j = 0; j < n; j++){
      if(i == j) dist[i][j] = 0;
      else dist[i][j] = INF;
    }
  }

  for(ll i = 0; i < n; i++){
    for(ll j = 0; j < G[i].size(); j++){
      edge e = G[i][j];
      dist[i][e.to] = e.cost;
    }
  }

  for(ll k = 0; k < n; k++){
    for(ll i = 0; i < n; i++){
      for(ll j = 0; j < n; j++){
        if(dist[i][k] != INF && dist[k][j] != INF){
          dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
        }
      }
    }
  }

  for(ll i = 0; i < n; i++){
    if(dist[i][i] < 0) negative = true;
  }
  return negative;
}

void print(ll x){
  if(x == INF) cout << "INF";
  else cout << x;
  return;
}


int main(){
  cout << fixed << setprecision(20);

  ll v, e;
  cin >> v >> e;
  vector<vector<ll> > dist(v, vector<ll>(v));
  vector<vector<edge> > G(v, vector<edge>());
  for(ll i = 0; i < e; i++){
    ll s, t, d;
    cin >> s >> t >> d;
    G[s].push_back(edge(t, d));
  }
  bool f = warshall_floyd(G, dist);
  if(f){
    cout << "NEGATIVE CYCLE" << endl;
    return 0;
  }
  for(ll i = 0; i < v; i++){
    for(ll j = 0; j < v; j++){
      if(j) cout << " ";
      print(dist[i][j]);
    }
    cout << endl;
  }
  
  return 0;
}


