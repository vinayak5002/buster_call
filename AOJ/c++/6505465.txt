#include<bits/stdc++.h>
#define x first
#define y second
#define bug(x) cerr<<#x<<'='<<x<<' '
#define debug(x) cerr<<#x<<'='<<x<<'\n'
#define FOR(a,b,c) for(int a=(b),a##_end=(c);a<=a##_end;++a)
#define ROF(a,b,c) for(int a=(b),a##_end=(c);a>=a##_end;--a)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
const int INF=0x3f3f3f3f,N=5010;
const double EPS=1e-6;
template<class T>inline bool chkmin(T &x,const T &y){return y<x?x=y,1:0;}
template<class T>inline bool chkmax(T &x,const T &y){return x<y?x=y,1:0;}
double sgn(double x){
	if(x>EPS)return 1;
	if(x<-EPS)return -1;
	return 0;
}
struct Point{
	double x,y;
	void scan(){
		scanf("%lf%lf",&x,&y);
	}
	void print(){
		printf("%.8lf %.8lf\n",x,y);
	}
	double abs2(){
		return x*x+y*y;
	}
	double abs(){
		return sqrt(x*x+y*y);
	}
	double arg(){
		return atan2(y,x);
	}
	Point turn(double th){
		double c=cos(th),s=sin(th);
		return {x*c-y*s,x*s+y*c};
	}
	bool operator < (const Point &p)const{
		if(sgn(x-p.x)==0)
			return y<p.y;
		return x<p.x;
	}
	Point operator + (const Point &p)const{
		return {x+p.x,y+p.y};
	}
	Point operator - (const Point &p)const{
		return {x-p.x,y-p.y};
	}
	Point operator - ()const{
		return {-x,-y};
	}
	Point operator * (double t)const{
		return {x*t,y*t};
	}
	Point operator / (double t)const{
		return {x/t,y/t};
	}
	Point unit(){
		double l=abs();
		return {x/l,y/l};
	}
};
double dot(Point p1,Point p2){
	return p1.x*p2.x+p1.y*p2.y;
}
double cross(Point p1,Point p2){
	return p1.x*p2.y-p2.x*p1.y;
}
double distPP(Point p1,Point p2){
	return (p1-p2).abs();
}
struct Line{
	Point p[2];
	Point& operator [] (int k){return p[k];}
	Point dir(){
		return p[1]-p[0];
	}
	Point unit(){
		return (p[1]-p[0]).unit();
	}
};
Point proj(Line k,Point p){//chui zu
	return k[0]+k.unit()*dot(p-k[0],k.unit());
}
bool paral(Point p1,Point p2){
	return sgn(cross(p1,p2))==0;
}
bool paral(Line k1,Line k2){
	return sgn(cross(k1.dir(),k2.dir()))==0;
}
bool orthog(Point p1,Point p2){
	return sgn(dot(p1,p2))==0;
}
bool orthog(Line k1,Line k2){
	return sgn(dot(k1.dir(),k2.dir()))==0;
}
bool intersection(double x1,double x2,double x3,double x4){
	if(x1>x2)swap(x1,x2);
	if(x3>x4)swap(x3,x4);
	return sgn(x2-x3)>=0&&sgn(x4-x1)>=0;
}
bool checkSS(Line k1,Line k2){
    return  intersection(k1[0].x,k1[1].x,k2[0].x,k2[1].x)&&
			intersection(k1[0].y,k1[1].y,k2[0].y,k2[1].y)&&
			sgn(cross(k1[1]-k1[0],k2[0]-k1[0]))*sgn(cross(k1[1]-k1[0],k2[1]-k1[0]))<=0&&
			sgn(cross(k2[1]-k2[0],k1[0]-k2[0]))*sgn(cross(k2[1]-k2[0],k1[1]-k2[0]))<=0;
}
int main(){
	int q;
	scanf("%d",&q);
	while(q--){
		Line k1,k2;
		k1[0].scan();
		k1[1].scan();
		k2[0].scan();
		k2[1].scan();
		puts(checkSS(k1,k2)?"1":"0");
	}
	return 0;
}
