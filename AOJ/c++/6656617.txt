#include<stdio.h>
#define MAX 10000
#define NIL -1 //ノードが存在しない

typedef struct
{
	int p,l,r;//親、左の子、右の子
}Node;

Node T [MAX];
int n;//接点の数
//先行順巡回
void preParse(int u)
{
	if( u == NIL)
	{
		return;
	}
	printf(" %d", u);//節点番号出力
	preParse(T[u].l);
	preParse(T[u].r);
}
//中間順巡回
void inParse(int u)
{
	if(u == NIL)
	{
		return;
	}
	inParse(T[u].l);
	printf(" %d",u);
	inParse(T[u].r);
}
//後攻順巡回
void postParse(int u)
{
	if(u == NIL)
	{
		return;
	}
	printf(" %d", u);//根節点
	postParse(T[u].l);//左部分木
	postParse(T[u].r);//右部分木
	
}

int main ()
{
	int i,v,l,r,root;//v:節点,l左要素,r右要素,rootルート要素
	
	scanf("%d", &n);
	for( i = 0; i < n ; i++)//初期化
	{
		T[i].p = NIL;
		T[i].l = NIL;
		T[i].r = NIL;
	}
	
	for ( i=0;i<n;i++)
	{
		scanf("%d %d %d",&v, &l, &r);
		T[v].l =l;
		T[v].r =r;
		if(l != NIL) T[l].p = v;
		if (r != NIL) T[r].p = v;
	}
	//ルートを探す
	for (i =0;i < n;i++)
	{
		if(T[i].p == NIL)
		{
			root =i;
		}
		
	}
	printf("Preorder\n");
		preParse(root);
		printf("\n");
		printf("Inorder\n");
		inParse(root);
		printf("\n");
		printf("Postorder\n");
		postParse(root);
		printf("\n");
	return 0;
}

