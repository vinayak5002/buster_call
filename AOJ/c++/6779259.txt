#include<iostream>
#include<vector>
#include <algorithm>

#define INF 2147483647

struct update_data{
    int s;
    int t;
    int x;
};

void initRMQ(int n);
void update(int s, int t, int x);
void update_v2(void);
int find(int i);
int query(int a, int b, int k, int l, int r);

int n_;
int n;
int min_v=INF;
std::vector<int> D;
std::vector<update_data> update_stack;
std::vector<int> update_position;

int main(){
    int q;
    std::cin>>n_>>q;
    std::vector<int> update_position_(n_,-1);
    update_position = update_position_;
    int update_count=-1;
    initRMQ(n_);

    for(int i = 0;i<q;i++){
        int cmd;
        std::cin>>cmd;

        if(cmd==0){
            update_data update_content;
            std::cin>>update_content.s>>update_content.t>>update_content.x;
            update_count++;
            update_stack.push_back(update_content);
            update_position[update_content.s]=update_count;
            update_position[update_content.t]=update_count;

        }
        if(cmd==1){
            // std::cout<<"cmd:"<<cmd<<std::endl;
            // for(int j = 0;j<update_position.size();j++){
            //     std::cout<<update_position[j]<<" ";
            // }
            // std::cout<<std::endl;

            int i;
            std::cin>>i;
            if(update_count != -1)update_v2();

            // std::cout<<"D.size() ="<<D.size()<<std::endl;
            // for(int j = n-1;j<D.size();j++){
            //     std::cout<<D[j]<<" ";
            // }
            // std::cout<<std::endl;


            std::cout<<find(i)<<std::endl;

            update_count=-1;
            
            update_position = update_position_;
            
            std::vector<update_data> _update_stack;
            update_stack = _update_stack;
        }

    }
    return 0;

}

void initRMQ(int n_){
    n=1;
    
    while(n < n_){
        n*=2;
    }
    std::vector<int> D_((n*2)-1,INF);
    D = D_;

    // for(int i=0;i<2*n-1;i++){
    //     D[i]=INF;
    // }
}

// void update(int s, int t, int x){
//     int s_ =s + n-1, t_ = t + n-1; // convert array index to tree index 


//     for(int i = s_;i<=t_;i++){
//             D[i] = x;
//     }

//     // std::replace(D.begin()+s,D.end()+t+1,true,x);

//     if(min_v > x){
//         min_v = x;
//         query(s,t,0,0,n);
//     }
// }

void update_v2(void){
    int stack_index=-1;
    for(int i = 0;i<=update_stack[update_stack.size()-1].t;i++){
        
        if(stack_index == -1 && update_position[i]==-1)continue;
        if(stack_index == -1 && update_position[i]!=-1){
            stack_index = update_position[i];
            D[i+n-1]=update_stack[stack_index].x;
            continue;
        }
        if(stack_index < update_position[i]){
            stack_index = update_position[i];
            D[i+n-1]=update_stack[stack_index].x;
            continue;
        }
        D[i+n-1]=update_stack[stack_index].x;
    }


    stack_index=-1;

    for(int i = n_-1;i>update_stack[update_stack.size()-1].t;i--){
        
        if(stack_index == -1 && update_position[i]==-1)continue;
        if(stack_index == -1 && update_position[i]!=-1){
            stack_index = update_position[i];
            D[i+n-1]=update_stack[stack_index].x;
            continue;
        }
        if(stack_index < update_position[i]){
            stack_index = update_position[i];
            D[i+n-1]=update_stack[stack_index].x;
            continue;
        }
        D[i+n-1]=update_stack[stack_index].x;
    } 
}



int find(int i){
    i += n-1;
    return D[i];
}

int query(int a, int b, int k, int l, int r){
    if(r<=a || b<=l) return INF; //case1 return INF
    if(a<=l && r<=b) return D[k]; //case2 return D[k]
    // case 3
    int vl = query(a, b, k*2 + 1, l, (l + r)/2);
    int vr = query(a, b, k*2 + 2, (l + r)/2, r);
    D[k]=std::min(vl, vr);
    return std::min(vl, vr);
}
