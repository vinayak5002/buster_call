#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using tupi = tuple<ll, ll, ll>;
using tupd = tuple<double, double, double>;

const double eps = 0.00001;

tupi input() {
    int a, b, c; cin >> a >> b >> c;
    return {a, b, c};
}

inline ll dot(tupi a, tupi b) {
    return get<0>(a)*get<0>(b) + get<1>(a)*get<1>(b) + get<2>(a)*get<2>(b);
}

inline double dot(tupd a, tupi b) {
    return get<0>(a)*get<0>(b) + get<1>(a)*get<1>(b) + get<2>(a)*get<2>(b);
}

inline double dot(tupd a, tupd b) {
    return get<0>(a)*get<0>(b) + get<1>(a)*get<1>(b) + get<2>(a)*get<2>(b);
}

inline tupi diff(tupi a, tupi b) {
    return {get<0>(a) - get<0>(b), get<1>(a) - get<1>(b), get<2>(a) - get<2>(b)};
}

inline tupd diff(tupi a, tupd b) {
    return {get<0>(a) - get<0>(b), get<1>(a) - get<1>(b), get<2>(a) - get<2>(b)};
}

inline tupd diff(tupd a, tupi b) {
    return {get<0>(a) - get<0>(b), get<1>(a) - get<1>(b), get<2>(a) - get<2>(b)};
}

inline tupd diff(tupd a, tupd b) {
    return {get<0>(a) - get<0>(b), get<1>(a) - get<1>(b), get<2>(a) - get<2>(b)};
}

inline tupi add(tupi a, tupi b) {
    return {get<0>(a) + get<0>(b), get<1>(a) + get<1>(b), get<2>(a) + get<2>(b)};
}

inline tupd add(tupi a, tupd b) {
    return {get<0>(a) + get<0>(b), get<1>(a) + get<1>(b), get<2>(a) + get<2>(b)};
}

inline tupd add(tupd a, tupd b) {
    return {get<0>(a) + get<0>(b), get<1>(a) + get<1>(b), get<2>(a) + get<2>(b)};
}

inline tupi times(tupi a, ll v) {
    return {v*get<0>(a), v*get<1>(a), v*get<2>(a)};
}

inline tupd times(tupi a, double v) {
    return {v*get<0>(a), v*get<1>(a), v*get<2>(a)};
}

inline tupd times(tupd a, ll v) {
    return {v*get<0>(a), v*get<1>(a), v*get<2>(a)};
}

inline tupd times(tupd a, double v) {
    return {v*get<0>(a), v*get<1>(a), v*get<2>(a)};
}

tupd projection(tupi l, tupi r, tupi p) {
    tupi seg = diff(r, l);
    if (get<0>(seg) == 0 and get<1>(seg) == 0 and get<2>(seg)) return p;
    double coef = (double)dot(diff(p, l), seg) / (double)dot(seg, seg); 
    if (coef < 0.0) return l;
    if (coef > 1.0) return r;
    return add(l, times(diff(r, l), coef));
}

int main() {
    int n, q; cin >> n >> q;
    vector<tupi> barrier(n);
    vector<int> rs(n);
    vector<ll> ls(n);
    for (int i = 0 ; i < n ; i++) {
        barrier[i] = input();
        cin >> rs[i] >> ls[i];
    }

    vector<tupi> blue(q), red(q);
    for (int i = 0 ; i < q ; i++) {
        blue[i] = input();
        red[i] = input();
    }

    
    for (int i = 0 ; i < q ; i++) {
        ll ans = 0;
        for (int j = 0 ; j < n ; j++) {
            tupd t = diff(barrier[j], projection(blue[i], red[i], barrier[j]));
            ans += (dot(t, t) <= (double)rs[j]*rs[j] + eps ? ls[j] : 0);
        }

        cout << ans << endl;
    }

}

