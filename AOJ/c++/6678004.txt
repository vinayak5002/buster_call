#include <iostream>
using namespace std;

struct Card{
    char c;
    int value;
};

void BubbleSort(int n, struct Card A[]){
    int i,j;
    for(i=n;i>0;i--){
        for(j=0;j<i-1;j++){
            if(A[j].value>A[j+1].value){
                Card temp = A[j];
                A[j] = A[j+1];
                A[j+1] = temp;
            }
        }
    }
}

void InsertSort(int n, struct Card A[]){
    for(int i=0;i<n;i++){
        int min = i;
        for(int j=i;j<n;j++){
            if(A[j].value<A[min].value) min = j;
        }
        if(min!=i){
            Card temp = A[i];
            A[i] = A[min];
            A[min] = temp;
        }
        
    }
}

void PrintData(int n, struct Card A[]){
    for(int i=0;i<n;i++){
        if(i) cout << " ";
        cout << A[i].c << A[i].value;
    }
    cout << endl;
}

void Compare(int n, struct Card A[], struct Card B[]){
    bool same = true;
    for(int i=0;i<n;i++){
        if(A[i].c!=B[i].c || A[i].value!=B[i].value){
            same = false;
            break;
        }
    }
    if(same){
        cout << "Stable" << endl;
    }else{
        cout << "Not stable" << endl;
    }
}

int main(){
    int n;
    Card C1[100], C2[100];

    cin >> n;
    for(int i=0;i<n;i++) cin >> C1[i].c >> C1[i].value;
    for(int i=0;i<n;i++) C2[i] = C1[i];

    BubbleSort(n, C1);
    PrintData(n, C1);
    cout << "Stable" << endl;
    InsertSort(n, C2);
    PrintData(n, C2);
    Compare(n, C1, C2);

    return 0;
}
