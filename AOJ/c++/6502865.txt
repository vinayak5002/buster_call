#include <bits/stdc++.h>

#define rep(i, to) for (int i=0; i<to; i++)
#define repr(i, from, to) for (int i=from; i<to; i++)
#define all(v, func) [&](){ for (auto _: v) if (!(func)) return false; return true; }()
#define some(v, func) [&](){ for (auto _: v) if (func) return true; return false; }()

using namespace std;
using ll = long long;
using P = pair<int, int>;

#ifdef DEBUG
#include "debug.hpp"
#else
template<class T> void print(T v) { cout << v << endl; }
void _main(); int main() { _main(); }
#endif

// ================================================================================ //

template<class T> auto range(T to) -> vector<T> {
    vector<T> v(to); iota(v.begin(), v.end(), T()); return move(v);
}

bool check(vector<int> pos) {
    rep(i, 8) repr(j, i+1, 8) {
        if (abs(pos[i] - pos[j]) == abs(i - j)) return false;
    }
    return true;
}

void _main() {
    int K; cin >> K;
    vector<P> Q(K); rep(i, K) cin >> Q[i].second >> Q[i].first;
 
    // pos[y] = x
    vector<int> pos = range(8);
    
    do if (all(Q, pos[_.second] == _.first)) {
        auto ok = check(pos);
        if (ok) {
            rep(y, 8) {
                rep(x, 8) if (pos[y] == x) cout << "Q"; else cout << ".";
                cout << endl;
            }
            return;
        }
    } while (next_permutation(pos.begin(), pos.end()));
}

