#include<stdio.h>
#define MAX 100
#define INFTY (1<<21)
#define white 0 //訪問状態
#define gray 1
#define black 2

int n;
int A[MAX][MAX]; //n×nの隣接行列
int d[MAX]; //重みが最小の辺の重みを記録
int p[MAX]; //頂点の親を記録
int color[MAX]; //訪問状態を記録

int prim()
{
	int i, v, u, mincost;
	int total = 0;
	
	for(i = 0; i < n; i++) //初期化
	{
		color[i] = white; 
		d[i] = INFTY;
	}
	
	d[0] = 0;
	p[0] = -1;
	
	for(;;)
	{
		mincost = INFTY;
		
		for(i = 0; i < n; i++)
		{
			if(color[i] != black && d[i] < mincost)
			{
				mincost = d[i];
				u = i;
			}
		}
		
		if(mincost == INFTY)
		{
			break;
		}
		
		color[u] = black;
		
		for(v = 0; v < n; v++)
		{
			if(color[v] != black && A[u][v] != INFTY)
			{
				if(d[v] > A[u][v])
				{
					d[v] = A[u][v];
					p[v] = u;
					color[v] = gray;
				}
			}
		}
	}
	
	for(i = 0; i < n; i++)
	{
		if(p[i] != -1)
		{
			total = total + A[i][p[i]];
		}
	}
	
	return total;
}


int main(void)
{
	int i, j, result;
	
	scanf("%d", &n); 
	
	for(i = 0; i < n; i++)
	{
		for(j = 0; j < n; j++)
		{
			scanf("%d", &A[i][j]);
			if(A[i][j] == -1)
			{
				A[i][j] = INFTY; // 辺がない場合(-1)非常に大きな値を設定
			}
		}
	}
	
	result = prim();
	
	printf("%d\n", result);
	
	return 0;
}

