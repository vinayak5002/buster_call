#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
using namespace std;
template<class Abel> struct UnionFind {
       vector<int> par;
       vector<int> rank;
       vector<Abel> diff_weight;
       UnionFind(int n = 1, Abel SUM_UNITY = 0) {
              init(n, SUM_UNITY);
       }
       void init(int n = 1, Abel SUM_UNITY = 0) {
              par.resize(n); rank.resize(n); diff_weight.resize(n);
              for (int i = 0; i < n; ++i) par[i] = i, rank[i] = 0, diff_weight[i] = SUM_UNITY;
       }
       int root(int x) {
              if (par[x] == x) {
                     return x;
              }
              else {
                     int r = root(par[x]);
                     diff_weight[x] += diff_weight[par[x]];
                     return par[x] = r;
              }
       }
       Abel weight(int x) {
              root(x);
              return diff_weight[x];
       }
       bool issame(int x, int y) {
              return root(x) == root(y);
       }
       bool merge(int x, int y, Abel w) {
              w += weight(x); w -= weight(y);
              x = root(x); y = root(y);
              if (x == y) return false;
              if (rank[x] < rank[y]) swap(x, y), w = -w;
              if (rank[x] == rank[y]) ++rank[x];
              par[y] = x;
              diff_weight[y] = w;
              return true;
       }
       Abel diff(int x, int y) {
              return weight(y) - weight(x);
       }
};
int main() {
    int N, M;
    int c, a, b, w;

    cin >> N >> M;

    UnionFind<int> uf(N);
    for (int i = 0; i < M; i++) {
        cin >> c;
        if (c == 0) {
            cin >> a >> b >> w;
            uf.merge(a, b, w);
        }
        else {
            cin >> a >> b;
            if (!uf.issame(a, b)) puts("?");
            else cout << uf.diff(a, b) << endl;
        }
    }
}
