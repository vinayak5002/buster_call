#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#define _GLIBCXX_DEBUG
using namespace std;
using std::cout;
using std::cin;
using std::endl;
using ll=long long;
using ld=long double;
ll ILL=1167167167167167167;
const int INF=1050000000;
const ll mod=1e9+7;
#define rep(i,a) for (ll i=0;i<a;i++)
#define all(p) p.begin(),p.end()
template<class T> using _pq = priority_queue<T, vector<T>, greater<T>>;
template<class T> ll LB(vector<T> &v,T a){return lower_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> ll UB(vector<T> &v,T a){return upper_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> bool chmin(T &a,const T &b){if(a>b){a=b;return 1;}else return 0;}
template<class T> bool chmax(T &a,const T &b){if(a<b){a=b;return 1;}else return 0;}
template<class T> void So(vector<T> &v) {sort(v.begin(),v.end());}
template<class T> void Sore(vector<T> &v) {sort(v.begin(),v.end(),[](T x,T y){return x>y;});}
void yneos(bool a){if(a) cout<<"Yes\n"; else cout<<"No\n";}
template<class T> void vec_out(vector<T> &p){for(int i=0;i<(int)(p.size());i++){if(i) cout<<" ";cout<<p[i];}cout<<"\n";}

ll A,B,P;
void solve();
// oddloop
int main() {
	
	while(cin>>A>>B>>P,A) solve();
}

void solve(){
	vector<ll> dp(B-A+2);
	for(ll V=A;V<=B;V++){
		int T=1;
		while(T*10ll<=V) T*=10;
		ll D=V;
		dp[V-A+1]=dp[V-A]-dp[max(0ll,T-A)]+1;
		D/=10,T/=10;
		while(D!=0){
			dp[V-A+1]+=dp[max(0ll,D-A+1)]-dp[max(0ll,T-A)];
			D/=10,T/=10;
		}
		dp[V-A+1]%=P;
		dp[V-A+1]=(dp[V-A+1]+dp[V-A])%P;
	}
	//if(B-A<100) vec_out(dp);
	cout<<(P+dp[B-A+1])%P<<"\n";
}

