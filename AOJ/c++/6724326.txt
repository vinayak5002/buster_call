#include <algorithm>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <queue>
#include <vector>

using namespace std;
class Dice {
public:
    int sides[6];
    Dice(int s[6])
    {
        for (int i = 0; i < 6; i++) {
            sides[i] = s[i];
        }
    }

    void roll_to_N()
    {
        int newSides[6] = {
            sides[1], sides[5], sides[2], sides[3], sides[0], sides[4]
        };
        for (int i = 0; i < 6; ++i) {
            sides[i] = newSides[i];
        }
    }
    void roll_to_W()
    {
        int newSides[6] = {
            sides[2], sides[1], sides[5], sides[0], sides[4], sides[3]
        };
        for (int i = 0; i < 6; ++i) {
            sides[i] = newSides[i];
        }
    }
    void roll_to_S()
    {
        int newSides[6] {
            sides[4], sides[0], sides[2], sides[3], sides[5], sides[1]
        };
        for (int i = 0; i < 6; ++i) {
            sides[i] = newSides[i];
        }
    }
    void roll_to_E()
    {
        int newSides[6] {
            sides[3], sides[1], sides[0], sides[5], sides[4], sides[2]
        };
        for (int i = 0; i < 6; ++i) {
            sides[i] = newSides[i];
        }
    }
};
int main()
{
    cout << std::fixed << std::setprecision(15);
    static const double pi = 3.141592653589793;
    int s[6];
    for (int i = 0; i < 6; i++) {
        int n;
        cin >> n;
        s[i] = n;
    }
    Dice cube(s);
    string str;
    cin >> str;
    for (int i = 0; i < str.size(); i++) {
        char st = str[i];
        if (st == 'S')
            cube.roll_to_S();
        else if (st == 'E')
            cube.roll_to_E();
        else if (st == 'N')
            cube.roll_to_N();
        else if (st == 'W')
            cube.roll_to_W();
    }
    cout << cube.sides[0] << endl;
}

