#include<stdio.h>
#include<stdlib.h>

#define N 100

char graph[N+1][N+1];
//distanceは一つ目にid,二つ目に距離を入れる
int distance[N][2];
//listは次回探索するid(何もない時は先頭に-1)
int list[N];
int nextlist[N];

void search(int n,int i)
{
	int j, l;
	int m=0; //mはnextlistの位置
	int k=0; //kはlistの位置
	int d=1; //dはid=1からの距離
	int end=0;
	for(j=0; j<n; j++){
		if(graph[i][j] == '1' && distance[j][1] == -1){
			distance[j][1] = d;
			list[k++] = j;
			end=1;
		}
	}
	d++;
	//更に下が存在する場合
	while(end){
		end=0;
		for(j=0; j<k; j++){
			for(l=0; l<n; l++){
				if(graph[list[j]][l] == '1' && distance[l][1] == -1){
					distance[l][1] = d;
					nextlist[m++] = l;
					end=1;
				}
			}
		}
		k = m;
		for(m=0; m<k; m++){
			list[m] = nextlist[m];
		}
		m=0;
		d++;
	}
}

int main(void)
{
	char str[512];
	char tmp[8];
	int n;
	int u, k; //uは一番目、kは二番目の入力(毎行)
	int i; //行数
	int j; //strの位置
	int l; //tmpの位置
	int m; //確認済みの頂点の数
	int p; //atoi(tmp)
	
	fgets(str, sizeof(str), stdin);
	sscanf(str, "%d", &n);
	
	for(i=0; i<n; i++){
		
		//'0'で埋める
		for(j=0; j<n; j++){
			graph[i][j] = '0';
		}
		//最後にヌル文字を入れる
		graph[i][n] = '\0';
		
		l = sizeof(tmp);
		while(0 < l){
			tmp[l--] = '\0';
		}
		
		u = -1;
		k = -1;
		j=0;
		
		fgets(str, sizeof(str), stdin);
		while(1){
			if(47 < str[j] && str[j] < 58){
				tmp[l++] = str[j];
			}else{
				p = atoi(tmp);
				if(u == -1){ //uが入っていない
					u = p;
				}else if(k == -1){ //kが入っていない
					k = p;
					if(k == 0){ //確認する要素が0
						break;
					}
				}else{
					graph[i][p-1] = '1';
					m++;
					if(m >= k){
						m=0;
						break;
					}
				}
				while(0 < l){
					tmp[l--] = '\0';
				}
			}
			j++;
		}
	}
	
	//幅優先探索
	//宣言時のコメントアウトは無視(i,jなど)
	
	//idと距離を入れる
	for(i=0; i<n; i++){
		distance[i][0] = i;
		distance[i][1] = -1;
	}
	
	//id=1(distance[0])は距離0
	distance[0][1] = 0;
	
	search(n, 0);
	
	for(i=0; i<n; i++){
		printf("%d %d\n", i+1, distance[i][1]);
	}
	
	return 0;
}
