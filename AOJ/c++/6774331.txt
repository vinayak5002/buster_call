#include <bits/stdc++.h>

using namespace std;

#define EPS 1e-8
using coord = double;

int sign(coord x) { return (x > EPS) - (x < -EPS); }

struct point {
	coord x, y;

	point() : x(0), y(0) {} point(coord _x, coord _y): x(_x), y(_y) {} //construtor

	inline point operator+(point p){ return {x+p.x, y+p.y}; } //soma
	inline point operator-(point p){ return {x-p.x, y-p.y}; } //subtracao
	inline point operator*(coord z){ return {x*z, y*z}; } //produto de ponto por real
	inline point operator/(coord z){ return {x/z, y/z}; } //divisao de ponto por real
	
	inline coord operator*(point p){ return x*p.x + y*p.y; } //produto escalar

	inline double norm(){ return sqrt(x*x + y*y); } //norma
	inline coord norm2(){ return x*x + y*y; } //norma*norma
};

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	int q;
	double aux;
	point p1, p2, p, vet1, vet2, proj;
	cin >> p1.x >> p1.y >> p2.x >> p2.y >> q;
	cout << setprecision(10) << fixed;
	
	vet1 = p2 - p1;
	
	while(q > 0){
		cin >> p.x >> p.y;

		vet2 = p - p1;
		
		proj = (vet1*((vet1*vet2)/vet1.norm2()))+p1;
		
		cout << proj.x << " " << proj.y << endl;

		q--;
	}

	return 0;
}
