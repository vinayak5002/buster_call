#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

class RUQ{
private:
	const int INF = 2147483647;
	vector<int> segment;
	int N;

public:
	RUQ(){
		int n, q;
		cin >> n >> q;

		initRUQ(n);

		for(int i=0; i<q; i++){
			int com;
			cin >> com;

			if(com==0){
				int s, t, x;
				cin >> s >> t >> x;
				update(s, t, x);
			}
			else if(com==1){
				int k;
				cin >> k;
				find(k);
			}
		}
	}

	void initRUQ(int n_){
		N=1;

		while(N < n_){
			N *= 2;
		}

		segment.resize(2*N-1);

		for(int i=0; i<segment.size(); i++){
			segment[i] = INF;
		}
	}

	void update(int s, int t, int x){
		for(int i=s; i<=t; i++){
			if(i%2==0)
				updateOne(i, x);
			else
				segment[N-1 + i] = x;
		}
	}

	void updateOne(int k, int x){
		k += N-1;
		segment[k] = x;
		while(k>0 && segment[(k-1)/2]!=x){
			k = (k-1)/2;
			segment[k] = min(segment[k*2+1], segment[k*2+2]);
		}
	}

	void find(int k){
		cout << segment[N-1 + k] << endl;
	}
};

int main(){
	RUQ ruq = RUQ();
	return 0;
}
