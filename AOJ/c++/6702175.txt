#ifndef _GLIBCXX_NO_ASSERT
#include <cassert>
#endif
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <ciso646>
#include <climits>
#include <clocale>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#if __cplusplus >= 201103L
#include <ccomplex>
#include <cfenv>
#include <cinttypes>
#include <cstdbool>
#include <cstdint>
#include <ctgmath>
#include <cwchar>
#include <cwctype>
#endif

// C++
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>

#if __cplusplus >= 201103L
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <typeindex>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#endif

/*
 二分探索     ALDS1-ALDS1_4_B

 n 個の整数を含む数列 S と、q 個の異なる整数を含む数列 T を読み込み、
 T に含まれる整数の中で S に含まれるものの個数 C を出力するプログラムを作成してください。
 
 入力
 １行目に n 、２行目に S を表す n 個の整数、
 ３行目に q、４行目に T を表す q 個の整数が与えられます。
 
 出力
 C を１行に出力してください。
 
 制約
 ・S の要素は昇順に整列されている
 ・n ≤ 100,000
 ・q ≤ 50,000
 ・0 ≤ Sの要素 ≤ 10^9
 ・0 ≤ Tの要素 ≤ 10^9
 ・Tの要素は互いに異なる

 入力例 1
 5
 1 2 3 4 5
 3
 3 4 1

 出力例 1
 3

 入力例 2
 3
 1 2 3
 1
 5

 出力例 2
 0

 入力例 3
 5
 1 1 2 2 3
 2
 1 2

 出力例 3
 2

 */

#include <iostream>
using namespace std;

int main(){
    //入力
    int n;
    cin >> n;
    vector<int>S(n);
    for (int i = 0; i < n; i++) cin >> S[i];
    
    int q;
    cin >> q;
    int t;
    int ans = 0;
    for (int i = 0; i < q; i++){
        cin >> t;
        if (binary_search(S.begin(), S.end(), t)) ans++;
    }
    cout << ans << endl;
}

