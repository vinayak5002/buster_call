#include <bits/stdc++.h>
//#include <atcoder/all>
using namespace std;
//using namespace atcoder;
#define rep(i, n) for(int i = 0; i < n; i++)
#define repr(i, n) for(int i = n; i >= 0; i--)
#define range(i, m, n) for(int i = m; i < n; i++)
#define fore(i,a) for(auto &i:a)
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define sum(v) accumulate(all(v),0)
typedef long long ll;
typedef vector<ll> vl;
typedef vector<vector<ll>> vvl;
const ll INF = 1e16;
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
int SN(char s){return int(s-'0');}
int SN(string s){return stoi(s);}
using Graph = vector<vector<ll>>;
using mint1 = modint1000000007;
using mint2 = modint998244353;
struct edge{ll to, cost;};
int main(){
    ll V,E,R;cin >> V >> E >> R;
    vector<vector<pair<ll,ll>>> G(V);
    rep(e,E){
        ll S,T,D;cin >> S >> T >> D;
        G[S].push_back(make_pair(D,T));
    }
    vl dist(V,INF);
    priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>> Q;
    Q.push(make_pair(0,R));
    dist[R] = 0;
    vector<bool> seen(V,false);
    while(!Q.empty()){
        ll u = Q.top().second;Q.pop();
        seen[u] = true;
        fore(next,G[u]){
            ll cost = next.first,v = next.second;
            if(!seen[v] && dist[v] > dist[u] + cost){
                dist[v] = dist[u] + cost;
                Q.push(make_pair(dist[v],v));
            }
        }
    }
    rep(v,V){
        if(dist[v] == INF)cout << "INF" << endl;
        else cout << dist[v] << endl;
    }
}
