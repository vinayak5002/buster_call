#include <bits/stdc++.h>
using std::cin;
using std::getline;
using std::cout;
using std::endl;
using std::string;
using std::bitset;
using std::vector;
using std::array;
using std::stack;
using std::queue;
using std::priority_queue;
using std::set;
using std::map;
using std::pair;
using llong = long long;
template<typename T> using nLimits = std::numeric_limits<T>;
#define ALL(a) (a).begin(), (a).end()
#define REP(i, n) for (int i = 0; i < static_cast<int>(n); ++i)
#define RREP(i, n) for (int i = static_cast<int>(n) - 1; i >= 0; --i)
#define FOR(i, a, b) for (int i = static_cast<int>(a); i < static_cast<int>(b); ++i)
#define RFOR(i, a, b) for (int i = static_cast<int>(a) - 1; i >= static_cast<int>(b); --i)
constexpr int INF = 1001001001;
constexpr llong LINF = 1001001001001001001ll;

template<typename T> inline bool chMin(T &a, T b) { return ((a > b) ? (a = b, true) : (false)); }
template<typename T> inline bool chMax(T &a, T b) { return ((a < b) ? (a = b, true) : (false)); }
template<typename T> void printArray(T a, int n = 0);


static const int dx[4] = {-1, 0, 1, 0};  // l, d, r, u
static const int dy[4] = {0, -1, 0, 1};  // l, d, r, u
static const char dir[4] = {'u', 'l', 'd', 'r'};


class SlidePuzzleSolver {
private:
    struct SlidePuzzle {
        SlidePuzzle() {}

        SlidePuzzle(int n_) {
            n = n_;
            n2 = n_ * n_;
            state.resize(n2);
        }

        bool operator<(const SlidePuzzle &sp) const {
            REP(i, n2) {
                if (state[i] != sp.state[i]) return state[i] > sp.state[i];
            }
            return false;
        }
        
        int n, n2;
        vector<int> state;
        // string path;
        int space_idx;
        int cost;
        int md;  // Manhattan distance
    };

    struct EstimatedState {
        EstimatedState(int n) { sp = SlidePuzzle(n); }
        SlidePuzzle sp;
        int estimated;
        bool operator<(const EstimatedState &s) const {
            return estimated > s.estimated;
        }
    };

    int getAllMd(SlidePuzzle &sp) {
        int sum = 0;
        REP(i, n2) {
            if (sp.state[i] == n2) continue;
            sum += md_memo[i][sp.state[i] - 1];
        }
        return sum;
    }

public:
    SlidePuzzleSolver(int n_) {
        n = n_; n2 = n * n;
        md_memo.resize(n2, vector<int>(n2));
        REP(i, n2) REP(j, n2) {
            md_memo[i][j] = std::abs(i / n - j / n) + std::abs(i % n - j % n);
        }
    }

    void init(SlidePuzzle &sp) {
        REP(i, sp.n2) {
            cin >> sp.state[i];
            if (sp.state[i] == 0) {
                sp.state[i] = sp.n2;
                sp.space_idx = i;
            }
        }
    }

    int astar() {
        SlidePuzzle sp(n);
        init(sp);

        priority_queue<EstimatedState> pq;
        sp.md = getAllMd(sp);
        sp.cost = 0;
        map<SlidePuzzle, bool> m;
        SlidePuzzle u, v;
        EstimatedState initial(n);
        initial.sp = sp;
        initial.estimated = getAllMd(sp);
        pq.push(initial);

        while (!pq.empty()) {
            EstimatedState es = pq.top(); pq.pop();
            u = es.sp;
            if (u.md == 0) return u.cost;
            m[u] = true;

            int sx = u.space_idx / n;
            int sy = u.space_idx % n;

            REP(r, 4) {
                int tx = sx + dx[r];
                int ty = sy + dy[r];
                if (tx < 0 || ty < 0 || tx >= n || ty >= n) continue;
                v = u;

                v.md -= md_memo[tx * n + ty][v.state[tx * n + ty] - 1];
                v.md += md_memo[sx * n + sy][v.state[tx * n + ty] - 1];

                std::swap(v.state[sx * n + sy], v.state[tx * n + ty]);
                v.space_idx = tx * n + ty;
                if (!m[v]) {
                    v.cost++;
                    EstimatedState tmp(n);
                    tmp.sp = v;
                    tmp.estimated = v.cost + v.md;
                    pq.push(tmp);
                }
            }
        }

        return -1;
    }

    int n, n2;
    vector<vector<int>> md_memo;
};


int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout << std::fixed << std::setprecision(20);

    SlidePuzzleSolver solver(4);

    cout << solver.astar() << endl;
}


template<typename T> 
void printArray(T a, int n) {
    string s = std::to_string(a[0]);
    FOR(i, 1, n > 0 ? n : a.size()) s += " " + std::to_string(a[i]);
    cout << s + "\n";
}

