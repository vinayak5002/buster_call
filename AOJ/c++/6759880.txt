#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <iomanip>
#include <numeric>
#include <queue>
#include <cmath>
#include <climits>
#include <cassert>

std::vector<long long> shortest_path_bfs(int from, std::vector<std::vector<int>> &graph){
    int n = graph.size();
    std::vector<long long> mincost(n, -1);
    mincost[from] = 0;
    std::queue<int> wait;
    wait.push(from);
    while(!wait.empty()){
        int pos = wait.front();
        wait.pop();
        for(auto next: graph[pos]){
            if(mincost[next] == -1){
                mincost[next] = mincost[pos] + 1;
                wait.push(next);
            }
        }
    }
    return mincost;
}

using namespace std;
using ll = long long;
const ll mod = 998244353;
const ll inf = 1e9;
 
int main(){
    int n;
    cin >> n;
    vector<vector<int>> a(n+1);
    for(int i=0; i<n; i++){
        int u,k;
        cin >> u >> k;
        for(int j=0; j<k; j++){
            int v;
            cin >> v;
            a[u].push_back(v);
        }
    }
    auto dist = shortest_path_bfs(1, a);
    for(int i=1; i<n+1; i++){
        cout << i << " " << dist[i] << endl;
    }
    return 0;
}

