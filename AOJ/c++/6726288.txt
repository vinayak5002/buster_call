#include<stdio.h>
#define NIL -1
#define TRUE 1
#define FALSE 0

int parent(int i){
  if (i == 0)
    return NIL;
  return (int)(i-1)/2;
}

int left(int i, int n){
  if (2*i + 1 >= n)
    return NIL;
  return 2*i + 1;
}

int right(int i, int n){
  if (2*i + 2 >= n)
    return NIL;
  return 2*i + 2;
}

void print_node(int i, int n, int a[]){
  printf("node %d: key = %d, ", i+1, a[i]);

  int p = parent(i);
  if (p != NIL)
    printf("parent key = %d, ", a[p]);

  int l = left(i, n);
  if (l != NIL) 
    printf("left key = %d, ", a[l]);

  int r = right(i, n);
  if (r != NIL)
    printf("right key = %d, ", a[r]);

  printf("\n");
}

void print_heap(int n, int a[]){
  for (int i = 0; i < n; i++) {
    print_node(i, n, a);
  }
}

void swap(int i, int j, int a[]) {
  int tmp = a[i];
  a[i] = a[j];
  a[j] = tmp;
}

int heap_conf(int i, int p, int a[]){
  if (a[i] <= a[p])  // max heap
  //if (a[i] >= a[p])  // min heap
    return TRUE;
  return FALSE;
}

void up_heap(int n, int a[]){
  int i = n - 1;
  while (i > 0) {
    int p = parent(i);
    if (heap_conf(i, p, a) == FALSE) 
      swap(i, p, a);
    else
      break;
    i = p;
  }
}

void down_heap(int r, int n, int a[]){
  int i = r;   // root of sub tree
  int m;
  
  while(1) {
    m = i;

    int l = left(i, n);
    if (l != NIL) {
      if (heap_conf(l, i, a) == FALSE)
        m = l;
    } else
      break;

    int r = right(i, n);
            
    if (r != NIL) {
      if (heap_conf(r, m, a) == FALSE)
        m = r;
    }

    if (i == m)
      break;
    
    swap(i, m, a);
    i = m;
  }
  
}

void build_max_heap(int n, int a[]){
  for (int i = (int)n/2-1; i>=0; i--)
    down_heap(i, n, a);
}

void insert(int k, int n, int a[]){
  a[n-1] = k;
  up_heap(n, a);
}

int extract(int n, int a[]){
  int m = a[0];
  a[0] = a[n];
  
  down_heap(0, n, a);

  return m;
}


int main(void){
  int a[250], n;
  
  scanf("%d", &n);
  
  for(int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
  }    

  print_heap(n, a);

  return 0;
}

