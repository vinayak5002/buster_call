#include<stdio.h>
#include<iostream>
#include <stdlib.h>

#define NIL  -1

using namespace std;

struct Node{
    int parent;
    int leftChild;
    int rightSibling;
    int depth;
};

Node tree[100001];

void recurDepthSetting(int n, int depth){
    tree[n].depth = depth;
    if(tree[n].rightSibling != NIL) recurDepthSetting(tree[n].rightSibling, depth);
    if(tree[n].leftChild != NIL) recurDepthSetting(tree[n].leftChild, depth + 1);
}

void printNode(int n){
    cout << "node "<< n<< ": parent = "<< tree[n].parent<< ", depth = " << tree[n].depth;
    if(tree[n].parent == NIL) cout << ", root, ";
    else if(tree[n].leftChild == NIL) cout << ", leaf, ";
    else cout << ", internal node, ";
    cout << "[";
    for(int c = tree[n].leftChild; c != NIL ; c = tree[c].rightSibling){
        if(c != tree[n].leftChild) cout << ", ";
        cout << c;
    }
    
    cout << "]" << endl;

}

int n;
int curNode, childNum;
int rSib;

int main(){
    cin >> n;

    for(int i = 0; i < n; i++){
        tree[i].depth = NIL;
        tree[i].leftChild = NIL;
        tree[i].rightSibling = NIL;
        tree[i].parent = NIL;
    }

    for(int i = 0; i < n; i++){
        cin >> curNode >> childNum;
       
        if(childNum > 0){
             int c;
             cin >> c;
             tree[curNode].leftChild = c;
             tree[c].parent = curNode;
             for(int i = 1, j = c; i < childNum; i++){
                cin >> c;
                tree[j].rightSibling  = c;
                tree[c].parent = curNode;
                j = c;
            }
        } 
    }

    int root = 0;
    for(int i = 0; i < n; i++)
        if(tree[i].parent == NIL ){
            root = i;
            break;
        }
    recurDepthSetting(root, 0);

    for(int i = 0; i < n; i++) printNode(i);

    return 0;
}
