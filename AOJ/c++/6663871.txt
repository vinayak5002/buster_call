#define READ_FROM_FILE 0

#if READ_FROM_FILE
#include <fstream>
#endif

#include <iostream>
#include <vector>
using namespace std;


#define ROOT (0)
#define INTERNAL_NODE (1)
#define LEAF (2)

class Node {
public:
	int parent;
	vector<int> children;

	Node() : parent(-1) {
		return;
	}

	~Node() {
		return;
	}

	int get_type() {
		if (parent == -1) {
			return ROOT;
		}
		else if (!children.empty()) {
			return INTERNAL_NODE;
		}
		else {
			return LEAF;
		}
	}

};


int calc_depth(const vector<Node>& nodes, int i) {
	int d = 0;
	int n = nodes[i].parent;

	while (n != -1) {
		n = nodes[n].parent;
		d++;
	}
	return d;
}


int main() {
#if READ_FROM_FILE
	ifstream ifs("test0.txt");
	cin.rdbuf(ifs.rdbuf());
#endif
	int n = 0;
	vector<Node> node_vec;

	cin >> n;
	node_vec.resize(n);
	for (int i = 0; i < n; i++) {
		int id = -1;
		int k = -1;

		cin >> id >> k;
		for (int j = 0; j < k; j++) {
			int cid = -1;

			cin >> cid;
			node_vec[id].children.push_back(cid);
			node_vec[cid].parent = id;
		}
	}

	for (int i = 0; i < node_vec.size(); i++) {
		cout << "node " << i << ": ";
		cout << "parent = " << node_vec[i].parent << ", ";
		cout << "depth = " << calc_depth(node_vec, i) << ", ";
		if (node_vec[i].get_type() == ROOT) {
			cout << "root, ";
		}
		else if (node_vec[i].get_type() == INTERNAL_NODE) {
			cout << "internal node, ";
		}
		else {
			cout << "leaf, ";
		}
		cout << "[";
		for (int j = 0; j < node_vec[i].children.size(); j++) {
			cout << node_vec[i].children[j];
			if (j < node_vec[i].children.size() - 1) {
				cout << ", ";
			}
		}
		cout << "]" << endl;
	}

	return 0;
}
