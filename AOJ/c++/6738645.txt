#include <iostream>
using namespace std;

int n;

int parent(int i){
    return i/2;
}

int left(int i){
    return 2*i;
}

int right(int i){
    return 2*i+1;
}

void maxHeapify(long A[], int i){
    int l = left(i);
    int r = right(i);
    int max;

    if(l<=n && A[l]>A[i]) max = l;
    else max = i;
    if(r<=n && A[r]>A[max]) max = r;

    if(max!=i){
        // cout << "exchange" << A[i] << "-" << A[max];
        long temp = A[i];
        A[i] = A[max];
        A[max] = temp;
        maxHeapify(A, max);
    }
}

int main(){
    cin >> n;
    long A[n+1];
    for(int i=1;i<=n;i++) cin >> A[i];

    for(int i=n/2;i>0;i--){
        maxHeapify(A, i);
    }

    for(int i=1;i<=n;i++) cout << " " << A[i];
    cout << endl;
}
