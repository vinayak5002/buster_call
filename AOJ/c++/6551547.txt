#define _GLIBCXX_DEBUG
#include <bits/stdc++.h>

// #include <atcoder/all>
using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i++)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i++)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret; };
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret; };
template <typename T>
using pq_inv = priority_queue<T, vector<T>, greater<T>>;

struct MaximumFlow {
    struct Edge {
        int rev, from, to, cap;
        Edge(int r, int f, int t, int c) : rev(r), from(f), to(t), cap(c) {}
    };
    vector<vector<Edge>> node;
    vector<int> visited;
    MaximumFlow(int n) : node(n) {}

    void run_flow(Edge& e, int f) {
        e.cap -= f;
        node[e.to][e.rev].cap += f;
    }

    void add_edge(int from, int to, int cap) {
        int idx_from = (int)node[from].size();
        int idx_to = (int)node[to].size();
        node[from].emplace_back(idx_to, from, to, cap);
        node[to].emplace_back(idx_from, to, from, 0);
    }

    int update_residual_graph(int v, int t, int f) {
        if (v == t) return f;
        visited[v] = 1;
        for (auto&& e : node[v]) {
            if (visited[e.to] == 1) continue;
            if (e.cap == 0) continue;
            int flow = update_residual_graph(e.to, t, min(f, e.cap));
            if (flow == 0) continue;
            run_flow(e, flow);
            return flow;
        }
        return 0;
    }

    int solve(int s, int t) {
        int res = 0;
        while (true) {
            visited.assign(node.size(), 0);
            int flow = update_residual_graph(s, t, INTMAX);
            if (flow == 0) return res;
            res += flow;
        }
        return 0;
    }
};

struct Solver {
    void solve() {
        int v, e;
        cin >> v >> e;
        MaximumFlow f(v);
        rep(i, e) {
            int u, v, c;
            cin >> u >> v >> c;
            f.add_edge(u, v, c);
        }
        int ans = f.solve(0, v - 1);
        cout << ans << endl;
    };
};

int main() {
    std::cin.tie(nullptr);
    Solver solver;
    solver.solve();
    return 0;
}


