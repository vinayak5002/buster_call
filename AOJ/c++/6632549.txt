#include <bits/stdc++.h>

using namespace std;

int dx[] = {-1,0,1,0};
int dy[] = {0,1,0,-1};

template<class T> bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template<class T> void chmax(T& a, T b) {
    if (a < b) {
        a = b;
    }
}

const long long INF = 1LL<<60;
const long long MOD = 1000000007;

int main() {
    int N, M, r; cin >> N >> M >> r;
    vector<vector<pair<int,int>>> G(N);

    for (int i = 0; i < M; ++i) {
        int A, B, C; cin >> A >> B >> C;
        G[A].push_back({B, C});
        G[B].push_back({A, C});
    }

    priority_queue<pair<long long, int>, vector<pair<long long,int>>, greater<pair<long long,int>>> pq;
    vector<bool> used(N, false);
    vector<long long> dist(N, INF);
    pq.push(make_pair(0, r));
    dist[r] = 0;

    while (!pq.empty()) {
        int v = pq.top().second;
        int d = pq.top().first;
        pq.pop();

        if (d > dist[v]) continue;

        for (auto nv : G[v]) {
            if (chmin(dist[nv.first], dist[v] + nv.second)) {
                pq.push({dist[nv.first], nv.first});
            }
        }
    }

    for (int v = 0; v < N; ++v) {
        if (dist[v] < INF) cout << dist[v] << endl;
        else cout << "INF" << endl;
    }
}
