#include <stdio.h>

#define M 100001
#define S 2000000000

typedef struct
{
    char suit;
    int value;
} Card_t;

Card_t l[M / 2 + 2], r[M / 2 + 2];

void merge(Card_t a[], int left, int mid, int right)
{
    int i, k, n1, n2;
    int s = 0, t = 0;

    n1 = mid - left;
    n2 = right - mid;

    for (i = 0; i < n1; i++)
    {
        l[i] = a[left + i];
    }

    for (i = 0; i < n2; i++)
    {
        r[i] = a[mid + i];
    }

    l[n1].value = S;
    r[n2].value = S;

    for (k = left; k < right; k++)
    {
        if (l[s].value <= r[t].value)
        {
            a[k] = l[s];
            s = s + 1;
        }

        else
        {
            a[k] = r[t];
            t = t + 1;
        }
    }
}

void mergeSort(Card_t a[], int left, int right)
{
    int mid;

    if (left + 1 < right)
    {
        mid = (left + right) / 2;

        mergeSort(a, left, mid);
        mergeSort(a, mid, right);
        merge(a, left, mid, right);
    }
}

int partition(Card_t a[], int p, int r)
{
    int i, j;
    Card_t t;
    Card_t s;
    Card_t x;

    x = a[r];
    i = p - 1;

    for (j = p; j < r; j++)
    {
        if (a[j].value <= x.value)
        {
            i++;
            t = a[i];
            a[i] = a[j];
            a[j] = t;
        }
    }

    s = a[i + 1];
    a[i + 1] = a[r];
    a[r] = s;

    return i + 1;
}

void quickSort(Card_t a[], int p, int r)
{
    int q;

    if (p < r)
    {
        q = partition(a, p, r);
        quickSort(a, p, q - 1);
        quickSort(a, q + 1, r);
    }
}

int main()
{
    int n, i, v;
    int stable = 1;

    Card_t m[M];
    Card_t l[M];

    char s[10];

    scanf("%d", &n);

    for (i = 0; i < n; i++)
    {
        scanf("%s %d", s, &v);
        m[i].suit = l[i].suit = s[0];
        m[i].value = l[i].value = v;
    }

    mergeSort(m, 0, n);
    quickSort(l, 0, n - 1);

    for (i = 0; i < n; i++)
    {
        if (m[i].suit != l[i].suit)
        {
            stable = 0;
        }
    }

    if (stable == 1)
    {
        printf("Stable\n");
    }

    else
    {
        printf("Not stable\n");
    }

    for (i = 0; i < n; i++)
    {
        printf("%c %d\n", l[i].suit, l[i].value);
    }

    return 0;
}

