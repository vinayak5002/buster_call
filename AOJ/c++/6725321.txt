#include <bits/stdc++.h>
using namespace std;

using ll = long long;
using vi = vector<int>;
using vvi = vector<vi>;
using vl = vector<ll>;
using vvl = vector<vl>;
using vb = vector<bool>;
using vvb = vector<vb>;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
#define rep(i, s, n) for(ll i = (ll)(s); i < (ll)(n); ++i)

ll INF = 1ll << 60;

const int mod = 1e9+7;
ll dp[2010][2010];
ll sum[2010];

//二項係数 nが定数であるとき O(K)
const ll MAX_k = 2010;
long long com[MAX_k];
long long fac[MAX_k], inv[MAX_k], finv[MAX_k];
void COMinit(ll n){
    com[0] = 1;
    com[1] = n;
    fac[0] = 1;
    fac[1] = n;
    inv[1] = 1;
    finv[0] = finv[1] = 1;
    rep(i, 2, MAX_k){
        fac[i] = fac[i-1]*(n-i+1) %mod;
        inv[i] = mod - inv[mod%i]*(mod/i) %mod;
        finv[i] = finv[i-1]*inv[i] %mod;
        com[i] = fac[i]*finv[i] %mod;
    }
}

long long COM(ll k){
    return com[k];
}

int main(){
    vl ret;
    while(true){
        ll n, d, x;
        cin >> n >> d >> x;
        if(n == 0){
            break;
        }
        rep(i, 0, 2010){
            rep(j, 0, 2010){
                dp[i][j] = 0;
            }
            sum[i] = 0;
        }
        if(x > 1){
            dp[0][n-1] = 1;
        }
        rep(i, 2, x){
            dp[0][n-i] = 1;
        }
        rep(i, 1, n){
            sum[n] = 0;
            rep(j, 1, n+1){
                sum[n-j] = (sum[n-j+1]+dp[i-1][n-j+1]) % mod;
            }
            rep(j, 0, n+1){
                dp[i][j] = (sum[j] - sum[min(j+x-1, n)]) % mod;
            }
        }
        ll ans = 0;
        COMinit(d);
        rep(i, 0, n){
            ans += COM(i+1) * dp[i][0] %mod;
            ans %= mod;
        }
        if(ans < 0){
            ans += mod;
        }
        ret.push_back(ans);
    }

    for(auto r : ret){
        cout << r << endl;
    }
    
    return 0;
    
}
