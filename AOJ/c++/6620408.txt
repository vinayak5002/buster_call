#include <bits/stdc++.h>
using namespace std;
const long long INF = 1LL << 60; // 十分大きな値に
typedef long long ll;
typedef long double ld;
// 動的計画法　支払い方法の最小枚数

int main() {
    ll n,m;
    cin >> n >> m;
    vector<ll> c(m);
    for (ll i=0; i<m; i++) {
        cin >> c[i];
    }

    vector<ll> dp(n+1, INF);
    dp[0] = 0; // 初期化  dp[i] はi円はらう際の最小の枚数。0円はらう最小枚数は0円

    for (ll i=0; i< m; i++) {
        // i番目までのコインを使ってj円を払うほうが枚数が少ないかを判定
        // まずはi番目のコインを使う場合、使わない場合で小さいほうを採用する
        /* 配る場合 */
        #if 0
        for (ll j=0; j+c[i]<=n; j++) {
            dp[j+c[i]] = min(dp[j+c[i]], dp[j]+1); // i番目のコインc[i]を使う場合と使わない場合でj+C[i]円を払うのに枚数が少ないほうを採用
        }
        #endif
        #if 1
        /* もらう場合 */
        for (ll i=0; i<m; i++) {
            for (ll j=c[i]; j<=n; j++) {
                dp[j] = min(dp[j-c[i]]+1, dp[j]); // j円を支払うのにc[i]のコインを使うか使わないか
            }
        }
        #endif
    }

    cout << dp[n] << endl; // n円はらう最小枚数がかえってくる

}
