#include <iostream>
using namespace std;
int N,M;
struct edge{
	int from,to,cost,c;
};
bool flag[20000];
edge es[40000];
int d[10001],INF=0x3f3f3f3f;
int V,E;
int cost[10001];
void shortest_path(int s){
	for(int i=0;i<=V;i++){
		d[i]=INF;
		cost[i]=INF;	
	} 
	d[s]=0;
	cost[s]=0;
	while(true){
		bool update=false;
		for(int i=0;i<E;i++){
			edge e=es[i];
			if(d[e.from]!=INF&&d[e.to]>d[e.from]+e.cost){
				d[e.to]=d[e.from]+e.cost;
				cost[e.to]=e.c;
/*				cout<<e.c<<endl;*/
				update=true;
			}
			if((d[e.to]==d[e.from]+e.cost)&&(cost[e.to]>e.c)){
				cost[e.to]=e.c;
				update=true;
			} 
		}
		if(!update) break;
	}
}

int u,v,D,c;
int main(){
	while(scanf("%d%d",&N,&M),N&&M){
		for(int i=0;i<M;i++){
			scanf("%d%d%d%d",&u,&v,&D,&c);
			es[i].from=u;
			es[i].to=v;
			es[i].cost=D;
			es[i].c=c;
			es[i+M].from=v;
			es[i+M].to=u;
			es[i+M].cost=D;
			es[i+M].c=c;			
		}
		V=N;
		M=M*2;
		E=M;
		shortest_path(1);
		int ans=0;
		for(int i=1;i<=N;i++){
			ans+=cost[i]; 
		}
		printf("%d\n",ans);
	}
	return 0;
}
