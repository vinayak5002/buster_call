#include<bits/stdc++.h>

using namespace std;
using ll=long long;

const double EPS=1e-7;

template<typename T>
int sign(T a){return (a<-EPS)?-1:(a>EPS)?1:0;}

template<typename T, typename U>
int cmp(T a, U b){
    /* a<b: -1, a==b: 0, a>b: 1 */
    return sign(a-b);}

template<typename T>
struct Point{
    T x,y;

    Point(): x(0), y(0){}
    Point(T x, T y): x(x), y(y){}

    // マイナス
    Point operator-() const { return Point(-x,-y);}

    // 和
    Point& operator+=(const Point &P){
        x+=P.x; y+=P.y;
        return *this;
    }

    Point operator+(const Point &P) const {return Point(*this)+=P;}

    // 差
    Point& operator-=(const Point &P){
        x-=P.x; y-=P.y;
        return *this;
    }

    Point operator-(const Point &P) const {return Point(*this)-=P;}

    // 積
    Point operator*(const Point &P) const {
        T a=x*P.x-y*P.y, b=x*P.y+y*P.x;
        return Point<T>(a,b);
    }

    //スカラー倍
    template<typename U>
    Point& operator*=(const U &a){
        x*=a; y*=a;
        return *this;
    }

    template<typename U>
    Point operator*(const U &a) const {return Point(*this)*=a;}

    template<typename U>
    Point& operator/=(const U &a){
        x/=a; y/=a;
        return *this;
    }

    template<typename U>
    Point operator/(const U &a) const {return Point(*this)/=a;}

    // ノルム
    T norm_2() const {return x*x+y*y;}
    double norm() const {return sqrt(x*x+y*y);}

    // クロス積
    T cross(const Point &P) const {return x*P.y-y*P.x;}
    T det(const Point &P) const {return x*P.y-y*P.x;}

    // ドット積
    T dot(const Point &P) const {return x*P.x+y*P.y;}

    // 角度
    double arg() const {return atan2(y,x);}

    // 比較
    bool operator<(const Point &P) const {
        if (cmp(x,P.x)) return cmp(x,P.x)<0;
        return cmp(y,P.y)<0;
    }

    bool operator>(const Point &P) const {return P<*this;}
    bool operator==(const Point &P) const {return (cmp(x,P.x)==0) && (cmp(y,P.y)==0);}

    bool operator<=(const Point &P) const {return (*this<P) || (this==P);}
    bool operator>=(const Point &P) const {return (*this>P) || (this==P);}
    bool operator!=(const Point &P) const {return !(*this==P);}


    // 単位化
    Point<double> unitalize() const {return *this/(this->norm());}

    // 入力
    friend istream &operator>>(istream &is, Point &P) {is >> P.x >> P.y; return (is);}

    // 出力
    friend ostream &operator<<(ostream &os, const Point &P) {return os << P.x << " " << P.y;}
};

template<typename T, typename U>
Point<U> operator*(const T &a, const Point<U> &P){return Point<U>(a*P.x, a*P.y);}

template<typename T, typename U>
struct Circle{
    Point<T> center;
    U radius;

    Circle<T,U> (const Point<T> &P, const U &r): center(P), radius(r){}

    bool is_on(const Point<T> &P){
        return cmp((P-center).norm(), radius)==0;
    }
};

// 円と円の共有点
template<typename T, typename U>
vector<Point<T>> Cross_Point(const Circle<T,U> &C, const Circle<T,U> &D){
    Point<T> v=D.center-C.center, w;
    double d=v.norm();
    U r=C.radius, s=D.radius;

    v=v.unitalize(); w=v*Point<T>(0,1);
    double x=(d*d+r*r-s*s)/(2*d), y=sqrt(max(r*r-x*x,U(0)));

    return {C.center+x*v+y*w, C.center+x*v-y*w};
}

// ある点から円へ引く接線の接点
template<typename T, typename U>
vector<Point<T>> Tangent_Point(const Circle<T,U> &C, const Point<T> &P){
    double r=sqrt(max((P-C.center).norm_2()-C.radius*C.radius, 0.0));
    return Cross_Point(C, Circle(P, r));
}

int main(){
    Point<double> P,c; double r;
    cin >> P >> c >> r;
    Circle<double,double> C(c,r);

    vector<Point<double>> X=Tangent_Point(C,P);

    if (X[0]>X[1]) swap(X[0], X[1]);

    if (sign(X[0].x)==0) X[0].x=0.0;
    if (sign(X[0].y)==0) X[0].y=0.0;
    if (sign(X[1].x)==0) X[1].x=0.0;
    if (sign(X[1].y)==0) X[1].y=0.0;

    cout << setprecision(15) <<  X[0] << "\n" << X[1] << "\n";
}

