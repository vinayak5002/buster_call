#include <bits/stdc++.h>
#define rep(i,s,n) for(long long (i) = (s);(i) < (n);++i)
using namespace std;


typedef string::const_iterator State;
class ParseError {};

int expression(State &begin);
int term(State &begin);
int factor(State &begin);
int number(State &begin);

// beginがexpectedを指していたらbeginを一つ進める。
void consume(State &begin, char expected) {
  if (*begin == expected) {
    begin++;
  } else {
    cerr << "Expected '" << expected << "' but got '" << *begin << "'" << endl;
    cerr << "Rest string is '";
    while (*begin) {
      cerr << *begin++;
    }
    cerr << "'" << endl;
    throw ParseError();
  }
}

// 四則演算の式をパースして、その評価結果を返す。
int expression(State &begin) {
  int ret = term(begin);
  for (;;) {
    if (*begin == '+') {
      begin++;
      ret += term(begin);
    } else if (*begin == '-') {
      begin++;
      ret -= term(begin);
    } else {
      break;
    }
  }
  return ret;
}

// 乗算除算の式をパースして、その評価結果を返す。
int term(State &begin) {
  int ret = factor(begin);
  for (;;) {
    if (*begin == '*') {
      begin++;
      ret *= factor(begin);
    } else if (*begin == '/') {
      begin++;
      ret /= factor(begin);
    } else {
      break;
    }
  }
  return ret;
}

// 括弧か数をパースして、その評価結果を返す。
int factor(State &begin) {
  if (*begin == '(') {
    consume(begin,'(');
    int ret = expression(begin);
    consume(begin,'(');
    return ret;
  } else {
    return number(begin);
  }
}

// 数字の列をパースして、その数を返す。
int number(State &begin) {
  int ret = 0;
  while (isdigit(*begin)) {
    ret *= 10;
    ret += *begin - '0';
    begin++;
  }
  return ret;
}

int main() {
  int n;
  cin >> n;
  cin.ignore();
  rep(i,0,n){
    string s;
    getline(cin, s);
    State begin = s.begin();
    int ans = expression(begin);
    cout << ans << endl;
  }
  return 0;
}
