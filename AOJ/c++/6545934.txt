#include<bits/stdc++.h>
using namespace std;

//#define lson (rt<<1)
//#define rson ((rt<<1)+1)
//#define mid ((l+r)>>1)
#define mst(a) memset(a,0,sizeof(a))
#define cf int Tcodeforces, Tcodeforce;cin>>Tcodeforces;for(Tcodeforce = 1; Tcodeforce <= Tcodeforces; Tcodeforce++)
typedef long long ll;
const ll maxn = 2e5 +7;
const ll maxm = 2e5 +7;
const ll inf = 0x3f3f3f3f;
const ll mod = 1e9 +7;
//////////////////////////////////////////////////////////////
// COUNTER CLOCKWISE
static const int CCW_COUNTER_CLOCKWISE = 1;
static const int CCW_CLOCKWISE = -1;
static const int CCW_ONLINE_BACK = 2;
static const int CCW_ONLINE_FRONT = -2;
static const int CCW_ON_SEGMENT = 0;

//Intercsect Circle & Circle
static const int ICC_SEPERATE = 4; // 不相交
static const int ICC_CIRCUMSCRIBE = 3; // 外接
static const int ICC_INTERSECT = 2; //相交
static const int ICC_INSCRIBE = 1; //内切
static const int ICC_CONTAIN = 0; //包含

#define EPS (1e-10)
#define equals(a, b) (fabs((a)-(b)) < EPS)

//点和向量
class Point{
public:
    double x, y;

    Point(double x = 0, double y = 0) : x(x), y(y) {}

    Point operator + (Point p) {return Point(x+p.x,y+p.y);}
    Point operator - (Point p) {return Point(x-p.x,y-p.y);}
    Point operator * (double a) {return Point(a*x,a*y);}
    Point operator / (double a) {return Point(x/a,y/a);}

    double abs() {return sqrt(norm());}
    double norm() {return x * x + y * y;}

    bool operator < (const Point &p) const {
        return x != p.x ? x < p.x : y < p.y;
    }

    bool operator == (const Point &p) const {
        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;
    }
    void ShowPoint() {cout<<x<<" "<<y<<endl;}
};
typedef Point Vector;

double norm(Vector a) {
    return a.x * a.x + a.y * a.y;
}
double abs(Vector a) {
    return sqrt(norm(a));
}
// 线段和线
struct Segment{
    Point p1, p2;
    Segment() {}
    Segment(Point a, Point b): p1(a), p2(b) {}
};
typedef Segment Line;

//圆和多边形
class Circle {
public:
    Point c;
    double r;
    Circle(Point c = Point(), double r = 0.0) : c(c), r(r){}
};

typedef vector<Point> Polygon;

////////////////函数//////////////////////////////////////////

double dot(Vector a, Vector b) { //点乘
    return a.x * b.x + a.y * b.y;
}

double cross(Vector a, Vector b) {//叉乘
    return a.x*b.y - a.y*b.x;
}

Point project(Segment s, Point p) { // 投影
    Vector base = s.p2 - s.p1;
    double r = dot(p-s.p1, base) / base.norm();
    return s.p1 + base * r;
}

Point reflect(Segment s, Point p) { // 对称点
    return p + (project(s,p)-p) * 2.0;
}

double arg(Vector p) {return atan2(p.y, p.x);} // 角度
Vector polar(double a, double r) {return Point(cos(r) * a, sin(r) * a);} // 极坐标转直角坐标

int ccw(Point p0, Point p1, Point p2) { // p0-p1和p0-p2的方向 顺逆时针 大小
    Vector a = p1 - p0;
    Vector b = p2 - p0;
    //a.Show(); b.Show(); cout<<"|||"<<endl;
    if(cross(a, b) > EPS) {return CCW_COUNTER_CLOCKWISE;} // COUNTER_CLOCKWISE
    if(cross(a, b) < -EPS) {return CCW_CLOCKWISE;} // CLOCKWISE
    if(dot(a, b) < -EPS) {return CCW_ONLINE_BACK;} // ONLINE_BACK
    if(a.norm() < b.norm()) {return CCW_ONLINE_FRONT;} // ONLINE_FRONT
    if(a.norm() > b.norm()) {return CCW_ON_SEGMENT;} // ON_SEGMENT

    return 0;
}
bool convexPolygon(Polygon p) { //凸多边形
    int n = p.size();
    for(int i = 0; i < n; i++) {
        Vector v1, v2;
        v1 = p[(i+1)%n] - p[i];
        v2 = p[(i+2)%n] - p[(i+1)%p.size()];
        if(cross(v1,v2) < 0) return false;
    }
    return true;
}
bool intersect(Point p1, Point p2, Point p3, Point p4) { //p1-p2 p3-p4相交
    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && 
            ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);
}
bool intersect(Segment s1, Segment s2) { // 线段相交
    return intersect(s1.p1, s1.p2, s2.p1, s2.p2);
}
Point getCrossPoint(Segment s1, Segment s2) { // 线段交点
    Vector base = s2.p2 - s2.p1;
    double d1 = abs(cross(base, s1.p1 - s2.p1));
    double d2 = abs(cross(base, s1.p2 - s2.p1));
    double t = d1 / (d1 + d2);
    return s1.p1 + (s1.p2 - s1.p1) * t;
}
pair<Point, Point> getCrossPoints(Circle c, Line l) { //线和圆交点
    //assert(intersect(c, l));
    Vector pr = project(l,c.c);
    Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);
    double base = sqrt(c.r * c.r - norm(pr - c.c));
    return make_pair(pr + e * base, pr - e * base);
}
pair<Point, Point> getCrossPoints(Circle c1, Circle c2) {
    double d = abs(c1.c - c2.c);
    double a = acos( (c1.r*c1.r+d*d-c2.r*c2.r) / (2*c1.r*d) );
    double t = arg(c2.c - c1.c);
    return make_pair(c1.c + polar(c1.r, t+a), c1.c + polar(c1.r, t-a));
}
Point getCrossPointLL(Line l1,Line l2){ //直线交点
  double a=cross(l1.p2-l1.p1,l2.p2-l2.p1);
  double b=cross(l1.p2-l1.p1,l1.p2-l2.p1);
  if(abs(a)<EPS&&abs(b)<EPS) return l2.p1; //共线
  return l2.p1+(l2.p2-l2.p1)*(b/a);
}
int contains(Polygon g, Point p) { // 多边形包含点 IN-2 ON-1 OUT-0
    int n = g.size();
    bool x = false;
    for(int i = 0; i < n; i++) {
        Point a = g[i] - p, b = g[(i+1)%n] - p;
        if( abs(cross(a, b)) < EPS && dot(a, b) < EPS) return 1;
        if( a.y > b.y ) swap(a, b);
        if( a.y < EPS && EPS < b.y && cross(a, b) > EPS) x = !x;
    }
    return (x ? 2 : 0);
}
Polygon andrewScan(Polygon s) { //凸包
    Polygon u, l;
    if(s.size() < 3) return s;
    sort(s.begin(), s.end());
    // x最小的加到u
    u.push_back(s[0]);
    u.push_back(s[1]);
    // x最大的加到l
    l.push_back(s[s.size()-1]);
    l.push_back(s[s.size()-2]);

    //上部
    for(int i = 2; i < int(s.size()); i++) { // 注意ccw规定了是否取边上多的点
        for(int n = u.size(); n >= 2 && ccw(u[n-2], u[n-1], s[i]) == 1; n--) {
            u.pop_back();
        }
        u.push_back(s[i]);
    }
    //下部
    for(int i = s.size() - 3; i >= 0; i--) { // 注意ccw规定了是否取边上多的点
        for(int n = l.size(); n >= 2 && ccw(l[n-2], l[n-1], s[i]) == 1; n--) {
            l.pop_back();
        }
        l.push_back(s[i]);
    }

    // 从左下开始的顺时针生成序列
    reverse(l.begin(), l.end());
    for(int i = u.size() - 2; i >= 1; i--)
    {l.push_back(u[i]);}
    // 返回逆时针的序列
    return l;
}
Polygon convexCut(Polygon p, Line l) { // 切凸多边形返回左侧
    Polygon q;
    int n = p.size();
    for(int i = 0; i < n; i++) {
        if(ccw(l.p1, l.p2, p[i]) != -1) {
            q.push_back(p[i]);
        }
        if(ccw(l.p1, l.p2, p[i])*ccw(l.p1, l.p2, p[(i+1)%n]) < 0) {
            Line tem; tem.p1 = p[i]; tem.p2 = p[(i+1)%n];
            q.push_back(getCrossPointLL(l, tem));
        }
    }
    return q;
}
//////////////////距离/////////////////////////////////////////
double getDistance(Point a, Point b) { // 两点距离
    return (a-b).abs();
}
double getDistanceLP(Line l, Point p) { //点和直线距离
    return abs(cross(l.p2-l.p1,p-l.p1) / abs(l.p2-l.p1));
}
double getDistanceSP(Segment s, Point p) { //点和线段距离
    if ( dot(s.p2 - s.p1, p - s.p1) < 0.0 ) return (p - s.p1).abs();
    if( dot(s.p1 - s.p2, p - s.p2) < 0.0 ) return (p - s.p2).abs();
    return getDistanceLP(s, p);
}
double getDistance(Segment s1, Segment s2) { //线段和线段距离
    if( intersect(s1, s2) ) return 0.0;
    return min(
        min(getDistanceSP(s1, s2.p1), getDistanceSP(s1, s2.p2)),
        min(getDistanceSP(s2, s1.p1), getDistanceSP(s2, s1.p2))
    );
}
double getAreaPolygon(Polygon v) { // 多边形面积 点按逆时针给出
    double res = 0.0;
    int len = v.size();
    for(int i = 0; i < len; i++) {
        res += cross(v[i], v[(i+1)%len]) / 2.0;
    }
    return res;
}
double diameter(Polygon s) { //求给定凸包的直径
    Polygon p = s;
    int n = p.size();
    if(n == 2) return abs(s[0]-s[1]);
    // i最右上点 j最左下点
    int i = 0, j = 0;
    for(int k = 0; k < n; k++) {
        if(p[i] < p[k]) i = k;
        if(!(p[j]<p[k])) j = k;
    }
    // 旋转卡壳
    double res = 0;
    int si = i, sj = j; // 记录起点
    while(i != sj || j != si) {
        res = max(res, abs(p[i] - p[j]));
        if(cross(p[(i+1)%n]-p[i],p[(j+1)%n]-p[j]) < 0.0) { // 旋转
            i = (i+1) % n;
        }
        else {
            j = (j+1) % n;
        }
    }
    return res;
}
///////////////////////////圆///////////////////////////////////////
int intersectCC(Circle c1, Circle c2) { //圆相交
    if(c1.r<c2.r) swap(c1,c2);
    double d = abs(c1.c-c2.c);
    double r = c1.r+c2.r;
    if(d == r) {return ICC_CIRCUMSCRIBE;}
    if(d > r) {return ICC_SEPERATE;}
    if(d+c2.r==c1.r) {return ICC_INSCRIBE;}
    if(d+c2.r<c1.r) {return ICC_CONTAIN;}

    return ICC_INTERSECT;
}
Circle getIncircle(Point pa, Point pb, Point pc){ //内切圆
  Vector v1 = pb - pa;
  Vector v2 = pc - pa;
  Vector v3 = pc - pb;
  Vector v4 = pa - pb;
  Vector c1 = polar(10000.0, (arg(v1) + arg(v2))/2);
  Vector c2 = polar(10000.0, (arg(v3) + arg(v4))/2);
  Point x = getCrossPointLL(Segment(pa, pa + c1), Segment(pb, pb + c2));
  double r = getDistanceLP(Segment(pa, pb), x);
  return Circle(x, r);
}
Circle getExcircle(Point pa, Point pb, Point pc){ //外接圆
  Vector v1 = (pb - pa);
  Vector v2 = (pc - pa);
  Vector v1r = Vector(-v1.y, v1.x);
  Vector v2r = Vector(-v2.y, v2.x);
  Point c1 = pa + v1/2;
  Point c2 = pa + v2/2;
  Point x = getCrossPointLL(Segment(c1, c1 + v1r), Segment(c2, c2 + v2r));
  double r = getDistance(pa, x);
  return Circle(x, r);
}
/////////////////////////////////////////////////////////////////////////////
int n;

signed main() {
    #ifdef moyi_qwq
        freopen("D:/source file/intxt/in.txt","r",stdin);
    #endif
    
int n;
  cin>>n;
  Polygon p;
  for(int i=1;i<=n;i++)
  {
    int x,y;
    cin>>x>>y;
    p.push_back(Point(x,y));
  }
  Polygon ans;
  ans=andrewScan(p);
  cout<<ans.size()<<endl;
  for(int i=0;i<ans.size();i++)
  cout<<ans[i].x<<" "<<ans[i].y<<endl;
    //cerr<<"Time : "<<1000*((double)clock())/(double)CLOCKS_PER_SEC<<"ms";
    return (0);
}

