#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <memory>
#include <climits>
#include <set>
#include <numeric>
#include <sstream>
#include <map>
#include <utility>
#include <ios>
#include <iomanip>
#include <cmath>

#define _USE_MATH_DEFINES
#include <math.h>

using namespace std;

typedef unsigned long long ULL;
typedef long long LL;
typedef unsigned int UI;

struct Pos {
	int x;
	int y;
	Pos() : x(0), y(0) {}
	Pos(int _x, int _y) {
		x = _x;
		y = _y;
	}
	bool operator==(const Pos& o) {
		return o.x == this->x && o.y == this->y;
	}
	bool operator<(const Pos& o)  const {
		return x < o.x || (x == o.x && y < o.y);
	}
};

template<typename T> bool contains(vector<T> vec, T p) {
	return(find(vec.begin(), vec.end(), p) != vec.end());
}
template<typename T, typename T2> bool contains(set<T, T2> m, T key) {
	return(m.find(key) != m.end());
}
template<typename T, typename T2> bool contains(multiset<T, T2> m, T key) {
	return(m.find(key) != m.end());
}
template<typename T, typename T2> bool contains(map<T, T2> m, T key) {
	return(m.find(key) != m.end());
}
template<typename T, typename T2> bool contains(multimap<T, T2> m, T key) {
	return(m.find(key) != m.end());
}
template<typename T, typename T2> void mapInsert(map<T, T2>& m, T key, T2 val) {
	m.insert(make_pair(key, val));
}
template<typename T, typename T2> void mapInsert(multimap<T, T2>& m, T key, T2 val) {
	m.insert(make_pair(key, val));
}

void no() {
	cout << "No" << endl;
	exit(0);
}
void yes() {
	cout << "Yes" << endl;
	exit(0);
}
bool endsWith(string x, string y) {
	auto a = x.rfind(y);
	return (a != string::npos && a == (x.size() - y.size()));
}
bool startsWith(string x, string y) {
	auto a = x.find(y);
	return (a != string::npos && a == 0);
}
vector<long long> divisor(long long n) {
	vector<long long> ret;
	for (long long i = 1; i * i <= n; i++) {
		if (n % i == 0) {
			ret.push_back(i);
			if (i * i != n) ret.push_back(n / i);
		}
	}
	sort(ret.begin(), ret.end());
	return ret;
}


int main()
{
	LL n;
	cin >> n;
	vector<LL> r(n);
	vector<pair<int, int>> cp;
	int up = 0; // -1 down
	LL ans = LLONG_MIN;
	for (int i = 0; i < n; i++) {
		cin >> r[i];
		if (i > 0) {
			if (r[i] > r[i - 1] && up != 1)
				cp.push_back({ i - 1, 1 });
			else if (r[i] < r[i - 1] && up != -1)
				cp.push_back({ i - 1, -1 });
			ans = max(ans, r[i] - r[i - 1]);
		}
	}
	if(up == 1)
		cp.push_back({ r.size() - 1, -1});
	else
		cp.push_back({ r.size() - 1, 1 });
	for (int i = 0; i < cp.size() - 1; i++) {
		for (int j = i + 1; j < cp.size(); j++) {
			LL diff = r[cp[j].first] - r[cp[i].first];
			ans = max(ans, diff);
		}
	}
	
	cout << ans << endl;

	return 0;
}

