#include <bits/stdc++.h>
using namespace std;

// template {{{
using i32 = int;
using u32 = unsigned int;
using i64 = long long;
using u64 = unsigned long long;

#define  range(i, l, r) for (i64 i = (i64)(l); i < (i64)(r); (i) += 1)
#define rrange(i, l, r) for (i64 i = (i64)(r) - 1; i >= (i64)(l); (i) -= 1)

#define  whole(f, x, ...) ([&](decltype((x)) container) { return (f)(  begin(container),  end(container), ## __VA_ARGS__); })(x)
#define rwhole(f, x, ...) ([&](decltype((x)) container) { return (f)( rbegin(container), rend(container), ## __VA_ARGS__); })(x)

#define debug(x) cerr << "(" << __LINE__ << ")" << #x << ": " << (x) << endl

constexpr i32 inf   = 1001001001;
constexpr i64 infll = 1001001001001001001ll;

constexpr i32 dx[] = {0, -1, 1, 0, -1, 1, -1, 1}; 
constexpr i32 dy[] = {-1, 0, 0, 1, -1, -1, 1, 1};

struct IoSetup { IoSetup(i32 x = 15){ cin.tie(0); ios::sync_with_stdio(0); cout << fixed << setprecision(x); cerr << fixed << setprecision(x); } } iosetup;

template <typename T = i64> T input() { T x; cin >> x; return x; }

template <typename T> ostream &operator<<(ostream &os, vector<T> &v) { range(i, 0, v.size()) { os << v[i] << (i + 1 != (int)v.size() ? " " : ""); } return os; } 
template <typename T> istream &operator>>(istream &is, vector<T> &v) { for (T &in : v) is >> in; return is; }

template <typename T1, typename T2> ostream &operator<<(ostream &os, pair<T1, T2> p) { os << "(" << p.first << ", " << p.second << ")"; return os; }
template <typename T1, typename T2> istream &operator>>(istream &is, pair<T1, T2> &p) { is >> p.first >> p.second; return is; }

template <typename T> vector<T> make_vector(size_t a, T b) { return vector<T>(a, b); }
template <typename... Ts> auto make_vector(size_t a, Ts... ts) { return vector<decltype(make_vector(ts...))>(a, make_vector(ts...)); }

template <typename T1, typename T2> inline bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
template <typename T1, typename T2> inline bool chmin(T1 &a, T2 b) { return a > b && (a = b, true); }
// }}}

struct UnionFind {
  vector< int > data;

  UnionFind() = default;

  explicit UnionFind(size_t sz) : data(sz, -1) {}

  bool unite(int x, int y) {
    x = find(x), y = find(y);
    if(x == y) return false;
    if(data[x] > data[y]) swap(x, y);
    data[x] += data[y];
    data[y] = x;
    return true;
  }

  int find(int k) {
    if(data[k] < 0) return (k);
    return data[k] = find(data[k]);
  }

  int size(int k) {
    return -data[find(k)];
  }

  bool same(int x, int y) {
    return find(x) == find(y);
  }

  vector< vector< int > > groups() {
    int n = (int) data.size();
    vector< vector< int > > ret(n);
    for(int i = 0; i < n; i++) {
      ret[find(i)].emplace_back(i);
    }
    ret.erase(remove_if(begin(ret), end(ret), [&](const vector< int > &v) {
      return v.empty();
    }), end(ret));
    return ret;
  }
};

void solve(int n, int m) {
  vector< int > hs(n);
  cin >> hs;

  {
    auto tmp = hs;
    whole(sort, tmp);
    tmp.erase(whole(unique, tmp), tmp.end());
    for (auto &h: hs) h = whole(lower_bound, tmp, h) - tmp.begin();
  }

  vector< vector<int> > vs(n);
  range(v, 0, n) {
    vs[hs[v]].emplace_back(v);
  }

  auto G = make_vector(n, 0, pair<int, int>());
  range(i, 0, m) {
    int u = input() - 1, v = input() - 1;
    int c = input();
    G[u].emplace_back(v, c);
    G[v].emplace_back(u, c);
  }

  int mxh = n;
  {
    UnionFind uf(n);
    int m = n;
    int r = n;
    rrange(h, 0, n) {
      for (auto &v: vs[h]) {
        m--;
        for (auto &[u, _]: G[v]) {
          if (hs[v] > hs[u]) continue;
          if (not uf.same(u, v)) r--;
          uf.unite(u, v);
        }
      }

      if (m + 1 != r) mxh = h - 1;
    }
  }

  i64 ans = 0;
  UnionFind uf(n);
  using pii = pair<int, int>;
  vector< pair<int, pii> > es;
  rrange(h, 0, n) {
    for (auto &v: vs[h]) {
      for (auto &[u, cost]: G[v]) {
        if (hs[v] > hs[u]) continue;
        es.emplace_back(cost, pii(u, v));
      }
    }

    if (mxh < h) continue;
    whole(sort, es);
    for (auto &[cost, p]: es) {
      auto [u, v] = p;
      if (uf.same(u, v)) continue;
      uf.unite(u, v);
      ans += cost;
    }
    es.clear();
  }
  
  cout << ans << endl;
}

signed main() {
  int n, m;

  while (cin >> n >> m, n) {
    solve(n, m);
  }
}

