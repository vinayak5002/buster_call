#include <bits/stdc++.h>
using namespace std;

#ifdef _RUTHEN
#include "debug.hpp"
#else
#define show(...) true
#endif

using ll = long long;
#define rep(i, n) for (int i = 0; i < (n); i++)
template <class T> using V = vector<T>;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int N, M;
    cin >> N >> M;
    V<string> S(N + 2);
    rep(i, N) {
        string s;
        cin >> s;
        S[i + 1] = "#" + s + "#";
    }
    S[0] = S[N + 1] = string(M + 2, '#');
    N += 2, M += 2;
    V<char> pdir = {'v', '>', '^', '<'};
    int gx = -1, gy = -1, cx = -1, cy = -1, ck = -1;
    rep(i, N) {
        rep(j, M) {
            if (S[i][j] == 'G') {
                gx = i, gy = j;
            }
            rep(k, 4) {
                if (S[i][j] == pdir[k]) {
                    cx = i, cy = j, ck = k;
                }
            }
        }
    }
    V<V<V<int>>> seen(N, V<V<int>>(M, V<int>(4, 0)));
    const int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};
    while (true) {
        if (seen[cx][cy][ck]) {
            cout << -1 << '\n';
            return 0;
        }
        seen[cx][cy][ck] = 1;
        if (cx == gx and cy == gy) {
            int ans = 0;
            rep(i, N) rep(j, M) ans += *max_element(seen[i][j].begin(), seen[i][j].end());
            cout << ans << '\n';
            return 0;
        }
        for (int i = 3; i <= 6; i++) {
            int nk = (ck + i) % 4;
            int nx = cx + dx[nk], ny = cy + dy[nk];
            if (!(0 <= nx and nx < N and 0 <= ny and ny < M)) continue;
            if (S[nx][ny] == '#') continue;
            cx = nx, cy = ny, ck = nk;
            break;
        }
    }
    return 0;
}

