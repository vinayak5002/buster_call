#include <iostream>
#include <array>
#include <cmath>

struct Point2D
{
    double x, y;
};

class Vector2D
{
public:
    double x, y;
    Vector2D(double x, double y) : x(x), y(y) {}
    Vector2D(Point2D &p_start, Point2D &p_end) : x(p_end.x - p_start.x), y(p_end.y - p_start.y) {}

    Vector2D operator+(const Vector2D &v) const { return Vector2D(x + v.x, y + v.y); };
    Vector2D operator-(const Vector2D &v) const { return Vector2D(x - v.x, y - v.y); };
    Vector2D operator*(double k) const { return Vector2D(x * k, y * k); };
    Vector2D operator/(double k) const { return Vector2D(x / k, y / k); };

    double dot(const Vector2D &v) const { return x * v.x + y * v.y; };
    double cross(const Vector2D &v) const { return x * v.y - y * v.x; };
    double norm() const { return std::sqrt(x * x + y * y); };
    Vector2D unit() const { return (*this) / norm(); };

    double subtended_angle(const Vector2D &v) const
    {
        double norm_a = dot(*this);
        double norm_b = v.dot(v);
        if (norm_a == 0 || norm_b == 0)
            return 0;

        double value = dot(v) / (norm_a * norm_b);
        return std::acos(value);
    };
};

void read_point(Point2D &p)
{
    std::cin >> p.x >> p.y;
}

Vector2D projection(const Vector2D &a, const Vector2D &b)
{
    double x = a.dot(b) / a.dot(a);
    return a * x;
}

int main()
{
    Point2D p1, p2;

    read_point(p1);
    read_point(p2);

    auto vec_a = Vector2D(p1, p2);

    double q;
    std::cin >> q;

    for (int i = 0; i < q; i++)
    {
        Point2D p{};
        read_point(p);

        auto vec_b = Vector2D(p1, p);
        auto proj_vec = projection(vec_a, vec_b);
        Point2D crossing_p = {p1.x + proj_vec.x, p1.y + proj_vec.y};

        Point2D reflection_p = {2 * crossing_p.x - p.x, 2 * crossing_p.y - p.y};
        printf("%.10f %.10f\n", reflection_p.x, reflection_p.y);
    }
}
