#include <iostream>
using namespace std;

#define INFTY  1000000001

void cp_infty(int *to, int *from, int n)
{
  for (int i = 0; i < n; i++)
    to[i] = from[i];
  to[n] = INFTY;
}

void print_ln(int A[], int n)
{
  for (int i = 0; i < n - 1; i++) 
    cout << A[i] << " ";
  cout << A[n-1] << endl;
}

int mergeSort(int A[], int n)
{
  if (n == 1)
    return 0;
  /*                           // この処理をいれると、比較回数が減ってしまう。
  if (n == 2) {
    if (A[1] < A[0]) {
      swap(A[1], A[0]);
      return 1;
    } else
      return 1;                 // 反点数の場合は return 0
  }
  */
  int n1 = n/2;
  int n2 = n - n1;
  int A1[n1 + 1];
  int A2[n2 + 1];
  cp_infty(A1, A, n1);
  cp_infty(A2, A + n1, n2);

  int cnt1 = mergeSort(A1, n1);  // デバッグするときのために、cnt を３つに分けた。
  int cnt2 = mergeSort(A2, n2);
  int cnt3 = 0;
  int i1 = 0;
  int i2 = 0;
  while (i1 < n1 || i2 < n2) {  // A1[n1], A2[n2] に番兵を置いているので処理が楽
    cnt3++;                       // 比較回数++
    if (A1[i1] <= A2[i2]) {
      A[i1 + i2] = A1[i1];
      i1++;
    } else {
      A[i1 + i2] = A2[i2];
      i2++;
      //      cnt3 += n1 - i1;    <--- 反転数を調べる場合の処理
    }
  }

  return cnt1 + cnt2 + cnt3; 
}

int main()
{
  int n;
  cin >> n;
  int A[n];
  for (int i = 0; i < n; i++)
    cin >> A[i];

  int cnt = mergeSort(A, n);
  print_ln(A, n);
  cout << cnt << endl;
  return 0;
}

