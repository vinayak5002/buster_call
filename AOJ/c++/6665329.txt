#include <stdio.h>
#include <stdlib.h>

typedef struct tree_node_s {//node構造体の定義
  struct tree_node_s *left;
  struct tree_node_s *right;
  int data;
} tree_node_t;

tree_node_t* create_node(int val)
/* 値 val を保持する新しい節点を作成し, その節点へのポインタを返す */
{
  tree_node_t *new_node;
  new_node = (tree_node_t*) malloc(sizeof(tree_node_t));//メモリの配り
  new_node->data = val;
  new_node->left = NULL;
  new_node->right = NULL;//新たなノードを初期化
  return new_node;//ポインタを返す
}


tree_node_t* insert(tree_node_t *n, int val)
/* n を根とする二分木に val (の節点) を挿入する */
{
    if ( n == NULL) {
    n = create_node(val);/*もし 1.nが根なら（最初の節点）あるいは  2.再帰的にinsert目的地（葉）が見つかったら、valの値を持つノードを作成する*/
    }
    if (val < n->data) {//もし目標値が今の節点より小さいなら、左に行く
        n->left = insert(n->left, val);//再帰的に目的地を探し、create_node(val)が終わったら、返す値として親のleftに代入する(親との連結)
    }
    if (val > n->data){//もし目標値が今の節点より大きいなら、右に行く
        n->right = insert(n->right, val);//再帰的に目的地を探し、create_node(val)が終わったら、返す値として親のrightに代入する(親との連結)
    }
    return n;
}

void pre(tree_node_t *n)//preorder巡回
{
    if( n == NULL ) return;//もし葉であれば返す

    printf(" %d", n->data);//先に節点出力して、左部分木巡回、右部分木巡回に進む
    pre(n->left);
    pre(n->right);
}

void in(tree_node_t *n)//inorder巡回
{
    if( n == NULL ) return;//もし葉であれば返す

    in(n->left);//先に左部分木を巡回して、節点を出力して、右部分木巡回に進む
    printf(" %d", n->data);
    in(n->right);
}



void tprint(tree_node_t *n)
/* 二分木の内容を表示する (1. inorder 2. preorder)*/
{
    in(n);
    printf("\n");
    pre(n);
    printf("\n");
}


tree_node_t* find(tree_node_t *n, int val)
/* *n を根とする二分木中に値が val の節点を探す
   見つかればその節点のポインタを, なければ NULL を返す */
{
    while( n != NULL )//nがnullになるまで
    {
        if( n->data == val ) return n;//見つかったら節点のポインタを返す
        else{
            if( n->data < val) n = n->right;//もし目標値が今の節点より大きいなら、右に行く
            else n = n->left;//もし目標値が今の節点より小さいなら、左に行く
        }
    }
    return NULL;
}


void all_delete(tree_node_t *n)
/* 二分木の全てのデータとメモリを解放する */
{
  if (n != NULL) {
    all_delete(n->left);
    all_delete(n->right);
    free(n);//postorderでメモリ解放するのは、nが先にfree()したら、再帰的関数の引数として何か問題があるかもしれないと考えたから
  }
}

int main(void)
{
    tree_node_t *root = NULL;//根の初期化
    tree_node_t *tmp = NULL;
    int i,n,key;//i は loop変数、 n は　命令の数、keyは命令の後の値
    char str[10];//命令の文字列を保存する変数
    scanf("%d", &n);//nを読み込み

    for( i = 0; i < n; i++ )//命令を読み込む
    {
        scanf("%s",str);//文字列部分
        if(str[0] == 'i')//if insert
        {
            scanf("%d",&key);//数字を読み込む
            root = insert(root, key);// (要注意)第一回目のinsertならrootの値はnullでinsert()でrootのメモリが配られて、rootに代入する。第二回からrootの値が変わらない
        }
        else if(str[0] == 'f')//if find
        {
            scanf("%d",&key);//数字を読み込む
            tmp = find(root,key);//findの結果を臨時変数に代入し、もしNULLなら見つからなくて noを、NULLじゃなかったら yesを出力
            if(tmp == NULL)    printf("no\n");
            else    printf("yes\n");
        }
        else//if print
        {
            tprint(root);
        }
    }

    all_delete(root);//全てのメモリ解放する
    return 0;
}
