#include <bits/stdc++.h>

using namespace std;
using point = complex<double>;
double dist(point a, point b) {
    return abs(point(a.real()-b.real(), a.imag()-b.imag()));
}

double eps=1e-9;

typedef complex<double> C;
double cross(C a, C b){
    return a.real() * b.imag() - a.imag() * b.real();
}
// ベクトル p0->p1, q0->q1
bool is_intersect(C p0, C p1, C q0, C q1){
    // p側から見た交差チェック
    auto v0 = p1 - p0;
    auto v1 = q0 - p0;
    auto v2 = q1 - p0;
    if(cross(v0, v1) * cross(v0, v2) >= 0){
        return false;
    }
    // q側から見た交差チェック
    v0 = q1 - q0;
    v1 = p0 - q0;
    v2 = p1 - q0;
    if(cross(v0, v1) * cross(v0, v2) >= 0){
        return false;
    }
    return true;
}

bool solve() {
    int n,m;
    cin>>n>>m;
    if(n==0)return false;

    vector<pair<point,double>> cs;
    vector<pair<point,point>> l;
    for (int i = 0; i < n; i++)
    {
        double x,y,r;
        cin>>x>>y>>r;
        cs.emplace_back(point(x,y),r);
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = i+1; j < n; j++)
        {
            if(dist(cs[i].first,cs[j].first)<cs[i].second+cs[j].second)l.emplace_back(cs[i].first,cs[j].first);
        }
        
    }
    
    for (int Q = 0; Q < m; Q++)
    {
        double px,py,qx,qy;
        cin>>px>>py>>qx>>qy;
        point p(px,py),q(qx,qy);
        vector<int> ps,qs;
        for (int i = 0; i < n; i++)
        {
//cerr<<dist(q,cs[i].second)<<endl;
            if(dist(p,cs[i].first)<cs[i].second)ps.emplace_back(i);
            if(dist(q,cs[i].first)<cs[i].second)qs.emplace_back(i);
        }


        string ans="empty";
        if(ps.size()==qs.size()) {
            if(ps.size()==0) {
                for(auto ln:l) {
                    if(is_intersect(p,q,ln.first,ln.second)) {
                        ans="NO";
                        break;
                    }
                }
                if(ans=="empty")ans="YES";
            }
            for (int i = 0; i < ps.size(); i++)
            {
                if(ps[i]!=qs[i]) {
                    ans="NO";
                    break;
                }
            }
            if(ans=="empty")ans="YES";
        }
        else {
            ans="NO";
        }
        cout<<ans;
        if(Q==m-1)cout<<endl;
        else cout<<" ";
    }

    return true;
}

int main() {
    while(solve());
    return 0;
}
