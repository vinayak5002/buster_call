#include <iostream>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;

using Int = int_fast64_t;

int main()
{
	int N; cin >> N;
	Int D, K; cin >> D >> K;
	vector<pair<Int, int>> SP(N); for (auto& [S, P] : SP) {cin >> P >> S; --P;}
	sort(SP.begin(), SP.end());
	vector<vector<int>> dp(N, vector<int>(2, 0));
	vector<map<Int, int>> S(2);
	auto [S0, P0] = SP[0];
	dp[0][P0] = 1;
	auto t = S0 + 1 + D + K;
	S[1 - P0][t] = 1;
	for (int i = 1; i < N; ++i) {
		auto [Si, Pi] = SP[i];
		for (int P = 0; P < 2; ++P) {
			dp[i][P] = dp[i - 1][P];
			while (!S[P].empty()) {
				auto [t, n] = *S[P].begin();
				if (t > Si) break;
				dp[i][P] = max(dp[i][P], n);
				S[P].erase(S[P].begin());
			}
		}
		++dp[i][Pi];
		auto t = Si + 1 + D + K * dp[i][Pi];
		S[1 - Pi][t] = max(S[1 - Pi][t], dp[i][Pi]);
	}
	cout << max(dp.back()[0], dp.back()[1]) << endl;
	return 0;
}

