#include <bits/stdc++.h>
#define rep(i,n) for(int i = 0; i < (n); i++)
using namespace std;
typedef long long ll;

/*
int weighted_levenshtein(string &a, string &b, int _insert = 1, int _delete = 1, int _substitute = 1){
    int len_a = a.size(), len_b = b.size();
    vector<vector<int>> dp(len_a + 1, vector<int> (len_b + 1, 0));
    for(int i = 0; i < len_a + 1; i++) dp[i][0] = i * _delete;
    for(int j = 0; j < len_b + 1; j++) dp[0][j] = j * _insert;
    for(int i = 1; i < len_a + 1; i++){
        for(int j = 1; j < len_b + 1; j++){
            int x = (a[i - 1] == b[j - 1] ? 0 : _substitute);
            dp[i][j] = min({dp[i - 1][j] + _delete,
                            dp[i][j - 1] + _insert,
                            dp[i - 1][j - 1] + x});
       }
    }
    return dp[len_a][len_b];
}
*/

int main(){
    cin.tie(0);
    ios::sync_with_stdio(0);
    
    while(true) {
        string X; cin >> X; if(X == "#") break;
        string Y; int INSERT,DELETE,SUBSTITUTE,ROTATE; cin >> Y >> INSERT >> DELETE >> SUBSTITUTE >> ROTATE;
        
        int n = (int)X.size();
        int m = (int)Y.size();
        X = X + X;
        Y = Y + Y;
        int ans = 1e9;
        // X -> Y
        for(int rcnt = 0; rcnt < n; rcnt++) {
            vector<vector<int>> dp(n + 1, vector<int>(m + 1, 1e9));
            for(int i = 0; i <= n; i++) dp[i][0] = i * DELETE;
            for(int j = 0; j <= m; j++) dp[0][j] = j * INSERT;
            for(int i = 0; i <= n; i++) {
                for(int j = 0; j <= m; j++) {
                    if(i + 1 <= n) dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + (i + rcnt < n ? DELETE : DELETE - ROTATE));
                    if(j + 1 <= m) dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + INSERT);
                    if(i + 1 <= n && j + 1 <= m) dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][j] + (X[i + rcnt] != Y[j]) * SUBSTITUTE);
                }
                ans = min(ans, ROTATE * rcnt + dp[n][m]);
            }
        }
        cout << ans << endl;
    }
}
