#include<stdio.h>
#include<stdlib.h>

struct node {
	struct node *right;
	struct node *left;
	struct node *parent;
	int key;
};
typedef struct node * Node;
#define NIL NULL
#define MAX 500001
Node root;
Node s = NIL;
Node N[MAX];
int cn = 0;

Node treeMinimum(Node x) {


}

Node treeMaximum(Node x) {


}

Node treeSearch(Node u, int k) {
	
	while(u){
		if(k < u->key){
			u = u->left;
		}else if(k > u->key){
			u = u->right;
		}else{ 
			return u;
		}
	}
	
	return NIL;
}

void inorderNode(Node x) {
	if(x == NIL) return;
	inorderNode(x->left);
	N[cn] = x;
	cn++;
	inorderNode(x->right);
}

void treeDelete(Node z) {
	Node y; // node to be deleted
	Node x; // child of y
	int i, j=0;

    if(z->right == NIL && z->left == NIL){
		y = z->parent;
		if(z->key < y->key) {
			y->left = NIL;
			free(y->left);
		}
		if(z->key > y->key) {
			y->right = NIL;
			free(y->right);
		}
	}else if(z->right != NIL && z->left == NIL){
		y = z->parent;
		x = z->right;
		if(z->key > y->key) y->right = x;
		if(z->key < y->key) y->left = x;
		x->parent = y;
		z = NIL;
		free(z);
	}else if(z->right == NIL && z->left != NIL){
		y = z->parent;
		x = z->left;
		if(z->key > y->key) y->right = x;
		if(z->key < y->key) y->left = x;
		x->parent = y;
		z = NIL;
		free(z);
	}else{
		for(i = 0; i<cn; i++){
			if(N[i] == z) {
				j = i+1;
				break;
			}
		}
		x = N[j];
		z->key = x->key;
		if(x->right == NIL && x->left == NIL){
			y = x->parent;
			if(y->left == x) {
				y->left = NIL;
				free(y->left);
			}
			if(y->right == x) {
				y->right = NIL;
				free(y->right);
			}
		}else if(x->right != NIL && x->left == NIL){
			y = x->parent;
			if(y->right == x) y->right = x->right;
			if(y ->left == x ) y->left = x->right;
			x->right->parent = y;
			x = NIL;
			free(x);
		}else if(x->right == NIL && x->left != NIL){
			y = x->parent;
			if(y->right == x) y->right = x->left;
			if(y ->left == x ) y->left = x->left;
			x->left->parent = y;
			x = NIL;
			free(x);
		}
	}


}

void insert(int k) {
	Node y = NIL;
	Node x = root;
	Node z;

	z = malloc(sizeof(struct node));
	z->key = k;
	z->left = NIL;
	z->right = NIL;

	while(x != NIL){
		y = x;
		if(z->key < x->key){
			x = x->left;
		}
		else{
			x = x->right;
		}
	}
	z->parent = y;

	if(y==NIL){
		root = z;
	}
	else if(z->key < y->key){
		y->left = z;
	}
	else{
		y->right = z;
	}
}

void inorder(Node u) {
	if(u == NIL) return;
	inorder(u->left);
	printf(" %d", u->key);
	inorder(u->right);
}
void preorder(Node u) {
	if(u == NIL) return;
	printf(" %d", u->key);
	preorder(u->left);
	preorder(u->right);
}


int main() {
	int n, i, x;
	char com[20];
	scanf("%d", &n);

	for ( i = 0; i < n; i++ ) {
		scanf("%s", com);
		if ( com[0] == 'f' ) {
			scanf("%d", &x);
			Node t = treeSearch(root, x);
			if ( t != NIL ) printf("yes\n");
			else printf("no\n");
		} else if ( com[0] == 'i' ) {
			scanf("%d", &x);
			insert(x);
		} else if ( com[0] == 'p' ) {
			inorder(root);
			printf("\n");
			preorder(root);
			printf("\n");
		} else if ( com[0] == 'd' ) {
			scanf("%d", &x);
			inorderNode(root);
			treeDelete(treeSearch(root, x));
		}
	}

	return 0;
}

