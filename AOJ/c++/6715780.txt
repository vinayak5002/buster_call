#include<bits/stdc++.h>
using namespace std;

struct dsu {
  public:
    dsu() : _n(0) {}
    dsu(int n) : _n(n), parent_or_size(n, -1) {}

    int merge(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        int x = leader(a), y = leader(b);
        if (x == y) return x;
        if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);
        parent_or_size[x] += parent_or_size[y];
        parent_or_size[y] = x;
        return x;
    }

    bool same(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        return leader(a) == leader(b);
    }

    int leader(int a) {
        assert(0 <= a && a < _n);
        if (parent_or_size[a] < 0) return a;
        return parent_or_size[a] = leader(parent_or_size[a]);
    }

    int size(int a) {
        assert(0 <= a && a < _n);
        return -parent_or_size[leader(a)];
    }

    std::vector<std::vector<int>> groups() {
        std::vector<int> leader_buf(_n), group_size(_n);
        for (int i = 0; i < _n; i++) {
            leader_buf[i] = leader(i);
            group_size[leader_buf[i]]++;
        }
        std::vector<std::vector<int>> result(_n);
        for (int i = 0; i < _n; i++) {
            result[i].reserve(group_size[i]);
        }
        for (int i = 0; i < _n; i++) {
            result[leader_buf[i]].push_back(i);
        }
        result.erase(
            std::remove_if(result.begin(), result.end(),
                           [&](const std::vector<int>& v) { return v.empty(); }),
            result.end());
        return result;
    }

  private:
    int _n;
    // root node: -1 * component size
    // otherwise: parent
    std::vector<int> parent_or_size;
};

int main(){
    int n;
    while(cin >> n, n){
        vector<array<double,4>> a(n);
        for(int i = 0; i < n; i++){
            for(int j = 0; j < 4; j++){
                cin >> a[i][j];
            }
        }
        auto dist = [&](int i, int j){
            double r = 0;
            for(int k = 0; k < 3; k++){
                r += (a[i][k] - a[j][k]) * (a[i][k] - a[j][k]);
            }
            return sqrt(r);
        };
        dsu uf(n);
        vector<tuple<double,int,int>> edge;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < i; j++){
                edge.emplace_back(max(0.0, dist(i, j) - a[i][3] - a[j][3]), i, j);
            }
        }
        sort(edge.begin(), edge.end());
        double d, ans = 0;
        for(int i = 0, u, v; i < edge.size(); i++){
            tie(d, u, v) = edge[i];
            if(uf.same(u, v))continue;
            ans += d;
            uf.merge(u, v);
        }
        printf("%.15lf\n", ans);
    }
}
