#include <iostream>
#include <vector>
#include <algorithm>
#include <deque>
#include <queue>
#include <string>
#include <iomanip>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <utility>
#include <stdio.h>
#include <math.h>
#include <assert.h>
#if __has_include(<atcoder/all>)
#include <atcoder/all>
using namespace atcoder;
#endif
using namespace std;
using ll=long long;
#define read(x) cin>>(x);
#define readll(x) ll (x);cin>>(x);
#define readS(x) string (x);cin>>(x);
#define readvll(x,N) vector<ll> (x)((N));for(int i=0;i<(N);i++){cin>>(x)[i];}

struct S{
  string left;
  ll val;
  string right;
};

S divide(const string& X){
  S res;
  ll xsize=X.size()-1;
  int left=0,right=0;
  ll u=0;
  for(ll i=1;i<xsize;i++){
    if(X[i]=='('){
      left++;
      res.left.push_back(X[i]);
    }else if(X[i]==')'){
      right++;
      res.left.push_back(X[i]);
    }else if(X[i]!='[' || right!=left){
      res.left.push_back(X[i]);
    }else{
      for(ll j=i+1;j<xsize;j++){
        if(X[j]!=']'){
          u*=10;
          u+=X[j]-'0';
        }else{
          for(ll k=j+1;k<xsize;k++){
            res.right.push_back(X[k]);
          }
          break;
        }
      }
      break;
    }
  }
  res.val=u;
  return res;
}


string dfs(string X,string Y){
  S A,B;
  A=divide(X);
  B=divide(Y);
  string L,R;
  if(A.left=="()" || A.left=="(()" || B.left=="()" || B.left=="(()"){
    L="()";
  }else{
    L=dfs(A.left,B.left);
  }
  if(A.right=="()" || A.right=="())" || B.right=="()" || B.right=="())"){
    R="()";
  }else{
    R=dfs(A.right,B.right);
  }
  return "("+L+"["+to_string(A.val+B.val)+"]"+R+")";
}


int main(){
  string A,B;
  cin>>A>>B;
  A="("+A+")";
  B="("+B+")";
  string ans=dfs(A,B);
  for(int i=1;i<ans.size()-1;i++){
    cout<<ans[i];
  }
  cout<<endl;
  return 0;
}


