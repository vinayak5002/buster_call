#define PROBLEM "https://onlinejudge.u-aizu.ac.jp/courses/library/5/GRL/1/GRL_1_B"
#include <bits/stdc++.h>
using namespace std;
using ll = int64_t;
using ull = uint64_t;
using ld = long double;
constexpr ll MOD = 1e9 + 7;
constexpr ll INF = 1e+18;
constexpr ld EPS = 1e-12L;
constexpr ld PI = 3.14159265358979323846L;

// 辺
template<class T>
class Edge {
  static int nextId;

public:
  const int from, to, id;
  const T cost;
  Edge(int from_, int to_, T cost_): from(from_), to(to_), id(nextId++), cost(cost_) {}
};

template<class T>
int Edge<T>::nextId = 0;

template<class T>
ostream &operator<<(ostream &os, Edge<T> edge) {
  os << edge.from << " -> " << edge.to << " (" << edge.cost << ")";
  return os;
}

// グラフ(隣接リスト)
template<class Cost = ll, class E = Edge<Cost>>
class GraphL {
  int n, m;
  vector<vector<E>> adj;
  unordered_map<int, vector<Cost>> shortest_path_dist;
  unordered_map<int, vector<int>> shortest_path_parent;

public:
  static const Cost UNREACHABLE = numeric_limits<Cost>::max();
  static const Cost NEGATIVE_CYCLE = numeric_limits<Cost>::min();
  GraphL() {}
  GraphL(int n_): n(n_), m(0), adj(n_) {}

  template<class... Args>
  void add_edge(int from, int to, Args... args) {
    adj[from].emplace_back(from, to, args...);
    m++;
  }
  void add_node() {
    adj.emplace_back();
    n++;
  }
  vector<E> &operator[](int i) { return adj[i]; }

  // 最短距離
  void dijkstra(int start_node);
  void bellmanFord(int start_node);
  Cost getDist(int from, int to) { return shortest_path_dist[from][to]; }
  vector<int> getShortestPath(int from, int to) {
    vector<int> path;
    for(int cur = to; cur != -1; cur = shortest_path_parent[from][cur]) { path.emplace_back(cur); }
    reverse(path.begin(), path.end());
    return path;
  }
};

template<class E = Edge<ll>>
ostream &operator<<(ostream &os, GraphL<E> graph) {
  os << "N = " << graph.n << ", M = " << graph.m << '\n';
  for(const auto &ev: graph.adj) {
    for(const auto &e: ev) { os << e << '\n'; }
  }
  return os;
}

/**
 * ベルマンフォード法
 * 有向グラフの単一始点最短経路 O(EV)
 * 到達不能：max, 負閉路を通る：min
 * https://mhrb-minase.hatenablog.com/entry/2019/08/20/003915
 */
template<class Cost, class E>
void GraphL<Cost, E>::bellmanFord(int start_node) {
  if(shortest_path_dist.count(start_node)) {
    return;
  }
  vector<Cost> dist(n, GraphL::UNREACHABLE);
  vector<int> parent(n, -1);
  dist[start_node] = 0;
  for(int i = 0; i < n - 1; ++i) {
    for(auto& es: adj){
      for(auto& e: es){
        if(dist[e.from] != GraphL::UNREACHABLE && dist[e.from] + e.cost < dist[e.to]){
          dist[e.to] = dist[e.from] + e.cost;
          parent[e.to] = e.from;
        }
      }
    }
  }
  for(int i = 0; i < n; ++i) {
    for(auto& es: adj){
      for(auto& e: es){
        if(dist[e.from] != GraphL::UNREACHABLE && dist[e.from] + e.cost < dist[e.to]){
          dist[e.to] = GraphL::NEGATIVE_CYCLE;
          parent[e.to] = -1;
        }
      }
    }
  }
  shortest_path_dist[start_node] = move(dist);
  shortest_path_parent[start_node] = move(parent);
}

int main() {
  cin.tie(0);
  ios::sync_with_stdio(false);
  int V, E, r;
  cin >> V >> E >> r;
  GraphL graph(V);
  for(int i = 0; i < E; ++i) {
    int s, t, d;
    cin >> s >> t >> d;
    graph.add_edge(s, t, d);
  }
  graph.bellmanFord(r);
  for(int i = 0; i < V; ++i) {
    ll dist = graph.getDist(r, i);
    if(dist == GraphL<>::NEGATIVE_CYCLE) {
      cout << "NEGATIVE CYCLE\n";
      return 0;
    }
  }
  for(int i = 0; i < V; ++i) {
    ll dist = graph.getDist(r, i);
    if(dist == GraphL<>::UNREACHABLE) {
      cout << "INF\n";
    } else {
      cout << dist << '\n';
    }
  }
}

