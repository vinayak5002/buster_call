#include <iostream>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

int main() {
    vector<int> query;
    while (true) {
        int k; cin >> k;
        if (k == 0) break;
        query.push_back(k);
    }
    constexpr int n {200};
    constexpr int m {1000000};
    map<int, int> mp_one;
    vector<int> ans(m, m+1);
    ans[0] = 0;
    for (int i=1;i<=n;++i) {
        if (i*(i+1)*(i+2)/6 >= m) break;
        mp_one[i*(i+1)*(i+2)/6] = 1;
        ans[i*(i+1)*(i+2)/6] = 1;
    }
    map<int, int> mp_two = mp_one;
    for (int i=2;mp_two.size() != 0;++i) {
        map<int, int> mp_three;
        for (const auto& e : mp_two) {
            for (const auto& f : mp_one) {
                if (m<e.first+f.first) break;
                if (i < ans[e.first+f.first]) {
                    mp_three[e.first+f.first] = 1;
                    ans[e.first+f.first] = i;
                }
            }
        }
        mp_two = mp_three;
    }

    map<int, int> mp_one_even;
    vector<int> ans_even(m, m+1);
    ans_even[0] = 0;
    for (int i=1;i<=n;++i) {
        if (i*(i+1)*(i+2)/6 >= m) break;
        if (i % 2 == 1 && (i+1)%4 != 0) {
            mp_one_even[i*(i+1)*(i+2)/6] = 1;
            ans_even[i*(i+1)*(i+2)/6] = 1;
        }
    }
    mp_two = mp_one_even;
    for (int i=2;mp_two.size() != 0;++i) {
        map<int, int> mp_three;
        for (const auto& e : mp_two) {
            for (const auto& f : mp_one_even) {
                if (m<e.first+f.first) break;
                if (i < ans_even[e.first+f.first]) {
                    mp_three[e.first+f.first] = 1;
                    ans_even[e.first+f.first] = i;
                }
            }
        }
        mp_two = mp_three;
    }

    for (const auto& e : query) {
        cout << ans[e] << ' ' << ans_even[e] << '\n';
    }
}

