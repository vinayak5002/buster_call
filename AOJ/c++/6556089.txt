#include <bits/stdc++.h>


#include <algorithm>
#include <cassert>
#include <vector>

namespace atcoder {

struct dsu {
  public:
    dsu() : _n(0) {}
    explicit dsu(int n) : _n(n), parent_or_size(n, -1) {}

    int merge(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        int x = leader(a), y = leader(b);
        if (x == y) return x;
        if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);
        parent_or_size[x] += parent_or_size[y];
        parent_or_size[y] = x;
        return x;
    }

    bool same(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        return leader(a) == leader(b);
    }

    int leader(int a) {
        assert(0 <= a && a < _n);
        if (parent_or_size[a] < 0) return a;
        return parent_or_size[a] = leader(parent_or_size[a]);
    }

    int size(int a) {
        assert(0 <= a && a < _n);
        return -parent_or_size[leader(a)];
    }

    std::vector<std::vector<int>> groups() {
        std::vector<int> leader_buf(_n), group_size(_n);
        for (int i = 0; i < _n; i++) {
            leader_buf[i] = leader(i);
            group_size[leader_buf[i]]++;
        }
        std::vector<std::vector<int>> result(_n);
        for (int i = 0; i < _n; i++) {
            result[i].reserve(group_size[i]);
        }
        for (int i = 0; i < _n; i++) {
            result[leader_buf[i]].push_back(i);
        }
        result.erase(
            std::remove_if(result.begin(), result.end(),
                           [&](const std::vector<int>& v) { return v.empty(); }),
            result.end());
        return result;
    }

  private:
    int _n;
    std::vector<int> parent_or_size;
};

}  // namespace atcoder


using namespace atcoder;
using namespace std;
using ll = long long;
const int IINF = 0x3f3f3f3f;  // 2倍しても負にならない
const long long LINF = 0x3f3f3f3f3f3f3f3fLL;
long long MOD = 1000000007;
using plint = pair<ll, ll>;
using pint = pair<int, int>;
#define all(obj) (obj).begin(), (obj).end()

struct Edge {
  ll from, to, cost;
  Edge(ll f, ll t, ll c) : from(f), to(t), cost(c) {}
  // コストの大小で順序定義
  bool operator<(const Edge& obj) const { return this->cost < obj.cost; }
  bool operator>(const Edge& obj) const { return this->cost > obj.cost; }
};
using Graph = vector<vector<Edge>>;

// 変数宣言------------------

// 関数定義------------------
ll krs(vector<Edge>& es, ll n) {
  dsu uf(n);
  ll ans = 0;

  sort(all(es));

  for (auto e : es) {
    // 閉路になるならスキップ
    if (uf.same(e.from, e.to)) continue;

    ans += e.cost;
    uf.merge(e.from, e.to);
  }

  return ans;
}

// メイン------------------
int main() {
  // デバッグ用
  ifstream in("input.txt");
  if (in.is_open()) {
    cin.rdbuf(in.rdbuf());
  }

  int n, m;
  cin >> n >> m;

  vector<Edge> es(m, Edge(0, 0, 0));
  for (int i = 0; i < m; i++) {
    ll s, t, w;
    cin >> s >> t >> w;
    es[i] = Edge(s, t, w);
  }

  cout << krs(es, n) << endl;
}
