#[macro_export]
macro_rules! read_line {
    ($($xs: tt)*) => {
        let mut buf = String::new();
        std::io::stdin().read_line(&mut buf).unwrap();
        let mut iter = buf.split_whitespace();
        expand!(iter, $($xs)*);
    };
}

#[macro_export]
macro_rules! expand {
    ($iter: expr, $(,)* mut $var: ident : $type: tt $(,)* ) => {
        let mut $var = read_value!($iter, $type);
    };
    ($iter: expr, $(,)* mut $var:ident : $type: tt $($xs: tt)*) => {
        let mut $var = read_value!($iter, $type);
        expand!($iter $($xs)*);
    };
    ($iter: expr, $(,)* $var: ident : $type: tt $(,)*) => {
        let $var = read_value!($iter, $type);
    };
    ($iter: expr, $(,)* $var: ident : $type: tt $($xs: tt)*) => {
        let $var = read_value!($iter, $type);
        expand!($iter $($xs)*);
    };
}

#[macro_export]
macro_rules! read_value {
    ($iter:expr, ($($type: tt),*)) => {
        ($(read_value!($iter, $type)),*)
    };

    ($iter: expr, [$type: tt; $len: expr]) => {
        (0..$len).map(|_| read_value!($iter, $type)).collect::<Vec<_>>()
    };

    ($iter: expr, $type: ty) => {
        $iter.next().unwrap().parse::<$type>().unwrap()
    };
}

#[macro_export]
macro_rules! multi_vec {
    ($element: expr; ($len: expr, $($lens: expr),*)) => (
        vec![multi_vec![$element; ($($lens),*)]; $len]
    );
    ($element: expr; ($len: expr)) => (
        vec![$element; $len]
    );
}

fn rec(left: usize, right: usize, memo: &mut Vec<Vec<Option<usize>>>, v: &Vec<usize>) -> usize {
    if let Some(res) = memo[left][right] {
        return res;
    }

    let res = {
        if left >= right {
            0
        } else if right - left == 1 {
            if (v[left] as isize - v[right] as isize).abs() <= 1 {
                2
            } else {
                0
            }
        } else {
            let mut res = 0;
            for i in left..right {
                res = std::cmp::max(res, rec(left, i, memo, v) + rec(i + 1, right, memo, v));
            }
            if (v[left] as isize - v[right] as isize).abs() <= 1 {
                if rec(left + 1, right - 1, memo, v) == right - left - 1 {
                    res = right - left + 1;
                }
            }
            res
        }
    };

    memo[left][right] = Some(res);
    res
}

fn main() {
    loop {
        read_line! {
            n: usize,
        }

        if n == 0 {
            break;
        }

        read_line! {
            w: [usize; n],
        }

        let mut memo = multi_vec!(None; (500, 500));
        println!("{:?}", rec(0, n - 1, &mut memo, &w));
    }
}
