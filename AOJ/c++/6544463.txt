#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <algorithm>
#include <queue>
#include <cmath>
using namespace std;

unordered_map<string, int> m;
typedef pair<int, string> pis;
priority_queue<pis, vector<pis>, greater<pis>> heap;
// queue<string> q;
string a;
string tt;
string fin = "123456789abcdef0";

int step[][2] = {
    {0, 1},
    {0, -1},
    {1, 0},
    {-1, 0},
};

int calc(string s)
{
    int ans = 0;
    for (int i = 0; i < 16; ++i)
    {
        ans += s[i] - fin[i];
    }
    return abs(ans);
}

int main()
{
    int x;
    for (int i = 0; i < 16; ++i)
    {
        cin >> x;
        if (x >= 0 && x <= 9)
            a.push_back(x + '0');
        else
            a.push_back(x + 'a' - 10);
    }

    m[a] = 0;
    heap.push(make_pair(calc(a), a));

    while (!heap.empty())
    {
        pis u = heap.top();
        heap.pop();
        string t = tt = u.second;

        if (t == fin)
        {
            cout << m[t] << endl;
            break;
        }

        int p = t.find('0');
        int x = p / 4;
        int y = p % 4;

        for (int i = 0; i < 4; ++i)
        {
            int xx = x + step[i][0];
            int yy = y + step[i][1];
            if (xx < 0 || xx > 3 || yy < 0 || yy > 3)
                continue;
            swap(tt[4 * xx + yy], tt[p]);
            if (!m.count(tt))
            {
                m[tt] = m[t] + 1;
                heap.push(make_pair(calc(tt), tt));
            }
            swap(tt[4 * xx + yy], tt[p]);
        }
    }

    return 0;
}
