#include <iostream>
#include <queue>
using namespace std;
typedef pair<int,int> P;
const int inf=0x3f3f3f3f;
char ma[1001][1001];
int d[1000][1000];
int dx[]={1,0,-1,0};
int dy[]={0,1,0,-1};
int h,w,n;
int ans;
priority_queue< pair<int,P> ,vector< pair<int,P> >,greater< pair<int,P> > > q;
int bfs(int sx,int sy,int gx,int gy){
	fill(d[0],d[0]+1000*1000,inf);
	queue<P> que;
	que.push(P(sx,sy));
	d[sx][sy]=0;
	while(!que.empty()){
		P p=que.front();
		que.pop();
		int x=p.first,y=p.second;
		if(x==gx&&y==gy) break;
		for(int i=0;i<4;i++){
			int nx=x+dx[i];
			int ny=y+dy[i];
			if(nx>=0&&nx<h&&ny>=0&&ny<w&&ma[nx][ny]!='X'&&d[nx][ny]==inf){
				que.push(P(nx,ny));
				d[nx][ny]=d[x][y]+1;
			}
		}
	}
	return d[gx][gy]; 
}
void solve(int sx,int sy){
	ans=0;
	int gx,gy;
	while(!q.empty()){
		gx=q.top().second.first,gy=q.top().second.second;
//		cout<<gx+1<<" "<<gy+1<<endl;
		ans+=bfs(sx,sy,gx,gy);
		q.pop();
		sx=gx,sy=gy;
	}
	printf("%d\n",ans);
}
int main(){
	int sx,sy;
	scanf("%d%d%d",&h,&w,&n);
	for(int i=0;i<h;i++){
		getchar();
		for(int j=0;j<w;j++){
			scanf("%c",&ma[i][j]);
			if(ma[i][j]=='S') sx=i,sy=j;
			if(ma[i][j]>='1'&&ma[i][j]<='9') q.push(make_pair(ma[i][j]-'0',P(i,j)));
		}
	}	
	solve(sx,sy);
	return 0;
} 
