#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, s, t) for (int i = (int)(s); i < (int)(t); ++i)
#define revrep(i, t, s) for (int i = (int)(t)-1; i >= (int)(s); --i)
#define all(x) begin(x), end(x)
template <typename T> bool chmax(T& a, const T& b) { return a < b ? (a = b, 1) : 0; }
template <typename T> bool chmin(T& a, const T& b) { return a > b ? (a = b, 1) : 0; }

template <typename T>
ostream& operator<<(ostream& os, const vector<T>& v) {
    for (int i = 0; i < (int) v.size(); ++i) os << v[i] << " ";
    return os;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);

    while (true) {
        int n, m;
        cin >> n >> m;
        if (n == 0) break;

        vector<vector<int>> win(n, vector<int>(n, -1));
        rep(_,0,m) {
            int x, y;
            cin >> x >> y;
            --x, --y;
            win[x][y] = 1;
            win[y][x] = 0;
        }

        auto dfs = [&](auto& dfs, int x) -> int {
            auto tmp = win[x];
            int cnt = 0;
            rep(i,0,x) if (win[x][i] == 1) ++cnt;
            int rem = (n-1)/2 - cnt;
            if (rem < 0 || (n-x-1) < rem) return 0;
            if (x == n-1) return 1;
            int ret = 0;

            if (rem == 0) {
                bool ok = true;
                rep(i,x+1,n) {
                    if (tmp[i] != -1 && tmp[i] != 0) {
                        ok = false;
                        break;
                    }
                }
                if (ok) {
                    rep(i,x+1,n) {
                        win[x][i] = 0;
                        win[i][x] = 1;
                    }

                    ret += dfs(dfs, x+1);

                    rep(i,x+1,n) {
                        win[x][i] = win[i][x] = tmp[i];
                    }
                }
                return ret;
            }

            int comb = (1 << rem) - 1;
            while (comb < (1 << (n-x-1))) {
                bool ok = true;
                rep(i,x+1,n) {
                    if (tmp[i] != -1 && tmp[i] != (comb>>(i-x-1)&1)) {
                        ok = false;
                        break;
                    }
                }
                if (ok) {
                    rep(i,x+1,n) {
                        win[x][i] = comb>>(i-x-1)&1;
                        win[i][x] = 1-win[x][i];
                    }

                    ret += dfs(dfs, x+1);

                    rep(i,x+1,n) {
                        win[x][i] = win[i][x] = tmp[i];
                    }
                }
                int x = comb & -comb;
                int y = comb + x;
                comb = ((comb & ~y) / x >> 1) | y;
            }

            rep(i,0,x) {
                win[x][i] = tmp[i];
                win[i][x] = 1 - tmp[i];
            }
            return ret;
        };

        int ans = dfs(dfs, 0);
        cout << ans << "\n";
    }
}
