#include<iostream>
using namespace std;
 struct card {
	char suit;
	int value;
};
 int bubblesort(card a[], int n);
 int selectionsort(card a[], int n);
 int print(card a[], int n);
 int stable(card a[], card b[], int n);
int main()
{
	card a[40],b[40];
	int n,i;
	cin >> n;
	for (i = 0;i < n;i++)
	{
		cin >> a[i].suit >>a[i]. value;
	}
	for (i = 0;i < n;i++)
	{
		b[i].suit=a[i].suit;
		b[i].value=a[i].value;
	}
	bubblesort(a, n);
	print(a, n);
	cout << "Stable" << endl;
	selectionsort(b, n);
	print(b,n);
	if (stable(a, b, n))
		cout << "Stable"<<endl;
	else
		cout << "Not stable"<<endl;
	return 0;
}
int bubblesort(card a[], int n)
{
	int i, j;
	for (i = 0;i < n - 1;i++)
	{
		for (j = 0;j < n - i - 1;j++)
			if (a[j].value > a[j + 1].value)
				swap(a[j], a[j + 1]);
	}
	return 0;
}
int selectionsort(card a[], int n)
{
	int i, j, minnum;
	for (i = 0;i < n;i++)
	{
		minnum = i;
		for (j = i;j < n;j++)
		{
			if (a[minnum].value > a[j].value)
				minnum = j;
		}
		swap(a[i], a[minnum]);
	}
	return 0;
}
int print(card a[], int n)
{
	int i;
	for (i = 0;i < n;i++)
	{
		if (i) cout<<" ";
		cout << a[i].suit << a[i].value;
	}
	cout << endl;
	return 0;
}
int stable(card a[], card b[], int n)
{
	int i;
	for (i = 0;i < n;i++)
		if (a[i].suit != b[i].suit)
			return 0;
	return 1;
}
