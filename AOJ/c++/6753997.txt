#include <bits/stdc++.h>
#include <chrono>
#include <thread>
////#include <atcoder/all>

//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vd = vector<double>;
using vvd = vector<vd>;
using vvvd = vector<vvd>;
#define all(A) A.begin(),A.end()
#define ALL(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll gcd(ll(a), ll(b)) {
    if (b == 0)return a;
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}

ll Eulers_phi(ll n) {
    ll res = 0;
    ll N = n;
    vll P;
    for (ll p = 2; p * p <= N; p++) {
        if (N % p == 0) {
            P.push_back(p);
            while (N % p == 0)N /= p;
        }
    }
    if (N != 1)P.push_back(N);

    N = P.size();
    rep(bit, (1 << N)) {
        ll k = 1;
        ll t = 0;
        rep(i, N) {
            if (bit & (1 << i)) {
                k *= P[i];
                t++;
            }
        }
        res += (t % 2 == 0 ? 1 : -1) * n / k;
    }
    return res;

}

map<string, ll> M;

bool OK = 1;
ll dfs(string S) {
    ll res = 0;
    ll N = S.size();
    rep(i, N) {
        ll d = 0;
        ll R=i;
        if (S[i] <= 'Z' && S[i] >= 'A') {
            string G = "";
            if (S.size() > 1 && (S[i + 1] <= 'z' && S[i + 1] > 'a')) {
                G = S.substr(i, 2);
                R = i + 1;
            }
            else {
                G = S.substr(i, 1);
                R = i;
            }
            if (!M.count(G)) {
                OK = 0;
                return res;
            }
            d = M[G];
        }
        else if (S[i] == '(') {
            ll L = i;
            ll k = 0;
            for (ll j = i; j < N; j++) {
                if (S[j] == '(')k++;
                else if (S[j] == ')') {
                    k--;
                    if (k == 0) {
                        d = dfs(S.substr(L + 1, j - L - 1));
                        R = j;
                        break;
                    }
                }
            }
        }
        else continue;
        ll b = 1;
        if (S.size() > R + 1) {
            if ('0' <= S[R + 1] && S[R + 1] <= '9') {
                b = S[R + 1] - '0';
                R++;
                if (S.size() > R + 1) {
                    if ('0' <= S[R + 1] && S[R + 1] <= '9') {
                        b = b * 10 + S[R + 1] - '0';
                        R++;
                    }
                }
            }
        }
        res += d * b;
        i = R;
    }


    return res;
}


int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);


    while (1) {
        string S;
        cin >> S;
        if (S == "END_OF_FIRST_PART")break;
        ll X;
        cin >> X;
        M[S] = X;
    }

    while (1) {
        string S;
        cin >> S;
        if (S == "0")return 0;
        OK = 1;
        ll an = dfs(S);
        if (OK)cout << an << endl;
        else cout << "UNKNOWN" << endl;
        continue;
        cout << dfs(S) << endl;
    }

}
