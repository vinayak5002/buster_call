# 2022/04/29
# Yutaka Watanobe
from heapq import heappop, heappush

LIMIT = 45
N = 4                                                          # N * N pieces

adj = [{1, 4}, {0, 2, 5}, {1, 3, 6}, {2, 7},                   # N * N pieces are represented by 0, 1, ..., (N*N-1)
      {0, 5, 8}, {1, 4, 6, 9}, {2, 5, 7, 10}, {3, 6, 11},      # adj[i]: an adj list for piece i
      {4, 9, 12}, {5, 8, 10, 13}, {6, 9, 11, 14}, {7, 10, 15}, # ** this is for only N = 4
      {8, 13}, {9, 12, 14}, {10, 13, 15}, {11, 14}]

pieces = [[[0] for j in range(N)] for i in range(N)]           # contents for simulation

MD = [[abs(i//N-j//N)+abs(i%N-j%N) for j in range(N*N) ] for i in range(N*N)]    # manhattan dist between piece i and j
PW = [16**i for i in range(N*N)]                               # 16^i
SW = [[i*PW[j] for j in range(N*N) ] for i in range(N*N)]      # i * 16^j

initial_v, initial_h, initial_b = 0, 0, -1
target = 0

p = 0
for i in range(N):
    row = list(map(int, input().split()))
    for j in range(N):
        pieces[i][j] = row[j]
        if row[j] == 0:
            initial_b = i*N + j                                # set the place of the blank
        else:            
            initial_v += row[j]*PW[p]                          # initial hash value of the puzzle
            initial_h += MD[p][row[j]-1]                       # initial estimation cost
        if (p+1) <= 15: target += (p+1)*PW[p]
        p += 1

ans = -1
parent = {}                                                    # parent of BFS tree to simulate

def aster():
    global ans, parent
    queue = [(initial_h, initial_h, initial_v, initial_b, -1, -1)]
    visited = set()
    parent[initial_v] = [-1, -1]
    
    while len(queue) > 0:
        estimated, heuristic, val, blank, pre_v, pre = heappop(queue)
        cost = estimated - heuristic
        parent[val] = [pre_v, pre]
        if val in visited: continue
        if val == target:
            ans = cost
            return True
        visited.add(val)
        for next_b in adj[blank]:
            num = (val >> (4*next_b)) & 15
            next_v = val - SW[num][next_b] + SW[num][blank]
            if next_v in visited: continue
            next_h = heuristic + MD[blank][num-1] - MD[next_b][num-1]
            if cost + 1 > LIMIT: continue
            heappush(queue, (cost + 1 + next_h, next_h, next_v, next_b, val, num))
    return False

def simulate(v):
    if v == -1: return
    simulate(parent[v][0])
    if parent[v][1] != -1:
        print('\n', 'Move', parent[v][1], '\n')
    for i in range(N*N):
        print(v >> (4*i) & 15,  end=' ')
        if (i+1)%4 == 0: print()

if aster():
    print(ans)
#    simulate(target)
else:
    print("unsolvable")
    


