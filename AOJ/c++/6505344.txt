#include <iostream>
#include <array>
#include <cmath>

using Point2D = std::array<double, 2>;
using Vector2D = std::array<double, 2>;

void read_point(Point2D &p)
{
    std::cin >> p[0] >> p[1];
}

Vector2D generate_vector(const Point2D &start_point, const Point2D &end_point)
{
    Vector2D v;
    v[0] = (fabs(end_point[0] - start_point[0]) < 1.0e-10) ? 0.0 : end_point[0] - start_point[0];
    v[1] = (fabs(end_point[1] - start_point[1]) < 1.0e-10) ? 0.0 : end_point[1] - start_point[1];
    return v;
}

double inner_product(const Vector2D &v1, const Vector2D &v2)
{
    double value = 0;
    value += v1[0] * v2[0];
    value += v1[1] * v2[1];
    return value;
}

double subtended_angle(const Vector2D &a, const Vector2D &b)
{
    double norm_a = inner_product(a, a);
    double norm_b = inner_product(b, b);
    if (norm_a == 0 || norm_b == 0)
        return 0;

    double value = inner_product(a, b) / (std::sqrt(norm_a) * std::sqrt(norm_b));
    return std::acos(value);
}

double magnitude(const Vector2D &v)
{
    return std::sqrt(inner_product(v, v));
}

int main()
{
    Point2D p0, p1;

    read_point(p0);
    read_point(p1);

    auto v_p0_p1 = generate_vector(p0, p1);

    Vector2D y_axis = {0, 1};

    double q;
    std::cin >> q;

    for (int i = 0; i < q; i++)
    {
        Point2D p2{};
        read_point(p2);
        auto v_p0_p2 = generate_vector(p0, p2);

        if (subtended_angle(v_p0_p1, v_p0_p2) < 1.0e-10)
        {
            if (magnitude(v_p0_p1) < magnitude(v_p0_p2))
                std::cout << "ONLINE_FRONT" << std::endl;
            else
                std::cout << "ON_SEGMENT" << std::endl;
        }
        else if (fabs(subtended_angle(v_p0_p1, v_p0_p2) - M_PI) < 1.0e-10)
            std::cout << "ONLINE_BACK" << std::endl;
        else if (subtended_angle(y_axis, v_p0_p1) > subtended_angle(y_axis, v_p0_p2))
            std::cout << "COUNTER_CLOCKWISE" << std::endl;
        else
            std::cout << "CLOCKWISE" << std::endl;
    }
}

