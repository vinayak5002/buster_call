#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>
#include <iomanip>
#include <bitset>
#include <functional>
#include <queue>
#include <utility>
 
static const double pi = acos(-1.0);
const long long INF = pow(10,18);
const int mod1 = 1000000007;

using namespace std;

int main(){
    while (true){
        int money; cin >> money;
        if (money == 0) return 0;
        int coin_data[] = {10, 50, 100, 500}; 
        vector<int> coin(coin_data, coin_data+4);
        vector<int> purse(4);
        for (int i=0; i<4; i++) cin >> purse[i];

        vector<int> able;
        for (int ten=0; ten<purse[0]+1; ten++)
            for (int fif=0; fif<purse[1]+1; fif++)
                for (int hun=0; hun<purse[2]+1; hun++)
                    for (int fiv=0; fiv<purse[3]+1; fiv++)
                        able.push_back(ten*10+fif*50+hun*100+fiv*500);

        sort(able.begin(),able.end());

        int pay;
        queue<int> q;
        q.push(money);
        while (true){
            int now = q.front();
            for (int i=0; i<4; i++) q.push(now+coin[i]);
            q.pop();
            if (binary_search(able.begin(),able.end(),now)) {
                pay = now;
                break;
            }
        }

        //ansは払うのに使うのが確定している枚数、purseは財布に残っている枚数
        vector<int> ans(4);
        for (int i=3; i>=0; i--){
            ans[i] = min(purse[i],pay/coin[i]);
            pay -= ans[i] * coin[i];
            purse[i] -= ans[i];
        }
        for (int i=3; i>0; i--){
            while(ans[i] > 0 & purse[i-1] > coin[i]/coin[i-1]){
                ans[i]--;
                purse[i-1] -= coin[i]/coin[i-1];
                ans[i-1] += coin[i]/coin[i-1];
            }
        }

        for (int i=0; i<4; i++) 
            if (ans[i]>0) cout << coin[i] << " " << ans[i] << endl;
        cout << endl;
    
    }
}
