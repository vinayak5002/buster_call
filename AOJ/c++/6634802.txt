#pragma region Template
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using vi = vector<int>;
using vl = vector<ll>;
using vvi = vector<vi>;
using vvl = vector<vl>;
#define REP(i, n) for (int i = 0, i##_len = (n); i < i##_len; ++i)
#define FOR(i, a, b) for (int i = (a), i##_len = (b); i < i##_len; ++i)
#define ALL(x) (x).begin(), (x).end()  // sortなどの引数を省略したい
#ifdef _DEBUG
#define PRE_COMMAND          \
    cin.rdbuf(in.rdbuf());   \
    cout.rdbuf(out.rdbuf()); \
    cout << fixed << setprecision(15);
#else
#define PRE_COMMAND                    \
    cout << fixed << setprecision(15); \
    ios::sync_with_stdio(false);       \
    cin.tie(0);
#endif
const double EPS = 1e-10, PI = acos(-1.0);
// 標準入出力
template <class T1, class T2>
istream& operator>>(istream& is, tuple<T1, T2>& t) {
    return is >> get<0>(t) >> get<1>(t);
}
template <class T1, class T2, class T3>
istream& operator>>(istream& is, tuple<T1, T2, T3>& t) {
    return is >> get<0>(t) >> get<1>(t) >> get<2>(t);
}
template <class T> istream& operator>>(istream& is, vector<T>& vec) {
    for (T& x : vec) is >> x;
    return is;
}
template <class T1, class T2>
ostream& operator<<(ostream& os, const tuple<T1, T2>& t) {
    return os << get<0>(t) << " " << get<1>(t);
}
template <class T1, class T2, class T3>
ostream& operator<<(ostream& os, const tuple<T1, T2, T3>& t) {
    return os << get<0>(t) << " " << get<1>(t) << " " << get<2>(t);
}
template <class T> ostream& COUT_MAIN(ostream& os, const T& v) {
    if (!v.size()) return os;
    typename T::const_iterator ii = v.begin();
    os << *ii++;
    for (; ii != v.end(); ++ii) os << " " << *ii;
    return os;
}
template <class T> ostream& operator<<(ostream& os, const vector<T>& v) {
    return COUT_MAIN(os, v);
}
template <class T> ostream& operator<<(ostream& os, const set<T>& v) {
    return COUT_MAIN(os, v);
}
template <class T, class S>
ostream& operator<<(ostream& os, const map<T, S>& m) {
    for (typename map<T, S>::const_iterator ii = m.begin(); ii != m.end();) {
        os << tuple<T, S>(*(ii++));
        if (ii != m.end()) os << '\n';
    }
    return os;
}
// 出力用関数
void PRINT() {}
template <class Head> void PRINT(Head&& head) { std::cout << head << '\n'; }
template <class Head, class... Tail> void PRINT(Head&& head, Tail&&... tail) {
    std::cout << head << ' ';
    PRINT(std::forward<Tail>(tail)...);
}
template <class T> auto MAX(T& seq) { return *max_element(ALL(seq)); }
template <class T> auto MIN(T& seq) { return *min_element(ALL(seq)); }
template <class T> auto SUM(T& seq) {
    return accumulate(++ALL(seq), *seq.begin());
}
template <class T> void REV(T& seq) { reverse(ALL(seq)); }
template <class T> void SORT(T& seq) { sort(ALL(seq)); }
template <class T, class S> void SORT(T& seq, S ordr) { sort(ALL(seq), ordr); }
template <class T> void SORTR(vector<T>& seq) { sort(ALL(seq), greater<T>()); }
template <class T> ll pow(ll n, T k) {
    ll now = 1;
    while (true) {
        if (k & 1) now *= n;
        k >>= 1;
        if (k == 0) break;
        n *= n;
    }
    return now;
}
template <class T> ll pow(int n, T k) { return pow((ll)n, k); }
template <class T> int pow(int n_0, T k, int mod) {
    if (n_0 >= mod) n_0 %= mod;
    if (n_0 < 0) n_0 += mod;
    unsigned long long n = (unsigned long long)n_0, now = 1;
    while (true) {
        if (k & 1) now = (now * n) % mod;
        k >>= 1;
        if (k == 0) break;
        n = (n * n) % mod;
    }
    return (int)now;
}
void yn(bool flag) { PRINT(flag ? "YES" : "NO"); }
#pragma endregion Template

// array<T, N>に対するkD木を作成する。
// find(small, large, border)で検索。
// border：true→[small, large]を探索、false→[small, large)を探索
template <class T, int N> struct kd_tree {
    struct node {
        array<T, N> value;
        node *left = nullptr, *right = nullptr;
        node(array<T, N> x) { value = x; }
    };
    node* root = nullptr;
    vector<array<T, N>> data;
    kd_tree(vector<array<T, N>> temp) : data(temp) {
        construct(0, (int)data.size(), 0);
    }
    node* construct(int start, int end, int idx) {
        if ((end - start) > 1) {
            int idxmod = idx % N;
            sort(data.begin() + start, data.begin() + end,
                 [&idxmod](const auto& a, const auto& b) {
                     return a[idxmod] < b[idxmod];
                 });
        }
        node* now = new node(data[(start + end) / 2]);
        if (idx == 0) { root = now; }
        if ((end - start) > 1) {
            now->left = construct(start, (start + end + 1) / 2, idx + 1);
            now->right = construct((start + end + 1) / 2, end, idx + 1);
        }
        return now;
    }
    vector<array<T, N>> find(array<T, N>& small, array<T, N>& large,
                             bool border = true) {
        vector<array<T, N>> ret;
        vector<tuple<node*, int>> stack = {make_tuple(root, 0)};
        node* now;
        int idx;
        while (stack.size()) {
            tie(now, idx) = stack.back();
            stack.pop_back();
            array<T, N>* v = &(now->value);
            if (now->left == nullptr) {
                bool flag = true;
                for (int i = 0; i < N; i++) {
                    if (small[i] > (*v)[i]) {
                        flag = false;
                        break;
                    }
                    if (border && large[i] < (*v)[i]) {
                        flag = false;
                        break;
                    } else if (!border && large[i] <= (*v)[i]) {
                        flag = false;
                        break;
                    }
                }
                if (flag) { ret.push_back(*v); }
            } else {
                int idxmod = idx % N;
                if (border && large[idxmod] < (*v)[idxmod]) {
                    stack.push_back(make_tuple(now->left, idx + 1));
                } else if (!border && large[idxmod] <= (*v)[idxmod]) {
                    stack.push_back(make_tuple(now->left, idx + 1));
                } else if ((*v)[idxmod] < small[idxmod]) {
                    stack.push_back(make_tuple(now->right, idx + 1));
                } else {
                    stack.push_back(make_tuple(now->left, idx + 1));
                    stack.push_back(make_tuple(now->right, idx + 1));
                }
            }
        }
        return ret;
    }
    void destruct(node* now) {
        if ((*now).left != nullptr) { destruct((*now).left); }
        if ((*now).right != nullptr) { destruct((*now).right); }
        delete now;
    }
    ~kd_tree() {
        if (root != nullptr) { destruct(root); };
    }
};

int main() {
    PRE_COMMAND
    int n, q;
    cin >> n;
    vector<array<int, 2>> kd(n);
    map<array<int, 2>, int> m;
    for (int i = 0; i < n; i++) {
        int x, y;
        cin >> x >> y;
        kd[i] = {x, y};
        m[{x, y}] = i;
    }
    kd_tree<int, 2> t(kd);
    cin >> q;
    for (int i = 0; i < q; i++) {
        int x_1, x_2, y_1, y_2;
        cin >> x_1 >> x_2 >> y_1 >> y_2;
        array<int, 2> a_1 = {x_1, y_1}, a_2 = {x_2, y_2};
        vector<int> ret;
        for (auto v : t.find(a_1, a_2)) ret.push_back(m[v]);
        SORT(ret);
        for (int j : ret) PRINT(j);
        PRINT("");
    }
}
