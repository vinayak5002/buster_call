#include <iostream>
#include <cstdio>
#include <iterator>
#include <string>
#include <sstream>
#include <bitset>
#include <vector>
#include <array>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
#define _USE_MATH_DEFINES  // for M_PI
#include <cmath>
using std::cin;
using std::cout;
using std::endl;
using std::string;
using std::bitset;
using std::vector;
using std::array;
using std::stack;
using std::queue;
using std::set;
using std::map;
using std::pair;
using llong = long long;
template<typename T>
using nlimits = std::numeric_limits<T>;
#define REP(i, n) for (int i = 0; i < static_cast<int>(n); ++i)
#define RREP(i, n) for (int i = static_cast<int>(n) - 1; i >= 0; --i)
#define FOR(i, a, b) for (int i = static_cast<int>(a); i < static_cast<int>(b); ++i)
#define RFOR(i, a, b) for (int i = static_cast<int>(a) - 1; i >= static_cast<int>(b); --i)


void PrintArray(const int* a, const size_t n);
bool IsPrime(const unsigned int a);
long long Pow(long long a, long long n, long long mod_prime=1);
long long InvMod(long long a, long long mod);


int N, MAX_W;
array<int, 100> V, W;
array<array<llong, 10001>, 101> MEMO, DP;


llong KnapsackMemo(int idx = 0, int cap = MAX_W) {
    if (MEMO[idx][cap] != 0) return MEMO[idx][cap];
    if (idx == N) return 0;
    if (cap < W[idx]) return KnapsackMemo(idx + 1, cap);
    llong cost_yes = KnapsackMemo(idx + 1, cap - W[idx]) + V[idx];
    llong cost_no = KnapsackMemo(idx + 1, cap);
    MEMO[idx][cap] = std::max(cost_yes, cost_no);
    return MEMO[idx][cap];
}


llong KnapsackDP() {
    REP(idx, N) RREP(cap, MAX_W+1) {
        // if (cap + W[idx] > MAX_W) DP[idx + 1][cap] = DP[idx][cap];
        if (cap - W[idx] >= 0) DP[idx + 1][cap] = std::max(DP[idx][cap - W[idx]] + V[idx], DP[idx][cap]);
        else DP[idx + 1][cap] = DP[idx][cap];
        // else 
    }
    return DP[N][MAX_W];
}


int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin >> N >> MAX_W;
    REP(i, N) cin >> V[i] >> W[i];

    REP(i, N) MEMO[i].fill(0);
    // cout << KnapsackMemo() << endl;

    cout << KnapsackDP() << endl;
}


void PrintArray(const int* a, const size_t n) {
    REP(i, n) {
        cout << a[i];
        if (i != static_cast<int>(n)-1) cout << " ";
    }
    cout << endl;
}


bool IsPrime(const unsigned int a) {
    if (a <= 1) return false;
    if (a <= 3) return true;
    if (a % 2 == 0 || a % 3 ==0) return false;

    for (uint i = 5; i * i <= a; i += 6) {
        if (a % i == 0) return false;  // x6 - 1
        if (a % (i + 2) == 0) return false;  // x6 + 1
    }
    return true;
}


long long Pow(long long a, long long n, long long mod_prime) {
    long long ret = 1;
    if (mod_prime > 1) {
        while (n > 0) {
            if (n & 1) ret = ret * a % mod_prime;
            a = a * a % mod_prime;
            n >>= 1;
        }
    }
    else {
        while (n > 0) {
            if (n & 1) ret *= a;
            a *= a;
            n >>= 1;
        }
    }
    return ret;
}


long long InvMod(long long a, long long mod) {
    long long b = mod, u = 1, v = 0;
    while (b) {
        long long t = a / b;
        a -= t * b; std::swap(a, b);
        u -= t * v; std::swap(u, v);
    }
    u %= mod;
    if (u < 0) u += mod;
    return u;
}


