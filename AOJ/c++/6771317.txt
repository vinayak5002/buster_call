#include <bits/stdc++.h>
using namespace std;

#ifdef _RUTHEN
#include "debug.hpp"
#else
#define show(...) true
#endif

using ll = long long;
#define rep(i, n) for (int i = 0; i < (n); i++)
template <class T> using V = vector<T>;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int N;
    cin >> N;
    rep(nn, N) {
        V<ll> a(9);
        rep(i, 9) cin >> hex >> a[i];
        // 下位ビットから決めていく
        // K=?...?0とする
        // (\sum a[i]^K)^Kとa[8]は0ビット目はここで一致させる必要がある
        // 一致しない場合、K=?...?1にするしかない(?部分を変えても一致させられない)
        // 次に、K=?...?0c(cは0か1で、既に確定している)とする
        // (\sum a[i]^K)^Kとa[8]は0ビット目は上記の処理より一致するはずで、1ビット目はここで一致させる必要がある
        // 一致しない場合、K=?...?1cにするしかない(cはもう変更できず、?部分を変えても一致させられない)
        // 以下繰り返し
        // ?部分は0埋めが普通だが、例えばK=1010...1010みたいにしても良いはず
        // Kの各ビットを適切に反転させる
        ll K = 12345678;
        rep(b, 32) {
            ll s = 0;
            rep(i, 8) s += a[i] ^ K;
            if (((s ^ K) >> b & 1) != (a[8] >> b & 1)) {
                K ^= (1LL << b);
            }
        }
        cout << hex << K << '\n';
    }
    return 0;
}

