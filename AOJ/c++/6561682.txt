#include<bits/stdc++.h>
using namespace std;

struct RollingHash{
    unsigned long long BASE1 = 1000000007;
    int n;
    std::vector<unsigned long long> dat, dat2, base_pow;
    RollingHash()  {}
    RollingHash(std::string &s) : n(s.size()), dat(n+1), dat2(n+1), base_pow(n+1) {
        base_pow[0] = 1;
        for(int i = 0; i < n; i++){
            dat[i+1] = dat[i] * BASE1 + s[i];
            dat2.rbegin()[i+1] = dat2.rbegin()[i] * BASE1 + s.rbegin()[i];
            base_pow[i+1] = base_pow[i] * BASE1;
        }
    }
    unsigned long long hash(int l, int r){
        return dat[r] - dat[l] * base_pow[r-l];
    }
    unsigned long long hash(std::string &s){
        unsigned long long res = 0;
        for(int i = 0; i < s.size(); i++){
            res = res * BASE1 + s[i];
        }
        return res;
    }
};

int main(){
    string s,t;
    cin >> s >> t;
    RollingHash RH(s);
    auto th =  RH.hash(t);
    int n = s.size(), len = t.size();
    for(int i = 0; i + len <= n; i++){
        if(RH.hash(i, i+len)==th){
            cout << i << '\n';
        }
    }
}
