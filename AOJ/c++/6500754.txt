#include<bits/stdc++.h>
using namespace std;

void max_heapify (vector<long long> &CBT, int i, int n) {
    int left_id = 2*(i+1)-1; 
    int right_id = 2*(i+1);
    int largest_id = i;
    long long largest = CBT.at(largest_id);

    if (right_id<n) {
        if (CBT.at(right_id) > largest) {
            largest = CBT.at(right_id);
            largest_id = right_id;
        }
    }
    if (left_id<n) {
        if (CBT.at(left_id) > largest) {
            largest = CBT.at(left_id);
            largest_id = left_id;
        }
    }
    if (largest_id != i) {
        iter_swap(CBT.begin()+i, CBT.begin()+largest_id);
        max_heapify(CBT, largest_id, n);
    }
}


void build_max_heap (vector<long long> &CBT, int n) {
    for (int i=n/2-1; i>=0; i--) {
        max_heapify (CBT, i, n);
    }
}

int main() {
    int n;
    cin >> n;
    vector<long long> CBT(n);
    long long key;
    long long left_key;
    long long right_key;
    long long parent_key;

    for (int i=0; i<n; i++) {
        cin >> CBT.at(i);
    }
    build_max_heap (CBT, n);

    for (int i=0; i<n; i++) {
        cout << " " << CBT.at(i);
    }
    cout << endl;

    return 0;
}
