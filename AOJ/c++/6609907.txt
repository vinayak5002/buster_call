#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef long long ll;

#define YESNO(bool)            \
    if (bool) {                \
        cout << "YES" << endl; \
    } else {                   \
        cout << "NO" << endl;  \
    }
#define yesno(bool)            \
    if (bool) {                \
        cout << "yes" << endl; \
    } else {                   \
        cout << "no" << endl;  \
    }
#define YesNo(bool)            \
    if (bool) {                \
        cout << "Yes" << endl; \
    } else {                   \
        cout << "No" << endl;  \
    }
#define REP(i, n) for (ll i = 0; i < ll(n); i++)
#define REPD(i, n) for (ll i = n - 1; i >= 0; i--)
#define FOR(i, a, b) for (ll i = a; i <= ll(b); i++)
#define FORD(i, a, b) for (ll i = a; i >= ll(b); i--)
#define FORA(i, I) for (const auto& i : I)

#define ALL(x) x.begin(), x.end()
#define SIZE(x) ll(x.size())

#define INF32 2147483647
#define INF64 9223372036854775807
#define MOD 1000000007

#define F first
#define S second
#define pb push_back
#define mp make_pair

#define OP(m) cout << m << endl;
ll myceil(ll a, ll b) { return (a + (b - 1)) / b; }
ll myfloor(ll a, ll b) { return a / b; }

int dx4[4] = {1, 0, -1, 0};
int dy4[4] = {0, 1, 0, -1};
int dx8[8] = {-1, -1, 0, 1, 1, 1, 0, -1};
int dy8[8] = {0, -1, -1, -1, 0, 1, 1, 1};
// cout<<fixed<<setprecision(10);

vector<int> G[100000];
int color[100000];

void dfs(int node, int id) {
    color[node] = id;
    REP(i, G[node].size()) {
        if (color[G[node][i]] != -1) continue;
        dfs(G[node][i], id);
    }
}

signed main() {
    int n, m;
    cin >> n >> m;
    REP(_, m) {
        int s, t;
        cin >> s >> t;

        G[s].push_back(t);
        G[t].push_back(s);
    }

    REP(i, n) color[i] = -1;
    int id = 1;
    REP(i, n) {
        if (color[i] != -1) continue;
        dfs(i, id++);
    }

    int q;
    cin >> q;
    REP(_, q) {
        int s, t;
        cin >> s >> t;
        yesno(color[s] == color[t])
    }
}
