#include<bits/stdc++.h>
#define db double
#define Eps 1e-8
using namespace std;
const int M=8e4+7;
int n,cnt=1; db ans;
struct node{
    db x,y;
}p[M],tb[M];
db check(node a1,node a2,node b1,node b2){
	return (a2.x-a1.x)*(b2.y-b1.y)-(b2.x-b1.x)*(a2.y-a1.y); 
	//<0表右转 =0表共线 >0表左转 
}
db dis(node p1,node p2){
	return (p2.y-p1.y)*(p2.y-p1.y)+(p2.x-p1.x)*(p2.x-p1.x);
}
bool cmp(node p1,node p2){
	db tmp=check(p[1],p1,p[1],p2);
	if(tmp>Eps ||(abs(tmp)<Eps && dis(p[1],p1)+Eps<dis(p[1],p2))) return 1;
	return 0;
}
db getmax(){
	db re=0;
	if(cnt==2) return dis(tb[1],tb[2]); 
	tb[cnt+1]=tb[1]; int j=2;
	for(int i=1;i<=cnt;i++){
		while(check(tb[i],tb[i+1],tb[i],tb[j])+Eps<check(tb[i],tb[i+1],tb[i],tb[j+1]))
			j=j%cnt+1; //后者比前者更左偏
		re=max(re,max(dis(tb[i],tb[j]),dis(tb[i+1],tb[j])));
	}
	return re;
}
int main(){
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		scanf("%lf%lf",&p[i].x,&p[i].y);
		if(i!=1&&(p[i].y<p[1].y ||(p[i].y==p[1].y && p[i].x<p[1].x)))
			swap(p[1],p[i]);
	}
	sort(p+2,p+1+n,cmp),tb[1]=p[1];
	for(int i=2;i<=n;i++){
		while(cnt>1&&check(tb[cnt-1],tb[cnt],tb[cnt],p[i])<=0) cnt--;
		tb[++cnt]=p[i];
	}
	printf("%.7lf\n",sqrt(getmax()));
	return 0;
}
