#include <iostream>
#include <cstdio>
using namespace std;

const int N = 10010, NLL = -1;

struct node {
	int l, r, p;
}e[N];

int n, tmp, root;
int depth[N], degree[N], h[N];

void solve(int u, int d) {
	depth[u] = d;
	if (e[u].l != NLL) solve(e[u].l, d + 1);
	if (e[u].r != NLL) solve(e[u].r, d + 1);
}

//int count(int u) {
//	if (e[u].r != NLL && e[u].l != NLL) {
//		cnt[u] = count(e[u].l) + count(e[u].r) + 2;
//	}
//	return cnt[u];
//}

int height(int u) {
	int h1 = 0, h2 = 0;
	if (e[u].l != NLL)
		h1 = height(e[u].l) + 1;
	if (e[u].r != NLL)
		h2 = height(e[u].r) + 1;
	return h[u] = max(h1, h2);
}

int sibling(int u) {
	if (e[u].p == NLL) return -1;
	if (e[e[u].p].l != u && e[e[u].p].l != NLL)
		return  e[e[u].p].l;
	if (e[e[u].p].r != u && e[e[u].p].r != NLL)
		return e[e[u].p].r;
	return -1;
}

void print(int u) {
	int cnt = 0;
	printf("node %d: parent = %d, sibling = %d, ", u, e[u].p, sibling(u));
	if (e[u].l != NLL) cnt ++ ;
	if (e[u].r != NLL) cnt ++ ;
	printf("degree = %d, depth = %d, height = %d, ", cnt, depth[u], h[u]);
	if (e[u].p == NLL) printf("root\n");
	else if (e[u].l == NLL && e[u].r == NLL) printf("leaf\n");
	else printf("internal node\n");
}

int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; i ++ )
		e[i].p = -1;
	for (int i = 0; i < n; i ++ ) {
		int id, x, y;
		scanf("%d %d %d", &id, &x, &y);
		e[id].l = x, e[id].r = y;
		if (x != NLL) e[x].p = id;
		if (y != NLL) e[y].p = id;
	}
	for (int i = 0; i < n; i ++ )
		if (e[i].p == NLL) root = i;
	solve(root, 0);
	height(0);
//	count(0);
	for (int i = 0; i < n; i ++ )
		print(i);

	return 0;
}
