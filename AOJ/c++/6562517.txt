#include <bits/stdc++.h>
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define all(x) (x).begin(), (x).end()
typedef long long ll;
using namespace std;

struct card
{
    char mark;
    int num;
};

int partition(card A[], int p, int r)
{
    int x = A[r].num;
    int i = p-1;
    for (int j = p; j < r; j++)
    {
        if (A[j].num <= x)
        {
            i++;
            swap(A[i], A[j]);
        }
    }
    swap(A[i+1], A[r]);
    return i+1;
}
void quickSort(card A[], int p, int r)
{
    if (p < r)
    {
        int q = partition(A, p, r);
        quickSort(A, p, q-1);
        quickSort(A, q+1, r);
    }
}

void merge(card A[], int left, int mid, int right)
{
    int n1 = mid - left;
    int n2 = right - mid;
    card L[n1], R[n2];
    for (int i = 0; i < n1; i++)
    {
        L[i] = A[left + i];
    }
    for (int i = 0; i < n2; i++)
    {
        R[i] = A[mid + i];        
    }
    L[n1].num = INT_MAX;
    R[n2].num = INT_MAX;
    int i = 0;
    int j = 0;
    for (int k = left; k < right; k++)
    {
        if (L[i].num <= R[j].num)
        {
            A[k] = L[i];
            i++;
        }
        else
        {
            A[k] = R[j];
            j++;
        }
    }
}
/**
 * @brief マージソート
 * 
 * @param A ソートする配列
 * @param left 0
 * @param right Aの要素数
 * @details O(nlogn), 安定なソート
 */
void mergeSort(card A[], int left, int right)
{
    if (left+1 < right)
    {
        int mid = (left + right)/2;
        mergeSort(A, left, mid);
        mergeSort(A, mid, right);
        merge(A, left, mid, right);
    }
}

int main()
{
    int n; cin >> n;
    card a[n], b[n];
    rep(i, n)
    {
        cin >> a[i].mark >> a[i].num;
        b[i] = a[i];
    }
    quickSort(a, 0, n-1);
    mergeSort(b, 0, n);
    string ans = "Stable";
    rep(i, n)
    {
        if (a[i].num != b[i].num || a[i].mark != b[i].mark)
        {
            ans = "Not stable";
            break;
        }
    }
    cout << ans << endl;
    rep(i, n)
    {
        cout << a[i].mark << " " << a[i].num << endl;
    }
    return 0;
}

