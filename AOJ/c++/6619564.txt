#include <algorithm>
#include <array>
#include <cassert>
#include <iostream>
#include <numeric>
#include <string>
#include <vector>
using namespace std;

using skeleton = array<int, 12>;
void init (skeleton& skel) {
    for (int &x : skel) x = 0;
    // assert(*max_element(skel.begin(), skel.end()) == 0);
}
int rev (int n, int bit) {
    int res = 0;
    for (int i = 0; i < n; ++i) res |= (bit >> i & 1) << (n - 1 - i);
    // assert(res < 1 << n);
    return res;
}
const array<array<int, 8>, 6> surface = {
    array<int, 8>{0, 1, 2, 3, 4, 5, 6, 7},
    array<int, 8>{0, 4, 8, 7, 1, 9, 11, 3},
    array<int, 8>{1, 5, 9, 4, 2, 10, 8, 0},
    array<int, 8>{2, 6, 10, 5, 3, 11, 9, 1},
    array<int, 8>{3, 7, 11, 6, 0, 8, 10, 2},
    array<int, 8>{11, 10, 9, 8, 6, 5, 4, 7}
};
const array<array<int, 8>, 6> flips = {
    array<int, 8>{0, 0, 0, 0, 0, 0, 0, 0},
    array<int, 8>{0, 0, 0, 1, 0, 1, 0, 1},
    array<int, 8>{0, 0, 0, 1, 0, 1, 0, 1},
    array<int, 8>{0, 0, 0, 1, 0, 1, 0, 1},
    array<int, 8>{0, 0, 0, 1, 0, 1, 0, 1},
    array<int, 8>{0, 0, 0, 0, 1, 1, 1, 1}
};
skeleton rotate_face(int n, int side, int rot, int flip, const skeleton& sk) {
    rot += 8;
    skeleton res;
    init(res);
    if (side == 0) return sk;
    if (!flip) {
        for (int i = 0; i < 4; ++i) {
            res.at(surface.at(side).at((rot + i) & 3))
                = flips.at(side).at((rot + i) & 3) ? rev(n, sk.at(i)) : sk.at(i);
        }
        for (int i = 4; i < 8; ++i) {
            res.at(surface.at(side).at(4 + ((rot + i) & 3)))
                = flips.at(side).at(4 + ((rot + i) & 3)) ? rev(n, sk.at(i)) : sk.at(i);
        }
    } else {
        for (int i = 0; i < 4; ++i) {
            res.at(surface.at(side).at((rot - i) & 3))
                = flips.at(side).at((rot - i) & 3) ? sk.at(i) : rev(n, sk.at(i));
        }
        for (int i = 4; i < 8; ++i) {
            res.at(surface.at(side).at(4 + ((rot + 3 - i) & 3)))
                = flips.at(side).at(4 + ((rot + 3 - i) & 3)) ? rev(n, sk.at(i)) : sk.at(i);
        }

    }
    // assert(*max_element(sk.begin(), sk.end()) < 1 << n);
    // assert(*max_element(res.begin(), res.end()) < 1 << n);
    return res;
}
bool merge_face(skeleton& a, skeleton& b) {
    for (int i = 0; i < 12; ++i) {
        if (a.at(i) & b.at(i)) return false;
        a.at(i) |= b.at(i);
    }
    return true;
}

int main(void) {
    int n;
    while (true) {
        cin >> n;
        if (n == 0) return 0;
        vector pieces(6, vector<string>(n));
        vector<skeleton> skels(6);
        for (int i = 0; i < 6; ++i) {
            init(skels.at(i));
            for (int y = 0; y < n; ++y) {
                cin >> pieces.at(i).at(y);
            }
            for (int j = 0; j < n; ++j) {
                skels.at(i).at(0) |= (pieces.at(i).at(0).at(j) == 'X') << j;
                skels.at(i).at(1) |= (pieces.at(i).at(j).at(n-1) == 'X') << j;
                skels.at(i).at(2) |= (pieces.at(i).at(n-1).at(n-1-j) == 'X') << j;
                skels.at(i).at(3) |= (pieces.at(i).at(n-1-j).at(0) == 'X') << j;
            }
            skels.at(i).at(4) = (pieces.at(i).at(0).at(n-1) == 'X');
            skels.at(i).at(5) = (pieces.at(i).at(n-1).at(n-1) == 'X');
            skels.at(i).at(6) = (pieces.at(i).at(n-1).at(0) == 'X');
            skels.at(i).at(7) = (pieces.at(i).at(0).at(0) == 'X');

            // assert(*max_element(skels.at(i).begin(), skels.at(i).end()) < 1 << n);
            // for (int x : skels.at(i)) cerr << x << ' ';
            // cerr << endl;
            
        }
        vector<int> perm(6);
        iota(perm.begin(), perm.end(), 0);
        bool capable = false;
        do {
            for (int bit = 0; bit < 1 << 3 * 6; bit += 1 << 3) {
                bool ok = true;
                skeleton skel_res;
                init(skel_res);
                for (int i = 0; i < 6; ++i) {
                    skeleton skel = rotate_face(
                        n, perm.at(i),
                        bit >> (3 * i) & 0b11,
                        bit >> (3 * i + 2) & 1,
                        skels.at(i)
                    );
                    if (!merge_face(skel_res, skel)) {
                        ok = false;
                        // break;
                    }
                }
                // if (perm.at(0) == 0 && perm.at(1) == 1 && perm.at(2) == 2
                // && perm.at(3) == 3 && perm.at(4) == 4 && perm.at(5) == 5
                // && bit == 0x00) {
                //     for (int x : skel_res) cerr << x << ' ';
                //     cerr << endl;
                // }
                // if (perm.at(0) == 0 && perm.at(1) == 1 && perm.at(2) == 2
                // && perm.at(3) == 3 && perm.at(4) == 4 && perm.at(5) == 5
                // && bit < 0x100
                // && *max_element(skel_res.begin(), skel_res.end()) == (1 << n) - 1) {
                //     cerr << "perm=";
                //     for (int x : perm) cerr << x;
                //     cerr << " bit=" << bit << endl;
                //     for (int x : skel_res) cerr << x << ' ';
                //     cerr << endl;
                // }
                if (ok) {
                    capable = count(skel_res.begin(), skel_res.end(), (1 << n) - 1) == 12;
                    // cerr << "perm=";
                    // for (int x : perm) cerr << x;
                    // cerr << " bit=" << bit << endl;
                    // for (int x : skel_res) cerr << x << ' ';
                    // cerr << endl;
                    if (capable) {
                        goto lbreak_1;
                    }
                }
            }
        } while (next_permutation(perm.begin() + 1, perm.end()));
        lbreak_1:
        cout << (capable ? "Yes" : "No") << endl;
    }
    return 0;
}
