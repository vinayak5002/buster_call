#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <cstdio>
#include <ctime>
#include <assert.h>
#include <chrono>
#include <random>
#include <numeric>
#include <set>
#include <deque>
#include <stack>
#include <sstream>
#include <utility>
#include <cstring>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <array>
#include <bitset>
using namespace std;
typedef long long int ll;
typedef unsigned long long ull;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll myRand(ll B) {
    return (ull)rng() % B;
}
inline double time() {
    return static_cast<long double>(chrono::duration_cast<chrono::nanoseconds>(chrono::steady_clock::now().time_since_epoch()).count()) * 1e-9;
}

int main(){
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n,m; cin >> n >> m;
    vector<ll> cost;
    vector<vector<pair<int,int>>> g(n);
    for(int i=1;i<n;i++){
        int a,b,c; cin >> a >> b >> c;
        a--; b--;
        g[a].push_back({b,c});
        g[b].push_back({a,c});
    }
    for(int i=0;i<n;i++){
        ll S; cin >> S;
        auto dfs=[&](auto dfs,int s,int p)->ll{
            ll u = 0;
            for(auto to:g[s]){
                if(to.first == p)continue;
                ll cur = to.second+dfs(dfs,to.first,s);
                if(u < cur){
                    if(u)cost.push_back(u*S);
                    u = cur;
                }
                else{
                    if(cur)cost.push_back(cur*S);
                }
            }
            return u;
        };
        ll u = dfs(dfs,i,-1);
        cost.push_back(u*S);
    }
    sort(cost.rbegin(), cost.rend());
    ll res = 0;
    for(int i=0;i<min(m,(int)cost.size());i++){
        res += cost[i];
    }
    cout << res << endl;
}



