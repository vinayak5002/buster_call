#include<bits/stdc++.h>

using namespace std;

#define Reimu inline void // 灵梦赛高
#define Marisa inline int // 魔理沙赛高
#define Sanae inline bool // 早苗赛高

typedef long long LL;
typedef unsigned long long ULL;

typedef pair<int, int> Pii;
typedef tuple<int, int, int> Tiii;
#define fi first
#define se second

const double eps = 1e-9;

struct Vec { // Vector 向量 / 点
	double x, y; // 正交式
	friend istream &operator>>(istream &cin, Vec &a) { return cin >> a.x >> a.y; } // 向量输入
	friend ostream &operator<<(ostream &cout, Vec a) { return cout << a.x << ' ' << a.y; } // 向量输出
	friend Vec operator-(Vec a) { return {-a.x, -a.y}; } // 相反向量
	friend Vec operator+(Vec a, Vec b) { return {a.x + b.x, a.y + b.y}; } // 向量加法
	friend Vec operator-(Vec a, Vec b) { return {a.x - b.x, a.y - b.y}; } // 向量减法
	friend Vec operator*(Vec a, double b) { return {a.x * b, a.y * b}; } // 向量数乘
	friend Vec operator/(Vec a, double b) { return {a.x / b, a.y / b}; } // 向量数除
	friend double operator|(Vec a, Vec b) { return a.x * b.x + a.y * b.y; } // 向量点积
	friend double operator&(Vec a, Vec b) { return a.x * b.y - a.y * b.x; } // 向量叉积
	friend double operator~(Vec a) { return sqrt(a | a); } // 向量模长
	friend Vec operator!(Vec a) { return a / ~a; } // 单位向量
	friend double operator*(Vec a) { return atan2(a.y, a.x); } // 向量与 x 轴夹角
	// 以 x 为第一关键字，y 为第二关键字比较
	friend Sanae operator==(Vec a, Vec b) { return fabs(a.x - b.x) < eps && fabs(a.y - b.y) < eps; }
	friend Sanae operator!=(Vec a, Vec b) { return !(a == b); }
	friend Sanae operator<(Vec a, Vec b) { return a != b && (fabs(a.x - b.x) > eps ? a.x < b.x : a.y < b.y); }
	friend Sanae operator>=(Vec a, Vec b) { return !(a < b); }
	friend Sanae operator>(Vec a, Vec b) { return a != b && (fabs(a.x - b.x) > eps ? a.x > b.x : a.y > b.y); }
	friend Sanae operator<=(Vec a, Vec b) { return !(a > b); }
};

inline Vec pl(double norm, double angle) { // polar 求模长为 norm，极角为 angle 的向量
	return Vec{cos(angle), sin(angle)} * norm;
}
inline Vec rot90(Vec a) { // rotate90 求给定向量逆时针旋转90°的结果
	return {-a.y, a.x};
}

struct Seg { // Segment 线段 / 直线
	Vec p, v; // 点向式
	friend istream &operator>>(istream &cin, Seg &a) { return cin >> a.p >> a.v; a.v = a.v - a.p; } // 线段输入两端点
	friend ostream &operator<<(ostream &cout, Seg a) { return cout << a.p << ' ' << a.p + a.v; } // 线段输出两端点
};

inline Seg getPB(Seg a) { // getPerpendicularBisector 求给定线段的垂直平分线
	return {a.p + a.v / 2, rot90(a.v)};
}
inline Vec proj(Seg a, Vec b) { // project 求点在直线上的投影
	return a.p + !a.v * ((a.v | b - a.p) / ~a.v);
}
Marisa onSeg(Seg a, Vec b) { // onSegment 判断点是否在线段上
	Vec p1 = a.p, p2 = p1 + a.v;
	return max(p1.x, p2.x) - b.x > -eps && b.x - min(p1.x, p2.x) > -eps
		&& max(p1.y, p2.y) - b.y > -eps && b.y - min(p1.y, p2.y) > -eps
		&& fabs(b - p1 & a.v) < eps;
}
Marisa chkCrs(Seg a, Seg b) { // checkCross 判断两条线段是否相交
	Vec p1 = a.p, p2 = p1 + a.v, q1 = b.p, q2 = q1 + b.v;
	return max(p1.x, p2.x) - min(q1.x, q2.x) > -eps && max(q1.x, q2.x) - min(p1.x, p2.x) > -eps
		&& max(p1.y, p2.y) - min(q1.y, q2.y) > -eps && max(q1.y, q2.y) - min(p1.y, p2.y) > -eps
		&& (a.v & q1 - p1) * (a.v & q2 - p1) < eps && (b.v & p1 - q1) * (b.v & p2 - q1) < eps;
}
inline Vec getCrs(Seg a, Seg b) { // getCross 求两条直线交点
	return a.p + a.v / (a.v & b.v) * (b.p - a.p & b.v);
}
inline double disPL(Vec a, Seg b) { // distancePointLine 求点到直线距离
	return fabs((b.v & a - b.p) / ~b.v);
}
inline double disPS(Vec a, Seg b) { // distancePointSegment 求点到线段距离
	Vec p = b.p, q = p + b.v;
	return (a - p | b.v) > eps && (a - q | -b.v) > eps ? disPL(a, b) : min(~(a - p), ~(a - q));
}
inline double disSS(Seg a, Seg b) { // distanceSegmentSegment 求两线段间距离
	return chkCrs(a, b) ? 0 : min(min(disPS(a.p, b), disPS(a.p + a.v, b)), min(disPS(b.p, a), disPS(b.p + b.v, a)));
}

typedef basic_string<Vec> Pg; // Polygon 多边形

inline double area(Pg a) { // 求多边形面积
	double res = 0;
	for (int i = 0; i < a.size(); ++i) res += a[i] & a[(i + 1) % a.size()];
	return fabs(res / 2);
}
Marisa inPg(Pg a, Vec b) { // inPolygon 判断点是否被多边形包含，1 包含，0 不包含，-1 在边上
	a += a[0];
	for (int i = 1; i < a.size(); ++i) if (onSeg({a[i - 1], a[i] - a[i - 1]}, b)) return -1;
	b = b + Vec{0, eps};
	int c = 0;
	for (int i = 1; i < a.size(); ++i) c += chkCrs({a[i - 1], a[i] - a[i - 1], {b, Vec{1e9, b.y}}});
	return c & 1;
}
inline Pg getCH(Pg a) { // getConvexHull 求包含给定点集的凸包
	sort(a.begin(), a.end());
	Pg res;
	auto solve = [&]() {
		for (int i = 2; i < a.size(); ++i) {
			while (res.size() > 1) {
				Vec p1 = res[res.size() - 2], p2 = res[res.size() - 1];
				if ((p2 - p1 & a[i] - p2) > -eps) break;
				res.pop_back();
			}
			res += a[i];
		}
	};
	(res += a[0]) += a[1];
	solve();
	reverse(a.begin(), a.end()); res += a[1];
	solve();
	res.pop_back();
	return res;
}
inline double getD(Pg a) { // getDiameter 求给定凸包的直径
	double res = 0;
	for (int i = 0, j = 0; i < a.size(); ++i) {
		while (j + 1 < a.size() && ~(a[j + 1] - a[i]) > ~(a[j] - a[i])) ++j;
		res = max(res, ~(a[j] - a[i]));
	}
	return res;
}

struct Cir {
	Vec p; double r;
	friend istream &operator>>(istream &cin, Cir &a) { return cin >> a.p >> a.r; } // 圆输入
	friend ostream &operator<<(ostream &cout, Cir a) { return cout << a.p << ' ' << a.r; } // 圆输出
}; // Circle 圆

inline Cir getIC(Vec a, Vec b, Vec c) { // getInscribedCircle 求三角形内接圆
	double A = ~(b - c), B = ~(a - c), C = ~(a - b);
	return {(a * A + b * B + c * C) / (A + B + C), fabs(b - a & c - a) / (A + B + C)};
}
inline Cir getCC(Vec a, Vec b, Vec c) { // getCircumscribedCircle 求三角形外接圆
	Vec p = getCrs(getPB({a, b - a}), getPB({a, c - a}));
	return {p, ~(a - p)};
}
inline Pg getCrs(Cir a, Seg b) { // getCross 求圆与直线的交点
	double d = disPL(a.p, b);
	Vec p = proj(b, a.p);
	if (fabs(d - a.r) < eps) return {p};
	if (d > a.r) return {};
	double t = sqrt(a.r * a.r - d * d);
	return {p + !b.v * t, p - !b.v * t};
}
inline Pg getCrs(Cir a, Cir b) { // getCross 求两个圆的交点
	if (a.r < b.r) swap(a, b);
	double A = b.r, B = a.r, C = ~(b.p - a.p), alpha = *(b.p - a.p), beta = acos((B * B + C * C - A * A) / (2 * B * C));
	if (fabs(~(b.p - a.p) - b.r - a.r) < eps || fabs(~(b.p - a.p) + b.r - a.r) < eps) return {a.p + pl(a.r, alpha + beta)};
	if (~(b.p - a.p) > a.r + b.r || ~(b.p - a.p) < a.r - b.r) return {};
	return {a.p + pl(a.r, alpha + beta), a.p + pl(a.r, alpha - beta)};
}
inline pair<Vec, Vec> getTan(Cir a, Vec b) { // getTangent 求圆过给定点的切线在圆上的切点
	Pg res = getCrs(a, Cir{b, sqrt(~(b - a.p) * ~(b - a.p) - a.r * a.r)});
	return {res[0], res[1]};
}

int n;
Pg a;

int main() {
	ios::sync_with_stdio(false); cin.tie(nullptr);
	cin >> n; a.resize(n);
	for (auto &x: a) cin >> x;
	int q; cin >> q; while (q--) {
		Vec b; cin >> b;
		int ans = inPg(a, b);
		cout << (~ans ? ans ? "2\n" : "0\n" : "1\n");
	}
	return 0;
}
