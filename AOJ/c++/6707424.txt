#include <bits/stdc++.h>
#pragma GCC optimize("O2")
using namespace std;

typedef pair<int, int> pii;
typedef long long ll;
typedef pair<ll, ll> pll;
#define X first
#define Y second
#define io ios_base::sync_with_stdio(0); cin.tie(0);
#define setpr setprecision
#define eb emplace_back
#define lowb lower_bound
#define uppb upper_bound
#define lowbit(x) ((x) & -(x))
#define mk make_pair
const ll M = 1e9 + 7;
const ll INF = 1e14;

pll pt[100005];
vector <int> v[100005];
ll cost[1200005];
pll edge[1200005];
int add[100005];

ll dis(pll a, pll b){
	return max(abs(a.X - b.X), abs(a.Y - b.Y));
}

bool cmp(pll a, pll b){
	return a.Y == b.Y ? a.X < b.X : a.Y < b.Y;
}

ll solve(int n){
	int ct = 0; ll ans = 0;
	priority_queue <pll, vector<pll>, greater<pll> > pq;
	while(pq.size()) pq.pop();
	pq.emplace(0, 1);

	while(pq.size()){
		pll p = pq.top(); pq.pop();
		if(add[p.Y]) continue;
		ct++; add[p.Y] = 1; ans += p.X;
		if(ct == n) break;

		for(auto i : v[p.Y]){
			int ver = edge[i].X + edge[i].Y - p.Y;
			if(add[ver]) continue;
			pq.emplace(cost[i], ver);
		}
	}
	return ans;
}

int main(){
	io
	int n; cin >> n;
	for(int i = 0; i < n; i++)
		cin >> pt[i].X >> pt[i].Y;
	sort(pt, pt + n);
	ll maxdis = -1, ct = 0;
	for(int i = 1; i < n; i++)
		maxdis = max(maxdis, dis(pt[i - 1], pt[i]));
	for(int i = 0; i < n; i++){
		for(int j = i + 1; j < n; j++){
			if(pt[j].X - pt[i].X > maxdis) break;
			ll tmp = dis(pt[j], pt[i]);
			if(tmp <= maxdis){
				v[i + 1].eb(ct); v[j + 1].eb(ct);
				edge[ct] = mk(i + 1, j + 1); cost[ct++] = tmp;
			}
		}
	}
	ll ans = solve(n);
	cout << ans << "\n";
	return 0;
}
