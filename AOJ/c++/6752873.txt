#include <iostream>
#include <vector>

using namespace std;

class DisjointSets{
    vector<int> parent, rank;

public:
    
    DisjointSets(int n){
        parent.resize(n, 0);
        rank.resize(n, 0);
    }

    void makeset(int i){
        parent[i] = i;
        rank[i] = 0;
    }

    int findset(int i){
        if (parent[i] == i) return i;
        findset(parent[i]); 
    }

    void unite(int x, int y){
        int x_set_root = findset(x);
        int y_set_root = findset(y);

        if (rank[x_set_root] > rank[y_set_root])
        {
            parent[y_set_root] = x_set_root; 
        } else {
            parent[x_set_root] = y_set_root; 
            if (rank[x_set_root] == rank[y_set_root]) rank[y_set_root]++;
        }
    }
};

int main()
{
    int n,q;
    cin >> n;
    DisjointSets dm(n);
    for (int i = 0; i < n; i++) dm.makeset(i);
    
    cin >> q;
    int operation, x, y;
    for (int i = 0; i < q; i++)
    {
        cin >> operation >> x >> y;
        switch(operation){
            case 0:
                dm.unite(x,y);
                break;
            case 1:
                if (dm.findset(x) == dm.findset(y)) cout << "1" << endl;
                else cout << "0" << endl;
        }
    }
    
    return 0;
}

