#include<iostream>
#include<math.h>
#include<vector>
using namespace std;;

void makeSet(int);
void unite(int, int);
void link(int, int);
int findSet(int);
int same(int, int);

int n;
vector<int> p;
vector<int> Rank;



int main(){
    int q, query, x, y, i;
    vector<int> ans;
    cin >> n >> q ;

    for(i=0; i<n; i++) makeSet(i);

    for(i=0; i<q; i++){
        cin >> query >> x >> y;
        if(query == 0)
            unite(x, y);
        else if(query == 1)
            ans.push_back(same(x, y));
    }
    for(i=0; i<ans.size(); i++)
        cout << ans[i] << endl;

}
void makeSet(int x){
    p.push_back(x);
    Rank.push_back(0);
}
void unite(int x, int y){
    link(findSet(x), findSet(y));
}
void link(int x, int y){
    if(Rank[x] > Rank[y])
        p[y] = x;
    else{
        p[x] = y;
        if(Rank[x] == Rank[y])
            Rank[y] = Rank[x] + 1;
    }
}
int findSet(int x){
    if(x != p[x]){
        p[x] = findSet(p[x]);
        //Rank[x] = Rank[p[p[x]]] + 1;
    }
    return p[x];
}
int same(int x, int y){
    if(findSet(x) == findSet(y))
        return 1;
    else
        return 0;
}
