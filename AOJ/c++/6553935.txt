#include<bits/stdc++.h>
// #include<atcoder/all>
// #include<boost/multiprecision/cpp_int.hpp>

using namespace std;
// using namespace atcoder;
// using bint = boost::multiprecision::cpp_int;
using ll = long long;
using ull = unsigned long long;
using P = pair<int,int>;
#define rep(i,n) for(ll i = 0;i < (ll)n;i++)
#define ALL(x) (x).begin(),(x).end()
#define MOD 1000000007
// #define MOD 998244353

int dx[] = {1,0,0,-1};
int dy[] = {0,1,-1,0};

int main(){
  
  while(1){
    vector<string> s(12);
    if(!(cin>>s[0]))break;
    for(int i=1;i<12;i++)cin>>s[i];
    int res = 0;
    vector<vector<bool>> is(12,vector<bool>(12,0));
    rep(i,12)rep(j,12){
      if(is[i][j])continue;
      if(s[i][j] == '0')continue;
      res++;
      queue<P> que;
      que.push({i,j});
      is[i][j] = 1;
      while(!que.empty()){
        P ov = que.front();que.pop();
        rep(k,4){
          P nv = {ov.first+dy[k],ov.second+dx[k]};
          if(nv.first < 0 || nv.first >= 12 || nv.second < 0 || nv.second >= 12)continue;
          if(s[nv.first][nv.second] == '0')continue;
          if(is[nv.first][nv.second])continue;
          is[nv.first][nv.second] = 1;
          que.push(nv);
        }
      }
    }
    cout << res << "\n";
  }
  

  return 0;
}

