#include<bits/stdc++.h>
typedef long long int ll;
typedef unsigned long long int ull;
#define BIG_NUM 2000000000
#define HUGE_NUM 99999999999999999
#define MOD 1000000007
#define EPS 0.000000001
using namespace std;



#define SIZE 2000005

class PQ{
public:

	PQ(int arg_size){

		table = new int[arg_size];
        size = arg_size;
        num_nodes = 0;

        for(int i = 0; i < size; i++){

        	table[i] = NONE;
        }
    }

	bool isEmpty(){

		return num_nodes == 0;
	}

	bool isFull(){

		return num_nodes == size;
	}

	void push(int value){

		table[num_nodes] = value;
        int loc = num_nodes++;

        int parent;

        //親 < 挿入値である間、データを上下に交換
        while(loc != root){
        	parent = (loc-1)/2;

        	if(table[parent] >= table[loc]){

        		break;
        	}else{

        		swap(table[parent],table[loc]);
        		loc = parent;
        	}
        }
    }

    int pop(){

    	int ret = table[root];

    	//末尾のデータをrootに引っ張ってくる
    	num_nodes--;
    	table[root] = table[num_nodes];
    	table[num_nodes] = NONE;

    	int loc = root;
    	int left,right;

    	//親 >= 左右の子となるように、データを交換
        while(true){
        	left = 2*loc+1;
        	if(left >= size)break; //locが一番下の層に到達

        	right = 2*loc+2;

        	if(table[loc] >= table[left] && table[loc] >= table[right]){

        		break;

        	}else{ //左の子と右の子で、大きい方と交換する

        		if(table[left] >= table[right]){

        			swap(table[loc],table[left]);
        			loc = left;

        		}else{

        			swap(table[loc],table[right]);
        			loc = right;
        		}
        	}
        }

        return ret;
    }

private:
    int* table;
    int num_nodes,size;
    const int NONE = -1,root = 0;
};

int main(){

    int value;
    char buf[22];
    PQ Q(SIZE);

    while(true){
        fgets(buf,22,stdin);
        if(buf[2] == 'd') break;
        if(buf[0] == 'i'){
            value = 0;
            for(int i = 0; buf[i] != '\0';i++){
                if(buf[i] >= '0' && buf[i] <= '9'){
                    value = 10*value+(buf[i] - '0');
                }
            }
            Q.push(value);
        }else{
            printf("%d\n",Q.pop());
        }
    }
}

