#include <bits/stdc++.h>
using namespace std;
#define rep(i,n) for (int i = 0; i < (n); ++i)
struct UnionFind {
    vector<int> par;
    UnionFind(int n) {
        par.resize(n);
        for (int i = 0; i < n; i++) par[i] = i;
    }    
    int root(int x) {
        if (par[x] == x) return x;
        else return par[x] = root(par[x]);
    }
    bool same(int x, int y) {
        return root(x) == root(y);
    }
    void unite(int x, int y) {
        x = root(x);
        y = root(y);
        if (x == y) return;
        par[x] = y;
    }
};
int main(){
    int n, q;
    cin >> n >> q;
    UnionFind uf = UnionFind(n);
    rep(_,q) {
        int c, x, y;
        cin >> c >> x >> y;
        if (c == 0) uf.unite(x, y);
        else cout << uf.same(x, y) << endl;
    }
} 
