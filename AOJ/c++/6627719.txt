#include <stdio.h>
#include <stdio.h>

#define N 100
#define Q 2001

void swap(int *x, int *y){
	int tmp;
	
	tmp = *x;
	*x = *y;
	*y = tmp;

}

void pushup(int queue[], int first, int top){
	int child = first;
	int parent = child / 2;
	while (parent >= top){
		if (queue[child] <=queue[parent]){
			break;
		}
		swap(&queue[child], &queue[parent]);
		child = parent;
		parent = child / 2;
	}
}

void pushdown(int queue[], int first, int last){
	int parent = first;
	int child = parent * 2;
	while (child <= last){
		if (child <last && queue[child] < queue[child+1]){
			child++;
		}
		if (queue[parent] >= queue[child]){
			break;
		}
		swap(&queue[parent], &queue[child]);
		parent = child;
		child = parent * 2;
	}
}

int main(void) {
	int n, q, query, t, x, i, j, parent, child, Lchild, Rchild, maxnum;
	int queue[N][Q];
	int size[N];

	scanf("%d %d", &n, &q);

	for (i = 0; i < n; i++){
		size[i] = 1;
	}

	for (i = 0; i < q; i++){
		scanf("%d %d", &query, &t);
		if (query == 0){
			scanf("%d", &x);
			queue[t][size[t]] = x;
			pushup(queue[t], size[t], 1);
			size[t]++;
		}

		else if (query == 1){
			if (size[t] != 0){
				printf("%d\n", queue[t][1]);
			}
		}

		else if (query == 2){
			size[t]--;
			queue[t][1] = queue[t][size[t]];
			pushdown(queue[t], 1, size[t] - 1);
		}
	}
	return 0;
}
