#include <bits/stdc++.h>

using namespace std;

struct edge {
    int to, cost;
};
typedef pair<int, int> P;  // firstは最短距離、secondは頂点の番号

int V;
vector<vector<edge>> G;
vector<int> d;
const int INF = INT_MAX / 2;

void dijkstra(int s) {
    // greaterを指定することでfirstが小さい順に取り出せるようにする
    priority_queue<P, vector<P>, greater<P>> que;
    fill(d.begin(), d.end(), INF);
    d[s] = 0;
    que.push(P(0, s));

    while (!que.empty()) {
        P p = que.top();
        que.pop();
        int v = p.second;
        if (d[v] < p.first) continue;
        for (int i = 0; i < int(G[v].size()); i++) {
            edge e = G[v][i];
            if (d[e.to] > d[v] + e.cost) {
                d[e.to] = d[v] + e.cost;
                que.push(P(d[e.to], e.to));
            }
        }
    }
}

int main() {
    int E, r;
    cin >> V >> E >> r;
    G.resize(V);
    d.resize(V);
    for (int i = 0; i < E; i++) {
        int S, T, D;
        cin >> S >> T >> D;
        G[S].push_back({T, D});
        // G[T].push_back({S, D});
    }
    dijkstra(r);
    for (int i = 0; i < V; i++) {
        if (d[i] == INF) {
            cout << "INF" << endl;
        } else {
            cout << d[i] << endl;
        }
    }
}
