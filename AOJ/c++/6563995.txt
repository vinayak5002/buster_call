#include <bits/stdc++.h>
using namespace std;
static const double EPS = 1e-10;
static const int COUNTER_CLOCKWISE = 1;
static const int CLOCKWISE = -1;
static const int ONLINE_BACK = 2;
static const int ONLINE_FRONT = -2;
static const int ON_SEGMENT = 0;

#define equals(a, b) (fabs((a) - (b)) < EPS)
class Point {
  public:
  double x, y;
  Point(double x = 0, double y = 0) : x(x), y(y) {}
  Point operator+(Point &p) { return Point(x + p.x, y + p.y); }
  Point operator-(Point &p) { return Point(x - p.x, y - p.y); }
  Point operator*(double a) { return Point(a * x, a * y); }
  Point operator/(double a) { return Point(x / a, y / a); }
  double abs() { return sqrt(norm()); }
  double norm() { return (x * x + y * y); }
  bool operator<(const Point &p) const {
    return x != p.x ? x < p.y : y < p.y;
  }
  bool operator==(const Point &p) const {
    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;
  }
};
typedef Point Vector;
struct Segment {
  Point p1, p2;
  Segment(Point p1, Point p2) : p1(p1), p2(p2) {}
  Segment() {}
};
typedef Segment Line;

struct Circle {
  Point p;
  double r;
  Circle(Point p, double r) : p(p), r(r) {}
  Circle() {}
};

double abs(Point p) {
  return sqrt(p.x * p.x + p.y * p.y);
}
double norm(Point p) {
  return p.x * p.x + p.y * p.y;
}
double dot(Vector a, Vector b) {
  return a.x * b.x + a.y * b.y;
}
double cross(Vector a, Vector b) {
  return a.x * b.y - a.y * b.x;
}
bool isOrthogonal(Vector a, Vector b) {
  return equals(dot(a, b), 0.0);
}
bool isOrthogonal(Point a1, Point a2, Point b1, Point b2) {
  return isOrthogonal(a2 - a1, b2 - b1);
}
bool isOrthogonal(Segment s1, Segment s2) {
  return equals(dot(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);
}
bool isParallel(Vector a, Vector b) {
  return equals(cross(a, b), 0.0);
}
bool isParallel(Point a1, Point a2, Point b1, Point b2) {
  return isParallel(a2 - a1, b2 - b1);
}
bool isParallel(Segment s1, Segment s2) {
  return equals(cross(s1.p2 - s1.p1, s2.p2 - s2.p1), 0.0);
}

Point project(Segment s, Point p) {
  Vector base = s.p2 - s.p1;
  double r = dot(p - s.p1, base) / base.norm();
  return (base * r) + s.p1;
}
Point reflect(Segment s, Point p) {
  return (project(s, p) - p) * 2 + p;
}

double getDistanceLP(Line l, Point p) {
  Vector a, b;
  a = l.p2 - l.p1;
  b = p - l.p1;
  return labs(cross(a, b)) / a.abs();
}
bool intersectLine(Point p1, Point p2, Point p3, Point p4) {
  if (p1.x == p2.x && p3.x == p4.x)
    return false;
  if (p1.x == p2.x && p3.x != p4.x)
    return true;
  if (p1.x != p2.x && p3.x == p4.x)
    return true;

  double k1 = (p2.y - p1.y) / (p2.x - p1.x);
  double k2 = (p4.y - p3.y) / (p4.x - p3.x);
  cout << "k1: " << k1 << endl;
  cout << "k2: " << k2 << endl;
  if (fabs(k1 - k2) < EPS)
    return false;
  else
    return true;
}

double getDistanceSP(Segment s, Point p) {
  if (dot(s.p2 - s.p1, p - s.p1) < 0)
    return abs(p - s.p1);
  if (dot(s.p1 - s.p2, p - s.p2) < 0)
    return abs(p - s.p2);
  return getDistanceLP(s, p);
}
int ccw(Point p0, Point p1, Point p2) {
  Vector a = p1 - p0;
  Vector b = p2 - p0;
  if (cross(a, b) > EPS)
    return COUNTER_CLOCKWISE;
  if (cross(a, b) < -EPS)
    return CLOCKWISE;
  if (dot(a, b) < -EPS)
    return ONLINE_BACK;
  if (b.norm() > a.norm())
    return ONLINE_FRONT;
  return ON_SEGMENT;
}
bool intersect(Point p1, Point p2, Point p3, Point p4) {
  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 &&
          ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);
}
bool intersect(Segment s1, Segment s2) {
  return intersect(s1.p1, s1.p2, s2.p1, s2.p2);
}
double getDistance(Segment s1, Segment s2) {
  if (intersect(s1, s2))
    return 0.0;
  return min(min(getDistanceLP(s2, s1.p1), getDistanceLP(s2, s1.p2)),
             min(getDistanceLP(s1, s2.p1), getDistanceLP(s1, s2.p2)));
}

Point getCrossPoint(Segment s1, Segment s2) {
  Vector base = s2.p2 - s2.p1;
  double d1 = abs(cross(s1.p1 - s2.p1, base));
  double d2 = abs(cross(s1.p2 - s2.p1, base));
  double t = d1 / (d1 + d2);
  return Point(s1.p1.x + (s1.p2 - s1.p1).x * t,
               s1.p1.y + (s1.p2 - s1.p1).y * t);
}

pair<Point, Point> getCrossPoints(Circle c, Line l) {
  Point pr = project(l, c.p);
  Vector e = (l.p2 - l.p1) / abs(l.p2 - l.p1);
  double base = sqrt(c.r * c.r - norm(pr - c.p));

  return make_pair(Point(pr.x + e.x * base, pr.y + e.y * base),
                   Point(pr.x - e.x * base, pr.y - e.y * base));
}
double arg(Vector p) { return atan2(p.y, p.x); }
Vector polar(double a, double r) { return Point(cos(r) * a, sin(r) * a); }

pair<Point, Point> getCrossPoints(Circle c1, Circle c2) {
  double d = abs(c1.p - c2.p);
  double a = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));

  double t = arg(c2.p - c1.p);

  return make_pair(Point(c1.p.x + polar(c1.r, t + a).x, c1.p.y + polar(c1.r, t + a).y),
                   Point(c1.p.x + polar(c1.r, t - a).x, c1.p.y + polar(c1.r, t - a).y));
}

struct Polygon {
  vector<Point> p;
  int n;
  Polygon() {
    n = 0;
    p.clear();
  }
  int size() { return n; }
  void add_point(Point p1) {
    p.push_back(p1);
    n++;
  }
  void push_back(Point p1) {
    p.push_back(p1);
    n++;
  }
  void pop_back() {
    p.pop_back();
    n--;
  }
};

int contains(Polygon g, Point p) {
  /*
  in 2
  on 1
  out 0
*/
  int n = g.size();

  bool x = false;
  for (int i = 0; i < n; i++) {
    Point a = g.p[i] - p, b = g.p[(i + 1) % n] - p;
    // cout << "a:(" << a.x << ',' << a.y << ")" << endl;
    // cout << "b:(" << b.x << ',' << b.y << ")" << endl;
    if (abs(cross(a, b)) < EPS && dot(a, b) < EPS) {
      return 1;
    }
    if (a.y > b.y)
      swap(a, b);
    if (a.y < EPS && EPS < b.y && cross(a, b) > EPS)
      x = !x;
  }
  return (x ? 2 : 0);
}
bool cmpLess(Point p1, Point p2) {
  return (p1.x < p2.x) || (p1.x == p2.x && p1.y < p2.y);
}

Polygon andrewScan(Polygon s) {
  if (s.size() < 3)
    return s;

  sort(s.p.begin(), s.p.end(), cmpLess);

  Polygon u, l;
  u.push_back(s.p[0]);
  u.push_back(s.p[1]);

  l.push_back(s.p[s.size() - 1]);
  l.push_back(s.p[s.size() - 2]);

  //构建凸包上部分
  for (int i = 2; i < s.size(); i++) {
    for (int n = u.size();
         n >= 2 &&
         (ccw(u.p[n - 2], u.p[n - 1], s.p[i]) == COUNTER_CLOCKWISE);
         n--) {
      u.pop_back();
    }
    u.push_back(s.p[i]);
  }

  //构建凸包下部分
  for (int i = s.size() - 3; i >= 0; i--) {
    for (int n = l.size();
         n >= 2 &&
         (ccw(l.p[n - 2], l.p[n - 1], s.p[i]) == COUNTER_CLOCKWISE);
         n--) {
      l.pop_back();
    }
    l.push_back(s.p[i]);
  }

  //按逆时针方向生成凸包的点的序列
  reverse(l.p.begin(), l.p.end());

  for (int i = u.size() - 2; i >= 1; i--) {
    l.push_back(u.p[i]);
  }

  return l;
}

int main() {
  // ios::sync_with_stdio(0);
  // cin.tie(0), cout.tie(0);
  int n;
  Polygon g;
  cin >> n;
  while (n--) {
    Point p;
    cin >> p.x >> p.y;
    g.add_point(p);
  }
  Polygon ans = andrewScan(g);
  cout << ans.size() << endl;
  for (int i = 0; i < ans.size(); i++) {
    cout << ans.p[i].x << ' ' << ans.p[i].y << endl;
  }

  return 0;
}
