#include <bits/stdc++.h>

using namespace std;

vector<int> uf;

struct WeightEdge {
    int weight;
    int s, t;
};

vector<WeightEdge> edge;

int root(int x) {
    if(uf[x] == x) return x;
    return uf[x] = root(uf[x]);
}

void unite(int x, int y) {
    int rx, ry;
    rx = root(x);
    ry = root(y);
    if(rx != ry) uf[rx] = ry;
}

bool same(int x, int y) {
    return root(x) == root(y);
}

int main() {
    int V, E;
    cin >> V >> E;
    for(int i = 0; i < V; ++i) uf.push_back(i);
    for(int i = 0; i < E; ++i) {
        int s, t, w;
        cin >> s >> t >> w;
        edge.push_back({w, s, t});
    }
    sort(edge.begin(), edge.end(), [](auto& a, auto& b){ return a.weight < b.weight;});
    int cost = 0;
    for(auto e : edge) {
        if(same(e.s, e.t)) continue;
        else {
            cost += e.weight;
            unite(e.s, e.t);
        }
    }
    cout << cost << endl;
    return 0;
}
