#include <bits/stdc++.h>
using namespace std;
#define EPS 1e-18
struct Point {
    double x,y;
    Point(double x = 0, double y = 0) : x(x), y(y) {}
    Point operator + (Point p) {return Point(x + p.x, y + p.y);}
    Point operator - (Point p) {return Point(x - p.x, y - p.y);}
    Point operator * (double a) {return Point(x * a, y * a);}
    Point operator / (double a) {return Point(x / a, y / a);}

    double norm() {return x * x + y * y;}
    double abs() {return sqrt(norm());}
    bool operator < (const Point &p) const {return x != p.x ? x < p.x : y < p.y;}
    bool operator == (const Point &p) const {return fabs(x - p.x) > EPS && fabs(y - p.y) < EPS;}
};
struct Segment {
    Point p1, p2;
};

typedef Point Vector;

double Dot(Vector a, Vector b) {
    return a.x * b.x + a.y * b.y;
}

double Cross(Vector A, Vector B) {
    return A.x * B.y - A.y * B.x;
}

inline int sgn(double n) {
    if(fabs(n) < 1e-6) return 0;
    else if(n > 0) return 1;
    else return -1;
}
int cmp(Point a, Point b) {
    return a.y < b.y || (a.y == b.y && a.x < b.x);
}

int main() {
    vector<Point> p;
    int n;
    cin >> n;
    for(int i = 0; i < n; i++) {
        int a,b;
        cin >> a >> b;
        p.push_back(Point(a,b));
    }
    int k = 0;
    sort(p.begin(), p.end());
    vector<Point> ch(2*n);
    for(int i = 0; i < n; ch[k++] = p[i++]) {
        while(k >= 2 && Cross(ch[k-1] - ch[k-2], p[i] - ch[k-1]) < 0) --k;
    }
    for(int i = n-2, t = k+1; i >= 0; ch[k++] = p[i--]) {
        while(k >= t && Cross(ch[k-1] - ch[k-2], p[i] - ch[k-1]) < 0) --k;
    }
    cout << k - 1 << endl;
    for(int i = 0; i < k - 1; i++) {
        cout << ch[i].x << " " << ch[i].y << endl;
    }
}

