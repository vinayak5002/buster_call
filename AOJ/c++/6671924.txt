#include<bits/stdc++.h>
using namespace std;
static const int INF = 0x3f3f3f3f;

int V, E, r;
struct edge{
	int a,b,w;
};

vector<edge> a;

void read_graph() {
	cin >> V >> E >> r;
	int from , to , weight;
	for(int i=1; i<=E; i++){
		cin >> from >> to >> weight;
		edge tmp ; tmp.a = from ; tmp.b = to ; tmp.w = weight;
		a.push_back(tmp);
	}
}



void bellman_ford(){
	vector<int> dis(V,INF);
	dis[r] = 0;
	int x = -1;
	for(int i = 0; i < V; i++){
	 
		for(int j = 0; j < E; j++){
		    if(dis[a[j].a] < INF){
			    if(dis[a[j].b] > dis[a[j].a] + a[j].w){
				    dis[a[j].b] = max(-INF , dis[a[j].a] + a[j].w);
				    x = a[j].b;
			    }
		    }
		}
	}
	
	if(x!=-1) {
	    cout << "NEGATIVE CYCLE\n" ;
	    return ;
	}
	
	for(int i = 0 ; i < V ; i++) {
		if(dis[i] == INF) puts("INF");
		else cout << dis[i] <<"\n";
	}
	
	return ;
}


int main() {
	read_graph();
	bellman_ford();
	return 0;
}
