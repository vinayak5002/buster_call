#include <stdio.h>
#define NIL -1
#define MAX 10000

int setHeight(int);
void setDepth(int, int );
int getSib(int);
void print(int);

typedef struct node{//節点を保存しておく型
  int parent;
  int left;
  int right;
}node_t;

node_t T[MAX];
int H[MAX], D[MAX];

int main(void){
  int n, v, l, r, root;
  scanf("%d", &n);

  for (int i = 0; i < n; i++) {//節点の初期化
    T[i].parent = NIL;
  }

  for (int i = 0; i < n; i++) {
    scanf("%d %d %d", &v, &l, &r);
    T[v].left = l;
    T[v].right = r;
    if( l != NIL ) T[l].parent = v;
    if( r != NIL ) T[r].parent = v;
  }

  for (int i = 0; i < n; i++) {//parentがNILの節点がroot
    if( T[i].parent == NIL ) root = i;
  }

  setHeight(root);
  setDepth(root, 0);

  for (int i = 0; i < n; i++) {
    print(i);
  }
  return 0;
}

int setHeight(int u){
  int h1 = 0, h2 = 0;
  if(T[u].left != NIL){
    h1 = setHeight(T[u].left)+1;
  }
  if(T[u].right != NIL){
    h2 = setHeight(T[u].right)+1;
  }
  return H[u] = ( h1 > h2 ? h1 : h2 );
}

void setDepth(int u, int d){
  if( u == NIL ) return;
  D[u] = d;
  setDepth(T[u].left, d+1);
  setDepth(T[u].right, d+1);
}

int getSib(int u){
  if( T[u].parent == NIL ) return NIL;
  if( T[T[u].parent].left != u && T[T[u].parent].left != NIL ){
    return T[u].left;
  }
  if( T[T[u].parent].right != u && T[T[u].parent].right != NIL ){
    return T[u].right;
  }
  return NIL;
}

void print(int u){
  int deg = 0;
  printf("node %d: ", u);
  printf("parent = %d, ", T[u].parent);
  printf("sibling = %d, ", getSib(u));
  if(T[u].left != NIL) deg++;
  if(T[u].right != NIL) deg++;
  printf("degree = %d, ", deg);
  printf("depth = %d, ", D[u]);
  printf("height = %d, ", H[u]);

  if(T[u].parent == NIL) printf("root\n");
  else if(T[u].left == NIL && T[u].right == NIL) printf("leaf\n");
  else printf("internal node\n");
}

