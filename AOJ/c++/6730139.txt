#include <bits/stdc++.h>
using namespace std;

int partition(vector<pair<char, int>> &a, int p, int r);
void quickSort(vector<pair<char, int>> &a, int p, int r);

void merge(vector<pair<char, int>> &a, int left, int mid, int right);
void mergeSort(vector<pair<char, int>> &a, int left, int right);

int main() {
    int n;
    cin >> n;
    vector<pair<char, int>> a(n), b(n);
    for (int i = 0; i < n; i++) {
        cin >> a.at(i).first >> a.at(i).second;
        b.at(i) = a.at(i);
    }

    quickSort(a, 0, n - 1);
    mergeSort(b, 0, n);

    if (a == b) {
        cout << "Stable" << endl;
    } else {
        cout << "Not stable" << endl;
    }
    for (auto &e : a) {
        cout << e.first << " " << e.second << endl;
    }
}

int partition(vector<pair<char, int>> &a, int p, int r) {
    int x = a.at(r).second;
    int i = p;
    for (int j = p; j < r; j++) {
        if (a.at(j).second <= x) {
            swap(a.at(i), a.at(j));
            i++;
        }
    }
    swap(a.at(i), a.at(r));
    return i;
}

void quickSort(vector<pair<char, int>> &a, int p, int r) {
    int q;
    if (p < r) {
        q = partition(a, p, r);
        quickSort(a, p, q - 1);
        quickSort(a, q + 1, r);
    }
    return;
}

void merge(vector<pair<char, int>> &a, int left, int mid, int right) {
    int n1 = mid - left;
    int n2 = right - mid;
    vector<pair<char, int>> l(n1 + 1), r(n2 + 1);
    for (int i = 0; i < n1; i++) {
        l.at(i) = a.at(left + i);
    }
    for (int i = 0; i < n2; i++) {
        r.at(i) = a.at(mid + i);
    }
    l.at(n1).second = INT_MAX;
    r.at(n2).second = INT_MAX;

    int i = 0, j = 0;
    for (int k = left; k < right; k++) {
        if (r.at(j).second < l.at(i).second) {
            a.at(k) = r.at(j);
            j++;
        } else {
            a.at(k) = l.at(i);
            i++;
        }
    }
    return;
}
void mergeSort(vector<pair<char, int>> &a, int left, int right) {
    if (right - left > 1) {
        int mid = (left + right) / 2;
        mergeSort(a, left, mid);
        mergeSort(a, mid, right);
        merge(a, left, mid, right);
    }
    return;
}
