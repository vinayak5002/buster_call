#include <iostream>
#include <algorithm>
#include <vector>
using ll = long long;
using namespace std;
vector<ll> compress(vector<ll>& a, vector<ll>& b) {
	vector<ll> vals;
	ll n = a.size();
	for (ll i = 0; i < n; i++) {
		vals.push_back(a[i]);
		vals.push_back(b[i]);
	}
	sort(vals.begin(), vals.end());
	vals.erase(unique(vals.begin(), vals.end()), vals.end());
	for (ll i = 0; i < n; i++) {
		a[i] = lower_bound(vals.begin(), vals.end(), a[i]) - vals.begin();
		b[i] = lower_bound(vals.begin(), vals.end(), b[i]) - vals.begin();
	}
	return vals;
}
		
int main() {
	ll n; cin >> n;
	vector<ll> x1(n), y1(n), x2(n), y2(n);
	for (ll i = 0; i < n; i++) cin >> x1[i] >> y1[i] >> x2[i] >> y2[i];
	auto X = compress(x1, x2);
	auto Y = compress(y1, y2);
	ll w = X.size();
	ll h = Y.size();
	vector<vector<ll>> G(w, vector<ll>(h, 0));
	// Imos
	// cout << "ok" << endl;
	for (ll i = 0; i < n; i++) {
		G[x1[i]][y1[i]]++;
		G[x2[i]][y2[i]]++;
		G[x1[i]][y2[i]]--;
		G[x2[i]][y1[i]]--;
	}
	// cout << "ok" << endl;
	for (ll i = 0; i < w; i++) {
		for (ll j = 0; j < h; j++) {
			if (j+1 >= h) continue;
			G[i][j+1] += G[i][j];
		}
	}
	
	for (ll j = 0; j < h; j++) {
		for (ll i = 0; i < w; i++) {
			if (i+1 >= w) continue;
			G[i+1][j] += G[i][j];
		}
	}
	
	ll ans = 0;
	for (ll i = 0; i < w; i++) {		
		for (ll j = 0; j < h; j++) {
			if (i+1 >= w) continue;
			if (j+1 >= h) continue;
			if (!G[i][j]) continue;
			ans += (X[i+1] - X[i]) * (Y[j+1] - Y[j]);
		}
	}
	cout << ans << endl;
}

