#include<bits/stdc++.h>
using namespace std;

#define rep(i,a,b) for(int i=(a),i##end=(b);i<=i##end;++i)
#define per(i,a,b) for(int i=(a),i##end=(b);i>=i##end;--i)

typedef long long ll;
typedef vector<int>vi;

namespace orzjk{
  const int SZ=1e6;
  char buf[SZ],*p1=buf,*p2=buf;
  char nc(){
    return p1==p2&&(p2=(p1=buf)+fread(buf,1,SZ,stdin),p1==p2)?EOF:*p1++;
  }
}
using orzjk::nc;

ll read(){
  ll x=0,f=1;char c=nc();
  while(c<48)c=='-'&&(f=-1),c=nc();
  while(c>47)x=x*10+(c^48),c=nc();
  return x*f;
}

const int P=1e9+7;

const int maxn=1e5+100;
int n,ans;ll x0;
array<ll,5>A[maxn];

int deg[maxn],fa[maxn],dep[maxn],anc[maxn];ll dis[maxn];

namespace tree{

#define mid ((l+r)>>1)

ll dat[maxn];int vsz=1;
void discretize(){
  sort(dat+1,dat+vsz+1);
  vsz=unique(dat+1,dat+vsz+1)-dat-1;
}
int get(ll x){
  int i=lower_bound(dat+1,dat+vsz+1,x)-dat;
  return dat[i]==x?i:0;
}

int tot,rt[maxn],ls[maxn*20],rs[maxn*20],val[maxn*20];
void ins(int&k,int rt,int l,int r,int x,int v){
  k=++tot,ls[k]=ls[rt],rs[k]=rs[rt],val[k]=val[rt];
  if(l==r)val[k]=v;
  else x<=mid?ins(ls[k],ls[rt],l,mid,x,v):ins(rs[k],rs[rt],mid+1,r,x,v);
}
int ask(int k,int l,int r,int x){
  if(l==r)return val[k];
  return x<=mid?ask(ls[k],l,mid,x):ask(rs[k],mid+1,r,x);
}

#undef mid

}

bool vis[maxn];
int cir,bl[maxn],tid[maxn];

struct circle{
  bool sgn;ll all;
  vi nod;vector<ll>D;int sz;
  void push(int u){
    tid[u]=sz++;
    nod.push_back(u);
    D.push_back(all),all+=A[u][3];
  }
  typedef pair<ll,int>pr;
  map<ll,set<pr>>mp;
  void build(){
    if(all<0)sgn=1,all=-all;
    sgn^=1;
    rep(i,0,sz-1){
      int u=nod[i];
      ll v=A[u][0]-D[i];
      if(!all){
        mp[v].insert({v,i});continue;
      }
      if(sgn)v=-v;
      mp[(v%all+all)%all].insert({v,i});
    }
  }
}C[maxn];

void topo(){
  static int Q[maxn];
  int l=1,r=0;
  rep(i,1,n)fa[i]=A[i][4];
  rep(i,1,n)if(!deg[i])Q[++r]=i;
  while(l<=r){
    int u=Q[l++],v=fa[u];
    if(v<=n&&!--deg[v])Q[++r]=v;
  }
  rep(i,1,n)if(deg[i])Q[++r]=i,fa[i]=0;
  Q[++r]=n+1;
  assert(r<=n+1);
  per(i,r,1){
    int u=Q[i];
    if(fa[u])anc[u]=anc[fa[u]],dep[u]=dep[fa[u]]+1,dis[u]=dis[fa[u]]+A[u][3];
    else anc[u]=u;
    tree::dat[++tree::vsz]=dis[u]+A[u][0];
  }
  tree::discretize();
  per(i,r,1){
    int u=Q[i];
    if(u<=n)tree::ins(tree::rt[u],tree::rt[fa[u]],1,tree::vsz,tree::get(dis[u]+A[u][0]),u);
  }
  rep(u,1,n)if(deg[u]&&!vis[u]){
    ++cir;
    int cur=u;
    do{
      vis[cur]=1;
      bl[cur]=cir;
      C[cir].push(cur);
      cur=A[cur][4];
    }while(cur!=u);
    C[cir].build();
  }
}

int main(){
  cin>>n>>x0;
  rep(i,1,n){
    rep(j,0,4)A[i][j]=read();
    deg[A[i][4]]++;
  }
  topo();
  int u=1;
  memset(vis,0,sizeof vis);
  while(1){
    auto trans=[&](int v){
      if(vis[v])puts("-1"),exit(0);
      vis[v]=1,u=A[v][2],x0=A[v][0]+A[v][1],ans=(ans+1)%P;
    };
    {
      int v=tree::get(x0+dis[u]);
      if(v)v=tree::ask(tree::rt[u],1,tree::vsz,v);
      if(v){
        (ans+=dep[u]-dep[v])%=P,x0+=dis[u]-dis[v];
        trans(v);
        continue;
      }
      (ans+=dep[u])%=P,x0+=dis[u],u=anc[u];
    }
    if(u>n)break;
    {
      const auto&C=::C[bl[u]];
      int s=tid[u];
      ll o=x0-C.D[s];
      if(!C.all){
        auto it=C.mp.find(o);
        if(it==C.mp.end())puts("-1"),exit(0);
        const auto&S=it->second;
        auto p=S.lower_bound({o,s});
        int v=C.nod[(p==S.end()?S.begin():p)->second];
        x0+=C.D[tid[v]]-C.D[s];
        (ans+=(tid[v]<s?C.sz:0)+tid[v]-s)%=P;
        trans(v);
        continue;
      }
      if(C.sgn)o=-o;
      auto it=C.mp.find((o%C.all+C.all)%C.all);
      if(it==C.mp.end())puts("-1"),exit(0);
      const auto&S=it->second;
      auto p=S.lower_bound({o,s});
      if(p==S.end()||p->first>o){
        p=S.lower_bound({o,0});
        if(p==S.begin())puts("-1"),exit(0);
        --p;
        p=S.lower_bound({p->first,0});
      }
      int v=C.nod[p->second];
      ans=(ans+(o-p->first)/C.all%P*C.sz+tid[v]-s+P)%P;
      trans(v);
    }
  }
  cout<<ans<<endl;
  return 0;
}
