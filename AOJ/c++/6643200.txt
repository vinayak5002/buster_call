#include <bits/stdc++.h>

using namespace std;

struct LowestCommonAncestor{
    int n;
    const vector<vector<int> > g;
    vector<vector<int> > table;
    vector<int> depth;
    int logk;

    LowestCommonAncestor(const vector<vector<int> > &G) : g(G){
        n = g.size();
        logk = 32 - __builtin_clz(g.size());
        table.assign(logk, vector<int>(n, -1));
        depth.assign(n, -1);
        build();
    }

    void build(int s = 0, bool isforest = false){
        if(isforest){
            for(int i = 0; i < n; ++i){
                if(depth[i] == -1){
                    dfs(i, -1, 0);
                }
            }
        }else{
            dfs(s, -1, 0);
        }
        for(int k = 0; k < logk - 1; ++k){
            for(int i = 1; i <= n - 1; ++i){
                if(table[k][i] == -1){
                    table[k + 1][i] = -1;
                }else{
                    table[k + 1][i] = table[k][table[k][i]];
                }
            }
        }
    }

    void dfs(int now, int pre, int dep){
        table[0][now] = pre;
        depth[now] = dep;
        for(const auto& to: g[now]){
            if(to != pre){
                dfs(to, now, dep + 1);
            }
        }
    }

    int query(int u, int v){
        if(depth[u] < depth[v]) swap(u, v);
        for(int k = logk - 1; k >= 0; --k){
            if(depth[u] - depth[v] & 1 << k){
                u = table[k][u];
            }
        }
        if(u == v) return (u);
        for(int k = logk - 1; k >= 0; --k){
            if(table[k][u] != table[k][v]){
                u = table[k][u];
                v = table[k][v];
            }
        }
        return (table[0][u]);
    }

    int dist(int u, int v){
        return (depth[u] + depth[v] - 2 * depth[query(u, v)]);
    }
    int dist(int u){
        return (depth[u]);
    }
};

struct AuxiliaryTree {
    typedef vector<vector<int> > Graph;

    const Graph graph;
    LowestCommonAncestor lca;

    int n, cnt;
    vector<int> pre_order, vec;

    AuxiliaryTree(const Graph &G) : lca(G), graph(G) {
        n = graph.size();
        pre_order.resize(n);
        cnt = 0;
        dfs(0, -1);
    }

    void dfs(int cur, int par){
        pre_order[cur] = cnt++;
        for(const auto &e: graph[cur]){
            if(par != e){
                dfs(e, cur);
            }
        }
        return;
    }

    // {parent, child}
    vector<pair<int, int> > query(vector<int> &v){
        vector<pair<int, int> > ret;
        int siz = v.size();
        sort(v.begin(), v.end(), [&](int a, int b){ return (pre_order[a] < pre_order[b]); });
        for(int i = 0; i < siz - 1; ++i){
            v.emplace_back(lca.query(v[i], v[i + 1]));
        }
        sort(v.begin(), v.end(), [&](int a, int b){ return (pre_order[a] < pre_order[b]); });
        v.erase(unique(v.begin(), v.end()), v.end());
        siz = v.size();
        for(int i = 0; i < siz - 1; ++i){
            assert(lca.dist(lca.query(v[i], v[i + 1])) < lca.dist(v[i + 1]));
            ret.emplace_back(lca.query(v[i], v[i + 1]), v[i + 1]);
        }
        return (ret);
    }
};

signed main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    cout.setf(ios_base::fixed);
    cout.precision(10);

    int n;
    cin >> n;

    vector<int> c(n); 
    vector<vector<int> > graph(n);
    vector<vector<int> > colors(n);

    for(int i = 0; i < n; ++i){
        cin >> c[i];
        --c[i];
        colors[c[i]].emplace_back(i);
    }

    for(int i = 0; i < n-1; ++i){
        int s, t;
        cin >> s >> t;
        --s, --t;
        graph[s].emplace_back(t);
        graph[t].emplace_back(s);
    }

    AuxiliaryTree aux(graph);

    vector<int> dist(n), pre(n);
    vector<int> res(n, INT_MAX);
    vector<vector<int> > compressed(n);

    for(int i = 0; i < n; ++i){
        if(colors[i].empty()) continue;
        vector<int> nodes = colors[i];
        auto edges = aux.query(nodes);

        for (auto [u, v] : edges) {
            compressed[u].emplace_back(v);
            compressed[v].emplace_back(u);
        }

        priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > pq;
        for(auto e : nodes){
            dist[e] = INT_MAX;
            pre[e] = -1;
        }
        for(auto e : colors[i]){
            dist[e] = 0;
            pre[e] = e;
            pq.emplace(0, e);
        }

        while(!pq.empty()){
            auto [now_cost, now_node] = pq.top();
            pq.pop();
            if(dist[now_node] < now_cost) continue;
            for(auto next_node : compressed[now_node]){
                int dis = abs(aux.lca.dist(now_node) - aux.lca.dist(next_node));
                if(dist[now_node] + dis < dist[next_node]){
                    dist[next_node] = dist[now_node] + dis;
                    pre[next_node] = pre[now_node];
                    pq.emplace(dist[next_node], next_node);
                }
            }
        }

        for(auto u : nodes){
            for(auto v : compressed[u]){
                u = pre[u];
                v = pre[v];
                if(u == v) continue;
                int dis = aux.lca.dist(u, v);
                if(dis < res[u]){
                    res[u] = dis;
                }
                if(dis < res[v]){
                    res[v] = dis;
                }
            }
        }
        for (auto [u, v] : edges) {
            compressed[u].clear();
            compressed[v].clear();
        }
    }

    for(auto e : res){
        cout << e << '\n';
    }

    return 0;
}

