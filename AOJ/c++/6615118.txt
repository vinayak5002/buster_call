#include <iostream>

using namespace std;

// Matrix-Chain Multiplication problem
// (D[0],D[1])行列,..,(D[i-1],D[i])行列, (D[i],D[i+1])行列,..,(D[n-1],D[i])行列
// i 番目で区切ったときの積の総数を再帰的に求め、その最小値を返す。
// 速度が致命的に遅い。
long mcm(int D[], int n)
{
    long m = 0;
    if (n == 1)
	return 0;
    if (n == 2)
	return D[0] * D[1] * D[2];
    if (n == 3) 
	return min(D[0] * D[1] * D[2] + D[0] * D[2] * D[3],
		   D[0] * D[1] * D[3] + D[1] * D[2] * D[3]);
    
    m = mcm(D, 1) + mcm(D + 1, n - 1) + D[0] * D[1] * D[n];
    for (int i = 2; i < n; i++)  
	m = min(m, mcm(D, i) + mcm(D + i, n - i) + D[0] * D[i] * D[n]);
    return m;
}

#define MAX_n  100
// (D[i],D[i+1])行列,..,(D[j-1],D[j])行列の MCM 問題の解
long T[MAX_n + 1][MAX_n + 1]; 

long mcm(int D[], int a, int b)
{
    if (b - a == 1)
	return 0;
    if (b - a == 2)
	return T[a][b] = D[a] * D[a+1] * D[b];
    long val;
    for(int c = a + 1; c < b ; c++) {
	if (T[a][c] == 0)
	    T[a][c] = mcm(D, a, c);
	if (T[c][b] == 0)
 	    T[c][b] = mcm(D, c, b);
	if (c == a + 1)
	    val = T[a][c] + T[c][b] + D[a] * D[b] * D[c];
	else
	    val = min(val, T[a][c] + T[c][b] + D[a] * D[b] * D[c]);
    }
    return T[a][b] = val;
}
 
int main()
{
    int n;
    cin >> n;
    int D[n+1];
    for (int i = 0; i < n; i++) 
	cin >> D[i] >> D[i+1];

#ifdef CLOCK    
    clock_t start_clock = clock();
#endif
    
    cout << mcm(D, 0, n) << endl;
    
#ifdef CLOCK
    clock_t end_clock = clock();    
    cout << 1000 * (end_clock - start_clock) / CLOCKS_PER_SEC << " ms"
	 << endl;
#endif
    return 0;
}

