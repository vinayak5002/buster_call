#include<iostream>
#include<algorithm>
#include<cmath>
#include<cstdio>
using namespace std;

// -------------------- 通用基本常数 --------------------

const double eps = 1e-8;
const double pi = acos(-1.0);

// -------------------- 二维点（向量）类 --------------------

struct Point {
    double x, y;
    Point() {}
    Point(double x, double y) : x(x), y(y) {}
    // 输入一个点
    void input() {
        scanf("%lf%lf", &x, &y);
    }
    friend Point operator + (const Point& a, const Point& b) {
        return Point(a.x + b.x, a.y + b.y);
    }
    friend Point operator - (const Point& a, const Point& b) {
        return Point(a.x - b.x, a.y - b.y);
    }
    friend Point operator * (const Point& a, const double& b) {
        return Point(a.x * b, a.y * b);
    }
    friend Point operator * (const double& a, const Point& b) {
        return Point(a * b.x, a * b.y);
    }
    friend Point operator / (const Point& a, const double& b) {
        return Point(a.x / b, a.y / b);
    }
};

// -------------------- 向量与向量运算 --------------------

// 计算两个向量的叉积
double det(const Point& a, const Point& b) {
    return a.x * b.y - a.y * b.x;
}

// 计算两个向量的点积
double dot(const Point& a, const Point& b) {
    return a.x * b.x + a.y * b.y;
}


// -------------------- 线段（直线）类 --------------------

struct Line
{
    Point a, b;
    Line() {};
    Line(Point _a, Point _b)
        :a(_a), b(_b) {};
};

int q;

bool check(Line a, Line b) {
	bool flag = 1;
	if(min(a.a.x,a.b.x) > max(b.a.x,b.b.x) || min(b.a.x,b.b.x) > max(a.a.x,a.b.x))
		flag = 0;
	if(min(a.a.y,a.b.y) > max(b.a.y,b.b.y) || min(b.a.y,b.b.y) > max(a.a.y,a.b.y))
		flag = 0;
	if(!flag)return flag;
	Point p0 = a.a,p1 = a.b,p2 = b.a, p3 = b.b;
	if((det(p0-p2,p0-p3) * det(p1-p2,p1-p3) <= 0) && (det(p2-p0,p2-p1) * det(p3-p0,p3-p1) <= 0))
		return 1;
	return 0;
}

int main() {
	cin>>q;
	while(q--) {
		Point a,b,c,d;
		a.input(),b.input(),c.input(),d.input();
		Line l1 = Line(a,b),l2 = Line(c,d);
		cout<<check(l1,l2)<<endl;
	}
}
