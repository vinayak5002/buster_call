#include <vector>
#include <iostream>
#include <tuple>
#include <optional>
#include <algorithm>

typedef std::tuple<size_t, size_t, unsigned long> edge_t;

bool operator<(const edge_t &a, const edge_t &b) { return std::get<2>(a) < std::get<2>(b);  }


// // C++ program for Merge Sort
// #include <iostream>
// using namespace std;
 
// // Merges two subarrays of array[].
// // First subarray is arr[begin..mid]
// // Second subarray is arr[mid+1..end]
// void merge(std::vector<edge_t> array, int const left, int const mid, int const right)
// {
//     auto const subArrayOne = mid - left + 1;
//     auto const subArrayTwo = right - mid;
 
//     // Create temp arrays
//     auto leftArray = std::vector<edge_t>(subArrayOne),
//          rightArray = std::vector<edge_t>(subArrayTwo);
 
//     // Copy data to temp arrays leftArray[] and rightArray[]
//     for (auto i = 0; i < subArrayOne; i++)
//         leftArray[i] = array[left + i];
//     for (auto j = 0; j < subArrayTwo; j++)
//         rightArray[j] = array[mid + 1 + j];
 
//     auto indexOfSubArrayOne = 0, // Initial index of first sub-array
//         indexOfSubArrayTwo = 0; // Initial index of second sub-array
//     int indexOfMergedArray = left; // Initial index of merged array
 
//     // Merge the temp arrays back into array[left..right]
//     while (indexOfSubArrayOne < subArrayOne && indexOfSubArrayTwo < subArrayTwo) {
//         if (leftArray[indexOfSubArrayOne] <= rightArray[indexOfSubArrayTwo]) {
//             array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];
//             indexOfSubArrayOne++;
//         }
//         else {
//             array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];
//             indexOfSubArrayTwo++;
//         }
//         indexOfMergedArray++;
//     }
//     // Copy the remaining elements of
//     // left[], if there are any
//     while (indexOfSubArrayOne < subArrayOne) {
//         array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];
//         indexOfSubArrayOne++;
//         indexOfMergedArray++;
//     }
//     // Copy the remaining elements of
//     // right[], if there are any
//     while (indexOfSubArrayTwo < subArrayTwo) {
//         array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];
//         indexOfSubArrayTwo++;
//         indexOfMergedArray++;
//     }
// }
 
// // begin is for left index and end is
// // right index of the sub-array
// // of arr to be sorted */
// void mergeSort(std::vector<edge_t> array, int const begin, int const end)
// {
//     if (begin >= end)
//         return; // Returns recursively
 
//     auto mid = begin + (end - begin) / 2;
//     mergeSort(array, begin, mid);
//     mergeSort(array, mid + 1, end);
//     merge(array, begin, mid, end);
// }

namespace kruskal {
    namespace disjoint_set {
        class DisjointSet {
            private:
                std::vector<size_t> parent;
                std::vector<size_t> rank;
            public:
                DisjointSet(size_t n);
                size_t find(size_t x);
                bool unite(size_t x, size_t y);
                bool same(size_t x, size_t y);
        };

        DisjointSet::DisjointSet(size_t n) {
            parent = std::vector<size_t>(n);
            for (size_t i = 0; i < n; ++i) {
                parent[i] = i;
            }
            rank = std::vector<size_t>(n, 0);
        }

        size_t DisjointSet::find(size_t x) {
            if (parent[x] == x) {
                return x;
            } else {
                auto represent = x;
                do {
                    represent = parent[x];
                } while (parent[represent] != represent);
                parent[x] = represent;
                return represent;
            }
        }

        bool DisjointSet::unite(size_t x, size_t y) {
            auto x_par = this->find(x);
            auto y_par = this->find(y);
            if (x_par != y_par) {
                if (rank[x_par] < rank[y_par]) {
                    parent[x_par] = y_par;
                } else {
                    parent[y_par] = x_par;
                    if (rank[x_par] == rank[y_par]) {
                        rank[x_par] += 1;
                    }
                }
            }
            return x_par != y_par;
        }

        bool DisjointSet::same(size_t x, size_t y) {
            return this->find(x) == this->find(y);
        }
    }

    class Kruskal {
        private:
            size_t vertices;
            std::vector<std::tuple<size_t, size_t, unsigned long>> edges;
        public:
            Kruskal(size_t vertices);
            void add_edge(size_t u, size_t v, unsigned long wight);
            std::optional<unsigned long> minimum_spanning_tree();
    };

    Kruskal::Kruskal(size_t vertices) : vertices(vertices) {
        edges = std::vector<std::tuple<size_t, size_t, unsigned long>>();
    }

    void Kruskal::add_edge(size_t u, size_t v, unsigned long weight) {
        edges.push_back(std::make_tuple(u, v, weight));
    }

    std::optional<unsigned long> Kruskal::minimum_spanning_tree() {
        auto uft = disjoint_set::DisjointSet(vertices);
        // std::sort(edges.begin(), edges.end(), [](auto const &a, auto const &b) { return std::get<2>(a) < std::get<2>(b); });
        std::sort(edges.begin(), edges.end());
        unsigned long sum = 0;
        unsigned long count = 0;
        for (const auto &e : edges) {
            auto u = std::get<0>(e);
            auto v = std::get<1>(e);
            auto w = std::get<2>(e);

            if (uft.same(u, v)) {
                continue;
            }

            uft.unite(u, v);
            sum += w;
            count += 1;
            if (count == vertices - 1) {
                break;
            }
        }
        if (count == vertices -1) {
            return std::make_optional(sum);
        } else {
            return std::nullopt;
        }
    }
}

int main() {
    using namespace std;

    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    size_t n, m;
    size_t u, v;
    unsigned long w;
    cin >> n >> m;

    auto k = kruskal::Kruskal(n);
    for (size_t i = 0; i < m; ++i) {
        cin >> u >> v >> w;
        k.add_edge(u, v, w);
    }

    auto tree = k.minimum_spanning_tree();
    if (tree) {
        cout << tree.value() << endl;
    }
}
