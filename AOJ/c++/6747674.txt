#include <stdio.h>

#define N 100
#define WHITE 0
#define GRAY 1
#define BLACK 2

void initialize_adj( void );
void get_adj( void );
void dfs( void );
void dfs_visit( int );
void print_timestump( void );

int adj[N][N], color[N], d[N], f[N], n, tt;

int main( void ){
  scanf("%d", &n);
  int d[n], f[n];

  initialize_adj();
  get_adj();
  dfs();
  print_timestump();
  for (int i = 0; i < i; i++) {
    printf("%d %d %d\n", i+1, d[i], f[i]);
  }
  return 0;
}

void initialize_adj( void ){
  //配列adjの初期化
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      adj[i][j] = 0;
    }
  }
}

void get_adj( void ){
  int u, k, temp;
  for (int i = 0; i < n; i++) {
    scanf("%d", &u);
    scanf("%d", &k);
    for (int j = 0; j < k; j++) {
      scanf("%d", &temp);
      adj[i][temp-1] = 1;
    }
  }
}

void dfs( void ){
  for (int u = 0; u < n; u++) { color[u] = WHITE; }
  tt = 0;

  for (int u = 0; u < n; u++) {
    if( color[u] == WHITE ) { dfs_visit(u); }
  }
}

void dfs_visit( int u ){
  color[u] = GRAY;
  d[u] = ++tt;
  for (int v = 0; v < n; v++) {
    if( adj[u][v] == 0 ) { continue; }
    if( color[v] == WHITE ) { dfs_visit(v); }
  }
  color[u] = BLACK;
  f[u] = ++tt;
}

void print_timestump( void ){
  for (int i = 0; i < n; i++) {
    printf("%d %d %d\n", i+1, d[i], f[i]);
  }
}

