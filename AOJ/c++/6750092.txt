#include <bits/stdc++.h>
using namespace std;
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define reps(i,start,end) for(int i = start; i < (int)(end); i++)
#define ll long long
#define print(t) cout << t << endl
#define all(a)  (a).begin(),(a).end()
// << std::fixed << std::setprecision(0)
const ll INF = 1LL << 60;

template<class T> void chmin(T& a, T b){
 if(a > b){
  a = b;
 }
}

template<class T> void chmax(T& a, T b){
 if(a < b){
  a = b;
 }
}

template<class Tp>
bool zero (const Tp &x) {
    return x == 0;
}

template<class Tp, class... Args>
bool zero (const Tp &x, const Args& ...args) {
    return zero(x) and zero(args...);
}

bool isFind(vector<string> u, string s){
  bool isThere = false;
  for(auto& e:u){
    if(e == s){
      isThere = true;
    }
  }
  return isThere;
}

int main(){
  while(true){
    int n; cin >> n;
    if(zero(n))break;
    bool isUpping = true;
    bool rUp = false;
    bool lUp =false;

    int cnt = 0;


    rep(i,n){
      string s;cin >> s;
      // 入力によって足の状態更新
      if(s == "lu")lUp = true;
      if(s == "ru")rUp = true;
      if(s == "ld")lUp = false;
      if(s == "rd")rUp = false;

      // upping trueなら両方上になったらカウントする

      if(isUpping){
        if(lUp == true && rUp == true){
          cnt++;
          isUpping = false;
        }
      }else{
        if(lUp == false && rUp == false){
          cnt++;
          isUpping = true;
        }
      }

    }
    cout << cnt << endl;
  }
}

