#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <map>
#include <set>
using namespace std;
using ll = long long;

int w, h;
vector<vector<char>> m;
vector<vector<int>> grp;
set<int> ans;
void dfs(int i, int j, int c) {
    if (i < 0 || j < 0) return;
    if (i >= h || j >= w) return;
    if (grp[i][j] != -1) return;
    if (m[i][j] == '0') return;
    grp[i][j] = c;
    ans.insert(c);
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            dfs(i+x, j+y, c);
        }
    }
}

int main() {
    while (true) {
        ans.clear();
        cin >> w >> h;
        if (w == 0 && h == 0) break;
        m.assign(h, vector<char>(w));
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                cin >> m[i][j];
            }
        }
        grp.assign(h, vector<int>(w, -1));

        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                dfs(i, j, i*w+j);
            }
        }
        cout << ans.size() << endl;
    }
    return 0;
}

