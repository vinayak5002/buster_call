#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

#define rep(i, a, b) for(ll i = (ll)a; i < (ll)b; i++)
#define irep(i, v) for(auto i = (v).begin(); i != (v).end(); i++)
#define ALL(v) (v).begin(), (v).end()
#define SZ(v) (ll)(v).size()

const ll INF = 1e18;
const ld EPS = 1e-10;
const ll MOD = 1e9 + 7;
const ld PI = M_PI;

template<class T>
class Treap{
  private:
    struct Node{
      T key; 
      int pri;
      Node *lef, *rig;
    };
    Node *NIL, *root;
  public:
    Treap(){
      NIL = NULL;
      root = NULL;
    }

    Node *create(T key, int pri, Node* l, Node* r){
      Node *newn = (Node *)malloc(sizeof(Node));
      newn->key = key;
      newn->pri = pri;
      newn->lef = l;
      newn->rig = r;
      return newn;
    }

    Node *right_rotate(Node *t){
      Node *s = t->lef;
      t->lef = s->rig;
      s->rig = t;
      return s;
    }

    Node *left_rotate(Node *t){
      Node *s = t->rig;
      t->rig = s->lef;
      s->lef = t;
      return s;
    }

    Node *insert_node(Node *t, T key, int pri){
      if(t == NIL) return create(key, pri, NIL, NIL);
      if(key == t->key) return t;

      if(key < t->key){
        t->lef = insert_node(t->lef, key, pri);
        if(t->pri < t->lef->pri){
          t = right_rotate(t);
        }
      }
      else{
        t->rig = insert_node(t->rig, key, pri);
        if(t->pri < t->rig->pri){
          t = left_rotate(t);
        }
      }
      return t;
    }

    void insert(T key, int pri){
      root = insert_node(root, key, pri);
    }

    Node *find_node(Node *t, T k){
      if(t == NIL) return NIL;
      if(t->key == k) return t;
      if(k < t->key) return find_node(t->lef,k);
      else return find_node(t->rig,k);
    }

    bool find(T k){
      Node *t = find_node(root,k);
      if(t == NIL) return false;
      else return true;
    }

    Node *remove_node(Node *t, T key){
      if(t == NIL) return NIL;
      if(key < t->key){
        t->lef = remove_node(t->lef,key);
      }
      else if(key > t->key){
        t->rig = remove_node(t->rig,key);
      }
      else{
        return remove_rot(t,key);
      }
      return t;
    }

    Node *remove_rot(Node *t, T key){
      if(t->lef == NIL && t->rig == NIL){
        return NIL;
      }
      else if(t->lef == NIL){
        t = left_rotate(t);
      }
      else if(t->rig == NIL){
        t = right_rotate(t);
      }
      else{
        if(t->lef->pri < t->rig->pri){
          t = left_rotate(t);
        }
        else{
          t = right_rotate(t);
        }
      }
      return remove_node(t,key);
    }

    void remove(T key){
      root = remove_node(root,key);
    }


    void pmid(Node *t){
      if(t == NIL) return;
      pmid(t->lef);
      cout << " " << t->key;
      pmid(t->rig);
    }

    void ppre(Node *t){
      if(t == NIL) return;
      cout << " " << t->key;
      ppre(t->lef);
      ppre(t->rig);
    }

    void pr(){
      pmid(root);
      cout <<endl;
      ppre(root);
      cout <<endl;
    }
};



int main(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  srand((unsigned)time(NULL));
  cout << fixed << setprecision(20);

  Treap<ll> tr;

  ll q;
  cin >> q;
  while(q--){
      string s;
      cin >> s;
      if(s == "insert"){
          ll key, p;
          cin >> key >> p;
          tr.insert(key, p);
      }
      if(s == "find"){
          ll key;
          cin >> key;
          if(tr.find(key)) cout << "yes" << endl;
          else cout << "no" << endl;
      }
      if(s == "delete"){
          ll key;
          cin >> key;
          tr.remove(key);
      }
      if(s == "print"){
          tr.pr();
      }
  }



  return 0;
}
