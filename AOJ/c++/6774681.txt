#include<stdio.h>
#include<stdlib.h>

#define MX 50

typedef struct {
  int row;          
  int col;          
} Coord;

int dfs_r (int M[][MX+2], int w, int h, Coord current);
int solve (int W, int H);

int main () {
  while (1) {
    int w, h;

    scanf("%d%d", &w, &h);
    if (w==0 && h==0) break;
    printf("%d\n", solve(w,h));
  }
  return 0;
}

int dfs_r (int M[][MX+2], int w, int h, Coord current) {
  int c = 0;  
  int D1[]={-1,0,1}; int D2[]={-1,0,1};
  for(int d1=0; d1<3; d1++) {
     for(int d2=0; d2<3; d2++){
        Coord nc = current;             
        nc.row+=D1[d1]; nc.col+=D2[d2];
        if(M[nc.row][nc.col]==1) { 
           M[nc.row][nc.col]=0; 
           c += dfs_r(M, w, h, nc); 
        }
     }
  }
  return 1;
}

int solve (int w, int h) {
  int M[h+2][MX+2];
  Coord start;
  int island = 0;
  int i, j;
  for(i=0; i<=w+1; i++) { M[0][i] = 0; M[h+1][i] = 0; }
  for(i=1; i<=h; i++) { M[i][0] = 0; M[i][w+1] = 0; }
  for(i=1; i<=h; i++) {
    for (j=1; j<=w; j++) {
      scanf(" %d", &M[i][j]);
    }
  }

  for(i=1; i<=h; i++){
     for(j=1; j<=w; j++){
        if(M[i][j] == 1){
           start.row = i;
           start.col = j;
           island += dfs_r(M, w, h, start);
        }
     }
  }
  return island;
}

