#include <stdio.h>

void insert_tree( int*, int* );
void print_tree( int*, int* );
int get_parent( int*, int*, int );
int get_left( int*, int*, int );
int get_right( int*, int*, int );


#define NF -1

int main( void ){
  int H;

  scanf("%d", &H);

  int Data[H+1];

  insert_tree( Data, &H );

  print_tree( Data, &H );

  return 0;
}

void insert_tree( int *Data, int *H ){
  int x;
  for (int i = 1; i < *H+1; i++) {
    scanf("%d", &x);
    Data[i] = x;
  }
}

void print_tree( int *Data, int *H ){
  int p, l, r;
  for (int i = 1; i < (*H+1); i++) {
    printf("node %d: key = %d, ", i, Data[i]);
    p = get_parent( Data, H, i );
    l = get_left( Data, H, i );
    r = get_right( Data, H, i );
    if( p != NF ) { printf("parent key = %d, ", p); }
    if( l != NF ) {
      printf("left key = %d, ", l);
      if( r != NF ) { printf("right key = %d, \n", r); }
      else printf("\n");
    }
    else printf("\n");
  }
}

int get_parent( int *Data, int *H, int i){
  if( i != 1 ){
    return Data[i/2];
  }
  else return NF;
}

int get_left( int *Data, int *H, int i ){
  if( 2*i <= (*H) ){
    return Data[2*i];
  }
  else return NF;
}

int get_right( int *Data, int *H, int i ){
  if( 2*i+1 <= (*H) ){
    return Data[2*i+1];
  }
  else return NF;
}

