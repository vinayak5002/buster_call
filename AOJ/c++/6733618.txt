#include<iostream>
#include<vector>
#include<algorithm>
#include<map>
#include<set>
#include<cmath>
#include<queue>
#include<stack>
#include<string>

#define rep(i,n) for(int i=0;i<(n);i++)

using ll = long long;
using namespace std;

vector<int> topological_sort(vector<vector<int>> &G, vector<int> &indegree, int V) {
	// トポロジカルソートを記録する配列
	vector<int> sorted_vertices;

	// 入次数が0の頂点を発見したら、処理待ち頂点としてキューに追加する
	queue<int> que;
	rep(i, V) {
		if (indegree[i] == 0) que.push(i);
	}

	// キューが空になるまで以下の1~3を繰り返す
	// 1. 入次数0の頂点vを発見する
	// 2. 頂点vを配列の末尾に追加する
	// 3. 有向グラフから頂点vと、その頂点から出ている辺をすべて削除する
	while (!que.empty()) {
		int v = que.front();
		que.pop();

		// その頂点と隣接している頂点の入次数を減らし、0になればキューに追加
		for (auto& u : G[v]) {
			indegree[u]--;
			if (indegree[u] == 0) que.push(u);
		}

		// 頂点vを配列の末尾に追加する
		sorted_vertices.push_back(v);
	}

	return sorted_vertices;

}

int main() {
	int V, E;
	cin >> V >> E;

	vector<vector<int>> G(V);
	vector<int> indegree(V); //頂点の入次数を記録する配列
	rep(i, E) {
		int u, v;
		cin >> u >> v;
		G[u].push_back(v);
		indegree[v] += 1;
	}

	vector<int> ans = topological_sort(G, indegree, V);

	int m = ans.size();
	rep(i, m) {
		cout << ans[i] << endl;
	}


	return 0;
}
