#include <bits/stdc++.h>
using namespace std;

using ll = long long;
using db = double;
using str = string;

using pi = pair<int,int>;
using pl = pair<ll,ll>;
using pd = pair<db,db>;

using vi = vector<int>;
using vb = vector<bool>;
using vl = vector<ll>;
using vd = vector<db>;
using vs = vector<str>;
using vpi = vector<pi>;
using vpl = vector<pl>;
using vpd = vector<pd>;

#define tcT template<class T
#define tcTU tcT, class U
tcT> using V = vector<T>;
tcT, size_t SZ> using AR = array<T,SZ>;
tcT> using PR = pair<T,T>;
// pairs
#define mp make_pair
#define f first
#define s second

// vectors
// size(x), rbegin(x), rend(x) need C++17
#define sz(x) int((x).size())
#define bg(x) begin(x)
#define all(x) bg(x), end(x)
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))
#define rsz resize
#define ins insert
#define ft front()
#define bk back()
#define pb push_back
#define eb emplace_back
#define pf push_front
// #define rtn return

#define lb lower_bound
#define ub upper_bound

// loops
#define FOR(i,a,b) for (ll (i) = (a); (i) < (b); ++(i))
#define REP(i,a) FOR(i,0,a)
#define ROF(i,a,b) for (ll (i) = (b)-1; (i) >= (a); --(i))
#define PER(i,a) ROF(i,0,a)
#define rep(a) REP(_,a)
#define each(a,x) for (auto& a: x)
#define bit_and(m, op) (m & (1 << op))
#define bit_or(m, op) (m | (1 << op))
#define bit_xor(m, i) (m ^ (1 << i))

const int MOD = 1e9+7;
const int MX = 2e5+5;
const ll INF = 1e18;
const db PI = acos((db)-1);

const int max_val = 1001;

int main() 
{
    int t, v, d, beg, end, w;
    cin >> v >> d;

    int adjacency[v][v];
    FOR (i, 0, v) {
        FOR (j, 0, v) {
            if (i != j) adjacency[i][j] = max_val;
            else adjacency[i][j] = 0;
        }
    }

    while (d--) {
        cin >> beg >> end >> w;
        adjacency[beg][end] = w;
    }

    FOR (i, 0, v) {
        FOR (j, 0, v) {
            cout << adjacency[i][j] << " ";
        }
        cout << endl;
    }
    cout << "-------------------\n";

    int dp[v][1 << v];

    ROF (m, 0, (1 << v)) {
        FOR (u, 0, v) {
            if (m == (1 << v) - 1) {
                dp[u][m] = adjacency[u][0];
                continue;
            }

            dp[u][m] = max_val;

            FOR (op, 0, v) {
                if (bit_and(m, op) == 0 && adjacency[u][op] != max_val) {
                    dp[u][m] = min(dp[u][m], adjacency[u][op]+dp[op][m | (1 << op)]);
                }
            }
        }
    }

    FOR (i, 0, v) {
        FOR (j, 0, 1 << v) {
            cout << dp[i][j] << " ";
        }
        cout << endl;
    }  


    if (dp[0][0] == max_val) cout << "-1";
    else cout << dp[0][0];
}
