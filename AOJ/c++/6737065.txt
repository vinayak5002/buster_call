#include <bits/extc++.h>

using namespace std;

#define rep(i,n) for(int i=0;i<(n);++i)
#define reps(i,s,n) for(int i=(s);i<=(n);++i)
#define all(x) begin(x), end(x)
#define Fixed fixed << setprecision(12)
#define updiv(a,b) ((a + b - 1) / b)
constexpr int INF  = 0x3f3f3f3f;
constexpr long long LINF = 0x3f3f3f3f3f3f3f3fLL;
constexpr int mod = 1e9+7;
// constexpr int mod = 998244353;

template <class Func>
class FixPoint : Func {
public:
    explicit constexpr FixPoint(Func&& f) noexcept : Func(forward<Func>(f)) {}

    template <class... Args>
    constexpr decltype(auto) operator()(Args&&... args) const {
        return Func::operator()(*this, std::forward<Args>(args)...);
    }
};

template <class Func>
static inline constexpr decltype(auto) makeFixPoint(Func&& f) noexcept {
    return FixPoint<Func>{forward<Func>(f)};
}

template <class A, class B> inline bool chmax(A &a, const B &b) { return b > a && (a = b, true); }
template <class A, class B> inline bool chmin(A &a, const B &b) { return b < a && (a = b, true); }

template <class T> using max_heap = priority_queue<T>;
template <class T> using min_heap = priority_queue<T,vector<T>,greater<T> >;
template <class A, class B> using umap = unordered_map<A, B>;
template <class A, class B> using uset = unordered_set<A, B>;

template <class T> using Set = __gnu_pbds::tree<T, __gnu_pbds::null_type, less<T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;

template <class T> inline void bye(T x) { cout << x << '\n'; exit(0); }

constexpr int dx[] = {1, 0, -1, 0, 1, 1, -1, -1};
constexpr int dy[] = {0, -1, 0, 1, 1, -1, -1, 1};


signed main() {
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);

    int n, k, t, u, v, l;
    cin >> n >> k >> t >> u >> v >> l;

    vector<int> d(n);
    vector<int> calot(l + 100000);

    for (int i = 0; i < n; ++i) {
        cin >> d[i];
        calot[d[i]] = 1;
    }
    d.emplace_back(l);

    long double ans = (long double) d.front() / u;
    int now = d.front(), cnt = 0, r = 0;
    for (int i = 0; i < n; ++i) {
        if (cnt == k) {
            r = d[i] + v * t;
            --cnt;
        }
        if (r < d[i + 1]) {
            int tmp = min(updiv(d[i + 1] - max(r, d[i]), v * t), cnt + 1);
            r = max(r, d[i]) + v * t * tmp;
            // ans += (long double) max(min(r - d[i], d[i + 1] - d[i]), 0) / v + (long double) (d[i + 1] - d[i] - max(min(r - d[i], d[i + 1] - d[i]), 0)) / u;
            cnt -= tmp - 1;
        } else {
            ++cnt;
        }
        ans += (long double) max(min(r, d[i + 1]) - d[i], 0) / v + (long double) (d[i + 1] - d[i] - max(min(r, d[i + 1]) - d[i], 0)) / u;
    }

    cout << fixed << setprecision(8) << ans << '\n';

    return(0);
}
