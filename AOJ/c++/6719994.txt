#include <bits/stdc++.h>
using namespace std ;
#define MAX 100001
#define NIL -2000000002
#define INF 2000000002
#define MAXN 50
int n;
const long long int infty = (1LL<<31) - 1;
long long int A[MAX];

long long int findQuery(int a, int b){
    long long int minimum = infty;
    for (int j=a; j<=b ; j++) {
        if (A[j] < minimum) {minimum =A[j];}
    }
    return minimum;
}

long long int sumQuery(int a, int b){
    long long int sum = 0;
    for (int j=a; j<=b ; j++) {
        sum += A[j] ;
    }
    return sum ;
}

int main() {
    int q = 0;
    cin >> n >> q ;
    for (int i=0 ; i<n ; i++) { A[i]=infty; }

    // nは登場人物の人数、qはクエリ（命令）の個数
    // この時点でn個のノードが成立している。
    for (int i = 0 ; i < q ; i++ ) {
        int a , b, c ,com ;
        cin >> com ;

        if (com == 0) { 
            cin >> a >> b  ; 
            A[a]=b;
            // printf( "  A[%d]=%d \n", a, b);
            //tree.relate(b,c);  
        } else if (com == 9)  {
            cin >> a >> b  ;
            printf("%lld\n", findQuery(a, b));
        } else if (com == 1)  {
            cin >> a >> b  ;
            printf("%lld\n", sumQuery(a, b));
        }
    }    
	return 0 ;
}
/*

数列 A = {a0,a1 ,...,an-1} に対し、次の２つの操作を行うプログラムを作成せよ。

update(i,x): aiをxに変更する。
find(s,t): as,as+1,...,atの最小値を出力する。
ただし、ai (i=0,1,...,n−1)は、231-1で初期化されているものとする。

入力
n q
com0 x0 y0
com1 x1 y1
...
comq−1 xq−1 yq−1
１行目にAの要素数n, クエリの数qが与えられる。続くq行にクエリが与えられる。comは、クエリの種類を示し、'0'がupdate(xi,yi)、'1'がfind(xi,yi)を表す。

出力
各findクエリについて、最小値を１行に出力せよ。

制約
1≤n≤100000
1≤q≤100000
comiが0のとき、0≤xi<n, 0≤yi<231−1
comiが1のとき、0≤xi<n, 0≤yi<n
*/
