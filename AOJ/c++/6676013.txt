#include<bits/stdc++.h>

using namespace std;

#define Reimu inline void // 灵梦赛高
#define Marisa inline int // 魔理沙赛高
#define Sanae inline bool // 早苗赛高

typedef long long LL;
typedef unsigned long long ULL;

typedef pair<int, int> Pii;
typedef tuple<int, int, int> Tiii;
#define fi first
#define se second

const double eps = 1e-9;

struct Vec { // Vector 向量 / 点
	double x, y;
	friend istream &operator>>(istream &cin, Vec &a) { return cin >> a.x >> a.y; } // 向量输入
	friend ostream &operator<<(ostream &cout, Vec b) { return cout << b.x << ' ' << b.y; } // 向量输出
	friend Vec operator-(Vec a) { return {-a.x, -a.y}; } // 相反向量
	friend Vec operator+(Vec a, Vec b) { return {a.x + b.x, a.y + b.y}; } // 向量加法
	friend Vec operator-(Vec a, Vec b) { return {a.x - b.x, a.y - b.y}; } // 向量减法
	friend Vec operator*(Vec a, double b) { return {a.x * b, a.y * b}; } // 向量数乘
	friend Vec operator/(Vec a, double b) { return {a.x / b, a.y / b}; } // 向量数除
	friend double operator|(Vec a, Vec b) { return a.x * b.x + a.y * b.y; } // 向量点积
	friend double operator&(Vec a, Vec b) { return a.x * b.y - a.y * b.x; } // 向量叉积
	friend double operator~(Vec a) { return sqrt(a | a); } // 向量模长
};

struct Seg { Vec p, v; }; // Segment 线段 / 直线

Marisa onSeg(Seg a, Vec b) { // onSegment 判断点是否在线段上
	Vec p1 = a.p, p2 = p1 + a.v;
	return max(p1.x, p2.x) - b.x > -eps && b.x - min(p1.x, p2.x) > -eps
		&& max(p1.y, p2.y) - b.y > -eps && b.y - min(p1.y, p2.y) > -eps
		&& fabs(b - p1 & a.v) < eps;
}
Marisa chkCrs(Seg a, Seg b) { // checkCross 判断两条线段是否相交
	Vec p1 = a.p, p2 = p1 + a.v, q1 = b.p, q2 = q1 + b.v;
	return max(p1.x, p2.x) - min(q1.x, q2.x) > -eps && max(q1.x, q2.x) - min(p1.x, p2.x) > -eps
		&& max(p1.y, p2.y) - min(q1.y, q2.y) > -eps && max(q1.y, q2.y) - min(p1.y, p2.y) > -eps
		&& (a.v & q1 - p1) * (a.v & q2 - p1) < eps && (b.v & p1 - q1) * (b.v & p2 - q1) < eps;
}
inline Vec getCrs(Seg a, Seg b) { // getCross 求两条直线交点
	return a.p + a.v / (a.v & b.v) * (b.p - a.p & b.v);
}
inline double disPL(Vec a, Seg b) { // distancePointLine 求点到直线距离
	return fabs((b.v & a - b.p) / ~b.v);
}
inline double disPS(Vec a, Seg b) { // distancePointSegment 求点到线段距离
	Vec p = b.p, q = p + b.v;
	return (a - p | b.v) > eps && (a - q | -b.v) > eps ? disPL(a, b) : min(~(a - p), ~(a - q));
}
inline double disSS(Seg a, Seg b) { // distanceSegmentSegment 求两线段间距离
	return chkCrs(a, b) ? 0 : min(min(disPS(a.p, b), disPS(a.p + a.v, b)), min(disPS(b.p, a), disPS(b.p + b.v, a)));
}

typedef vector<Vec> Pg; // Polygon 多边形

inline double area(Pg a) { // 多边形面积
	double res = 0;
	for (int i = 0; i < a.size(); ++i) res += a[i] & a[(i + 1) % a.size()];
	return fabs(res / 2);
}
Marisa inPg(Pg a, Vec b) { // inPolygon 判断点是否被多边形包含，1 包含，0 不包含，-1 在边上
	a.emplace_back(a[0]);
	for (int i = 1; i < a.size(); ++i) if (onSeg({a[i - 1], a[i] - a[i - 1]}, b)) return -1;
	b = b + Vec{0, eps};
	int c = 0;
	for (int i = 1; i < a.size(); ++i) {
		if ((a[i - 1].y - b.y) * (a[i].y - b.y) > 0) continue;
		Vec t = getCrs({a[i - 1], a[i] - a[i - 1]}, {Vec{0, b.y}, Vec{1, 0}});
		if (t.x > b.x) a[i].y > b.y ? ++c : --c;
	}
	return c & 1;
}
inline Pg getCH(Pg a) { // getConvexHull 求包含给定点集的凸包
	sort(a.begin(), a.end(), [](Vec a, Vec b) {
		return fabs(a.y - b.y) > eps ? a.y < b.y : a.x < b.x;
	});
	Pg res;
	auto solve = [&]() {
		for (int i = 2; i < a.size(); ++i) {
			while (res.size() > 1) {
				Vec p1 = res[res.size() - 2], p2 = res[res.size() - 1];
				if ((p2 - p1 & a[i] - p2) > -eps) break;
				res.pop_back();
			}
			res.emplace_back(a[i]);
		}
	};
	res.emplace_back(a[0]); res.emplace_back(a[1]);
	solve();
	reverse(a.begin(), a.end()); res.emplace_back(a[1]);
	solve();
	res.pop_back();
	return res;
}
inline double getD(Pg a) { // getDiameter 求给定凸包的直径
	double res = 0;
	for (int i = 0, j = 0; i < a.size(); ++i) {
		while (j + 1 < a.size() && ~(a[j + 1] - a[i]) > ~(a[j] - a[i])) ++j;
		res = max(res, ~(a[j] - a[i]));
	}
	return res;
}

const int N = 100010;

int n, rt;
map<int, pair<vector<Pii>, vector<Pii>>> a;

struct SegTree {
	int trC;
	struct Node { int x, l, r; } tr[N << 5];
	Reimu modify(int L, int R, int x, int &p = rt, int l = -1e9, int r = 1e9) {
		if (!p) p = ++trC;
		if (L <= l && R >= r) return void(tr[p].x += x);
		int mid = l + r >> 1, &lp = tr[p].l, &rp = tr[p].r;
		if (L <= mid) modify(L, R, x, lp, l, mid);
		if (R > mid) modify(L, R, x, rp, mid + 1, r);
	}
	Marisa query(int x, int p = rt, int l = -1e9, int r = 1e9) {
		if (!p) return 0;
		int mid = l + r >> 1, lp = tr[p].l, rp = tr[p].r;
		return tr[p].x + (x <= mid ? query(x, lp, l, mid) : query(x, rp, mid + 1, r));
	}
} sTr;

int main() {
	ios::sync_with_stdio(false); cin.tie(nullptr);
	cin >> n;
	for (int i = 1; i <= n; ++i) {
		int x, y, X, Y; cin >> x >> y >> X >> Y;
		if (x > X) swap(x, X); if (y > Y) swap(y, Y);
		if (x == X) a[x].fi.emplace_back(y, Y);
		else a[x - 1].se.emplace_back(y, -1), a[X].se.emplace_back(y, 1);
	}
	LL ans = 0;
	for (auto [_, t]: a) {
		for (auto [x, y]: t.fi) sTr.modify(x, y, 1);
		for (auto [x, ty]: t.se) ans += sTr.query(x) * ty;
	}
	cout << ans;
	return 0;
}


