#pragma GCC ta g("avx2")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#define DEBUG
#ifdef DEBUG
template <class T, class U>
ostream &operator<<(ostream &os, const pair<T, U> &p) {
    os << '(' << p.first << ',' << p.second << ')';
    return os;
}
template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
    os << '{';
    for(int i = 0; i < (int)v.size(); i++) {
        if(i) { os << ','; }
        os << v[i];
    }
    os << '}';
    return os;
}
void debugg() { cerr << endl; }
template <class T, class... Args>
void debugg(const T &x, const Args &... args) {
    cerr << " " << x;
    debugg(args...);
}
#define debug(...)                                                             \
    cerr << __LINE__ << " [" << #__VA_ARGS__ << "]: ", debugg(__VA_ARGS__)
#define dump(x) cerr << __LINE__ << " " << #x << " = " << (x) << endl
#else
#define debug(...) (void(0))
#define dump(x) (void(0))
#endif
using namespace std;
typedef long long ll;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<char> vc;
typedef vector<string> vs;
typedef vector<bool> vb;
typedef vector<double> vd;
typedef pair<ll,ll> P;
typedef pair<int,int> pii;
typedef vector<P> vpl;
typedef tuple<ll,ll,ll> tapu;
#define rep(i,n) for(int i=0; i<(n); i++)
#define REP(i,a,b) for(int i=(a); i<(b); i++)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
template<typename T1,typename T2> inline bool chmin(T1 &a,T2 b){
	if(a>b){
		a = b; return true;
	}
	else return false;
}
template<typename T1,typename T2> inline bool chmax(T1 &a,T2 b){
	if(a<b){
		a = b; return true;
	}
	else return false;
}
template<typename T> inline void print(T &a){
    int sz = a.size();
    for(auto itr = a.begin(); itr != a.end(); itr++){
		cout << *itr;
        sz--;
        if(sz) cout << " ";
	}
    cout << "\n";
}
template<typename T1,typename T2> inline void print2(T1 a, T2 b){
	cout << a << " " << b << "\n";
}
template<typename T1,typename T2,typename T3> inline void print3(T1 a, T2 b, T3 c){
	cout << a << " " << b << " " << c << "\n";
}
void mark() {cout << "#" << "\n";}
ll pcount(ll x) {return __builtin_popcountll(x);}
// #include <atcoder/convolution>
// using namespace atcoder;
const int inf = (1<<30)-1;
const ll linf = 1LL<<61;
const int MAX = 1020000;
int dy[8] = {0,1,0,-1,1,-1,-1,1};
int dx[8] = {-1,0,1,0,1,-1,1,-1};
const double pi = acos(-1);
const double eps = 1e-9;
//const int mod = 1e9 + 7;
const int mod = 998244353;

struct UnionFind{
    vl p;
    vl rank;
    vl cnt;

    UnionFind(ll n){
        rank.resize(n,0);
        p.resize(n,0);
        cnt.resize(n,0);
        rep(i,n){
            p[i] = i;
            rank[i] = 0;
            cnt[i] = 1;
        }
    }

    ll find(ll x){
        if(x != p[x]) p[x] = find(p[x]);
        return p[x];
    }

    bool same(ll x, ll y){
        return find(x) == find(y);
    }

    void unite(ll x, ll y){
        x = find(x);
        y = find(y);
        if(x == y) return;
        if(rank[x] > rank[y]){
            p[y] = x;
            cnt[x] += cnt[y];
        }else{
            p[x] = y;
            cnt[y] += cnt[x];
            if(rank[x] == rank[y]) rank[y]++;
        }
    }

    ll size(ll x){
        return cnt[find(x)];
    }
};

struct edge {
    int a,b,c,id;
    bool operator< (const edge &e) const {
        return c < e.c;
    }
};
 
int main(){
    int n,m; cin >> n >> m;
    vector<vpl> G(n);
    vector<edge> e(m);
    vl cs(m);
    rep(i,m){
        int a,b,w; cin >> a >> b >> w; a--; b--;
        e[i] = {a,b,w,i};
        cs[i] = w;
    }
    vl ans(m,0);
    sort(all(e));
    ll mst = 0;
    UnionFind uf(n);
    vector<vpl> unuse(n);
    rep(i,m){
        if(uf.same(e[i].a,e[i].b)){
            unuse[e[i].a].emplace_back(e[i].c,e[i].b);
            unuse[e[i].b].emplace_back(e[i].c,e[i].a);
            continue;
        }
        ans[e[i].id] = -1;
        uf.unite(e[i].a,e[i].b);
        mst += e[i].c;
        G[e[i].a].emplace_back(e[i].b,e[i].id);
        G[e[i].b].emplace_back(e[i].a,e[i].id);
    }
    if(uf.size(0) != n){
        rep(i,m) cout << -1 << "\n";
        return 0;
    }
    vector<set<pii>> es(n);
    vector<set<int>> vs(n);
    auto dfs = [&](auto &&dfs, int u, int id) -> void {
        for(auto v : G[u]){
            if(v.second == id) continue;
            dfs(dfs,v.first,v.second);
            if(vs[u].size() < vs[v.first].size()) swap(vs[u],vs[v.first]);
            if(es[u].size() < es[v.first].size()) swap(es[u],es[v.first]);
            for(auto x : vs[v.first]) vs[u].insert(x);
            for(auto x : es[v.first]) es[u].emplace(x);
        }
        vs[u].insert(u);
        for(auto p : unuse[u]) if(!vs[u].count(p.second)) es[u].emplace(p);
        while(!es[u].empty()){
            P p = *es[u].begin();
            if(vs[u].count(p.second)) es[u].erase(es[u].begin());
            else break;
        }
        if(id == -1) return;
        if(!es[u].empty()) ans[id] = (*es[u].begin()).first - cs[id] + mst;
    };
    dfs(dfs,0,-1);
    rep(i,m) if(ans[i] == 0) ans[i] = mst;
    rep(i,m) cout << ans[i] << "\n";
}
