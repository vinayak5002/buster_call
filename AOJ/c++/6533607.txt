#include <bits/stdc++.h>
using namespace std;

template <typename T>
struct LazySegmentTree {
    int n;
    vector<T> dat;
    vector<T>lazy;
    LazySegmentTree() {};
    LazySegmentTree(int N) {
        n = 1;
        while(n < N) {
            n *= 2;
        }
        dat.resize(n*2,0);
        lazy.resize(n*2,0);
    }
    void eval(int k,int l,int r) {
        if(lazy[k] == 0) return;
        if(k < n) {
            lazy[k*2] += lazy[k];
            lazy[k*2+1] += lazy[k];
        }
        dat[k] += lazy[k]*(r-l);
        lazy[k] = 0;
    }
    void update(int a, int b, T x, int k, int l, int r) {
        eval(k,l,r);
        if(a <= l && r <= b) {
            lazy[k] += x;
            eval(k,l,r);
        }
        else if(a < r && l < b) {
            update(a, b, x, k*2, l, (l+r)/2);
            update(a, b, x, k*2+1, (l+r)/2, r);
            dat[k] = dat[k*2]+dat[k*2+1];
        }
    }
    void update(int a, int b, T x) {//[a,b)
        update(a, b, x, 1, 0, n);
    }
    T query_sub(int a, int b, int k, int l, int r) {
        eval(k,l,r);
        if (r <= a || b <= l) {
            return 0;
        }
        else if (a <= l && r <= b) {
            return dat[k];
        }
        else {
            T vl = query_sub(a, b, k*2, l, (l+r)/2);
            T vr = query_sub(a, b, k*2+1, (l+r)/2, r);
            return vl+vr;
        }
    }
    T query(int a, int b) {//[a,b)
        return query_sub(a, b, 1, 0, n);
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int N,M,Q;
    cin >> N >> M >> Q;
    vector<int>a(M),b(M),v(M);
    vector<int>cmp;
    for(int i = 0; i < M; i++) {
        cin >> a[i] >> b[i] >> v[i];
        a[i]--;
        b[i]--;
        cmp.push_back(v[i]);
    }
    sort(cmp.begin(),cmp.end());
    cmp.erase(unique(cmp.begin(),cmp.end()),cmp.end());
    for(int i = 0; i < M; i++) {
        v[i] = lower_bound(cmp.begin(),cmp.end(),v[i])-cmp.begin();
    }
    vector<int>x(Q),y(Q),j(Q);
    for(int i = 0; i < Q; i++) {
        cin >> x[i] >> y[i] >> j[i];
        x[i]--;
        y[i]--;
    }
    vector<int>l(Q),r(Q,1001001001);
    while (true) {
        priority_queue<array<int,5>,vector<array<int,5>>,greater<array<int,5>>>que;
        for(int i = 0; i < Q; i++) {
            if(l[i]+1 < r[i]) {
                int mid = (l[i]+r[i])/2;
                mid = upper_bound(cmp.begin(),cmp.end(),mid)-cmp.begin()-1;
                que.push({mid,2,x[i],y[i],i});
            }
        }
        if(que.empty()) {
            break;
        }
        for(int i = 0; i < M; i++) {
            que.push({v[i],1,a[i],b[i],-1});
        }
        LazySegmentTree<int>Seg(N);
        while (!que.empty()) {
            array<int,5> x = que.top();
            que.pop();
            if(x[1] == 1) {
                Seg.update(x[2],x[3]+1,1);
            }
            else {
                if(Seg.query(x[2],x[3]+1) < j[x[4]]) {
                    l[x[4]] = (l[x[4]]+r[x[4]])/2;
                }
                else {
                    r[x[4]] = (l[x[4]]+r[x[4]])/2;
                }
            }
        }
    }
    for(int i = 0; i < Q; i++) {
        cout << r[i] << '\n';
    }
}

