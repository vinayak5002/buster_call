#include <bits/stdc++.h>
#define all(x) (x).begin(), (x).end()
#define x first
#define y second

using namespace std;
using ll = long long;
using pnt = pair<double, double>;
using vec = pnt;

const double EPS = 1e-8, PI = acos(-1.0);

// 判断实数 a 的符号， 若接近 0 则判为 0
int sgn(double a) {
    if (abs(a) < EPS)
        return 0;
    else
        return a > 0 ? 1 : -1;
}

double operator*(const vec& a, const vec& b) {
    return a.x * b.x + a.y * b.y;
}

double operator%(const vec& a, const vec& b) {
    return a.x * b.y - a.y * b.x;
}

// 向量 a 的长度
double abs(const vec& a) {
    return sqrt(a.x * a.x + a.y * a.y);
}

// 向量 a 的长度的平方
double abs2(const vec& a) {
    return a.x * a.x + a.y * a.y;
}

// 向量 a 和向量 b 的夹角 范围 [0, PI]
double angle(const vec& a, const vec& b) {
    return a * b / abs(a) / abs(b);
}

// 向量 a 的法向量
vec normal(const vec& a) {
    return {-a.y, a.x};
}
vec operator+(const vec& a, const vec& b) {
    return {a.x + b.x, a.y + b.y};
}
vec operator-(const vec& a, const vec& b) {
    return {a.x - b.x, a.y - b.y};
}
vec operator-(const vec& a) {
    return {-a.x, -a.y};
}
vec operator*(const vec& a, double x) {
    return {a.x * x, a.y * x};
}
vec operator/(const vec& a, double x) {
    return {a.x / x, a.y / x};
}
bool operator==(const vec& a, const vec& b) {
    return !sgn(a.x - b.x) && !sgn(a.y - b.y);
}

// 向量 a 逆时针旋转 th 弧度
vec turn(const vec& a, double th) {
    return {a.x * cos(th) + a.y * sin(th), -a.x * sin(th) + a.y + cos(th)};
}
vec turnP(const vec& a, const vec& b, double th) {
    return turn(a - b, th) + b;
}

vec unit(const vec& a) {
    return a / abs(a);
}

// 判断点 p 是否在直线 ab 上
bool p_on_l(const pnt& p, const pnt& a, const pnt& b) {
    return !sgn((p - a) % (p - b));
}

// 判断点 p 是否在线段 ab 上
bool p_on_s(const pnt& p, const pnt& a, const pnt& b) {
    return p_on_l(p, a, b) && (p - a) * (p - b) <= 0;
}

// 点 p 到线段 ab 的距离
double dist_p2s(const pnt& p, const pnt& a, const pnt& b) {
    if (a == b)
        return abs(p - a);
    vec u = p - a, v = p - b, w = b - a;
    if (sgn(u * w) < 0)
        return abs(u);
    if (sgn(v * w) > 0)
        return abs(v);
    return abs((u % w) / abs(w));
}

// 点 p 在直线 ab 上的投影
pnt shadow_p2l(const pnt& p, const pnt& a, const pnt& b) {
    vec u = p - a, v = p - b, w = b - a;
    double len1 = u * w / abs(w), len2 = -v * w / abs(w);
    return a + w * (len1 / (len1 + len2));
}

// 点 p 在直线 ab 另一侧的对称点
pnt sym_p2l(const pnt& p, const pnt& a, const pnt& b) {
    return p + (shadow_p2l(p, a, b) - p) * 2;
}

// 直线 ab 与直线 cd 的交点
pnt inters_l2l(const pnt& a, const pnt& b, const pnt& c, const pnt& d) {
    vec u = b - a, v = d - c, w = a - c;
    return a + u * ((v % w) / (u % v));
}

// 判断直线 ab 和线段 cd 是否相交
bool l_cross_s(const pnt& a, const pnt& b, const pnt& c, const pnt& d) {
    return p_on_s(inters_l2l(a, b, c, d), c, d);
}

bool s_cross_s(const pnt& a, const pnt& b, const pnt& c, const pnt& d) {
    return l_cross_s(a, b, c, d) && l_cross_s(c, d, a, b);
}

// 判断 p 是在 多边形 plg 内、外或边界上 使用射线法
// 外: 0
// 边界上: 1
// 内: 2
int p_in_poly(const pnt& p, const vector<pnt>& plg) {
    int n = plg.size(), cnt = 0;
    for (int i = 0; i < n; i++) {
        const auto &a = plg[i], &b = plg[(i < n - 1) ? i + 1 : 0];
        if (p_on_s(p, a, b))
            return 1;
        if (p.y >= min(a.y, b.y) && p.y < max(a.y, b.y)) {
            double tmp = a.x + (p.y - a.y) / (b.y - a.y) * (b.x - a.x);
            cnt += sgn(tmp - p.x) > 0;
        }
    }
    return cnt & 1;
}

// 多边形面积
double poly_area(const vector<pnt>& a) {
    double res = 0;
    int n = a.size();
    for (int i = 1; i < n; i++)
        res += a[i - 1] % a[i];
    return (res + a[0] % a[n - 1]) / 2;
}

// /*2.【圆的面积并】*/

// /*3.【三角形面积并】*/

// 点集 a 的凸包 按逆时针顺序排列

vector<pnt> conv_hull(vector<pnt> a) {
    sort(all(a));
    vector<pnt> res{};
    for (auto sg : {1, 0}) {
        size_t st = res.size() + sg;
        for (auto p : a) {
            while (res.size() > st && sgn((res.back() - *(res.end() - 2)) % (p - *(res.end() - 2))) <= 0)
                res.pop_back();
            res.push_back(p);
        }
        if (sg)
            a.pop_back(), reverse(all(a));
    }
    res.pop_back();
    return res;
}

// 凸包 a 的直径 使用旋转卡壳算法
double convh_diameter(const vector<pnt>& a) {
    assert(a.size());
    if (a.size() == 1)
        return 0;
    double res = abs(a[1] - a[0]);
    int n = a.size();
    for (int i = 0, j = 2; i < n; i++) {
        auto i1 = (i + 1) % n;
        while (sgn((a[i1 % n] - a[i]) % (a[j] - a[i]) - (a[i1 % n] - a[i]) % (a[(j + 1) % n] - a[i])) < 0)
            j = (j + 1) % n;
        res = max({res, abs(a[j] - a[i]), abs(a[j] - a[(i + 1) % n])});
    }
    return res;
}

vector<pnt> inter_cir_p(const pnt& o, double r, const pnt& a, const pnt& b) {
    double d = dist_p2s(o, a, b);
    pnt u = shadow_p2l(o, a, b);
    double k = sqrt(r * r - d * d);
    pnt p1 = u + unit(a - b) * k, p2 = u - unit(a - b) * k;
    if (sgn(abs(p1 - p2)) == 0)
        return {p1};
    return {p1, p2};
    vector<pnt> res;
    for (auto p : {p1, p2})
        if (sgn((a - p) * (b - p)) != 1)
            res.push_back(p);
    return res;
}

int main() {
    pnt o;
    double r;
    cin >> o.x >> o.y >> r;
    int q;
    cin >> q;
    cout << setprecision(20);
    while (q--) {
        pnt p1, p2;
        cin >> p1.x >> p1.y >> p2.x >> p2.y;
        auto ans = inter_cir_p(o, r, p1, p2);
        cout << ans[0].x << " " << ans[0].y << " ";
        if (ans.size() == 1)
            cout << ans[0].x << " " << ans[0].y;
        else
            cout << ans[1].x << " " << ans[1].y;
        if (q)
            cout << endl;
    }
    return 0;
}
