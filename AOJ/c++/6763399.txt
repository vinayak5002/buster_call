#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <map>
#include <set>
#include <deque>
#include <queue>
#define TEST cout << "TEST" << endl
#define IINF 2147483647
#define LLINF 9223372036854775807
#define AMARI 998244353
using namespace std;

//RUQとRAQをまとめた遅延セグ木
//最小値の取得と区間和の取得ができる 関数名さえ見てればrmqとかrsqとかあんま考えなくても行けるはず
//負の値が入ることは考えてないので注意
//負になり得る時はRUQの初期値を-1でない値にする
class ococo_lazy_segtree { 
public:
    int n;
    //raq:Range Add Query
    vector<int> raq,lazy_raq;
    //ruq:Range Update Query
    vector<int> ruq,lazy_ruq;

    //配列の初期化 O(N)
    void syokica(int a) {
        n = 1;
        while (n < a)n *= 2;
        ruq.resize(2 * n - 1);
        raq.resize(2 * n - 1);
        lazy_ruq.resize(2 * n - 1);
        lazy_raq.resize(2 * n - 1);
        for (int i = 0; i < 2 * n - 1; i++) {
            raq[i] = 0;
            ruq[i] = IINF;
            lazy_raq[i] = 0;
            lazy_ruq[i] = IINF;
        }
    }

    //k番目の点についての遅延評価 O(1)
    void lazy_evaluate(int k, int l, int r) {
        if (lazy_raq[k] != 0) {
            raq[k] += lazy_raq[k];
            lazy_raq[2 * k + 1] += (lazy_raq[k] / 2);
            lazy_raq[2 * k + 2] += (lazy_raq[k] / 2);
            lazy_raq[k] = 0;
        }
        
        if (lazy_ruq[k] != IINF) {
            ruq[k] = lazy_ruq[k];
            if (r - l > 1) {
                lazy_ruq[2 * k + 1] = lazy_ruq[k];
                lazy_ruq[2 * k + 2] = lazy_ruq[k];
            }
            lazy_ruq[k] = IINF;
        }

    }

    void update_num2(int a, int b, int x, int k, int l, int r) {
        lazy_evaluate(k, l, r);
        if (b <= l || r <= a)return;

        if (a <= l && r <= b) {
            lazy_ruq[k] = x;
            lazy_evaluate(k, l, r);
        }
        else {
            update_num2(a, b, x, 2 * k + 1, l, (l + r) / 2);
            update_num2(a, b, x, 2 * k + 2, (l + r) / 2, r);
            ruq[k] = x;
        }
    }

    //[l,r)をxにする O(logN)
    void update_num(int l, int r, int x) {
        update_num2(l, r, x, 0, 0, n);
    }

    void add_num2(int a, int b,int x,int k,int l,int r) {
        lazy_evaluate(k, l, r);
        if (b <= l || r <= a)return;

        if (a <= l && r <= b) {
            lazy_raq[k] += (r - l) * x;
            lazy_evaluate(k, l, r);
        }
        else {
            add_num2(a, b, x, 2 * k + 1, l, (l + r) / 2);
            add_num2(a, b, x, 2 * k + 2, (l + r) / 2, r);
            raq[k] = raq[2 * k + 1] + raq[2 * k + 2];
        }
    }

    //[l,r)にxを加える
    void add_num(int l, int r, int x) {
        add_num2(l,r,x,0,0,n);
    }


    int get_sum2(int a, int b, int k,int l, int r) {
        if (r <= a || b <= l)return 0;
        lazy_evaluate(k, l, r);
        if (a <= l && r <= b)return raq[k];
        else {
            int kari = (get_sum2(a, b, k * 2 + 1, l, (l + r) / 2) + get_sum2(a, b, k * 2 + 2, (l + r) / 2, r) );
            return kari;
        }
    }
    //[l,r)の和の取得 O(logN)
    int get_sum(int l, int r) {
        return get_sum2(l, r, 0, 0,n);
    }

    
    int get_minimum2(int a, int b, int k, int l, int r) {
        if (r <= a || b <= l)return IINF;
        lazy_evaluate(k, l, r);
        if (a <= l && r <= b)return ruq[k];
        else return min(get_minimum2(a, b, k * 2 + 1, l, (l + r) / 2), get_minimum2(a, b, k * 2 + 2, (l + r) / 2, r));
    }
    //[l,r)の最小値の取得 O(logN)
    int get_minimum(int l, int r) {
        return get_minimum2(l, r, 0, 0, n);
    }
};

int main(void) {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    int n, q;
    cin >> n >> q;
    ococo_lazy_segtree ols;
    ols.syokica(n);
    while (q--) {
        /*
        cout << endl << endl;
        for (int i = 0; i < ols.ruq.size(); i++) {
            cout << ols.ruq[i] << ' ';
            if (i == 0 || i == 2 || i == 6 || i == 14)cout << endl;
        }
        cout << endl << endl;
       */

        int a;
        cin >> a;
        if (a == 0) {
            int s, t, x;
            cin >> s >> t >> x;
            ols.update_num(s, t + 1, x);
        }
        else {
            int i;
            cin >> i;
            cout << ols.get_minimum(i, i + 1) << endl;
        }
    }
    return 0;
}
