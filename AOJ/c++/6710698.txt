#include <bits/stdc++.h>
using namespace std;
#define all(v) (v).begin(), (v).end()
using ll = long long;
using P = pair<ll, ll>;
constexpr ll INF = 1e18;
vector<bool> Eratosthenes(int N) {
    vector<bool> isprime(N + 1, true);
    isprime[0] = isprime[1] = false;

    // ふるい
    for(int p = 2; p <= N; ++p) {
        // すでに合成数であるものはスキップする
        if(!isprime[p])
            continue;

        // p 以外の p の倍数から素数ラベルを剥奪
        for(int q = p * 2; q <= N; q += p) {
            isprime[q] = false;
        }
    }
    return isprime;
}
vector<ll> V;
int main() {
    while(true) {
        int n, m;
        cin >> m >> n;
        if(n == 0 && m == 0)
            break;

        ll N = 7368791;
        vector<bool> isprime(N + 1, true);
        for(int i = 0; i < m; i++) isprime[i]=false;

        for(int p = m; p <= N; p++) {
            if(!isprime[p])
                continue;
            // p 以外の p の倍数から素数ラベルを消す
            for(int q = p ; q <= N; q += p) {
                isprime[q] = false;
            }
            n--;
            if(n==0){
                break;
            }
        }
        ll i=m;
        while(true){
            if(isprime[i])break;
            i++;
        }
        cout << i << endl;
    }
    return 0;
}
