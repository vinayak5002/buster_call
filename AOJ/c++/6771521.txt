#include <bits/stdc++.h>
using namespace std;

#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

struct Fast {
  Fast() {
    std::cin.tie(0);
    ios::sync_with_stdio(false);
  }
} fast;

using V = vector<int>;

void CountingSort(V &A, V &B, int k) {
  V C(k + 1, 0);

  for (int j = 0; j < A.size(); j++) {
    C[A[j]]++;
  }

  for (int i = 1; i < (k + 1); i++) {
    C[i] = C[i] + C[i - 1];
  }

  for (int j = A.size() - 1; j > -1; j--) {
    B[C[A[j]] - 1] = A[j];
    C[A[j]]--;
  }
}

int main() {
  int n = 7;
  scanf("%d", &n);

  V A(n), B(n);

  int max_value = INT_MIN;
  for (int i = 0; i < n; i++) {
    scanf("%d", &A[i]);
    max_value = A[i] < max_value ? max_value : A[i];
  }

  CountingSort(A, B, max_value);

  for (int i = 0; i < n; i++) {
    printf("%d", B[i]);
    if (i == (n - 1)) {
      printf("\n");
    } else {
      printf(" ");
    }
  }

  return 0;
}

