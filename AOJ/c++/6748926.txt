#include<stdio.h>

#define N 100
#define WHITE 0  //頂点が未訪問//
#define GRAY 1  //現在訪問中//
#define BLACK 2  //訪問が完了//
#define LEN 100005

int n, M[N][N];
int color[N], d[N];
int Q[N];
int head = 0, tail = 0;

void enqueue( int x )
{
	Q[tail] = x;
	tail = (tail + 1) % LEN;
}

int dequeue()
{
	int y;
	
	y = Q[head];
	head = (head + 1) % LEN;
	
	return y;
}

void bfs( int s)
{
	int u, v;
	
	for( v = 0; v < n; v++ )  
	{
		color[v] = WHITE;  //各頂点を未訪問の状態にする//
		d[v] = -1;  
	}
	
	color[s] = GRAY;
	d[s] = 0;
	enqueue(s);
	
	while( head != tail )
	{
		u = dequeue();
		for( v = 0; v < n; v++ )
		{
			if( M[u][v] == 1 && color[v] == WHITE )  //頂点sから頂点vに辺があり、頂点vが未訪問//
			{
				color[v] = GRAY;
				d[v] = d[u] + 1;
				enqueue(v);
			}
		}
	}
	
	color[u] = BLACK;
}

int main( void )
{
	int u, k, v;
	int i, j;
	
	scanf( "%d", &n );
	
	for( i = 0; i < n; i++ )
	{
		for( j = 0; j < n; j++ )
		{
			M[i][j] = 0;
		}
	}
	
	//各頂点の隣接リストの入力//
	for( i = 0; i < n; i++ )
	{
		scanf( "%d %d", &u, &k );
		u--;
		for( j = 0; j < k; j++ )
		{
			scanf( "%d", &v );
			v--;
			M[u][v] = 1;
		}
	}
	
	bfs(0);
	
	for( i = 0; i < n; i++ )
	{
		printf( "%d %d\n", i+1, d[i] );
	}
	
	return 0;
}

