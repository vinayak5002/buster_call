#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef pair<long long, long long> pll;
typedef long long ll;

#define YESNO(bool)            \
    if (bool) {                \
        cout << "YES" << endl; \
    } else {                   \
        cout << "NO" << endl;  \
    }
#define yesno(bool)            \
    if (bool) {                \
        cout << "yes" << endl; \
    } else {                   \
        cout << "no" << endl;  \
    }
#define YesNo(bool)            \
    if (bool) {                \
        cout << "Yes" << endl; \
    } else {                   \
        cout << "No" << endl;  \
    }
#define REP(i, n) for (ll i = 0; i < ll(n); i++)
#define REPD(i, n) for (ll i = n - 1; i >= 0; i--)
#define FOR(i, a, b) for (ll i = a; i <= ll(b); i++)
#define FORD(i, a, b) for (ll i = a; i >= ll(b); i--)
#define FORA(i, I) for (const auto& i : I)

#define ALL(x) x.begin(), x.end()
#define SIZE(x) ll(x.size())

#define INF32 2147483647
#define INF64 9223372036854775807
#define MOD 1000000007

#define F first
#define S second
#define pb push_back
#define mp make_pair

#define OP(m) cout << m << endl;
ll myceil(ll a, ll b) { return (a + (b - 1)) / b; }
ll myfloor(ll a, ll b) { return a / b; }

int dx4[4] = {1, 0, -1, 0};
int dy4[4] = {0, 1, 0, -1};
int dx8[8] = {-1, -1, 0, 1, 1, 1, 0, -1};
int dy8[8] = {0, -1, -1, -1, 0, 1, 1, 1};
// cout<<fixed<<setprecision(10);

int w, h;
vector<vector<int>> c(1000, vector<int>(1000));

void dfs(int y, int x) {
    c[y][x] = 0;
    REP(i, 8) {
        int dx = x + dx8[i], dy = y + dy8[i];
        if (!(0 <= dx && dx < w && 0 <= dy && dy < h)) continue;
        if (c[dy][dx] == 0) continue;
        dfs(dy, dx);
    }
}

signed main() {
    while (cin >> w >> h) {
        if (w == 0 && h == 0) break;
        REP(i, 1000) REP(j, 1000) c[i][j] = 0;

        REP(i, h) REP(j, w) cin >> c[i][j];

        int cnt = 0;
        REP(i, h) {
            REP(j, w) {
                if (c[i][j] == 0) continue;
                dfs(i, j);
                cnt++;
            }
        }
        OP(cnt)
    }
}
