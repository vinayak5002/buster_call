#define READ_FROM_FILE 0

#if READ_FROM_FILE
#include <fstream>
#endif

#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>
using namespace std;

class Edge {
public:
	int v;
	int c;
	bool is_inverse_edge;

public:
	Edge() : v(-1), c(-1), is_inverse_edge(false) {
		return;
	}

	Edge(int v, int c, bool is_inverse_edge) : v(v), c(c), is_inverse_edge(is_inverse_edge) {
		return;
	}

	~Edge() {
		return;
	}
};

class SearchInfo {
public:
	int num_inversions;
	int length;
	int v;
	unordered_set<int> is_visited_set;

public:
	SearchInfo(int num_inversions, int length, int v, unordered_set<int> is_visited_set) 
		: num_inversions(num_inversions), length(length), v(v), is_visited_set(is_visited_set) {
		return;
	}

	~SearchInfo() {
		return;
	}
};

bool operator < (const SearchInfo& lh, const SearchInfo& rh) {
	if (lh.num_inversions != rh.num_inversions) {
		return lh.num_inversions > rh.num_inversions;
	}
	return lh.length > rh.length;
}

int search(int n, int max_l, const vector<vector<Edge>>& adjacency_list) {
	priority_queue<SearchInfo> hq;

	hq.push(SearchInfo(0, 0, 0, unordered_set<int>()));

	while (!hq.empty()) {
		SearchInfo c_info = hq.top();
		int& c_num_inversions = c_info.num_inversions;
		int& cl = c_info.length;
		int& cv = c_info.v;
		unordered_set<int>& c_is_visited_set = c_info.is_visited_set;

		if (cv == n - 1) {
			return c_num_inversions;
		}

		hq.pop();

		for (const Edge& edge : adjacency_list[cv]) {
			const int& nv = edge.v;
			const int& length = edge.c;
			const bool& is_inverse_edge = edge.is_inverse_edge;

			if (c_is_visited_set.count(nv) == 0) {
				int nl = cl + length;

				if (nl <= max_l) {
					int n_num_inversions = c_num_inversions;
					unordered_set<int> n_is_visited_set = c_is_visited_set;

					if (is_inverse_edge) { n_num_inversions++; }
					n_is_visited_set.insert(nv);
					hq.push(SearchInfo(n_num_inversions, nl, nv, n_is_visited_set));
						
				}
			}
		}
	}
	return -1;
}


int main() {
#if READ_FROM_FILE
	ifstream ifs("test0.txt");
	cin.rdbuf(ifs.rdbuf());
#endif
	int n = -1;
	int m = -1;
	int max_l = -1;
	int a = -1;
	int b = -1;
	int c = -1;
	vector<vector<Edge>> adjacency_list;

	cin >> n >> m >> max_l;
	adjacency_list = vector<vector<Edge>>(n);
	for (int i = 0; i < m; i++) {
		cin >> a >> b >> c;
		a--;
		b--;
		adjacency_list[a].push_back(Edge(b, c, false));
		adjacency_list[b].push_back(Edge(a, c, true));
	}
	cout << search(n, max_l, adjacency_list) << endl;
	return 0;
}
