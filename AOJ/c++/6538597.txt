#include <algorithm>
#include <iomanip>
#include <array>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iostream>
#include <iterator>
#include <map>
#include <queue>
#include <set>
#include <list>
#include <string>
#include <sstream>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <numeric>
#include <vector>
#include <climits>
using namespace std;
#if __has_include(<atcoder/all>)
#include <atcoder/all>
using namespace atcoder;
#endif
#define GET_MACRO(_1, _2, _3, NAME, ...) NAME
#define _rep(i, n) _rep2(i, 0, n)
#define _rep2(i, a, b) for(int i = (int)(a); i < (int)(b); i++)
#define rep(...) GET_MACRO(__VA_ARGS__, _rep2, _rep)(__VA_ARGS__)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
using i64 = long long;
template<class T, class U>
bool chmin(T& a, const U& b) { return (b < a) ? (a = b, true) : false; }
template<class T, class U>
bool chmax(T& a, const U& b) { return (b > a) ? (a = b, true) : false; }

template<typename T>istream& operator>>(istream&i,vector<T>&v){rep(j,v.size())i>>v[j];return i;}
template<typename T>string join(vector<T>&v){stringstream s;rep(i,v.size())s<<' '<<v[i];return s.str().substr(1);}
template<typename T>ostream& operator<<(ostream&o,vector<T>&v){if(v.size())o<<join(v);return o;}
template<typename T>string join(vector<vector<T>>&vv){string s="\n";rep(i,vv.size())s+=join(vv[i])+"\n";return s;}
template<typename T>ostream& operator<<(ostream&o,vector<vector<T>>&vv){if(vv.size())o<<join(vv);return o;}
template<class T> using pq = priority_queue<T, vector<T>, greater<T>>;
int n;
vector<int> w;
vector<vector<int>> dp;

int rec(int l,int r) {
    // cout << "l : " << l << endl;
    // cout << "r : " << r << endl;
    // 区間[l, r) での消せる個数の最大値
    if(dp[l][r] != -1) return dp[l][r];
    // これ以上消せない
    if(abs(l - r) <= 1) return 0;

    int ret = 0;
    if(abs(w[l] - w[r - 1]) <= 1 and rec(l + 1, r - 1) == r - l - 2) {
        // 間を全部消せて，両側も消せる
        ret = r - l;
    }

    // 区間を分ける
    for(int mid = l + 1; mid <= r - 1; mid++) {
        chmax(ret, rec(l, mid) + rec(mid, r));
    }
    return dp[l][r] = ret;
}

int main() {
    while(1) {
        cin >> n;
        if(n == 0) break;
        w.resize(n);
        cin >> w;
        dp.resize(n + 1);
        for(auto & v : dp) v.resize(n + 1);
        for(auto & v : dp) for(auto & j : v) j = -1;
        cout << rec(0, n) << endl;
    }
    return 0;
}
