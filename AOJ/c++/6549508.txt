#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <vector>
#include <numeric>
#include <algorithm>
#include <queue>
#include <string>
#include <random>
#include <array>
#include <climits>
#include <map>
#include <cassert>
#include <stack>
#include <iomanip>
#include <cfloat>
#include <bitset>
#include <fstream>
#include <chrono>
#include <memory>

using namespace std;
int solve(const int n, const vector<int> poles) {
	const auto sum = accumulate(poles.begin(), poles.end(), 0);
	vector<vector<bool>> can_make(sum / 2 + 1, vector<bool>(sum / 3 + 1, false));
	can_make[0][0] = true;
	for (const auto p : poles) {
		for (auto i = sum / 2; i >= 0; --i) {
			for (auto j = sum / 3; j >= 0; --j) {
				if (!can_make[i][j]) continue;
				if (i + p <= sum / 2) {
					can_make[i + p][j] = true;
				}
				if (j + p <= sum / 3) {
					can_make[i][j + p] = true;
				}
			}
		}
	}
	int max_min{ 0 };
	for (auto i = 0; i < can_make.size(); ++i) {
		for (auto j = 0; j < can_make[i].size(); ++j) {
			if (!can_make[i][j]) continue;
			const auto min_group = min({ i, j, sum - i - j });
			max_min = max(max_min, min_group);
		}
	}
	return max_min;
}
int main() {
	while (true) {
		int n; cin >> n;
		if (n == 0) break;
		vector<int> poles(n);
		for (auto& p : poles) {
			cin >> p;
		}
		const auto result = solve(n, poles);
		cout << result << '\n';
	}
}
