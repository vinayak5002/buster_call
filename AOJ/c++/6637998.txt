#include <iostream> 
#include <string> 
#include <utility>
#include <vector> 
#include <algorithm> 
#include <map>
#include <queue> 
#include <set>
#include <stack>
#include <iomanip>
#include <cmath>
#include <limits>
#include <complex>
#include <random>
#include <ctime>
using namespace std;
typedef long long ll;
#define rep(i,n) for (int i = 0; i < (n); i++)
#define all(v) v.begin(), v.end()
const ll INF = 1LL<<62;
const int inf = 1 << 29;
const int dx[] = { 1,0,-1,0 };
const int dy[] = { 0,1,0,-1 };
const ll mod = 998244353;
const int ddx[] = { 1,1,-1,-1 };
const int ddy[] = { 1,-1,1,-1 };
const int in = 2147483647;

int n, q;
int dat[1<<19];
void init(int n_) {
    n = 1;
    while (n < n_)n *= 2;

    for (int i = 0; i < 2 * n - 1; i++)dat[i] = in;
}

void update(int id, int val) {
    id += n - 1;
    dat[id] = val;
    if (n == 1)return;
    while (id > 0) {
        id = (id - 1) / 2;
        dat[id] = min(dat[2 * id + 1], dat[2 * id + 2]);
    }
}


int query(int a, int b, int k, int l, int r) {
    if (a > r || b < l)return in;
    if (a <= l && r <= b)return dat[k];
    int vl = query(a, b, k * 2 + 1, l, (r + l) / 2);
    int vr = query(a, b, k * 2 + 2, (r + l) / 2 + 1, r);

    return min(vl, vr);
}


int main() {
    int nn;
    cin >> nn >> q;
    init(nn);

    rep(i,q) {
        ll c, x, y;
        cin >> c >> x >> y;
        if (c == 0) {
            update(x, y);
        }
        else {
            cout << query(x, y, 0, 0, n-1) << endl;
        }
    }


    return 0;
}







