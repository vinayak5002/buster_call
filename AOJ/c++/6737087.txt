#include <iostream>
#include <vector>
#include <queue>
using namespace std;
using Graph = vector<vector<int>>;

void bfs(Graph &G, vector<int> &dist) {
  dist.at(0) = 0;
  queue<int> que;
  que.push(0);
  while (!que.empty()) {
    int v = que.front();
    que.pop();
    for (auto x: G[v]) {
      if (dist.at(x) == -1) {
	dist.at(x) = dist.at(v) + 1;
	que.push(x);
      }
    }
  }
  return;
}

int main() {
  int n;
  cin >> n;
  Graph G(n);
  for (int i = 0; i < n; i++) {
    int u;
    cin >> u;
    int k;
    cin >> k;
    for (int j = 0; j < k; j++) {
      int v;
      cin >> v;
      v--;
      G[i].push_back(v);
    }
  }
  vector<int> dist(n,-1);
  bfs(G, dist);
  for (int i = 0; i < n; i++) {
    cout << i+1 << " " << dist.at(i) << endl;
  }
  return 0;
}
