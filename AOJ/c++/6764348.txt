#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i,n) for (int i = 0; i < n; i++)
#define rrep(i,n) for (int i = n-1; i >= 0; i--)
#define rep2(i,a,b) for (int i = a; i < b; i++)
#define rrep2(i,a,b) for (int i = a-1; i >= b; i--)
#define rep3(i,a,b,c) for (int i = a; i < b; i+=c)
#define rrep3(i,a,b,c) for (int i = a-1; i >= b; i-=c)
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
template<class T> bool chmax(T &a, T b){if (a < b){a = b;return true;} else return false;}
template<class T> bool chmin(T &a, T b){if (a > b){a = b;return true;} else return false;}

int S[1010][1010],S1[1010][1010],S2[1010][1010],S3[1010][1010],S4[1010][1010];

bool solve(){
    int h,w,R,C;cin>>h>>w>>R>>C;
    int n;cin>>n;
    rep2(i,1,h+1)rep2(j,1,w+1){
        S[i][j]=S1[i][j]=S2[i][j]=S3[i][j]=S4[i][j]=1;
    }
    rep(i,n){
        int r,c;cin>>r>>c;
        S[r][c]=S1[r][c]=S2[r][c]=0;
        S3[h-r+1][w-c+1]=S4[h-r+1][w-c+1]=0;
    }
    rep2(i,1,h+1)rep2(j,1,w+1){
        S[i][j]+=S[i-1][j]+S[i][j-1]-S[i-1][j-1];
        if(i+1<=h&&S1[i][j]==0)S1[i+1][j]=0;
        S1[i][j]+=S1[i-1][j]+S1[i][j-1]-S1[i-1][j-1];
        if(j+1<=w&&S2[i][j]==0)S2[i][j+1]=0;
        S2[i][j]+=S2[i-1][j]+S2[i][j-1]-S2[i-1][j-1];
        if(i+1<=h&&S3[i][j]==0)S3[i+1][j]=0;
        S3[i][j]+=S3[i-1][j]+S3[i][j-1]-S3[i-1][j-1];
        if(j+1<=w&&S4[i][j]==0)S4[i][j+1]=0;
        S4[i][j]+=S4[i-1][j]+S4[i][j-1]-S4[i-1][j-1];
    }
    int ans=0;
    rep2(i,R,h+1)rep2(j,C,w+1){
        if(S[i][j]-S[i-R][j]-S[i][j-C]+S[i-R][j-C]!=R*C)continue;
        int cnt=0;
        cnt+=S1[i][w]-S1[i][j]-S1[i-R][w]+S1[i-R][j];
        cnt+=S2[h][j]-S2[i][j]-S2[h][j-C]+S2[i][j-C];
        int ii=h-(i-R),jj=w-(j-C);
        cnt+=S3[ii][w]-S3[ii][jj]-S3[ii-R][w]+S3[ii-R][jj];
        cnt+=S4[h][jj]-S4[ii][jj]-S4[h][jj-C]+S4[ii][jj-C];
        chmax(ans,cnt);
    }
    cout<<ans<<"\n";
    return false;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    while(1){
        if(!solve())break;
    }
}
