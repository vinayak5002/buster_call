#include <bits/stdc++.h>

/* snippet: useful macros and functions */
#define ARC(i, a, b) for(lint i = (a); i < (b); ++i)
#define RC(i, n) ARC(i, 0, n)
#define ARCH(i, a, b) for(lint i = (a) - 1; i >= (b); --i)
#define RCH(i, n) ARCH(i, n, 0)
#define ALL(v) v.begin(), v.end()
#define RALL(v) v.rbegin(), v.rend()
template<class T> T rng(const T &a, const T &b){ return a < b ? b - a : a - b; }
template<class T> void chmaxmin(T &a, const T &b, const T &(*f)(const T &, const T &)){ a = f(a, b); }
#define chmax(a, b) chmaxmin(a, b, std::max)
#define chmin(a, b) chmaxmin(a, b, std::min)

/* snippet: inf struct */
#if __cplusplus >= 201703
struct{ template<class T> constexpr operator T(){ return std::numeric_limits<T>::max(); } constexpr auto operator-(); } inf;
struct{ template<class T> constexpr operator T(){ return std::numeric_limits<T>::lowest(); } constexpr auto operator-(); } negative_inf;
constexpr auto decltype(inf)::operator-(){ return negative_inf; }
constexpr auto decltype(negative_inf)::operator-(){ return inf; }
#endif

/* snippet:  */
int fourd[] = {0, 1, 0, -1, 0};
int eightd[] = {0, 1, 1, -1, 0, -1, -1, 1, 0};

/* snippet: using declarations */
using lint = long long;
using std::cout;
using std::cin;
using std::endl;
using std::cerr;

std::vector<lint> counter;

void count(lint n){
	std::stringstream ss;
	ss << n;
	for(char c : ss.str()) counter[c - '0']++;
}

int main(){
	lint n, m;
	while(cin >> n >> m, n && m){
		counter = std::vector<lint>(10, 0);
		std::vector<lint> a(n), b(m);
		for(lint &t : a) cin >> t;
		for(lint &t : b) cin >> t;
		RC(i, n) RC(j, m){
			count(a[i] * b[j]);
		}
		RC(i, 10) cout << counter[i] << " \n"[i == 9];
	}
}

