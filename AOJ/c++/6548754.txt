#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <vector>
#include <numeric>
#include <algorithm>
#include <queue>
#include <string>
#include <random>
#include <array>
#include <climits>
#include <map>
#include <cassert>
#include <stack>
#include <iomanip>
#include <cfloat>
#include <bitset>
#include <fstream>
#include <chrono>
#include <memory>

using namespace std;
struct NonRootExpression{
	virtual int min_value() const = 0;
	virtual int max_value() const = 0;
};
struct Digit : public NonRootExpression {
	int value;
	Digit(const int value) : value{ value } {};
	int min_value() const override {
		return value;
	}
	int max_value() const override {
		return value;
	}
};
class Operator : public NonRootExpression {
	int _min_value, _max_value;
public:
	shared_ptr<NonRootExpression> left, right;
	char op;
	Operator(const char op, shared_ptr<NonRootExpression> left, shared_ptr<NonRootExpression> right) : op{ op }, left{ move(left) }, right{ move(right) }{
		switch (op) {
		case '-': 
			_min_value = min(this->left->min_value() - this->right->max_value(), this->right->min_value() - this->left->max_value());
			_max_value = max(this->left->max_value() - this->right->min_value(), this->right->max_value() - this->left->min_value());
			break;
		case '+':
			_min_value = this->left->min_value() + this->right->min_value();
			_max_value = this->left->max_value() + this->right->max_value();
			break;
		default: throw 0;
		}
	}
	int min_value() const override {
		return _min_value;
	}
	int max_value() const override {
		return _max_value;
	}
};
shared_ptr<NonRootExpression> parse_non_root_expression(const string& expression, int& index) {
	const auto current = expression[index++];
	if (current == '(') {
		auto left = parse_non_root_expression(expression, index);
		const auto op = expression[index++];
		auto right = parse_non_root_expression(expression, index);
		assert(expression[index++] == ')');
		return make_shared<Operator>(op, move(left), move(right));
	}
	else {
		return make_shared<Digit>(current - '0');
	}
}
int max_root(const char op, const shared_ptr<NonRootExpression>& left, const shared_ptr<NonRootExpression>& mid, const shared_ptr<NonRootExpression>& right) {
	if (op == '+') {
		return left->max_value() + mid->max_value() + right->max_value();
	}
	else {
		return max({
			left->max_value() - mid->min_value() - right->min_value(),
			mid->max_value() - right->min_value() - left->min_value(),
			right->max_value() - left->min_value() - mid->min_value()
			});
	}
}
int max_value(const shared_ptr<NonRootExpression>& new_root, const shared_ptr<NonRootExpression>& old_root) {
	const auto op = dynamic_cast<Operator*>(new_root.get());
	if (op == nullptr) return INT_MIN;
	const auto current_max = max_root(op->op, op->left, op->right, old_root);
	const auto left = max_value(op->left, make_shared<Operator>(op->op, op->right, old_root));
	const auto right = max_value(op->right, make_shared<Operator>(op->op, op->left, old_root));
	return max({ current_max, left, right });
}
int solve(const string expression) {
	int index{ 0 };
	const auto left = parse_non_root_expression(expression, index);
	const auto op = expression[index++];
	const auto mid = parse_non_root_expression(expression, index);
	assert(op == expression[index++]);
	const auto right = parse_non_root_expression(expression, index);
	const auto result = 
		max({
		max_root(op, left, mid, right),
		max_value(left, make_shared<Operator>(op, mid, right)),
		max_value(mid, make_shared<Operator>(op, right, left)),
		max_value(right, make_shared<Operator>(op, left, mid))
			});
	return result;
}
int main() {
	while (true) {
		string expression; cin >> expression;
		if (expression == "-1") break;
		const auto result = solve(expression);
		cout << result << '\n';
	}
}
