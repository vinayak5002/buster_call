#include <bits/stdc++.h>
 
using namespace std;
 
#define REP(i,n) for(int i=0;i<int(n);i++)
typedef long long ll;
typedef pair<ll,ll> P;

double x[110],y[110],z[110],r[110];
int par[110];
int R[110];

void init(int n){
	REP(i,n){
		par[i]=i;
		R[i]=0;
	}
}

int find(int x){
	if(par[x]==x){
	   return x;
	}else{
	  return par[x]=find(par[x]);
	}
}

void unite(int x,int y){
	x=find(x); y=find(y);
	if(x==y) return;

	if(R[x]<R[y]){
		par[x]=y;
	}else{
		par[y]=x;
		if(R[x]==R[y]) R[x]++;
	}
}

bool same(int x,int y){
	return find(x)==find(y);
}


int main(void){
	int i,j,k;
 
	cin.tie(0);  ios_base::sync_with_stdio(false);

	for(k=0;;k++){
		int n;
		cin >> n;
		if(n==0) return 0;
		for(i=1;i<=n;i++) cin >> x[i] >> y[i] >> z[i] >> r[i];

		vector<tuple<double,int,int> > e;

		for(i=1;i<=n;i++){
			for(j=i+1;j<=n;j++){
				double a=sqrt((x[j]-x[i])*(x[j]-x[i])+(y[j]-y[i])*(y[j]-y[i])+(z[j]-z[i])*(z[j]-z[i]));
				if(a>r[i]+r[j]){
					double c=a-r[i]-r[j];
					e.push_back(make_tuple(c,i,j));
					e.push_back(make_tuple(c,j,i));
				}else{
					e.push_back(make_tuple(0,i,j));
					e.push_back(make_tuple(0,j,i));
				}
			}
		}

		sort(e.begin(),e.end());
		init(n+1);

		int m=e.size();
		double ans=0;
		for(i=0;i<m;i++){
			double u;
			int s,t;
			tie(u,s,t)=e[i];
			if(!same(s,t)){
				unite(s,t);
				ans+=u;
			}
		}


		cout.precision(3);
		cout << fixed << ans << endl;

	}


	return 0;
}

