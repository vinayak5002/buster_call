#include <bits/stdc++.h>

#define rep(i, to) for (int i=0; i<to; i++)
#define repr(i, from, to) for (int i=from; i<to; i++)

using namespace std;
using ll = long long;
using P = pair<int, int>;

#ifdef DEBUG
#include "debug.hpp"
#else
template<class T> void print(T v) { cout << v << endl; }
void _main(); int main() { _main(); }
#endif

// ================================================================================ //

#define in(x, from, to) (from <= x && x < to)
#define all(v, func) [&](){ for (auto _: v) if (!(func)) return false; return true; }()
#define any(v, func) [&](){ for (auto _: v) if (func) return true; return false; }()
#define sub(map, p) map[p.second][p.first]

template<class T> auto operator + (pair<T, T> p0, pair<T, T> p1) -> pair<T, T> {
    return pair{ p0.first + p1.first, p0.second + p1.second };
}

int solve(int W, int H, vector<vector<char>> &field) {
    auto que = queue<P>();
    auto dist = vector(2*H+1, vector<int>(2*W+1, -1));
    que.push({ 0, 1 });
    
    while (que.size()) {
        auto p = que.front(); que.pop();
        auto d = sub(dist, p);
        
        if (p.first == 2*W-1 && p.second == 2*H) return d;
        
        for (auto move: { P{ 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } }) {
            auto np = p + move;
            if (in(np.first, 0, 2*W+1) && in(np.second, 0, 2*H+1) && sub(field, np) == '.' && sub(dist, np) == -1) {
                que.push(np);
                sub(dist, np) = d + 1;
            }
        }
    }
    
    return 0;
}

void _main() {
    while (true) {
        int W, H; cin >> W >> H;
        if (W == 0 && H == 0) return;
        
        vector<vector<char>> field(2*H+1, vector<char>(2*W+1, '.'));
        rep(i, 2*W+1) { field[0][i] = '#'; field[2*H][i] = '#'; }
        rep(i, 2*H+1) { field[i][0] = '#'; field[i][2*W] = '#'; }
        field[0][1] = '.';
        field[2*H][2*W-1] = '.';
        
        rep(i, 2*H-1) {
            if (i%2 == 0) {
                rep(x, W-1) {
                    int a; cin >> a; if (a) {
                        field[i+0][(x+1)*2] = '#';
                        field[i+1][(x+1)*2] = '#';
                        field[i+2][(x+1)*2] = '#';
                    }
                }
            } else {
                rep(x, W) {
                    int a; cin >> a; if (a) {
                        field[i+1][x*2+0] = '#';
                        field[i+1][x*2+1] = '#';
                        field[i+1][x*2+2] = '#';
                    }
                }
            }
        }
        
        auto d = solve(W, H, field);
        print((d+1)/2);
    }
}

