#include <iostream>
#include <stdio.h>
#include <limits>
#include <queue>

#define MAX 1001

using namespace std;

static const int NIL = -1;
static const int WHITE = 0;
static const int GRAY = 1;
static const int BLACK = 2;
static const int INFTY = (1 << 21);

int M[MAX][MAX], color[MAX], d[MAX], p[MAX];
int n;
vector < pair<int, int> >adj[MAX];

void dijkstra() {

	int mincost, u;

	priority_queue<pair<int, int> >PQ;

	for (int i = 0; i < n; i++) {
		color[i] = WHITE;
		d[i] = INFTY;
		p[i] = NIL;
	}
	d[0] = 0;
	color[0] = GRAY;

	PQ.push(make_pair(0, 0));

	while (!PQ.empty()) {
		pair<int, int>f = PQ.top();
		PQ.pop();
		int u = f.second;

		color[u] = BLACK;

		if (d[u] < f.first * (-1)) continue;

		for (int i = 0; i < adj[u].size(); i++) {
			int v = adj[u][i].first;
			if (d[v] > d[u] + adj[u][i].second) {
				d[v] = d[u] + adj[u][i].second;
				PQ.push(make_pair(d[v] * (-1), v));
				color[v] = GRAY;
			}
		}
	}

	for (int i = 0; i < n; i++) {
		if (d[i] == INFTY) {
			cout << i << " " << -1 << endl;
		}
		else {
			cout << i << " " << d[i] << endl;
		}
	}
}

int main() {

	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			M[i][j] = INFTY;
		}
	}

	int u, k, v, c;
	for (int i = 0; i < n; i++) {
		cin >> u >> k;
		for (int j = 0; j < k; j++) {
			cin >> v >> c;
			adj[u].push_back(make_pair(v, c));
		}
	}

	dijkstra();

	return 0;
}
