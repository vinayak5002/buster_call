#include <iostream>
#include <vector>
#include <algorithm>
#include <tuple>
#include <map>
#include <queue>

using namespace std;

using ll = long long;
using pii = pair<int, int>;	using pll = pair<ll, ll>;	using pil = pair<int, ll>;	using pli = pair<ll, int>;
using vi = vector<int>;		using vvi = vector<vi>;		using vvvi = vector<vvi>;
using vll = vector<ll>;		using vvll = vector<vll>;	using vvvll = vector<vvll>;
using vb = vector<bool>;	using vvb = vector<vb>;		using vvvb = vector<vvb>;
template <class T> using pqr = priority_queue<T, vector<T>, greater<T>>;

const ll INFL = (ll)1e18;	const int INF = (int)1e9;
const int MOD = 1000000007;

template <class T> inline bool chmax(T& M, const T& x) { if (M < x) { M = x; return true; } return false; } // 最大値を更新（更新されたら true を返す）
template <class T> inline bool chmin(T& m, const T& x) { if (m > x) { m = x; return true; } return false; } // 最小値を更新（更新されたら true を返す）

struct edge { ll to, cost; };

//最小全域木を求める
int prim(int V, vector<vector<edge>> edges) {
	vll mincost(V, INFL);
	vb used(V, false);
	mincost[0] = 0;
	int res = 0;

	while (true) {
		int v = -1;
		//まだ木に含まれていない頂点のうち辺のコストが最小になる頂点を探す
		for (int u = 0; u < V; u++) {
			if (!used[u] && (v == -1 || mincost[u] < mincost[v]))
				v = u;
		}

		if (v == -1) break;
		used[v] = true;
		res += mincost[v];

		for (auto e : edges[v]) {
			int u = e.to;
			mincost[u] = min(mincost[u], e.cost);
		}
	}
	return res;
}

//最小全域木を求める
int prim_priority_queue(int V, vector<vector<edge>> edges) {
	vll mincost(V, INFL);
	vb used(V, false);
	mincost[0] = 0;
	used[0] = true;
	int res = 0;

	pqr<pii> queue;
	for(auto e: edges[0])
		queue.push(make_pair(e.cost,e.to));

	while (true) {
		//まだ木に含まれていない頂点のうち辺のコストが最小になる頂点を探す
		pii q;
		do{
			if(queue.empty())
				return res;
			q = queue.top();queue.pop();
		}while(used[q.second]);

		int v = q.second;
		used[v] = true;
		res += q.first;

		for (auto e : edges[v]) {
			int u = e.to;
			queue.push(make_pair(e.cost,u));
		}
	}
	return res;
}

int main()
{
	int V, E;
	cin >> V >> E;
	vector<vector<edge>> edges(V);

	for (int i = 0; i < E; i++) {
		int s, t, w;
		cin >> s >> t >> w;

		edges[s].push_back(edge{ t,w });
		edges[t].push_back(edge{ s,w });
	}

	int ans = prim_priority_queue(V, edges);
	cout << ans << endl;

	return 0;
}
