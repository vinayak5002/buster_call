#include <iostream>
#include <cstdio>
#include <iterator>
#include <string>
#include <sstream>
#include <bitset>
#include <vector>
#include <array>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
#define _USE_MATH_DEFINES  // for M_PI
#include <cmath>
using std::cin;
using std::cout;
using std::endl;
using std::string;
using std::bitset;
using std::vector;
using std::array;
using std::stack;
using std::queue;
using std::set;
using std::map;
using std::pair;
#define REP(i, n) for (int i = 0; i < static_cast<int>(n); ++i)
#define RREP(i, n) for (int i = static_cast<int>(n)-1; i >= 0; --i)
#define FOR(i, a, b) for (int i = static_cast<int>(a); i < static_cast<int>(b); ++i)
typedef long long llong;


void PrintArray(const int* a, const size_t n);
bool IsPrime(const unsigned int a);
long long Pow(long long a, long long n, long long mod_prime=1);
long long InvMod(long long a, long long mod);


struct Pt2d {
    double x, y;
    Pt2d() {}
    Pt2d(double _x, double _y) : x(_x), y(_y) {}
    Pt2d operator +(Pt2d a) { return Pt2d(x + a.x, y + a.y); }
    Pt2d operator *(double a) { return Pt2d(x * a, y * a); }
    Pt2d operator /(double a) { return Pt2d(x / a, y / a); }
    void Show() { printf("%.8f %.8f\n", x, y); }
};


void KochCurve(int n, Pt2d p1, Pt2d p2) {
    if (n == 0) return;

    Pt2d s = (p1 * 2. + p2) / 3.;
    Pt2d t = (p1 + p2 * 2.) / 3.;
    Pt2d u;
    double th = M_PI * 60. / 180.;
    u.x = (t.x - s.x) * cos(th) - (t.y - s.y) * sin(th) + s.x;
    u.y = (t.x - s.x) * sin(th) + (t.y - s.y) * cos(th) + s.y;

    KochCurve(n - 1, p1, s);
    s.Show();
    KochCurve(n - 1, s, u);
    u.Show();
    KochCurve(n - 1, u, t);
    t.Show();
    KochCurve(n - 1, t, p2);
}


int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    
    int N;
    cin >> N;

    Pt2d p1(0., 0.), p2(100., 0.);
    p1.Show();
    KochCurve(N, p1, p2);
    p2.Show();
}


void PrintArray(const int* a, const size_t n) {
    REP(i, n) {
        cout << a[i];
        if (i != static_cast<int>(n)-1) cout << " ";
    }
    cout << endl;
}


bool IsPrime(const unsigned int a) {
    if (a <= 1) return false;
    if (a <= 3) return true;
    if (a % 2 == 0 || a % 3 ==0) return false;

    for (uint i = 5; i * i <= a; i += 6) {
        if (a % i == 0) return false;  // x6 - 1
        if (a % (i + 2) == 0) return false;  // x6 + 1
    }
    return true;
}


long long Pow(long long a, long long n, long long mod_prime) {
    long long ret = 1;
    if (mod_prime > 1) {
        while (n > 0) {
            if (n & 1) ret = ret * a % mod_prime;
            a = a * a % mod_prime;
            n >>= 1;
        }
    }
    else {
        while (n > 0) {
            if (n & 1) ret *= a;
            a *= a;
            n >>= 1;
        }
    }
    return ret;
}


long long InvMod(long long a, long long mod) {
    long long b = mod, u = 1, v = 0;
    while (b) {
        long long t = a / b;
        a -= t * b; std::swap(a, b);
        u -= t * v; std::swap(u, v);
    }
    u %= mod;
    if (u < 0) u += mod;
    return u;
}


