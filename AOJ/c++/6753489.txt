#include <bits/stdc++.h>
////#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vd = vector<double>;
using vvd = vector<vd>;
using vvvd = vector<vvd>;
#define all(A) A.begin(),A.end()
#define ALL(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll gcd(ll(a), ll(b)) {
    if (b == 0)return a;
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}

ll Eulers_phi(ll n) {
    ll res = 0;
    ll N = n;
    vll P;
    for (ll p = 2; p * p <= N; p++) {
        if (N % p == 0) {
            P.push_back(p);
            while (N % p == 0)N /= p;
        }
    }
    if (N != 1)P.push_back(N);

    N = P.size();
    rep(bit, (1 << N)) {
        ll k = 1;
        ll t = 0;
        rep(i, N) {
            if (bit & (1 << i)) {
                k *= P[i];
                t++;
            }
        }
        res += (t % 2 == 0 ? 1 : -1) * n / k;
    }
    return res;

}


int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);


    while(1){
        ll W,H;
        cin>>W>>H;
        if(W==0)return 0;
        vector<string> S(H);
        rep(i,H)cin>>S[i];

        vvll B(H,vll(W,-1));
        vvll D(H,vll(W,-1));

        vll dy={1,0,-1,0};
        vll dx={0,1,0,-1};
        vector<vector<bool>> seenW(H,vector<bool> (W,false)),seenB(H,vector<bool> (W,false));
        rep(i,H)rep(j,W){
            if(S[i][j]=='B'){
                queue<pair<ll,ll>> Q;
                Q.push({i,j});
                while(!Q.empty()){
                    auto p=Q.front();
                    Q.pop();
                    if(seenB[p.first][p.second])continue;
                    seenB[p.first][p.second]=1;
                    if(S[p.first][p.second]=='.')B[p.first][p.second]=1;
                    rep(d,4){
                        ll ny=p.first+dy[d];
                        ll nx=p.second+dx[d];
                        if(ny<0||nx<0||ny>=H||nx>=W)continue;
                        if(seenB[ny][nx])continue;
                        if(S[ny][nx]=='.')Q.push({ny,nx});
                    }

                }
            }
            else if(S[i][j]=='W'){
                queue<pair<ll,ll>> Q;
                Q.push({i,j});
                while(!Q.empty()){
                    auto p=Q.front();
                    Q.pop();
                    if(seenW[p.first][p.second])continue;
                    seenW[p.first][p.second]=1;
                    if(S[p.first][p.second]=='.')D[p.first][p.second]=1;
                    rep(d,4){
                        ll ny=p.first+dy[d];
                        ll nx=p.second+dx[d];
                        if(ny<0||nx<0||ny>=H||nx>=W)continue;
                        if(seenW[ny][nx])continue;
                        if(S[ny][nx]=='.')Q.push({ny,nx});
                    }

                }
            }
        }
        ll ANB=0,ANW=0;
        rep(i,H)rep(j,W){
            if(B[i][j]*D[i][j]!=-1)continue;
            (B[i][j]==1?ANB:ANW)++;
        }
        cout<<ANB<<" "<<ANW<<endl;
        
    }
    





}
