#include <bits/stdc++.h>
//#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
#define all(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

#include <complex>
const double EPS = 1e-6;
const double pi = atan2(1, 1) * 4.0;
struct Point {
    double x, y,norm=-2;
    Point() = default;
    
    double Norm() {
        if (norm < -1) {
            norm = sqrt(x * x + y * y);
        }
        return norm;
    }
    void normalization() {
        x /= norm;
        y /= norm;
        norm = 1.0;
    }
    Point operator *(const Point& p) {
        Point res;
        res.x = this->x * p.x - this->y * p.y;
        res.y = this->x * p.y + this->y * p.x;
        return res;
    };
    Point operator *(const double& p) {
        Point res;
        res.x = this->x * p;
        res.y = this->y * p;
        return res;
    };
    Point operator +(const Point& p) {
        Point res;
        res.x = this->x + p.x;
        res.y = this->y + p.y;
        return res;
    };

    bool operator ==(const Point& p) const
    {
        return (abs(x - p.x) < EPS && abs(y - p.y) < EPS);
    }
    bool operator !=(const Point& p) const
    {
        return !(*this == p);
    }
    Point operator-() const {
        Point res;
        res.x = -this->x;
        res.y = -this->y;
        return res;
    }
    Point operator -(const Point& p) {
        return *this + (-p);
    };

    void print() {
        cout << x << " " << y << endl;
    }
};


struct Line {
    Point p1, p2;
    Line() = default;
    Line(const Point& p1, const Point& p2) :p1(p1), p2(p2) {}
};

struct Circle {
    Point O;
    double R;
    Circle() = default;
    Circle(const Point& O, double R) : O(O), R(R) {}
};

using Polygon = vector<Point>;

double dot(Point a, Point b) {
    return a.x * b.x + a.y * b.y;
}
double cross(Point a, Point b) {
    return a.x * b.y - a.y * b.x;
}
double dis(Point a, Point b) {
    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) + (a.y - b.y));
}

Point projection(Point p1, Point p2, Point p) {
    Point m = p2 - p1;
    m.normalization();
    Point res;

    res = p1 + m * dot(p - p1, m);
    return res;
}

/*
Point refrection(Point p1, Point p2, Point p) {
    Vect m(p1, p2);
    m.normalization();
    Vect res;

    res = Vect(p1) + m * dot(p - p1, m);
    Point PR;
    PR.x = res.x;
    PR.y = res.y;
    Vect n(p, PR);
    n = n * 2.0;
}*/


bool chmax(ll& p, ll q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

bool chmin(ll& p, ll q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}




int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    Point p1, p2;
    double X, Y;
    cin >> X >> Y;
    p1.x = X;
    p1.y = Y;
    cin >> X >> Y;
    p2.x = X;
    p2.y = Y;
    ll Q;
    cin >> Q;
    cout << fixed << setprecision(16);
    rep(q, Q) {
        cin >> X >> Y;
        Point p = Point{ X,Y };
        projection(p1, p2, p).print();
    }


}
