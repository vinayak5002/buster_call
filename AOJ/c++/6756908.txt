#include<bits/stdc++.h>
using namespace std;
// 複素数
typedef complex<int>xy_t;
// 内積
int dot_product(xy_t a, xy_t b)
{
	return (conj(a) * b).real();
}
// 外積
int cross_product(xy_t a, xy_t b)
{
	return (conj(a) * b).imag();
}
int main()
{
	int n;
	cin >> n;
	vector<xy_t>P(n);
	for (int a = 0; a < n; a++)
	{
		int x, y;
		cin >> x >> y;
		P[a] = xy_t(x, y);
	}
	xy_t o = P[0];
	// 面積の2倍
	int sum = 0;
	for (int a = 1; a <= n - 2; a++)
	{
		xy_t x = P[a];
		xy_t y = P[a + 1];
		sum += cross_product(x - o, y - o);
	}
	double ans = sum / 2.0;
	cout << fixed << setprecision(1);
	cout << ans << endl;
}
