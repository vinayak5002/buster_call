#include <algorithm>
#include <cassert>
#include <cstddef>
#include <cstdint>
#include <iomanip>
#include <iostream>
#include <utility>
#include <vector>

namespace luz {

  using isize = std::ptrdiff_t;
  using usize = std::size_t;

  using i32 = std::int32_t;
  using i64 = std::int64_t;
  using u32 = std::uint32_t;
  using u64 = std::uint64_t;
  
} // namespace luz

namespace luz {

  struct rep {
    struct itr {
      usize i;
      constexpr itr(const usize i) noexcept : i(i) {}
      void operator++() noexcept { ++i; }
      constexpr usize operator*() const noexcept { return i; }
      constexpr bool operator!=(const itr x) const noexcept { return i != x.i; }
    };
    const itr f, l;
    constexpr rep(const usize f, const usize l) noexcept
      : f(std::min(f, l)), l(l) {}
    constexpr auto begin() const noexcept { return f; }
    constexpr auto end() const noexcept { return l; }
  };

  struct rrep {
    struct itr {
      usize i;
      constexpr itr(const usize i) noexcept : i(i) {}
      void operator++() noexcept { --i; }
      constexpr usize operator*() const noexcept { return i; }
      constexpr bool operator!=(const itr x) const noexcept { return i != x.i; }
    };
    const itr f, l;
    constexpr rrep(const usize f, const usize l) noexcept
      : f(l - 1), l(std::min(f, l) - 1) {}
    constexpr auto begin() const noexcept { return f; }
    constexpr auto end() const noexcept { return l; }
  };

} // namespace luz

namespace luz {

  void set_fast_ios() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
  }

} // namespace luz

namespace luz {

  void io_set(usize precision) {
    std::cout << std::fixed << std::setprecision(precision);
    std::cerr << std::fixed << std::setprecision(precision);
  }

} // namespace luz

namespace luz {

  template< typename T = i64 > T input() {
    T tmp;
    std::cin >> tmp;
    return tmp;
  }

} // namespace luz

namespace luz {

  template< typename T >
  std::ostream &operator<<(std::ostream &os, std::vector< T > &vs) {
    for (usize i: rep(0, vs.size())) {
      os << vs[i] << (i + 1 != vs.size() ? " " : "");
    }
    return os;
  }

  template< typename T >
  std::istream &operator>>(std::istream &is, std::vector< T > &vs) {
    for (T &v: vs) {
      is >> v;
    }
    return is;
  }

} // namespace luz

namespace luz {

  template< typename T1, typename T2 >
  std::ostream &operator<<(std::ostream &os, std::pair < T1, T2 > &p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
  }

  template< typename T1, typename T2 >
  std::istream &operator>>(std::istream &is, std::pair< T1, T2 > &p) {
    is >> p.first >> p.second;
    return is;
  }

} // namespace luz

namespace luz {

  template <typename T>
  std::vector<T> make_vector(usize a, T b) {
    return std::vector<T>(a, b);
  }

  template <typename... Ts>
  auto make_vector(usize a, Ts... ts) {
    return std::vector<decltype(make_vector(ts...))>(a, make_vector(ts...));
  }

} // namespace luz

namespace luz {

  template <typename T1, typename T2>
  inline bool chmax(T1 &a, T2 b) {
    return a < b and (a = b, true);
  }

  template <typename T1, typename T2>
  inline bool chmin(T1 &a, T2 b) {
    return a > b and (a = b, true);
  }

} // namespace luz

#include <map>

struct UnionFind {
  std::vector< int > data;

  UnionFind() = default;

  explicit UnionFind(size_t sz) : data(sz, -1) {}

  bool unite(int x, int y) {
    x = find(x), y = find(y);
    if(x == y) return false;
    if(data[x] > data[y]) std::swap(x, y);
    data[x] += data[y];
    data[y] = x;
    return true;
  }

  int find(int k) {
    if(data[k] < 0) return (k);
    return data[k] = find(data[k]);
  }

  int size(int k) {
    return -data[find(k)];
  }

  bool same(int x, int y) {
    return find(x) == find(y);
  }
};

namespace luz {

  void solve(usize n, usize m, usize k) {
    std::vector< usize > us(m), vs(m);
    std::vector< int > ws(m);
    std::vector< bool > ls(m);

    for (usize i: rep(0, m)) {
      us[i] = input() - 1;
      vs[i] = input() - 1;
      ws[i] = input();
      ls[i] = (input<char>() == 'A');
    }

    { // reachablility
      UnionFind uf(n);
      for (usize i: rep(0, m)) {
        uf.unite(us[i], vs[i]);
      }
      for (usize v: rep(0, n)) {
        if (uf.same(0, v)) continue;
        std::cout << -1 << std::endl;
        return;
      }
    }

    auto check = [&](int lambda) {
      //                    < <cost, is_b >, idx>
      std::vector< std::pair< std::pair<int, bool>, usize > > es;

      //                    < <cost, is_a >, idx>
      std::vector< std::pair< std::pair<int, bool>, usize > > res;

      for (usize i: rep(0, m)) {
        int cost = ws[i] + (ls[i] ? lambda : 0);
         es.emplace_back(std::make_pair(cost, not ls[i]), i);
        res.emplace_back(std::make_pair(cost,     ls[i]), i);
      }

      std::sort( es.begin(),  es.end());
      std::sort(res.begin(), res.end());

      usize cnt_a0 = 0, cnt_a1 = 0;
      int mst = 0;

      {
        UnionFind dsu(n);
        for (auto [_, i]: es) {
          if (dsu.same(us[i], vs[i])) continue;
          dsu.unite(us[i], vs[i]);
          cnt_a0 += ls[i];
          mst += ws[i] + (ls[i] ? lambda : 0);
        }
      }
      {
        UnionFind dsu(n);
        for (auto [_, i]: res) {
          if (dsu.same(us[i], vs[i])) continue;
          dsu.unite(us[i], vs[i]);
          cnt_a1 += ls[i];
        }
      }

      return std::make_pair(std::make_pair(cnt_a0, cnt_a1), mst);
    };

    constexpr int inf = 1001001001;
    int ans = inf;
    for (int lambda = -105; lambda <= 105; lambda++) {
      auto [cnt, mst] = check(lambda);
      if (cnt.second <= k and k <= cnt.first) {
        chmin(ans, mst - k * lambda);
      }
    }

    if (ans == inf) ans = -1;
    std::cout << ans << std::endl;
  }

  void main_() {
    usize n, m, k;

    while (std::cin >> n >> m >> k, n) {
      solve(n, m, k);
    }
  }

} // namespace luz

int main() {
  luz::set_fast_ios();
  luz::io_set(15);

  luz::main_();
}

