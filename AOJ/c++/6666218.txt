#include <bits/stdc++.h>
using namespace std;

// template {{{
using i32 = int;
using u32 = unsigned int;
using i64 = long long;
using u64 = unsigned long long;

#define  range(i, l, r) for (i64 i = (i64)(l); i < (i64)(r); (i) += 1)
#define rrange(i, l, r) for (i64 i = (i64)(r) - 1; i >= (i64)(l); (i) -= 1)

#define  whole(f, x, ...) ([&](decltype((x)) container) { return (f)(  begin(container),  end(container), ## __VA_ARGS__); })(x)
#define rwhole(f, x, ...) ([&](decltype((x)) container) { return (f)( rbegin(container), rend(container), ## __VA_ARGS__); })(x)

#define debug(x) cerr << "(" << __LINE__ << ")" << #x << ": " << (x) << endl

constexpr i32 inf   = 1001001001;
constexpr i64 infll = 1001001001001001001ll;

constexpr i32 dx[] = {0, -1, 1, 0, -1, 1, -1, 1}; 
constexpr i32 dy[] = {-1, 0, 0, 1, -1, -1, 1, 1};

struct IoSetup { IoSetup(i32 x = 15){ cin.tie(0); ios::sync_with_stdio(0); cout << fixed << setprecision(x); cerr << fixed << setprecision(x); } } iosetup;

template <typename T = i64> T input() { T x; cin >> x; return x; }

template <typename T> ostream &operator<<(ostream &os, vector<T> &v) { range(i, 0, v.size()) { os << v[i] << (i + 1 != (int)v.size() ? " " : ""); } return os; } 
template <typename T> istream &operator>>(istream &is, vector<T> &v) { for (T &in : v) is >> in; return is; }

template <typename T1, typename T2> ostream &operator<<(ostream &os, pair<T1, T2> p) { os << "(" << p.first << ", " << p.second << ")"; return os; }
template <typename T1, typename T2> istream &operator>>(istream &is, pair<T1, T2> &p) { is >> p.first >> p.second; return is; }

template <typename T> vector<T> make_vector(size_t a, T b) { return vector<T>(a, b); }
template <typename... Ts> auto make_vector(size_t a, Ts... ts) { return vector<decltype(make_vector(ts...))>(a, make_vector(ts...)); }

template <typename T1, typename T2> inline bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
template <typename T1, typename T2> inline bool chmin(T1 &a, T2 b) { return a > b && (a = b, true); }
// }}}

namespace intgeometry2d {
  using isize = std::ptrdiff_t;
  using usize = std::size_t;

  using i32 = std::int_fast32_t;
  using i64 = std::int_fast64_t;
  using u32 = std::uint_fast32_t;
  using u64 = std::uint_fast64_t;
} // intgeometry2d

namespace intgeometry2d {

  template< typename Z >
  class lattice_point {
    Z x_, y_;

  public:
    lattice_point() {}
    lattice_point(Z x_, Z y_) : x_(x_), y_(y_) {}
    
    Z x() const { return x_; }
    Z y() const { return y_; }

    bool operator==(const lattice_point &p) const { return x_ == p.x_ and y_ == p.y_; }
    bool operator!=(const lattice_point &p) const { return x_ != p.x_ or  y_ != p.y_; }

    lattice_point operator+(lattice_point p) { return lattice_point(x_ + p.x_, y_ + p.y_); }
    lattice_point operator-(lattice_point p) { return lattice_point(x_ - p.x_, y_ - p.y_); }

    Z norm() const { return x_ * x_ + y_ * y_; }
  };

} // intgeometry2d

namespace intgeometry2d {

  template< typename Z >
  Z det(const lattice_point<Z> &a, const lattice_point<Z> &b) {
    return a.x() * b.y() - a.y() * b.x();
  }

} // intgeometry2d

namespace intgeometry2d {
  template< typename Z >
  bool argcmp(const lattice_point<Z> &a, const lattice_point<Z> &b) {
    using std::pair;
    bool fa = pair(a.y(), a.x()) < pair<Z, Z>(0, 0);
    bool fb = pair(b.y(), b.x()) < pair<Z, Z>(0, 0);
    Z d = det(a, b);
    return fa != fb ? fa < fb : (d == 0 ? a.norm() < b.norm() : d > 0);
  }
} // intgeometry2d

void solve() {
  int h = input(), w = input();

  auto cs = make_vector(h + 2, w + 2, '.');
  range(i, 1, h + 1) range(j, 1, w + 1) {
    cin >> cs[i][j];
  }

  using point = intgeometry2d::lattice_point<i32>;
  vector< pair<point, int> > pts;
  rrange(i, 0, h + 1) range(j, 0, w + 1) {
    // cs[ i ][j] cs[ i ][j+1]
    // cs[i+1][j] cs[i+1][j+1]
    // centor: (h - i, j) ?
    auto is_dot = [](char c) {
      return '.' == c;
    };

    bool ul = is_dot(cs[i][j]);
    bool ur = is_dot(cs[i][j + 1]);
    bool dl = is_dot(cs[i + 1][j]);
    bool dr = is_dot(cs[i + 1][j + 1]);

    // split pattern:
    // #.    .#
    // .. or ##
    if ((ul != ur) and (ur == dl) and (dl == dr)) {
      pts.emplace_back(point(h - i, j), -1);
    }

    // merge pattern:
    // ..    ##
    // .# or #.
    if (ul == ur and ur == dl and dl != dr) {
      pts.emplace_back(point(h - i, j), 1);
    }
  }

  pts.emplace_back(point(-1, -1), 0);

  auto cmp = [](pair<point, int> &a, pair<point, int> &b) {
    return intgeometry2d::argcmp(a.first, b.first);
  };
  whole(sort, pts, cmp);

  int ans = 1;
  int cnt = 2;
  range(i, 1, pts.size()) {
    point pre = pts[i - 1].first;
    point pt = pts[i].first;
    if (intgeometry2d::det(pre, pt)) {
      chmax(ans, cnt);
    }

    cnt += pts[i].second;
  }

  cout << ans << endl;
}

signed main() {
  solve();
}

