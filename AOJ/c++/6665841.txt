#include <iostream>
#include <vector>
using namespace std;
constexpr int MAX = (1 << 30) - 1 + (1 << 30);

int N;
vector<int> T;

void Update(int n, int v) {
    n += N - 1;
    T[n] = v;
    while (n) {
        n = (n - 1) / 2;
        int c1 = 2 * n + 1;
        int c2 = 2 * n + 2;
        T[n] = min(T[c1], T[c2]);
    };
}

int Find(int a, int b, int k = 0, int l = 0, int r = N) {
    if (a >= r || b <= l) return MAX;
    if (a <= l && b >= r) return T[k];
    int m = l + (r - l) / 2;
    return min(Find(a, b, 2 * k + 1, l, m), Find(a, b, 2 * k + 2, m, r));
}

int main(int argc, const char * argv[]) {
    int Q;
    cin >> N >> Q;
    int K = 1;
    while (K < N) K *= 2;
    N = K;
    
    T.assign(2 * N, MAX);
    for (int q = 0; q < Q; ++q) {
        int C, X, Y;
        cin >> C >> X >> Y;
        if (C == 0) {
            Update(X, Y);
        } else {
            cout << Find(X, Y + 1) << '\n';
        }
    }
    
    return 0;
}

