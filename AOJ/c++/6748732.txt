#include <bits/stdc++.h>

/* snippet: useful macros and functions */
#define ARC(i, a, b) for(lint i = (a); i < (b); ++i)
#define RC(i, n) ARC(i, 0, n)
#define ARCH(i, a, b) for(lint i = (a) - 1; i >= (b); --i)
#define RCH(i, n) ARCH(i, n, 0)
#define ALL(v) v.begin(), v.end()
#define RALL(v) v.rbegin(), v.rend()
template<class T> T rng(const T &a, const T &b){ return a < b ? b - a : a - b; }
template<class T> void chmaxmin(T &a, const T &b, const T &(*f)(const T &, const T &)){ a = f(a, b); }
#define chmax(a, b) chmaxmin(a, b, std::max)
#define chmin(a, b) chmaxmin(a, b, std::min)

/* snippet: inf struct */
#if __cplusplus >= 201703
struct{ template<class T> constexpr operator T(){ return std::numeric_limits<T>::max(); } constexpr auto operator-(); } inf;
struct{ template<class T> constexpr operator T(){ return std::numeric_limits<T>::lowest(); } constexpr auto operator-(); } negative_inf;
constexpr auto decltype(inf)::operator-(){ return negative_inf; }
constexpr auto decltype(negative_inf)::operator-(){ return inf; }
#endif

/* snippet:  */
int fourd[] = {0, 1, 0, -1, 0};
int eightd[] = {0, 1, 1, -1, 0, -1, -1, 1, 0};

/* snippet: using declarations */
using lint = long long;
using std::cout;
using std::cin;
using std::endl;
using std::cerr;

// Implement (union by size) + (path compression)
// Reference:
// Zvi Galil and Giuseppe F. Italiano,
// Data structures and algorithms for disjoint set union problems
struct dsu {
  public:
    dsu() : _n(0) {}
    dsu(int n) : _n(n), parent_or_size(n, -1) {}

    int merge(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        int x = leader(a), y = leader(b);
        if (x == y) return x;
        if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);
        parent_or_size[x] += parent_or_size[y];
        parent_or_size[y] = x;
        return x;
    }

    bool same(int a, int b) {
        assert(0 <= a && a < _n);
        assert(0 <= b && b < _n);
        return leader(a) == leader(b);
    }

    int leader(int a) {
        assert(0 <= a && a < _n);
        if (parent_or_size[a] < 0) return a;
        return parent_or_size[a] = leader(parent_or_size[a]);
    }

    int size(int a) {
        assert(0 <= a && a < _n);
        return -parent_or_size[leader(a)];
    }

    std::vector<std::vector<int>> groups() {
        std::vector<int> leader_buf(_n), group_size(_n);
        for (int i = 0; i < _n; i++) {
            leader_buf[i] = leader(i);
            group_size[leader_buf[i]]++;
        }
        std::vector<std::vector<int>> result(_n);
        for (int i = 0; i < _n; i++) {
            result[i].reserve(group_size[i]);
        }
        for (int i = 0; i < _n; i++) {
            result[leader_buf[i]].push_back(i);
        }
        result.erase(
            std::remove_if(result.begin(), result.end(),
                           [&](const std::vector<int>& v) { return v.empty(); }),
            result.end());
        return result;
    }

  private:
    int _n;
    // root node: -1 * component size
    // otherwise: parent
    std::vector<int> parent_or_size;
};

int main(){
	lint w, h, n, d, b;
	while(cin >> w >> h >> n >> d >> b, w || h || n || d || b){
		--b;
		std::vector<std::vector<lint>> ww(w), hh(h);
		std::vector<std::pair<lint, lint>> bomb(n);
		for(auto &[x, y] : bomb){
			cin >> x >> y;
			--x;
			--y;
		}
		RC(i, n){
			ww[bomb[i].first].push_back(i);
			hh[bomb[i].second].push_back(i);
		}
		RC(i, w) std::sort(ALL(ww[i]), [&](lint p, lint q){ return bomb[p].second < bomb[q].second; });
		RC(i, h) std::sort(ALL(hh[i]), [&](lint p, lint q){ return bomb[p].first < bomb[q].first; });
		dsu uf(n);
		RC(i, w){
			RC(j, (lint)ww[i].size() - 1){
				lint p = ww[i][j], q = ww[i][j + 1];
				// cerr << p << ", " << q << endl;
				if(std::abs(bomb[p].second - bomb[q].second) <= d){
					// cerr << ": " << bomb[p].second << ", " << bomb[q].second << endl;
					uf.merge(p, q);
				}
			}
		}
		RC(i, h){
			RC(j, (lint)hh[i].size() - 1){
				lint p = hh[i][j], q = hh[i][j + 1];
				// cerr << p << ", " << q << endl;
				if(std::abs(bomb[p].first - bomb[q].first) <= d){
					// cerr << ": " << bomb[p].first << ", " << bomb[q].first << endl;
					uf.merge(p, q);
				}
			}
		}
		cout << uf.size(b) << endl;
	}
}

