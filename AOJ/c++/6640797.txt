#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, s, t) for (int i = (int)(s); i < (int)(t); ++i)
#define revrep(i, t, s) for (int i = (int)(t)-1; i >= (int)(s); --i)
#define all(x) begin(x), end(x)
template <typename T> bool chmax(T& a, const T& b) { return a < b ? (a = b, 1) : 0; }
template <typename T> bool chmin(T& a, const T& b) { return a > b ? (a = b, 1) : 0; }

constexpr ll INF = 1e18;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);

    const int di[4] = {1, 0, -1, 0};
    const int dj[4] = {0, -1, 0, 1};

    using T = tuple<ll, int, int, int>;

    while (true) {
        int w, h;
        cin >> w >> h;
        if (w == 0) break;
        vector<vector<int>> s(h, vector<int>(w));
        for (auto& row : s) for (auto& x : row) cin >> x;
        vector<int> c(4);
        for (auto& x : c) cin >> x;
        vector<vector<vector<ll>>> dist(h, vector<vector<ll>>(w, vector<ll>(5, INF)));
        dist[0][0][3] = 0;

        priority_queue<T, vector<T>, greater<>> pq;
        pq.push({0, 0, 0, 3});
        while (!pq.empty()) {
            ll d;
            int i, j, k;
            tie(d, i, j, k) = pq.top();
            pq.pop();
            if (dist[i][j][k] < d) continue;
            // no change
            if (s[i][j] != 4) {
                int nk = (k + s[i][j]) % 4;
                int ni = i + di[nk], nj = j + dj[nk];
                if (0 <= ni && ni < h && 0 <= nj && nj < w && dist[ni][nj][nk] > d) {
                    dist[ni][nj][nk] = d;
                    pq.push({d, ni, nj, nk});
                }
            }
            // change
            rep(l,0,4) {
                int nk = (k + l) % 4;
                int ni = i + di[nk], nj = j + dj[nk];
                if (0 <= ni && ni < h && 0 <= nj && nj < w && dist[ni][nj][nk] > d + c[l]) {
                    dist[ni][nj][nk] = d + c[l];
                    pq.push({d + c[l], ni, nj, nk});
                }
            }
        }

        cout << *min_element(all(dist[h-1][w-1])) << "\n";
    }
}
