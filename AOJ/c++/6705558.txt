#include <iostream>
#include <cstdio>
#include <string>
#include <stdio.h>
#include <bitset>
#include <cmath>
#include <cctype>
#include <iomanip>
#include <algorithm>
#include <set>
#include <vector>
using namespace std;


//ALDS_1_2_C
class trump
{
private:
    /* data */
public:
    bool operator==(const trump &a) const
    {
        if (pict == a.pict && value == a.value)
        {
            return true;
        }
        else
            return false;
            
    }
    char pict;
    int value;
    void set_data(char pict_data,int value_data)
    {
        pict = pict_data;
        value = value_data;
    }
};
void BubbleSort(vector<trump> &C)
{
    int N = C.size();
    for (int i = 0; i < N; i++)
    {
        for (int j = N - 1; j > i; j--)
        {
            if (C[j].value < C[j - 1].value)
            {
                trump tmp;
                tmp.set_data(C[j].pict, C[j].value);
                C[j] = C[j - 1];
                C[j - 1] = tmp;
            }
        }
    }
}
void SelectionSort(vector<trump> &C)
{
    int N = C.size();
    for (int i = 0; i < N; i++)
    {
        int minj = i;
        for (int j = i; j < N; j++)
        {
            if (C[j].value < C[minj].value)
            {
                minj = j;
            }
        }
        trump tmp;
        tmp.set_data(C[i].pict, C[i].value);
        // cout << C[i].value << C[minj].value << endl;
        C[i] = C[minj];
        C[minj] = tmp;
        // cout << C[i].value << C[minj].value << endl;
    }
}
void TrumpCardsImporter()
{
    int N;
    cin >> N;

}
void VectorPrinter(vector<trump> V)
{
    int length = V.size();
    cout << V[0].pict << V[0].value;
    for (int i = 1; i < length; i++)
    {
        cout << " " << V[i].pict << V[i].value;
    }
    cout << endl;
}
int main()
{
    int N;
    cin >> N;
    // cin.ignore();
    vector<trump> cards_imp(N);
    for (int i = 0; i < N; i++)
    {
        string imp;
        cin >> imp;
        cards_imp[i].set_data(imp[0], imp[1]-'0');
    }
    vector<trump> cards_to_bubble = cards_imp;
    vector<trump> cards_to_selection = cards_imp;
    BubbleSort(cards_to_bubble);
    SelectionSort(cards_to_selection);
    VectorPrinter(cards_to_bubble);
    cout << "Stable" << endl;
    VectorPrinter(cards_to_selection);
    if (cards_to_bubble == cards_to_selection)
    {
        cout << "Stable" << endl;
    }
    else
    {
        cout << "Not stable" << endl;
    }
    
    

}


