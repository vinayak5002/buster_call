#include <bits/stdc++.h>
using namespace std;
typedef long long  ll;
#define rep(i,s,n)for(ll i=s;i<n;i++)

const ll INF = 1LL << 60; //Maximum value
ll V; //The number of Node
ll E; //The number of Edge

//Graph Data Structure
const ll SIZE = 500;
vector<vector<long long> > d(SIZE, vector<long long>(SIZE, INF));

void floyd_warshall() {
	for (int k = 0; k < V; ++k) {
		for (int i = 0; i < V; ++i) {
			for (int j = 0; j < V; ++j) {
				d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
			}
		}
	}
}

int main() {
	cin >> V >> E;

	//Warshal_Floyd Initialize
	rep(i, 0, V) rep(j, 0, V) d[i][j] = INF;
	rep(i, 0, V) d[i][i] = 0;

	//Input Value
	rep(e, 0, E) {
		ll a, b, x; cin >> a >> b >> x;
		d[a][b] = x;
	}

	//Warshal_Floyd Execution
	floyd_warshall();

	//Detection Negative Cycle
	bool isnegative = false;
	for (int v = 0; v < V; ++v) if (d[v][v] < 0) isnegative = true;

	if (isnegative) {
		cout << "NEGATIVE CYCLE" << endl;
		return 0;
	}

	//Output each shortest paths
	for (int i = 0; i < V; ++i) {
		for (int j = 0; j < V; ++j) {
			if (d[i][j] < INF / 2) cout << d[i][j];
			else cout << "INF";
			if (j != V - 1) cout << " ";
		}
		cout << endl;
	}
}
