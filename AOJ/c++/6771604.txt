#include <bits/stdc++.h>
using namespace std;

#ifdef _RUTHEN
#include "debug.hpp"
#else
#define show(...) true
#endif

using ll = long long;
#define rep(i, n) for (int i = 0; i < (n); i++)
template <class T> using V = vector<T>;

const int INF = 1 << 30;
const int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int H, W;
    cin >> H >> W;
    V<string> S(H);
    rep(i, H) cin >> S[i];
    V<pair<int, int>> sp, ss;
    int gx, gy;
    rep(i, H) {
        rep(j, W) {
            if (S[i][j] == '@') {
                sp.push_back({i, j});
            }
            if (S[i][j] == '$') {
                ss.push_back({i, j});
            }
            if (S[i][j] == '%') {
                gx = i, gy = j;
            }
        }
    }
    auto calc = [&S, &H, &W](V<pair<int, int>> sc) -> V<V<int>> {
        V<V<int>> dp(H, V<int>(W, INF));
        queue<pair<int, int>> que;
        for (auto [sx, sy] : sc) {
            dp[sx][sy] = 0;
            que.push({sx, sy});
        }
        while (!que.empty()) {
            auto [cx, cy] = que.front();
            que.pop();
            rep(k, 4) {
                int nx = cx + dx[k], ny = cy + dy[k];
                if (!(0 <= nx and nx < H and 0 <= ny and ny < W)) continue;
                if (S[nx][ny] == '#') continue;
                if (dp[nx][ny] != INF) continue;
                dp[nx][ny] = dp[cx][cy] + 1;
                que.push({nx, ny});
            }
        }
        return dp;
    };
    auto disp = calc(sp);
    auto diss = calc(ss);
    rep(i, H) rep(j, W) {
        if (disp[i][j] >= diss[i][j]) {
            S[i][j] = '#';
        }
    }
    auto res = calc(sp);
    cout << (res[gx][gy] == INF ? "No" : "Yes") << '\n';
    return 0;
}
