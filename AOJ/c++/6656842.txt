#include <iostream>
#include <array>
#include <cmath>
#include <vector>
#include <algorithm>

//////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////     HEADER    ///////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
constexpr double EPS = 1e-10;
#define fequal(a, b) (fabs((a) - (b)) < EPS)

class Point2D
{
public:
    Point2D(double X = 0, double Y = 0) : x(X), y(Y) {}
    Point2D(std::istream &is) { is >> x >> y; }

    inline double X() const { return x; };
    inline double Y() const { return y; };

    inline Point2D operator+(const Point2D &p) const { return Point2D{x + p.x, y + p.y}; };
    inline Point2D operator-(const Point2D &p) const { return Point2D{x - p.x, y - p.y}; };

    inline double distance(const Point2D &p) const { return std::sqrt((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y)); };

private:
    double x, y;
};

class Vector2D
{
public:
    Vector2D(double x, double y) : x(x), y(y) {}
    Vector2D(const Point2D &p_start, const Point2D &p_end) : x(p_end.X() - p_start.Y()), y(p_end.Y() - p_start.Y()) {}

    inline double X() const { return x; };
    inline double Y() const { return y; };

    inline Vector2D operator+(const Vector2D &v) const { return Vector2D(x + v.x, y + v.y); };
    inline Vector2D operator-(const Vector2D &v) const { return Vector2D(x - v.x, y - v.y); };
    inline Vector2D operator*(double k) const { return Vector2D(x * k, y * k); };
    inline Vector2D operator/(double k) const { return Vector2D(x / k, y / k); };

    inline double dot(const Vector2D &v) const { return x * v.x + y * v.y; };
    inline double cross(const Vector2D &v) const { return x * v.y - y * v.x; };
    inline double norm() const { return std::sqrt(x * x + y * y); };
    inline Vector2D unit() const { return (*this) / norm(); };

    inline bool parallel(Vector2D &v) const { return fequal(cross(v), 0); };
    inline bool orthogonal(Vector2D &v) const { return fequal(dot(v), 0); };

    double subtended_angle(const Vector2D &v) const;

private:
    double x, y;
};

enum ClockWise
{
    ON_SEGMENT = 0,
    CLOCKWISE = -1,
    COUNTER_CLOCKWISE = 1,
    ONLINE_FRONT = -2,
    ONLINE_BACK = 2,
};

ClockWise counter_clockwise(const Point2D &p0, const Point2D &p1, const Point2D &p2)
{
    auto v_p0_p1 = Vector2D(p0, p1);
    auto v_p0_p2 = Vector2D(p0, p2);

    if (v_p0_p1.cross(v_p0_p2) > 0.0)
        return COUNTER_CLOCKWISE;
    if (v_p0_p1.cross(v_p0_p2) < 0.0)
        return CLOCKWISE;
    if (v_p0_p1.dot(v_p0_p2) < 0.0)
        return ONLINE_BACK;
    if (v_p0_p1.norm() + EPS < v_p0_p2.norm())
        return ONLINE_FRONT;
    return ON_SEGMENT;
};

class Segment2D
{
public:
    Segment2D(const Point2D &p_start, const Point2D &p_end) : s(p_start), e(p_end) {}

    inline Point2D S() const { return s; };
    inline Point2D E() const { return e; };
    inline Vector2D vec() const { return Vector2D(s, e); };
    inline double len() const { return s.distance(e); };

    inline Segment2D operator+(const Segment2D &seg) const { return Segment2D(s + seg.s, e + seg.e); };
    inline Segment2D operator-(const Segment2D &seg) const { return Segment2D(s - seg.s, e - seg.e); };

    inline bool include(const Point2D &p) const { return counter_clockwise(s, e, p) == ON_SEGMENT; };
    bool intercect(const Segment2D &seg) const
    {
        // double cross_product_p0 = vec().cross(Vector2D(s, seg.S())) * vec().cross(Vector2D(s, seg.E()));
        // double cross_product_p1 = seg.vec().cross(Vector2D(seg.S(), s)) * seg.vec().cross(Vector2D(seg.S(), e));

        if (counter_clockwise(seg.S(), seg.E(), s) * counter_clockwise(seg.s, seg.E(), e) <= 0 && counter_clockwise(s, e, seg.S()) * counter_clockwise(s, e, seg.E()) <= 0)
            return true;

        return false;
    };

    inline Point2D projection(const Point2D &p) const
    {
        double t = Vector2D(s, p).dot(vec()) / vec().dot(vec());
        Vector2D v = vec() * t;

        return Point2D(s.X() + v.X(), s.Y() + v.Y());
    };

    double distance(const Point2D &p) const
    {
        if (include(p))
            return 0;

        Point2D p_proj = projection(p);

        if (include(p_proj))
            return p.distance(p_proj);

        return std::min(s.distance(p), e.distance(p));
    };

    double distance(const Segment2D &seg)
    {
        if (intercect(seg))
        {
            std::cout << "intercect" << std::endl;
            return 0;
        }

        return std::min({distance(seg.s), distance(seg.e), seg.distance(s), seg.distance(e)});
    };

private:
    Point2D s;
    Point2D e;
};

//////////////////////////////////////// END OF HEADER ///////////////////////////////////////////

// bool check_intersect(const Point2D &p0, const Point2D &p1, const Point2D &p2, const Point2D &p3)
// {
//     double cross_product_p0 = Vector2D(p0, p1).cross(Vector2D(p0, p2)) * Vector2D(p0, p1).cross(Vector2D(p0, p3));
//     double cross_product_p2 = Vector2D(p2, p3).cross(Vector2D(p2, p0)) * Vector2D(p2, p3).cross(Vector2D(p2, p1));

//     if (cross_product_p0 <= 0 &&
//         cross_product_p2 <= 0 &&
//         counter_clockwise(p0, p1, p2) * counter_clockwise(p0, p1, p3) <= 0)
//         return true;

//     return false;
// }

// Vector2D projection(const Vector2D &a, const Vector2D &b)
// {
//     double x = a.dot(b) / a.dot(a);
//     return a * x;
// }

// Point2D vertical_point(const Point2D &p0, const Point2D &p1, const Point2D &p)
// {
//     auto v1 = Vector2D(p0, p1);
//     auto v2 = Vector2D(p0, p);
//     Vector2D proj_vec = projection(v1, v2);

//     return Point2D{p0.X() + proj_vec.X(), p0.Y() + proj_vec.Y()};
// }

int main()
{
    int q;
    std::cin >> q;

    for (int i = 0; i < q; i++)
    {
        Point2D p0(std::cin), p1(std::cin), p2(std::cin), p3(std::cin);

        Segment2D s1(p0, p1);
        Segment2D s2(p2, p3);
        
        if(s1.intercect(s2))
            std::cout << 1 << std::endl;
        else 
            std::cout << 0 << std::endl;
        
    }
}
