#include<stdio.h>
#include<stdlib.h>

struct node{
  struct node *right;
  struct node *left;
  struct node *parent;
  int key;
};
typedef struct node * Node;
#define NIL NULL

Node root;

Node treeMinimum(Node x){


}

Node treeMaximum(Node x){


}

Node treeSearch(Node u, int k){

    if(u->right==NIL && u->left==NIL){
        if(u->key == k){
        return u;
        }
    
        return NIL;
    }

    if(u->key == k){
        return u;
    }
    else if(u->key < k){
        if(u->right == NIL){
            return NIL;
        }
        return treeSearch(u->right, k);     
    }
    else{
        return treeSearch(u->left, k);
    }

}

Node treeSuccessor(Node x){


}

void treeDelete(Node z){
  Node y; // node to be deleted
  Node x; // child of y



}

void insert(int k){
  Node y = NIL;
  Node x = root;
  Node z;

  z = malloc(sizeof(struct node));  /*malloc関数による動的割り当て*/
  z->key = k;
  z->left = NIL;
  z->right = NIL;

  while(x != NIL){
      y = x;
      if(z->key < x->key){
          x = x->left;
      }
      else{
          x = x->right;
      }
  }  /*最初はx=root=NULLであるためループ無し*/
  
  z->parent = y;
  if(y==NIL){
      root = z;
  } /*ここで初めてrootの値が決まる*/

  else{
      if(z->key < y->key){
          y->left = z;
      }
      else{
          y->right = z;
      }
  }

}

/*先行順探索*/
void preParse(Node u){
    if(u == NIL) return;
    printf(" %d", u->key);
    preParse(u->left);
    preParse(u->right);
}

/*中間順探索*/
void inParse(Node u){
    if(u == NIL) return;
    inParse(u->left);
    printf(" %d", u->key);
    inParse(u->right);
}


int main(){
  int n, i, x;
  char com[20];
  scanf("%d", &n);

  for ( i = 0; i < n; i++ ){
    scanf("%s", com);  /*どのような操作をするのか入力*/

    if ( com[0] == 'f' ) /*findの場合*/{
      scanf("%d", &x);
      Node t = treeSearch(root, x);
      if ( t != NIL ) printf("yes\n");
      else printf("no\n");
    } 
    else if ( com[0] == 'i' ) /*insertの場合*/{
      scanf("%d", &x);
      insert(x);
    } 
    else if ( com[0] == 'p' ) /*printの場合*/{
      inParse(root);
      printf("\n");
      preParse(root);
      printf("\n");
    } 
    else if ( com[0] == 'd' ) /*deleteの場合*/{
      scanf("%d", &x);
      treeDelete(treeSearch(root, x));
    }
  }

  return 0;
}

