#include<bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#define int long long
#define lb long double
#define gmax(x,y) x=max(x,y)
#define gmin(x,y) x=min(x,y)
#define F first
#define S second
#define P pair
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define rep(i,a,b) for(int i=a;i<b;i++)
#define V vector
#define RE return
#define ALL(a) a.begin(),a.end()
#define MP make_pair
#define PB emplace_back
#define PF emplace_front
#define FILL(a,b) memset(a,b,sizeof(a))
#define lwb lower_bound
#define upb upper_bound
#define lc (x<<1)
#define rc ((x<<1)^1)
#define y1 yyyy1111
using namespace std;
using namespace __gnu_pbds;
int to[100005],add[100005],a[100005],b[100005],c[100005],n,in[100005],to2[100005];
int dis[100005],d[100005];
int out[100005];
V<P<int,int> > q1[100005],q2[100005];
V<int> v[100005],node[100005];
int vis[100005],adddis[100005];
int fa[100005];
int val[100005],rt[100005],s1[100005],s2[100005];
int get(int x){
	RE (fa[x]==x)?x:(fa[x]=get(fa[x]));
}
int dep[100005];
#define mod 1000000007
map<int,V<int> > mp;
void dfs(int x,int root){
	mp[dep[x]+a[x]].PB(x);
	for(auto u:q1[x]){
		if(mp.count(dep[x]+u.S)&&!mp[dep[x]+u.S].empty()){
			to2[u.F]=mp[dep[x]+u.S].back();
			dis[u.F]=d[x]-d[to2[u.F]];
		}else q2[root].PB(MP(u.F,u.S+dep[x])),adddis[u.F]=d[x];
	}
	for(auto u:v[x])dep[u]=dep[x]+add[u],d[u]=d[x]+1,dfs(u,root);
	mp[dep[x]+a[x]].pop_back();
}
int nd[100005];
map<int,set<P<int,int> > > mp2;
signed main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	int st;
	cin>>n>>st;
	q1[1].PB(MP(0,st));
	FOR(i,1,n)fa[i]=i;
	FOR(i,1,n){
		cin>>a[i]>>b[i]>>c[i]>>add[i]>>to[i];
		if(to[i]<=n)in[to[i]]++,fa[i]=to[i];
		else out[i]=1;
	}
	queue<int> q;
	FOR(i,1,n)if(!in[i])q.emplace(i);
	while(!q.empty()){
		int x=q.front();q.pop();
		if(to[x]<=n)v[to[x]].PB(x);
		if(--in[to[x]]==0)q.emplace(to[x]);
	}
	int len=0;
	FOR(i,1,n)if(in[i]&&!vis[i]){
		int x=i;
		x=to[x];
		++len;
		node[i].PB(i);
		vis[i]=1;
		val[i]+=add[i];
		fa[i]=i;
		while(x!=i){
			val[len]+=add[x];
			vis[x]=1;fa[x]=i;
			node[i].PB(x);
			x=to[x];
		}
	}
	FOR(i,1,n){
		if(c[i]<=n)q1[c[i]].PB(MP(i,a[i]+b[i]));
		else to2[i]=n+1,dis[i]=1;
	}
	FOR(i,1,n)if(to[i]>n||in[i]){
		rt[i]=1;
		dfs(i,i);
	}
	FOR(i,1,n)if(rt[i]){
		if(to[i]>n){
			for(auto u:q2[i])to2[u.F]=n+1,dis[u.F]=0;
		}else if(get(i)==i){
			len=0;
			for(auto u:node[i])nd[++len]=u;
			FOR(j,1,len){
				s1[j]=s1[j-1]+add[nd[j]];
			}
			s2[len+1]=0;
			for(int j=len;j>=1;j--){
				s2[j]=s2[j+1]+add[nd[j]];
			}
			mp2.clear();
			if(val[i]<0){
				FOR(j,1,len){
					s1[j]=-s1[j],s2[j]=-s2[j];a[nd[j]]=-a[nd[j]];
					for(auto &u:q2[nd[j]])u.S=-u.S;
				}
				val[i]=-val[i];
			}
			if(val[i]>0){
				for(int j=len;j>=1;j--){
					mp2[((a[nd[j]]+s2[j])%val[i]+val[i])%val[i]].emplace(MP(a[nd[j]]+s2[j],j));
					for(auto u:q2[nd[j]]){
						int nowval=u.S+s2[j];
						if(mp2.count((nowval%val[i]+val[i])%val[i])){
							set<P<int,int> >  &ts=mp2[(nowval%val[i]+val[i])%val[i]];
							auto iter=ts.lower_bound(MP(nowval,j));
							if(iter!=ts.end()){
								to2[u.F]=nd[(*iter).S];
								dis[u.F]=((*iter).S-j+((*iter).F-nowval)/val[i]*len)%mod;
							}
						}
					}
				}
				mp2.clear();
				FOR(j,1,len){
					mp2[((a[nd[j]]-s1[j-1])%val[i]+val[i])%val[i]].emplace(MP(a[nd[j]]-s1[j-1],j));
					for(auto u:q2[nd[j]]){
						int nowval=u.S+s2[j];
						if(mp2.count((nowval%val[i]+val[i])%val[i])){
							set<P<int,int> >  &ts=mp2[(nowval%val[i]+val[i])%val[i]];
							auto iter=ts.lower_bound(MP(nowval,0));
							if(iter!=ts.end()&&(to2[i]==0||(*iter).S+len-j+((*iter).F-nowval)/val[i]<dis[i])){
								to2[u.F]=nd[(*iter).S];
								dis[u.F]=((*iter).S-j+len+((*iter).F-nowval)/val[i]*len)%mod;
							}
						}
					}
				}
			}else{
				for(int j=len;j>=1;j--){
					mp2[a[nd[j]]+s2[j]].emplace(MP(a[nd[j]]+s2[j],j));
					for(auto u:q2[nd[j]]){
						int nowval=u.S+s2[j];
						if(mp2.count(nowval)){
							set<P<int,int> > &ts=mp2[nowval];
							auto iter=ts.lower_bound(MP(nowval,j));
							if(iter!=ts.end()){
								to2[u.F]=nd[(*iter).S];
								dis[u.F]=(*iter).S-j;
							}
						}
					}
				}
				mp2.clear();
				FOR(j,1,len){
					mp2[a[nd[j]]-s1[j-1]].emplace(MP(a[nd[j]]-s1[j-1],j));
					for(auto u:q2[nd[j]]){
						int nowval=u.S+s2[j];
						if(mp2.count(nowval)){
							set<P<int,int> > &ts=mp2[nowval];
							auto iter=ts.lower_bound(MP(nowval,0));
							if(iter!=ts.end()&&(to2[i]==0||(*iter).S+len-j<dis[i])){
								to2[u.F]=nd[(*iter).S];
								dis[u.F]=(*iter).S-j+len;
							}
						}
					}
				}
			}
		}
	}
	FILL(vis,0);
	int sum=0,now=0;
	do{
		sum+=dis[now]+1+adddis[now];
		sum%=mod;
		now=to2[now];
		if(now==0||vis[now]){
			cout<<-1<<'\n';RE 0;
		}
		vis[now]=1;
	}while(c[now]<=n&&now<=n);
	cout<<sum<<'\n';
	RE 0;
}





