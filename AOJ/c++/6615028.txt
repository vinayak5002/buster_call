#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define rep(i,a,b) for(ll i = a; i < b; i++)
#define REP(i,a,b) for(ll i = a; i <=b; i++)
#define fore(i,a) for(auto &i : a)
#define all(x) (x).begin(),(x).end()
#define fix(i) fixed << setprecision(i)
#define nextp(v) next_permutation(all(v))



template<class T>bool chmax(T& a, const T& b) { if(a < b) { a = b; return 1; } return 0; }
template<class T>bool chmin(T& a, const T& b) { if(b < a) { a = b; return 1; } return 0; }

using pii = pair<int, int>;
using pll = pair<ll, ll>;
using pq = priority_queue<int>;
using pqll = priority_queue<ll>;
using vpic = vector<pair<int, char>>;



const ll INF = LLONG_MAX/2;
const ll MOD = 1000000007;





void insertionSort(vector<int> &a, int N, int G, int &Cnt) {
  rep(i,G,N) {
    int V = a[i], j = i - G;
    while(j >= 0 && a[j] > V) {
      a[j+G] = a[j];
      j = j - G;
      Cnt++;
    }
    a[j+G] = V;
  }
  
  return;
}

void shellSort(vector<int> a, int N) {
  int P = 1;
  vector<int> g;
  while(P < N) {
    g.push_back(P);
    P *= 4;
  }
  
  printf("%d\n", g.size());
  
  int A = 0, Cnt = 0;
  rep(i_,0,g.size()) {
    int i = g.size()-1-i_;
    insertionSort(a, N, g[i], Cnt);
    
    if(i_) printf(" ");
    printf("%ld", g[i]);
  }
  printf("\n");
  
  printf("%ld\n", Cnt);
  
  
  rep(i,0,N) {
    printf("%d\n", a[i]);
  }
  
  
  return;
}

int main() {
  int N; cin >> N;
  
  vector<int> a(N);
  rep(i,0,N) {
    cin >> a[i];
  }
  
  shellSort(a, N);
  
  return 0;
}
