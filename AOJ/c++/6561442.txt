#include<bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef long double ld;

const ll INF = 1e18;
const ld EPS = 1e-10;

template<class T>
class lazy_segmenttree_rmq{
  private:
    ll n;
  	vector<T> data;
    vector<T> lazy;
  public:
    lazy_segmenttree_rmq(vector<T> vec){
      ll sz = vec.size();
      n = 1;
      while(n < sz) n *= 2;
      data.resize(2 * n - 1, INF);
      lazy.resize(2 * n - 1, 0);

      for(ll i = 0; i < sz; i++) data[i + n - 1] = vec[i]; // 最下段はn-1から始まる
      for(ll i = n - 2; i >= 0; i--) data[i] = min(data[2 * i + 1], data[2 * i + 2]); // iの子は 2i+1と2i+2
    }
    // k番目のノードの遅延評価
    void eval(ll k, ll l, ll r){
      if(lazy[k] != 0){
        data[k] += lazy[k];
        if(r - l > 1){
          lazy[k * 2 + 1] += lazy[k];
          lazy[k * 2 + 2] += lazy[k]; // 最下段でないなら子に伝搬
        }
        lazy[k] = 0;
      }
    }
    // [a, b)の要素をxに更新する
    void update(ll a, ll b, T x, ll k = 0, ll l = 0, ll r = -1){
      if(r < 0) r = n;
      eval(k, l, r);
      if(b <= l || r <= a) return; // 交差しない場合
      else if(a <= l && r <= b){ // 完全に含む場合
        lazy[k] += x;
        eval(k, l, r);
      }
      else{ // 一部含む場合
        update(a, b, x, 2 * k + 1, l, (l + r) / 2);
        update(a, b, x, 2 * k + 2, (l + r) / 2, r);
        data[k] = min(data[2 * k + 1], data[2 * k + 2]);
      }
    }
    // (a, b]の最小値を返す
    T query(ll a, ll b, ll k = 0, ll l = 0, ll r = -1){
      if(r < 0) r = n;
      eval(k, l, r);
      if(b <= l || r <= a) return INF; // 交差しない場合
      else if(a <= l && r <= b) return data[k]; // 完全に含む場合
      else{
        T vl = query(a, b, 2 * k + 1, l, (l + r) / 2);
        T vr = query(a, b, 2 * k + 2, (l + r) / 2, r);
        return min(vl, vr);
      }
    }
};


int main(){
  cout << fixed << setprecision(20);
  
  ll n, q;
  cin >> n >> q;

  vector<ll> vec(n, 0);
  lazy_segmenttree_rmq<ll> st(vec);

  while(q){
    ll c, s, t, x;
    cin >> c;
    if(c == 0){
      cin >> s >> t >> x;
      st.update(s, t + 1, x);
    }
    else{
      cin >> s >> t;
      cout << st.query(s, t + 1) << endl;
    }
    q--;
  }
  
  return 0;
}


