#include <algorithm>
#include <cassert>
#include <climits>
#include <cmath>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <random>
#include <complex>
#include <bitset>
#include <iomanip>
#include <memory>
#include <functional>

#define rep(i, n, s) for (int i = (s); i < int(n); i++)
#define per(i, n, s) for (int i = (n) - 1; i >= int(s); i--)
#define MM << " " <<
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)

template <class T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <class T>
using MaxHeap = std::priority_queue<T>;

using ll = long long;
using Pii = std::pair<int, int>;
using Pll = std::pair<ll, ll>;
using Pdd = std::pair<double, double>;

template <class T>
bool chmin(T &a, const T b) {
    if (b < a) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
bool chmax(T &a, const T b) {
    if (a < b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
void vdeb(const std::vector<T> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        if (i == n - 1)
            std::cout << da[i];
        else
            std::cout << da[i] << " ";
    }
    std::cout << std::endl;
}
template<class T>
void vdeb(const std::vector<std::vector<T>> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        // std::cout << i << " : ";
        vdeb(da[i]);
    }
    std::cout << std::endl;
}

using namespace std;

const int MOD = 1<<15;

using Itr = string::const_iterator;
using Matrix = vector<vector<int>>;
using Row = vector<int>;

Itr it;
map<char, Matrix> mp;

Matrix term();
Matrix factor();
Matrix primary();
Matrix idx_primary(Matrix &&);
Matrix trs_primary(Matrix &&);
Matrix matrix();
int inum();

char peek() {
    return *it;
}

char read() {
    char ret = *it;
    ++it;
    return ret;
}

char var() {
    assert('A' <= peek() && peek() <= 'Z');
    return read();
}

Matrix expr() {
    // cerr << peek() << endl;
    auto ret = term();
    while(1) {
        char op = peek();
        if(op == '+') {
            read();
            auto nxt = term();
            assert(nxt.size() == ret.size());
            assert(nxt[0].size() == ret[0].size());
            rep(i,ret.size(),0) {
                rep(j,ret[i].size(),0) {
                    ret[i][j] += nxt[i][j];
                    ret[i][j] %= MOD;
                }
            }
        } else if(op == '-') {
            read();
            auto nxt = term();
            assert(nxt.size() == ret.size());
            assert(nxt[0].size() == ret[0].size());
            rep(i,ret.size(),0) {
                rep(j,ret[i].size(),0) {
                    ret[i][j] -= nxt[i][j];
                    ret[i][j] = (ret[i][j] + MOD) % MOD;
                }
            }
        } else {
            break;
        }
    }
    return ret;
}

Matrix term() {
    auto ret = factor();
    // cerr << peek() << endl;
    while(1) {
        char op = peek();
        if(op == '*') {
            read();
            auto nxt = factor();
            if(ret.size() == 1 && ret[0].size() == 1) {
                swap(ret, nxt);
                rep(i,ret.size(),0) rep(j,ret[i].size(),0) {
                    ret[i][j] *= nxt[0][0];
                    ret[i][j] %= MOD;
                }
            } else if (nxt.size() == 1 && nxt[0].size() == 1) {
                rep(i,ret.size(),0) rep(j,ret[i].size(),0) {
                    ret[i][j] *= nxt[0][0];
                    ret[i][j] %= MOD;
                }
            } else {
                assert(ret[0].size() == nxt.size());
                auto tmp = Matrix(ret.size(), Row(nxt[0].size()));
                rep(i,ret.size(),0) {
                    rep(j,nxt[0].size(),0) {
                        rep(k,nxt.size(),0) {
                            tmp[i][j] += ret[i][k] * nxt[k][j] % MOD;
                        }
                        tmp[i][j] %= MOD;
                    }
                }
                ret = tmp;
            }
        } else {
            break;
        }
    }
    return ret;
}

Matrix factor() {
    int sgn = 1;
    while(1) {
        char op = peek();
        if(op == '-') {
            read();
            sgn *= -1;
        } else {
            break;
        }
    }
    auto ret = primary();
    if(sgn == -1) {
        rep(i,ret.size(),0) {
            rep(j,ret[i].size(),0) {
                ret[i][j]  = MOD - ret[i][j];
            }
        }
    }
    return ret;
}

Matrix primary() {
    char head = peek();
    Matrix ret;
    if(isdigit(head)) ret = {{inum()}};
    else if(isalpha(head)) ret = mp[var()];
    else if(head == '[') ret = matrix();
    else if(head == '(') {
        read();
        ret = expr();
        assert(read() == ')');
    }
    while(1) {
        char op = peek();
        // cerr << op << endl;
        if(op == '(') {
            ret = idx_primary(move(ret));
        } else if(op == '\'') {
            ret = trs_primary(move(ret));
        } else {
            break;
        }
    }
    return ret;
}

Matrix idx_primary(Matrix &&m) {
    assert(read() == '(');
    auto l = expr();
    assert(l.size() == 1);
    assert(read() == ',');
    auto r = expr();
    assert(r.size() == 1);
    assert(read() == ')');
    Matrix ret(l[0].size(), Row(r[0].size()));
    rep(i,l[0].size(),0) rep(j,r[0].size(),0) {
        ret[i][j] = m[l[0][i]-1][r[0][j]-1];
    }
    // assert(ret.size() == l.size());
    // vdeb(ret);
    return ret;
}

Matrix trs_primary(Matrix &&m) {
    assert(read() == '\'');
    Matrix ret(m[0].size(), Row(m.size()));
    rep(i,m.size(),0) rep(j,m[0].size(),0) {
        ret[j][i] = m[i][j];
    }
    return ret;
}

int inum() {
    int ret = 0;
    while(isdigit(peek())) {
        ret = ret * 10 + (read() - '0');
    }
    return ret;
}

Matrix row() {
    auto ret = expr();
    while(peek() == ' ') {
        read();
        // cerr << peek() << endl;
        auto nxt = expr();
        assert(ret.size() == nxt.size());
        rep(i,ret.size(),0) {
            copy(all(nxt[i]), back_inserter(ret[i]));
        }
    }
    return ret;
}

Matrix matrix() {
    assert(read() == '[');
    auto ret = row();
    while(peek() == ';') {
        read();
        auto nxt = row();
        assert(ret[0].size() == nxt[0].size());
        for(auto &i : nxt) ret.emplace_back(i);
    }
    assert(read() == ']');
    return ret;
}

int n;

void solve() {
    mp.clear();
    vector<string> da(n);
    for(auto &i : da) getline(cin, i);
    for(auto &i : da) {
        it = begin(i);
        assert(isalpha(peek()));
        auto v = read();
        assert(read() == '=');
        auto e = expr();
        assert(read() == '.');
        for(auto &j : e) vdeb(j);
        mp[v] = e;
    }
    cout << "-----" << endl;
}

int main() {
    while(1) {
        cin >> n; cin.ignore();
        if(n == 0) break;
        solve();
    }
}
