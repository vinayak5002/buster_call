#pragma GCC optimize(2)
#include<iostream>
#include<algorithm>
#include<array>
#include<vector>
#include<utility>
#include <map>
#define N 3
#define PAIR array<array<int, N>, N>, struct cost
using namespace std;

map<array<array<int, N>, N>, vector<pair<PAIR> >::iterator>* Exist_open = new map<array<array<int, N>, N>, vector<pair<PAIR> >::iterator>;

struct cost
{
    int F;  //代价F = G+H
    int G;  //距离起点步长
    int H;  //不在位的数字
};

struct result
{
    int row, column;
};

//返回0的位置
struct result find_zero( array<array<int, N>, N> arr )
{
    struct result ans;
    for( int i = 0 ; i < N ; i++ ){
        for( int j = 0 ; j < N ; j++ ){
            if( arr[i][j] == 0 ){
                ans.row = i;
                ans.column = j;
                return ans;
            }
        }
    }
    return ans;
}

//确定不在位的数字个数
int find_diff( array<array<int, N>, N> arr1)
{
    int ans = 0;
    for( int i = 0 ; i < N ; i++ ){
        for( int j = 0 ; j < N ; j++ ){
            ans += ( abs((arr1[i][j]-1)%3-j) + abs((arr1[i][j]-1)/3-i) );
        }
    }
    return ans;
}

bool can_new_array( string str, struct result zero )
{
    if( str == "up" ){
        return (zero.row != 0);
    }
    else if( str == "down" ){
        return (zero.row != N-1);
    }
    else if( str == "left" ){
        return (zero.column != 0);
    }
    else if( str == "right" ){
        return (zero.column != N-1);
    }
    return false;
}

bool cmp(const pair<PAIR> &k1,const pair<PAIR> &k2)
{
    return k1.second.F > k2.second.F;
}

int push_new( vector<pair<PAIR> >& Open, map<PAIR>* Close,
              pair<PAIR>& h, array<array<int, N>, N> final_array )
{
    struct result zero;
    zero = find_zero(h.first);
    if( can_new_array("up", zero) ){
        array<array<int, N>, N> new_arr;
        new_arr = h.first;
        new_arr[zero.row][zero.column] = (h.first)[zero.row-1][zero.column];
        new_arr[zero.row-1][zero.column] = 0;
        if( new_arr == final_array ){
            return h.second.G;
        }
        else if( (*Close).find(new_arr) ==  (*Close).end() ){
            struct cost c;  //新状态代价
            c.G = h.second.G+1;
            c.H = find_diff(new_arr);
            c.F = c.G + c.H;
            auto i = (*Exist_open).find(new_arr);
            if( i != (*Exist_open).end() ){
                if( c.F < (*i).second->second.F ){
                    (*i).second->second.F = c.F;
                    (*i).second->second.G = c.G;
                }
            }
            else{
                Open.push_back({new_arr, c});
                push_heap(Open.begin(), Open.end(), cmp);
                (*Exist_open).insert({new_arr, find_if(Open.begin(), Open.end(), [new_arr] (pair<PAIR> p) { return p.first ==  new_arr; })});
            }
        }
    }
    if( can_new_array("down", zero) ){
        array<array<int, N>, N> new_arr;
        new_arr = h.first;
        new_arr[zero.row][zero.column] = (h.first)[zero.row+1][zero.column];
        new_arr[zero.row+1][zero.column] = 0;
        if( new_arr == final_array ){
            return h.second.G;
        }
        else if( (*Close).find(new_arr) ==  (*Close).end() ){
            struct cost c;  //新状态代价
            c.G = h.second.G+1;
            c.H = find_diff(new_arr);
            c.F = c.G + c.H;
            auto i = (*Exist_open).find(new_arr);
            if( i != (*Exist_open).end() ){
                if( c.F < (*i).second->second.F ){
                    (*i).second->second.F = c.F;
                    (*i).second->second.G = c.G;
                }
            }
            else{
                Open.push_back({new_arr, c});
                push_heap(Open.begin(), Open.end(), cmp);
                (*Exist_open).insert({new_arr, find_if(Open.begin(), Open.end(), [new_arr] (pair<PAIR> p) { return p.first ==  new_arr; })});
            }
        }
    }
    if( can_new_array("left", zero) ){
        array<array<int, N>, N> new_arr;
        new_arr = h.first;
        new_arr[zero.row][zero.column] = (h.first)[zero.row][zero.column-1];
        new_arr[zero.row][zero.column-1] = 0;
        if( new_arr == final_array ){
            return h.second.G;
        }
        else if( (*Close).find(new_arr) ==  (*Close).end() ){
            struct cost c;  //新状态代价
            c.G = h.second.G+1;
            c.H = find_diff(new_arr);
            c.F = c.G + c.H;
            auto i = (*Exist_open).find(new_arr);
            if( i != (*Exist_open).end() ){
                if( c.F < (*i).second->second.F ){
                    (*i).second->second.F = c.F;
                    (*i).second->second.G = c.G;
                }
            }
            else{
                Open.push_back({new_arr, c});
                push_heap(Open.begin(), Open.end(), cmp);
                (*Exist_open).insert({new_arr, find_if(Open.begin(), Open.end(), [new_arr] (pair<PAIR> p) { return p.first ==  new_arr; })});
            }
        }
    }
    if( can_new_array("right", zero) ){
        array<array<int, N>, N> new_arr;
        new_arr = h.first;
        new_arr[zero.row][zero.column] = (h.first)[zero.row][zero.column+1];
        new_arr[zero.row][zero.column+1] = 0;
        if( new_arr == final_array ){
            return h.second.G;
        }
        else if( (*Close).find(new_arr) ==  (*Close).end() ){
            struct cost c;  //新状态代价
            c.G = h.second.G+1;
            c.H = find_diff(new_arr);
            c.F = c.G + c.H;
            auto i = (*Exist_open).find(new_arr);
            if( i != (*Exist_open).end() ){
                if( c.F < (*i).second->second.F ){
                    (*i).second->second.F = c.F;
                    (*i).second->second.G = c.G;
                }
            }
            else{
                Open.push_back({new_arr, c});
                push_heap(Open.begin(), Open.end(), cmp);
                (*Exist_open).insert({new_arr, find_if(Open.begin(), Open.end(), [new_arr] (pair<PAIR> p) { return p.first ==  new_arr; })});
            }
        }
    }
    return -1;
}

int main()
{
#ifdef Ac1dX
    freopen("C:\\Users\\17261\\Desktop\\Ac1dX\\acm\\data.in", "r", stdin);
    freopen("C:\\Users\\17261\\Desktop\\Ac1dX\\acm\\data.out", "w", stdout);
#endif
    array<array<int, N>, N> final_array = {1,2,3,4,5,6,7,8,0};  //终止状态
    array<array<int, N>, N> start_array = {}; //起始状态
    for( int i = 0 ; i < N ; i++ ){
        for( int j = 0 ; j < N ; j++ ){
            cin >> start_array[i][j];
        }
    }
    if( start_array == final_array ){
        cout << 0;
    }
    else{
        struct cost c;  //起始状态代价
        c.G = 0;
        c.H = find_diff(start_array);
        c.F = c.G + c.H;

        vector<pair<PAIR> > Open;    //表中元素等待检查
        map<PAIR>* Close = new map<PAIR>;   //表中元素不再关注
        if(start_array == final_array){;}
        Open.push_back({start_array, c});
        (*Exist_open).insert({start_array, find_if(Open.begin(), Open.end(), [start_array] (pair<PAIR> p) { return p.first ==  start_array; })});
        make_heap(Open.begin(), Open.end(), cmp);

        while( !Open.empty() ){
            pop_heap(Open.begin(), Open.end(), cmp);
            pair<PAIR> h = *(Open.rbegin()); //代价最小的元素
            (*Close).insert(h); //进入Close表
            Open.pop_back();    //移除无用元素
            (*Exist_open).erase(h.first);
            int path = push_new(Open, Close, h, final_array);  //新元素插入Open
            if( path != -1 ){
                cout << path+1<<endl;
                break;
            }
        }
    }

    return 0;
}
