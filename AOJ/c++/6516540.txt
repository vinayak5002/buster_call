#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#define _GLIBCXX_DEBUG
using namespace std;
using std::cout;
using std::cin;
using std::endl;
using ll=long long;
using ld=long double;
ll ILL=1167167167167167167;
const int INF=1050000000;
const ll mod=1e9+7;
#define rep(i,a) for (ll i=0;i<a;i++)
#define all(p) p.begin(),p.end()
template<class T> using _pq = priority_queue<T, vector<T>, greater<T>>;
template<class T> ll LB(vector<T> &v,T a){return lower_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> ll UB(vector<T> &v,T a){return upper_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> bool chmin(T &a,const T &b){if(a>b){a=b;return 1;}else return 0;}
template<class T> bool chmax(T &a,const T &b){if(a<b){a=b;return 1;}else return 0;}
template<class T> void So(vector<T> &v) {sort(v.begin(),v.end());}
template<class T> void Sore(vector<T> &v) {sort(v.begin(),v.end(),[](T x,T y){return x>y;});}
void yneos(bool a){if(a) cout<<"Yes\n"; else cout<<"No\n";}
template<class T> void vec_out(vector<T> &p){for(int i=0;i<(int)(p.size());i++){if(i) cout<<" ";cout<<p[i];}cout<<"\n";}

struct seg_tree{
	int _n;
	int size;
	ll _v;
	vector<pair<ll,ll>> seg;
	seg_tree(int n,ll v):_n(n),_v(v){
		size=1;
		while(size<n) size*=2;
		seg.resize(size*2);
		for(int i=0;i<size*2;i++) seg[i]={1,0};
	}
	pair<ll,ll> op(pair<ll,ll> l,pair<ll,ll> r){
		return {(l.first*r.first)%mod,((l.second*r.first)%mod+r.second)%mod};
	}
	void updata(int k){
		seg[k]=op(seg[k*2],seg[k*2+1]);
	}
	pair<ll,ll> query(int l,int r,int a,int b,int k){
		if(r<=a||b<=l) return {1,0};
		if(l<=a&&b<=r) return seg[k];
		return op(query(l,r,a,(a+b)/2,k*2),query(l,r,(a+b)/2,b,k*2+1));
	}
	pair<ll,ll> calc(int l,int r){
		return query(l,r,0,size,1);
	}
	void updata_ren(int ind){
		if(ind==1) return ;
		ind/=2;
		updata(ind);
		updata_ren(ind);
	}
	void set(int ind,int v){
		ind+=size;
		seg[ind]={_v,v};
		updata_ren(ind);
	}
	void reset(int ind){
		ind+=size;
		seg[ind]={1,0};
		updata_ren(ind);
	}
};

void solve();
// oddloop
int main() {
	solve();
}

void solve(){
	int N,K,T;
	cin>>N>>K>>T;
	ll v=167;
	seg_tree seg(T,v);
	int ans=0;
	ll val=0;
	rep(i,K) val=(val*v+(i+1))%mod;
	vector<vector<pair<int,int>>> G(N+1);
	rep(i,T){
		int l,r,x;
		cin>>l>>r>>x;
		G[l-1].push_back({i,x});
		G[r].push_back({i,-1});
	}
	//cout<<val<<"\n";
	rep(i,N+1){
		for(auto x:G[i]){
			if(x.second==-1) seg.reset(x.first);
			else seg.set(x.first,x.second);
		}
		if(seg.seg[1].second==val) ans++;
	}
	cout<<ans<<"\n";
}

