#include <iostream>

struct in {
    operator char() const noexcept {
        char c = getchar_unlocked();
        while (c == ' ' || c == '\n' || c == '\r') c = getchar_unlocked();
        return c;
    }
    template<typename T> operator T() const noexcept {
        static_assert(std::is_integral_v<T>);
        static_assert(!std::is_same_v<T, char>);
        static_assert(!std::is_same_v<T, bool>);
        char c = operator char();
        T n = 0;
        if constexpr (std::is_signed_v<T>) {
            int sign = 1;
            if (c == '-') sign = -1, c = getchar_unlocked();
            while ('0' <= c && c <= '9') {
                n = n * 10 + (c - '0');
                c = getchar_unlocked();
            }
            n *= sign;
        } else {
            while ('0' <= c && c <= '9') {
                n = n * 10 + (c - '0');
                c = getchar_unlocked();
            }
        }
        return n;
    }
};

template<class Iterator> void read(Iterator first, Iterator last) noexcept {
    while (first != last) {
        if constexpr (std::is_same_v<decltype(*first), std::string&>) std::cin >> *(first++);
        else *(first++) = in();
    }
}

void out() noexcept { putchar_unlocked('\n'); }

template<typename Head> void out(Head&& head) noexcept {
    std::cout << head;
    putchar_unlocked('\n');
}

template<typename Head, typename...Tail> void out(Head&& head, Tail&&...tail) noexcept {
    std::cout << head;
    putchar_unlocked(' ');
    out(std::forward<Tail>(tail)...);
}

template<class Iterator> void dump(Iterator first, Iterator last) noexcept {
    while (first != last) {
        std::cout << *first;
        putchar_unlocked(++first == last ? '\n' : ' ');
    }
}

#include <vector>

template<typename T, typename U, class F, class G, class H> struct lazy_segtree {
private :
    using value_type = T;
    using operator_type = U;
    const value_type e1;
    const operator_type e2;
    const F f;
    const G g;
    const H h;

    struct node_type {
        value_type val;
        operator_type op;
        int l, r;
    };

    int n, height = 0;
    std::vector<node_type> v;

    void pushdown(int i) noexcept {
        if (v[i].op == e2) return;
        if (i < n) {
            v[i << 1].op = g(v[i << 1].op, v[i].op);
            v[i << 1 | 1].op = g(v[i << 1 | 1].op, v[i].op);
        }
        v[i].op = e2;
    }
    void operate(int i, const operator_type& x) noexcept { v[i].op = g(v[i].op, x); }
    const value_type& operate(int i) noexcept {
        if (v[i].op != e2) {
            v[i].val = h(v[i].val, v[i].op, v[i].l, v[i].r);
            pushdown(i);
        }
        return v[i].val;
    }
    void update(int i) noexcept { v[i].val = f(operate(i << 1), operate(i << 1 | 1)); }
public :
    lazy_segtree(value_type e1_, operator_type e2_, F f_, G g_, H h_)
        : e1(e1_), e2(e2_), f(f_), g(g_), h(h_) { }
    void fill(int n_) noexcept {
        n = n_;
        while ((1 << height) < (n << 1)) height++;
        v.resize(n * 2, {e1, e2, 0, 0});
        for (int i = 0; i < n; i++) {
            v[i + n].l = i;
            v[i + n].r = i + 1;
        }
        for (int i = n - 1; i; i--) {
            v[i].l = v[i << 1].l;
            v[i].r = v[i << 1 | 1].r;
        }
    }
    void fill(int n_, value_type x) noexcept {
        n = n_;
        while ((1 << height) < (n << 1)) height++;
        v.resize(n * 2, {x, e2, 0, 0});
        for (int i = 0; i < n; i++) {
            v[i + n].l = i;
            v[i + n].r = i + 1;
        }
        for (int i = n - 1; i; i--) {
            v[i].val = f(v[i << 1].val, v[i << 1 | 1].val);
            v[i].l = v[i << 1].l;
            v[i].r = v[i << 1 | 1].r;
        }
    }
    template<class Iterator> void build(Iterator first, Iterator last) noexcept {
        n = last - first;
        while ((1 << height) < (n << 1)) height++;
        v.resize(n * 2, {e1, e2, 0, 0});
        for (int i = 0; i < n; i++, first++) v[i + n] = {*first, e2, i, i + 1};
        for (int i = n - 1; i; i--) {
            v[i].val = f(v[i << 1].val, v[i << 1 | 1].val);
            v[i].l = v[i << 1].l;
            v[i].r = v[i << 1 | 1].r;
        }
    }
    void operate(int l, int r, const operator_type& x) noexcept {
        int ctz_l = __builtin_ctz(l += n), ctz_r = __builtin_ctz(r += n);
        for (int i = height - 1; i > ctz_l; i--) pushdown(l >> i);
        for (int i = height - 1; i > ctz_r; i--) pushdown(r >> i);
        int L = l, R = r;
        while (L < R) {
            if (L & 1) operate(L++, x);
            if (R & 1) operate(--R, x);
            L >>= 1; R >>= 1;
        }
        for (int i = ctz_l + 1; i < height; i++) update(l >> i);
        for (int i = ctz_r + 1; i < height; i++) update(r >> i);
    }
    value_type fold(int l, int r) noexcept {
        int ctz_l = __builtin_ctz(l += n), ctz_r = __builtin_ctz(r += n);
        for (int i = height - 1; i > ctz_l; i--) operate(l >> i);
        for (int i = height - 1; i > ctz_r; i--) operate(r >> i);
        value_type ret_l = e1, ret_r = e1;
        while (l < r) {
            if (l & 1) ret_l = f(ret_l, operate(l++));
            if (r & 1) ret_r = f(operate(--r), ret_r);
            l >>= 1; r >>= 1;
        }
        return f(ret_l, ret_r);
    }
};

int main() {
    int n = in(), q = in();

    auto f = [] (long long a, long long b) { return a + b; };
    auto g = [] (long long a, long long b) { return b; };
    auto h = [] (long long a, long long b, int l, int r) { return b * (r - l); };
    auto sg = lazy_segtree(0LL, 1001, f, g, h);
    sg.fill(n);

    while (q--) {
        int query = in(), s = in(), t = in();
        if (query == 0) {
            int x = in();
            sg.operate(s, t + 1, x);
        } else {
            out(sg.fold(s, t + 1));
        }
    }
}

