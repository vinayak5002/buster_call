#include <iostream>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <queue>
#include <iomanip>
// clang-format off
#define rep(i, s ,n) for(int i=s, i##_len=(n); i<i##_len; ++i)
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }
#define SZ(x) ((int)(x).size())
using ll = long long;
// 2^60
const ll INF = 1LL << 60;
// lower_bound(ALL(a), 4)
#define ALL(a)  (a).begin(),(a).end()
int gcd(int a,int b){return b?gcd(b,a%b):a;}
int dx[4]={1,0,-1,0};
int dy[4]={0,1,0,-1};
using namespace std;
using Graph = vector<vector<int>>;
// clang-format on

int n;
vector<int> v;
vector<vector<int>> dp;
int daruma()
{
    // 2~n
    rep(w, 2, n + 1)
    {
        // [l,l+w)
        rep(l, 0, n - w + 1)
        {
            rep(i, 1, w)
            {
                chmax(dp[l][l + w], dp[l][l + i] + dp[l + i][l + w]);
            }
            if (dp[l + 1][l + w - 1] == w - 2 && abs(v[l] - v[l + w - 1]) <= 1)
            {
                chmax(dp[l][l + w], w);
            }
        }
    }
    /*
    rep(i, 0, n + 1)
    {
        rep(j, 0, n + 1)
        {
            cout << dp[i][j] << ",";
        }
        cout << endl;
    }
    */
    return dp[0][n];
}

int main()
{
    cout << fixed << setprecision(16);
    vector<int> ans;

    while (true)
    {
        cin >> n;
        if (n == 0)
            break;

        v.resize(n);
        dp.assign(n + 1, vector<int>(n + 1, 0));

        rep(i, 0, n)
        {
            cin >> v[i];
        }
        ans.push_back(daruma());
    }

    for (auto ret : ans)
    {
        cout << ret << endl;
    }
}

