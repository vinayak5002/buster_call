#include <bits/stdc++.h>
////#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vd = vector<double>;
using vvd = vector<vd>;
using vvvd = vector<vvd>;
#define all(A) A.begin(),A.end()
#define ALL(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}


int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);


    ll N;
    cin >> N;
    vll A(N);
    rep(i, N)cin >> A[i];
    string S = "", T = "";
    rep(i, N) {
        S = S + char(A[i] - 1 + '0');
        T = T + char('0' + i);
    }
    unordered_map<string, ll> M;
    M[T] = 0;
    rep(i1, N)rep(i2, i1) {
        rep(i3, N)rep(i4, i3) {
            rep(i5, N)rep(i6, i5) {
                rep(i7, N)rep(i8, i7) {
                    string P = T;
                    reverse(P.begin() + i2, P.begin() + i1 + 1);
                    if (!M.count(P))M[P] = 1;
                    else M[P] = min(M[P], 1ll);
                    reverse(P.begin() + i4, P.begin() + i3 + 1);
                    if (!M.count(P))M[P] = 2;
                    else M[P] = min(M[P], 2ll);
                    reverse(P.begin() + i6, P.begin() + i5 + 1);
                    if (!M.count(P))M[P] = 3;
                    else M[P] = min(M[P], 3ll);
                    reverse(P.begin() + i8, P.begin() + i7 + 1);
                    if (!M.count(P))M[P] = 4;
                    else M[P] = min(M[P], 4ll);
                }
            }
        }
    }
    ll an = N - 1;
    if(M.count(S))an=min(an,M[S]);
    rep(i1, N)rep(i2, i1) {
        rep(i3, N)rep(i4, i3) {
            rep(i5,N)rep(i6, i5) {
                rep(i7,N)rep(i8, i7) {
                    string P = S;
                    reverse(P.begin() + i2, P.begin() + i1 + 1);
                    if (M.count(P))chmin(an, M[P] + 1);
                    reverse(P.begin() + i4, P.begin() + i3 + 1);
                    if (M.count(P))chmin(an, M[P] + 2);
                    reverse(P.begin() + i6, P.begin() + i5 + 1);
                    if (M.count(P))chmin(an, M[P] + 3);
                    reverse(P.begin() + i8, P.begin() + i7 + 1);
                    if (M.count(P))chmin(an, M[P] + 4);
                }
            }
        }
    }
    cout << an << endl;



}

