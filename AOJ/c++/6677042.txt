#include<bits/stdc++.h>
#define fastread() (ios_base:: sync_with_stdio(false),cin.tie(NULL));
#define int long long
#define ull unsigned long long
#define mat vector<vector<int>>
#define ld long double
#define pb push_back
#define in insert
#define fi first
#define se second
#define eps 1e-9
#define sz(x) (int)(x).size()
#define all(x) x.begin(), x.end()

using namespace std;
template<class T> using maxheap = priority_queue<T>;
template<class T> using minheap = priority_queue<T, vector<T>, greater<T>>;

const int N=1e5+7;
int n, a[N], ST[N*4], q;

void build(int id, int l, int r) {
    if(l==r) {
        ST[id]=a[l];
        return;
    } 
	
	int m = (l+r)>>1;
	
    build(id*2,l,m);
    build(id*2+1,m+1,r);
    
    ST[id] = min(ST[id*2], ST[id*2+1]);
}

void update(int id, int l, int r, int i, int val) {
    if (i<l || i>r) return;
        
    if(l==r) {
        ST[id] = val;
        return;
    }
    
    int m = (l+r)>>1;
    update(id*2, l, m, i, val);
    update(id*2+1, m+1, r, i, val);
    ST[id] = min(ST[id*2], ST[id*2+1]);
}

int get(int id, int l, int r, int u, int v) {
    if (v<l || u>r) return INT_MAX;
    
    if (u<=l && v>=r) return ST[id];
    
    int m = (l+r)>>1;
    return min(get(id*2, l, m, u, v), get(id*2+1, m+1, r, u, v));
}

signed main() {
    cin>> n >> q;
    for (int i=1; i<=n; i++) a[i] = 2147483647;
    build(1, 1, n);
    while(q--) {
        int b, x, y;
        cin >> b >> x >> y;
        if (b==0) update(1, 1, n, x+1, y);
        else cout << get(1,1,n,x+1,y+1) << '\n';
    }
}
