#include<bits/stdc++.h>
using namespace std;

struct RollingHash{
    unsigned long long BASE1 = 1000000007;
    int n;
    std::vector<unsigned long long> dat, base_pow;
    RollingHash()  {}
    RollingHash(std::string &s) : n(s.size()), dat(n+1), base_pow(n+1) {
        base_pow[0] = 1;
        for(int i = 0; i < n; i++){
            dat[i+1] = dat[i] * BASE1 + s[i];
            base_pow[i+1] = base_pow[i] * BASE1;
        }
    }
    unsigned long long hash(int l, int r){
        return dat[r] - dat[l] * base_pow[r-l];
    }
};

int main(){
    int n;
    string s;
    cin >> n >> s;
    RollingHash RH1(s);
    reverse(s.begin(), s.end());
    RollingHash RH2(s);
    int ans = 0;
    for(int i = 1; i < n; i++){
        int len = min(i, n-i);
        ans += (RH1.hash(i-len,i) == RH2.hash(n-(i+len)+1,n-i+1));
    }
    cout << ans << endl;
}
