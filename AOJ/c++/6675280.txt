#define READ_FROM_FILE 0

#if READ_FROM_FILE
#include <fstream>
#endif

#include <iostream>
#include <string>
#include <sstream>
#include <climits>
using namespace std;


class List {
private:
	class Node {
	public:
		int key;
		Node* prev;
		Node* next;

		Node(int x) : key(x), prev(NULL), next(NULL) {
			return;
		}
		~Node() {
			return;
		}
	};

private:
	Node* head_;
	Node* cur_;

public:
	List() : head_(NULL), cur_(NULL) {
		head_ = new Node(INT_MAX);
		cur_ = new Node(INT_MAX);
		head_->next = cur_;
		cur_->prev = head_;
		return;
	}

	~List() {
		while (cur_ != NULL) {
			Node* tmp = cur_;

			cur_ = cur_->next;
			delete tmp;
		}
		return;
	}

	void insert(int x) {
		Node* n = new Node(x);

		n->next = cur_;
		cur_->prev->next = n;
		n->prev = cur_->prev;
		cur_->prev = n;
		cur_ = n;
		return;
	}

	void move(int d) {
		if (d > 0) {
			for (int i = 0; i < d; i++) {
				cur_ = cur_->next;
			}
		}
		else {
			for (int i = d; i < 0; i++) {
				cur_ = cur_->prev;
			}
		}
		return;
	}

	void erase() {
		Node* prev = cur_->prev;
		Node* tmp = cur_;

		prev->next = cur_->next;
		cur_ = cur_->next;
		cur_->prev = prev;
		delete tmp;
		return;
	}

	void move_to_first() {
		cur_ = head_->next;
		return;
	}

	int get_cur_key() const {
		return cur_->key;
	}
};


int main() {
#if READ_FROM_FILE
	ifstream ifs("test0.txt");
	cin.rdbuf(ifs.rdbuf());
#endif
	string buf;
	int q = -1;
	int key = -1;
	List list;

	cin >> q;
	getline(cin, buf);
	for (int i = 0; i < q; i++) {
		getline(cin, buf);
		if (buf[0] == '0') {
			istringstream stream(buf);
			int tmp, x;

			stream >> tmp >> x;
			list.insert(x);
		}
		else if (buf[0] == '1') {
			istringstream stream(buf);
			int tmp, d;

			stream >> tmp >> d;
			list.move(d);
		}
		else {
			list.erase();
		}
	}

	list.move_to_first();
	while (key = list.get_cur_key(), key != INT_MAX) {
		cout << key << endl;
		list.move(1);
	}

	return 0;
}
