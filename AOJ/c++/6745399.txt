#include <bits/stdc++.h>
using namespace std;
#define rep(i, n) for (int i = 0; i < n; i++)
#define rep2(i, x, n) for (int i = x; i <= n; i++)
#define rep3(i, x, n) for (int i = x; i >= n; i--)
#define each(e, v) for (auto &e : v)
#define pb push_back
#define eb emplace_back
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define sz(x) (int)x.size()
using ll = long long;
using pii = pair<int, int>;
using pil = pair<int, ll>;
using pli = pair<ll, int>;
using pll = pair<ll, ll>;

template <typename T>
bool chmax(T &x, const T &y) {
    return (x < y) ? (x = y, true) : false;
}

template <typename T>
bool chmin(T &x, const T &y) {
    return (x > y) ? (x = y, true) : false;
}

template <typename T>
int flg(T x, int i) {
    return (x >> i) & 1;
}

template <typename T>
void print(const vector<T> &v, T x = 0) {
    int n = v.size();
    for (int i = 0; i < n; i++) cout << v[i] + x << (i == n - 1 ? '\n' : ' ');
    if (v.empty()) cout << '\n';
}

template <typename T>
void printn(const vector<T> &v, T x = 0) {
    int n = v.size();
    for (int i = 0; i < n; i++) cout << v[i] + x << '\n';
}

template <typename T>
int lb(const vector<T> &v, T x) {
    return lower_bound(begin(v), end(v), x) - begin(v);
}

template <typename T>
int ub(const vector<T> &v, T x) {
    return upper_bound(begin(v), end(v), x) - begin(v);
}

template <typename T>
void rearrange(vector<T> &v) {
    sort(begin(v), end(v));
    v.erase(unique(begin(v), end(v)), end(v));
}

template <typename T>
vector<int> id_sort(const vector<T> &v, bool greater = false) {
    int n = v.size();
    vector<int> ret(n);
    iota(begin(ret), end(ret), 0);
    sort(begin(ret), end(ret), [&](int i, int j) { return greater ? v[i] > v[j] : v[i] < v[j]; });
    return ret;
}

template <typename S, typename T>
pair<S, T> operator+(const pair<S, T> &p, const pair<S, T> &q) {
    return make_pair(p.first + q.first, p.second + q.second);
}

template <typename S, typename T>
pair<S, T> operator-(const pair<S, T> &p, const pair<S, T> &q) {
    return make_pair(p.first - q.first, p.second - q.second);
}

template <typename S, typename T>
istream &operator>>(istream &is, pair<S, T> &p) {
    S a;
    T b;
    is >> a >> b;
    p = make_pair(a, b);
    return is;
}

template <typename S, typename T>
ostream &operator<<(ostream &os, const pair<S, T> &p) {
    return os << p.first << ' ' << p.second;
}

struct io_setup {
    io_setup() {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cout << fixed << setprecision(15);
    }
} io_setup;

const int inf = (1 << 30) - 1;
const ll INF = (1LL << 60) - 1;
const int MOD = 1000000007;
// const int MOD = 998244353;

template <int mod>
struct Mod_Int {
    int x;

    Mod_Int() : x(0) {}

    Mod_Int(long long y) : x(y >= 0 ? y % mod : (mod - (-y) % mod) % mod) {}

    static int get_mod() { return mod; }

    Mod_Int &operator+=(const Mod_Int &p) {
        if ((x += p.x) >= mod) x -= mod;
        return *this;
    }

    Mod_Int &operator-=(const Mod_Int &p) {
        if ((x += mod - p.x) >= mod) x -= mod;
        return *this;
    }

    Mod_Int &operator*=(const Mod_Int &p) {
        x = (int)(1LL * x * p.x % mod);
        return *this;
    }

    Mod_Int &operator/=(const Mod_Int &p) {
        *this *= p.inverse();
        return *this;
    }

    Mod_Int &operator++() { return *this += Mod_Int(1); }

    Mod_Int operator++(int) {
        Mod_Int tmp = *this;
        ++*this;
        return tmp;
    }

    Mod_Int &operator--() { return *this -= Mod_Int(1); }

    Mod_Int operator--(int) {
        Mod_Int tmp = *this;
        --*this;
        return tmp;
    }

    Mod_Int operator-() const { return Mod_Int(-x); }

    Mod_Int operator+(const Mod_Int &p) const { return Mod_Int(*this) += p; }

    Mod_Int operator-(const Mod_Int &p) const { return Mod_Int(*this) -= p; }

    Mod_Int operator*(const Mod_Int &p) const { return Mod_Int(*this) *= p; }

    Mod_Int operator/(const Mod_Int &p) const { return Mod_Int(*this) /= p; }

    bool operator==(const Mod_Int &p) const { return x == p.x; }

    bool operator!=(const Mod_Int &p) const { return x != p.x; }

    Mod_Int inverse() const {
        assert(*this != Mod_Int(0));
        return pow(mod - 2);
    }

    Mod_Int pow(long long k) const {
        Mod_Int now = *this, ret = 1;
        for (; k > 0; k >>= 1, now *= now) {
            if (k & 1) ret *= now;
        }
        return ret;
    }

    friend ostream &operator<<(ostream &os, const Mod_Int &p) { return os << p.x; }

    friend istream &operator>>(istream &is, Mod_Int &p) {
        long long a;
        is >> a;
        p = Mod_Int<mod>(a);
        return is;
    }
};

using mint = Mod_Int<MOD>;

struct Union_Find_Tree {
    vector<int> data;
    const int n;
    int cnt;

    Union_Find_Tree(int n) : data(n, -1), n(n), cnt(n) {}

    int root(int x) {
        if (data[x] < 0) return x;
        return data[x] = root(data[x]);
    }

    int operator[](int i) { return root(i); }

    bool unite(int x, int y) {
        x = root(x), y = root(y);
        if (x == y) return false;
        if (data[x] > data[y]) swap(x, y);
        data[x] += data[y], data[y] = x;
        cnt--;
        return true;
    }

    int size(int x) { return -data[root(x)]; }

    int count() { return cnt; };

    bool same(int x, int y) { return root(x) == root(y); }

    void clear() {
        cnt = n;
        fill(begin(data), end(data), -1);
    }
};

mint ans;

void dfs(int N, const vector<int> &a, const vector<int> &b, int t, vector<int> p) {
    if (t == N) {
        vector<vector<int>> ids(N);
        Union_Find_Tree uf(N);
        int K = N;
        rep(i, N) {
            if (p[i] != -1) ids[p[i]].eb(i), K--, uf.unite(p[i], i);
        }
        if (uf.count() != 1) return;
        if (K != 1) return;
        mint tmp = 1;
        rep(i, N) {
            if (empty(ids[i])) continue;
            if (sz(ids[i]) < a[i] || sz(ids[i]) > b[i]) return;
            if (*max_element(all(ids[i])) <= i) return;
            tmp *= 2;
        }
        ans += tmp;
        // print(p);
        // cout << tmp << '\n';
        return;
    }

    rep2(i, -1, N - 1) {
        if (i == t) continue;
        p[t] = i;
        dfs(N, a, b, t + 1, p);
    }
}

mint solve(int N, vector<int> a, vector<int> b) {
    ans = 0;
    vector<int> p(N, -1);
    dfs(N, a, b, 0, p);
    return ans;
}

int main() {
    int N;
    cin >> N;

    vector<int> a(N), b(N);
    rep(i, N) cin >> a[i] >> b[i];

    vector<vector<mint>> dp(N + 1, vector<mint>(N + 1, 0)), ndp(N + 1, vector<mint>(N + 1, 0));
    dp[0][0] = 1;

    rep3(i, N - 1, 0) {
        rep(j, N + 1) rep(k, N + 1) ndp[j][k] = 0;
        rep(j, N + 1) {
            rep(k, N + 1) {
                if (dp[j][k] == 0) continue;
                rep(l, 3) {
                    if (l < a[i] || b[i] < l) continue;
                    if (l == 0) {
                        ndp[j + 1][k] += dp[j][k];
                        if (k > 0) ndp[j][k - 1] += dp[j][k] * k;
                    } else if (l == 1) {
                        if (j == 0) continue;
                        ndp[j][k] += dp[j][k] * j * 2;
                        if (j > 0 && k > 0) ndp[j - 1][k - 1] += dp[j][k] * mint(j - 1) * mint(k) * 2;
                    } else {
                        if (j == 0) continue;
                        if (j > 1) ndp[j - 1][k] += dp[j][k] * mint(j) * mint(j - 1);
                        if (j > 1 && k > 0) ndp[j - 2][k - 1] += dp[j][k] * mint(j - 1) * mint(j - 2) * mint(k);
                        ndp[j][k + 1] += dp[j][k] * j * 2;
                        if (j > 0 && k > 0) ndp[j - 1][k] += dp[j][k] * mint(j - 1) * mint(k) * 2;
                    }
                }
            }
        }
        // cout << i + 1 << '\n';
        // rep(i, N + 1) print(ndp[i]);
        swap(dp, ndp);
    }

    cout << dp[1][0] << '\n';
    // cout << solve(N, a, b) << '\n';
}
