#include<bits/stdc++.h>
using namespace std;

struct RollingHash{
    unsigned long long BASE1 = 1000000007;
    int n;
    std::vector<unsigned long long> dat, dat2, base_pow;
    RollingHash()  {}
    RollingHash(std::string &s) : n(s.size()), dat(n+1), dat2(n+1), base_pow(n+1) {
        base_pow[0] = 1;
        for(int i = 0; i < n; i++){
            dat[i+1] = dat[i] * BASE1 + s[i];
            dat2.rbegin()[i+1] = dat2.rbegin()[i] * BASE1 + s.rbegin()[i];
            base_pow[i+1] = base_pow[i] * BASE1;
        }
    }
    unsigned long long hash(int l, int r){
        return dat[r] - dat[l] * base_pow[r-l];
    }
    unsigned long long hash2(int l, int r){
        return dat2[l] - dat2[r] * base_pow[r-l];
    }
};

struct RollingHash2{
    long long BASE = 123456789;
    long long MOD = 998244353;
    int n;
    std::vector<long long> dat, dat2, base_pow;
    RollingHash2()  {}
    RollingHash2(std::string &s) : n(s.size()), dat(n+1), dat2(n+1), base_pow(n+1) {
        base_pow[0] = 1;
        for(int i = 0; i < n; i++){
            dat[i+1] = (dat[i] * BASE + s[i]) % MOD;
            dat2.rbegin()[i+1] = (dat2.rbegin()[i] * BASE + s.rbegin()[i]) % MOD;
            base_pow[i+1] = (base_pow[i] * BASE) % MOD;
        }
    }
    long long hash(int l, int r){
        return ((dat[r] - dat[l] * base_pow[r-l])%MOD + MOD)%MOD;
    }
    long long hash2(int l, int r){
        return ((dat2[l] - dat2[r] * base_pow[r-l])%MOD + MOD) % MOD;
    }
};

int main(){
    int n;
    string s;
    cin >> n >> s;
    RollingHash2 RH(s);
    int ans = 0;
    for(int i = 1; i < n; i++){
        int len = min(i, n-i);
        ans += (RH.hash(i-len,i) == RH.hash2(i,i+len));
    }
    cout << ans << endl;
}
