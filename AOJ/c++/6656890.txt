#include<stdio.h>
#include<stdlib.h>

typedef struct node
{
	struct node *right;    // 右の子
	struct node *left;     // 左の子
	struct node *parent;   // 親
	int key;               // キー
} Node;

#define NIL NULL

Node *root;

void insert(int k)
{
	Node *y = NIL;      // x の親
	Node *x = root;     // T の根
	Node *z;

	z = (Node *)malloc(sizeof(Node));
	z->key = k;
	z->left = NIL;
	z->right = NIL;

	while(x!=NIL)
	{
		y = x;
		if(z->key < x->key)   // k は x の key より小さい
		{
			x = x->left;
		}
		else
		{
			x = x->right;
		}
	}
	
	z->parent = y;
	
	if(y == NIL)
	{
		root = z;
	}
	else
	{
		if(z->key > y->key)
		{
			y->right = z;
		}
		else
		{
			y->left = z;
		}
	}
}


void inorder(Node *u)
{
	if(u == NIL) return;
	inorder(u->left);
	printf(" %d", u->key);
	inorder(u->right);
}
void preorder(Node *u)
{
	if(u == NIL) return;
	printf(" %d", u->key);
	preorder(u->left);
	preorder(u->right);
}

void tree_free(Node *n)
{
	if( n != NULL)
	{
		tree_free(n->left);
		tree_free(n->right);
		free(n);
	}
}

int main(void)
{
	int n, i, x;
	char com[20];
	scanf("%d", &n);

	for ( i = 0; i < n; i++ )
	{
		scanf("%s", com);
		if ( com[0] == 'i' )
		{
			scanf("%d", &x);
			insert(x);
		}
		else if ( com[0] == 'p' )
		{
			inorder(root);
			printf("\n");
			preorder(root);
			printf("\n");
		}
	}
	
	tree_free(root);
	return 0;
}

