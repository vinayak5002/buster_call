#include <stdio.h>
#include <stdlib.h> //malloc(動的メモリを確保する関数)を使うため
#define NIL NULL

struct node
{
  struct node *right; //右の子のポインタ
  struct node *left; //左の子のポインタ
  struct node *parent; //親のポインタ
  int key;
};

typedef struct node *Node;

Node root;

void insert(int k)
{
  Node y = NIL; //xの親
  Node x = root; 
  Node z;

  z = malloc(sizeof(struct node)); //動的メモリを確保する
  z->key = k; 
  z->left = NIL;
  z->right = NIL;

  while (x != NIL)
  {
    y = x; //親を設定
    if (z->key < x->key)
    {
      x = x->left; //zが親より小さいなら、左の子へ移動
    }
    else
    {
      x = x->right; //zが親より大きいなら、右の子へ移動
    }
  }

  z->parent = y;
  if (y == NIL)
  {
    root = z; //木がからの時、zを根にする
  }
  else
  {
    if (z->key < y->key) 
    {
      y->left = z; //zがy親より小さいなら、zを左の子にする
    }
    else
    {
      y->right = z; //zがy親より大きいなら、zを右の子にする
    }
  }
}

//中順
void inorder(Node u)
{
  if (u == NIL)
  {
    return;
  }

  inorder(u->left);
  printf(" %d", u->key);
  inorder(u->right);
}

//前順
void preorder(Node u)
{
  if (u == NIL)
  {
    return;
  }

  printf(" %d", u->key);
  preorder(u->left);
  preorder(u->right);
}

int main(void)
{
  int n, i, x;
  char com[20]; //insertかprintが入る

  scanf("%d", &n); //命令の数

  for (i = 0; i < n; i++)
  {
    scanf("%s", com);
    if (com[0] == 'i') //insertなら
    {
      scanf("%d", &x);
      insert(x);
    }
    else //printなら
    {
      inorder(root);
      printf("\n");
      preorder(root);
      printf("\n");
    }
  }

  return 0;
}

