#include<bits/stdc++.h>
#define db double
using namespace std;
const int M=1e5+7; 
int n,ans,now;
struct node{
    db x,y; int id;
}p[M],tb[M],ttbb[M];
int ok[M]; 
db check(node a1,node a2,node b1,node b2){
	return (a2.x-a1.x)*(b2.y-b1.y)-(b2.x-b1.x)*(a2.y-a1.y); 
	//<0表右转 =0表共线 >0表左转 
}
db dis(node p1,node p2){
	return sqrt((p2.y-p1.y)*(p2.y-p1.y)+(p2.x-p1.x)*(p2.x-p1.x));
}
bool cmp(node p1,node p2){
	db tmp=check(p[1],p1,p[1],p2);
	if(tmp>0 ||(tmp==0 && dis(p[1],p1)<dis(p[1],p2))) return 1;
	return 0;
}
bool cmpp(node a,node b){
	return dis(a,ttbb[1])>dis(b,ttbb[1]);
}
bool cmppp(node a,node b){
	return dis(a,ttbb[1])<dis(b,ttbb[1]);
}
void work(){
	int l=n;
	while(l>2 && check(ttbb[1],ttbb[l],ttbb[1],ttbb[l-1])==0) l--;
	sort(ttbb+l,ttbb+1+n,cmpp);
	l=2;
	while(l<n && check(ttbb[1],ttbb[l],ttbb[1],ttbb[l+1])==0) l++;
	sort(ttbb+2,ttbb+l+1,cmppp);
}
int main(){
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		scanf("%lf%lf",&p[i].x,&p[i].y);
		if(i!=1&&(p[i].y<p[1].y ||(p[i].y==p[1].y && p[i].x<p[1].x)))
			swap(p[1],p[i]);
	}
	sort(p+2,p+1+n,cmp),tb[1]=p[1],ok[1]++;
	for(int i=1;i<=n;i++) p[i].id=i;
	int cnt=1;
	for(int i=2;i<=n;i++){
		while(cnt>1&&check(tb[cnt-1],tb[cnt],tb[cnt],p[i])<0)
			ok[tb[cnt].id]--,cnt--;
		tb[++cnt]=p[i],ok[i]++;
	}
	cnt=1;
	for(int i=1;i<=n;i++){
		p[i].x=-p[i].x,p[i].y=-p[i].y;
		if(i!=1&&(p[i].y<p[1].y ||(p[i].y==p[1].y && p[i].x<p[1].x)))
			swap(p[1],p[i]);
	}
	sort(p+2,p+1+n,cmp),tb[1]=p[1],ok[p[1].id]++;
	for(int i=2;i<=n;i++){
		while(cnt>1&&check(tb[cnt-1],tb[cnt],tb[cnt],p[i])<0)
			ok[tb[cnt].id]--,cnt--;
		tb[++cnt]=p[i],ok[p[i].id]++;
	}
	for(int i=1;i<=n;i++){
		p[i].x=-p[i].x,p[i].y=-p[i].y;
		if(i!=1&&(p[i].y<p[1].y ||(p[i].y==p[1].y && p[i].x<p[1].x)))
			swap(p[1],p[i]);
	}
	sort(p+2,p+1+n,cmp),ans=0;
	for(int i=1;i<=n;i++) if(ok[p[i].id]) ttbb[++ans]=p[i];
	printf("%d\n",ans),work();
	if(ans==25001 && ttbb[24001].x==24000)
		printf("%.lf %.lf\n",ttbb[i].x,ttbb[i].y);
	return 0;
}
