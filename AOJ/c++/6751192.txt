#include<bits/stdc++.h>
#define fi first
#define se second
#define pb push_back
using namespace std;
typedef long long LL;
typedef double db;
const db pi = acos(-1.0);
const db eps=1e-8;
const int maxp=80010;
const int N=200;

int sgn(double x){
    if(fabs(x)<eps) return 0;
    if(x<0) return -1;
    return 1;
}

struct Point{
	db x,y;
	Point(){}
	Point(db _x,db _y){
		x = _x;
		y = _y;
	}
	
	void input(){
		scanf("%lf%lf",&x,&y);
	}
	
	void output(){
		// printf("%.10lf %.10lf\n",x,y);
		printf("%d %d\n",(int)x,(int)y);
	}
	
	bool operator < (Point b)const{
		return sgn(x-b.x)==0?sgn(y-b.y)<0:x<b.x;
	}
	bool operator == (Point b)const{
		return sgn(x-b.x)==0&&sgn(y-b.y)==0;
	}
	Point operator -(const Point &b)const{
		return Point(x-b.x,y-b.y);
	}
	Point operator +(const Point &b)const{
		return Point(x+b.x,y+b.y);
	}
	db operator ^(const Point &b)const{
		return x*b.y-y*b.x;
	}
	db operator *(const Point &b)const{
		return x*b.x+y*b.y;
	}
	Point operator *(const db &k)const{
		return Point(x*k,y*k);
	}
	Point operator /(const db &k)const{
		return Point(x/k,y/k);
	}
	db distance(Point p){
		return hypot(x-p.x,y-p.y);
	}
	db len(){
		return hypot(x,y);
	}
	db len2(){
		return x*x+y*y;
	}
};

struct Line{
	Point s,e;
	Line(){}
	Line(Point _s,Point _e){
		s = _s;
		e = _e;
	}
    
    Line(Point p,double angle){
        s=p;
        if(sgn(angle-pi/2) == 0){
            e=(s+Point(0,1));
        }
        else{
            e=(s+Point(1,tan(angle)));
        }
    }
    
    bool parallel(Line v){
        return sgn((e-s)^(v.e-v.s))==0;
    }
    
    int relation(Point p){
        int c =sgn((p-s)^(e-s));
        if(c<0) return 1;
        else if(c>0) return 2;
        else return 3;
    }
    
    bool pointonseg(Point p){
    	return sgn((p-s)^(e-s))==0&&sgn((p-s)*(p-e))<=0;
    }
    
    int linecrossline(Line v){
        if((*this).parallel(v))
            return v.relation(s)==3;
        return 2;
    }
    
    Point crosspoint(Line v){
        db a1=(v.e-v.s)^(s-v.s);
        db a2=(v.e-v.s)^(e-v.s);
        return Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));
    }
    
	Point lineprog(Point p){
		return s+(((e-s)*((e-s)*(p-s)))/((e-s).len2()));
	}
	Point symmetrypoint(Point p){
		Point q=lineprog(p);
		return Point(2*q.x-p.x,2*q.y-p.y);
	}
	db length(){
		return s.distance(e);
	}
	db dispointtoline(Point p){
		return fabs((p-s)^(e-s))/length();
	}
	db dispointtoseg(Point p){
		if(sgn((p-s)*(e-s))<0 || sgn((p-e)*(s-e))<0)
			return min(p.distance(s),p.distance(e));
		return dispointtoline(p);
	}
	db dissegtoseg(Line v){
		return min(min(dispointtoseg(v.s),dispointtoseg(v.e)),min(v.dispointtoseg(s),v.dispointtoseg(e)));
	}
};

struct polygon{
	int n;
	Point p[maxp];
	Line l[maxp];
	void input(int _n){
		n = _n;
		for(int i=0;i<n;i++)
			p[i].input();
	}
	void output(){
		printf("%d\n",n);
		for(int i=0;i<n;i++) p[i].output();
	}
	void getline(){
		for(int i=0;i<n;i++){
			l[i]=Line(p[i],p[(i+1)%n]);
		}
	}
	db getarea(){
		db sum=0;
		for(int i=0;i<n;i++){
			sum+=(p[i]^p[(i+1)%n]);
		}
		return sum/2;
	}
	struct cmp{
		Point p;
		cmp(const Point &p0){p=p0;}
		bool operator ()(const Point &aa,const Point &bb){
			Point a=aa,b=bb;
			int d=sgn((a-p)^(b-p));
			if(d==0){
				return sgn(a.distance(p)-b.distance(p)) < 0;
			}
			return d>0;
		}
	};
	
	void norm(){
		Point mi = p[0];
		for(int i=1;i<n;i++) mi = min(mi,p[i]);
		sort(p,p+n,cmp(mi));
	}
	
	void getconvex(polygon &convex){
		sort(p,p+n);
		convex.n=n;
		for(int i=0;i<min(n,2);i++){
			convex.p[i]=p[i];
		}
		if(convex.n==2&&(convex.p[0]==convex.p[1])) convex.n--;
		if(n<=2) return ;
		int &top=convex.n;
		top=1;
		for(int i=2;i<n;i++){
			while(top&&sgn((convex.p[top]-p[i])^(convex.p[top-1]-p[i]))>0) top--;
			convex.p[++top]=p[i];
		}
		int temp=top;
		convex.p[++top]=p[n-2];
		for(int i=n-3;i>=0;i--){
			while(top!=temp&&sgn((convex.p[top]-p[i])^(convex.p[top-1]-p[i]))>0) top--;
			convex.p[++top]=p[i];
		}
		if(convex.n==2&&(convex.p[0]==convex.p[1])) convex.n--;
		//convex.norm();
	}
	
	void Graham(polygon &convex){
		norm();
		int &top = convex.n;
		top=0;
		if(n==1){
			top=1;
			convex.p[0]=p[0];
			return ;
		}
		if(n==2){
			top=2;
			convex.p[0]=p[0];
			convex.p[1]=p[1];
			if(convex.p[0]==convex.p[1]) top--;
			return ;
		}
		top=2;
		convex.p[0]=p[0];
		convex.p[1]=p[1];
		for(int i=2;i<n;i++){
			while(top>1&&sgn((convex.p[top-1]-convex.p[top-2])^(p[i]-convex.p[top-2]))<=0) top--;
			convex.p[top++]=p[i];
		}
		if(convex.n==2&&(convex.p[0]==convex.p[1])) convex.n--;
	}
	
	db rc(){
		db res=0;
		if(n==1) return res;
		if(n==2) 
		{
			res=p[0].distance(p[1]);
			return res;
		}
		int now=2;
		for(int i=0;i<n;i++)
		{
			while(sgn(((p[(i+1)%n]-p[i])^(p[(now+1)%n]-p[i]))-((p[(i+1)%n]-p[i])^(p[now]-p[i])))>0) now=(now+1)%n;
			db x=p[i].distance(p[now]);
			db y=p[(i+1)%n].distance(p[now]);
			if(sgn(x-y)<0) x=y;
			if(sgn(res-x)<0) res=x;
		}
		return res;
	}
	
	bool isconvex() {
		bool s[10];
		memset(s,false,sizeof(s));
		for (int i=0; i<n; i++) {
			int j=(i+1)%n;
			int k=(j+1)%n;
			s[sgn((p[j]-p[i])^(p[k]-p[i]))+1]=true;
			if (s[0] && s[2]) return false;
		}
		return true;
	}
	int relationpoint(Point q){
		for(int i=0;i<n;i++){
			if(p[i] == q) return 1000000000;
		}
		getline();
		for(int i=0;i<n;i++){
			if(l[i].pointonseg(q)) return 1000000000;
		}
		int cnt=0;
		for(int i=0;i<n;i++){
			int j=(i+1)%n;
			int k=sgn((q-p[j])^(p[i]-p[j]));
			int u=sgn(p[i].y-q.y);
			int v=sgn(p[j].y-q.y);
			if(k>0&&u<0&&v>=0) cnt++;
			if(k<0&&v<0&&u>=0) cnt--;
		}
		return cnt;
	}
};

int main()
{
    int n;
    scanf("%d",&n);
    polygon p,p1;
    p.input(n);
    p.getconvex(p1);
    printf("%.12lf\n",p1.rc());
    return 0;
}
