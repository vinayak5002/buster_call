#include <bits/stdc++.h>
#ifdef MY_DEBUG
  #include "dprint.cpp"
  # define dprint(a, ...);\
      do {\
          printf("line : %d, func : %s\n",\
                __LINE__, __func__);\
          dprint(#a,a,##__VA_ARGS__ );\
      } while (0)
#else
  #define dprint(a,...) 
#endif
using namespace std;
int dx[]={1,0,-1,0};
int dy[]={0,1,0,-1};

bool check(int x,int y ,int dir,vector<vector<int>>&tate,vector<vector<int>>& yoko){
//壁が存在したらtrueを返す。
 bool res=false;
 switch (dir){
  case 0:
    //下
    if(yoko[x][y]==1)res=true;
    break;
  case 1:
    //右
    if(tate[x][y]==1)res=true;
    break;
  case 2:
    //上
    if(yoko[x-1][y]==1)res=true;
    break;
  case 3:
    //左
    if(tate[x][y-1]==1)res=true;
    break;

 }
 return res;
}

int solve(int H,int W,vector<vector<int>>&tate,vector<vector<int>>& yoko){
  //幅優先探索
  queue<pair<int,int>>q;
  
 vector<vector<int>> dist(H, vector<int>(W,-1));
  q.emplace(0,0);
  dist[0][0]= 1;

  while(!q.empty()){
    auto v=q.front();q.pop();
    int v_x=v.first;
    int v_y=v.second;
    for (int dir = 0; dir < 4; dir++){
      int next_x=v_x+dx[dir];
      int next_y=v_y+dy[dir];

      if(next_x<0||H<=next_x||next_y<0||W<=next_y)continue;//範囲外
      //壁判定
      if(check(v_x,v_y,dir,tate,yoko)==true)continue;//壁がある。
      if(dist[next_x][next_y]!=-1)continue;//すでに調査済み。
      dist[next_x][next_y]=dist[v_x][v_y]+1;
      q.emplace(next_x,next_y);
    }
  }
  return dist[H-1][W-1];
}
int main() {
while (true){
  int W,H;
  cin >>W>>H;
  if(W==0&&H==0)break;
  vector<vector<int>> tate(H, vector<int>(W-1));
  vector<vector<int>> yoko(H-1, vector<int>(W));
  for (int i = 0; i < H; i++){
    for(int j=0;j<W-1;j++){
      cin >> tate[i][j];
    }
    if(i==H-1)break;
    for(int j=0;j<W;j++){
      cin >> yoko[i][j];
    }
  }
  int res=solve(H,W,tate,yoko);
  if(res==-1){
    res=0;
  }
  cout << res << endl;
}

return 0;
}
