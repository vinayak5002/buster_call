#include <bits/stdc++.h>

using namespace std;

const int maxN = 100100;

#define int long long


int n, m;
bool joint[maxN];
int timeDfs = 0, bridge = 0;
int low[maxN], num[maxN];
vector <int> g[maxN],ans;

void dfs(int u, int pre) {
    int child = 0;
    num[u] = low[u] = ++timeDfs;
    for (int v : g[u]) {
        if (v == pre) continue;
        if (!num[v]) {
            dfs(v, u);
            low[u] = min(low[u], low[v]);
            if (low[v] == num[v]) bridge++;
            child++;
            if (u == pre) {
                if (child > 1) {joint[u] = true;ans.push_back(u);}
            }
            else if (low[v] >= num[u]) {joint[u] = true;ans.push_back(u);}
        }
        else low[u] = min(low[u], num[v]);
    }
}

int32_t main()
{
    //freopen("cf.inp","r",stdin);
    //freopen("cf.out","w",stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0),cout.tie(0);
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    for (int i = 0; i < n; i++)
        if (!num[i]) dfs(i, i);


    sort(ans.begin(),ans.end());
    for(int x: ans){
        cout<<x<<'\n';
    }
    return 0;
}


