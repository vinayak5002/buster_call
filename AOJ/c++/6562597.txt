#include<iostream>
#include<vector>
#include<queue>
using namespace std;

typedef pair<int,int> Pd;

int main()
{
	int V,E,r,s,t,d;
	cin>>V>>E>>r;
	
	vector<vector<Pd> > P(V,vector<Pd>());
	vector<long long> minP(V,1000000000LL);
	
	auto compare=[](Pd a,Pd b)
	{
		if(a.first>b.first)return a>b;
		else return a<b;
	};
	priority_queue<Pd,vector<Pd>,greater<Pd> >que;
	
	minP[r]=0;
	
	que.push(Pd(r,0));
	
	for(int i=0;i<E;i++)
	{
		cin>>s>>t>>d;
		P[s].push_back(Pd(t,d));
	}
  	
	while(!que.empty())
	{
		
		int now=que.top().second;
		que.pop();
      	
		for(int i=0;i<P[now].size();i++)
		{
			t=P[now][i].first;
			d=P[now][i].second;
			
			if(minP[t]<=minP[now]+d)continue;
			
			minP[t]=minP[now]+d;
			que.push(Pd(minP[t],t));
		}
	}
	
	for(int i=0;i<V;i++)
	{
		if(minP[i]==1000000000LL)cout<<"INF"<<endl;
		else cout<<minP[i]<<endl;
	}
	
	return 0;
}
