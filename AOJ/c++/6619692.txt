#include<bits/stdc++.h>
#define rep(i,n) for(int i=0; i< (n); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> P;
const int mod = 1000000007;
const int inf = (1<<30);
int vx[4] = {1,-1,0,0};
int vy[4] = {0, 0 , -1,1};
int h,w;
struct pt{
    int x;
    int y;

};

bool check(int x1,int y1){
    return h >= y1 && w >= x1 && x1 >= 1 && y1 >= 1 ;
}

bool can=true;

int kyori[11][11] ={};

int dfs(vector<vector<int>> teabl, pt from,pt to){
    teabl[from.y][from.x]=0;
    int res=0;
    queue<pt> q; q.push(from);
        while(q.size()){
            pt now=q.front(); q.pop();
            if( now.x == to.x && now.y == to.y ){
                return -teabl[now.y][now.x];
            }
            rep(e,4){
                pt next;
                if(check(now.x+vx[e],now.y+vy[e]) && teabl[now.y+vy[e]][now.x+vx[e]] > -1 ){
                    //cout<<"if"<<endl;
                    next.x=now.x+vx[e];
                    next.y=now.y+vy[e];
                    teabl[next.y][next.x]= teabl[now.y][now.x]-1;
                    q.push(next);
                }
            }
        }
    can=false;
    return res;
}

int main(){
    while(true){
    vector<vector<int>> teabl(22,vector<int>(22,-1));
    vector<pt> dast;
    can=true;
    cin>>w>>h;
    if(w == 0 && h == 0) break;
    int c=1;
    pt r;
    for(int i=1; i<=h; i++){
        for(int j=1; j<=w; j++){
            char k; cin>>k;
            if(k == '.') teabl[i][j] = 0;
            else if(k == 'x') teabl[i][j] = -1;
            else if(k == 'o'){
                r.y=i; r.x=j;
                teabl[i][j] = 0;
            }
            else if(k == '*'){
                teabl[i][j] = c;
                c++;
                pt r2; r2.x=j; r2.y=i;
                dast.push_back(r2);
            }
        }
    }

    vector<int> v(c-1);
    iota(v.begin(),v.end(), 1);
    int ans=inf;
    int robky[11]={};
    for(int j=0; j < c-1; j++){
        robky[j+1]=dfs(teabl,r,dast[j]);
    }
    rep(i,c-1){
        for(int j=i+1; j < c-1; j++){
            kyori[i+1][j+1]=dfs(teabl,dast[i],dast[j]);
            kyori[j+1][i+1]=kyori[i+1][j+1];
            //cout<<kyori[i+1][j+1]<<endl;
        }
        //cout<<endl;
    }
    if(can== false){
        cout<<-1<<endl;
        break;
    }

    do{
        int res=0;
        res+=robky[v[0]];
        rep(i,v.size()-1){
            res+=kyori[v[i]][v[i+1]];
        } 
        ans=min(ans,res);


    }while(next_permutation(v.begin(),v.end()));
    
    cout<<ans<<endl;
    }

}
