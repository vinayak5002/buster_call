#include <bits/stdc++.h>
using namespace std;
using ll = long long;
constexpr ll inf = (1LL << 60);
struct edge {
    ll from;
    ll to;
    ll cost;
};
using Graph = vector<vector<edge>>;
int main()
{
    ll v, e, r;
    cin >> v >> e >> r;
    //Graph g(v);
    vector<edge> edges(e);
    for (ll i = 0; i < e; ++i) {
        ll s, t, d;
        cin >> s >> t >> d;
        edges[i] = edge{s, t, d};
    }
    vector<ll> dis;
    dis.assign(v, inf);
    ll i;
    dis[r] = 0;
    for (i = 0; i < v; ++i) {
        bool update = false;
        for (auto& e : edges) {
            if (dis[e.from] != inf && dis[e.to] > dis[e.from] + e.cost) {
                update = true;
                dis[e.to] = dis[e.from] + e.cost;
            }
        }
        if (update == false) {
            break;
        }
    }
    if (i == v) {
        cout << "NEGATIVE CYCLE" << endl;
        return 0;
    }
    for (ll i = 0; i < v; ++i) {
        if (dis[i] == inf) {
            cout << "INF" << endl;
        } else {
            cout << dis[i] << endl;
        }
    }
}
