#include <stdio.h>
#include <stdlib.h>

int **queue, *qsize;

void maxheapfy(int t, int id){
    int l = 2 * id + 1;
    int r = (id + 1) * 2;
    int largest = id;
    if((queue[t][id] < queue[t][l]) && (l < qsize[t])){
        largest = l;
    }
    if((queue[t][largest] < queue[t][r]) && (r < qsize[t])){
        largest = r;
    }
    if(id != largest){
        int tmp = queue[t][id];
        queue[t][id] = queue[t][largest];
        queue[t][largest] = tmp;
        maxheapfy(t, largest);
    }
}

void buildMaxHeap(int t){
    for(int i = (qsize[t]-2)/2; i >= 0; i = (i-1)/2){
        maxheapfy(t, i);
        if(i == 0) break;
    }
}

void deleteMax(int t){
    queue[t][0] =  queue[t][--qsize[t]];
    maxheapfy(t, 0);
}

int main(){
    int n,q,t,x,op;

    scanf("%d %d", &n, &q);
    queue = (int**)malloc(sizeof(int*)*(n+1));
    qsize = (int*)calloc((n+1), sizeof(int));
    for(int i = 0; i < n+1; i++){
        queue[i] = (int*)malloc(sizeof(int)*(q+1));
    }

    int i = 0;
    while(q--){
        scanf("%d", &op);
        if(op == 0){
            scanf("%d %d", &t, &x);
            queue[t][qsize[t]++] = x;
            buildMaxHeap(t);
        }else if(op == 1){
            scanf("%d", &t);
            if(qsize[t] == 0) continue;
            printf("%d\n", queue[t][0]);
            i++;
        }else{
            scanf("%d", &t);
            if(qsize[t] == 0) continue;
            deleteMax(t);
        }
    }
}
