#include <bits/stdc++.h>
using std::cout;
using std::cin;
using std::endl;
namespace po167{
template<class Cap,class Cost>
struct min_cost_flow
{
	struct edge{
		int to;
		Cap cap;
		Cost cost;
	};
	std::vector<std::vector<edge>> G;
	std::vector<std::vector<int>> rev_edge;
	std::vector<std::pair<int,int>> edge_order;
	int _n;
	min_cost_flow(int n):G(n),rev_edge(n),_n(n){}
	int add_edge(int from,int to,Cap cap,Cost cost){
		assert(0<=from&&from<_n);
		assert(0<=to&&to<_n);
		edge_order.push_back({from,(int)(G[from].size())});
		rev_edge[to].push_back((int)(G[from].size()));
		G[from].push_back((edge){to,cap,cost});
		rev_edge[from].push_back((int)(G[to].size()));
		G[to].push_back((edge){from,(Cap)0,-cost});
		return (int)(edge_order.size());
	}
	std::vector<Cost> min_cost_slope(int s,int t){
		assert(0<=s&&s<_n);
		assert(0<=t&&t<_n);
		std::vector<Cost> ans={0};
		std::vector<Cost> pot(_n);
		while(true){
			std::priority_queue<std::pair<Cost,int>,std::vector<std::pair<Cost,int>>,std::greater<std::pair<Cost,int>>> pq;
			std::vector<int> front(_n);
			std::vector<Cost> seen(_n,std::numeric_limits<Cost>::max());
			seen[s]=0;
			pq.push({0,s});
			while(!pq.empty()){
				Cost time;
				int ind;
				Cost n_time;
				std::tie(time,ind)=pq.top();
				pq.pop();
				if(seen[ind]<time) continue;
				for(int i=0;i<(int)(G[ind].size());i++){
					auto x=G[ind][i];
					if(x.cap==0) continue;
					n_time=time+x.cost+pot[ind]-pot[x.to];
					if(seen[x.to]>n_time){
						seen[x.to]=n_time;
						front[x.to]=rev_edge[ind][i];
						pq.push({n_time,x.to});
					}
				}
			}
			/*for(int i=0;i<_n;i++){
				cout<<seen[i]<<" ";
			}
			cout<<endl;*/
			if(seen[t]==std::numeric_limits<Cost>::max()){
				break;
			}
			int ind=t;
			while(ind!=s){
				G[ind][front[ind]].cap++;
				int f=G[ind][front[ind]].to;
				G[f][rev_edge[ind][front[ind]]].cap--;
				ind=f;
			}
			ans.push_back(pot[t]-pot[s]+seen[t]);
			std::swap(pot,seen);
		}
		for(int i=1;i<(int)(ans.size());i++) ans[i+1]+=ans[i];
		return ans;
	}
	std::pair<Cap,Cost> flow(int s,int t){
		auto tmp=min_cost_slope(s,t);
		int x=tmp.size();
		return {(Cap)(x-1),tmp[x-1]};
	}
	std::tuple<int,int,Cap> report_edge(int i){
		int x,y;
		std::tie(x,y)=edge_order[i];
		int t=G[x][y].to;
		return {x,t,G[t][rev_edge[x][y]].cap};
	}
};
};



void solve();
// oddloop
int main() {
	solve();
}

void solve(){
	int n;
	cin>>n;
	std::vector<std::vector<int>> W(n,std::vector<int>(n)),E(n,std::vector<int>(n)),F(n,std::vector<int>(n));
	int tmp=0;
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++) cin>>W[i][j];
	}
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++) cin>>E[i][j];
	}
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			char c;
			cin>>c;
			if(c=='o'){
				F[i][j]=1;
				tmp+=E[i][j];
			}
		}
	}
	int M=2000;
	po167::min_cost_flow<int,int> G(n*2+2);
	int S=n*2,T=S+1;
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			if(F[i][j]) G.add_edge(i,j+n,1,M-E[i][j]);
			else G.add_edge(i,j+n,1,M+W[i][j]);
		}
	}
	for(int i=0;i<n;i++){
		G.add_edge(S,i,1,0);
		G.add_edge(i+n,T,1,0);
	}
	auto ans=G.flow(S,T);
	cout<<ans.second+tmp-M*n<<"\n";
	std::vector<std::pair<int,int>> p;
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			auto x=G.report_edge(i*n+j);
			int r=std::get<2>(x);
			if(r^F[i][j]) p.push_back({i,j});
		}
	}
	cout<<p.size()<<"\n";
	for(auto x:p){
		int s,t;
		std::tie(s,t)=x;
		cout<<s+1<<" "<<t+1<<" ";
		if(F[s][t]) cout<<"erase\n";
		else cout<<"write\n";
	}
}

