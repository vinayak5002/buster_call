#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include <stdbool.h>

void swap(int *pa, int *pb)
{
	int tmp;

	tmp = *pa;
	*pa = *pb;
	*pb = tmp;
}

void reverse(size_t first, size_t last, int a[])
{
	while (first != last && first != --last) {
		swap(&a[first], &a[last]);
		first++;
	}
}

bool next_permutation(size_t first, size_t last, int a[])
{
	size_t i, j, k;

	if (first == last) {
		return false;
	}

	if (first + 1 == last) {
		return false;
	}

	i = last - 1;

	while (true) {
		j = i--;

		if (a[i] < a[j]) {
			k = last;

			while (!(a[i] < a[--k])) {
			}

			swap(&a[i], &a[k]);
			reverse(j, last, a);
			return true;
		}

		if (i == first) {
			reverse(first, last, a);
			return false;
		}
	}
}
void merge_sort(int array[], int left, int right) {
	int i, j, k, mid;
	int work[10]; 
	if (left < right) {
		mid = (left + right) / 2; 
		merge_sort(array, left, mid);  
		merge_sort(array, mid + 1, right);  
		for (i = mid; i >= left; i--) { work[i] = array[i]; } 
		for (j = mid + 1; j <= right; j++) {
			work[right - (j - (mid + 1))] = array[j]; 
		}
		i = left; j = right;
		for (k = left; k <= right; k++) {
			if (work[i] < work[j]) { array[k] = work[i++]; }
			else                   { array[k] = work[j--]; }
		}
	}
}
int a[10];
int b[10];
int c[100000][10];
int main(void)
{
	size_t n, i;
	int count = 0;
	scanf("%d", &n);
	for (i = 0; i < n; i++){
		scanf("%d", &a[i]);
		b[i] = a[i];
		if (n == 1){
			printf("\n");
			printf("%d\n", a[i]);
			printf("\n");
			return 0;
		}
	}
	merge_sort(b, 0, n-1);
	do{
		for (i = 0; i < n; i++){
			c[count][i] = b[i];
		}
		count++;
	} while (next_permutation(0, n, b));
	for (i = 0; i < count; i++){
		for (int j = 0; j < n; j++){
			if (c[i][j] != a[j]){
				break;
			}
			else if (j == n - 1){
				if (i == 0){
					printf("\n");
					for (int k = 0; k < n; k++){
						if (k == 0){
							printf("%d", c[i][k]);
						}
						else{
							printf(" %d", c[i][k]);
						}
					}
					printf("\n");
					for (int k = 0; k < n; k++){
						if (k == 0){
							printf("%d", c[i+1][k]);
						}
						else{
							printf(" %d", c[i+1][k]);
						}
					}
					printf("\n");
					return 0;
				}
				else if (i == count - 1){
					for (int k = 0; k < n; k++){
						if (k == 0){
							printf("%d", c[i - 1][k]);
						}
						else{
							printf(" %d", c[i - 1][k]);
						}
					}
					printf("\n");
					for (int k = 0; k < n; k++){
						if (k == 0){
							printf("%d", c[i][k]);
						}
						else{
							printf(" %d", c[i][k]);
						}
					}
					printf("\n");
					printf("\n");
					return 0;
				}
				else{
					for (int k = 0; k < n; k++){
						if (k == 0){
							printf("%d", c[i - 1][k]);
						}
						else{
							printf(" %d", c[i - 1][k]);
						}
					}
					printf("\n");
					for (int k = 0; k < n; k++){
						if (k == 0){
							printf("%d", c[i][k]);
						}
						else{
							printf(" %d", c[i][k]);
						}
					}
					printf("\n");
					for (int k = 0; k < n; k++){
						if (k == 0){
							printf("%d", c[i + 1][k]);
						}
						else{
							printf(" %d", c[i + 1][k]);
						}
					}
					printf("\n");
					return 0;
				}
			}
		}
	}
	return 0;
}
