#include <iostream>
#include <vector>
using namespace std;
using Graph = vector<vector<int>>;

vector<bool> seen;
vector<int> d; // 行きがけ順
vector<int> f; // 帰りがけ順

void DFS(const Graph &G, int u, int& ptr) {
    // 行きがけ順をインクリメントしながらメモ
    d[u] = ptr;
    ptr=ptr+1;

    seen[u] = true;
    for (auto next_u : G[u]) { 
        if (seen[next_u]) 
            continue;
        DFS(G, next_u, ptr);
    }

    // 帰りがけ順をインクリメントしながらメモ
    f[u] = ptr;
    ptr=ptr+1;
}

int main() {
    int N;// 頂点数
    cin >> N ;
    int i,j,u,k,v;

    // グラフ入力受取
    Graph G(N);
    for (i = 0; i < N; i++) {
        cin >> u >> k;
        for(j=0;j<k;j++){
            cin >> v;
            G[u-1].push_back(v-1);
        }
    }

    // 頂点 0 をスタートとした探索
    seen.assign(N, false); // 全頂点を「未訪問」に初期化
    d.resize(N);
    f.resize(N);
    int d_ptr = 0, f_ptr = 0;
    DFS(G, d_ptr, f_ptr);
    
    // 各頂点 u の行きがけ順、帰りがけ順を出力
    for (u = 0; u < N; u++)
        cout << u+1 << " " << d[u]+1 << " " << f[u]+1 << endl;
}
