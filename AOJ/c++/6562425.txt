#include <bits/stdc++.h>
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define all(x) (x).begin(), (x).end()
typedef long long ll;
using namespace std;

struct card
{
    char mark;
    int num;
};

int partition(card A[], int p, int r)
{
    int x = A[r].num;
    int i = p-1;
    for (int j = p; j < r; j++)
    {
        if (A[j].num <= x)
        {
            i++;
            swap(A[i], A[j]);
        }
    }
    swap(A[i+1], A[r]);
    return i+1;
}
void quickSort(card A[], int p, int r)
{
    if (p < r)
    {
        int q = partition(A, p, r);
        quickSort(A, p, q-1);
        quickSort(A, q+1, r);
    }
}

/**
 * @brief バブルソート
 * 
 * @param a ソートする配列
 * @param n 配列のサイズ
 * @details O(n^2)、安定なソート
 */
void bubbleSort(card a[], long long n)
{
    long long flag = 1;
    while (flag)
    {
        flag = 0;
        long long i = 0;
        for (long long j = n - 1; j >= i+1; j--)
        {
            if (a[j].num < a[j-1].num)
            {
                swap(a[j], a[j-1]);
                flag = 1;
            }
        }
        i++;
    }
}

int main()
{
    int n; cin >> n;
    card a[n], b[n];
    rep(i, n)
    {
        cin >> a[i].mark >> a[i].num;
        b[i] = a[i];
    }
    quickSort(a, 0, n-1);
    bubbleSort(a, n);
    string ans = "Stable";
    rep(i, n)
    {
        if (a[i].num != b[i].num && a[i].mark != b[i].mark)
        {
            ans = "Not stable";
            break;
        }
    }
    cout << ans << endl;
    rep(i, n)
    {
        cout << a[i].mark << " " << a[i].num << endl;
    }
    return 0;
}

