#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, s, t) for (int i = (int)(s); i < (int)(t); ++i)
#define revrep(i, t, s) for (int i = (int)(t)-1; i >= (int)(s); --i)
#define all(x) begin(x), end(x)
template <typename T> bool chmax(T& a, const T& b) { return a < b ? (a = b, 1) : 0; }
template <typename T> bool chmin(T& a, const T& b) { return a > b ? (a = b, 1) : 0; }

template <typename T>
class FordFulkerson {
public:
    FordFulkerson() = default;
    explicit FordFulkerson(int n) : G(n), used(n) {}

    void add_edge(int u, int v, T cap, int id) {
        G[u].emplace_back(v, cap, (int) G[v].size(), id);
        G[v].emplace_back(u, 0, (int) G[u].size() - 1, id);
    }

    T max_flow(int s, int t) {
        T flow = 0;
        while (true) {
            std::fill(used.begin(), used.end(), false);
            T f = dfs(s, t, INF);
            if (f == 0) return flow;
            flow += f;
        }
    }

    T query(int s, int t, int u, int id) {
        T d = 0;
        for (auto& e : G[u]) {
            if (e.id == id) {
                if (e.cap == 0) {
                    return 0;
                    // d -= 1;
                    // fill(used.begin(), used.end(), false);
                    // dfs(t, e.to, 1);
                    // e.cap = 1;
                    // G[e.to][e.rev].cap = 0;
                    // fill(used.begin(), used.end(), false);
                    // dfs(u, s, 1);
                }
                e.cap = 0;
                G[e.to][e.rev].cap = 1;
                fill(used.begin(), used.end(), false);
                d += dfs(s, t, 1);
                if (d == 0) {
                    e.cap = 1;
                    G[e.to][e.rev].cap = 0;
                    return 0;
                }

                if (e.cap == 1) {
                    fill(used.begin(), used.end(), false);
                    dfs(t, u, 1);
                    e.cap = 0;
                    G[e.to][e.rev].cap = 1;
                    fill(used.begin(), used.end(), false);
                    dfs(e.to, s, 1);
                }
                e.cap = 1;
                G[e.to][e.rev].cap = 0;
                fill(used.begin(), used.end(), false);
                dfs(s, t, 1);
                break;
            }
        }
        return d;
    }

    void output() {
        rep(i,0,G.size()) for (auto& e : G[i]) if (e.cap == 1) {
            cout << "(" << i << " " << e.to << "), ";
        }
        cout << endl;
    }


private:
    struct Edge {
        int to;
        T cap;
        int rev;
        int id;
        Edge(int to, T cap, int rev, int id) : to(to), cap(cap), rev(rev), id(id) {}
    };

    const T INF = std::numeric_limits<T>::max() / 2;

    std::vector<std::vector<Edge>> G;
    std::vector<bool> used;

    T dfs(int v, int t, T f) {
        if (v == t) return f;
        used[v] = true;
        for (auto& e : G[v]) {
            if (!used[e.to] && e.cap > 0) {
                T d = dfs(e.to, t, std::min(f, e.cap));
                if (d > 0) {
                    e.cap -= d;
                    G[e.to][e.rev].cap += d;
                    return d;
                }
            }
        }
        return 0;
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);

    while (true) {
        int N, M, S, T;
        cin >> N >> M >> S >> T;
        if (N == 0) break;
        --S, --T;
        FordFulkerson<int> G(N);
        vector<int> us(M);
        rep(i,0,M) {
            int a, b;
            cin >> a >> b;
            --a, --b;
            us[i] = a;
            G.add_edge(a, b, 1, i);
        }

        int ans = G.max_flow(S, T), cnt = 0;
        rep(i,0,M) {
            if (G.query(S, T, us[i], i) > 0) {
                ++cnt;
            }
        }
        if (cnt > 0) ++ans;
        cout << ans << " " << cnt << "\n";
    }
}
