#define READ_FROM_FILE 0

#if READ_FROM_FILE
#include <fstream>
#endif

#include <iostream>
#include <string>
#include <vector>
#include <queue>
using namespace std;

typedef pair<int, int> Pii;


#define SPACE (0)
#define QUEEN (1)
#define DOMINATED  (2)


class ChessBoard{
private:
	vector<char> cur_board_;
	vector<int> is_covered_board_;
	vector<Pii> directions_;

public:
	ChessBoard(){
		cur_board_.resize(64, '.');
		is_covered_board_.resize(64, SPACE);

		directions_.push_back(Pii(1, 0));
		directions_.push_back(Pii(-1, 0));
		directions_.push_back(Pii(0, 1));
		directions_.push_back(Pii(0, -1));
		directions_.push_back(Pii(1, 1));
		directions_.push_back(Pii(1, -1));
		directions_.push_back(Pii(-1, 1));
		directions_.push_back(Pii(-1, -1));
		return;
	}
	~ChessBoard(){
		return;
	}

	bool can_set(int x, int y){
		if(is_covered_board_[y * 8 + x] != SPACE){
			return false;
		}

		bool settable = true;

		for(int i = 0; i < directions_.size(); i++){
			int xx = x;
			int yy = y;

			for(;;){
				xx += directions_[i].first;
				yy += directions_[i].second;

				if(xx < 0 || xx >= 8 || yy < 0 || yy >= 8){
					break;
				}

				if(is_covered_board_[yy * 8 + xx] == QUEEN){
					settable = false;
					i = directions_.size();
					break;
				}
			}
		}

		return settable;
	}

	vector<Pii> make_candidates(){
		vector<Pii> candidates;

		for(int y = 0; y < 8; y++){
			for(int x = 0; x < 8; x++){
				if(can_set(x, y)){
					candidates.push_back(Pii(x, y));
				}
			}
		}

		return candidates;
	}

	void set(int x, int y){
		cur_board_[y * 8 + x] = 'Q';
		is_covered_board_[y * 8 + x] = QUEEN;
		for(int i = 0; i < directions_.size(); i++){
			int xx = x;
			int yy = y;
			for(;;){
				xx += directions_[i].first;
				yy += directions_[i].second;

				if(xx < 0 || xx >= 8 || yy < 0 || yy >= 8){
					break;
				}
				is_covered_board_[yy * 8 + xx] = DOMINATED;
			}
		}
	}

	void print_board(){
		for(int y = 0; y < 8; y++){
			int offset = y * 8;
			for(int x = 0; x < 8; x++){
				cout << cur_board_[offset + x];
			}
			cout << endl;
		}
	}
};

ChessBoard result;

void dfs(ChessBoard chess_board, int k){
	if(k == 8){
		result = chess_board;
	}
	else{
		vector<Pii> candidates = chess_board.make_candidates();

		for(int i = 0; i < candidates.size(); i++){
			ChessBoard tmp = chess_board;
			tmp.set(candidates[i].first, candidates[i].second);
			dfs(tmp, k + 1);
		}
	}
	return;
}


int main() {
#if READ_FROM_FILE
	ifstream ifs("test0.txt");
	cin.rdbuf(ifs.rdbuf());
#endif
	int k, r, c;
	ChessBoard chess_board;

	cin >> k;
	for(int i = 0; i < k; i++){
		cin >> r >> c;
		chess_board.set(c, r);
	}

	dfs(chess_board, k);
	result.print_board();
	return 0;
}


