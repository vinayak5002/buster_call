#include <iostream>
#include <vector>
#include <stack>
using namespace std;


int main() {
    long long n,m,s; cin >> n >> m >> s;
    long long g[n][n];
    long long visited[n];
    long long cost[n];
    for(int i = 0;i < n;i++){
        visited[i] = 0;
        cost[i] = 1000000;
        for(int j = 0;j < n;j++){
            g[i][j] = 1000000;
        }
    }
    
    for(int i = 0;i < m;i++){
        long long a,b,c; cin >> a >> b >> c;
        g[a][b] = c;
    }
    
    
    //始点のノードとコストを指定(始点なのでコストは0)
    //visited = 0 未訪問 2 訪問済み
    cost[s] = 0;
    visited[s] = 0;
    
    while(true) {
        long long u = -1;
        long long min = 1000000;
        
        //訪問可能なノードの中でコストがもっとも低いノード且つ未訪問のノードを見つける
        for(int i = 0;i < n;i++){
            if(min > cost[i] && visited[i] != 2) {
                min = cost[i];
                u = i;
            }
        }
        //なければループ終了
        if(u == -1) break;
        
        //見つけたノードを訪問済みにする
        visited[u] = 2;
        
        //見つけたノードから訪問可能なノードのコストを計算
        for(int i = 0;i < n;i++){
    
            //未訪問且つコストが設定されているノードかどうか
            if(visited[i] != 2 && g[u][i] != 1000000){
                
                if(cost[i] > cost[u] + g[u][i]) {
                    cost[i] = cost[u] + g[u][i];
                    visited[i] = 1;
                }
            }
        }
    }
    
    for(int i = 0;i < n;i++) {
        if(cost[i] == 1000000){
            cout << "INF" << endl;
        }else{
            cout << cost[i] << endl;
        }
    }
    
}

