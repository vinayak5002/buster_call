#include <iostream>
#include <vector>
#include <queue>
#include <set>

using namespace std;

// union by size + path having
class UnionFind
{
public:
    vector<int> par; // 各元の親を表す配列
    vector<int> siz; // 素集合のサイズを表す配列(1 で初期化)

    // Constructor
    UnionFind(int sz_) : par(sz_), siz(sz_, 1)
    {
        for (int i = 0; i < sz_; ++i)
            par[i] = i; // 初期では親は自分自身
    }
    void init(int sz_)
    {
        par.resize(sz_);
        siz.assign(sz_, 1); // resize だとなぜか初期化されなかった
        for (int i = 0; i < sz_; ++i)
            par[i] = i; // 初期では親は自分自身
    }

    // Member Function
    // Find
    int root(int x)
    { // 根の検索
        while (par[x] != x)
        {
            x = par[x] = par[par[x]]; // x の親の親を x の親とする
        }
        return x;
    }

    // Union(Unite, Merge)
    bool merge(int x, int y)
    {
        x = root(x);
        y = root(y);
        if (x == y)
            return false;
        // merge technique（データ構造をマージするテク．小を大にくっつける）
        if (siz[x] < siz[y])
            swap(x, y);
        siz[x] += siz[y];
        par[y] = x;
        return true;
    }

    bool issame(int x, int y)
    { // 連結判定
        return root(x) == root(y);
    }
    int size(int x)
    { // 素集合のサイズ
        return siz[root(x)];
    }
};

struct edge
{
    int from;
    int to;
    int weight;
    bool operator<(const edge &e) const
    {
        return this->weight > e.weight;
    }
    edge(int from = 0, int to = 0, int weight = 0) : from(from), to(to), weight(weight) {}
};

int Kruskal(priority_queue<edge> edgeset, int n);

int main()
{
    priority_queue<edge> edgeset;
    int v, e;
    cin >> v >> e;
    for (int i = 0; i < e; i++)
    {
        int s, t, w;
        cin >> s >> t >> w;
        edgeset.emplace(s, t, w);
    }
    cout << Kruskal(edgeset, v) << endl;
    return 0;
}

int Kruskal(priority_queue<edge> edgeset, int v)
{
    UnionFind uf(v);
    set<int> selected;
    vector<edge> ans;
    for (int i = 0; i < v - 1; i++)
    {
        edge edge;
        do
        {
            edge = edgeset.top();
            edgeset.pop();
        } while (uf.issame(edge.to, edge.from));
        selected.insert(edge.from);
        selected.insert(edge.to);
        uf.merge(edge.from, edge.to);
        ans.push_back(edge);
    }
    int sum = 0;
    for (auto e : ans)
    {
        // printf("%d, %d, %d\n", get<0>(e), get<1>(e), get<2>(e));
        sum += e.weight;
    }
    return sum;
}
