#include <iostream> // cout, endl, cin
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <cstdio> // printf
#include <map> // map
#include <queue> // queue, priority_queue
#include <set> // set
#include <stack> // stack
#include <deque> // deque
#include <unordered_map> // unordered_map
#include <unordered_set> // unordered_set
#include <bitset> // bitset
#include <cctype> // isupper, islower, isdigit, toupper, tolower
using namespace std;
#define llint int64_t
struct l{
    llint x;
    struct l *fore;
    struct l *back;
    l(){
        fore = NULL;
        back = NULL;
    }
};
int insert(struct l *&F){
    struct l *New = (struct l*)malloc(sizeof(struct l));
    int a;
    cin >> a;
    New->x = a;
    if(F != NULL){
        New->fore = F;
        F->back = New;
    }
    F = New;
    return 0;
}
int delete0(struct l *&F){
    struct l *c = (struct l*)malloc(sizeof(struct l));
    c = F;
    int a;
    cin >> a;
    while(c->fore != NULL && c->x != a) c = c->fore;
    if(c->x == a){
        if(c->back == NULL) F = c->fore;
        else if(c->fore == NULL){
            c = c->back;
            c->fore = NULL;
        } else {
            struct l *c1 = (struct l*)malloc(sizeof(struct l));
            c1 = c->fore;
            c = c->back;
            c->fore = c1;
            c1->back = c;
        }
    }
    return 0;
}
int deleteF(struct l *&F){
    if(F->fore == NULL) F = NULL;
    else if(F->fore != NULL){
        F = F->fore;
        F->back = NULL;
    }
    return 0;
}
int deleteL(struct l *&F){
    struct l *c = (struct l*)malloc(sizeof(struct l));
    c = F;
    while(c->fore != NULL) c = c->fore;
    if(c->back == NULL) F = NULL;
    else if(c->back != NULL){
        c = c->back;
        c->fore = NULL;
    }
    return 0;
}
int print(struct l *&F){
    struct l *c = (struct l*)malloc(sizeof(struct l));
    c = F;
    while(c->fore != NULL){
        cout << c->x << " ";
        c = c->fore;
    }
    cout << c->x << endl;
    return 0;
}
int main(){
    llint n;
    cin >> n;
    struct l *F = (struct l*)malloc(sizeof(struct l));
    F = NULL;
    string s;
    while(n--){
        cin >> s;
        if(s.at(0) == 'i') insert(F);
        else if(s.size() == 6) delete0(F);
        else if(s.at(6) == 'F') deleteF(F);
        else if(s.at(6) == 'L') deleteL(F);
        //print(F);
    }
    print(F);
    return 0;
}
