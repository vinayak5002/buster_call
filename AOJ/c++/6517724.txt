#include <stdio.h>
#define MAX 100004

typedef struct Node{
	int parent, left, right;
}node_t;

node_t node[MAX];
int n, depth[MAX];

void depth_search(int parent, int p);
void print(int i);

int main (void){
	int i, j, a, r, l;
	int number, k;		//節点の個数、節点の番号、次元数
	scanf("%d", &n);
	
	for(i = 0; i < n; i++){
		node[i].parent = -1;
		node[i].left = -1;
		node[i].right = -1;
	}
	
	for(i = 0; i < n; i++){
		scanf("%d %d", &number, &k);
		for(j = 0; j < k; j++){
			scanf("%d", &a);	//aに節点を格納
			if(j == 0){
				node[number].left = a;		//左の子を保存
			}
			
			else{
				node[l].right = a;		//兄弟を保存
			}
			
			l = a;
			node[l].parent = number;		//親の番号を格納
		}
	}
	
	for(i = 0; i < n; i++){
		if(node[i].parent == -1){
			r = i;		//根つき木親の番号は何かを探す
		}
	}
	
	depth_search(r, 0);
	
	for(i = 0; i < n; i++){
		print(i);		//出力
	}
	
	return 0;
}

void depth_search(int parent, int p){
	depth[parent] = p;
	if(node[parent].right != -1){
		depth_search(node[parent].right, p);	//兄弟に同じ深さを格納
	}
	
	if(node[parent].left != -1){
		depth_search(node[parent].left, p + 1);	//左の子に自分の高さの+1を格納
	}
}

void print(int i){
	int k, c;
	printf("node %d: ", i);
	printf("parent = %d, ", node[i].parent);
	printf("depth = %d, ", depth[i]);
	if(node[i].parent == -1){
		printf("root, ");
	}
	
	else if(node[i].left == -1){
		printf("leaf, ");
	}
	
	else{
		printf("internal node, ");
	}
	
	printf("[");
	for(k = 0, c = node[i].left; c != -1; c = node[c].right){
		printf("%d", c);
		if(node[c].right != -1){
			printf(", ");
		}
	}
	
	printf("]\n");
}
