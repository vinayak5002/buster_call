#include <bits/stdc++.h>
//#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
#define all(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

bool chmax(ll& p, ll q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

bool chmin(ll& p, ll q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}


void warshall_floyd(int n, vvll& d) {
    for (int k = 0; k < n; k++) {       // 経由する頂点
        for (int i = 0; i < n; i++) {    // 始点
            for (int j = 0; j < n; j++) {  // 終点
                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
            }
        }
    }
}

int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);


    while (1) {
        ll H, W;
        cin >> W >> H;
        if (H == 0)return 0;
        vvll dist(H * W, vll(H * W, 1e9));

        vector<string> S(H);
        rep(i, H)cin >> S[i];
        vll M;
        ll SY = -1;
        rep(h, H)rep(w, W) {
            if (S[h][w] != 'x')dist[h * W + w][h * W + w] = 0;
            //if (S[h][w] == 'o')M.push_back(h * W + w);
            if (w != W - 1) {
                if (S[h][w] != 'x' && S[h][w + 1] != 'x') {
                    dist[h * W + w][h * W + w + 1] = 1;
                    dist[h * W + w + 1][h * W + w] = 1;
                }
            }
            if (h != H - 1) {
                if (S[h][w] != 'x' && S[h + 1][w] != 'x') {
                    dist[h * W + w][h * W + w + W] = 1;
                    dist[h * W + w + W][h * W + w] = 1;
                }
            }
            if (S[h][w] == '*')M.push_back(h * W + w);
            if (S[h][w] == 'o')SY = h * W + w;
        }

        warshall_floyd(H * W, dist);
        ll n = M.size();
        vvll DP((1 << n), vll(n, 1e9));
        rep(i, n) {
            DP[(1 << i)][i] = dist[SY][M[i]];
        }
        rep(bit, (1 << n)) {
            rep(j, n) {
                if (!(bit & (1 << j)))continue;
                rep(i, n) {
                    if (bit & (1 << i))continue;
                    chmin(DP[bit + (1 << i)][i], DP[bit][j] + dist[M[j]][M[i]]);
                }
            }
        }
        ll an = 1e18;
        rep(i, n)chmin(an, DP[(1 << n) - 1][i]);

        cout << (an < 1e9 ? an : -1) << endl;

    }


}
