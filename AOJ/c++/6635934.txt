#include <iostream>
#include <cstdio>
#include <iterator>
#include <string>
#include <sstream>
#include <bitset>
#include <vector>
#include <array>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
#define _USE_MATH_DEFINES  // for M_PI
#include <cmath>
using std::cin;
using std::cout;
using std::endl;
using std::string;
using std::bitset;
using std::vector;
using std::array;
using std::stack;
using std::queue;
using std::set;
using std::map;
using std::pair;
using llong = long long;
template<typename T>
using nlimits = std::numeric_limits<T>;
#define REP(i, n) for (int i = 0; i < static_cast<int>(n); ++i)
#define RREP(i, n) for (int i = static_cast<int>(n) - 1; i >= 0; --i)
#define FOR(i, a, b) for (int i = static_cast<int>(a); i < static_cast<int>(b); ++i)
#define RFOR(i, a, b) for (int i = static_cast<int>(a) - 1; i >= static_cast<int>(b); --i)


template<typename T>
void PrintArray(const T* a, const size_t n);

int N;
array<int, 101> A;
array<array<int, 101>, 101> DP;

llong solve() {
    REP(i, N + 1) DP[i].fill(nlimits<int>::max());
    REP(i, N + 1) DP[i][i] = 0;
    FOR(n, 2, N + 1) FOR(i, 1, N - n + 2) {
        int j = i + n - 1;
        FOR(k, i, j) {
            DP[i][j] = std::min(DP[i][j], DP[i][k] + DP[k + 1][j] + A[i - 1] * A[k] * A[j]);
        }
    }
    return DP[1][N];
}

int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> N;
    REP(i, N) cin >> A[i] >> A[i + 1];

    cout << solve() << endl;
}


template<typename T>
void PrintArray(const T* a, const size_t n) {
    string s = std::to_string(a[0]);
    FOR(i, 1, n) s += " " + std::to_string(a[i]);
    cout << s + "\n";
}

