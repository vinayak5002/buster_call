#include <bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/tag_and_trait.hpp>
using namespace __gnu_pbds;
template<class T, class Ta, class Tb> using Tree = tree<T, Ta, Tb, rb_tree_tag, tree_order_statistics_node_update>;

#define _GLIBCXX_DEBUG 
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define rep(i, j, n) for(int i = j; i < n ; i++)

template<class T> using V = vector<T>;
template<class T> using VV = V<V<T>>;

using ll = long long;
using ld = long double;
using pii = pair<int, int>;
using psi = pair<string, int>;
using pll = pair<ll, ll>;
using vb = V<bool>;
using vi = V<int>;
using vd = V<double>;
using vc = V<char>;
using vs = V<string>;
using vll = V<ll>;
using vld = V<ld>;
using vvi = V<vi>;
using vvd = V<vd>;
using vvll = V<vll>;
using vvld = V<vld>;
using vvc = V<vc>;

//const int mod = 998244353;
const int mod = 1000000007;

const int inf = 1LL << 30;
const ll infl = 1LL << 60;


template<typename T> bool chmax(T& a, const T &b) { if (a < b) { a = b; return true; } return false; }
template<typename T> bool chmin(T& a, const T &b) { if (a > b) { a = b; return true; } return false; }
template<class... T> void input(T&... a) { (cin >> ... >> a); }
template<class T> void print(const T &a) { cout << a << '\n'; }
template<class T, class... Ts> void print(const T& a, const Ts&... b) { cout << a; (cout << ... << (cout << ' ', b)); cout << '\n'; }
template<class T> int lower(V<T> &a, T &k) { int ok = a.size(), ng = -1; while(abs(ok - ng) > 1) { int mid = (ok + ng) / 2; if(a[mid] >= k) ok = mid; else ng = mid; } return ok; }
template<class T> int upper(V<T> &a, T &k) { int ok = a.size(), ng = -1; while(abs(ok - ng) > 1) { int mid = (ok + ng) / 2; if(a[mid] > k) ok = mid; else ng = mid; } return ok; }

ll power(ll n, ll k) { ll res = 1; while(k) { if(k & 1) res *= n; n *= n; k >>= 1; } return res; }
ll power_mod(ll n, ll k) { ll res = 1; while(k) { if(k & 1) res = res * n % mod; n = n * n % mod; k >>= 1; } return res; }
bool is_prime(ll n) { if(n == 1) return 0; for(ll i = 2; i * i <= n; i++) if(n % i == 0) return 0; return 1; }
V<ll> enum_divisors(ll n) { V<ll> res; for(ll i = 1; i * i <= n; i++)  if(n % i == 0) { res.push_back(i); if(n / i != i) res.push_back(n / i); }  sort(all(res)); return res; }
V<pll> prime_factorize(ll n) { V<pll> res; for(ll i = 2; i * i <= n; i++) { if(n % i != 0) continue; ll ex = 0; while(n % i == 0) { ex++; n /= i; } res.push_back({i, ex}); } if(n != 1) res.push_back({n, 1}); return res; }
vb eratosthenes(int n) { vb res(n + 1, 1); rep(i, 2, n + 1) if(res[i]) for(int j = 2 * i; j <= n; j += i) res[j] = 0; return res; }

class FactorialMod {
  
  void calc_inverse() {
    inverse[0] = 0;
    inverse[1] = 1;
    rep(i, 2, max_num + 1) {
      inverse[i] = mod - ((mod / i) * inverse[mod % i] % mod);
    }
  }
    
  void calc_factorial_inverse() {
      factorial[0] = factorial_inverse[0] = 1;
      rep(i, 1, max_num + 1) {
        factorial[i] = (factorial[i - 1] * i) % mod;
        factorial_inverse[i] = (factorial_inverse[i - 1] * inverse[i]) % mod;
      }
    }
    
 public:  
    int max_num;
    //int mod;
    vll inverse;
    vll factorial;
    vll factorial_inverse;
    
    FactorialMod(int _max_num/*, int _mod*/) {
      max_num = _max_num;
      //mod = _mod;
      inverse = vll(max_num + 1);
      factorial = vll(max_num + 1);
      factorial_inverse = vll(max_num + 1);
      calc_inverse();
      calc_factorial_inverse();
    }
    
   ll conbination_mod(int n, int k) {
    if(min(n, k) < 0 || max(n, k) > max_num || k > n) return 0;
    return (((factorial[n] * factorial_inverse[k]) % mod) * factorial_inverse[n - k]) % mod;
  }
  
  ll multi_choose_mod(int n, int k) {
    return conbination_mod(n + k - 1, k);
  }
};



int main() {
  cin.tie(nullptr);
  ios::sync_with_stdio(false);
  
  int n, k; cin >> n >> k;
  FactorialMod ans(k);
  if(k < n) {
    print(0);
    return 0;
  }
  print(ans.factorial[k] * ans.factorial_inverse[k - n] % mod);
  return 0;
}
/*

*/
