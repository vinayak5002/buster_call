#include<iostream>
#include<algorithm>
#include<vector>
#include<set>
#include<map>


using namespace std;

int main(){

    int result = 0;

    //頂点Vと辺の数Eの読み取り
    int V, E;
    cin >> V >> E;

    //重み付き隣接リストの作成
    vector< vector<int> > L(V, vector<int>());
    map<pair<int,int>,int> w;
    for (int i=0; i<E; i++){
        int s, t, d;
        cin >> s >> t >> d;
        L[s].push_back(t);
        L[t].push_back(s);

        w[make_pair(s,t)]=d;
        w[make_pair(t,s)]=d;
    }

    set <int> U;
    set <int> U_full;
    set <int> cU;

    for (int i=0; i<V; i++){
        U_full.insert(i);
    }

    cU = U_full;;

    U.insert(0);
    cU.erase(0);

    while (U.size() < V){
        int mini;
        set<int> W;
        for (int i:U){
            for (int j : L[i]){
                if (cU.find(j) != cU.end()){
                    W.insert(w.at(make_pair(i, j)));
                    //printf("%d\n",i);
                    //printf("%d\n",j);
                    //printf("%d\n\n",w.at(make_pair(i, j)));
                }
            }
        }
        mini = *W.begin();
        result += mini;
        //if (U.size() == 2) return 0;

        bool Q = true;

        for (int i:U){
            for (int j : L[i]){
                //printf("%d, %d__%d\n",i,j,w.at(make_pair(i, j)));
                if(mini == w.at(make_pair(i, j)) && cU.find(j) != cU.end()){
                    U.insert(j);
                    cU.erase(j);
                    //printf("___%d\n",j);

                    Q = false;

                    break;
                }
                if(Q==false){
                    break;
                }
            }
            if(Q==false){
                break;
            }
        }
    }
    
    printf("%d\n",result);

    return 0;
}
