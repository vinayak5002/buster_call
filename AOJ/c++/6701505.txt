#include <bits/stdc++.h>
typedef long long int ll;
using namespace std;
const int MOD = 1000000007;
typedef pair<ll, ll> P;
const double pi = 3.1415926536;
const int MAX = 2000003;
long long fac[MAX], finv[MAX], inv[MAX];
template<typename T> using min_priority_queue = priority_queue<T, vector<T>, greater<T>>;
void COMinit() {
    fac[0] = fac[1] = 1;
    finv[0] = finv[1] = 1;
    inv[1] = 1;
    for (int i = 2; i < MAX; i++){
        fac[i] = fac[i - 1] * i % MOD;
        inv[i] = MOD - inv[MOD%i] * (MOD / i) % MOD;
        finv[i] = finv[i - 1] * inv[i] % MOD;
    }
}
// 二項係数計算
long long COM(int n, int k){
    if (n < k) return 0;
    if (n < 0 || k < 0) return 0;
    return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;
}
ll gcd(ll x, ll y) {
   if (y == 0) return x;
   else if (y > x) {
       return gcd (y, x); 
   }
   else return gcd(x % y, y);
}

ll pow_mod(ll x, ll n) {
    if (n == 0) {
        return 1;
    }
    if (n % 2) return pow_mod(x, n - 1) * x % MOD;
    else {
        ll tmp = pow_mod(x, n / 2);
        return tmp * tmp % MOD;
    }
}

int main() {
    vector<int> ret;
    while (true) {
        int n;
        cin >> n;
        if (n == 0) break;
        ll w[n];
        for (int i = 0; i < n; i++) {
            cin >> w[i];
        }
        ll dp[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                dp[i][j] = 0;
            }
        }
        for (int dis = 1; dis <= n; dis++) {
            for (int i = 0; i + dis <= n; i++) {
                int j = i + dis;
                for (int k = i; k <= j - 2; k++) {
                    // kとk+1を最後に取り除く
                    if (abs(w[k] - w[k + 1]) <= 1) {
                        dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 2][j] + 2);
                    }
                }
                for (int k = i; k <= j - 1; k++) {
                    // kを取り除く
                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j]);
                }
                if ((dis >= 2) && (abs(w[i] - w[j - 1]) <= 1) && (dp[i + 1][j - 1] == j - 1 - i - 1)) dp[i][j] = max(dp[i][j], dp[i + 1][j - 1] + 2);
                // cout << i << ' ' << j << ' ' << dp[i][j] << endl;
            }
        }
        ret.push_back(dp[0][n]);
    }
    for (auto x : ret) cout << x << endl;
    return 0;
}
