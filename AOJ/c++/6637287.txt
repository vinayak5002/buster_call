#include <bits/stdc++.h>
using std::cin;
using std::getline;
using std::cout;
using std::endl;
using std::string;
using std::bitset;
using std::vector;
using std::array;
using std::stack;
using std::queue;
using std::set;
using std::map;
using std::pair;
using llong = long long;
template<typename T>
using nlimits = std::numeric_limits<T>;
#define REP(i, n) for (int i = 0; i < static_cast<int>(n); ++i)
#define RREP(i, n) for (int i = static_cast<int>(n) - 1; i >= 0; --i)
#define FOR(i, a, b) for (int i = static_cast<int>(a); i < static_cast<int>(b); ++i)
#define RFOR(i, a, b) for (int i = static_cast<int>(a) - 1; i >= static_cast<int>(b); --i)


template<typename T>
void printArray(const T* a, const size_t n);


int N;
array<pair<char, int>, 100000> A{}, B{};

array<pair<char, int>, 1000000/2+2> L, R;


int merge(int left, int mid, int right) {
    int n1 = mid - left;
    int n2 = right - mid;
    REP(i, n1) L[i] = B[left + i];
    REP(i, n2) R[i] = B[mid + i];
    L[n1].second = nlimits<int>::max();
    R[n2].second = nlimits<int>::max();
    int i = 0, j = 0;
    FOR(k, left, right) {
        if (L[i].second <= R[j].second) {
            B[k] = L[i];
            ++i;
        } else {
            B[k] = R[j];
            ++j;
        }
    }
    return right - left;
}

int mergeSort(int left, int right) {
    int sum = 0;
    if (left + 1 < right) {
        int mid = (left + right) / 2;
        sum += mergeSort(left, mid);
        sum += mergeSort(mid, right);
        sum += merge(left, mid, right);
    }
    return sum;
}

int Partition(int p, int r) {
    auto x = A[r].second;
    auto i = p - 1;
    FOR(j, p, r) {
        if (A[j].second <= x) {
            ++i;
            std::swap(A[i], A[j]);
        }
    }
    std::swap(A[i + 1], A[r]);
    return i + 1;
}

void QuickSort(int p, int r) {
    if (p >= r) return;
    auto q = Partition(p, r);
    QuickSort(p, q - 1);
    QuickSort(p + 1, r);
}


int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> N;
    REP(i, N) cin >> A[i].first >> A[i].second;
    B = array<pair<char, int>, 100000>(A);

    QuickSort(0, N-1);
    mergeSort(0, N);
    
    bool flag = true;
    REP(i, N) if (A[i].first != B[i].first) {
        flag = false;
        break;
    }
    if (flag) cout << "Stable\n";
    else cout << "Not stable\n";

    REP(i, N) {
        cout << A[i].first << " " << A[i].second << endl;
    }
}


template<typename T>
void printArray(const T* a, const size_t n) {
    string s = std::to_string(a[0]);
    FOR(i, 1, n) s += " " + std::to_string(a[i]);
    cout << s + "\n";
}

