#include<stdio.h>
#include<stdlib.h>

struct node{
  struct node *right;
  struct node *left;
  struct node *parent;
  int key;};
  
typedef struct node * Node;
#define NIL NULL

Node root;

Node find(Node u, int k)
{
	while(u!=NIL && k!=u->key)
	{
		if(k<u->key)
		{
			u=u->left;
		}
		else
		{
			u=u->right;
		}
	}
	
	return u=u->right;
}

void insert(int k)
{
  
	Node y = NIL;
  	Node x = root;
  	Node a;

  a = malloc(sizeof(struct node));
  a->key = k;
  a->left = NIL;
  a->right = NIL;

	while(x!=NIL){
		y=x;
		if(a->key<x->key)
		{
			x=x->left;
		}
		else
		{
			x=x->right;
		}
	}
	a->parent=y;
	
	if(y==NIL)
	{
		root=a;
	}
	else
	{
		if(a->key<y->key)
		{
			y->left=a;
		}
		else
		{
			y->right=a;
		}
	}
}

void inorder(Node u)
{
	if(u==NIL)
	{
		return;
	}
	
		inorder(u->left);
		printf(" %d",u->key);
		inorder(u->right);
}


void preorder(Node u)
{
	if(u==NIL)
	{
		return;
	}
	
	printf(" %d",u->key);
	preorder(u->left);
	preorder(u->right);
}

int main(void)
{
  int n, i, x, y;
  char com[20];
  scanf("%d", &n);

  for ( i = 0; i < n; i++ )
	{
   		scanf("%s", com);
		if(com[0]=='f')
		{
			scanf("%d", &y);
			Node t = find(root,y);
			if(t!=NIL)
			{
				printf("yes\n");
			}
				else
				{
					printf("no\n");
				}
		}
			
    	else if ( com[0] == 'i' )
		{
      	scanf("%d", &x);
      	insert(x);
    	}
		else if ( com[0] == 'p' )
		{
      		inorder(root);
      		printf("\n");
     		preorder(root);
      		printf("\n");
    	} 
	}
  	
  return 0;
}
