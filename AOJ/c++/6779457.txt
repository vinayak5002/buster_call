#include <bits/stdc++.h>
using namespace std;

// 方向を管理する配列
vector<int> dx ={1, 1, 1, 0, 0, -1, -1, -1};
vector<int> dy ={1, 0, -1, 1, -1, 1, 0, -1};

// 探索
void dfs(vector<vector<int> > &field, int h, int w, int H, int W) {
    field[h][w] = 0;

    // 八方向を探索
    for (int i=0; i<8; i++) {
        int nh = h + dx[i], nw = w + dy[i];

        // 場外アウトしたり、0 だったりはスルー
        if (nh < 0 || nh >= H || nw < 0 || nw >= W) continue;
        if (field[nh][nw] == 0) continue;

        // 再帰的に探索
        dfs(field, nh, nw, H, W);
    }
}

int main() {
    // 入力
    int H, W;
    while (cin >> W >> H) {
        if (H == 0 || W == 0) break;
        vector<vector<int> > field(H, vector<int>(W, 0));
        for (int h= 0; h<H; h++){
            for (int w=0; w<W; w++) cin >> field[h][w];
        }

        // 探索開始
        int count = 0;
        for (int h=0; h<H; h++) {
            for (int w=0; w<W; w++) {
                if (field[h][w] == 0) continue; // 残島じゃなかったらスルー
                dfs(field, h, w, H, W);
                count++;
            }
        }
        cout << count << endl;
    }
}
