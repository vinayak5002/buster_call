#include <iostream>
#include <vector>
#include <algorithm>
#include <tuple>
#include <map>
#include <set>
#include <cmath>
#include <bitset>
#include <queue>

using namespace std;

template<class T> inline bool chmin(T& a, T b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}
template<class T> inline bool chmax(T& a, T b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

const long long INF = 1LL << 60;
const int INT_INF = 1e9;

/* union_Find の基本的な実装 */
/* union_Findとは -> 同じ tree に属するかどうかで同じグループに属するか判断するアルゴリズム */
/* 根が同じであれば同じ tree に属する */
struct UnionFind{
    vector<int> par; // par[i]：iの親ノードの番号

    /* コンストラクタ */
    /* 最初は全てが根であるとして初期化 */
    UnionFind(int N) : par(N){
        for(int ii1=0; ii1<N; ii1++) par[ii1] = ii1;
    }

    /* x が属する木の根を再帰で得る：root(x) = {xが属する tree の根} */
    int root(int x){
        /* 根が自分自身ならそのままリターン */
        if(par[x] == x) return x;
        return par[x] = root(par[x]);
    }

    /* xとyの木を併合 */
    void unite(int x, int y){
        /* x, y双方の属する tree の根を取得 */
        int rx = root(x);
        int ry = root(y);

        /* x と y の根が同じ、すなわち元々同じ木に属していた場合はそのまま */
        if(rx == ry) return;
        
        /* x と y の根が同じでない場合、x の根 rx を y の根 ry につける*/
        par[rx] = ry;
    }

    /* 2つのデータ x, y が属する木が同じなら true を返す */
    bool same(int x, int y){
        int rx = root(x);
        int ry = root(y);
        return rx == ry;
    }
};

int main(){
    int n, q;
    cin >> n >> q;

    vector<long long> a(n);
    vector<long long> x(q);
    vector<long long> ans_vc;

    for(int ii1=0; ii1<n; ii1++){
        cin >> a[ii1];
    }
    for(int ii1=0; ii1<q; ii1++){
        cin >> x[ii1];
    }

    vector<long long> sum(n+1, 0);

    for(int ii1=0; ii1<n; ii1++){
        sum[ii1+1] = sum[ii1] + a[ii1];
    }

    for(int ii1=0; ii1<q; ii1++){
        int xi = x[ii1];
        int r = 0;
        int ans = 0;
        for(int l=0; l<=n; l++){
            while(r < n && sum[r+1] - sum[l] <= xi){
                r++;
            }
            ans += (r - l);
        }
        ans_vc.push_back(ans);
    }

    for(int ii1=0; ii1<ans_vc.size(); ii1++){
        cout << ans_vc[ii1] << endl;
    }

    return 0;
}
