#include <iostream>
#include <vector>
using namespace std;
using Graph = vector<vector<int>>;

vector<bool> seen;//探索済みかどうかの判定
vector<int> d; // 先行順
vector<int> f; // 後行順

void DFS(const Graph &G, int u, int& turn) { 
    d[u] = turn;// 先行順を記憶
    turn=turn+1;
    seen[u] = true;//探索済みにしている。
    for (auto next_u : G[u]) { 
        if (seen[next_u]) 
            continue;
        DFS(G, next_u, turn);//再帰
    }
    f[u] = turn;//後行順を記憶
    turn=turn+1;
}

int main() {
    int n;// 頂点数
    cin >> n ;
    int i,j,u,k,v;//uは頂点数, kはuの出次数, vはuに隣接する頂点

    // グラフの入力
    Graph G(n+1);
    G[0].push_back(-1);
    for (i = 0; i < n; i++) {
        cin >> u >> k;
        for(j=0;j<k;j++){
            cin >> v;
            G[u].push_back(v);
        }
    }

    // 頂点 1 から深さ優先探索
    seen.assign(n+1, false); // 全て未探索に設定
    d.resize(n+1);
    f.resize(n+1);
    int d_turn = 1, f_turn = 1;
    DFS(G, d_turn, f_turn);
    
    // 結果の出力
    for (u = 1; u <= n; u++)
        cout << u << " " << d[u] << " " << f[u] << endl;
}
