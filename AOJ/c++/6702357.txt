#include <bits/stdc++.h>
/*--------------------------------------------------------------------*/
#define pb push_back
#define fi first
#define se second
#define pii pair<int, int>
#define vi vector<int>
#define vvi vector<vector<int>>
#define intt int64_t
#define piic pair<int64_t, int64_t>
#define forn(i, n) for(int i = 1; i <= n; ++i)
typedef long long ll;
using namespace std;

const int64_t mod = 1e9 + 7;
const ll inf = 1e18;
const int N = 505;

struct Edge{
    int s, e;
    ll cap, flow;
};

vector<int> g[N];
vector<Edge> edges, ans;
int dist[N], ptr[N];
queue<int> q;

void addEdge(int s, int e, ll cap){
    Edge forw = {s, e, cap, 0};
    Edge back = {e, s, 0, 0};
    g[s].push_back(edges.size());
    edges.push_back(forw);
    g[e].push_back(edges.size());
    edges.push_back(back);
    //cout << "EDGE " << s << ' ' << e << " succesfully added\n";
}

bool bfs(int src, int sink){
    while(!q.empty()) q.pop();
    q.push(src);
    for(int i = 0; i < N; ++i) dist[i] = -1;
    dist[src] = 0;
    while(!q.empty() && dist[sink] == -1){
        int v = q.front();
        q.pop();
        for(int i = 0; i < g[v].size(); ++i){
            int id = g[v][i];
            int u = edges[id].e;
            if(dist[u] == -1 && edges[id].flow < edges[id].cap){
                q.push(u);
                dist[u] = dist[v] + 1;
            }
        }
    }
    return dist[sink] != -1;
}

ll dfs(int v, ll flow, int sink){
    if(!flow) return 0;
    if(v == sink) return flow;
    while(ptr[v] < g[v].size()){
        int id = g[v][ptr[v]];
        int u = edges[id].e;
        if(dist[u] != dist[v] + 1){
            ptr[v]++;
            continue;
        }
        ll pushed = dfs(u, min(flow, edges[id].cap - edges[id].flow), sink);
        if(pushed){
            edges[id].flow += pushed;
            edges[id ^ 1].flow -= pushed;
            // for matching add bride and groom
            if(edges[id].flow == 1)
                ans.pb(edges[id]);
            return pushed;
        }
        ptr[v] ++;
    }
    return 0;
}


ll max_flow(int src, int sink){
    ll flow = 0;
    while(true){
        if(!bfs(src, sink)) break;
        for(int i = 0; i < N; ++i) ptr[i] = 0;
        while(ll pushed = dfs(src, inf, sink))
            flow += pushed;
    }
    return flow;
}

int l, r, m;

int main(){

    cin >> l >> r >> m;
    while(m--){
        int a, b;
        cin >> a >> b;
        a += 1; b += l + 1;
        addEdge(a, b, 1);
    }

    for(int i = 1; i <= l; ++i)
        addEdge(0, i, 1);
    for(int i = l + 1; i <= l + r; ++i)
        addEdge(i, l + r + 1, 1);

    ll maxflow = max_flow(0, l + r + 1);

    cout << maxflow << '\n';
  //  for(auto couple : ans){
       // if(couple.s == 0 || couple.e == l + r + 1) continue;
        //cout << couple.s - 1 << ' ' << couple.e - l - 1 << '\n';
    //  }



    return 0;

}

