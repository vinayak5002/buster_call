#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

#define rep(i, a, b) for(ll i = (ll)a; i < (ll)b; i++)
#define all(v) (v).begin(), (v).end()
#define sz(v) (ll)(v).size()

const ll INF = 1e18;
const ld EPS = 1e-10;


class union_find{
  private:
    ll n; //要素数
    vector<ll> par; // iの親
    vector<ll> rank; // 木の深さ
    vector<ll> siz; // iの属する集合の要素数
    
  public:
    // 要素の初期化
    union_find(ll n): n(n){
      par.resize(n);
      rank.resize(n, 0);
      siz.resize(n, 1); 
      for(ll i = 0; i < n; i++){
        par[i] = i;
      }
    }

    // 木の根を求める
    ll root(ll x){
      if(par[x] == x) return x;
      else{
        ll r = root(par[x]);
        return par[x] = r;
      }
    }

    // 木の併合(rank基準) 
    void unite(ll x, ll y){
      x = root(x);
      y = root(y);
      if(x == y) return;

      if(rank[x] < rank[y]){
        par[x] = y;
        siz[y] += siz[x];
      }
      else{
        par[y] = x;
        siz[x] += siz[y];
        if(rank[x] == rank[y]) rank[x]++;
      }
    }

    // xとyが同じ集合に属するかどうか
    bool same(ll x, ll y){
      return root(x) == root(y);
    }

    // xの属する集合の要素数
    ll size(ll x){
      return siz[root(x)];
    }

    // 全体でいくつ集合があるか
    ll kind(){
      ll res = 0;
      for(ll i= 0; i < n; i++) if(i == root(i)) res++;
      return res;
    }
};

class edge{
  private:
  public:
    ll from, to, cost;
    edge() {}
    edge(ll from, ll to, ll cost): from(from), to(to), cost(cost){}
    bool operator < (const edge &e) const{
      return cost < e.cost;
    }
};

ll kruscal(ll n, vector<edge> &G){
  ll res = 0;
  union_find uf(n);
  sort(G.begin(), G.end());
  vector<edge> mst; // 最小全域木を構成する辺の集合

  for(ll i = 0; i < G.size(); i++){
    edge e = G[i];
    if(!uf.same(e.from, e.to)){
      mst.push_back(e);
      res += e.cost;
      uf.unite(e.to, e.from);
    }
  }

  return res;
}


int main(){
  cout << fixed << setprecision(20);

  ll v, e;
  cin >> v >> e;
  vector<edge> G(e);
  rep(i, 0, e){
    cin >> G[i].from >> G[i].to >> G[i].cost;
  }

  cout << kruscal(v, G) << endl;
  


  return 0;
}


