#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#define _GLIBCXX_DEBUG
using namespace std;
using std::cout;
using std::cin;
using std::endl;
using ll=long long;
using ld=long double;
ll ILL=2167167167167167167;
const int INF=2100000000;
const ll mod=1e9+7;
#define rep(i,a) for (int i=0;i<a;i++)
#define all(p) p.begin(),p.end()
template<class T> using _pq = priority_queue<T, vector<T>, greater<T>>;
template<class T> ll LB(vector<T> &v,T a){return lower_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> ll UB(vector<T> &v,T a){return upper_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> bool chmin(T &a,const T &b){if(a>b){a=b;return 1;}else return 0;}
template<class T> bool chmax(T &a,const T &b){if(a<b){a=b;return 1;}else return 0;}
template<class T> void So(vector<T> &v) {sort(v.begin(),v.end());}
template<class T> void Sore(vector<T> &v) {sort(v.begin(),v.end(),[](T x,T y){return x>y;});}
void yneos(bool a){if(a) cout<<"Yes\n"; else cout<<"No\n";}
template<class T> void vec_out(vector<T> &p){for(int i=0;i<(int)(p.size());i++){if(i) cout<<" ";cout<<p[i];}cout<<"\n";}

ll Gcd(ll a,ll b){
	while(b){
		a%=b;
		swap(a,b);
	}
	return a;
}

ll Lcm(ll a,ll b){
	if(min(a,b)==-1){
		return -1;
	}
	ll c=Gcd(a,b);
	if(ILL/a<b/c) return -1;
	return (a/c)*b;
}

ll popc(ll a){
	int x=-1;
	while(a){
		if(a&1) x*=-1;
		a/=2;
	}
	return x;
}

void solve();
// oddloop
int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	
	solve();
}

void solve(){
	ll N,M;
	cin>>N>>M;
	vector<ll> A(N);
	vector<ld> p(N);
	rep(i,N) cin>>A[i];
	rep(i,N) cin>>p[i];
	vector<ll> base(1<<N);
	base[0]=1;
	rep(i,(1<<N)){
		rep(k,N){
			if(i&(1<<k)) continue;
			base[i+(1<<k)]=Lcm(base[i],A[k]);
		}
	}
	vector<ll> dp(1<<N);
	rep(i,(1<<N)){
		if(i==0) continue;
		if(base[i]!=-1) dp[i]=popc(i)*(M/base[i]);
	}
	rep(d,N){
		rep(i,(1<<N)){
			if(i&(1<<d)){
				dp[i]+=dp[i^(1<<d)];
			}
		}
	}
	ld ans=0;
	rep(i,(1<<N)){
		ld pro=1;
		rep(k,N){
			if(i&(1<<k)) pro*=p[k];
			else pro*=(100-p[k]);
			pro/=100;
		}
		ans+=pro*dp[i];
	}
	cout<<fixed<<setprecision(30)<<ans<<"\n";
}

