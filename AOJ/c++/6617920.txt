#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef pair<long long, long long> pll;
typedef long long ll;

#define YESNO(bool)            \
    if (bool) {                \
        cout << "YES" << endl; \
    } else {                   \
        cout << "NO" << endl;  \
    }
#define yesno(bool)            \
    if (bool) {                \
        cout << "yes" << endl; \
    } else {                   \
        cout << "no" << endl;  \
    }
#define YesNo(bool)            \
    if (bool) {                \
        cout << "Yes" << endl; \
    } else {                   \
        cout << "No" << endl;  \
    }
#define REP(i, n) for (ll i = 0; i < ll(n); i++)
#define REPD(i, n) for (ll i = n - 1; i >= 0; i--)
#define FOR(i, a, b) for (ll i = a; i <= ll(b); i++)
#define FORD(i, a, b) for (ll i = a; i >= ll(b); i--)
#define FORA(i, I) for (const auto& i : I)

#define ALL(x) x.begin(), x.end()
#define SIZE(x) ll(x.size())

#define INF32 2147483647
#define INF64 9223372036854775807
#define MOD 1000000007
#define INF 1000000000

#define F first
#define S second
#define pb push_back
#define mp make_pair

#define OP(m) cout << m << endl;
ll myceil(ll a, ll b) { return (a + (b - 1)) / b; }
ll myfloor(ll a, ll b) { return a / b; }

int dx4[4] = {1, 0, -1, 0};
int dy4[4] = {0, 1, 0, -1};
int dx8[8] = {-1, -1, 0, 1, 1, 1, 0, -1};
int dy8[8] = {0, -1, -1, -1, 0, 1, 1, 1};
// cout<<fixed<<setprecision(10);

template <typename T>
struct edge {
    int from;
    int to;
    T cost;
};

template <typename T>
struct link {
    int to;
    T cost;
    bool operator>(const link& other) const { return cost > other.cost; }
    bool operator<(const link& other) const { return cost < other.cost; }
};

template <typename T>
class graph {
   public:
    vector<edge<T>> edges;
    vector<vector<link<T>>> adj;
    int n;
    graph(int sz) : n(sz) { adj.resize(n); }
    virtual void add(int from, int to, T cost) = 0;
};

template <typename T>
class undigraph : public graph<T> {
   public:
    using graph<T>::edges;
    using graph<T>::adj;
    using graph<T>::n;

    undigraph(int sz) : graph<T>(sz) {}

    void add(int from, int to, T cost = 1) {
        assert(0 <= from && from < n && 0 <= to && to < n);
        edges.push_back({from, to, cost});
        adj[from].push_back({to, cost});
        adj[to].push_back({from, cost});
    }
};

template <typename T>
class digraph : public graph<T> {
   public:
    using graph<T>::edges;
    using graph<T>::adj;
    using graph<T>::n;

    digraph(int sz) : graph<T>(sz) {}

    void add(int from, int to, T cost = 1) {
        assert(0 <= from && from < n && 0 <= to && to < n);
        edges.push_back({from, to, cost});
        adj[from].push_back({to, cost});
    }

    digraph<T> reverse() const {
        digraph<T> rev(n);
        for (auto& e : edges) {
            rev.add(e.to, e.from, e.cost);
        }
        return rev;
    }
};

class DisjointSet {
    int n;
    vector<int> parents;
    vector<int> sizes;

   public:
    int comps;

    DisjointSet(int _n) : n(_n), parents(n), sizes(n), comps(n) {
        fill(sizes.begin(), sizes.end(), 1);
        iota(parents.begin(), parents.end(), 0);
    }

    int find(int x) {
        assert(0 <= x && x < n);
        if (parents[x] != x) parents[x] = find(parents[x]);
        return parents[x];
    }

    bool unite(int left, int right) {
        assert(0 <= left && left < n);
        assert(0 <= right && right < n);
        int x = find(left);
        int y = find(right);
        if (x == y) return false;
        if (sizes[x] < sizes[y]) swap(x, y);
        sizes[x] += sizes[y];
        parents[y] = x;
        comps--;
        return true;
    };

    bool united(int left, int right) {
        assert(0 <= left && left < n);
        assert(0 <= right && right < n);
        return find(left) == find(right);
    }

    int size(int x) {
        assert(0 <= x && x < n);
        return sizes[find(x)];
    }

    int id(int x) {
        assert(0 <= x && x < n);
        return parents[find(x)];
    }

    vector<vector<int>> groups() {
        vector<int> parent_id(n), group_size(n);
        for (int i = 0; i < n; i++) {
            parent_id[i] = find(i);
            group_size[parent_id[i]]++;
        }
        vector<vector<int>> result(n);
        for (int i = 0; i < n; i++) {
            result[i].reserve(group_size[i]);
        }
        for (int i = 0; i < n; i++) {
            result[parent_id[i]].push_back(i);
        }
        result.erase(remove_if(result.begin(), result.end(),
                               [&](const vector<int>& v) { return v.empty(); }),
                     result.end());
        return result;
    }
};

template <typename T>
vector<edge<T>> find_kruskal(const undigraph<T>& g, T& ans) {
    vector<edge<T>> edges(g.edges);
    sort(edges.begin(), edges.end(),
         [&g](const edge<T>& a, const edge<T>& b) { return a.cost < b.cost; });
    ans = 0;
    vector<edge<T>> mst;
    DisjointSet dsu(g.n);
    for (edge<T> e : edges) {
        if (dsu.unite(e.from, e.to)) {
            mst.push_back(e);
            ans += e.cost;
        }
    }
    return mst;
}
// Usage:
//    int n = ..;
//    undigraph<int> g(n);
//    g.add(..., ..., ...);
//    int cost = 0;
//    vector<edge<int>> mst = find_kruskal(g, cost);

signed main() {
    int V, E;
    cin >> V >> E;
    undigraph<int> g(V);

    REP(_, E) {
        int s, t, w;
        cin >> s >> t >> w;
        g.add(s, t, w);
    }
    int cost;
    vector<edge<int>> mst = find_kruskal(g, cost);

    OP(cost)
}
