#include <bits/stdc++.h>

using namespace std;

int main() {
    while (true) {
        array<vector<int>, 256> sets;
        vector<int> u;
        while (true) {
            char set_name;
            cin >> set_name;
            if (not cin) return 0;
            int card;
            cin >> card;
            if (set_name == 'R') break;
            vector<int> st(card);
            for (auto& e : st) cin >> e;
            sort(st.begin(), st.end());
            sets[set_name] = st;

            vector<int> nu;
            set_union(u.begin(), u.end(), st.begin(), st.end(), back_inserter(nu));
            nu.swap(u);
            sort(u.begin(), u.end());
        }

        auto U = [&](const vector<int>& s, const vector<int>& t) {
            vector<int> res;
            set_union(s.begin(), s.end(), t.begin(), t.end(), back_inserter(res));
            sort(res.begin(), res.end());
            return res;
        };
        auto I = [&](const vector<int>& s, const vector<int>& t) {
            vector<int> res;
            set_intersection(s.begin(), s.end(), t.begin(), t.end(), back_inserter(res));
            sort(res.begin(), res.end());
            return res;
        };
        auto D = [&](const vector<int>& s, const vector<int>& t) {
            vector<int> res;
            set_difference(s.begin(), s.end(), t.begin(), t.end(), back_inserter(res));
            sort(res.begin(), res.end());
            return res;
        };
        auto S = [&](const vector<int>& s, const vector<int>& t) {
            vector<int> res;
            set_symmetric_difference(s.begin(), s.end(), t.begin(), t.end(), back_inserter(res));
            sort(res.begin(), res.end());
            return res;
        };
        auto C = [&](const vector<int>& s) {
            vector<int> res;
            set_difference(u.begin(), u.end(), s.begin(), s.end(), back_inserter(res));
            sort(res.begin(), res.end());
            return res;
        };

        string s;
        cin >> s;

        const int n = s.size();
        vector<int> rp(n, -1);
        vector<int> st;
        for (int pos = 0; pos < n; ++pos) {
            if (s[pos] == '(') {
                st.push_back(pos);
            } else if (s[pos] == ')') {
                rp[st.back()] = pos;
                st.pop_back();
            }
        }

        auto scan = [&](auto scan, int l, int r) -> vector<int> {
            char op = '\0';
            vector<int> res;
            for (int i = l; i < r;) {
                int j = i;
                while (s[j] == 'c') ++j;
                bool take_compl = (j - i) & 1;
                i = j;
                vector<int> st;
                if (s[i] == '(') {
                    int j = rp[i];
                    st = scan(scan, i + 1, j);
                    i = j + 1;
                } else {
                    st = sets[s[i]];
                    i = i + 1;
                }
                if (take_compl) {
                    st = C(st);
                }
                if (not op) {
                    res = move(st);
                } else {
                    if (op == 'u') {
                        res = U(res, st);
                    } else if (op == 'i') {
                        res = I(res, st);
                    } else if (op == 'd') {
                        res = D(res, st);
                    } else if (op == 's') {
                        res = S(res, st);
                    }
                }
                if (i < r) {
                    op = s[i++];
                }
            }
            return res;
        };
        auto ans = scan(scan, 0, n);
        int x = ans.size();
        if (x == 0) {
            cout << "NULL\n";
        } else {
            for (int i = 0; i < x; ++i) {
                cout << ans[i] << " \n"[i == x - 1];
            }
        }
    }
}
