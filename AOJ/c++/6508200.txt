#include <iostream>
#include <cassert>
#include <cmath>
#include <complex>
#include <iostream>
#include <utility>
#include <cmath>
namespace sapphre15 {
namespace geometry {
using Real = double;
constexpr Real EPS = 1e-10;
const Real PI = std::acos(Real(-1.0));
constexpr int sgn(Real a) {
    return (a < -EPS) ? -1 : (a > EPS) ? 1 : 0;
}
constexpr bool eq(Real a, Real b) {
    if (std::abs(a) > 1.0)
        return std::abs((a - b) / a) < EPS;
    else
        return std::abs(a - b) < EPS;
}
constexpr bool le(Real a, Real b) {
    return a < b || eq(a, b);
}
}
}
namespace sapphre15 {
namespace geometry {
class Point {
  public:
    using value_type = Real;
    constexpr Point() : _x(0), _y(0) {
    }
    constexpr Point(const value_type &xval, const value_type &yval)
        : _x(xval), _y(yval) {
    }
    constexpr value_type x() const {
        return _x;
    }
    constexpr void x(value_type val) {
        _x = std::move(val);
    }
    constexpr value_type y() const {
        return _y;
    }
    constexpr void y(value_type val) {
        _y = std::move(val);
    }
    constexpr Point &operator+=(const Point &rhs) {
        _x += rhs._x;
        _y += rhs._y;
        return *this;
    }
    constexpr Point &operator-=(const Point &rhs) {
        _x -= rhs._x;
        _y -= rhs._y;
        return *this;
    }
    constexpr Point &operator*=(const Point &rhs) {
        _x *= rhs._x;
        _y *= rhs._y;
        return *this;
    }
    constexpr Point &operator*=(const value_type &rhs) {
        _x *= rhs;
        _y *= rhs;
        return *this;
    }
    constexpr Point &operator/=(const Point &rhs) {
        _x /= rhs._x;
        _y /= rhs._y;
        return *this;
    }
    constexpr Point &operator/=(const value_type &rhs) {
        _x /= rhs;
        _y /= rhs;
        return *this;
    }
    constexpr void rotate(const Real &theta) {
        auto tmpx = _x, tmpy = _y;
        _x = tmpx * std::cos(theta) - tmpy * std::sin(theta);
        _y = tmpx * std::sin(theta) + tmpy * std::cos(theta);
    }
    Real distance(const Point &q) const {
        return std::hypot(_x - q._x, _y - q._y);
    }
    Real distance() const {
        return std::hypot(_x, _y);
    }
    Real xdist(const Point &q) const {
        return std::abs(_x - q._x);
    }
    Real ydist(const Point &q) const {
        return std::abs(_y - q._y);
    }
    constexpr static Point polar(const Real &theta) {
        return Point(std::cos(theta), std::sin(theta));
    }
    constexpr static Point polar(const Real &theta, const Real &rho) {
        return Point(rho * std::cos(theta), rho * std::sin(theta));
    }
  private:
    value_type _x, _y;
};
Point::value_type abs(const Point &p) {
    return p.distance();
}
Point::value_type arg(const Point &p) {
    return std::atan2(p.y(), p.x());
}
Point::value_type norm(const Point &p) {
    return p.x() * p.x() + p.y() * p.y();
}
constexpr Point operator+(const Point &lhs) {
    return lhs;
}
constexpr Point operator-(const Point &lhs) {
    return Point(lhs) *= -1;
}
constexpr Point operator+(const Point &lhs, const Point &rhs) {
    return Point(lhs) += rhs;
}
constexpr Point operator-(const Point &lhs, const Point &rhs) {
    return Point(lhs) -= rhs;
}
constexpr Point operator*(const Point &lhs, const Point &rhs) {
    return Point(lhs) *= rhs;
}
constexpr Point operator*(const Point &lhs, const Point::value_type &rhs) {
    return Point(lhs) *= rhs;
}
constexpr Point operator/(const Point &lhs, const Point &rhs) {
    return Point(lhs) /= rhs;
}
constexpr Point operator/(const Point &lhs, const Point::value_type &rhs) {
    return Point(lhs) /= rhs;
}
constexpr bool operator==(const Point &lhs, const Point &rhs) {
    return eq(lhs.x(), rhs.x()) && eq(lhs.y(), rhs.y());
}
constexpr bool operator!=(const Point &lhs, const Point &rhs) {
    return !(lhs == rhs);
}
std::istream &operator>>(std::istream &is, Point &p) {
    Real a, b;
    is >> a >> b;
    p = Point(a, b);
    return is;
}
std::ostream &operator<<(std::ostream &os, Point &p) {
    return os << '(' << p.x() << ',' << p.y() << ')';
}
constexpr Point rotate(const Point &p, const Real &theta) {
    Point ret(p);
    ret.rotate(theta);
    return ret;
}
Real distance(const Point &p, const Point &q) {
    return p.distance(q);
}
Real xdist(const Point &p, const Point &q) {
    return p.xdist(q);
}
Real ydist(const Point &p, const Point &q) {
    return p.ydist(q);
}
Real dot(const Point &p, const Point &q) {
    return p.x() * q.x() + p.y() * q.y();
}
Real cross(const Point &p, const Point &q) {
    return p.x() * q.y() - p.y() * q.x();
}
Point internal_div(const Point &p, const Point &q, const Real &a, const Real &b) {
    assert(0 <= a);
    assert(0 <= b);
    assert(0 <= a + b);
    return (p * b + q * a) / (a + b);
}
Point mid_point(const Point &p, const Point &q) {
    return internal_div(p, q, 1.0, 1.0);
}
Point external_div(const Point &p, const Point &q, const Real &a, const Real &b) {
    assert(0 <= a);
    assert(0 <= b);
    assert(!eq(a, b));
    return (q * a - p * b) / (a - b);
}
Real co_circle_internal1(Point p, Point q, Point r, const Point &s) {
    p -= s;
    q -= s;
    r -= s;
    return cross(p, q) * norm(r) + 
           cross(q, r) * norm(p) +
           cross(r, p) * norm(q);
}
Real co_circle_internal2(Point p, Point q, Point r, const Point &s) {
    p -= s;
    q -= s;
    r -= s;
    return cross(p, q) + 
           cross(q, r) +
           cross(r, p);
}
bool in_circle(const Point &p, const Point &q, const Point &r, const Point &s) {
    return sgn(co_circle_internal1(p, q, r, s)) == sgn(co_circle_internal2(p, q, r, s));
}
bool on_circle(const Point &p, const Point &q, const Point &r, const Point &s) {
    return eq(co_circle_internal1(p, q, r, s), 0);
}
bool out_circle(const Point &p, const Point &q, const Point &r, const Point &s) {
    return sgn(co_circle_internal1(p, q, r, s)) == sgn(co_circle_internal2(p, q, r, s)) * -1;
}
enum ClockWise {
    ONLINE_FRONT = -2,
    CLOCKWISE = -1,
    ON_SEGMENT = 0,
    COUNTER_CLOCKWISE = +1,
    ONLINE_BACK = +2,
};
ClockWise ccw(const Point &a, Point b, Point c) {
    b -= a, c -= a;
    if(sgn(cross(b, c)) > 0) return COUNTER_CLOCKWISE;
    if(sgn(cross(b, c)) < 0) return CLOCKWISE;
    if(sgn(dot(b, c)) < 0)   return ONLINE_BACK;
    if(le(abs(c), abs(b))) return ON_SEGMENT;
    return ONLINE_FRONT;
}
bool colinear(const Point &p, const Point &q, const Point &r) {
    ClockWise state = ccw(p, q, r);
    return state != COUNTER_CLOCKWISE && state != CLOCKWISE;
}
}
}
#include <cassert>
#include <cmath>
namespace sapphre15 {
namespace geometry {
class Circle {
    public:
    Circle() : _center(), _radius(1.0) {}
    Circle(const Point &c, const Real &r)
    : _center(c), _radius(r) {
        assert(r >= 0);
    }
    Circle(const Point &c, const Point &a)
    : _center(c), _radius(abs(c - a)) {}
    Circle(const Point &a, Point b, Point c) {
        b -= a;
        c -= a;
        _center = Point(norm(b) * c.y() - norm(c) * b.y(),
                        norm(c) * b.x() - norm(b) * c.x())
                  / cross(b, c) / 2.0;
        _center += a;
        _radius = distance(_center, a);
    }
    Point center() const {
        return _center;
    }
    Real radius() const {
        return _radius;
    }
    bool inside(const Point &p) const {
        return le(distance(_center, p), _radius);
    }
    bool outside(const Point &p) const {
        return !le(distance(_center, p), _radius);
    }
    bool on_object(const Point &p) const {
        return eq(_radius, distance(_center, p));
    }
    public:
    Point _center;
    Real _radius;
};
}
}
#include <utility>
#include <type_traits>
#include <cmath>
#include <cassert>
#include <utility>
#include <vector>
namespace sapphre15 {
namespace geometry {
class Segment;
class Line {
    protected:
    Point _a, _b;
    public:
    Line() : _a(1, 0), _b(0, 1) {}
    Line(const Point &a, const Point &b)
    : _a(a), _b(b) {}
    Line(const Real &a, const Real &b, const Real &c) {
        assert(!eq(a, 0.0) || !eq(b, 0.0));
        if(eq(a, 0.0)) {
            _a = Point(0.0, -c/b);
            _b = Point(1.0, -c/b);
        } else {
            _a = Point(-c/a, 0.0);
            _b = Point(-(c + b)/a, 1.0);
        }
    }
    Line(const Point &p, Real theta)
    : _a(p), _b(p + Point::polar(theta)) {}
    bool on_line(const Point &p) const {
        ClockWise val = ccw(_a, _b, p);
        return val != CLOCKWISE && val != COUNTER_CLOCKWISE;
    }
    Point direction() const  {
        return (_b - _a) / abs(_b - _a);
    }
    virtual bool on_object(const Point &p) const {
        return on_line(p);
    }
    Real slope() const {
        return (_a.y() - _b.y()) / (_a.x() - _b.x());
    }
    bool is_horizontal() const {
        return eq(_a.y(), _b.y()); 
    }
    bool is_vertical() const {
        return eq(_a.x(), _b.x()); 
    }
    Line translation(const Point &v) const {
        return Line(_a + v, _b + v);
    }
    Line moveX(const Real &dist) const {
        return translation(Point(dist, 0.0));
    }
    Line moveY(const Real &dist) const {
        return translation(Point(0.0, dist));
    }
    friend Point projection(const Line &l, const Point &p);
    friend Real angle(const Line &a, const Line &b);
    friend bool parallel(const Line &a, const Line &b);
    friend bool orthogonal(const Line &a, const Line &b);
    template<class S, class T>
    friend bool intersection(const S &a, const T &b);
    template<class S, class T>
    friend std::vector<Point> cross_point(const S &a, const T &b);
    template<class S, class T>
    friend Real distance(const S &a, const T &b);
};
Point projection(const Line &l, const Point &p) {
    const Point a = p - l._a, b = l._b - l._a;
    return l._a + b * dot(a, b) / norm(b);
}
Point reflection(const Line &l, const Point &p) {
    Point q = projection(l, p);
    return q * 2 - p;
}
Real angle(const Line &a, const Line &b) {
    static const Real HALF_OF_SQRT2 = 0.70710678;
    Point u = a._a - a._b, v = b._a - b._b;
    Real val = std::abs(dot(u, v)) / abs(u) / abs(v);
    if(val < HALF_OF_SQRT2) return std::acos(val);
    else return std::asin(std::abs(cross(u, v)) / abs(u) / abs(v));
}
bool parallel(const Line &a, const Line &b) {
    return eq(cross(a._a - a._b, b._a - b._b), 0.0);
}
bool orthogonal(const Line &a, const Line &b) {
    return eq(dot(a._a - a._b, b._a - b._b), 0.0);
}
}
}
#include <cmath>
#include <utility>
namespace sapphre15 {
namespace geometry {
class Segment : public Line {
    public:
    Segment() : Line() {}
    Segment(const Point &_start, const Point &_end)
    : Line(_start, _end) {}
    Segment(const Point &_start, const Real _theta, const Real _length)
    : Line(_start, _start + Point::polar(_theta, _length)) {}
    Point start() const {
        return _a;
    }
    Point end() const {
        return _b;
    }
    double x1() const {
        return _a.x();
    }
    double y1() const {
        return _a.y();
    }
    double x2() const {
        return _b.x();
    }
    double y2() const {
        return _b.y();
    }
    double dx() const {
        return std::abs(_a.x() - _b.x());
    }
    double dy() const {
        return std::abs(_a.y() - _b.y());
    }
    double length() {
        return abs(_a - _b);
    }
    bool on_object(const Point &p) const {
        return ccw(_a, _b, p) == ON_SEGMENT;
    }
    std::pair<Point, Point> end_points() const {
        return std::make_pair(_a, _b);
    }
    Segment translation(const Point &v) const {
        return Segment(_a + v, _b + v);
    }
    Segment moveX(const Real &dist) const {
        return translation(Point(dist, 0.0));
    }
    Segment moveY(const Real &dist) const {
        return translation(Point(0.0, dist));
    }
    Segment moveV(const Real &dist) const {
        return translation(geometry::rotate(direction(), PI/2) * dist);
    }
    Segment rotate(const Real &theta) const {
        return Segment(_a, _a + geometry::rotate(_b - _a, theta));
    }
};
}
}
namespace sapphre15 {
namespace geometry {
template<class T, class S>
bool intersection(const T &a, const S &b) {
    static_assert(std::is_base_of<Line, T>::value, "T must be Drived Line");
    static_assert(std::is_base_of<Line, S>::value, "S must be Drived Line");
    return false;
}
template<>
bool intersection<Line, Line>(const Line &a, const Line &b) {
    return !parallel(a, b);
}
template<>
bool intersection<Segment, Line>(const Segment &a, const Line &b) {
    std::pair<Point, Point> p = a.end_points();
    if(b.on_object(p.first) || b.on_object(p.second)) return true;
    return ccw(b._a, b._b, p.first) * ccw(b._a, b._b, p.second) < 0;
}
template<>
bool intersection<Line, Segment>(const Line &a, const Segment &b) {
    return intersection(b, a);
}
template<>
bool intersection(const Segment &a, const Segment &b) {
    return intersection<Segment, Line>(a, b) && intersection<Segment, Line>(b, a);
}
enum Intersection {
    DO_NOT_CROSS = 4,
    CIRCUMSCRIBE = 3,
    INTERSECT    = 2,
    INSCRIBE     = 1,
    INCLUDE      = 0,
};
Intersection intersection(const Circle &a, const Circle &b) {
    Real d1 = distance(a.center(), b.center()),
         d2 = a.radius() + b.radius(),
         d3 = std::abs(a.radius() - b.radius());
    if(eq(d1, d2)) return CIRCUMSCRIBE;
    else if(eq(d1, d3)) return INSCRIBE;
    else if(le(d2, d1)) return DO_NOT_CROSS;
    else if(le(d1, d3)) return INCLUDE;
    else return INTERSECT;
}
}
}
using namespace std;
using namespace sapphre15::geometry;
int main() {
    Point c1, c2;
    Real r1, r2;
    cin >> c1 >> r1 >> c2 >> r2;
    cout << intersection(Circle(c1, r1), Circle(c2, r2)) << endl;
}

