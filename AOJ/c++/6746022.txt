#include <bits/stdc++.h>
#ifdef __LOCAL
#define DBG(X) cout << #X << " = " << (X) << endl;
#define SAY(X) cout << (X) << endl;
#else
#define DBG(X)
#define SAY(X)
#define NDEBUG
#endif

using namespace std;

typedef int_fast32_t int32;
typedef int_fast64_t int64;

const int32 inf = 1e9+7;
const int32 MOD = 1000000007;
const int64 llinf = 1e18;

#define YES(n) cout << ((n) ? "YES\n" : "NO\n"  )
#define Yes(n) cout << ((n) ? "Yes\n" : "No\n"  )
#define POSSIBLE(n) cout << ((n) ? "POSSIBLE\n" : "IMPOSSIBLE\n"  )
#define ANS(n) cout << (n) << "\n"
#define REP(i,n) for(int64 i=0;i<(n);++i)
#define FOR(i,a,b) for(int64 i=(a);i<(b);i++)
#define FORR(i,a,b) for(int64 i=(a);i>=(b);i--)
#define all(obj) (obj).begin(),(obj).end()
#define rall(obj) (obj).rbegin(),(obj).rend()
#define fi first
#define se second
#define pb(a) push_back(a)
typedef pair<int32,int32> pii;
typedef pair<int64,int64> pll;

template<class T> inline bool chmax(T& a, T b) {
  if (a < b) { a = b; return true; } return false;
}
template<class T> inline bool chmin(T& a, T b) {
  if (a > b) { a = b; return true; } return false;
}

int32 n;
int32 w[305];

int32 cache[305][305];

bool possible(int32 l, int32 r){
  if(cache[l][r] != -1)return cache[l][r];

  if((r - l) % 2)return false;
  if(l == r)return true;

  if(abs(w[l] - w[r-1]) <= 1 && possible(l+1,r-1))return cache[l][r] = 1;

  FOR(i,l+1,r){
    if(possible(l,i) && possible(i,r))return cache[l][r] = 1;
  }

  return cache[l][r] = 0;
}

int main(){
  cin.tie(0);
  ios::sync_with_stdio(false);
  while(true){
    cin >> n;
    if(n == 0)return 0;

    REP(i,n)cin >> w[i];

    REP(i,n+1)REP(j,n+1)cache[i][j] = -1;

    // ANS(possible(0,n));
    vector<int32> dp(n+1);
    FOR(i,1,n+1){
      dp[i] = dp[i-1];
      if(possible(0,i)){
        dp[i] = i;
      }
      REP(j,i){
        if(possible(j,i)){
          chmax(dp[i],dp[j] + i-j);
        }
      }
    }
    ANS(dp[n]);
  }
  return 0;
}

