#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <optional>
#include <vector>
#include <deque>
#include <array>
#include <algorithm>
#include <numeric>
#include <string>
#include <cstring>
#include <list>
#include <unordered_set>
#include <tuple>
#include <cmath>
#include <limits>
#include <type_traits>
#include <iomanip>
#include <map>
#include <unordered_map>
#include <queue>
#include <stack>
#include <set>
#include <bitset>
#include <complex>
#include <regex>
#include <random>
#include <cassert>
#include <optional>
#include <climits>
using namespace std;

#define rep(i,n)	for(lint i = 0; i < n; i++)
#define repr(i,n)	for(lint i = n - 1; i >= 0; i--)
#define repi(i,ini,n)	for(lint i = ini; i < n; i++)
#define repir(i,ini,n)	for(lint i = n-1; i >= ini; i--)
#define repb(i,start,end)	for(lint i = start; i <= end; i++)
#define repbr(i,start,end)	for(lint i = end; i >= start; i--)

#define bit(n)				(1LL << (n))
#define getbit(val, n)				((val >> n) & 1)

#define all(v) begin(v),end(v)
#define rall(v) rbegin(v),rend(v)
#define rg(v, ini, end) begin(v) + ini, begin(v)+end

template<class T>
constexpr T& chmax(T& a, const T& b) { return a = max(a, b); }
template<class T>
constexpr T& chmin(T& a, const T& b) { return a = min(a, b); }

using lint = long long;
using ulint = unsigned long long;
using ld = long double;
struct xy {
	lint x, y;
	xy() :x(0), y(0) {}
	xy(lint _x, lint _y) : x(_x), y(_y) {}
	xy operator+(const xy& p) const { return xy(x + p.x, y + p.y); }
	bool operator<(xy p) const { return y == p.y ? x < p.x : y < p.y; }
	bool operator!=(xy p) const { return y != p.y || x != p.x; }
	bool operator==(xy p) const { return !(*this != p); }
};
struct xyd {
	ld x, y;
	xyd() :x(0), y(0) {}
	xyd(long double _x, long double _y) : x(_x), y(_y) {}
};
using vec = vector<lint>;
using vecd = vector<ld>;
using vecs = vector<string>;
using vecp = vector<xy>;
template<class F> using vect = vector<F>;
template<class T>
class vec2t : public vector<vector<T>>
{
public:
	vec2t() {}
	vec2t(lint n) : vector<vector<T>>(n) {}
	vec2t(lint h, lint w) : vector<vector<T>>(h, vector<T>(w)) {}
	vec2t(lint h, lint w, T v) : vector<vector<T>>(h, vector<T>(w, v)) {}
};
using vec2 = vec2t<lint>;
using vec2d = vec2t<ld>;

template<class F> using priq = priority_queue<F>;
template<class F> using rpriq = priority_queue<F, vector<F>, greater<F>>;
template<class Key, class Val> using hashmap = unordered_map<Key, Val>;
template<class Key> using hashset = unordered_set<Key>;

template<class It> constexpr auto rmax(It begin, It end) { return *max_element(begin, end); }
template<class It> constexpr auto rmin(It begin, It end) { return *min_element(begin, end); }

mt19937 mtrand((random_device())());
const ld pi = 3.141592653589793238462643383279;
const lint intmax = 9223372036854775807;
const lint inf = 1100100100100100100LL;

constexpr lint div2(lint p, lint q) { return (p + q - 1) / q; }

#if(__cplusplus < 201703L)
lint gcd(lint a, lint b) {
	while (1) {
		if (a < b) swap(a, b);
		if (!b) break;
		a %= b;
	}
	return a;
}
lint lcm(lint a, lint b) {
	return a / gcd(a, b) * b;
}
#endif

template<class F>
struct nval {
	lint n;		// counts
	F val;
	nval() : n(0) {};
	nval(lint _n, F _val) : n(_n), val(_val) {};
};

template<class It, class It2>
auto spacel(It i, It2 end) { return i + 1 == end ? '\n' : ' '; }

template<class It, class It2>
void prints(It begin, It2 end) {
	for (auto it = begin; it != end; it++) {
		auto tmp = it;
		tmp++;
		cout << (*it) << ((tmp == end) ? '\n' : ' ');
	}
}

template<class It, class F = typename It::value_type> auto acc(It begin, It end) { return accumulate(begin, end, F(0)); }
template<class Ty> auto acc(const Ty* begin, const Ty* end) { return accumulate(begin, end, Ty(0)); }

ostream& setp(ostream& ost) {
	cout << setprecision(60) << fixed;
	return ost;
}

template<class T>
ostream& operator<<(ostream& s, const optional<T>& o) {
	if (o.has_value()) s << *o;
	else s << "id";
	return s;
}

const ulint mod = 1000000007;
//const ulint mod = 998244353;
const ld eps = 0.0000001;

struct mint
{
	lint n;
	mint() :n(0) {}
	mint(lint a) { n = (a < 0) ? (mod - ((-a) % mod)) : (a % mod); }
	mint& operator+=(mint a) { (n += a.n) %= mod;			return *this; }
	mint& operator-=(mint a) { ((n += mod) -= a.n) %= mod;	return *this; }
	mint& operator*=(mint a) { (n *= a.n) %= mod;			return *this; }
	mint& operator%=(mint a) { n %= a.n;					return *this; }
	mint& operator++() { (n += 1) %= mod;				return *this; }
	mint& operator--() { (n += (mod - 1)) %= mod;		return *this; }
};

mint operator+(mint a, mint b) { return a += b; }
mint operator-(mint a, mint b) { return a -= b; }
mint operator*(mint a, mint b) { return a *= b; }
mint operator-(mint a) { a = mod - a; return a; }

vector<mint> invtbl, finvtbl, facttbl;

mint factMod(lint n) {
	if (n == 0) { return 1; }
	mint ans = 1;
	while (n > 1) { ans *= n; n--; }
	return ans;
}
mint powMod(mint x, lint y) {
	if (x.n <= 1) { return x; }
	mint tmp = y > 1 ? powMod(x, y / 2) : 1;
	return tmp * tmp * ((y % 2 == 0) ? 1 : (x));
}
mint modinv(mint n) { return powMod(n, mod - 2); }
void preCalcInv(lint up) {
	invtbl.resize(up + 1);	invtbl[1] = 1;
	repb(a, 2, up)
		invtbl[a] = invtbl[a] = mod - invtbl[mod % a] * (mod / a);
}

mint& operator/=(mint& a, mint b) { a *= (b.n < invtbl.size()) ? invtbl[b.n] : modinv(b); return a; }
mint operator/(mint a, mint b) { return a /= b; }

string str_inv(string s) {
	string sr = s;
	reverse(all(sr));
	return sr;
}

bool is_palindrome(string s) {
	return s == str_inv(s);
}

string str_last(string s, size_t n) {
	return s.substr(s.size() - n);
}

lint parindrome_free_n(size_t n) {
	if (n % 2 == 1) {
		return div2(n, 2);
	}
	else {
		return n / 2;
	}
}

void solve() {
	string a, b;
	lint n;
	cin >> a >> b >> n;

	lint p = a.size(), q = b.size();

	lint lenall = n + p + n + q;

	if (n <= q) {
		string h = str_inv(str_last(b, n));

		if (is_palindrome(h + a + h + b)) {
			cout << 1 << endl;
		}
		else {
			cout << 0 << endl;
		}
	}
	else if((n + p) * 2 >= lenall) {	// n > q && p >= q
		if (!is_palindrome(
			str_last(a, (n + p) - (n + q))
		)) {
			cout << 0 << endl;
			return;
		}
		if (a.substr(0, q) != b) {
			cout << 0 << endl;
			return;
		}

		cout << powMod(26, parindrome_free_n(n - q)).n << endl;
	}
	else {	// n > q && p < q
		if (!is_palindrome(str_last(b, q - p))) {
			cout << 0 << endl;
			return;
		}
		cout << powMod(26, parindrome_free_n(n - q)).n << endl;
	}

	return;
}

int main() {
	lint _ = 1;
	//cin >> _;
	rep(i, _)
		solve();
	return 0;
}

