#include<stdio.h>
#define MAX 30
#define NIL -1

typedef struct Node{
	int left;                 // 左の子
	int right;                // 右の子
	int parent;               // 親
} N;

N T[MAX];
int n;                        // 節点の個数
int D[MAX], H[MAX];           // 各節点の深さ，高さを格納する配列


void setDepth(int u, int d)   // 深さを調べる
{
	if( u == NIL ) return;
	D[u] = d;
	setDepth(T[u].left, d+1);
	setDepth(T[u].right, d+1);
}

int setHeight(int u)          // 高さを求める
{
	int h1, h2;
	h1 = h2 = 0;
	if(T[u].left != NIL) h1 = setHeight(T[u].left)+1;
	if(T[u].right != NIL) h2 = setHeight(T[u].right)+1;
	return H[u] = (h1>h2 ? h1 : h2);
}

int getSibling(int u)         // 兄弟を求める
{
	if( T[u].parent == NIL ) return NIL;
	if( T[T[u].parent].left != u && T[T[u].parent].left != NIL ) return T[T[u].parent].left;       // u がある節点と同じ親を持ち，かつ u がその親の右の子の場合
	if( T[T[u].parent].right != u && T[T[u].parent].right != NIL ) return T[T[u].parent].right;    // u がある節点と同じ親を持ち，かつ u がその親の左の子の場合
	
	return NIL;
}

void print(int u)
{
	int deg;
	
	printf("node %d: parent = %d, sibling = %d, ", u, T[u].parent, getSiblng(u));
	deg = 0;
	if(T[u].left != NIL) deg++;
	if(T[u].right != NIL) deg++;
	printf("degree = %d, depth = %d, height = %d, ", deg, D[u], H[u]);
	
	if(T[u].parent == NIL) printf("root\n");
	else if (T[u].left == NIL && T[u].right == NIL) printf("leaf\n");
	else printf("internal node\n");
}

int main(void)
{
	int i, x, le, ri, root;
	scanf("%d", &n);   // 節点の個数を入力
	
	for(i = 0; i < n; i++) T[i].parent = NIL;   // left, rightはすべて入力されるので親だけNILを代入
	for(i = 0; i < n; i++)
	{
		scanf("%d %d %d", &x, &le, &ri);
		T[x].left = le;
		T[x].right = ri;
		if( le != NIL ) T[le].parent = x;
		if( ri != NIL ) T[ri].parent = x;
	}
	
	for(i = 0; i < n; i++)
	{
		if(T[i].parent == NIL) root = i;
	}
	
	setDepth(root, 0);
	setHeight(root);
	
	for(i = 0; i < n; i++) print(i);
	
	return 0;
}


