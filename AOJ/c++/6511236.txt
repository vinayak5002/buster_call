#undef _GLIBCXX_DEBUG

#define _USE_MATH_DEFINES
#define _EXT_CODECVT_SPECIALIZATIONS_H 1
#define _EXT_ENC_FILEBUF_H 1
#include <bits/stdc++.h>
#include <bits/extc++.h>
using namespace std;
/*
#include <atcoder/all>
using namespace atcoder;
*/
/*
#include <boost/multiprecision/cpp_int.hpp>
#include <boost/multiprecision/cpp_dec_float.hpp>
using bll = boost::multiprecision::cpp_int;
using bdouble = boost::multiprecision::number<boost::multiprecision::cpp_dec_float<100>>;
using namespace boost::multiprecision;
*/
//#define int long long
using ll = long long;
//constexpr ll MOD = (ll)1e9 + 7; //primitive root = 5
constexpr ll MOD = 998244353; //primitive root = 3
//INT_MAX = (1<<31)-1 = 2147483647, INT64_MAX = (1LL<<63)-1 = 9223372036854775807
constexpr ll INF = std::numeric_limits<ll>::max() == INT_MAX ? (ll)1e9 + 7 : (ll)1e18;
constexpr double EPS = 1e-9;
constexpr ll dx[4] = {1, 0, -1, 0};
constexpr ll dy[4] = {0, 1, 0, -1};
constexpr ll dx8[8] = {1, 0, -1, 0, 1, 1, -1, -1};
constexpr ll dy8[8] = {0, 1, 0, -1, 1, -1, 1, -1};
#if defined(LOCAL_TEST) || defined(LOCAL_DEV)
	#define BOOST_STACKTRACE_USE_ADDR2LINE
	#define BOOST_STACKTRACE_ADDR2LINE_LOCATION /usr/local/opt/binutils/bin/addr2line
	#define _GNU_SOURCE 1
	#include <boost/stacktrace.hpp>
#endif
#ifdef LOCAL_TEST
	namespace std {
		template <typename T> class dvector : public std::vector<T> {
		public:
			using std::vector<T>::vector;
			template <typename T_ = T, typename std::enable_if_t<std::is_same_v<T_, bool>, std::nullptr_t> = nullptr>
			std::vector<bool>::reference operator[](std::size_t n) {
				if (this->size() <= n) { std::cerr << boost::stacktrace::stacktrace() << '\n' << "vector::_M_range_check: __n (which is " << n << ") >= this->size() (which is " << this->size() << ")" << '\n'; } return this->at(n);
			}
			template <typename T_ = T, typename std::enable_if_t<std::is_same_v<T_, bool>, std::nullptr_t> = nullptr>
			const T_ operator[](std::size_t n) const {
				if (this->size() <= n) { std::cerr << boost::stacktrace::stacktrace() << '\n' << "vector::_M_range_check: __n (which is " << n << ") >= this->size() (which is " << this->size() << ")" << '\n'; } return this->at(n);
			}
			template <typename T_ = T, typename std::enable_if_t<!std::is_same_v<T_, bool>, std::nullptr_t> = nullptr>
			T_& operator[](std::size_t n) {
				if (this->size() <= n) { std::cerr << boost::stacktrace::stacktrace() << '\n' << "vector::_M_range_check: __n (which is " << n << ") >= this->size() (which is " << this->size() << ")" << '\n'; } return this->at(n);
			}
			template <typename T_ = T, typename std::enable_if_t<!std::is_same_v<T_, bool>, std::nullptr_t> = nullptr>
			const T_& operator[](std::size_t n) const {
				if (this->size() <= n) { std::cerr << boost::stacktrace::stacktrace() << '\n' << "vector::_M_range_check: __n (which is " << n << ") >= this->size() (which is " << this->size() << ")" << '\n'; } return this->at(n);
			}
		};
		template <typename T, std::size_t N> class darray : public std::array<T, N> {
		public:
			using std::array<T, N>::array;
			T& operator[](std::size_t n) {
				if (this->size() <= n) { std::cerr << boost::stacktrace::stacktrace() << '\n' << "vector::_M_range_check: __n (which is " << n << ") >= this->size() (which is " << this->size() << ")" << '\n'; } return this->at(n);
			}
			const T& operator[](std::size_t n) const {
				if (this->size() <= n) { std::cerr << boost::stacktrace::stacktrace() << '\n' << "vector::_M_range_check: __n (which is " << n << ") >= this->size() (which is " << this->size() << ")" << '\n'; } return this->at(n);
			}
		};
		template <typename T, typename Compare = std::less<T>, typename Allocator = std::allocator<T>> class dmultiset : public std::multiset<T,Compare,Allocator> {
		public:
			using std::multiset<T,Compare,Allocator>::multiset;
			const typename std::multiset<T,Compare,Allocator>::iterator erase(const typename std::multiset<T,Compare,Allocator>::iterator it) {
				return std::multiset<T,Compare,Allocator>::erase(it);
			}
			std::size_t erase([[maybe_unused]] const T& x) {
				std::cerr << boost::stacktrace::stacktrace() << '\n'; assert(false);
			}
			std::size_t erase_all_elements(const T& x) {
				return std::multiset<T,Compare,Allocator>::erase(x);
			}
		};
	}
	#define vector dvector
	#define array darray
	#define multiset dmultiset
	class SIGFPE_exception : std::exception {};
	class SIGSEGV_exception : std::exception {};
	void catch_SIGFPE([[maybe_unused]] int e) { std::cerr << boost::stacktrace::stacktrace() << '\n'; throw SIGFPE_exception(); }
	void catch_SIGSEGV([[maybe_unused]] int e) { std::cerr << boost::stacktrace::stacktrace() << '\n'; throw SIGSEGV_exception(); }
	signed convertedmain();
	signed main() { signal(SIGFPE, catch_SIGFPE); signal(SIGSEGV, catch_SIGSEGV); return convertedmain(); }
	#define main() convertedmain()
#else
	#define erase_all_elements erase
#endif
#ifdef LOCAL_DEV
	template <typename T1, typename T2> std::ostream& operator<<(std::ostream& s, const std::pair<T1, T2>& p) {
		return s << "(" << p.first << ", " << p.second << ")"; }
	template <typename T, std::size_t N> std::ostream& operator<<(std::ostream& s, const std::array<T, N>& a) {
		s << "{ "; for (std::size_t i = 0; i < N; ++i){ s << a[i] << "\t"; } s << "}"; return s; }
	template <typename T, typename Compare> std::ostream& operator<<(std::ostream& s, const std::set<T, Compare>& se) {
		s << "{ "; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << "\t"; } s << "}"; return s; }
	template <typename T, typename Compare> std::ostream& operator<<(std::ostream& s, const std::multiset<T, Compare>& se) {
		s << "{ "; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << "\t"; } s << "}"; return s; }
	template <typename T1, typename T2, typename Compare> std::ostream& operator<<(std::ostream& s, const std::map<T1, T2, Compare>& m) {
		s << "{\n"; for (auto itr = m.begin(); itr != m.end(); ++itr){ s << "\t" << (*itr).first << " : " << (*itr).second << "\n"; } s << "}"; return s; }
	template <typename T> std::ostream& operator<<(std::ostream& s, const std::deque<T>& v) {
		for (std::size_t i = 0; i < v.size(); ++i){ s << v[i]; if (i < v.size() - 1) s << "\t"; } return s; }
	template <typename T> std::ostream& operator<<(std::ostream& s, const std::vector<T>& v) {
		for (std::size_t i = 0; i < v.size(); ++i){ s << v[i]; if (i < v.size() - 1) s << "\t"; } return s; }
	template <typename T> std::ostream& operator<<(std::ostream& s, const std::vector<std::vector<T>>& vv) {
		s << "\\\n"; for (std::size_t i = 0; i < vv.size(); ++i){ s << vv[i] << "\n"; } return s; }
	template <typename T, std::size_t N, typename std::enable_if_t<!std::is_same_v<T, char>, std::nullptr_t> = nullptr> std::ostream& operator<<(std::ostream& s, const T (&v)[N]) {
		for (std::size_t i = 0; i < N; ++i){ s << v[i]; if (i < N - 1) s << "\t"; } return s; }
	template <typename T, std::size_t N, std::size_t M, typename std::enable_if_t<!std::is_same_v<T, char>, std::nullptr_t> = nullptr> std::ostream& operator<<(std::ostream& s, const T (&vv)[N][M]) {
		s << "\\\n"; for (std::size_t i = 0; i < N; ++i){ s << vv[i] << "\n"; } return s; }
	#if __has_include(<ext/pb_ds/assoc_container.hpp>)
		template <typename Key, typename Compare> std::ostream& operator<<(std::ostream& s, const __gnu_pbds::tree<Key, __gnu_pbds::null_type, Compare, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>& se) {
			s << "{ "; for (auto itr = se.begin(); itr != se.end(); ++itr){ s << (*itr) << "\t"; } s << "}"; return s; }
		template <typename Key, typename T, typename Hash> std::ostream& operator<<(std::ostream& s, const __gnu_pbds::gp_hash_table<Key, T, Hash>& m) {
			s << "{\n"; for (auto itr = m.begin(); itr != m.end(); ++itr){ s << "\t" << (*itr).first << " : " << (*itr).second << "\n"; } s << "}"; return s; }
	#endif
	void debug_impl() { std::cerr << '\n'; }
	template <typename Head, typename... Tail> void debug_impl(Head& head, Tail&... tail) { std::cerr << " " << head << (sizeof...(Tail) ? "," : ""); debug_impl(tail...); }
	template <typename Head, typename... Tail> void debug_impl(const Head& head, const Tail&... tail) { std::cerr << " " << head << (sizeof...(Tail) ? "," : ""); debug_impl(tail...); }
	#define debug(...) do { std::cerr << ":" << __LINE__ << " (" << #__VA_ARGS__ << ") ="; debug_impl(__VA_ARGS__); } while (false)
	constexpr inline long long prodlocal([[maybe_unused]] long long prod, [[maybe_unused]] long long local) { return local; }
#else
	#define debug(...) do {} while (false)
	constexpr inline long long prodlocal([[maybe_unused]] long long prod, [[maybe_unused]] long long local) { return prod; }
#endif
#define repoverload3(_1, _2, _3, name, ...) name
#define rep3(i, a, b) for(ll i=(a), i##_length=(b); i<i##_length; ++i)
#define rep2(i, n) rep3(i, 0, n)
#define rep1(n) rep3(i, 0, n)
#define rep(...) repoverload3(__VA_ARGS__, rep3, rep2, rep1)(__VA_ARGS__)
#define repeq3(i, a, b) rep3(i, (a)+1, (b)+1)
#define repeq2(i, n) rep3(i, 1, (n)+1)
#define repeq1(n) rep3(i, 1, (n)+1)
#define repeq(...) repoverload3(__VA_ARGS__, repeq3, repeq2, repeq1)(__VA_ARGS__)
#define rrep3(i, a, b) for(ll i=(b)-1; i>=(a); --i)
#define rrep2(i, n) rrep3(i, 0, n)
#define rrep1(n) rrep3(i, 0, n)
#define rrep(...) repoverload3(__VA_ARGS__, rrep3, rrep2, rrep1)(__VA_ARGS__)
#define rrepeq3(i, a, b) rrep3(i, (a)+1, (b)+1)
#define rrepeq2(i, n) rrep3(i, 1, (n)+1)
#define rrepeq1(n) rrep3(i, 1, (n)+1)
#define rrepeq(...) repoverload3(__VA_ARGS__, rrepeq3, rrepeq2, rrepeq1)(__VA_ARGS__)
#define all(v) std::begin(v), std::end(v)
#define rall(v) std::rbegin(v), std::rend(v)
void p() { std::cout << '\n'; }
template <typename Head, typename... Tail> void p(Head& head, Tail&... tail) { std::cout << head << (sizeof...(Tail) ? " " : ""); p(tail...); }
template <typename Head, typename... Tail> void p(const Head& head, const Tail&... tail) { std::cout << head << (sizeof...(Tail) ? " " : ""); p(tail...); }
template <typename T> inline void pv(const T& v) { for(ll i=0, N=std::size(v); i<N; i++) std::cout << v[i] << " \n"[i==N-1]; }
template <typename T> inline bool chmax(T& a, T b) { return a < b && (a = b, true); }
template <typename T> inline bool chmin(T& a, T b) { return a > b && (a = b, true); }
template <typename T> inline void uniq(T& v) { std::sort(v.begin(), v.end()); v.erase(std::unique(v.begin(), v.end()), v.end()); }
template <typename T> inline ll sz(const T& v) { return std::size(v); }
template <typename T, std::size_t N> std::vector<T> make_vector_impl(std::vector<ll>& sizes, typename std::enable_if<(N==1), const T&>::type x) { return std::vector<T>(sizes.front(),x); }
template <typename T, std::size_t N> auto make_vector_impl(std::vector<ll>& sizes, typename std::enable_if<(N>1), const T&>::type x) { ll size=sizes.back(); sizes.pop_back(); return std::vector<decltype(make_vector_impl<T,N-1>(sizes,x))>(size,make_vector_impl<T,N-1>(sizes,x)); }
template <typename T, std::size_t N> auto make_vector(const ll (&sizes)[N], const T& x=T()) { std::vector<ll> s(N); for(std::size_t i=0; i<N; ++i)s[i]=sizes[N-1-i]; return make_vector_impl<T,N>(s,x); }
template <typename T, std::size_t N> std::array<T,N> make_array() { return std::array<T,N>{}; }
template <typename T, std::size_t Head, std::size_t... Tail, typename std::enable_if_t<(sizeof...(Tail)>=1), std::nullptr_t> = nullptr> auto make_array() { return std::array<decltype(make_array<T,Tail...>()),Head>(); }
#if __has_include(<ext/pb_ds/assoc_container.hpp>)
	class custom_hash {
	public:
		static uint64_t splitmix64(uint64_t x) {
			x += 0x9e3779b97f4a7c15, x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9, x = (x ^ (x >> 27)) * 0x94d049bb133111eb; return x ^ (x >> 31);
		}
		std::size_t operator()(uint64_t x) const {
			static const uint64_t FIXED_RANDOM = std::chrono::steady_clock::now().time_since_epoch().count(); return splitmix64(x + FIXED_RANDOM);
		}
	};
	template <typename Key, typename Mapped, typename Hash = custom_hash, typename std::enable_if_t<std::is_integral_v<Key>, std::nullptr_t> = nullptr> class fmap : public __gnu_pbds::gp_hash_table<Key, Mapped, Hash> {
	public:
		using __gnu_pbds::gp_hash_table<Key, Mapped, Hash>::gp_hash_table;
		template <typename T> fmap(std::initializer_list<std::initializer_list<T>> il) : __gnu_pbds::gp_hash_table<Key, Mapped, Hash>() {
			for (auto&& x : il) __gnu_pbds::gp_hash_table<Key, Mapped, Hash>::insert(std::pair<Key, Mapped>(*x.begin(), *(x.begin() + 1)));
		}
		template <typename T> ll count(const T& x) const {
			return __gnu_pbds::gp_hash_table<Key, Mapped, Hash>::find(x) != __gnu_pbds::gp_hash_table<Key, Mapped, Hash>::end();
		}
	};
#else
	template <typename Key, typename Mapped> using fmap = std::map<Key, Mapped>;
#endif
template <bool Index, typename... T> class zip_helper {
	class zip_iterator : std::iterator<std::forward_iterator_tag, std::tuple<decltype(*std::declval<T>().begin())...>> {
	public:
		ll idx_;
		std::tuple<decltype(std::declval<T>().begin())...> iters_;
		template <std::size_t... I> auto deref(std::index_sequence<I...>) const { return typename zip_iterator::value_type{*std::get<I>(iters_)...}; }
		template <std::size_t... I> void increment(std::index_sequence<I...>) { [[maybe_unused]] auto l = {(++std::get<I>(iters_), 0)...}; }
		explicit zip_iterator(decltype(iters_) iters) : idx_(0), iters_{std::move(iters)} {}
		zip_iterator& operator++() { ++idx_; increment(std::index_sequence_for<T...>{}); return *this; }
		zip_iterator operator++(int) { auto saved{*this}; ++idx_; increment(std::index_sequence_for<T...>{}); return saved; }
		bool operator!=(const zip_iterator& other) const { return iters_ != other.iters_; }
		template <bool Index_ = Index, typename std::enable_if_t<Index_, std::nullptr_t> = nullptr> auto operator*() const { return std::tuple_cat(std::make_tuple(this->idx_), this->deref(std::index_sequence_for<T...>{})); }
		template <bool Index_ = Index, typename std::enable_if_t<!Index_, std::nullptr_t> = nullptr> auto operator*() const { return this->deref(std::index_sequence_for<T...>{}); }
	};
public:
	zip_helper(T&... seqs) : begin_{std::make_tuple(seqs.begin()...)}, end_{std::make_tuple(seqs.end()...)} {}
	zip_iterator begin() const { return begin_; }
	zip_iterator end() const { return end_; }
	zip_iterator begin_, end_;
};
template <typename... T> auto zip(T&&... seqs) { return zip_helper<false, T...>{seqs...}; }
template <typename... T> auto zipindex(T&&... seqs) { return zip_helper<true, T...>{seqs...}; }

/*-----8<-----template-----8<-----*/


//[lib]fset,fmultiset.cpp
template<class T>
class fmultiset {
private:
	class node {
	public:
		node *l = nullptr;
		node *r = nullptr;
		int h;
		T k;
		int cnt = 0;
		int size = 0;
		T sum = 0;
	};

	node *root = nullptr;

	void release(node *x) {
		if (!x) return;
		release(x->l);
		release(x->r);
		delete x;
	}

	int height(node *x) {
		return x ? x->h : -1;
	}

	int size(node *x) {
		return x ? x->size : 0;
	}


	T sum(node *x) {
		return x ? x->sum : 0;
	}

	void fix(node *x) {
		x->h = max(height(x->l), height(x->r)) + 1;
		x->size = x->cnt + size(x->l) + size(x->r);
		x->sum = x->k * x->cnt + sum(x->l) + sum(x->r);
	}

	node *rotL(node *x) {
		node *y = x->r;
		x->r = y->l;
		y->l = x;
		fix(x);
		fix(y);
		return y;
	}

	node *rotR(node *x) {
		node *y = x->l;
		x->l = y->r;
		y->r = x;
		fix(x);
		fix(y);
		return y;
	}

	node *insert(node *x, const T &k) {
		if (!x) {
			node *res = new node();
			res->k = k;
			res->cnt = 1;
			res->size = 1;
			res->sum = k;
			return res;
		}
		if (k == x->k) {
			x->cnt++;
			fix(x);
			return x;
		} else if (k < x->k) {
			x->l = insert(x->l, k);
			fix(x);
			if (height(x->r) + 2 <= height(x->l)) {
				if (height(x->l->r) > height(x->l->l)) {
					x->l = rotL(x->l);
				}
				x = rotR(x);
			}
		} else {
			x->r = insert(x->r, k);
			fix(x);
			if (height(x->l) + 2 <= height(x->r)) {
				if (height(x->r->l) > height(x->r->r)) {
					x->r = rotR(x->r);
				}
				x = rotL(x);
			}
		}
		return x;
	}

	node *erase(node *x, const T &k) {
		if (!x) return x;
		if (k == x->k) {
			x->cnt--;
		} else if (k < x->k) {
			x->l = erase(x->l, k);
		} else {
			x->r = erase(x->r, k);
		}
		fix(x);
		return x;
	}

	bool in(node *x, const T &k) {
		if (!x) return false;
		if (k == x->k) {
			return x->cnt > 0;
		} else if (k < x->k) {
			return in(x->l, k);
		} else {
			return in(x->r, k);
		}
	}

	int countlt(node *x, const T &k) {
		if (!x) return 0;
		if (k == x->k) return size(x->l);
		else if (k < x->k) return countlt(x->l, k);
		else return size(x->l) + x->cnt + countlt(x->r, k);
	}

	int countle(node *x, const T &k) {
		if (!x) return 0;
		if (k == x->k) return x->cnt + size(x->l);
		else if (k < x->k) return countle(x->l, k);
		else return size(x->l) + x->cnt + countle(x->r, k);
	}

	T sumlt(node *x, const T &k) {
		if (!x) return 0;
		if (k == x->k) return sum(x->l);
		else if (k < x->k) return sumlt(x->l, k);
		else return sum(x->l) + x->k * x->cnt + sumlt(x->r, k);
	}

	node *at(node *x, int k) {
		if (!x) return nullptr;
		if (k < size(x->l)) return at(x->l, k);
		if (k < size(x->l) + x->cnt) return x;
		return at(x->r, k - size(x->l) - x->cnt);
	}

public:
	fmultiset() {}
	~fmultiset() {
		release(root);
	}
	fmultiset(fmultiset&& r) noexcept { *this = std::move(r); }
	inline fmultiset& operator=(fmultiset&& r) noexcept {
		release(root);
		root = r.root;
		r.root = nullptr;
		return *this;
	}

	void insert(const T &k) {
		root = insert(root, k);
	}

	void erase(const T &k) {
		root = erase(root, k);
	}

	bool in(const T &k) {
		return in(root, k);
	}

	int size() {
		return size(root);
	}
	//k未満の個数
	int countlt(const T &k) {
		return countlt(root, k);
	}
	//k未満の総和
	T sumlt(const T &k) {
		return sumlt(root, k);
	}
	//k超過の個数
	int countgt(const T &k) {
		return size(root) - countle(root, k);
	}
	//k以下の個数
	int countle(const T &k) {
		return countle(root, k);
	}
	//k以上の個数
	int countge(const T &k) {
		return size(root) - countlt(root, k);
	}

	int lower_bound(const T &k) { return countlt(k); }
	int upper_bound(const T &k) { return countle(k); }

	T at(int k) {
		return at(root, k)->k;
	}

	T operator[](int k) {
		return at(k);
	}
};
template< typename T>
std::ostream& operator<<(std::ostream& s, fmultiset<T>& se) {
	s << "{ "; for (int i = 0; i < se.size(); ++i) s << se[i] << '\t'; s << "}"; return s;
}

template<class T>
class fset : public fmultiset<T> {
public:
	using fmultiset<T>::fmultiset;
	void insert(const T &k) {
		if (fmultiset<T>::in(k)) return;
		fmultiset<T>::insert(k);
	}
};

////

//[lib]WaveletMatrix_RangeQuery.cpp
//[depends on]fset,fmultiset.cpp
template <typename T>
class DynamicWaveletMatrix {
	//1<<H := 入れられる値の範囲 1<<30=1e9くらい
	static const int H = 31;
	//U := 入れられる要素数 1<<20=1e6くらい
	static const int U = 1 << 20;
	vector<fmultiset<ll>> dat;
	bool UseQuantile;

	class node {
	public:
		fmultiset<T> b;
		node *l = nullptr;
		node *r = nullptr;
	};
	node *root = nullptr;

	void release(node *x) {
		if (!x) return;
		release(x->l);
		release(x->r);
		delete x;
	}

	node *insert(node *x, int i, T v, int h = H - 1) {
		if (!x) x = new node();
		x->b.insert(i);
		if (h == -1) return x;
		if ((v >> h & 1) == 0) {
			x->l = insert(x->l, i, v, h - 1);
		} else {
			x->r = insert(x->r, i, v, h - 1);
		}
		return x;
	}

	node *erase(node *x, int i, T v, int h = H - 1) {
		x->b.erase(i);
		if (h == -1) return x;
		if ((v >> h & 1) == 0) {
			x->l = erase(x->l, i, v, h - 1);
		} else {
			x->r = erase(x->r, i, v, h - 1);
		}
		return x;
	}

	T quantile(node *x, int l, int r, int k, T a = 0, T b = 1LL << H) {
		if (b - a == 1) return a;
		T m = a + (b - a) / 2;
		int ll = x->l ? x->l->b.countlt(l) : 0;
		int rr = x->l ? x->l->b.countlt(r) : 0;
		int cnt = rr - ll;
		if (k < cnt) {
			return quantile(x->l, l, r, k, a, m);
		} else {
			k -= cnt;
			return quantile(x->r, l, r, k, m, b);
		}
	}

public:
	DynamicWaveletMatrix(bool UseQuantile = false) : dat(U << 1), UseQuantile(UseQuantile) {}
	~DynamicWaveletMatrix() {
		release(root);
	}
	DynamicWaveletMatrix(DynamicWaveletMatrix&& r) noexcept { *this = std::move(r); }
	inline DynamicWaveletMatrix& operator=(DynamicWaveletMatrix&& r) noexcept {
		release(root);
		root = r.root;
		r.root = nullptr;
		dat = std::move(r.dat);
		UseQuantile = r.UseQuantile;
		return *this;
	}

	void insert(int k, T v) {
		if (UseQuantile) root = insert(root, k, v);
		k += U;
		while (k) {
			dat[k].insert(v);
			k >>= 1;
		}
	}

	void erase(int k, T v) {
		if (UseQuantile) root = erase(root, k, v);
		k += U;
		while (k) {
			dat[k].erase(v);
			k >>= 1;
		}
	}

	int countlt(int a, int b, T v) {
		int ans = 0;
		for (a += U, b += U; a < b; a >>= 1, b >>= 1) {
			if (a & 1) ans += dat[a++].countlt(v);
			if (b & 1) ans += dat[--b].countlt(v);
		}
		return ans;
	}

	T sumlt(int a, int b, T v, int k = 1, int l = 0, int r = U) {
		T ans = 0;
		for (a += U, b += U; a < b; a >>= 1, b >>= 1) {
			if (a & 1) ans += dat[a++].sumlt(v);
			if (b & 1) ans += dat[--b].sumlt(v);
		}
		return ans;
	}

	T quantile(int l, int r, int k, T a = 0, T b = 1LL << H) {
		assert(UseQuantile);
		return quantile(root, l, r, k, a, b);
	}

	int rangefreq(int lx, int rx, int ly, int ry) {
		int rc = countlt(lx, rx, ry);
		if (rc == 0) return 0;
		int lc = countlt(lx, rx, ly);
		return rc - lc;
	}
};

class DynamicRangeQuery {
public:
	fmultiset<ll> xs;
	DynamicWaveletMatrix<ll> wm;
	DynamicRangeQuery() {}
	void add(ll x, ll y) {
		int idx = xs.countlt(x);
		xs.insert(x);
		wm.insert(idx, y);
	}
	// クエリ [x1, x2) x [y1, y2) に含まれる数を返す
	ll query(ll x1, ll x2, ll y1, ll y2) {
		int a = xs.countlt(x1);
		int b = xs.countlt(x2);
		return wm.rangefreq(a, b, y1, y2);
	}
};

/*-----8<-----library-----8<-----*/

void solve() {
	ll n, m;
	cin >> n >> m;
	DynamicWaveletMatrix<ll> wm(true);

	rep(i, n) wm.insert(i, (1LL << 31) - 1);
	vector<ll> v(n, (1LL << 31) - 1);
	while (m--) {
		int c, a, b;
		cin >> c >> a >> b;
		if(c == 0) {
			wm.erase(a, v[a]);
			wm.insert(a, b);
			v[a] = b;
		} else {
			cout << wm.quantile(a, b + 1, 0) << '\n';
		}
	}

	std::cout << std::flush;
	_Exit(0);
}

signed main() {
#ifndef LOCAL_DEV
	std::cin.tie(nullptr);
	std::ios::sync_with_stdio(false);
#endif
	//ll Q; cin >> Q; while(Q--)solve();
	solve();
	return 0;
}

