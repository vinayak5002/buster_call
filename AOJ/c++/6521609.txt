#include<iostream>
#include<math.h>
#include<string>
#include<algorithm>
#include<vector>
#include <queue>
#include<map>
#include<set>
using namespace std;
struct RMQ {
    static const int MAX_N = 1 << 17;
  const long long MM=1<<29-1;
    int n, dat[2 * MAX_N - 1];
    RMQ() {}
    RMQ(int n_) { init(n_); }
    void init(int n_) {
        n = 1;
        while (n < n_) n *= 2;
        for (int i = 0; i < 2 * n - 1; i++) dat[i] = 2147483647;
    }
    void update(int k, int a) {
        k += n - 1;
        dat[k] = a;
        while (k > 0) {
            k = (k - 1) / 2;
            dat[k] = min(dat[k * 2 + 1], dat[k * 2 + 2]);
        }
    }
    int query(int a, int b, int k, int l, int r) {
        if (r <= a || b <= l) return 2147483647;
        if (a <= l && r <= b) return dat[k];
        else {
            int vl = query(a, b, k * 2 + 1, l, (l + r) / 2);
            int vr = query(a, b, k * 2 + 2, (l + r) / 2, r);
            return min(vl, vr);
        }
    }
    int query(int a, int b) {
        return query(a, b, 0, 0, n);
    }
};
int main() {
    int N, Q;
    cin >> N >> Q;
    RMQ rmq(N);
    for (int i = 1; i <= Q; i++) {
        int C, X, Y;
        cin >> C >> X >> Y;
        if (C == 0) rmq.update(X, Y);
        else {
            int U = rmq.query(X,Y+1);
            cout << U << endl;
        }
    }

}
