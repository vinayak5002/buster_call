#include <iostream>
#include <algorithm>
#include <cmath>
#include <numeric>
#include <iomanip>
#include <string>
#include <regex>
#include <array>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <queue>
using namespace std;
#define rep(x,to) for(int x=0;x<to;++x)
#define rep2(x,from,to) for(int x=from;x<to;++x)
typedef long long ll;
typedef unsigned long long ull;

int solve(auto &board, int score, int count, int h) {
  while (true) {
    vector<array<int, 3>> end;
    int diff[4][h];
    rep(i,4) {
      rep(k,h) {
        diff[i][k] = board[i+1][k] - board[i][k];  
      }
    }
    rep(k,h) {
      if(diff[0][k] == 0 && diff[1][k] == 0 && diff[2][k] == 0 && diff[3][k] == 0) end.push_back({k, 0, 5});
      else if(diff[0][k] == 0 && diff[1][k] == 0 && diff[2][k] == 0) end.push_back({k, 0, 4});
      else if(diff[0][k] == 0 && diff[1][k] == 0) end.push_back({k, 0, 3});
      else if(diff[1][k] == 0 && diff[2][k] == 0 && diff[3][k] == 0) end.push_back({k, 1, 4});
      else if(diff[1][k] == 0 && diff[2][k] == 0) end.push_back({k, 1, 3});
      else if(diff[2][k] == 0 && diff[3][k] == 0) end.push_back({k, 2, 3});

    }
    if((int)end.size() > 0) {
      for(auto it = end.rbegin(); it != end.rend(); ++it) {
        auto &[x,y,c] = *it;
        score += board[y][x] * c;
        rep(i,c) {
          board[y+i].erase(board[y+i].begin()+x);
          board[y+i].push_back(count);
          count++;
        }
      }
    } else {
      return score;
    }
  }
}

int main() {
  while(true) {
    int n, x;
    cin >> n;
    if(n == 0) break;
    vector<vector<int>> board(5);
    rep(i,n) {
      rep(k,5) {
        cin >> x;
        board[k].push_back(x);
      }
    }
    rep(k,5) reverse(board[k].begin(), board[k].end());
    cout << solve(board, 0, 10, n) << endl;
  }
}
