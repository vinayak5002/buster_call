#include <bits/stdc++.h>
//#include <atcoder/all>
using namespace std;

#define all(x) (x).begin(),(x).end()
#define print(x) cout << (x) << '\n'
typedef long long ll;
typedef long double ld;
using P = pair<int,int>;
using pll = pair<ll,ll>;
using Graph = vector<vector<int>>;

//const ll MOD = 1000000007;
//const ll MOD = 998244353;

template <typename T> inline bool chmax(T &a, T b) {return a < b ? a = b, true : false;}
template <typename T> inline bool chmin(T &a, T b) {return a > b ? a = b, true : false;}

template <typename T>
void vin(vector<T> &v) {
    int l = v.size();
    for(int i = 0; i < l; i++) cin >> v[i];
}

template <typename T>
void vout(vector<T> &v) {
    int l = v.size();
    for(int i = 0; i < l; i++) cout << v[i] << (i < l - 1 ? ' ' : '\n');
}

struct UnionFind {
    vector<int> par, siz;

    UnionFind(int sz): par(sz), siz(sz, 1) {
        for (int i = 0; i < sz; i++) par[i] = i;
    }
    void init(int sz) {
        par.resize(sz);
        siz.assign(sz, 1);
        for (int i = 0; i < sz; i++) par[i] = i;
    }

    int root(int x) {
        while (par[x] != x) {
            x = par[x] = par[par[x]];
        }
        return x;
    }

    bool merge(int x, int y) {
        x = root(x);
        y = root(y);
        if (x == y) return false;
        if (siz[x] < siz[y]) swap(x, y);
        siz[x] += siz[y];
        par[y] = x;
        return true;
    }

    bool same(int x, int y) {
        return root(x) == root(y);
    }

    int size(int x) {
        return siz[root(x)];
    }

    int groups() {
        int s = par.size();
        vector<int> v(s, 0);
        for(int i = 0; i < s; i++) v[root(i)] = 1;
        return accumulate(all(v), 0);
    }
};

void solve() {
    int n, q;   cin >> n >> q;
    UnionFind uf(n);
    while(q--) {
        int t, x, y;    cin >> t >> x >> y;
        if(t == 0) uf.merge(x, y);
        else print(uf.same(x, y));
    }
}

int main() {
    cin.tie(0); cout.tie(0);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(18);

    int Query = 1;
    //cin >> Query;

    for(int t = 1; t <= Query; t++) {
        solve();
    } 

    return 0;
}
