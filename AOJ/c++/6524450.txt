#include<bits/stdc++.h>
#define int ll
#define rep(i, N) for(int i = 0; i < (int)N; ++i)
#define rep1(i, N) for(int i = 1; i <= (int)N; ++i)
#define per(i, N) for(int i = N-1; i >= 0; --i)
#define per1(i, N) for(int i = N; i >= 1; --i)
#define FOR(i, f, t) for(int i = f; i < (int)t; ++i)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define bit(n) (1 << (n))
#define pcnt(n) (__builtin_popcount(n))
#define TakAo(ans) ans ? cout << "Takahashi\n" : cout << "Aoki\n"
#define YesNo(ans) ans ? cout << "Yes\n" : cout << "No\n"
#define endl '\n'
#define fi first
#define se second
#define mkpr make_pair
#define mktpl make_tuple
#define eb emplace_back

using namespace std;
using ll = int64_t;
using ull = uint64_t;
using ld = long double;
template<class T> using vec = vector<T>;
template<class T> using vvec = vec<vec<T>>;
template<class T> using vvvec = vec<vec<vec<T>>>;
template<class T> using vvvvec = vec<vec<vec<vec<T>>>>;

constexpr ld EPS = 1e-10;
constexpr int INF = 1001001001;
constexpr ll LINF = 1001001001001001001ll;
//constexpr int MOD = 1e9+7;
constexpr ll MOD = 998244353;
constexpr int val2 = (MOD + 1) >> 1;
constexpr int NIL = -1;
constexpr int pm[2] = {1, -1};
constexpr int dy[4] = {0, 1, 0, -1};
constexpr int dx[4] = {1, 0, -1, 0};

ll cel(ll a, ll b){ return (a + b - 1) / b;}
ll Gcd(ll a, ll b){ return b ? Gcd(b, a % b) : a;}
ll powi(ll x, ll exp){
    ll res = 1;
    for(; exp > 0; exp >>= 1){
        if(exp & 1) res *= x;
        x *= x;
    }
    return res;
}
ll modpow(ll x, ll exp, ll mod){
    ll res = 1;
    for(x %= mod; exp > 0; exp >>= 1){
        if(exp & 1) res = res * x % mod;
        x = x * x % mod;
    }
    return res;
}
template<class T> bool chmin(T &a, T b){ return a > b ? (a = b, true) : 0;}
template<class T> bool chmax(T &a, T b){ return a < b ? (a = b, true) : 0;}

/*
template<class T>
auto comp = [](T &a, T &b){
    if(get<0>(a) != get<0>(b)) return get<0>(a) < get<0>(b);
    return false;
};
template<class T> using p = priority_queue<T, vector<T>, decltype(comp<T>)>;
*/

class Dijkstra{
    using COMP = ll;
    using INFO = int;
    using DS = pair<COMP, INFO>;
    int N;
    // {distance, v}
    function<bool(DS, DS)> comp = [&](DS a, DS b){
        return a.fi < b.fi;
    };
    priority_queue<DS, vector<DS>, decltype(comp)> Que(comp);
    // {weight, v}
    vector<vector<DS>> G;

    public:
    vector<COMP> dist;
    Dijkstra(int N) : N(N), G(N), dist(N) {}
    void add_edge(int from, int to, int cst){
        G[from].emplace_back(DS{cst, to});
    }
    void solve(int s){
        rep(i, N) dist[i] = INF;
        dist[s] = 0;
        Que.push(DS{0, s});
        while(!Que.empty()){
            int u = Que.top().se;
            Que.pop();
            for(auto v : G[u]){
                if(dist[v.se] > dist[u] + v.fi){
                    dist[v.se] = dist[u] + v.fi;
                    Que.push(DS{dist[v.se], v.se});
                }
            }
        }
    }
};

using P = pair<ll, ll>;
using Tpl = tuple<int, int, int, int>;

void Main(){
    int V, E, R; cin >> V >> E >> R;
    Dijkstra di(V);
    rep(i, E){
        int s, t, d; cin >> s >> t >> d;
        di.add_edge(s, t, d);;
    }
    di.solve(R);
    rep(i, V){
        if(di.dist[i] != INF) cout << di.dist[i] << endl;
        else cout << "INF" << endl;
    }
}

signed main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    Main();
    return 0;
}
