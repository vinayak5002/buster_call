#include<bits/stdc++.h>
#define ll long long
#define ri register
#define all(x) x.begin(),x.end()
using namespace std;
//#define double long double
const char rd[]="%lf";
namespace jh{
	const double EPS=1e-9,PI=acos(-1),inf=1e5;
	inline bool equ(double x,double y){return fabs(x-y)<=EPS;}
	struct P{
		double x,y;
		inline double operator^(const P&b)const{return x*b.x+y*b.y;}
		inline double operator*(const P&b)const{return x*b.y-b.x*y;}
		inline P operator+(const P&b)const{return{x+b.x,y+b.y};}
		inline P operator-(const P&b)const{return{x-b.x,y-b.y};}
		inline P operator*(const double&b)const{return{x*b,y*b};}
		inline P operator/(const double&b)const{return{x/b,y/b};}
		inline bool operator<(const P&b)const{return x==b.x?y<b.y:x<b.x;}
		inline bool operator>(const P&b)const{return b<*this;}
		inline bool operator==(const P&b)const{return equ(x,b.x)&&equ(y,b.y);} 
		inline double len()const{return sqrt(x*x+y*y);}
		inline double sqr()const{return x*x+y*y;}
		inline double ang()const{return atan2(y,x);}
		inline void read(){scanf(rd,&x),scanf(rd,&y);}
	};
	inline double ang(const P&x,const P&y){return (x^y)/x.len()/y.len();}
	inline P rotate(P p,double a){
		return{p.x*cos(a)-p.y*sin(a),p.x*sin(a)+p.y*cos(a)};
	}
	struct L{
		P a,b;
		inline bool operator<(const L&l)const{return a==l.a?b<l.b:a<l.a;}
		inline double mxx()const{return max(a.x,b.x);}
		inline double mxy()const{return max(a.y,b.y);}
		inline double mix()const{return min(a.x,b.x);}
		inline double miy()const{return min(a.y,b.y);}
		inline void read(){a.read(),b.read();}
	};
	inline L midL(P x,P a,P b){
		if(a.sqr()<b.sqr())swap(a,b);
		b=b/b.len()*a.len();
		return{x,x+(a+b)*inf};
	}
	inline bool Lcross(const L&l1,const L&l2){
		if((l1.mxx()<l2.mix())||(l1.mxy()<l2.miy())||
		   (l2.mxx()<l1.mix())||(l2.mxy()<l1.miy()))
		   return 0;
		if(((l1.a-l2.a)*(l2.b-l2.a))*((l1.b-l2.a)*(l2.b-l2.a))<=0&&
		   ((l2.a-l1.a)*(l1.b-l1.a))*((l2.b-l1.a)*(l1.b-l1.a))<=0)
			return 1;
		return 0;
	}
	inline P focus(const L&l1,const L&l2){
		P a=l2.b-l2.a,b=l1.b-l1.a;
		double x=fabs((l1.a-l2.a)*a),y=fabs((l1.b-l2.a)*a);
		P z=b*x/(x+y);
		return l1.a+z;
	} 
	struct O{
		P a;double r;
		inline void read(){a.read(),scanf(rd,&r);}
		inline P getP(double x)const{return{a.x+cos(x)*r,a.y+sin(x)*r};}
	};
	inline int Orela(const O&o1,const O&o2){
		double d=(o1.a-o2.a).len();
		if(equ(d,0)&&equ(o1.r,o2.r))return INT_MAX;
		if(o1.r>d+o2.r||o2.r>d+o1.r)return 0;
		if(equ(o1.r+o2.r,d))return 3;
		if(equ(fabs(o1.r-o2.r),d))return 1;
		if(o1.r+o2.r<d)return 4;
		if(o1.r+o2.r>d)return 2;
		return -1;
	}
	inline O OinT(const P&p1,const P&p2,const P&p3){
		P a=p2-p1,b=p3-p1,c=p3-p2,d=p1-p2;
		double s=a*b,r=abs(s)/(a.len()+b.len()+c.len());
		L x=midL(p1,a,b),y=midL(p2,c,d);
		return{focus(x,y),r};
	}
	inline O OoutT(const P&p1,const P&p2,const P&p3){
		P a=p2-p1,b=p3-p1,ma=(p1+p2)/2,mb=(p1+p3)/2;
		a=rotate(a,PI/2)*inf,b=rotate(b,PI/2)*inf;
		P c=focus({ma-a,ma+a},{mb-b,mb+b});
		return{c,(c-p1).len()};
	}
	//L -> pair<P,P> 
	inline vector<P>OcrossL(const L&l,const O&o){
		P p1=l.b-l.a,p2=l.a-o.a;
		double d=p1*p2/p1.len();d=fabs(d);
		if(d>o.r)return{};
		P p=rotate(p1,PI/2),x=focus({l.a-p1*inf,l.b+p1*inf},{o.a,o.a+p});
		if(equ(d,o.r))return{x};
		double s=(o.r*o.r)-(x-o.a).sqr();s=sqrt(s);
		return{x+p1/p1.len()*s,x-p1/p1.len()*s};
	}
	inline vector<P>Ocross(const O&a,const O&b){
		double d=(a.a-b.a).len();
		if(equ(d,0)&&equ(a.r,b.r))
			return{{inf,inf}};
		if(a.r+b.r<d||d<fabs(a.r-b.r))return{};
		double ap=(b.a-a.a).ang(),at=acos((a.r*a.r+d*d-b.r*b.r)/2/d/a.r);
		if(equ(at,0))return{a.getP(ap)};
		else return{a.getP(ap+at),a.getP(ap-at)};
	}
	inline vector<P>Ocut(const P&p,const O&o){
		P v=o.a-p;
		double d=v.len(),s=asin(o.r/d);
		if(d<o.r)return{};
		if(equ(d,o.r))return{{p+rotate(v,PI/2)}};
		return{{p+rotate(v,s)},{p+rotate(v,-s)}};
	}
}
using namespace jh;
P a;
O b;
vector<P>_;
int main(){
	a.read(),b.read();
	_=Ocut(a,b),sort(all(_));
	if(_.size()==1)_.emplace_back(_.back()); 
	for(P i:_)
	printf("%.10f %.10f\n",i.x,i.y);
	return 0;
}
