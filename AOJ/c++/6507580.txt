#include<bits/stdc++.h>
using namespace std;
# define NIL -1
# define INF 100000000

struct Node {
    int id;
    queue<int> adj;
    string color;
    int time_ini = INF;
    int time_fin = INF;
    int pred;
};


void dfs(vector<Node> node_vec, Node start_node, vector<int> i_to_node_id, vector<int> node_id_to_i, vector<vector<int> >& logger_vec) {
    stack<Node> my_stack;
    int tmp_id;
    int time;
    Node: node, tmp_node;

    start_node.color = "GREY";
    start_node.dist = 1;
    start_node.pred = NIL;

    time++;
    logger_vec.at(node_id_to_i.at(start_node.id)).at(0) = time;
    my_stack.push(start_node);

    while(my_stack.size() > 0) {
        node = my_stack.top();

        if (node.adj.size() > 0) {
            tmp_id = node.adj.front();
            node.adj.pop();
            i =  node_id_to_i.at(tmp_id);
            tmp_node = node_vec.at(i);
            if (node.color=="WHITE") {
                node.color = "GREY"; 
                time++;
                logger_vec.at(node_id_to_i.at(tmp_node.id)).at(0) = time;
                my_stack.push(tmp_node);
            }
        }
        else {
            node.color = "BLACK";
            time++;
            logger_vec.at(node_id_to_i.at(node.id)).at(1) = time;
            my_stack.pop()
        }    
    }
}


int main() {
    int n;
    int u;
    int v;
    int k;
    int current_node_id;
    int time=0;
    bool find_flag;
    
    cin >> n;
    vector<int> i_to_node_id(n);
    vector<int> node_id_to_i(n);
    vector<Node> node_vec(n);
    vector<vector<int> > logger_vec(n, vector<int>(2)); 

    for (int i=0; i<n; i++) {
        cin >> u >> k;
        Node node;
        node.id = u;
        node.color = "WHITE";

        i_to_node_id.at(i) = u;
        node_id_to_i.at(u) = i;

        for (int j=0; j<n; j++) {
            cin >> v;
            node.adj.push(v); 
        }
        node_vec.push_back(node); 
    }

    dfs(node_vec, node_vec.at(0), i_to_node_id, node_id_to_i, logger_vec)

    for (int i=0; i<n; i++) {
        cout << i_to_node_id.at(i) << " " << logger_vec.at(i).at(0) << " " << logger_vec.at(i).at(1) << endl ;
    }
    return 0;

}
