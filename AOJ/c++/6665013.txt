#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, s, t) for (int i = (int)(s); i < (int)(t); ++i)
#define revrep(i, t, s) for (int i = (int)(t)-1; i >= (int)(s); --i)
#define all(x) begin(x), end(x)
template <typename T> bool chmax(T& a, const T& b) { return a < b ? (a = b, 1) : 0; }
template <typename T> bool chmin(T& a, const T& b) { return a > b ? (a = b, 1) : 0; }

using T = ll;
using Vec = std::complex<T>;

const T PI = std::acos(-1);

constexpr T eps = 1e-12;
inline bool eq(T a, T b) { return std::abs(a - b) < eps; }
inline bool eq(Vec a, Vec b) { return std::abs(a - b) < eps; }
inline bool lt(T a, T b) { return a < b - eps; }
inline bool leq(T a, T b) { return a < b + eps; }

std::istream& operator>>(std::istream& is, Vec& p) {
    T x, y;
    is >> x >> y;
    p = {x, y};
    return is;
}

struct Line {
    Vec p1, p2;
    Line() = default;
    Line(const Vec& p1, const Vec& p2) : p1(p1), p2(p2) {}
    Vec dir() const { return p2 - p1; }
};

struct Segment {
    Vec p1, p2;
    Segment() = default;
    Segment(const Vec& p1, const Vec& p2) : p1(p1), p2(p2) {}
    Vec dir() const { return p2 - p1; }
};

struct Circle {
    Vec c;
    T r;
    Circle() = default;
    Circle(const Vec& c, T r) : c(c), r(r) {}
};

using Polygon = std::vector<Vec>;

T dot(const Vec& a, const Vec& b) {
    return (std::conj(a) * b).real();
}

T cross(const Vec& a, const Vec& b) {
    return (std::conj(a) * b).imag();
}

Vec rot(const Vec& a, T ang) {
    return a * Vec(std::cos(ang), std::sin(ang));
}

Vec projection(const Line& l, const Vec& p) {
    return l.p1 + dot(p - l.p1, l.dir()) * l.dir() / std::norm(l.dir());
}

Vec reflection(const Line& l, const Vec& p) {
    return T(2) * projection(l, p) - p;
}

// 0: collinear
// 1: counter-clockwise
// -1: clockwise
int ccw(const Vec& a, const Vec& b, const Vec& c) {
    if (eq(cross(b - a, c - a), 0)) return 0;
    if (lt(cross(b - a, c - a), 0)) return -1;
    return 1;
}

Line bisector(const Vec& p, const Vec& q) {
    auto m = (p + q) / T(2);
    auto v = q - p;
    return Line(m, m + Vec(-v.imag(), v.real()));
}

void sort_by_arg(std::vector<Vec>& pts) {
    std::sort(pts.begin(), pts.end(), [&](auto& p, auto& q) {
        if ((p.imag() < 0) != (q.imag() < 0)) return (p.imag() < 0);
        if (cross(p, q) == 0) {
            if (p == Vec(0, 0)) return !(q.imag() < 0 || (q.imag() == 0 && q.real() > 0));
            if (q == Vec(0, 0)) return  (p.imag() < 0 || (p.imag() == 0 && p.real() > 0));
            return (p.real() > q.real());
        }
        return (cross(p, q) > 0);
    });
}

template <typename T, typename U>
ostream& operator<<(ostream& os, const pair<T, U>& p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
}
template <typename T>
ostream& operator<<(ostream& os, const vector<T>& v) {
    for (int i = 0; i < (int) v.size(); ++i) {
        os << v[i];
        if (i < (int) v.size() - 1) os << " ";
    }
    return os;
}

template <typename T>
struct Fraction {
    T num, den;
    Fraction(T num = 0, T den = 1) : num(num), den(den) { reduce(); }
    void reduce() {
        T g = std::gcd(num, den);
        num /= g, den /= g;
        if (den < 0) num = -num, den = -den;
    }
    Fraction& operator+=(const Fraction& rhs) {
        num = num*rhs.den + rhs.num*den;
        den *= rhs.den;
        reduce();
        return *this;
    }
    Fraction& operator-=(const Fraction& rhs) {
        num = num*rhs.den - rhs.num*den;
        den *= rhs.den;
        reduce();
        return *this;
    }
    Fraction& operator*=(const Fraction& rhs) {
        num *= rhs.num;
        den *= rhs.den;
        reduce();
        return *this;
    }
    Fraction& operator/=(const Fraction& rhs) {
        num *= rhs.den;
        den *= rhs.num;
        reduce();
        return *this;
    }
    Fraction operator-() const { return Fraction(-num, den); }
    Fraction operator+(const Fraction& rhs) const { return Fraction(*this) += rhs; }
    Fraction operator-(const Fraction& rhs) const { return Fraction(*this) -= rhs; }
    Fraction operator*(const Fraction& rhs) const { return Fraction(*this) *= rhs; }
    Fraction operator/(const Fraction& rhs) const { return Fraction(*this) /= rhs; }
    bool operator==(const Fraction& rhs) const { return num*rhs.den == rhs.num*den; }
    bool operator!=(const Fraction& rhs) const { return !(*this == rhs); }
    bool operator<(const Fraction& rhs) const { return num*rhs.den < rhs.num*den; };
    bool operator>(const Fraction& rhs) const { return num*rhs.den > rhs.num*den; };
    bool operator<=(const Fraction& rhs) const { return !(*this > rhs); };
    bool operator>=(const Fraction& rhs) const { return !(*this < rhs); };
    friend ostream &operator<<(ostream& os, const Fraction& p) { return os << p.num << "/" << p.den; }
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);

    while (true) {
        int W, H, N;
        cin >> W >> H >> N;
        if (W == 0) break;
        vector<Vec> pts(2*N);
        for (auto& x : pts) cin >> x;
        sort(all(pts), [&](auto& p, auto& q) {
            return p.real() < q.real();
        });
        pts.insert(pts.begin(), Vec(0, 0));
        pts.insert(pts.begin()+1, Vec(0, H));
        pts.push_back(Vec(W, 0));
        pts.push_back(Vec(W, H));
        vector<Fraction<int>> slopes;
        rep(i,0,pts.size()) rep(j,i+1,pts.size()) {
            if (pts[i].real() == pts[j].real()) continue;
            Fraction<int> slope(pts[j].imag() - pts[i].imag(), pts[j].real() - pts[i].real());
            if (slope < Fraction(-H, W) || Fraction(H, W) < slope) continue;
            slopes.push_back(slope);
        }
        sort(all(slopes));
        slopes.erase(unique(all(slopes)), slopes.end());
        reverse(all(slopes));


        auto calc = [&](int n) {
            double l1 = -1, r1 = -1;
            double ans = 0;
            for (auto& m : slopes) {
                vector<double> ys;
                rep(i,2,pts.size()-2) {
                    ys.push_back(1.0*m.num/m.den*(-pts[i].real()) + pts[i].imag());
                }
                sort(all(ys));
                double l2 = ys[n];
                double r2 = l2 + 1.0*m.num/m.den*W;
                if (max(l2, r2) > H) {
                    double d = max(l2, r2) - H;
                    l2 -= d;
                    r2 -= d;
                }
                if (min(l2, r2) < -eps) {
                    continue;
                }
                if (l1 >= -eps && l1+eps < l2) {
                    ans += r1*(l2-l1) + l1*(r1-r2) - (r1-r2)*(l1+l2)/2;
                }
                l1 = l2;
                r1 = r2;
            }
            ans /= H*H;
            return ans;
        };

        cout << calc(N) - calc(N-1) << "\n";
    }
}
