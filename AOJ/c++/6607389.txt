#include <bits/stdc++.h>
#define rep(i, n) for (int i = 0; i < (int)(n); ++i)
using namespace std;
using ull = unsigned long long;
using ll = long long;
using Graph = vector<vector<int>>;
const int INF = INT_MAX;
const ll LLINF = LONG_LONG_MAX;
const ull ULLINF = ULLONG_MAX;
template <class T>
string join(const vector<T>& v, const string& delim) {
  string s = to_string(v[0]);

  for (int i = 1; i < v.size(); ++i) s += delim + to_string(v[i]);

  return s;
}
template <class T>
void join_out(const vector<T>& v, const char* delim) {
  cout << v[0];

  for (int i = 1; i < v.size(); ++i) cout << delim << v[i];

  cout << '\n';
}

struct Node {
  int key;
  Node *next, *prev;
};
Node* nil;
void init() {
  nil = (Node*)malloc(sizeof(Node));
  nil->next = nil;
  nil->prev = nil;
}
void insertKey(int key) {
  Node* node = (Node*)malloc(sizeof(Node));
  node->key = key;
  node->next = nil->next;
  nil->next->prev = node;
  nil->next = node;
  node->prev = nil;
}
Node* searchNode(int key) {
  Node* cur = nil->next;
  while (cur->next != nil && cur->key != key) {
    cur = cur->next;
  }
  return cur;
}
void deleteNode(Node* target) {
  if (target == nil) return;
  target->prev->next = target->next;
  target->next->prev = target->prev;
  free(target);
}
void deleteFirst() { deleteNode(nil->next); }
void deleteLast() { deleteNode(nil->prev); }
void deleteKey(int key) { deleteNode(searchNode(key)); }

int main() {
  init();
  int n;
  cin >> n;
  rep(i, n) {
    char command[20];
    int x;
    scanf("%s%d", command, &x);

    if (command[0] == 'i') {
      insertKey(x);
    } else if (command[0] == 'd') {
      if (command[6] == 'F') {
        deleteFirst();
      } else if (command[6] == 'L') {
        deleteLast();
      } else {
        deleteKey(x);
      }
    }
  }

  Node* cur = nil;
  if (cur->next != nil) {
    cur = cur->next;
    cout << cur->key;
  }
  while (cur->next != nil) {
    cur = cur->next;
    cout << " " << cur->key;
  }
}
