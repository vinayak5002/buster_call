#include <bits/stdc++.h>
using namespace std;
using vi = vector<int64_t>;
using vii = vector<vi>;
using pii = pair<int64_t, int64_t>;

#define rep(i, n) for (int64_t i = 0; i < (int64_t)(n); i++)
#define all(v) v.begin(), v.end()

const int64_t inf = 1e18;

// 以下可変

template <typename T>
void upgrade(T &LEFT, const T &RIGHT)
{
    if (LEFT < RIGHT)
        LEFT = RIGHT;

    return;
}

template <typename T>
void downgrade(T &LEFT, const T &RIGHT)
{
    if (LEFT > RIGHT)
        LEFT = RIGHT;

    return;
}

void DFS(int64_t now, vii &fml, vi &distance, vi &euler){
    euler.push_back(now);
    for (auto next : fml[now])
    {
        if(distance[next] != -1){
            continue;
        }
        distance[next] = distance[now] + 1;
        DFS(next, fml, distance, euler);
        euler.push_back(now);
    }
    
    return;
}

/////////////////////////////////////////////////////////////
int main()
{
    int64_t N;
    cin >> N;

    vii fml(N, vi(0));

    rep(i, N){
        int64_t Ki;
        cin >> Ki;
        fml[i] = vi(Ki, 0);
        rep(j, Ki){
            cin >> fml[i][j];
        }
    }

    vi dis_f0(N, -1);
    vi euler(0);

    dis_f0[0] = 0;
    DFS(0, fml, dis_f0, euler);

    int64_t Q;
    cin >> Q;

    rep(i, Q){
        int Ui, Vi;
        cin >> Ui >> Vi;
        int64_t ans = Ui;
        rep(j, euler.size())
        {
            if (euler[j] == Ui){
                for (int64_t k = j; k < euler.size(); k++)
                {
                    if (dis_f0[ans] > dis_f0[euler[k]])
                    {
                        ans = euler[k];
                    }
                    if(euler[k] == Vi)
                    {
                        break;
                    }
                }
                cout << ans << endl;
                break;
            }
            if (euler[j] == Vi)
            {
                for (int64_t k = j; k < euler.size(); k++)
                {
                    if (dis_f0[ans] > dis_f0[euler[k]])
                    {
                        ans = euler[k];
                    }
                    if (euler[k] == Ui)
                    {
                        break;
                    }
                }
                cout << ans << endl;
                break;
            }
        }
    }

    return 0;
}

