#line 1 "solve/main.cpp"
#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <chrono>
#include <cmath>
#include <complex>
#include <cstdint>
#include <cstdlib>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <type_traits>
#include <unordered_map>
#include <utility>
#include <vector>

/* template start */

#line 2 "lib/utility/type_alias.hpp"

#line 4 "lib/utility/type_alias.hpp"

using u64 = std::uint64_t;
using u32 = std::uint32_t;
using u16 = std::uint16_t;
using u8 = std::uint8_t;

using i64 = std::int64_t;
using i32 = std::int32_t;
using i16 = std::int16_t;
using i8 = std::int8_t;

using usize = std::size_t;
using isize = std::ptrdiff_t;

constexpr i64 operator"" _i64(unsigned long long num) { return i64(num); }

constexpr u64 operator"" _u64(unsigned long long num) { return u64(num); }
#line 33 "solve/main.cpp"

#define rep(i, a, b) for (i64 i = (a); (i) < (b); (i)++)
#define all(i) i.begin(), i.end()

#ifdef LOCAL
#define debug(...)                                                    \
  std::cerr << "LINE: " << __LINE__ << "  [" << #__VA_ARGS__ << "]:", \
      debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

void debug_out() { std::cerr << std::endl; }

template <typename Head, typename... Tail>
void debug_out(Head h, Tail... t) {
  std::cerr << " " << h;
  if (sizeof...(t) > 0) std::cerr << " :";
  debug_out(t...);
}

template <typename T1, typename T2>
std::ostream& operator<<(std::ostream& os, std::pair<T1, T2> pa) {
  return os << pa.first << " " << pa.second;
}

template <typename T>
std::ostream& operator<<(std::ostream& os, std::vector<T> vec) {
  for (std::size_t i = 0; i < vec.size(); i++)
    os << vec[i] << (i + 1 == vec.size() ? "" : " ");
  return os;
}

template <typename T1, typename T2>
inline bool chmax(T1& a, T2 b) {
  return a < b && (a = b, true);
}

template <typename T1, typename T2>
inline bool chmin(T1& a, T2 b) {
  return a > b && (a = b, true);
}

template <typename Num, typename Func = std::multiplies<Num>>
constexpr Num mypow(Num a, u64 b, Num id = 1, Func mul = Func()) {
  if (b == 0) return id;
  Num x = id;
  while (b > 0) {
    if (b & 1) x = mul(x, a);
    a = mul(a, a);
    b >>= 1;
  }
  return x;
}

/* template end */

#line 2 "lib/utility/modint.hpp"

/*
  author:noshi91
  reference:https://noshi91.hatenablog.com/entry/2019/03/31/174006
            https://github.com/noshi91/Library/blob/master/other/modint.cpp

  1つめのmodintにoperator==,!=を追加したものです

  thx @noshi91!!
*/

#line 16 "lib/utility/modint.hpp"

template <u64 Modulus>
class modint {

 public:
  constexpr static u64 mod = Modulus;
  u64 a;

  constexpr modint(const u64 x = 0) noexcept : a(x % Modulus) {}
  constexpr u64 &value() noexcept { return a; }
  constexpr const u64 &value() const noexcept { return a; }
  constexpr bool operator==(const modint rhs) const noexcept {
    return a == rhs.a;
  }
  constexpr bool operator!=(const modint rhs) const noexcept {
    return !(*this == rhs);
  }
  constexpr modint operator+(const modint rhs) const noexcept {
    return modint(*this) += rhs;
  }
  constexpr modint operator-(const modint rhs) const noexcept {
    return modint(*this) -= rhs;
  }
  constexpr modint operator*(const modint rhs) const noexcept {
    return modint(*this) *= rhs;
  }
  constexpr modint operator/(const modint rhs) const noexcept {
    return modint(*this) /= rhs;
  }
  constexpr modint &operator+=(const modint rhs) noexcept {
    a += rhs.a;
    if (a >= Modulus) {
      a -= Modulus;
    }
    return *this;
  }
  constexpr modint &operator-=(const modint rhs) noexcept {
    if (a < rhs.a) {
      a += Modulus;
    }
    a -= rhs.a;
    return *this;
  }
  constexpr modint &operator*=(const modint rhs) noexcept {
    a = a * rhs.a % Modulus;
    return *this;
  }
  constexpr modint &operator/=(modint rhs) noexcept {
    u64 exp = Modulus - 2;
    while (exp) {
      if (exp % 2) {
        *this *= rhs;
      }
      rhs *= rhs;
      exp /= 2;
    }
    return *this;
  }
};

template <u64 MOD>
std::ostream& operator<<(std::ostream& os, modint<MOD> a) {
  return os << a.value();
}
#line 91 "solve/main.cpp"

constexpr u64 MOD = 998244353;
using mint = modint<MOD>;

#line 2 "lib/math/FactorialTable.hpp"

#line 6 "lib/math/FactorialTable.hpp"

#line 8 "lib/math/FactorialTable.hpp"

template <std::uint_fast64_t MOD>
class Factorial {
 public:
  using mint = modint<MOD>;
  using size_t = std::size_t;

 private:
  std::size_t n;
  std::vector<mint> factorial, factorial_inv;

 public:
  Factorial(std::size_t n_) :n(n_), factorial(n + 1), factorial_inv(n + 1) {
    factorial[0] = 1;
    for (size_t i = 1; i < n + 1; i++) factorial[i] = factorial[i - 1] * i;
    factorial_inv[n] = mint(1) / factorial[n];
    for (size_t i = n; i > 0; i--) factorial_inv[i - 1] = factorial_inv[i] * i;
  }

  mint fact(size_t pos) const {
    assert(0 <= pos && pos <= n);
    return factorial[pos];
  }
  mint fact_inv(size_t pos) const {
    assert(0 <= pos && pos <= n);
    return factorial_inv[pos];
  }
  mint inv(size_t pos)const{
    assert(0 < pos && pos <= n);
    return factorial_inv[pos] * factorial[pos-1];
  }
  mint binom(size_t ns, size_t k) const {
    assert(0 <= ns && ns <= n);
    assert(0 <= k && k <= ns);
    return fact(ns) * fact_inv(k) * fact_inv(ns - k);
  }
};
#line 96 "solve/main.cpp"

Factorial<MOD> fact(1010);

mint sum_pown(uint s,uint n){
  std::vector<mint> sum_n(n+1);
  sum_n[0] = s;
  sum_n[1] = mint(s+1) * s /2;

  rep(i,2,n+1){
    mint sum = mypow(mint(s+1),i+1) - 1;
    rep(k,0,i) sum -= fact.binom(i+1,k)*sum_n[k];

    sum_n[i] = sum / (i+1);
  }

  return sum_n[n];
}

int main() {
  std::cin.tie(nullptr);
  std::ios::sync_with_stdio(false);

  i64 n,s;
  std::cin>>n>>s;

  mint ans = ( mypow(mint(s+1),n) - mypow(mint(s+1),n-1) ) / 2;

  if(s%2 == 0){
    ans += mypow(mint(2),n) * sum_pown(s/2,n-1) - sum_pown(s,n-1);
  }else{
    ans += sum_pown(s,n-1) - mypow(mint(2),n) * sum_pown(s/2,n-1);
  }

  std::cout<<ans.value()<<"\n";

  return 0;
}

