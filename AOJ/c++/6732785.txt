#include <bits/stdc++.h>
using namespace std;
using pii = pair<int, int>;
using pdd = pair<long double, long double>;

pii a, b;
pdd vec;

inline pdd f(long double v) {
    return {a.first + vec.first * v, a.second + vec.second * v};
}

inline long double get(pdd p, pdd q) {
    return hypot(q.first - p.first, q.second - p.second);
}


pdd solve(int y, int x) {
    long double low = -10.0, high = 10.0;
    for (int i = 0 ; i < 1000 ; i++) {
        long double c1 = (low * 2 + high) / 3;
        long double c2 = (low + high * 2) / 3;
        
        pdd v1 = f(c1), v2 = f(c2);
        if (get(v1, {x, y}) > get(v2, {x, y})) low = c1;
        else high = c2;
    }

    return f(low);
}

int main() {
    cin >> a.first >> a.second >> b.first >> b.second;
    vec = {b.first - a.first, b.second - a.second};

    cout << fixed << setprecision(10);
    int q; cin >> q;
    for (int _ = 0 ; _ < q ; _++) {
        int x, y; cin >> x >> y;
        auto [gx, gy] = solve(y, x);
        cout << gx << ' ' << gy << endl;
    }
}

