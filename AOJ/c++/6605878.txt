#include<bits/stdc++.h>
using namespace std;
int main(){
    int n, q;
    cin >> n;
    vector<int> a(n);
    for(auto&&e:a) cin >> e;
    cin >> q;
    vector<int> b(q);
    for(auto&&e:b) cin >> e;

    
    int ans = 0;
    for(auto&&e:b){
        int ok = -1, ng = n; // e 以下の値を持つindexならok。[0, ok], [ng, n)が確定済み領域。
        while(ng -ok > 1){ // (ok, ng)が未確定で、これが空集合になるまで回す。
            int mid = (ng + ok) / 2;
            if(a[mid] <= e) ok = mid; // midがok側に含まれることが確定
            else ng = mid; // midがng側に含まれることが確定
        }
        assert(ok + 1 == ng);
        // ok がe以下の値を持つ最大のindexを持つようになる。(okは-1である可能性があるので注意)
        // よって、a[ok] == eのみを確認すればよい。(aはsortedなので) 
        ans += ok != -1 && a[ok] == e;
        // 今回の問題ではSTLを利用して、以下のように解ける。
        // ans += binary_search(a.begin(), a.end(), e);
        // また、ngはupper_boundと呼ばれる値になっており、STLを用いて以下の関係が成立
        // ng == upper_bound(a.begin(), a.end(), e) - a.begin();
        // lower_bound, upper_boundについては自分で調べてみることをおすすめします。
        // 今回のような配列を用いる問題では、STLを用いて解けることがほとんどだが、
        // 配列が使われない整数全体から解を絞るような問題では自分で二分探索を書かないといけないので練習しておこう
    }
    cout << ans << endl;
}


