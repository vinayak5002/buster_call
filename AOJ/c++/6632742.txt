#include<stdio.h>

#define MAX 100005
#define NIL -1

typedef struct 
{
	int parent;
	int left;
	int right;
} Node;

Node T[MAX];
int n, D[MAX], H[MAX];

void setDepth(int u, int p)
{   
	if(u == NIL) return;
	D[u] = p;
	if(T[u].right != NIL)
	{
		setDepth(T[u].right, p+1);
	}
	if(T[u].left != NIL)
	{
		setDepth(T[u].left, p+1);
	}
}

int max(int h1, int h2)
{
	if(h1 > h2) return h1;
	else return h2;
}

int setHeight(int u)
{
	int h1, h2;
	
	h1 = h2 = 0;

	if(T[u].left != NIL)
	{
		h1 = setHeight(T[u].left) + 1;
	}
		if(T[u].right != NIL)
	{
		h2 = setHeight(T[u].right) + 1;
	}
	
	return H[u] = max(h1, h2);
}

int getSibling(int u)
{
	if(T[u].parent == NIL) return NIL;
	if(T[T[u].parent].left != u && T[T[u].parent].left != NIL)
	{
		return T[T[u].parent].left;
	}
	if(T[T[u].parent].right != u && T[T[u].parent].right != NIL)
	{
		return T[T[u].parent].right;
	}
	
	return NIL;
}
	
int construction(int v, int l, int r)
{
    T[v].left = l;
	T[v].right = r;
	if(l != NIL) T[l].parent = v;
	if(r != NIL) T[r].parent = v;
}

void print(int u)
{
	int deg = 0;
	printf("node %d: ", u);
	printf("parent =  %d, ", T[u].parent);
	printf("sibling =  %d, ", getSibling(u));
	
	if(T[u].left != NIL) deg++;
	if(T[u].right != NIL) deg++;
	
	printf("degree =  %d, ", deg);
	printf("depth = %d, ", D[u]);
	printf("height = %d, ", H[u]);
	
	if(T[u].parent == NIL) 
	{ 
		printf("root\n");
	}
	else if(T[u].left == NIL && T[u].right == NIL) 	
	{
		printf("leaf\n");
	}
	else
	{
		printf("internal node\n");
	}
}


int main(void)
{
	int i, v, l, r, root;
	
	scanf("%d", &n);
	
	for(i = 0; i < n; i++)
	{
		T[i].parent = T[i].left = T[i].right = NIL;
	}
	
	for(i = 0; i < n; i++)
	{
		scanf("%d %d %d", &v, &l, &r);
		construction(v,l,r);
	}
	
	for(i = 0; i < n; i++)
	{
		if(T[i].parent == NIL)
		{
			root = i;
		}
	}
	
	setDepth(root,0);
	setHeight(root);
	
	for(i = 0; i < n; i++)
	{
		print(i);
	}
	
	return 0;
}



