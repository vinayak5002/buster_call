#include <iostream>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <list>
#include <iterator>
#include <cassert>
#include <numeric>
#include <functional>
#include <ctime>
#include <bitset>
#pragma warning(disable:4996) 

//#define ATCODER
#ifdef ATCODER
#include <atcoder/all>
#endif

typedef long long ll;
typedef unsigned long long ull;
#define LINF  9223300000000000000
#define LINF2 1223300000000000000
#define LINF3 1000000000000
#define INF 2140000000
const long long MOD = 1000000007;
//const long long MOD = 998244353;

using namespace std;
#ifdef ATCODER
using namespace atcoder;
#endif


void solve()
{
    int n, m, r;
    scanf("%d%d%d", &n, &m, &r);
    
    vector<int> dist(n, INF);
    vector<vector<pair<int,int>>> g(n);    // to, w
    for (int i = 0; i < m; i++) {
        int s, t, w;
        scanf("%d%d%d", &s, &t, &w);
        g[s].push_back(make_pair(t,w));
    }
    ll ans = 0;
    set<pair<int, int>> z;
    vector<int> vis(n);
    queue<int> que;
    que.push(r);
    while ( 1 ) {
        while(!que.empty()) {
            int tmp = que.front();
            que.pop();
            vis[tmp] = 1;
            z.erase(make_pair(dist[tmp], tmp));
            for (int i = 0; i < (int)g[tmp].size(); i++) {
                int to = g[tmp][i].first;
                int w0 = g[tmp][i].second;
                if (vis[to]) continue;
                if (dist[to] > w0) {
                    z.erase(make_pair(dist[to], to));
                    dist[to] = w0;
                    z.insert(make_pair(dist[to], to));
                }
            }
        }
        if (z.empty()) {
            break;
        }
        auto it = z.begin();
        int w0 = it->first;
        int to = it->second;
        if (vis[to] == 0) {
            que.push(to);
            ans += w0;
        }
        z.erase(*it);
    }
    printf("%lld\n", ans);

    return;
}

int main()
{
#if 1
    solve();
#else
    int T, t;
    scanf("%d", &T);
    for (t = 0; t < T; t++) {
        //printf("Case #%d: ", t + 1);
        solve();
    }
#endif
    return 0;
}

