#include <iostream>
#include <vector>

using namespace std; 

class FloydWarshall {
  void run(){
    for(int k = 0; n > k; k++){
      for(int i = 0; n > i; i++){
        for(int j = 0; n > j; j++){
          if(dist[i][k] == MAX || dist[k][j] == MAX)continue;
          dist[i][j] = min(dist[i][j],dist[i][k]+dist[k][j]);
        }
      }
    }

  }

public:
  int n;
  long long MAX;
  vector<vector<long long>> dist;//MAX以上なら辺はなし
  FloydWarshall(int n_,int MAX = 2e9+1):n(n_),MAX(MAX),dist(n_,vector<long long>(n_,MAX)){
  	for(int i = 0; n > i; i++){
      dist[i][i] = 0;
    }
  }

  //双方向
  void push(int s,int v,int c){
    dist[s][v] = c;
    dist[v][s] = c;
  }
  void push_p(int s,int v,int c){
    dist[s][v] = c;
  }
  
  bool negative(){
    for(int i = 0; n > i; i++){
      if(dist[i][i] < 0)return true;
    }
    return false;
  }

  void build(){
    run();
  }

};
int main(){
  int v,e;cin>>v>>e;
  FloydWarshall A(v);
  for(int i = 0; e > i; i++){
    int x,y,c;cin>>x>>y>>c;
    A.push_p(x,y,c);
  }
  A.build();
  if(A.negative()){
    cout << "NEGATIVE CYCLE" << endl;
    return 0;
  }
  for(int i = 0; v > i; i++){
    for(int j = 0; v > j; j++){
      if(A.dist[i][j] == A.MAX){
        cout << "INF";
      }else{
        cout << A.dist[i][j];
      }
      if(j+1 != v)cout << " ";
    }
    cout << endl;
  }
}
