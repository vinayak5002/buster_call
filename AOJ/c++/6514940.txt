#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define LEN 50000

typedef struct pp{
	char name[100];
	int t;
}set;

set Q[LEN+1],P[LEN+1];
int head,tail,n;

void initialize();
int isEmpty();
int isFull();
void enqueue(set);
set dequeue();

int main(void){
	int g=0,c=0,i,q;
	set a,b;
	
	initialize();
	
	scanf("%d %d",&n,&q);
	
	for(i=1;i<=n;i++){
		scanf("%s %d",Q[i].name,&Q[i].t);
		b.t=Q[i].t;
		strcpy(b.name,Q[i].name);
		enqueue(b);
	}
	
	while(head != tail){
		a=dequeue();
		if(a.t <=q){
			g=g+a.t;
			strcpy(Q[c].name,a.name);
			Q[c].t=g;
			c++;
		}
		else{
			g=g+q;
			a.t=a.t-q;
			enqueue(a);
		}
	}
	
	for(i=0;i<n;i++){
		printf("%s %d\n",Q[i].name,Q[i].t);
	}
	
	return 0;	
	
}

void initialize(){
	head = tail = 0;
}

int isEmpty(){
	if(head == tail){
		return 0;
	}
	else{
		return 1;
	}
}

int isFull(){
	if(head == (tail+1)%LEN){
		return 0;
	}
	else{
		return 1;
	}
}

void enqueue(set x){
	int a=isFull();
	if(a==0){exit(0);}
	P[tail].t=x.t;
	strcpy(P[tail].name,x.name);
	if(tail+1 == LEN){head=0;}
	else{tail++;}
}

set dequeue(){
	set x;
	int a=isEmpty();
	if(a==0){exit(0);}
	x.t=P[head].t;
	strcpy(x.name,P[head].name);
	if(head+1==LEN){head=0;}
	else{head++;}
	
	return x;
}
