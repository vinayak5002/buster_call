#include <iostream>
#include <iomanip>
#include <string>
#include <vector>

using namespace std;
const int_fast64_t BASE = 1000000000LL;

vector<int> operator + (const vector<int>& A, const vector<int>& B)
{
	vector<int> C;
	int_fast64_t c = 0;
	int a = (int) A.size(), b = (int) B.size(), n = min(a, b);
	for (int i = 0; i < n; ++i, c /= BASE) C.push_back((c += A[i] + B[i]) % BASE);
	for (int i = n; i < a; ++i, c /= BASE) C.push_back((c += A[i]) % BASE);
	for (int i = n; i < b; ++i, c /= BASE) C.push_back((c += B[i]) % BASE);
	C.push_back(c);
	while (C.size() > 1 && C.back() == 0) C.pop_back();
	return C;
}

vector<int> operator - (const vector<int>& A, const vector<int>& B)
{
	vector<int> C;
	int_fast64_t c = 0;
	int a = (int) A.size(), b = (int) B.size();
	for (int i = 0; i < b; ++i, c = (c - C.back()) / BASE) {
		C.push_back(((c += A[i] - B[i]) + BASE) % BASE);
	}
	for (int i = b; i < a; ++i, c /= BASE) C.push_back((c += A[i]) % BASE);
	C.push_back(c);
	while (C.size() > 1 && C.back() == 0) C.pop_back();
	return C;
}

int comp(const vector<int>& A, const vector<int>& B)
{
	if (A.size() != B.size()) return A.size() - B.size();
	for (int i = (int) A.size() - 1; i >= 0; --i) if (A[i] != B[i]) return A[i] - B[i];
	return 0;
}

struct Int {
	vector<int> A;
	bool s;

	int conv(const string& S, int b, int e)
	{
		return b >= e || 1 - s >= e ? 0 : conv(S, b, e - 1) * 10 + S[e - 1] - '0';
	}

	Int(const Int&) = default;
	Int(int a = 0) : A(1, a), s(true) {}
	Int(bool _s, int n) : A(n, 0), s(_s) {}
	Int(string S) : s(S[0] != '-') {
		for (int n = (int) S.size(); n >= 1 - s; n -= 9) A.push_back(conv(S, n - 9, n));
		if (A.back() == 0) A.pop_back();
	}

	void p() const {
		if (A.empty() || A.size() == 1 && A[0] == 0) cout << 0 << endl; else {
			if (!s) cout << '-';
			auto p = A.crbegin();
			cout << *p;
			for (++p; p != A.crend(); ++p) cout << setw(9) << setfill('0') << *p;
			cout << endl;
		}
	}

	vector<int> mul(unsigned int t, int n) const {
		vector<int> C(n, 0);
		int_fast64_t c = 0;
		for (int i = 0; i < (int) A.size(); ++i, c /= BASE) C.push_back((c += A[i] * t) % BASE);
		C.push_back(c);
		return C;
	}

	Int operator / (const Int& a) const {
		Int Q(s == a.s, max(0, (int) (A.size() - a.A.size())) + 1), R(*this);
		while (comp(R.A, a.A) >= 0) {
			int n = R.A.size() - a.A.size(), t = R.A.back() / a.A.back();
			auto T = a.mul(t, n);
			if (comp(R.A, T) < 0 && n > 0) {
				--n;
				t = (R.A.back() * BASE + R.A[R.A.size() - 2]) / a.A.back();
				T = a.mul(t, n);
			}
			R.A = R.A - T;
			Q.A[n] = t;
		}
		return Q;
	}
};

int main()
{
	string A, B; cin >> A >> B;
	(Int(A) / Int(B)).p();
	return 0;
}

