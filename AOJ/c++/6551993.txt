#define _GLIBCXX_DEBUG

#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i++)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i++)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret;};
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret;};
template<typename T> using pq_inv = priority_queue<T, vector<T>, greater<T>>;


struct Bigraph{
    struct Edge{
        int rev, from, to, cap;
        Edge(int r, int f, int t, int c=1): rev(r), from(f), to(t), cap(c){};
    };
    int n, _s, _t;
    vector<vector<Edge>> node;
    set<int> set_L, set_R;

    // Bigraph(int n, int s, int t): n(n), node(n), _s(s), _t(t){};
    Bigraph(int n): n(n), node(n){};
    
    void add_edge(int from, int to, int cap=1){
        int idx_from = node[from].size();
        int idx_to = node[to].size();
        node[from].emplace_back(idx_to, from, to, cap);
        node[to].emplace_back(idx_from, to, from, 0);
    }
    
    void run_flow(Edge& e, int f){
        e.cap -= f;
        node[e.to][e.rev].cap += f;
    }
    
    int update_residual_graph(int v, int t, int f){
        if (v==t)  return f;
        visited[v]=1;
        for(auto&& e:node[v]){
            if(visited[e.to]==1)continue;
            if(e.cap==0)continue;
            int flow =  update_residual_graph(e.to, t, min(f,e.cap));
            if(flow==0)continue;
            run_flow(e, flow);
            return flow;
        }
        return 0;
    }
    
    vector<int> visited;
    int maximum_match(int s, int t){
        int res=0;
        while(true){
            visited.assign(node.size(), 0);
            int flow = update_residual_graph(s,t,INTMAX);
            if(flow==0) return res;
            res+=flow;
        }
        return 0;
    }
};

struct Solver{
    void solve(){
        int x,y,e;
        cin >> x >> y >> e;
        int n = x+y;
        Bigraph g(n+2);
        rep(i,e){
            int a,b;
            cin >> a >> b;
            b+=x;
            g.add_edge(a,b);
        }
        rep(i,x)g.add_edge(n,i);
        rep(i,y){
            g.add_edge(i+x,n+1);
        }
        int ans  = g.maximum_match(n, n+1);
        cout << ans << endl;
        
    };
};

int main() {
    std::cin.tie(nullptr);
    Solver solver;
    solver.solve();
    return 0;
}


