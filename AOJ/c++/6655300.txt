#include <iostream>
#include <algorithm>
#include <string.h>
using namespace std;
const int MAXN = 110;
int H, W;
char TGMAp[MAXN][MAXN];
bool TGVisited[MAXN][MAXN];
int TGmoveX[4] = { 0,0,1,-1 };
int TGmoveY[4] = { 1,-1,0,0 };
void DFS_TG(int x, int y,char ch) {
	TGVisited[x][y] = true;
	for (int i = 0; i < 4; ++i) {
		int tgnewX = x + TGmoveX[i];
		int tgnewY = y + TGmoveY[i];
		if (tgnewX >= 0 && tgnewX < H && tgnewY >= 0 && tgnewY < W && !TGVisited[tgnewX][tgnewY] && TGMAp[tgnewX][tgnewY] == ch) {
			DFS_TG(tgnewX, tgnewY,ch);
		}
	}
}
int main() {
	while (cin >> H >> W) {
		memset(TGVisited, false, sizeof(TGVisited));
		int TGKinds = 0;
		if(H == 0 && W == 0) break;
		for (int i = 0; i < H; ++i) {
			for (int j = 0; j < W; ++j) {
				cin >> TGMAp[i][j];
			}
		}
		for (int i = 0; i < H; ++i) {
			for (int j = 0; j < W; ++j) {
				if (!TGVisited[i][j]) {
					DFS_TG(i, j, TGMAp[i][j]);
					TGKinds++;
				}
			}
		}
		cout << TGKinds << endl;
	}
 
	return 0;
}
