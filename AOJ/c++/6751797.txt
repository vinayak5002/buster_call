#include<bits/stdc++.h>
using namespace std;
//#include<atcoder/all>
//using namespace atcoder;
using ll = long long;
int w,h;
vector<vector<char>> G;
int dp[60][30][2];
int dx[] = {2,1,1,0,0,0,-1,-1,-2},dy[] = {1,1,2,1,2,3,1,2,1};
const int INF = 1e9;

void solve(){
	for(int i = 0;i<60;i++){
		for(int j = 0;j<30;j++){
			for(int k = 0;k<2;k++){
				dp[i][j][k] = INF;
			}
		}
	}
	using TUP = tuple<int,int,int,int>;
	priority_queue<TUP,vector<TUP>,greater<>> PQ;
	for(int i =0;i<h;i++){
		for(int j = 0;j<w;j++){
			if(G[i][j] == 'S'){
				dp[i][j][0] = 0;
				PQ.emplace(0,i,j,0);
				dp[i][j][1] = 0;
				PQ.emplace(0,i,j,1);
			}
		}
	}
	while(PQ.size()){
		auto [dist,x,y,isr] = PQ.top();
		PQ.pop();
		if(dp[x][y][isr]!=dist)continue;
		for(int i = 0;i<9;i++){
			int nx = x + (isr?dx[i]:-dx[i]);
			int ny = y + (isr?dy[i]:-dy[i]);
			if(nx<0||nx>=h||ny<0||ny>=w)continue;
			if(G[nx][ny]=='X')continue;
			int ndist = dist;
			if('1'<=G[nx][ny]&&G[nx][ny]<='9'){
				ndist += G[nx][ny]-'0';
			}
			if(dp[nx][ny][!isr]>ndist){
				dp[nx][ny][!isr] = ndist;
				PQ.emplace(ndist,nx,ny,!isr);
			}
		}
	}
	int ans = INF;
	for(int i = 0;i<h;i++){
		for(int j = 0;j<w;j++){
			if(G[i][j]=='T'){
				ans = min(ans,dp[i][j][0]);
				ans = min(ans,dp[i][j][1]);
			}
		}
	}
	if(ans==INF)ans=-1;
	cout<<ans<<endl;
}

signed main(){
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	while(1){
		cin >> w >> h;
		if(w==0)break;
		G = vector<vector<char>>(h,vector<char>(w));
		for(int i = 0 ;i<h;i++){
			for(int j = 0;j<w;j++){
				cin >> G[i][j];
			}
		}
		solve();
	}
}

