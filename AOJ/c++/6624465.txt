#define _USE_MATH_DEFINES
#include<bits/stdc++.h>

using namespace std;
#define LP(I,S,G) for (long long int I = (S); I < (G); I++)
#define IN(X) 	for (int in = 0; in < X.size(); in++)cin >> X[in]
#define OUT(X) 	for (int in = 0; in < X.size(); in++)cout << X[in]<<" "
#define SORT(X) sort((X).begin(), (X).end())
#define CSORT(X,Y) sort(X.begin(), X.end(),Y)
#define COPY(X,Y) copy(X.begin(), X.end(), Y.begin())
#define ALL(X,Y) for (auto X = (Y).begin(); X != (Y).end(); X++)
#define FULL(a)  (a).begin(),(a).end()
#define BFS(Q,S) for(Q.push(S);Q.size()!=0;Q.pop())
typedef long long int ll;
typedef unsigned long long int ull;
long long int M = pow(10, 9) + 7;


int dx[] = { 0,-1,0,1 }, dy[] = { -1,0,1,0 };

ll MAX(ll A, ll B) { return ((A) > (B) ? (A) : (B)); }
ll MIN(ll A, ll B) { return ((A) < (B) ? (A) : (B)); }
long long int xor128() {
	static long long int x = 123456789, y = 362436069, z = 521288629, w = 88675123;
	long long int t = (x ^ (x << 11));
	x = y; y = z; z = w;
	return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
}

struct HashPair {
	//注意 constがいる
	template<class T1, class T2>
	size_t operator()(const pair<T1, T2> &p) const {
		//first分をハッシュ化する
		auto hash1 = hash<T1>{}(p.first);
		//second分をハッシュ化する
		auto hash2 = hash<T2>{}(p.second);
		//重複しないようにハッシュ処理
		size_t seed = 0;
		seed ^= hash1 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		seed ^= hash2 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		return seed;
	}
};
template<class I1, class I2>
istream& operator>>(istream& s, pair<I1, I2>& in) {
	s >> in.first >> in.second;
	return s;
}

ll solve(string& s,ll l,ll r,vector<ll>& pass) {
	vector<ll> val;
	if (s.size()==1) {
		return pass[s[0] - 'a'];
	}
	char op = s[l];
	ll now = l+1;
	while (now != r) {
		if (s[now] >= 'a'&&s[now] <= 'd') {
			val.push_back(pass[s[now] - 'a']);
			now++;
		}
		else {
			ll new_l = now+1, new_r = now + 1;
			ll cnt = 1;
			while (cnt != 0) {
				new_r++;
				if (s[new_r] == '[')cnt++;
				if (s[new_r] == ']')cnt--;
			}
			val.push_back(solve(s, new_l, new_r, pass));
			now = new_r + 1;
		}
	}
	ll ret;
	switch (op){
	case '+':
		ret = (val[0] | val[1]);
		break;
	case '*':
		ret = (val[0] & val[1]);
		break;
	case '^':
		ret = (val[0] ^ val[1]);
	}
	return ret;
}


int main() {
	while (1) {
		string s;
		vector<ll> t(4);
		cin >> s;
		if (s == ".")break;
		LP(i, 0, 4) {
			char c;
			cin >> c;
			t[i] = c - '0';
		}
		ll hash = solve(s, 1, s.size() - 1, t);
		ll ans = 0;
		LP(x, 0, 10000) {
			ll c = x;
			LP(i, 0, 4) {
				t[i] = c % 10;
				c /= 10;
			}
			ll cmp = solve(s, 1, s.size() - 1, t);
			if (hash == cmp)ans++;
		}
		cout << hash << " " << ans << "\n";

	}
	return 0;
}
