#include <iostream>

typedef struct {
    int id;
    int parent = -1;
    int left = -1;
    int right = -1;
} Node;

void load_nodes(int n, Node* nodes)
{
    int id, left, right;

    for (int i = 0 ; i < n ; ++i)
    {
        std::cin >> id >> left >> right;
        nodes[id].id = id;
        nodes[id].left = left;
        nodes[id].right = right;

        if (left != -1)
        {
            nodes[left].parent = id;
        }
        if (right != -1)
        {
            nodes[right].parent = id;
        }
    }

    return;
}

int find_root_id(int n, Node* nodes)
{
    for (int i = 0 ; i < n ; ++i)
    {
        if (nodes[i].parent == -1)
        {
            return i;
        }
    }

    return -1;
}

void print_preorder_id(Node* node, Node* nodes)
{
    std::cout << " " << node->id;

    if (node->left != -1)
    {
        print_preorder_id(&nodes[node->left], nodes);
    }
    
    if (node->right != -1)
    {
        print_preorder_id(&nodes[node->right], nodes);
    }

    return;
}

void print_preorder(int n, Node* nodes)
{
    int root_id = find_root_id(n, nodes);

    print_preorder_id(&nodes[root_id], nodes);

    std::cout << std::endl;

    return;
}

void print_inorder_id(Node* node, Node* nodes)
{
    if (node->left != -1)
    {
        print_inorder_id(&nodes[node->left], nodes);
    }
    
    std::cout << " " << node->id;

    if (node->right != -1)
    {
        print_inorder_id(&nodes[node->right], nodes);
    }

    return;
}

void print_inorder(int n, Node* nodes)
{
    int root_id = find_root_id(n, nodes);

    print_inorder_id(&nodes[root_id], nodes);

    std::cout << std::endl;

    return;
}

void print_postorder_id(Node* node, Node* nodes)
{
    if (node->left != -1)
    {
        print_postorder_id(&nodes[node->left], nodes);
    }
    
    if (node->right != -1)
    {
        print_postorder_id(&nodes[node->right], nodes);
    }

    std::cout << " " << node->id;

    return;
}

void print_postorder(int n, Node* nodes)
{
    int root_id = find_root_id(n, nodes);

    print_postorder_id(&nodes[root_id], nodes);

    std::cout << std::endl;

    return;
}

int main()
{
    int n;

    std::cin >> n;

    Node nodes[n];

    load_nodes(n, nodes);

    std::cout << "Preorder" << std::endl;
    print_preorder(n, nodes);
    std::cout << "Inorder" << std::endl;
    print_inorder(n, nodes);
    std::cout << "Postorder" << std::endl;
    print_postorder(n, nodes);

    return 0;
}
