#include <stdio.h>
#include <cmath>
#include <algorithm>
#include <cfloat>
#include <stack>
#include <queue>
#include <vector>
typedef long long int ll;
#define BIG_NUM 2000000000
#define MOD 1000000007
#define EPS 0.000001
#define long long ll ;
using namespace std;

#define NUM 2147483647

ll N;
ll* table;


class Range_Minimum_Query{
public:    


void init(ll first_N){
	while(N < first_N)N *= 2;
}

void update(ll loc,ll value){
	loc += N-1;

	table[loc] = value;

	if(N == 1)return;

	int parent = (loc-1)/2;

	while(true){
		table[parent] = min(table[2*parent+1],table[2*parent+2]);

		if(parent == 0)break;
		else{
			parent = (parent-1)/2;
		}
	}
}



ll query(ll search_left,ll search_right,ll node_id,ll node_left,ll node_right){

	if(search_right < node_left || search_left > node_right)return NUM;

	if(search_left <= node_left && search_right >= node_right){
		return table[node_id];
	}

	ll left_min = query(search_left,search_right,2*node_id+1,node_left,(node_left+node_right)/2);
	ll right_min = query(search_left,search_right,2*node_id+2,(node_left+node_right)/2+1,node_right);

	return min(left_min,right_min);
}

};

Range_Minimum_Query RMQ;

int main(){

	ll first_N,Q,command,left,right;
	table = new ll[1000000];
	N = 1;

	scanf("%d %d",&first_N,&Q);

	RMQ.init(first_N);

	for(ll i = 0; i <= 2*N-2; i++)table[i] = NUM;

	for(ll i = 0; i < Q; i++){
		scanf("%d %d %d",&command,&left,&right);

		if(command == 0){
			RMQ.update(left,right);
		}else{
			printf("%d\n",RMQ.query(left,right,0,0,N-1));
		}
	}

	return 0;
}

