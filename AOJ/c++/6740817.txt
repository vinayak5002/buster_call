#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#define _GLIBCXX_DEBUG
using namespace std;
using std::cout;
using std::cin;
using std::endl;
using ll=long long;
using ld=long double;
ll ILL=2167167167167167167;
const int INF=2100000000;
const ll mod=998244353;
#define rep(i,a) for (ll i=0;i<a;i++)
#define all(p) p.begin(),p.end()
template<class T> using _pq = priority_queue<T, vector<T>, greater<T>>;
template<class T> ll LB(vector<T> &v,T a){return lower_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> ll UB(vector<T> &v,T a){return upper_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> bool chmin(T &a,const T &b){if(a>b){a=b;return 1;}else return 0;}
template<class T> bool chmax(T &a,const T &b){if(a<b){a=b;return 1;}else return 0;}
template<class T> void So(vector<T> &v) {sort(v.begin(),v.end());}
template<class T> void Sore(vector<T> &v) {sort(v.begin(),v.end(),[](T x,T y){return x>y;});}
void yneos(bool a){if(a) cout<<"Yes\n"; else cout<<"No\n";}
template<class T> void vec_out(vector<T> &p){for(int i=0;i<(int)(p.size());i++){if(i) cout<<" ";cout<<p[i];}cout<<"\n";}


void solve();
// oddloop
int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	
	int t=1;
	//cin>>t;
	rep(i,t) solve();
}

void solve(){
	int N,M=5040,S=7;
	cin>>N;
	vector<int> D(N),A(N);
	rep(i,N) cin>>D[i];
	rep(i,N) cin>>A[i];
	vector<vector<int>> dp(N+1,vector<int>(M));
	vector<vector<int>> table(M,vector<int>(S));
	rep(i,7) table[0][i]=i;
	rep(i,M-1) table[i+1]=table[i],next_permutation(all(table[i+1]));
	auto f=[&](vector<int> &p)->int{
		vector<int> use(S);
		int X=M,ans=0;
		rep(i,S){
			X/=(S-i);
			rep(j,p[i]) if(use[j]==0) ans+=X;
			use[p[i]]=1;
		}
		return ans;
	};
	rep(i,N) rep(j,M){
		rep(k,S+1){
			vector<int> n_order;
			int ind,tmp=dp[i][j];
			rep(l,k){
				ind=i-1-table[j][l];
				if(ind>=0&&D[ind]+ind>=i) tmp+=A[ind];
				if(table[j][l]!=S-1) n_order.push_back(table[j][l]+1);
			}
			n_order.push_back(0);
			for(int l=k;l<S;l++){
				ind=i-1-table[j][l];
				if(ind>=0&&ind>=i-D[i]) tmp+=A[i];
				if(table[j][l]!=S-1) n_order.push_back(table[j][l]+1);
			}
			chmax(dp[i+1][f(n_order)],tmp);
		}
	}
	int ans=0;
	rep(i,M) chmax(ans,dp[N][i]);
	cout<<ans<<"\n";
}

