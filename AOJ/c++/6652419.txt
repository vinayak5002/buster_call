#include <iostream>
#include <vector>
#include <algorithm>

#include <complex>
#include <cmath>
#include <istream>
#include <ostream>

// base
namespace geometry {
  using namespace std;
  using real_number = long double;

  const real_number PI = acosl(-1);

  inline static real_number &eps() {
    static real_number EPS = 1e-10;
    return EPS;
  }

  static void set_eps(real_number EPS) {
    eps() = EPS;
  }

  inline int sign(real_number r) {
    set_eps(1e-10);
    if (r < -eps()) return -1;
    if (r > +eps()) return +1;
    return 0;
  }

  inline bool equals(real_number r1, real_number r2) {
    return sign(r1 - r2) == 0;
  }
}

// point
namespace geometry {
  using point = complex< real_number >;
  using points = vector< point >;

  istream &operator>>(istream &is, point &p) {
    real_number x, y;
    is >> x >> y;
    p = point(x, y);
    return is;
  }

  ostream &operator<<(ostream &os, const point &p) {
    return os << p.real() << " " << p.imag();
  }

  point operator*(const point &p, const real_number &k) {
    return point(p.real() * k, p.imag() * k);
  }

  point rotate(const real_number &theta, const point &p) {
    return point(cos(theta) * p.real() + sin(-theta) * p.imag(),
                 sin(theta) * p.real() + cos(-theta) * p.imag());
  }

  bool equals(const point &a, const point &b) {
    return equals(a.real(), b.real()) and equals(a.imag(), b.imag());
  }
}

using geometry::operator>>;
using geometry::operator<<;

// line 
namespace geometry {
  struct line {
    point a, b;

    line() = default;
    line(point a, point b) : a(a), b(b) {}
  };

  using lines = vector< line >;
}

// segment
namespace geometry {
  struct segment : line {
    segment() = default;
    using line::line;
  };

  using segments = vector< segment >;
}

// product
namespace geometry {
  real_number cross(const point &a, const point &b) {
    return a.real() * b.imag() - a.imag() * b.real();
  }

  real_number dot(const point &a, const point &b) {
    return a.real() * b.real() + a.imag() * b.imag();
  }
}

// ccw
namespace geometry {
  constexpr int COUNTER_CLOCKWISE = +1;
  constexpr int CLOCKWISE         = -1;
  constexpr int ONLINE_BACK       = +2; // c-a-b
  constexpr int ONLINE_FRONT      = -2; // a-b-c
  constexpr int ON_SEGMENT        =  0; // a-c-b
  int ccw(const point &a, point b, point c) {
    b = b - a, c = c - a;
    if (sign(cross(b, c)) == +1) return COUNTER_CLOCKWISE;
    if (sign(cross(b, c)) == -1) return CLOCKWISE;
    if (sign(dot(b, c)) == -1) return ONLINE_BACK;
    if (norm(b) < norm(c)) return ONLINE_FRONT;
    return ON_SEGMENT;
  }
}

// intersect
namespace geometry {
  bool is_intersect(const segment &s1, const segment &s2) {
    return ccw(s1.a, s1.b, s2.a) * ccw(s1.a, s1.b, s2.b) <= 0 &&
           ccw(s2.a, s2.b, s1.a) * ccw(s2.a, s2.b, s1.b) <= 0;
  }
}

namespace geometry {
  bool compare_x(const point &a, const point &b) {
    return !equals(a.real(), b.real()) ? a.real() < b.real() : a.imag() < b.imag();
  }

  bool compare_y(const point &a, const point &b) {
    return !equals(a.imag(), b.imag()) ? a.imag() < b.imag() : a.real() < b.real();
  }
}

// projection
namespace geometry {
  point projection(const line &l, const point &p) {
    real_number t = dot(p - l.a, l.a - l.b) / norm(l.a - l.b);
    return l.a + (l.a - l.b) * t;
  }
}

namespace geometry {
  real_number distance_sp(const segment &s, const point &p) {
    point pr = projection(s, p);
    if (ccw(s.a, s.b, pr) == 0) return abs(pr - p);
    return min(abs(s.a - p), abs(s.b - p));
  }
}

// cross point
namespace geometry {
  point cross_point_ll(const line &l1, const line &l2) {
    real_number a = cross(l1.b - l1.a, l2.b - l2.a);
    real_number b = cross(l1.b - l1.a, l1.b - l2.a);
    if (equals(a, 0) && equals(b, 0)) return l2.a;
    return l2.a + (l2.b - l2.a) * b / a;
  }
}

using namespace geometry;

void solve() {
  set_eps(1e-9);

  segment s;
  std::cin >> s.a >> s.b;

  int n;
  std::cin >> n;

  segments rs(n);
  std::vector< int > os(n), ls(n);
  for (int i = 0; i < n; i++) {
    std::cin >> rs[i].a >> rs[i].b >> os[i] >> ls[i];
  }

  using T = std::pair< point, bool >;
  std::vector< T > pts;
  for (int i = 0; i < n; i++) {
    if (!is_intersect(s, rs[i])) continue;

    point p = cross_point_ll(s, rs[i]);

    if (sign(distance_sp(s, p)) != 0) continue;
    if (sign(distance_sp(rs[i], p)) != 0) continue;

    pts.emplace_back(p, os[i] xor ls[i]);
  }

  auto comp = [](const T &a, const T &b) { return compare_x(a.first, b.first); };
  std::sort(pts.begin(), pts.end(), comp);

  int ans = 0;
  for (int i = 1; i < (int)pts.size(); i++) {
    if (pts[i].second != pts[i - 1].second) ans += 1;
  }

  std::cout << ans << std::endl;
}

int main() {
  int T;
  std::cin >> T;

  while (T--) {
    solve();
  }
}


