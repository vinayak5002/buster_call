#include "bits/stdc++.h"

#define REP(i,num) for(ll i=0;i<(num);++i)
#define FOR(i,c,num) for(ll (i)=(c);(i)<(num);++(i))
#define LOOP(i) while(i--)
#define ALL(c) c.begin(),c.end()
#define PRINTALL(c) for(auto pitr=c.begin();pitr!=c.end();++pitr){cout<<*pitr;if(next(pitr,1)!=c.end())cout<<' ';}cout<<endl;
#define PAIRCOMP(c,comp) [](const pair<ll,ll>& lhs,const pair<ll,ll>& rhs){return lhs.c comp rhs.c;}

using namespace std;
using ll = long long;
using ull = unsigned long long;
using vll = vector<ll>;
using vvll = vector<vector<ll>>;

constexpr ll atcoder_mod = 1e9+7;

template<typename T=ll>
T in(){ T x; cin >> x; return (x); }
template<typename T=ll,typename C=vector<T>>
C vecin(int N){ C x(N);REP(i,N){ x[i]=in<T>(); }return x; }
template<typename T=ll,size_t N>
array<T,N> arrin(){array<T,N> x;REP(i,N){ x[i]=in<T>(); }return x;}

void vout(){ cout << endl; }
template<typename Head,typename... Tail>
void vout(Head&& h,Tail&&... t){ cout << ' ' << h;vout(forward<Tail>(t)...); }
void out(){ cout << endl; }
template<typename Head,typename... Tail>
void out(Head&& h,Tail&&... t){ cout << h;vout(forward<Tail>(t)...); }

template<typename T>
bool chmax(T& a,T b){ if(a<b){ a=b;return true; }return false; }
template<typename T>
bool chmin(T& a,T b){ if(a>b){ a=b;return true; }return false; }

string string_add(const string& B,char C){
	if(B.empty()) return string({C});
	ll N=B.size();
	string res(B);

	bool finish=false;
	ll R=(C-'0');
	REP(i,N){
		ll X=(B[N-1-i]-'0')+R;
		if(X<=9){
			res[N-1-i] = ('0'+(char)X);
			finish = true;
			break;
		}
		R=X/10ll;
		X%=10ll;
		res[N-1-i] = ('0'+(char)X);
	}
	if(!finish){
		res.insert(res.begin(),'0'+(char)R);
	}
	return res;
}

string string_mul(const string& B,char C){
	if(B.empty()) return string({'0'});
	ll N=B.size();
	string res(B);

	ll R=0;
	REP(i,N){
		ll X=(B[N-1-i]-'0')*(C-'0')+R;
		R=X/10ll;
		X%=10ll;
		res[N-1-i] = ('0'+(char)X);
	}
	if(R){
		res.insert(res.begin(),'0'+(char)R);
	}
	return res;
}

string string_sub(const string& B,const string& C){
	string res(B);
	ll BN=B.size(),CN=C.size();

	REP(i,CN){
		ll X=(res[BN-1-i])-(C[CN-1-i]);
		if(X<0){
			ll v=i+1;
			while(v<BN){
				if(res[BN-1-v]!='0'){
					res[BN-1-v]--;
					break;
				}
				res[BN-1-v]='9';
				v++;
			}
			X+=10;
		}
		res[BN-1-i] = '0'+(char)X;
	}
	reverse(ALL(res));
	while(res.size()>1 && res.back()=='0'){
		res.pop_back();
	}
	reverse(ALL(res));
	return res;
}

int main(){
	cin.tie(0);
	ios::sync_with_stdio(false);
	cout<<fixed<<setprecision(10);

	ll A=in(),B=in();
	out((ll)ceil(B/(double)A));
	return 0;
}

