#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#define _GLIBCXX_DEBUG
using namespace std;
using std::cout;
using std::cin;
using std::endl;
using ll=long long;
using ld=long double;
ll ILL=2167167167167167167;
const int INF=2100000000;
const ll mod=1e9+9;
#define rep(i,a) for (ll i=0;i<a;i++)
#define all(p) p.begin(),p.end()
template<class T> using _pq = priority_queue<T, vector<T>, greater<T>>;
template<class T> ll LB(vector<T> &v,T a){return lower_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> ll UB(vector<T> &v,T a){return upper_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> bool chmin(T &a,const T &b){if(a>b){a=b;return 1;}else return 0;}
template<class T> bool chmax(T &a,const T &b){if(a<b){a=b;return 1;}else return 0;}
template<class T> void So(vector<T> &v) {sort(v.begin(),v.end());}
template<class T> void Sore(vector<T> &v) {sort(v.begin(),v.end(),[](T x,T y){return x>y;});}
void yneos(bool a){if(a) cout<<"Yes\n"; else cout<<"No\n";}
template<class T> void vec_out(vector<T> &p){for(int i=0;i<(int)(p.size());i++){if(i) cout<<" ";cout<<p[i];}cout<<"\n";}


void solve();
// oddloop
int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	solve();
}

void solve(){
	int N;
	cin>>N;
	vector<int> p(N),q(N),order_p(N),order_q(N);
	rep(i,N) cin>>p[i],order_p[i]=i;
	rep(i,N) cin>>q[i],order_q[i]=i;
	sort(all(order_p),[&](int l,int r){
		return p[l]<p[r];
	});
	sort(all(order_q),[&](int l,int r){
		return q[l]<q[r];
	});
	int l=0,r=N+1;
	while(r-l>1){
		int med=(l+r)/2;
		int J=0;
		rep(i,med){
			if(p[order_p[i]]>=q[order_q[N-med+i]]) J=1;
		}
		if(J) r=med;
		else l=med;
	}
	vector<int> ans(N);
	rep(i,N){
		ans[order_p[i]]=q[order_q[(N-l+i)%N]];
	}
	vec_out(ans);
}

