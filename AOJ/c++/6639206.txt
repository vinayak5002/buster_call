#define _USE_MATH_DEFINES
#include<iostream>
#include<iomanip>
#include<vector>
#include<string>
#include<algorithm>
#include<cmath>
#include<stack>
#include<queue>
#include<set>
#include<map>
#include<climits>
#include<bitset>
#include<unordered_map>
#include<unordered_set>
#include<random>
#include<list>
#include<functional>
using namespace std;
#define LP(I,S,G) for (long long int I = (S); I < (G); I++)
#define IN(X) 	for (int in = 0; in < X.size(); in++)cin >> X[in]
#define OUT(X) 	for (int in = 0; in < X.size(); in++)cout << X[in]<<" "
#define SORT(X) sort((X).begin(), (X).end())
#define CSORT(X,Y) sort(X.begin(), X.end(),Y)
#define COPY(X,Y) copy(X.begin(), X.end(), Y.begin())
#define ALL(X,Y) for (auto X = (Y).begin(); X != (Y).end(); X++)
#define FULL(a)  (a).begin(),(a).end()
#define BFS(Q,S) for(Q.push(S);Q.size()!=0;Q.pop())
typedef long long int ll;
typedef unsigned long long int ull;
long long int M = 998244353;


int dx[] = { 1,0,-1,0 }, dy[] = { 0,-1,0,1 };

ll MAX(ll A, ll B) { return ((A) > (B) ? (A) : (B)); }
ll MIN(ll A, ll B) { return ((A) < (B) ? (A) : (B)); }
long long int xor128() {
	static long long int x = 123456789, y = 362436069, z = 521288629, w = 88675123;
	long long int t = (x ^ (x << 11));
	x = y; y = z; z = w;
	return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
}

struct HashPair {
	//注意 constがいる
	template<class T1, class T2>
	size_t operator()(const pair<T1, T2> &p) const {
		//first分をハッシュ化する
		auto hash1 = hash<T1>{}(p.first);
		//second分をハッシュ化する
		auto hash2 = hash<T2>{}(p.second);
		//重複しないようにハッシュ処理
		size_t seed = 0;
		seed ^= hash1 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		seed ^= hash2 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		return seed;
	}
};
template<class I1, class I2>
istream& operator>>(istream& s, pair<I1, I2>& in) {
	s >> in.first >> in.second;
	return s;
}

ll solve(string& s, map<char, ll>& con, vector<ll>& t, ll now, ll n) {
	if (n - now == 1)return t[con[s[now]]];
	while(now != n) {
		if (s[now] == '(') {
			ll new_n = now;
			ll cnt = 1;
			while (cnt != 0) {
				new_n++;
				if (s[new_n] == '(')cnt++;
				if (s[new_n] == ')')cnt--;
			}
			ll lhs = solve(s,con,t, now + 1, new_n);

			if (n-new_n==1)return lhs;
			now = new_n + 1;
			char op = s[now];
			now++;
			ll rhs = solve(s,con,t, now, n);
			if (op == '<')return MIN(lhs, rhs);
			else return MAX(lhs, rhs);
		}
		else {
			ll lhs = t[con[s[now]]];
			now++;
			char op = s[now];
			now++;
			ll rhs = solve(s, con, t, now, n);
			if (op == '<')return MIN(lhs, rhs);
			else return MAX(lhs, rhs);
		}
	}
}

int main() {
	while (1) {
		ll n;
		cin >> n;
		if (n==0)break;
		string s;
		cin >> s;
		map<char, ll> con;
		string l, r;
		cin >> l >> r;
		ll ans = 0;
		LP(i, 0, n)con[s[i]] = i;
		vector<ll> t(s.size());
		LP(sel, 0, n) {
			t[sel] = 0;
			LP(x, 0, (1 << n)) {
				if((x&(1<<sel))!=0)continue;
				ll min_c = 0, max_c = 0;
				LP(i, 0, n) {
					if (i == sel)continue;
					if ((x&(1 << i)) != 0)t[i] = 1,max_c++;
					else t[i] = -1,min_c++;
				}
				if (solve(l, con, t, 0, l.size()) != 0)continue;
				ll o = solve(r, con, t, 0, r.size());
				if (o != 0)continue;
				ll add = 1;
				LP(i, 1, min_c+1)add *= i;
				LP(i, 1, max_c + 1)add *= i;
				ans += add;
			}
		}
		cout << ans << "\n";
	}
	return 0;
}
