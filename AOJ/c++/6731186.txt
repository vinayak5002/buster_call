#include <bits/stdc++.h>
//#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vd = vector<double>;
using vvd = vector<vd>;
using vvvd = vector<vvd>;
#define all(A) A.begin(),A.end()
#define ciN cin
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}


#define ss second.second
#define sf second.first
using paii = pair<int, int>;
//chmin必要
/*
有向木の最小全域木を求める.
O(|V|*|E|)らしい.知らんけど
*/
template<class T>
T Chu_Liu_Edmonds_algorithm(const vector<pair<T, paii>>& E, int v, int root = 0) {//E:{重み,{start,end}} //v:|V| //root:根

    vector<pair<T, int>> Vm(v, pair<T, int>(1e9, -1));
    vector<int> gr(v, 0);
    vector<bool> P(v, false), f(v, false);
    int cnt = 0;
    T res = 0;
    vector<pair<T, paii>> nE;

    for (auto e : E) {
        chmin(Vm[e.ss], { e.first, e.sf });
    }
    Vm[root] = { -1, -1 };

    rep(i, v) {
        if (f[i]) continue;
        vector<int> ch;
        int x = i;
        for (; x != -1 && !f[x];) {
            f[x] = 1;
            ch.push_back(x);
            x = Vm[x].second;
        }
        if (x == -1) {
            rep(j, ch.size()) {
                gr[ch[j]] = cnt;
                cnt++;
            }
        }
        else {
            bool Q = 0;
            for (long long j : ch) {
                gr[j] = cnt;
                if (j == x) {
                    P[cnt] = 1;
                    Q = 1;
                }
                if (!Q) cnt++;
            }
            if (Q) cnt++;
        }
    }
    if (cnt == v) {
        T ans = 1;
        rep(i, v)ans += Vm[i].first;
        //cout<<ans<<endl;
        return ans;
    }

    rep(i, v) {
        if (i != root && P[gr[i]]) res += Vm[i].first;
    }

    for (auto e : E) {
        int p = e.ss;
        int s = gr[e.sf];
        int t = gr[e.ss];
        if (s == t) continue;
        else if (P[t]) {
            nE.push_back({ e.first - Vm[p].first, { s, t } });
        }
        else {
            nE.push_back({ e.first, { s, t } });
        }
    }
    //cout<<res<<endl;
    return res + Chu_Liu_Edmonds_algorithm(nE, cnt, gr[root]);
}


int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    ll N, M, A, B, P, Q;
    cin >> N >> M >> A >> B >> P >> Q;
    ll an = M;
    if (A == 1 && B == 1) {
        ll d = (P + Q);

        ll D = M / d;
        if (D <= N) {
            chmin(an, abs(M - D * d));
        }
        D++;
        if (D <= N) {
            chmin(an, abs(M - D * d));
        }
        if (N <= 1e18 / d)chmin(an, abs(M - N * d));
        cout << an << endl;
        return 0;
    }

    vll D;
    ll a = 1, b = 1;
    while (1) {
        ll S = P * a + Q * b;
        if (S > 2 * M)break;
        D.push_back(S);
        if (a > 1e18 / A || b > 1e18 / B)break;
        a *= A;
        b *= B;
    }

    //cout<<D.size()<<endl;

    N = D.size();

    set<ll> S;

    rep(bit, (1 << N / 2)) {
        ll res = 0;
        rep(i, N / 2) {
            if (bit & (1 << i))res += D[i];
        }
        S.insert(res);
    }
    S.insert(2e18);
    ll Z = N - N / 2;

    rep(bit, (1 << Z)) {
        ll res = 0;
        rep(i, Z) {
            if (bit & (1 << i))res += D[i + (N / 2)];
        }
        if (res >= M) {
            chmin(an, res - M);
            continue;
        }
        auto re = S.upper_bound(M - res);
        chmin(an, abs(M - res - *re));
        re--;
        chmin(an, abs(M - res - *re));
    }

    cout << an << endl;

}

