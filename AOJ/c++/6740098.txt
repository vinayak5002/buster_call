#define _USE_MATH_DEFINES
#include<bits/stdc++.h>
#include<unordered_map>

using namespace std;
#define LP(I,S,G) for (long long int I = (S); I < (G); I++)
#define IN(X) 	for (int in = 0; in < X.size(); in++)cin >> X[in]
#define OUT(X) 	for (int in = 0; in < X.size(); in++)cout << X[in]<<" "
#define SORT(X) sort((X).begin(), (X).end())
#define CSORT(X,Y) sort(X.begin(), X.end(),Y)
#define COPY(X,Y) copy(X.begin(), X.end(), Y.begin())
#define ALL(X,Y) for (auto X = (Y).begin(); X != (Y).end(); X++)
#define FULL(a)  (a).begin(),(a).end()
#define BFS(Q,S) for(Q.push(S);Q.size()!=0;Q.pop())
typedef long long int ll;
typedef unsigned long long int ull;
long long int M = pow(10, 9) + 7;


int dx[] = { 0,-1,0,1 }, dy[] = { -1,0,1,0 };

ll MAX(ll A, ll B) { return ((A) > (B) ? (A) : (B)); }
ll MIN(ll A, ll B) { return ((A) < (B) ? (A) : (B)); }
long long int xor128() {
	static long long int x = 123456789, y = 362436069, z = 521288629, w = 88675123;
	long long int t = (x ^ (x << 11));
	x = y; y = z; z = w;
	return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
}

struct HashPair {
	//注意 constがいる
	template<class T1, class T2>
	size_t operator()(const pair<T1, T2> &p) const {
		//first分をハッシュ化する
		auto hash1 = hash<T1>{}(p.first);
		//second分をハッシュ化する
		auto hash2 = hash<T2>{}(p.second);
		//重複しないようにハッシュ処理
		size_t seed = 0;
		seed ^= hash1 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		seed ^= hash2 + 0x9e3779b9 + (seed << 6) + (seed >> 2);
		return seed;
	}
};
template<class I1, class I2>
istream& operator>>(istream& s, pair<I1, I2>& in) {
	s >> in.first >> in.second;
	return s;
}

int main() {
	while (1) {
		ll n, m, c, s, g;
		cin >> n >> m >> c >> s >> g;
		if (n == 0)break;
		vector<vector<vector<ll>>> t(c, vector<vector<ll>>(n, vector<ll>(n, LLONG_MAX)));
		LP(i, 0, m) {
			ll u, v, d, id;
			cin >> u >> v >> d >> id;
			u--, v--, id--;
			t[id][u][v] = MIN(t[id][u][v],d);
			t[id][v][u] = MIN(t[id][v][u],d);
		}
		LP(i, 0, c) {
			LP(z, 0, n) {
				LP(x, 0, n) {
					LP(y, 0, n) {
						if (x == y)continue;
						if (t[i][x][z] == LLONG_MAX || t[i][z][y] == LLONG_MAX)continue;
						t[i][x][y] = MIN(t[i][x][y], t[i][x][z] + t[i][z][y]);
					}
				}
			}
		}
		vector<vector<ll>> cost(c, vector<ll>(200 * 100 + 1, 0));
		vector<ll> p(c);
		IN(p);
		LP(x, 0, c) {
			ll now = 0;
			ll add = 0;
			vector<ll> point(p[x]-1);
			if (point.size() != 0)IN(point);
			ll size = point.size();
			cin >> add;
			LP(i, 1, 200 * 100 + 1) {
				if (now != size) {
					if (point[now] < i) {
						now++;
						cin >> add;
					}
				}
				cost[x][i] = cost[x][i - 1] + add;

			}
		}
		vector<vector<pair<ll,ll>>> g2(n);
		LP(i, 0, c) {
			LP(x, 0, n) {
				LP(y, 0, n) {
					if (t[i][x][y] != LLONG_MAX) {
						g2[x].push_back({ y,cost[i][t[i][x][y]] });
					}
				}
			}
		}
		s--, g--;
		vector<ll> ans(n, LLONG_MAX);
		ans[s] = 0;
		priority_queue<pair<ll, ll>,vector<pair<ll,ll>>,greater<pair<ll,ll>>> pq;
		pq.push({ 0,s });
		while (pq.size() != 0) {
			ll now = pq.top().second, tot = pq.top().first;
			pq.pop();
			if (ans[now] < tot)continue;
			ALL(next, g2[now]) {
				if (ans[next->first] > tot + next->second) {
					ans[next->first] = tot + next->second;
					pq.push({ ans[next->first],next->first });
				}
			}
		}
		if (ans[g] == LLONG_MAX)ans[g] = -1;
		cout << ans[g] << "\n";
	}
	return 0;
}

