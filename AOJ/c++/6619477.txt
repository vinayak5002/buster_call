#include <iostream>
#include <algorithm>
#define maxc 10000
#define maxr 10
int C, R, ans;
bool grid[maxr][maxc];
void init(){
	for(int r = 0; r < R; ++r)
		for(int c = 0; c < C; ++c)
			std::cin >> grid[r][c];
}
void dfs(int r){
	if(r == R){
		int ret = 0;
		for(int c = 0; c < C; ++c){
			int temp = 0;
			for(int r = 0; r < R; ++r){
				if(grid[r][c]) ++temp;
			}
			ret += std::max(temp, R - temp);
		}
		ans = std::max(ans, ret);
		return ;
	}
	dfs(r + 1);
	for(int c = 0; c < C; ++c){ grid[r][c] = !grid[r][c]; }
	dfs(r + 1);
	for(int c = 0; c < C; ++c){ grid[r][c] = !grid[r][c]; }
}
int main(int argc, char *argv[]){
	while((std::cin >> R >> C ) && C && R){
		init();
		ans = 0;
		dfs(0);
		std::cout << ans << std::endl;
	}
}
