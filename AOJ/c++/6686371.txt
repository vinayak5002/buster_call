#include <iostream>
using namespace std;

struct Edge
{
  int w = INT_MAX, to = -1, next = -1, prev = -1;
};

int N, coords[100000][2];
Edge edges[100000];
int start = 0;

long solve()
{
  long totalCost = 0;

  edges[0].w = 0;
  for (int i = 0; i < N; i++)
  {
    int v = -1;
    for (int j = start; j < N; j = edges[j].next)
    {
      if (v == -1 || edges[j].w < edges[v].w)
        v = j;
    }
    // for (int j = 0; j < N; j++) {
    // 	if (!visited[j] && (v == -1 || minCost[j].w < minCost[v].w))
    // 		v = j;
    // }

    // visited[v] = true;
    totalCost += edges[v].w;

    if (v == start)
      start = edges[v].next;
    else
      edges[edges[v].prev].next = edges[v].next;

    for (int to = start; to < N; to = edges[to].next)
    {
      int cost = max(abs(coords[v][0] - coords[to][0]), abs(coords[v][1] - coords[to][1]));
      if (cost < edges[to].w) {
        edges[to].w = cost;
        edges[to].to = v;
      }
    }
    // for (int to = 0; to < N; to++) {
    // 	if (visited[to])
    // 		continue;

    // 	int cost =
    // 		max(abs(coords[v][0] - coords[to][0]),
    // 			abs(coords[v][1] - coords[to][1]));
    // 	if (cost < minCost[to].w) {
    // 		minCost[to] = {cost, v};
    // 	}
    // }
  }

  return totalCost;
}

int main()
{
  ios::sync_with_stdio(false);
  cin.tie(0);

  cin >> N;
  for (int i = 0; i < N; i++)
  {
    cin >> coords[i][0] >> coords[i][1];
    edges[i].next = i + 1;
    edges[i].prev = i - 1;
  }
  cout << solve() << endl;

  return 0;
}

