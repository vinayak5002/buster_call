#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#define MAX 2000000000

struct node{
    int key;
    struct node *right;
    struct node *left;
    struct node *parent;
};

typedef struct node *Node;


// Node root;

Node Tree_insert(Node root,int num){
    Node x = root;
    Node y = NULL;
    Node z;
    z = malloc(sizeof(struct node));
    z->key = num;
    z->left= NULL;
    z->right = NULL;

    while(x != NULL){
        y = x;
        if(x->key < z->key){
            x = x->right;
        }else{
            x = x->left;
        }
    }
    z->parent = y;

    if(y==NULL){
        root = z;
    }else if(z->key < y->key){
        y->left = z;
    }else{
        y->right = z;
    }

    return root;

}
void inorder(Node aa){

    if(aa == NULL){
        return;
    }

    
    
    inorder(aa->left);
    printf(" %d",aa->key);
    inorder(aa->right);



}

void preorder(Node aa){

    if(aa == NULL){
        return;
    }

    
    printf(" %d",aa->key);
    preorder(aa->left);
    preorder(aa->right);

}



int main(){
    int i,j,k;
    int n;
    Node root =NULL;
    char com[30];
    int num;

    scanf("%d",&n);
    
    for(i=0;i<n;i++){
        scanf("%s",&com);
        if(com[0] == 'i'){
        scanf("%d",&num);
        root = Tree_insert(root,num);
        //printf("a%d",root->key);

        }else if(com[0] == 'p'){
            inorder(root);
            printf("\n");
            preorder(root);
            printf("\n");
        }
    }


    return 0;
}





