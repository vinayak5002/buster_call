#include <bits/stdc++.h>
#define rep(i,n) for(int i = 0; i < (int)(n); i++)
#define rrep(ri,n) for(int ri = (int)(n-1); ri >= 0; ri--)
#define rep2(i,x,n) for(int i = (int)(x); i < (int)(n); i++)
#define rrep2(ri,x,n) for(int ri = (int)(n-1); ri >= (int)(x); ri--)
#define repit(itr,x) for(auto itr = x.begin(); itr != x.end(); itr++)
#define rrepit(ritr,x) for(auto ritr = x.rbegin(); ritr != x.rend(); ritr++)
#define ALL(x) x.begin(), x.end()
using ll = long long;
using namespace std;

int main() {
while(1) {
  int h, w;
  cin >> w >> h;
  if(h == 0 && w == 0) break;
  vector<string> s(2*h-1);
  string tmp;
  getline(cin, tmp);
  rep(i,2*h-1) {
    getline(cin, s.at(i));
  }
  vector d(2*h-1, vector<int>(2*w-1, -1));
  queue<pair<int, int>> q;
  d.at(0).at(0) = 1;
  q.push({0, 0});
  int di[] = {1, 0, -1, 0}, dj[] = {0, 1, 0, -1};
  while(!q.empty()) {
    auto [i, j] = q.front(); q.pop();
    rep(k, 4) {
      int ni = i + di[k], nj = j + dj[k];
      if(ni < 0 || 2*h-1 <= ni || nj < 0 || 2*w-1 <= nj) continue;
      if(s.at(ni).at(nj) == '1') continue;
      ni += di[k]; nj += dj[k];
      if(d.at(ni).at(nj) != -1) continue;
      d.at(ni).at(nj) = d.at(i).at(j) + 1;
      q.push({ni, nj});
    }
  }
  int ans = d.back().back();
  if(ans == -1) ans = 0;
  cout << ans << endl;
}
  return 0;
}
