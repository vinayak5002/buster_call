#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define N_MAX 100000
#define Q_MAX 50000

int binary_search(int s[], int t, int n){
	int left=0, right=n-1;
	int mid;
	while(left <= right){
		mid = (left + right)/2; //midは配列の中央
		
		if(s[mid] == t){ //s[mid]がtと一致する場合
			return 1;
		}else if(t < s[mid]){ //s[mid]が大きい場合
			right = mid;
		}else{ //tが大きい場合
			left = mid+1;
		}
	}
	
	return 0;
}

int main(void)
{
	int n, q;
	char s[16]; //sはfgetsで入力から16文字(\n含む)を読み込む
	char tmp[11]; //sから区切り文字までを格納(int型に変換),10+1
	int s_int[N_MAX+1]; //入力をint型に変換して格納
	int t_int;
	int i=0, j=0, k=0;
	int end=1; //文字列の終端判定(読み込むまで1でループ)
	int count=0; //個数を数える変数
	
	for(i=0; i<sizeof(tmp); i++){ //tmpを\0で初期化
		tmp[i] = '\0';
	}
	
	fgets(s, sizeof(s), stdin);
	sscanf(s, "%d", &n);
	
	while(end){ //入力の1行全てを読んだらループ終了(end=0)
		
		i=0; //iはsの読み込む位置を示す
		fgets(s, sizeof(s), stdin);
		while(i < sizeof(s)){
			if(s[i] == ' '){ //区切り文字を見つけた時
				s_int[k++] = atoi(tmp); //tmpをint型に変換
				
				while(0 < j){ //j=0, tmpを\0で初期化
					tmp[j--] = '\0';
				}
				i++;
				
			}else if(s[i] == '\0' && k == n-1){ //区切りの無い最後の整数を受け取る
				s_int[k++] = atoi(tmp); //tmpをint型に変換
				
				while(0 < j){ //j=0, tmpを\0で初期化
					tmp[j--] = '\0';
				}
				end=0; //ループ終了
				break;
				
			}else{ //区切り文字でない時
				tmp[j++] = s[i++]; //tmpに入れる
			}
		}
	}
	
	fgets(s, sizeof(s), stdin);
	sscanf(s, "%d", &q);
	
	k=0;
	end=1;
	
	while(end){ //入力の1行すべて読み込んだら終了
		
		i=0;
		fgets(s, sizeof(s), stdin);
		while(i < sizeof(s)){
			if(s[i] == ' '){ //区切り文字を見つけた時
				t_int = atoi(tmp); //tmpをint型に変換
				
				if(binary_search(s_int, t_int, n)){
					count++;
				}
				
				while(0 < j){ //j=0, tmpを\0で初期化
					tmp[j--] = '\0';
				}
				i++; k++;
				
			}else if(s[i] == '\0' && k == q-1){ //区切りの無い最後の整数を受け取る
				t_int = atoi(tmp); //tmpをint型に変換
				if(binary_search(s_int, t_int, n)){
					count++;
				}
				
				while(0 < j){ //j=0, tmpを\0で初期化
					tmp[j--] = '\0';
				}
				end=0; //ループ終了
				break;
				
			}else{ //区切り文字でない時
				tmp[j++] = s[i++]; //tmpに入れる
			}
		}
	}
	
	printf("%d\n", count);
	
	return 0;
}
