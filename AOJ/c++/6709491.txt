#include <algorithm>
#include <cassert>
#include <climits>
#include <cmath>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <random>
#include <complex>
#include <bitset>
#include <iomanip>
#include <memory>
#include <functional>

#define rep(i, n, s) for (int i = (s); i < int(n); i++)
#define per(i, n, s) for (int i = (n) - 1; i >= int(s); i--)
#define MM << " " <<
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)

template <class T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <class T>
using MaxHeap = std::priority_queue<T>;

using ll = long long;
using Pii = std::pair<int, int>;
using Pll = std::pair<ll, ll>;
using Pdd = std::pair<double, double>;

template <class T>
bool chmin(T &a, const T b) {
    if (b < a) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
bool chmax(T &a, const T b) {
    if (a < b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
void vdeb(const std::vector<T> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        if (i == n - 1)
            std::cout << da[i];
        else
            std::cout << da[i] << " ";
    }
    std::cout << std::endl;
}
template<class T>
void vdeb(const std::vector<std::vector<T>> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        // std::cout << i << " : ";
        vdeb(da[i]);
    }
    std::cout << std::endl;
}
using namespace std;

string::const_iterator itr;

struct Node {
    int x;
    char op;
    vector<Pll> dp;
    vector<unique_ptr<Node>> child;
    Node() : x(-1) {
        fill(all(child), nullptr);
    }
    void deb(int depth = 0) {
        rep(i,depth,0) cout << "    ";
        if(x == -1) {
            cout << op << endl;
            for(auto &i: child) {
                i->deb(depth+1);
            }
        } else {
            cout << x << endl;
        }
    }
    ll calc() {
        ll ans = LLONG_MIN;
        if(x != -1) return ans;
        assert(dp.size() == 3);
        if(op == '+') {
            ans = dp[0].first + dp[1].first + dp[2].first;
        }
        rep(i,3,0) {
            if(op == '-') {
                chmax(ans, dp[i].first - dp[(i+1)%3].second - dp[(i+2)%3].second);
            }
        }
        for(auto &i : child) chmax(ans, i->calc());
        return ans;
    }
};

using Pt = unique_ptr<Node>;

Pt term();
Pt exp();
Pt digit();

char peek() {
    return *itr;
}

char read() {
    char ret = *itr;
    ++itr;
    return ret;
}

Pt exp() {
    Pt ret = term();
    char op = peek();
    assert(op == '+' || op == '-');
    Pt tmp = make_unique<Node>();
    tmp->op = op;
    tmp->child.emplace_back(move(ret));
    int id = 1;
    while(peek() == '+' || peek() == '-') {
        read();
        tmp->child.emplace_back(term());
        ++id;
    }
    return tmp;
}

Pt term() {
    if(peek() == '(') {
        assert(read() == '(');
        Pt ret = exp();
        assert(read() == ')');
        return ret;
    }
    return digit();
}

Pt digit() {
    assert(isdigit(peek()));
    Pt ret = make_unique<Node>();
    ret->x = read() - '0';
    return ret;
}

string s;

Pll dfs1(Pt &p) {
    if(p->x != -1) return {p->x, p->x};
    for(auto &i : p->child) {
        p->dp.emplace_back(dfs1(i));
    }
    if(p->op == '+') {
        return {p->dp[0].first  + p->dp[1].first,
                p->dp[0].second + p->dp[1].second};
    } else {
        return {max(p->dp[0].first  - p->dp[1].second,
                    p->dp[1].first  - p->dp[0].second),
                min(p->dp[1].second - p->dp[0].first, 
                    p->dp[0].second - p->dp[1].first)};
    }
}

void dfs2(Pt &p, Pll gg = make_pair(0, 0)) {
    if(p->dp.size() == 2) {
        p->dp.emplace_back(gg);
    }
    rep(i,p->child.size(),0) {
        Pll ff;
        if(p->op == '+') {
            ff    = {p->dp[(i+2)%3].first +  p->dp[(i+1)%3].first,
                     p->dp[(i+2)%3].second + p->dp[(i+1)%3].second};
        } else {
            ff    = {max(p->dp[(i+2)%3].first - p->dp[(i+1)%3].second,
                         p->dp[(i+1)%3].first - p->dp[(i+2)%3].second),
                     min(p->dp[(i+2)%3].second - p->dp[(i+1)%3].first,
                         p->dp[(i+1)%3].second - p->dp[(i+2)%3].first)
                     };
        }
        dfs2(p->child[i], ff);
    }
}

int solve() {
    s += "$";
    itr = cbegin(s);
    Pt p = exp();
    assert(peek() == '$');
    dfs1(p);
    dfs2(p);
    // p->deb();
    return p->calc();
}

int main() {
    while(1) {
        cin >> s;
        if(s == "-1") break;
        cout << solve() << endl;
    }
}
