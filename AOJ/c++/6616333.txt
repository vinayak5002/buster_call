#include <bits/stdc++.h>

using namespace std;

using ll = long long;

// グラフ
using Node = int;              // ノード番号
using EdgeWeight = long long;  // 枝の重み

// エッジ重みの最大値
constexpr EdgeWeight kEdgeWeightInf = numeric_limits<EdgeWeight>::max() >> 16;  // 2^32を足し引きしてもオーバーフローしない十分大きな数

typedef struct structEdge {
   structEdge(const Node from_node, const Node to_node, const EdgeWeight edge_weight) {
      from = from_node;
      to = to_node;
      weight = edge_weight;
   }

   structEdge(const structEdge& edge) {
      from = edge.from;
      to = edge.to;
      weight = edge.weight;
   }

   bool operator<(const structEdge& right) const {
      return weight < right.weight;
   }

   Node from;
   Node to;
   EdgeWeight weight;
} Edge;

// Graph(隣接リスト)
// ノード番号は1-indexedで保持
class Graph {
  public:
   Graph();

   // Nノードで初期化
   explicit Graph(const size_t N);

   // ノードの追加
   // @retval 追加したノードのノード番号
   Node AddNode();

   // ノード数を返す
   size_t NodeCount() const {
      return node_list_.size();
   }

   // 無向エッジの追加
   // @param node_1, node_2: 枝の端点となるノード
   // @param weight エッジの重み(default: 1)
   void AddUndirectedEdge(const Node node_1, const Node node_2, const EdgeWeight weight = 1);

   // 有向エッジの追加
   // @param from, to: 枝の始点、終点となるノード
   // @param weight エッジの重み(default: 1)
   void AddDirectedEdge(const Node from, const Node to, const EdgeWeight weight = 1);

   // ダイクストラ法で単一始点最短路を求める
   // @pre 各エッジの重みが非負であること
   // @note 計算量: O(E + N log N)
   vector<EdgeWeight> ShortestPathDijkstra(const Node start) const;

  private:
   vector<Node> node_list_;              // Nodeのリスト
   vector<vector<Edge>> adj_to_list_;    // 隣接リスト(接続先): NodeにつながっているEdgeのリスト
   vector<vector<Edge>> adj_from_list_;  // 隣接リスト(接続元): NodeにつながっているEdgeのリスト
};

Graph::Graph()
    : adj_to_list_(1, vector<Edge>()),   // 1-indexにするためダミーノードを追加
      adj_from_list_(1, vector<Edge>())  // 1-indexにするためダミーノードを追加
{
}

Graph::Graph(const size_t N)
    : adj_to_list_(1, vector<Edge>()),   // 1-indexにするためダミーノードを追加
      adj_from_list_(1, vector<Edge>())  // 1-indexにするためダミーノードを追加
{
   for (size_t i = 0; i < N; i++) {
      AddNode();
   }
}

Node Graph::AddNode() {
   Node node = (Node)node_list_.size() + 1;  // Node番号は1-indexed

   node_list_.push_back(node);
   adj_to_list_.push_back(vector<Edge>());
   adj_from_list_.push_back(vector<Edge>());

   return node;
}

void Graph::AddUndirectedEdge(const Node node_1, const Node node_2, const EdgeWeight weight) {
   adj_to_list_[node_1].emplace_back(node_1, node_2, weight);
   adj_to_list_[node_2].emplace_back(node_2, node_1, weight);

   adj_from_list_[node_1].emplace_back(node_2, node_1, weight);
   adj_from_list_[node_2].emplace_back(node_1, node_2, weight);
}

void Graph::AddDirectedEdge(const Node from, const Node to, const EdgeWeight weight) {
   Edge edge(from, to, weight);
   adj_to_list_[from].push_back(edge);
   adj_from_list_[to].push_back(edge);
}

vector<EdgeWeight> Graph::ShortestPathDijkstra(const Node start) const {
   // 重みリストの初期化
   size_t N = NodeCount();
   vector<EdgeWeight> min_weight_list(N + 1, kEdgeWeightInf);

   min_weight_list[start] = 0;

   // 重み最小のノードを管理
   using WeightNode = pair<EdgeWeight, Node>;  // (startからの最小重み, ノード番号)
   priority_queue<WeightNode, vector<WeightNode>, greater<WeightNode>> node_queue;

   node_queue.emplace(0, start);

   while (!node_queue.empty()) {
      const auto [min_weight, min_node] = node_queue.top();
      node_queue.pop();

      // すでに更新済みの場合はskip
      // - skipしないとO(N^2)となるケースが存在
      // see: https://snuke.hatenablog.com/entry/2021/02/22/102734
      if (min_weight_list[min_node] < min_weight) {
         continue;
      }

      // 重み最小のノードに隣接するノードを更新できるかチェック
      for (const auto& edge : adj_to_list_[min_node]) {
         auto node_to = edge.to;
         EdgeWeight weight = edge.weight;

         if (min_weight_list[node_to] > min_weight + weight) {
            min_weight_list[node_to] = min_weight + weight;
            node_queue.emplace(min_weight_list[node_to], node_to);
         }
      }
   }

   return min_weight_list;
}

int main() {
   int V, E, r;
   cin >> V >> E >> r;
   r++;
   Graph graph(V);

   for (int i = 0; i < E; i++) {
      int s, t, d;
      cin >> s >> t >> d;

      s++;
      t++;

      graph.AddDirectedEdge(s, t, d);
   }

   auto min_weight = graph.ShortestPathDijkstra(r);

   for (int i = 1; i <= V; i++) {
      if (min_weight[i] == kEdgeWeightInf) {
         cout << "INF" << endl;
      } else {
         cout << min_weight[i] << endl;
      }
   }

   return 0;
}

