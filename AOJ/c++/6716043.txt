#include<iostream>
#include<cmath>
using namespace std;

class Point{
private:
	int x, y, r;
public:
	Point(){ x=0; y=0; r=0; }
	Point(int x, int y, int r){ this->x=x; this->y=y; this->r=r; }
	int X(){ return x; }
	int Y(){ return y; }
	int R(){ return r; }
};

class Coordinate{
private:
	Point p1;
	Point p2;
	
	double distance(){
		return sqrt((p1.X()-p2.X())*(p1.X()-p2.X()) + (p1.Y()-p2.Y())*(p1.Y()-p2.Y()));
	}
public:
	Coordinate(){
		int x, y, r;
		cin >> x >> y >> r;
		p1 = Point(x, y, r);
		cin >> x >> y >> r;
		p2 = Point(x, y, r);
	}

	int calcIntersects(){
		int sumRs = p1.R()+p2.R();
		int diffRs = abs(p1.R()-p2.R());
		int d = distance();
		if(d>sumRs){ return 4; }
		else if(d==sumRs){ return 3; }
		else if(d<sumRs && d>diffRs){ return 2; }
		else if(d==diffRs){ return 1; }
		return 0;
	}
};

int main(){
	Coordinate c = Coordinate();
	cout << c.calcIntersects() << endl;
	return 0;
}
