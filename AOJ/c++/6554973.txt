# 2022/04/29
# Yutaka Watanobe
import copy

LIMIT = 45
N = 4                                                          # N * N pieces                                                       
adj = [{1, 4}, {0, 2, 5}, {1, 3, 6}, {2, 7},                   # N * N pieces are represented by 0, 1, ..., (N*N-1)
      {0, 5, 8}, {1, 4, 6, 9}, {2, 5, 7, 10}, {3, 6, 11},      # adj[i]: an adj list for piece i
      {4, 9, 12}, {5, 8, 10, 13}, {6, 9, 11, 14}, {7, 10, 15}, # ** this is for only N = 4
      {8, 13}, {9, 12, 14}, {10, 13, 15}, {11, 14}]

pieces = [[[0] for j in range(N)] for i in range(N)]           # contents for simulation
op = [0 for i in range(LIMIT+1)]                               # operations for simulation

MD = [[ abs(i//N - j//N) + abs(i%N - j%N) for j in range(N*N) ] for i in range(N*N)]    # manhattan dist between piece i and j
PW = [ 16**i for i in range(N*N)]
SW = [[ i*PW[j] for j in range(N*N) ] for i in range(N*N)]

initial_v, initial_h, initial_b = 0, 0, -1 
p = 0
for i in range(N):
    row = list(map(int, input().split()))
    for j in range(N):
        pieces[i][j] = row[j]
        if row[j] == 0:
            initial_b = i*N + j
        else:
            initial_v += row[j]*PW[p]
            initial_h += MD[p][row[j]-1]
        p += 1

limit = 0

def dfs(depth, prev, val, heuristic, blank):
    global limit
    if heuristic == 0: return True
    if depth + heuristic > limit:  return False  
    
    for next_b in adj[blank]:
        if next_b == prev: continue
        num = (val >> (4*next_b)) & 15
        next_h = heuristic + MD[blank][num-1] - MD[next_b][num-1]
        next_v = val - SW[num][next_b] + SW[num][blank]
        if dfs( depth + 1, blank, next_v, next_h, next_b ):
             op[depth] = next_b
             return True

    return False

def iterative_deepening():
    global limit
    limit = initial_h
    while limit <= LIMIT:
        if dfs(0, -100, initial_v, initial_h, initial_b): return True
        limit += 1
    return False

def simulate():
    print(0, ': initial state\n')
    for r in range(N): print(pieces[r])
    si, sj = initial_b // N, initial_b % N
    for i in range(limit):
        ti, tj = op[i] // N, op[i] % N
        print('\n', (i+1), ': move', pieces[ti][tj], '\n')
        pieces[si][sj], pieces[ti][tj] = pieces[ti][tj], pieces[si][sj]
        for r in range(N): print(pieces[r])
        si, sj = ti, tj
    
if iterative_deepening():
    print(limit)
#    simulate()
else:
    print("unsolvable")
        


