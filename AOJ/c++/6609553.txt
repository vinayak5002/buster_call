#include <iostream>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <queue>
#include <iomanip>
// clang-format off
#define rep(i, s ,n) for(int i=s, i##_len=(n); i<i##_len; ++i)
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }
#define SZ(x) ((int)(x).size())
using ll = long long;
// 2^60
const ll INF = 1LL << 60;
// lower_bound(ALL(a), 4)
#define ALL(a)  (a).begin(),(a).end()
int gcd(int a,int b){return b?gcd(b,a%b):a;}
int dx[4]={1,0,-1,0};
int dy[4]={0,1,0,-1};
using namespace std;
using Graph = vector<vector<int>>;
// clang-format on

// 幅優先の例
// 入力: グラフ G と，探索の始点 s
// 出力: s から各頂点への最短路長を表す配列
vector<int> BFS(const Graph &G, int s)
{
    int N = (int)G.size(); // 頂点数
    // vector<bool> seen(N, false);
    vector<int> dist(N, -1); // 全頂点を「未訪問」に初期化
    queue<int> que;

    dist[s] = 0;
    que.push(s);

    while (!que.empty())
    {
        int v = que.front();
        que.pop();

        for (int x : G[v])
        {
            if (dist[x] != -1)
                continue;

            dist[x] = dist[v] + 1;
            que.push(x);
        }
    }
    return dist;
}

// 深さ優先探索
// CAUTION:
// seen.assign(N, false);
vector<bool> seen;
void dfs(const Graph &G, int v)
{
    seen[v] = true;
    for (auto next_v : G[v])
    {
        if (seen[next_v])
            continue;
        dfs(G, next_v);
    }
}

int tsec(string s)
{
    return (s[0] - '0') * 10 + s[1] - '0';
}

// 05:47:15
int sec(string s)
{
    return tsec(s.substr(0, 2)) * 60 * 60 +
           tsec(s.substr(3, 2)) * 60 +
           tsec(s.substr(6, 2));
}
int SIZE = 24 * 60 * 60;

int main()
{
    cout << fixed << setprecision(16);

    while (true)
    {
        int n;
        cin >> n;
        if (n == 0)
            break;

        vector<int> v(SIZE, 0);
        string from;
        string to;
        rep(i, 0, n)
        {
            cin >> from;
            cin >> to;
            ++v[sec(from)];
            --v[sec(to)];
        }

        ll ret = 0;
        rep(i, 0, SIZE - 1)
        {
            v[i + 1] += v[i];
        }
        rep(i, 0, SIZE)
        {
            ret = max(ret, ll(v[i]));
        }
        cout << ret << endl;
    }
}

