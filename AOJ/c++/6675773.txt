#include <iostream>
#include <vector>
using namespace std;

bool is_not_stable = false;

int partition(vector<pair<char, int>>& A, int p, int r)
{
	int x = A[r].second;
	int i = p - 1;
	for (int j = p; j < r; j++)
	{
		if (A[j].second <= x) {
			i++;
			swap(A[i], A[j]);
		}
	}
	swap(A[i + 1], A[r]);
	return i + 1;
}

bool isStable(vector<pair<char, int>> in, vector<pair<char, int>> out)
{
	for (int i = 0; i < in.size(); i++) {
		if (in[i].first != out[i].first) {
			return false;
		}
	}
	return true;
}

void QuickSort(vector<pair<char, int>>& A, int p, int r)
{
	if (p < r) {
		int q = partition(A, p, r);
		QuickSort(A, p, q - 1);
		QuickSort(A, q + 1, r);
	}
}

void BubbleSort(vector<pair<char, int>>& A) {
	for (int i = 0; i < A.size(); i++) {
		for (int j = A.size() - 1; j > i; j--) {
			if (A[j].second < A[j - 1].second) {
				swap(A[j], A[j - 1]);
			}
		}
	}
}

int main()
{
	int n;
	cin >> n;
	vector<pair<char, int> > A(n);
	vector<pair<char, int> > Input(n);
	for (int i = 0; i < n; i++) {
		cin >> A[i].first;
		cin >> A[i].second;
	}
	Input = A;
	QuickSort(A, 0, n - 1);
	BubbleSort(Input);
	
	if (!isStable(Input, A))cout << "Not stable" << endl;
	else cout << "Stable" << endl;

	for (int i = 0; i < n; i++) {
		cout << A[i].first << " " << A[i].second << endl;
	}

	return 0;
}
