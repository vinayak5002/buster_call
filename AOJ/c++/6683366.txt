#include <algorithm>
#include <cassert>
#include <climits>
#include <cmath>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <random>
#include <complex>
#include <bitset>
#include <iomanip>
#include <memory>
#include <functional>

#define rep(i, n, s) for (int i = (s); i < int(n); i++)
#define per(i, n, s) for (int i = (n) - 1; i >= int(s); i--)
#define MM << " " <<
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)

template <class T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <class T>
using MaxHeap = std::priority_queue<T>;

using ll = long long;
using Pii = std::pair<int, int>;
using Pll = std::pair<ll, ll>;
using Pdd = std::pair<double, double>;

template <class T>
bool chmin(T &a, const T b) {
    if (b < a) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
bool chmax(T &a, const T b) {
    if (a < b) {
        a = b;
        return true;
    } else {
        return false;
    }
}

template <class T>
void vdeb(const std::vector<T> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        if (i == n - 1)
            std::cout << da[i];
        else
            std::cout << da[i] << " ";
    }
    std::cout << std::endl;
}
template<class T>
void vdeb(const std::vector<std::vector<T>> &da) {
    auto n = da.size();
    for (size_t i = 0; i < n; i++) {
        // std::cout << i << " : ";
        vdeb(da[i]);
    }
    std::cout << std::endl;
}

using namespace std;

int main() {
    ll n; cin >> n;
    string s; cin >> s;
    int m = s.size();
    // len, modified
    vector<vector<ll>> dp(m, vector<ll>(m+1, n+2));
    dp[0][s[0]!='0'?1:0] = 0;
    int k = to_string(n).size();
    vector<ll> pow10(k+1,1);
    rep(i,k,0) pow10[i+1] = pow10[i] * 10;
    rep(i,k+1,1) {
        if(m < i) break;
        int c = 0;
        ll now = 0;
        string t = s.substr(0, i);
        rep(j,i,0) {
            if(t[j] == '+') {
                c++;
                t[j] = j==0 ? '1' : '0';
            }
            if(j == 0 && t[j] == '0') {
                c++;
                t[j] = '1';
            }
            now = now * 10 + t[j] - '0';
        }
        chmin(dp[i-1][c], now);
        rep(j,i,0) {
            if(j == 0 && t[j] != '1') {
                c++;
                now -= pow10[i-j-1] * (t[j] - '1');
            } else if(j != 0 && t[j] != '0') {
                c++;
                now -= pow10[i-j-1] * (t[j] - '0');
            }
            chmin(dp[i-1][c], now);
        }
        // assert(now);
    }
    // vdeb(dp);
    rep(i,m,0) {
        rep(j,k+2,2) {
            if(i+j >= m) break;
            int c = 0;
            ll now = 0;
            string t = s.substr(i+1, j);
            if(t[0] != '+') c++;
            rep(ii,j,1) {
                if(t[ii] == '+') {
                    c++;
                    t[ii] = j!=2&&ii==1 ? '1' : '0';
                }
                if(j != 2 && ii == 1 && t[ii] == '0') {
                    c++;
                    t[ii] = '1';
                }
                now = now * 10 + t[ii] - '0';
            }
            vector<ll> mod(j+1, n+2);
            mod[c] = now;
            rep(ii,j,1) {
                if(j != 2 && ii == 1 && t[ii] != '1') {
                    c++;
                    now -= pow10[j-ii-1] * (t[ii] - '1');
                } else if((j == 2 || ii != 1) && t[ii] != '0') {
                    c++;
                    now -= pow10[j-ii-1] * (t[ii] - '0');
                }
                mod[c] = now;
            }
            // assert(now);
            rep(ii,m+1,0) {
                rep(jj,j+1,0) {
                    if(m < ii+jj) break;
                    chmin(dp[i+j][ii+jj], dp[i][ii] + mod[jj]);
                }
            }
        }
    }
    // vdeb(dp);
    int ans = m+1;
    per(i,m+1,0) {
        if(dp[m-1][i] <= n) ans = i;
    }
    cout << (ans == m+1 ? -1 : ans) << endl;
}
