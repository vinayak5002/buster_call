#include <stdio.h>
#include <stdlib.h>

#define MAX 100005

struct node{
  struct node *right;
  struct node *left;
  struct node *parent;
  int key;
};
typedef struct node * Node;
Node root;

int checkFind;
Node record;

void insert(int i){
  Node y = NULL;
  Node x = root;
  Node z;

  z = malloc(sizeof(struct node));
  z->key = i;
  z->left = NULL;
  z->right = NULL;

  while(x != NULL){
      y = x;
      if(z->key < x->key){
          x = x->left;
      }
      else{
          x = x->right;
      }
  }
  
  z->parent = y;
  if(y==NULL){
      root = z;
  }
  else{
      if(z->key < y->key){
          y->left = z;
      }
      else{
          y->right = z;
      }
  }
}

void preorder(Node i){
    if(i==NULL){
        return;
    }
    printf(" %d", i->key);
    preorder(i->left);
    preorder(i->right);
}

void inorder(Node i){
    if(i==NULL){
        return;
    }
    inorder(i->left);
    printf(" %d", i->key);
    inorder(i->right);
}

void find(int n, Node i){

    if(i==NULL){
        //printf("no\n");
        checkFind=0;
        return;
    }
    if(i->key==n){
        //printf("yes\n");
        checkFind=1;
        record=i;
        return;
    }
    else if(i->key<n){
        find(n, i->right);
    }
    else if(i->key>n){
        find(n, i->left);
    }

    
}

Node findSmallest(Node i){
    while(i->left!=NULL){
        i=i->left;
    }
    return i;
}

Node findSuccessor(Node i){
    if(i->right!=NULL){
        return findSmallest(i->right);
    }
    Node tempParent=i->parent;
    while(tempParent!=NULL&&i==tempParent->right){
        i=tempParent;
        tempParent=tempParent->parent;
    }
    return tempParent;
}

void delete(int n){
    Node i;
    find(n, root);
    i=record;
    Node deleteNode, tempKid;
    if(i->left==NULL||i->right==NULL){
        deleteNode=i;
    }
    else{
        deleteNode=findSuccessor(i);
    }
    if(deleteNode->left!=NULL){
        tempKid=deleteNode->left;
    }
    else{
        tempKid=deleteNode->right;
    }
    if(tempKid!=NULL){
        tempKid->parent=deleteNode->parent;
    }
    if(deleteNode->parent==NULL){
        root=tempKid;
    }
    else{
        if(deleteNode==deleteNode->parent->left){
            deleteNode->parent->left=tempKid;
        }
        else{
            deleteNode->parent->right=tempKid;
        }
    }
    if(deleteNode!=i){
        i->key=deleteNode->key;
    }

    free(deleteNode);
}



int main(void){
    int i, total, self, left, right, num;
    char com[10];
    scanf("%d", &total);

    for(i=0; i<total; i++){
       scanf("%s", com);
       if ( com[0] == 'i' ){
           scanf("%d", &num);
	        insert(num);
	   }
       else if(com[0] == 'f'){
           scanf("%d", &num);
           find(num, root);
           if(checkFind==0){
               printf("no\n");
           }
           else if(checkFind==1){
               printf("yes\n");
           }
       }
       else if(com[0]=='d'){
           scanf("%d", &num);
           delete(num);
       }
       else {
           inorder(root);
           printf("\n");
           preorder(root);
           printf("\n");
       }
    }
}
