#include <bits/stdc++.h>

using namespace std;

using ll = long long;

#define rep(i, n) for (int i = 0; (i) < (int)(n); (i)++)
// グラフ
using Node = int;              // ノード番号
using EdgeWeight = long long;  // 枝の重み

// エッジ重みの最大値
constexpr EdgeWeight kEdgeWeightInf = numeric_limits<EdgeWeight>::max() >> 16;  // 2^32を足し引きしてもオーバーフローしない十分大きな数

typedef struct structEdge {
   structEdge(const Node from_node, const Node to_node, const EdgeWeight edge_weight) {
      from = from_node;
      to = to_node;
      weight = edge_weight;
   }

   structEdge(const structEdge& edge) {
      from = edge.from;
      to = edge.to;
      weight = edge.weight;
   }

   bool operator<(const structEdge& right) const {
      return weight < right.weight;
   }

   Node from;
   Node to;
   EdgeWeight weight;
} Edge;

// Graph(隣接リスト)
// ノード番号は1-indexedで保持
class Graph {
  public:
   Graph();

   // Nノードで初期化
   explicit Graph(const size_t N);

   // ノードの追加
   // @retval 追加したノードのノード番号
   Node AddNode();

   // ノード数を返す
   size_t NodeCount() const {
      return node_list_.size();
   }

   // 無向エッジの追加
   // @param node_1, node_2: 枝の端点となるノード
   // @param weight エッジの重み(default: 1)
   void AddUndirectedEdge(const Node node_1, const Node node_2, const EdgeWeight weight = 1);

   // 有向エッジの追加
   // @param from, to: 枝の始点、終点となるノード
   // @param weight エッジの重み(default: 1)
   void AddDirectedEdge(const Node from, const Node to, const EdgeWeight weight = 1);

   // ワーシャル・フロイド法で全点対間最短路を求める
   // @note 負の重みが存在しても正しく動く
   // @note 負の閉路があれば検知可能
   // @param min_weight_list[i][j] : node i->jの最短路。1-indexedのためi=0, j=0にはkEdgeWeightInfが入る
   // @retval true 負の閉路が存在, false 負の閉路が存在しない
   // @note 最短路の重みが負の無限大になるノードはmin_weight_list[node][node]が負のもの
   // @note 計算量: O(N^3)
   pair<bool, vector<vector<EdgeWeight>>> AllShortestPathWarshallFloyd() const;

  private:
   vector<Node> node_list_;              // Nodeのリスト
   vector<vector<Edge>> adj_to_list_;    // 隣接リスト(接続先): NodeにつながっているEdgeのリスト
   vector<vector<Edge>> adj_from_list_;  // 隣接リスト(接続元): NodeにつながっているEdgeのリスト
};

Graph::Graph()
    : adj_to_list_(1, vector<Edge>()),   // 1-indexにするためダミーノードを追加
      adj_from_list_(1, vector<Edge>())  // 1-indexにするためダミーノードを追加
{
}

Graph::Graph(const size_t N)
    : adj_to_list_(1, vector<Edge>()),   // 1-indexにするためダミーノードを追加
      adj_from_list_(1, vector<Edge>())  // 1-indexにするためダミーノードを追加
{
   for (size_t i = 0; i < N; i++) {
      AddNode();
   }
}

Node Graph::AddNode() {
   Node node = (Node)node_list_.size() + 1;  // Node番号は1-indexed

   node_list_.push_back(node);
   adj_to_list_.push_back(vector<Edge>());
   adj_from_list_.push_back(vector<Edge>());

   return node;
}

void Graph::AddUndirectedEdge(const Node node_1, const Node node_2, const EdgeWeight weight) {
   adj_to_list_[node_1].emplace_back(node_1, node_2, weight);
   adj_to_list_[node_2].emplace_back(node_2, node_1, weight);

   adj_from_list_[node_1].emplace_back(node_2, node_1, weight);
   adj_from_list_[node_2].emplace_back(node_1, node_2, weight);
}

void Graph::AddDirectedEdge(const Node from, const Node to, const EdgeWeight weight) {
   Edge edge(from, to, weight);
   adj_to_list_[from].push_back(edge);
   adj_from_list_[to].push_back(edge);
}

pair<bool, vector<vector<EdgeWeight>>> Graph::AllShortestPathWarshallFloyd() const {
   // dp[k][i][j]: ノード1からkまでを使ってiからjまで移った時の最小重み
   // -> dp[i][j]のみで管理可能
   size_t N = NodeCount();

   vector<vector<EdgeWeight>> min_weight_list(N + 1, vector<EdgeWeight>(N + 1, kEdgeWeightInf));

   // 初期化
   for (const Node node : node_list_) {
      min_weight_list[node][node] = 0;

      for (const Edge& edge : adj_to_list_[node]) {
         min_weight_list[node][edge.to] = edge.weight;
      }
   }

   for (const Node node_k : node_list_) {
      for (const Node node_i : node_list_) {
         for (const Node node_j : node_list_) {
            if (min_weight_list[node_i][node_k] == kEdgeWeightInf || min_weight_list[node_k][node_j] == kEdgeWeightInf) {
               // 重み < 0の可能性があり直後の更新がinf > inf - dで成立し意図しない挙動になるため明示的にスキップ
               continue;
            }

            EdgeWeight weight = min_weight_list[node_i][node_k] + min_weight_list[node_k][node_j];

            min_weight_list[node_i][node_j] = min(min_weight_list[node_i][node_j], weight);
         }
      }
   }

   bool negative_loop = false;

   for (const Node node : node_list_) {
      if (min_weight_list[node][node] < 0) {
         negative_loop = true;
      }
   }

   return {negative_loop, min_weight_list};
}

int main() {
   int V, E;
   cin >> V >> E;

   Graph graph(V);

   rep(i, E) {
      int s, t, d;
      cin >> s >> t >> d;

      s++;
      t++;

      graph.AddDirectedEdge(s, t, d);
   }

   auto [neg, min_weight] = graph.AllShortestPathWarshallFloyd();

   if (neg) {
      cout << "NEGATIVE CYCLE" << endl;
   } else {
      rep(i, V) {
         rep(j, V) {
            auto w = min_weight[i + 1][j + 1];

            if (w == kEdgeWeightInf) {
               cout << "INF";

            } else {
               cout << min_weight[i + 1][j + 1];
            }

            if (j != V - 1) {
               cout << " ";
            }
         }

         cout << endl;
      }
   }

   return 0;
}

