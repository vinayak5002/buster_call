#include <iostream>
#include <string>
#include <cassert>
#include <algorithm>
#include <vector>

int getInitial(std::string str)
{
    switch (str[0])
    {
    case 'A':
        return 0;
    case 'C':
        return 1;
    case 'G':
        return 2;
    case 'T':
        return 3;
    default:
        break;
    }
    assert(0);
}

std::vector<std::vector<std::string>> insert(std::string str, std::vector<std::vector<std::string>> dictionary)
{
    int initial_number = getInitial(str); // strの頭文字を得る　A:0 C:1 G:2 T:3
    dictionary[initial_number].push_back(str); // pushする
    return dictionary;
}

bool find(std::string str, std::vector<std::vector<std::string>> dictionary)
{
    int initial_number = getInitial(str); // strの頭文字を得る　A:0 C:1 G:2 T:3

    return std::find(dictionary[initial_number].begin(),dictionary[initial_number].end(),str)!=dictionary[initial_number].end();
}

int main()
{
    assert(find("AAA", {{"AAA", "CCC"}}) == true);
    assert(find("AAA", {{"CCC", "AAA"}}) == true);
    assert(find("AAA", {{"AAA", "AAC", "AGA", "AGG", "TTT"}}) == true);
    assert(find("AAA", {{"CCC"}}) == false);
    //「insert str」辞書に追加
    //「find str」あったらyes、なかったらno

    //頭文字ごとに配列に入れる　array[A][B]　Aが頭文字の配列、Bが頭文字を持つstrが格納されていく
    //ハッシュテーブルで頭文字が同じ配列の中だけ調べる

    int n; //命令の数n個
    std::cin >> n;
    std::vector<std::vector<std::string>> dictionary;
    dictionary.resize(4);
    for (int i = 0; i < n; i++)
    {
        std::string order;
        std::string str;
        std::cin >> order >> str;

        if (order == "insert")
        {
            dictionary = insert(str, dictionary);
        }
        else
        {
            if (find(str, dictionary))
            {
                std::cout << "yes" << std::endl;
            }
            else
            {
                std::cout << "no" << std::endl;
            }
        }
    }

    return 0;
}
