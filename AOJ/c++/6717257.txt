#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef string st ;
typedef long double ld ;
typedef pair<int, int> pi;
typedef pair<ll,ll> pl ;
typedef tuple<int,int,int>  ti ;
typedef tuple<ll,ll,ll> tl ;
typedef vector<vector<int>> vi ;
typedef vector<vector<ll>> vl ;
typedef vector<vector<bool>> vb ;
typedef vector<vector<st>> vs ;
typedef vector<vector<char>> vc;
const ll mod0 = 1000000007;
const ll mod1 = 998244353 ;
const ll LINF = (1LL << 60);
const int INF = (1 << 30);
 
 
#define pb                push_back
#define ppb               pop_back
#define pf                push_front
#define ppf               pop_front
#define all(x)            x.begin(), x.end()
#define rep(i,a,n)        for (ll i = a; i <= (n); ++i)
#define re                return 0;
#define fore(i,a)         for(auto &i:a)
#define V                 vector
 
 
ll gcd(ll a, ll b){
 
   if(b == 0){
    return a;
}
return gcd(b,a%b) ;
}
 
 
ll lcm(ll a, ll b){
    
    ll ans = a*b /gcd(a,b) ;
    return ans ;
}
 
bool nis(ll q){
    
     // 素数だったらtrue ,素数じゃなかったらfalse
     
       if(q == 1){
           
           return false ;
       }
       
      for(ll i=2;i*i <=q;i++){
          if(q%i == 0){
              return false ;
          }
      }
    return true ;
}
 
 
 
 
 
ll digit_sum(ll a){
  
    ll sum = 0;
    while(a > 0){
       sum += a%10 ;
       a /= 10 ;
    }
  return sum ;
}
 
 

 ll jun(ll a,ll b, ll c,ll rank ){
     
    vector<ll> ANS ;
    ANS.pb(-LINF) ;
    ANS.pb(a) ;
    ANS.pb(b) ;
    ANS.pb(c) ;
    
    sort(all(ANS)) ;
    return ANS[rank] ;
}

#define  C            cout   
#define  E            endl;

class UnionFind {
public:
 
  vector<int> par;
   
  // サイズをＧＥＴ！
  void init(int sz) {
       par.resize(sz,-1);
}
   // 各連結成分の一番上を返す
  int root(int x) {
    if (par[x] < 0) return x;
    return par[x] = root(par[x]);
  }
   
  // 結合作業
  bool unite(int x, int y) {
    x = root(x); y = root(y);
    if (x == y) return false;
    if (par[x] > par[y]) swap(x,y);
    par[x] += par[y];
    par[y] = x;
    return true;
  }
  // 同じグループか判定
  bool same(int x, int y) { return root(x) == root(y);}
  // グループのサイズをＧＥＴ！
  int size(int x) { return -par[root(x)];}
};
 
UnionFind UF ;
 
 
 
 st Y = "Yes" ; 
 st YY = "No" ;
 
 
vector<ll> G[1 << 18] ;

void chmin(ll& x ,ll y){x = min(x,y) ;}
void chmax(ll& x ,ll y){x = max(x,y) ;}


vector<ll> Y4 = {0,1,0,-1} ;
vector<ll> X4 = {1,0,-1,0} ;

vector<ll> Y8 = {0,1,1,1,0,-1,-1,-1} ;
vector<ll> X8 = {1,1,0,-1,-1,-1,0,1} ;


vector<ll> enumdiv(ll n) { 
    vector<ll> S;
    for (ll i = 1; i*i <= n; i++) if (n%i == 0) { S.pb(i); if (i*i != n) S.pb(n / i); }
    sort(S.begin(), S.end());
    return S;
}
 
template<typename T> using min_priority_queue = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using max_priority_queue = priority_queue<T, vector<T>, less<T>> ;


ll ppow(ll a , ll b ){
    
    if(b == 0){
        return 1 ;
    }
    
    ll ans = 1 ;
    rep(i,1,b){
        ans *= a ;
        
    }
    return ans ;
}


st KU = " " ;

// 素因数の個数を返す関数
// size() しかだめ
map<ll,int> enumpr(ll n) {
	map<ll,int> AAA;
	for(ll i=2;i*i<=n;i++) while(n%i==0) AAA[i]++,n/=i;
	if(n>1) AAA[n]++;
	return AAA;
}


V<ll> prime_broken(ll a){
    
    V<ll> ans ;
    for(ll i = 2 ;i*i<=a;i++){
        if(a %i == 0){
          while(a %i == 0){
                a /= i ;
                ans.pb(i) ;
          }
            
        }
        
    }
    
    if(a != 1)ans.pb(a) ;
    return ans ;
}


const ld pai = acos(-1) ;
using P = pair<ll,ll> ;
using Edeg = tuple<ll,ll,ll> ;

int main(void){ 

ll N ;
cin>>N ;

rep(i,1,N){
    ll t,k ;
    cin>>t>>k ;
    if(k == 0)continue ;
    rep(j,0,k-1){
        ll kk ;
        cin>>kk ;
        
    G[i].pb(kk) ;
    }
}
V<ll> dist(N+1,-1) ;
queue<ll> Q ;

dist[1] = 0 ;
Q.push(1) ;

while(!Q.empty()){
    ll pos  = Q.front() ;
     Q.pop() ;
     
     fore(u,G[pos]){
         if(dist[u] == -1){
             dist[u] = dist[pos] + 1 ;
             Q.push(u) ;
         }
         
     }
    
}


rep(i,1,N){
    
    C << i << KU << dist[i] << E
}

re
}
