#include<bits/stdc++.h>
#define int long long 
#define node pair<int,int>
#define to first
#define id second
using namespace std;
int const N=666666,INF=0x3f3f3f3f;
int n,m,t,cnt,vis[N],d[N],qry[N],ans[N],in[N];
node edge[N];
vector<node>e[N],pre[N],g[N];
priority_queue<node,vector<node>,greater<node> >q;
queue<int>qq;
signed main(){
	ios::sync_with_stdio(0);
	cin>>n>>m>>t;
	for(int i=1;i<=m;i++){
		int x,y;cin>>x>>y;
		e[x].push_back(make_pair(y,i));
		e[y].push_back(make_pair(x,i));
	}
	memset(d,INF,sizeof d);
	memset(vis,0,sizeof vis);
	q.push(make_pair(d[1]=0,1));
	while(!q.empty()){
		int x=q.top().id;q.pop();
		vis[x]=1;
		for(int i=0;i<e[x].size();i++){
			int y=e[x][i].to;
			if(vis[y])continue;
			if(d[y]>d[x]+1){
				q.push(make_pair(d[y]=d[x]+1,y));
				pre[y].clear();
				pre[y].push_back(make_pair(x,e[x][i].id));
			}else if(d[y]==d[x]+1){
				pre[y].push_back(make_pair(x,e[x][i].id));
			}
		}
	}
	memset(vis,0,sizeof vis);
	for(int i=1;i<=t;i++)
		cin>>qry[i];
	for(int i=1;i<=n;i++)
		for(int j=0;j<pre[i].size();j++){
			edge[pre[i][j].id]=make_pair(pre[i][j].to,i);
			g[pre[i][j].to].push_back(make_pair(i,pre[i][j].id));
			in[i]++;
		}
	for(int i=1;i<=t;i++){
		int p=qry[i];
		if(!edge[p].first||vis[p]){cout<<cnt<<"\n";continue;}
		in[edge[p].second]--;
		vis[p]=1;
		if(!in[edge[p].second]){
			cnt++,qq.push(edge[p].second);
			while(!qq.empty()){
				int x=qq.front();qq.pop();
				for(int j=0;j<g[x].size();j++){
					int y=g[x][j].to,ord=g[x][j].id;
					if(vis[ord])continue;
					vis[ord]=1,in[y]--;
					if(!in[y])cnt++,qq.push(y);
				}
			}
		}
		cout<<cnt<<"\n";
	}
}
