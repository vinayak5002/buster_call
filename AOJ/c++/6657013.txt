#include <stdio.h>
#include <stdlib.h>

struct node
{
    struct node *right;
    struct node *left;
    struct node *parent;
    int key;
};
typedef struct node *Node;
#define NIL NULL

Node root = NIL;

Node treeMinimum(Node x)
{
}

Node treeMaximum(Node x)
{
}

Node treeSearch(Node u, int k)
{
    Node x = root;
    while (x != NIL)
    {
        if (k == x->key)
        {
            return x;
        }
        else if (k < x->key)
        {
            x = x->left;
        }
        else
        {
            x = x->right;
        }
    }
    return NIL;
}

Node treeSuccessor(Node x)
{
}

void treeDelete(Node z)
{
    Node y; // node to be deleted

    if (z == NIL)
    {
        return;
    }

    if (z->left == NIL && z->right == NIL)
    {
        if (z->key < z->parent->key)
        {
            z->parent->left = NIL;
        }
        else
        {
            z->parent->right = NIL;
        }
        z = NIL;
    }
    else if (z->left != NIL && z->right != NIL)
    {
        y = z->right;
        while (y->left != NIL)
        {
            y = y->left;
        }
        z->key = y->key;
        treeDelete(y);
    }
    else
    {
        if (z->left != NIL)
        {
            if (z->key < z->parent->key)
            {
                z->parent->left = z->left;
            }
            else
            {
                z->parent->right = z->left;
            }
            z->left->parent = z->parent;
        }
        else
        {
            if (z->key < z->parent->key)
            {
                z->parent->left = z->right;
            }
            else
            {
                z->parent->right = z->right;
            }
            z->right->parent = z->parent;
        }
        z = NIL;
    }
}

void insert(int k)
{
    Node y = NIL;
    Node x = root;
    Node z;

    z = malloc(sizeof(struct node));
    z->key = k;
    z->left = NIL;
    z->right = NIL;

    while (x != NIL)
    {
        y = x;
        if (z->key < x->key)
        {
            x = x->left;
        }
        else
        {
            x = x->right;
        }
    }
    z->parent = y;

    if (y == NIL)
    {
        root = z;
    }
    else if (z->key < y->key)
    {
        y->left = z;
    }
    else
    {
        y->right = z;
    }
}

void inorder(Node u)
{
    if (u->left != NIL)
    {
        inorder(u->left);
    }
    printf(" %d", u->key);
    if (u->right != NIL)
    {
        inorder(u->right);
    }
}
void preorder(Node u)
{
    printf(" %d", u->key);
    if (u->left != NIL)
    {
        preorder(u->left);
    }
    if (u->right != NIL)
    {
        preorder(u->right);
    }
}

int main()
{
    int n, i, x;
    char com[20];
    scanf("%d", &n);

    for (i = 0; i < n; i++)
    {
        scanf("%s", com);
        if (com[0] == 'f')
        {
            scanf("%d", &x);
            Node t = treeSearch(root, x);
            if (t != NIL)
                printf("yes\n");
            else
                printf("no\n");
        }
        else if (com[0] == 'i')
        {
            scanf("%d", &x);
            insert(x);
        }
        else if (com[0] == 'p')
        {
            inorder(root);
            printf("\n");
            preorder(root);
            printf("\n");
        }
        else if (com[0] == 'd')
        {
            scanf("%d", &x);
            treeDelete(treeSearch(root, x));
        }
    }

    return 0;
}
