#include <bits/stdc++.h>
using namespace std;

// template {{{
using i32 = int;
using u32 = unsigned int;
using i64 = long long;
using u64 = unsigned long long;

#define  range(i, l, r) for (i64 i = (i64)(l); i < (i64)(r); (i) += 1)
#define rrange(i, l, r) for (i64 i = (i64)(r) - 1; i >= (i64)(l); (i) -= 1)

#define  whole(f, x, ...) ([&](decltype((x)) container) { return (f)(  begin(container),  end(container), ## __VA_ARGS__); })(x)
#define rwhole(f, x, ...) ([&](decltype((x)) container) { return (f)( rbegin(container), rend(container), ## __VA_ARGS__); })(x)

#define debug(x) cerr << "(" << __LINE__ << ")" << #x << ": " << (x) << endl

constexpr i32 inf   = 1001001001;
constexpr i64 infll = 1001001001001001001ll;

constexpr i32 dx[] = {0, -1, 1, 0, -1, 1, -1, 1}; 
constexpr i32 dy[] = {-1, 0, 0, 1, -1, -1, 1, 1};

struct IoSetup { IoSetup(i32 x = 15){ cin.tie(0); ios::sync_with_stdio(0); cout << fixed << setprecision(x); cerr << fixed << setprecision(x); } } iosetup;

template <typename T = i64> T input() { T x; cin >> x; return x; }

template <typename T> ostream &operator<<(ostream &os, vector<T> &v) { range(i, 0, v.size()) { os << v[i] << (i + 1 != (int)v.size() ? " " : ""); } return os; } 
template <typename T> istream &operator>>(istream &is, vector<T> &v) { for (T &in : v) is >> in; return is; }

template <typename T1, typename T2> ostream &operator<<(ostream &os, pair<T1, T2> p) { os << "(" << p.first << ", " << p.second << ")"; return os; }
template <typename T1, typename T2> istream &operator>>(istream &is, pair<T1, T2> &p) { is >> p.first >> p.second; return is; }

template <typename T> vector<T> make_vector(size_t a, T b) { return vector<T>(a, b); }
template <typename... Ts> auto make_vector(size_t a, Ts... ts) { return vector<decltype(make_vector(ts...))>(a, make_vector(ts...)); }

template <typename T1, typename T2> inline bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
template <typename T1, typename T2> inline bool chmin(T1 &a, T2 b) { return a > b && (a = b, true); }
// }}}

void solve() {
  i64 n, m, a, b, p, q;
  cin >> n;
  cin >> m;
  cin >> a >> b;
  cin >> p >> q;

  if (a == 1 and b == 1) {
    i64 ans = infll;
    {
      i64 k = min(m / (p + q), n);
      chmin(ans, abs(k * (p + q) - m));
    }
    {
      i64 k = min((m + (p + q - 1)) / (p + q), n);
      chmin(ans, abs(k * (p + q) - m));
    }

    cout << ans << endl;
    return;
  }

  i64 ans = infll;
  vector< i64 > as;
  {
    __int128_t l = p, r = q;
    range(k, 0, n) {
      as.emplace_back(l + r);

      l *= a;
      r *= b;
      if (l + r >= m) {
        chmin(ans, abs(m - i64(l + r)));
        break;
      }
    }
  }

  { // 1
    i64 s = 0;
    rrange(i, 0, as.size()) {
      if (s + as[i] <= m) {
        s += as[i];
      }
    }
    chmin(ans, abs(s - m));
  }

  { // 2
    range(mx, 0, as.size()) {
      i64 s = as[mx];

      rrange(i, 0, mx) {
        if (s + as[i] <= m) {
          s += as[i];
        } else {
          chmin(ans, abs((s + as[i]) - m));
        }
      }
    }
  }

  cout << ans << endl;
}

signed main() {
  solve();
}

