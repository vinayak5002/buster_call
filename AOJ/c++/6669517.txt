#include<bits/stdc++.h>

using namespace std;
using ll=long long;

template<typename M, typename F>
struct Lazy_Segment_Tree{
    int n, depth=0;
    const function<M(M,M)> calc;
    const function<M(F,M)> op;
    const function<F(F,F)> comp;
    vector<M> data; const M unit;
    vector<F> lazy; const F id;

    public:
    Lazy_Segment_Tree(int size, const function<M(M,M)> calc, const M unit, const function<M(F,M)> op, const function<F(F,F)> comp, const F id):
        n(), calc(calc), unit(unit), op(op), comp(comp), id(id){
        int m=1;
        while (size>m) depth++,m*=2;
        n=m;
        data.assign(2*m, unit);
        lazy.assign(2*m, id);
        }

    Lazy_Segment_Tree(const vector<M> &vec, const function<M(M,M)> calc, const M unit, const function<M(F,M)> op, const function<F(F,F)> comp, const F id):
        Lazy_Segment_Tree(vec.size(), calc, unit, op, comp, id){
            for (int k=0; k<vec.size(); k++) data[k+n]=vec[k];
            for (int k=n-1; k>0; k--) data[k]=calc(data[k<<1], data[k<<1|1]);
        }

    private:
    M evaluate_at(int m){
        if (lazy[m]==id) return data[m];
        else return op(lazy[m], data[m]);
    }

    void propagate_at(int m){
        data[m]=evaluate_at(m);

        if ((m<n) && (lazy[m]!=id)){
            lazy[m<<1]  =comp(lazy[m], lazy[m<<1]);
            lazy[m<<1|1]=comp(lazy[m], lazy[m<<1|1]);
        }

        lazy[m]=id;
    }

    void propagate_above(int m){
        int h=0, mm=m;
        for (mm; mm; mm>>=1, h++){}

        for (h--; h>=0; h--) propagate_at(m>>h);
    }

    void recalc_above(int m){
        while (m>1){
            m>>=1;
            data[m]=calc(evaluate_at(m<<1), evaluate_at(m<<1|1));
        }
    }

    pair<int,int> range_propagate(int l, int r){
        int X=l+n, Y=r+n-1, L0=-1, R0=-1;
        while (X<Y){
            if (X&1) L0=max(L0,X++);
            if ((Y&1)==0) R0=max(R0,Y--);

            X>>=1; Y>>=1;
        }
        L0=max(L0,X); R0=max(R0,Y);
        propagate_above(L0); propagate_above(R0);
        return make_pair(L0,R0);
    }

    public:
    inline M operator[](int k){
        int m=k+n;
        propagate_above(m);
        lazy[m]=id;
        return data[m]=evaluate_at(m);
    }

    void operate(int l, int r, F a){
        int L0,R0;
        tie(L0,R0)=range_propagate(l,r);

        int L=l+n, R=r+n;
        while (L<R){
            if (L&1) lazy[L]=comp(a, lazy[L]), L++;
            if (R&1) R--, lazy[R]=comp(a, lazy[R]);

            L>>=1; R>>=1;
        }

        recalc_above(L0); recalc_above(R0);
    }

    void update(int k, M x){
        int m=k+n;
        propagate_above(m);
        data[m]=x; lazy[m]=id;
        recalc_above(m);
    }

    M product(int l, int r){
        int L0,R0;
        tie(L0,R0)=range_propagate(l,r);

        int L=l+n, R=r+n;
        M vL=unit, vR=unit;
        while (L<R){
            if (L&1) vL=calc(vL, evaluate_at(L)), L++;
            if (R&1) R--, vR=calc(evaluate_at(R), vR);

            L>>=1; R>>=1;
        }

        return calc(vL, vR);
    }

    M all_product(){return product(0,n);}

    void refresh(){
        for (int m=1; m<2*n; m++){
            data[m]=evaluate_at(m);
            if ((m<n) && (lazy[m]!=id)){
                lazy[m<<1]  =comp(lazy[m], lazy[m<<1]);
                lazy[m<<1|1]=comp(lazy[m], lazy[m<<1|1]);
            }
            lazy[m]=id;
        }
    }
};

template<typename T>
Lazy_Segment_Tree<pair<T, int>,T> Sum_Update_Lazy_Segment_Tree(const int &n, const T &unit){
    using U=pair<T, int>;
    auto calc=[](U x, U y) -> U {return make_pair(x.first+y.first, x.second+y.second);};
    auto op=[](T a, U x) -> U {return make_pair(x.second*a,x.second);};
    auto comp=[](T a, T b) -> T {return a;};
    return Lazy_Segment_Tree<U,T>(vector<U>(n, make_pair(unit, 1)), calc, make_pair(unit,0), op, comp, unit);
}

int main(){
    int N,Q; cin >> N >> Q;

    auto S=Sum_Update_Lazy_Segment_Tree<int>(N,0);
    int m,x,s,t;
    for (int q=0; q<Q; q++){
        scanf("%d",&m);

        if (m==0){
            scanf("%d%d%d",&s,&t,&x);
            S.operate(s,t+1,x);
        }else{
            scanf("%d%d",&s,&t);
            cout << S.product(s,t+1).first << "\n";
        }
    }
}

