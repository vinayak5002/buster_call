#include <iostream>
#include <vector>
#include <string>
#include <queue>

using namespace std;

enum TYPE {
	ROOT, INODE, LEAF
};

class NodeBinary {
private:
	int _parent = -1;
	int _depth = -1;
	int _degree = -1;
	int _sibling = -1;
	int _height = -1;
	TYPE _type = TYPE::ROOT;
	pair<int, int> _children{};

public:
	void SetParent(const int parent) {
		_parent = parent;
	}
	void SetChildren(const int l, const int r) {
		_children.first = l;
		_children.second = r;
	}
	void SetType(const TYPE t) {
		_type = t;
	}
	void SetDepth(const int d) {
		_depth = d;
	}
	void SetDegree() {
		_degree = this->GetNumChildren();
	}
	void SetSibling(const int s) {
		_sibling = s;
	}
	void SetHeight(const int h) {
		_height = h;
	}
	pair<int, int> GetChildren() const {
		return _children;
	}
	int GetNumChildren() const {
		int cnt = 0;
		if (_children.first != -1)cnt++;
		if (_children.second != -1)cnt++;
		return cnt;
	}
	int GetParent() const {
		return _parent;
	}
	TYPE GetType()const {
		return _type;
	}
	string GetTypeString() const {
		switch (_type)
		{
		case ROOT:
			return "root";
		case INODE:
			return "internal node";
		case LEAF:
			return "leaf";
		default:
			return "";
		}
	}
	int GetDepth()const {
		return _depth;
	}
	int GetDegree()const {
		return _degree;
	}
	int GetSibling()const {
		return _sibling;
	}
	int GetHeight()const {
		return _height;
	}
};

template<typename T>int FindRoot(const T& node) {
	int index = -1;
	for (int i = 0; i < node.size(); i++) {
		if (node[i].GetType() == TYPE::ROOT) {
			index = i;
			break;
		}
	}
	return index;
}

template<typename T> void CalcDepth(T& node) {

	int index = FindRoot(node);

	//find parent
	queue<int> q;
	q.push(index);
	node[index].SetDepth(0);
	while (!q.empty()) {
		int tmp = q.front();
		q.pop();
		if (tmp != index) {
			int d = node[node[tmp].GetParent()].GetDepth();
			d++;
			node[tmp].SetDepth(d);
		}

		pair<int, int> c = node[tmp].GetChildren();
		if (c.first != -1) {
			q.push(c.first);
		}
		if (c.second != -1) {
			q.push(c.second);
		}

	}

}

template<typename T> void CalcHeight(T& node) {

	int index = FindRoot(node);

	//calc root's height
	//get all leaves
	queue<int> ls;
	for (int i = 0; i < node.size(); i++) {
		if (node[i].GetType() == TYPE::LEAF) {
			ls.push(i);
			node[i].SetHeight(0);
		}
	}
	int max = -1;
	while (!ls.empty()) {
		int tmp = ls.front();
		ls.pop();

		int cnt = 0;
		while (node[tmp].GetType() != TYPE::ROOT) {
			if (node[node[tmp].GetParent()].GetHeight() < node[tmp].GetHeight() + 1) {
				node[node[tmp].GetParent()].SetHeight(node[tmp].GetHeight() + 1);
			}
			tmp = node[tmp].GetParent();
			cnt++;
		}
		if (max < cnt)max = cnt;
	}
	node[index].SetHeight(max);

}

// B
int main() {

	int n;
	cin >> n;
	vector<NodeBinary> p(n);

	for (int i = 0; i < n; i++) {
		int id, l, r;
		cin >> id >> l >> r;

		//set children
		p[id].SetChildren(l, r);

		if (l != -1) {
			p[l].SetParent(id);
			if (p[l].GetType() == TYPE::ROOT) {
				p[l].SetType(TYPE::INODE);
			}
		}
		if (r != -1) {
			p[r].SetParent(id);
			if (p[r].GetType() == TYPE::ROOT) {
				p[r].SetType(TYPE::INODE);
			}
		}
		if (l != -1 && r != -1) {
			p[l].SetSibling(r);
			p[r].SetSibling(l);
		}
		else if (l == -1 && r == -1) {
			p[id].SetType(TYPE::LEAF);
		}
		p[id].SetDegree();
	}
	if (n == 1) {
		p[0].SetType(TYPE::ROOT);
	}

	//calc depth
	CalcDepth(p);
	CalcHeight(p);

	for (int i = 0; i < n; i++) {
		cout << "node " << i << ": "
			<< "parent = " << p[i].GetParent() << ", "
			<< "sibling = " << p[i].GetSibling() << ", "
			<< "degree = " << p[i].GetDegree() << ", "
			<< "depth = " << p[i].GetDepth() << ", "
			<< "height = " << p[i].GetHeight() << ", "
			<< p[i].GetTypeString() << endl;
	}

	return 0;
}


