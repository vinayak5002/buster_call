#include <iostream>
#include <string>
#include <vector>
#include <cmath>

using namespace std;
using vector_ll = vector<long long>;
using ll = long long;
ll* get_parent(int id, vector_ll &vec){
    int id_w = floor(id/2) -1;
    if(0<=id_w && id_w<vec.size())return &(vec[id_w]);
    else return nullptr;
}
ll* get_left(int id, vector_ll &vec){
    int id_w = 2*id-1;
    if(0<=id_w && id_w<vec.size())return &(vec[id_w]);
    else return nullptr;
}
ll* get_right(int id, vector_ll &vec){
    int id_w = 2*id;
    if(0<=id_w && id_w<vec.size())return &(vec[id_w]);
    else return nullptr;
}
void print(vector_ll &vec){
    for(int i=1; i<=vec.size(); ++i){
        cout<<"node "<<i<<": key = "<<vec[i-1]<<", ";
        ll *parent, *left, *right;
        parent = get_parent(i, vec);
        left = get_left(i, vec);
        right = get_right(i, vec);
        if(parent!=nullptr)cout<<"parent key = "<<*parent<<", ";
        if(left!=nullptr)cout<<"left key = "<<*left<<", ";
        if(right!=nullptr)cout<<"right key = "<<*right<<", ";
        cout<<endl;
    }
}
int main(){
    long int n;
    cin>>n;
    vector_ll vec(n);
    for(auto &x : vec){
        cin>>x;
    }
    print(vec);
}
