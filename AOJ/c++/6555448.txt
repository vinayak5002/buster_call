#include <iostream>
#include <queue> 
using namespace std;
typedef pair<int,int> P;
int N,M,k;
char m[1000][1001];
int d[1000][1001];
int dx[]={1,0,-1,0};
int dy[]={0,1,0,-1};
char goal;
int sx,sy;
int ans=0;
int INF=0x3f3f3f3f;
int bfs(){
	for(int i=0;i<N;i++){
		for(int j=0;j<M;j++) d[i][j]=INF;
	}
	int ans=INF;
	d[sx][sy]=0;
	queue<P> que;
	que.push(P(sx,sy));
	while(!que.empty()){
		P p=que.front();
		que.pop();
		int x=p.first;
		int y=p.second;
		if(m[x][y]==goal){
			sx=x;
			sy=y;
			ans=d[x][y];
			break;
		}
		for(int i=0;i<4;i++){
			int nx=x+dx[i];
			int ny=y+dy[i];
			if(nx>=0&&nx<N&&ny>=0&&ny<M&&m[nx][ny]!='X'&&d[nx][ny]==INF){
				d[nx][ny]=d[x][y]+1;
				que.push(P(nx,ny));
			}
		}
	}
	return ans;
}
int main(){
	int res=0;
	scanf("%d%d%d",&N,&M,&k);
	for(int i=0;i<N;i++){
		getchar();
		for(int j=0;j<M;j++){
			scanf("%c",&m[i][j]);
			if(m[i][j]=='S') {
				sx=i;
				sy=j;
			}
		}
	}
	for(int i=1;i<=k;i++){
		goal='0'+i;
		res+=bfs();
	}
	printf("%d\n",res);
	return 0;
} 
