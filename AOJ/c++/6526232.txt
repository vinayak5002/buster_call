#include <iostream>
#include <math.h>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <queue>
#include <set>

using namespace std;

#undef SHRT_MIN
#undef SHRT_MAX
#undef USHRT_MAX
#undef INT_MIN
#undef UINT_MAX
#undef LONG_MIN
#undef LONG_MAX
#undef ULONG_MAX
#undef LLONG_MAX
#undef LLONG_MIN
#undef ULLONG_MAX
#define SHRT_MIN    (-32768)
#define SHRT_MAX      32767
#define USHRT_MAX     0xffff
#define INT_MIN     (-2147483647 - 1)
#define INT_MAX       2147483647
#define UINT_MAX      0xffffffff
#define LONG_MIN    (-2147483647L - 1)
#define LONG_MAX      2147483647L
#define ULONG_MAX     0xffffffffUL
#define LLONG_MAX     9223372036854775807
#define LLONG_MIN   (-9223372036854775807 - 1)
#define ULLONG_MAX    0xffffffffffffffffu

#define vecALL(vec) (vec).begin() , (vec).end() 

#define vecSORT(vec) sort(vecALL(vec))
#define vecrSORT(vec) sort(vec.rbegin(), vec.rend())

typedef long long llong;
typedef unsigned long long ullong;

//オーバーフロー対策
#define int llong
#define uint ullong

#define AOJ
signed main() {
#ifndef AOJ
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
#endif
	int N, W;
	cin >> N >> W;
	vector<int>value(N);
	vector<int>weight(N);
	for (int i = 0; i < N; i++)cin >> value[i] >> weight[i];
	vector<vector<int> >dp(N + 1, vector<int>(W + 1));

	for (int n = 0; n < N; n++) {
		for (int w = 0; w <= W; w++) {
			if (w >= weight[n])dp[n + 1][w] = max(max(dp[n][w], dp[n][w - weight[n]] + value[n]), dp[n + 1][w - weight[n]] + value[n]);
			else dp[n + 1][w] = dp[n][w];
		}
	}
	cout << dp[N][W] << endl;
}

