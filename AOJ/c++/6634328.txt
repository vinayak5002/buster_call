#include<bits/stdc++.h>
using namespace std;

const double pi = 3.14159265359;
int N,M,K;
double n;

int v_to_num(int a,int b){
  int res = 0;
  res = N*a+b;
  return res;
}

pair<int,int> num_to_v(int num){
  int i = num/N;
  int j = num%N;
  return make_pair(i,j);
}

double dist(int ax,int ay,int bx,int by){
  double a = ax;
  double b = bx;
  double d = abs(ay-by);
  double t = d*2*pi/n;
  double Cos = cos(t);
  double res = sqrt(a*a+b*b-2*a*b*Cos);
  return res;
}

int main(){
  cout << fixed << setprecision(20);
  cin >> N >> M >> K;
  n = N;
  int rs,ps,rg,pg;
  cin >> rs >> ps >> rg >> pg;
  vector<vector<double>> dp(1000,vector<double>(K+1,1000000000));
  vector<vector<pair<int,double>>> G(1000);
  for(int i=1;i<=M;i++){
    for(int j=0;j<N;j++){
      G[v_to_num(i,j)].push_back(make_pair(v_to_num(i,(j+1)%N),dist(i,j,i,(j+1)%N)));
      G[v_to_num(i,(j+1)%N)].push_back(make_pair(v_to_num(i,j),dist(i,j,i,(j+1)%N)));
    }
  }
  for(int i=0;i<N;i++){
    for(int j=1;j<M;j++){
      G[v_to_num(j,i)].push_back(make_pair(v_to_num(j+1,i),1));
      G[v_to_num(j+1,i)].push_back(make_pair(v_to_num(j,i),1));
    }
  }
  for(int i=0;i<N;i++){
    for(int j=0;j<N;j++){
      if(i != j){
        G[v_to_num(1,i)].push_back(make_pair(v_to_num(1,j),dist(1,i,1,j)));
      }
    }
  }
  for(int i=2;i<=M;i++){
    for(int j=0;j<N;j++){
      int a = (j+1)%N;
      int b = (j+N-1)%N;
      G[v_to_num(i,j)].push_back(make_pair(v_to_num(i-1,a),dist(i,j,i-1,a)));
      G[v_to_num(i-1,a)].push_back(make_pair(v_to_num(i,j),dist(i,j,i-1,a)));
      G[v_to_num(i,j)].push_back(make_pair(v_to_num(i-1,b),dist(i,j,i-1,b)));
      G[v_to_num(i-1,b)].push_back(make_pair(v_to_num(i,j),dist(i,j,i-1,b)));
    }
  }
  dp[v_to_num(rs,ps)][0] = 0;
  priority_queue<pair<double,pair<int,int>>,vector<pair<double,pair<int,int>>>,greater<pair<double,pair<int,int>>>> que;
  que.push(make_pair(0,make_pair(v_to_num(rs,ps),0)));
  while(!que.empty()){
    double d = que.top().first;
    int Num = que.top().second.first;
    int cnt = que.top().second.second;
    int x = num_to_v(Num).first;
    int y = num_to_v(Num).second;
    que.pop();
    for(auto e:G[Num]){
      int NNum = e.first;
      double cost = e.second;
      double nd = d+cost;
      int ncnt = cnt;
      int nx = num_to_v(NNum).first;
      int ny = num_to_v(NNum).second;
      int dx = abs(x-nx);
      int dy = abs(y-ny);
      dy = min(dy,N-dy);
      if(dx+dy >= 2) ncnt++;
      if(ncnt > K) continue;
      if(dp[NNum][ncnt] > nd){
        dp[NNum][ncnt] = nd;
        que.push(make_pair(nd,make_pair(NNum,ncnt)));
      }
    }
  }
  double ans = 1000000000;
  for(int i=0;i<=K;i++) ans = min(ans,dp[v_to_num(rg,pg)][i]);
  cout << ans << endl;
}
