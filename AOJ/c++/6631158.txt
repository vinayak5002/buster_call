#include <iostream>
#include <cmath>
#include <vector>

using namespace std;
using vector_ll = vector<long long>;
using ll = long long;

void max_heapify(vector_ll &A, ll i){
    ll l, r, largest;
    l=2*i;
    r=2*i+1;
    if(l<A.size() && A[l] > A[i])largest = l;
    else largest = i;
    if(r<A.size() && A[r] > A[largest])largest = r;
    if(largest!=i){
        swap(A[i], A[largest]);
        max_heapify(A, largest);
    }
}
void build_max_heap(vector<ll> &A){
    for(ll i=(A.size())/2; i>=1; --i){
        max_heapify(A, i);
    }
}
int main(){
    ll n;
    cin>>n;
    vector_ll A{0};
    for(ll i=1; i<=n; i++){
        ll x;
        cin>>x;
        A.push_back(x);
    }
    build_max_heap(A);
    for(ll i=1; i<=n; i++)cout<<" "<<A[i];
    cout<<endl;
}
