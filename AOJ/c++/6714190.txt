#include <bits/stdc++.h>

using namespace std;

typedef long long LL;
typedef long double LD;

#define rep(i,n) for(LL i=0;i<(n);i++)

template <class T>
void output(vector<T> &data){

    rep(i,data.size()){
        cout << data.at(i) << " ";
    }
    cout << endl;

}

template<>
void output(vector<string> &data){
 
    rep(i,data.size()){
        cout << data.at(i) << endl;
    }
 
}

template <class T>
void output(vector<vector<T>> &data){

    rep(i,data.size()){

        rep(j,data.at(i).size()){
            cout << data.at(i).at(j) << " ";
        }

        cout << endl;

    }

}

template <>
void output(vector<vector<bool>> &data){

    rep(i,data.size()){

        rep(j,data.at(i).size()){

            if(data.at(i).at(j)){
                cout << "*";
            }
            else{
                cout << "-";
            }

        }

        cout << endl;

    }

}

template<class T>
void input(vector<T> &data,LL n){
    
    rep(i,n){
        LL a; cin >> a;
        data.push_back(a);
    }

}

template<>
void input(vector<string> &data,LL n){

    rep(i,n){
        string s; cin >> s;
        data.push_back(s);
    }

}

template<class T>
void input(vector<vector<T>> &data,LL h, LL w){

    rep(i,h){
        vector<T> add;

        rep(j,w){
            T a; cin >> a;
            add.push_back(a);
        }

        data.push_back(add);

    }

}

LL temp(LL num1, LL num2, char a){
    LL result = 0;

    if(a == '+'){
        result = num1 + num2;
    }
    else if(a == '-'){
        result = num1-num2;
    }
    else if(a == '*'){
        result = num1*num2;
    }
    else{
        result = num1/num2;
    }

    return result;
}

LL calc(string &s,LL &pos){
    LL result = 0;
    LL num = 0;

    //cout << "-----------------" << endl;

    stack<pair<LL,char>> keep;

        while(pos < s.size()){

            if(!isdigit(s.at(pos))){

                if(s.at(pos) == '('){
                    pos++;
                    num = calc(s,pos);

                }
                else if(s.at(pos) == ')'){
                    //pos++;

                    LL result = temp(keep.top().first,num,keep.top().second);
                    //cout << "cals:" << num << endl;
                    keep.pop();

                    while(keep.size() != 0){
                        result = temp(keep.top().first,result,keep.top().second);
                        keep.pop();
                    }

                    //cout << "():" << result << endl;

                    return result;
                }
                else if(s.at(pos) == '='){
                    LL result = temp(keep.top().first,num,keep.top().second);
                    keep.pop();

                    while(keep.size() != 0){
                        result = temp(keep.top().first,result,keep.top().second);
                        keep.pop();
                    }

                    return result;
                }
                else{
                    // s.at(pos) = + - * /

                    if(keep.size() == 0){
                        keep.push(make_pair(num,s.at(pos)));
                        num = 0;
                    }
                    else if((keep.top().second == '+' || keep.top().second == '-') && (s.at(pos) == '*' || s.at(pos) == '/')){
                        keep.push(make_pair(num,s.at(pos)));
                        num = 0;
                    }
                    else{
                        LL result = temp(keep.top().first,num,keep.top().second);
                        keep.pop();
                        keep.push(make_pair(result,s.at(pos)));
                        num = 0;
                    }

                    //cout << "add:" << keep.top().first << " " << keep.top().second << endl;

                }

            }
            else{
                num *= 10;
                num += s.at(pos) - '0';
            }

            pos++;
        }

    return 0;
}

int main(){
    LL n;

    cin >> n;

    rep(i,n){
        string s; cin >> s;
        LL pos = 0;

        cout << calc(s,pos) << endl;

        

    }

    return 0;
}
