#include <bits/stdc++.h>
using namespace std;
#define int long long
#define INF 1e18
#define rep(i, n) for(int (i) = 0; (i) < (n); (i)++)
#define all(x) (x).begin(), (x).end()
typedef pair<int, int> P;
typedef pair<int, P> PP;
const int mod = 1000000007;
//const int mod = 998244353;

#define SIZE 32000000
int p;
bool is_prime[SIZE];
vector<int> prime;

void sieve(){
    rep(i, SIZE)is_prime[i] = true;
    is_prime[0] = is_prime[1] = false;
    for(int i = 2; i < SIZE; i++){
        if(!is_prime[i])continue;
        prime.push_back(i);
        p++;
        for(int j = i * 2; j < SIZE; j += i)is_prime[j] = false;
    }
}


signed main(){
    sieve();
    while(1){
        int n;
        cin >> n;
        if(n == 0)break;

        vector<int> f;//約数
        f.push_back(1);

        int tmp = n;
        for(int i = 0; i < p; i++){
            if(tmp < prime[i])break;
            if(tmp % prime[i] != 0)continue;
            int cnt = 0;
            while(1){
                if(tmp % prime[i] != 0)break;
                cnt++;
                tmp /= prime[i];
            }
            int m = 1;
            int F = f.size();
            for(int j = 0; j < cnt; j++){
                m *= prime[i];
                for(int k = 0; k < F; k++)f.push_back(f[k] * m);
            }
        }
        if(tmp != 1){
            int F = f.size();
            for(int i = 0; i < F; i++)f.push_back(f[i] * tmp);
        }
        sort(all(f));
        int F = f.size();

        int ans = n + 2;
        for(int i = 0; i < F && f[i] < 100000; i++){
            int x = n / f[i];
            int tmp_ = sqrt(x) + 10;
            for(int j = i; j < F && f[j] < tmp_; j++){
                if(x % f[j] != 0)continue;
                int y = x / f[j];
                ans = min(ans, f[i] + f[j] + y);
            }
        }
        cout << ans << endl;
    }
}
