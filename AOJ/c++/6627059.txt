#include <stdio.h>
#define MAX 100005
#define NIL -1


/* 左子右兄弟表現(left-child, right-sibling representation) */
struct Node
{
    /* 親のノード */
    int parent;
    /* 子のノード */
    int left;
    /* 左の兄弟ノード */
    int right;
} ;

struct Node T[MAX];
int  Depth[MAX];


/* 出力用関数 */
void print_node(int node)
{
    int i, child;
    printf("node %d: ", node);
    printf("parent = %d, ", T[node].parent);
    printf("depth = %d, ", Depth[node]);

    if (T[node.parent == NIL)
        printf("root, ");
    else if (T[node].left == NIL)
        printf("leaf, ");
    else
        printf("internal node, ");

    printf("[");

    for (i = 0, child = T[node].left; child!= NIL; i++, child = T[child].right)
    {
        if (i)
        {
            printf(", ");
        }
        printf("%d", child);
    }
    printf("]\n");
}

/* 再帰的に深さを求める */
void setDepth(int u,int p)
{
    Depth[u] =p;
    if(T[u].right!=NIL){
        setDepth(T[u].right,p);
    }
    if(T[u].left!=NIL){
        setDepth(T[u].left,p+1);
    }
}

int main(void)
{
    int i, j,N, N_child, node_num, child_num, left_child, right_sibling,root;
    scanf("%d", &N);

    /* treeを初期化 */
    for (i = 0; i < N; i++)
    {
        T[i].parent = NIL;
        T[i].left = NIL;
        T[i].right= NIL;
    }

    /* 格納 */
    for (i = 0; i < N; i++)
    {
        /* ノード番号と持つ子の数 */
        scanf("%d %d", &node_num, &N_child);

        /* 子の関係を格納する */
        for (j = 0; j < N_child; j++)
        {
            scanf("%d", &child_num);

            /* 
            最初の子ノードはleft_childに格納
            次からは最初の子ノードの兄弟なので、right_siblingに入れる。
             */
            if (j == 0)
                T[node_num].left = child_num;
            else
                T[left_child].right = child_num;

            /* 親ノードの番号を入れる */
            left_child = child_num;
            T[child_num].parent = node_num;
        }
    }

    /* rootノードを見つける */
    for (i = 0; i < N; i++)
        if (T[i].parent == NIL)
            root = i;

    /* 深さD[]に格納する */
    setDepth(root, 0);

    for (i = 0; i < N; i++)
        print_node(i);

    return 0;
}






