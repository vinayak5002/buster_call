#include <stdio.h>
#define MAX 20
#define NIL -1

typedef struct
{
    int parent;
    int left;
    int right;
} Node;

Node Tree[MAX];

int n, Depth[MAX];

void print_node(int u)
{
    int i;
	int child = Tree[u].left;
	int count = 0;
	
    printf("node %d: ", u);
    printf("parent = %d, ", Tree[u].parent);
    printf("depth = %d, ", Depth[u]);

    if (Tree[u].parent == NIL)
	{
        printf("root, ");
	}
    else if (Tree[u].left == NIL)
	{
        printf("leaf, ");
	}
    else
	{
        printf("internal node, ");
	}

    printf("[");
	
	while(child != NIL)
	{
		if(count != 0)
		{
			printf(", ");
		}
		printf("%d", child);
    	child = Tree[child].right;
		count++;
	}
    printf("]\n");
}

/* 深さを求める */
void setDepth(int u, int depth)
{
    Depth[u] = depth;
	
    if (Tree[u].right != NIL)
	{
        setDepth(Tree[u].right, depth);
	}
    if (Tree[u].left != NIL)
	{
        setDepth(Tree[u].left, depth + 1);
	}
}

int main(void)
{
    int n, i, j, node, child_num, child, left, right, root;
    scanf("%d", &n);

    for (i = 0; i < n; i++)
    {
        Tree[i].parent = NIL;
        Tree[i].left = NIL;
        Tree[i].right = NIL;
    }

    /* 格納 */
    for (i = 0; i < n; i++)
    {
        scanf("%d %d", &node, &child_num);

        for (j = 0; j < child_num; j++)
        {
            scanf("%d", &child);

            if (j == 0)
        	{
                Tree[node].left = child;/*最初の子ノードはleftに格納*/
        	}
            else
        	{
                Tree[left].right = child;
        	}

            left = child;
            Tree[child].parent = node;
        }
    }

    /* rootノード */
    for (i = 0; i < n; i++)
	{
        if (Tree[i].parent == NIL)
		{
            root = i;
		}
	}
    
    setDepth(root, 0);

    for (i = 0; i < n; i++)
	{
        print_node(i);
	}

    return 0;
}
