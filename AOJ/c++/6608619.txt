#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <bitset>
using namespace std;
using ll = long long;

pair<pair<int, int>, pair<int, int>> cut(pair<int, int> c, int s) {
    int w = c.first, d = c.second;
    int p = s%(w+d);
    pair<int, int> bigger(0, 0);
    if (p < w) { // vertical
        bigger.first = max(p, w-p);
        bigger.second = d;
        c.first = min(p,w-p);
    } else { // horizontal
        p -= w;
        bigger.first = w;
        bigger.second = max(p, d-p);
        c.second = min(p, d-p);
    }
    return make_pair(c, bigger);
}

int main() {
    while (true) {
        int n, w, d;
        cin >> n >> w >> d;
        if (n == 0 && w == 0 && d == 0) break;
        vector<pair<int, int>> cs;
        cs.emplace_back(w, d);
        while (n--) {
            int p, s;
            cin >> p >> s;
            // printf("[p: %d, s: %d] ", p, s);
            p--;
            // cout << cs[p].first << ", " << cs[p].second << endl;
            auto new_ps = cut(cs[p], s);
            auto smaller = new_ps.first;
            auto bigger = new_ps.second;
            /*
            for (int i = 0; i < (int)cs.size(); i++) {
                cout << "(";
                cout << cs[i].first << ", " <<  cs[i].second << ") ";
            }
            cout << endl;
            */
            for (int i = p; i < (int)cs.size()-1; i++) {
                cs[i] = cs[i+1];
            }
            cs.pop_back();
            cs.push_back(smaller);
            cs.push_back(bigger);
        }
        sort(cs.begin(), cs.end(), [](pair<int, int> a, pair<int, int> b) {
            return a.first * a.second < b.first * b.second;
        });
        for (int i = 0; i < (int)cs.size(); i++) {
            if (i > 0) cout << " ";
            cout << cs[i].first * cs[i].second;
        }
        cout << endl;
    }
    return 0;
}

