#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

class RMQ
{
    vector<int> data;
    int infinite = pow(2.0, 31) - 1;
    int n = 1;

public:
    RMQ(int _n)
    {
        while(n < _n) n *= 2;
        data.resize(2*n -1, infinite);
    }

    void update(int i, int x)
    {
        int num = i + n - 1;
        data[num] = x;
        while (num > 0)
        {
            num = (num - 1)/2;
            data[num] = min(data[2*num+1], data[2*num+2]);
        }
    }

    int query(int start, int end, int k, int left, int right)
    {
        if (right <= start || end <= left) return infinite;
        if (start <= left && right <= end) return data[k];

        int v1 = query(start, end, k*2+1, left, (left+right)/2);
        int v2 = query(start, end, k*2+2, (left+right)/2, right);
        return min(v1, v2);
    }

    int find(int start, int end)
    {
        return query(start, end+1, 0, 0, n);
    }

    void show(){
        for (int i = 0; i < data.size(); i++)
        {
            if(i) cout << " " << data[i];
            else cout << data[i];
        }
        cout << endl;
    }
};

int main()
{
    int n,q;
    cin >> n >> q;
    RMQ rmq(n);

    int com, x, y;
    for (int i = 0; i < q; i++)
    {
        cin >> com >> x >> y;
        switch(com){
            case 0:
                rmq.update(x, y);
                break;
            case 1:
                cout << rmq.find(x, y) << endl;
                break;
        }
    }
    rmq.show();
    return 0;
}

