#include<stdio.h>
#define MAX 1000000
#define NIL -1

/*二分木のノード*/
typedef struct{
    int parent;
    int left_child;
    int right_bro;
} Node;

Node T[MAX]; /*ツリーの要素配列*/
int n, D[MAX], H[MAX]; /*要素数nと二分木の深さD、高さH*/

void print(int);
void recursive(int, int);
int setHeight(int);
int getSibling(int);
int getdeg(int);

/*出力関数(ノード番号u,子の数vを与える)*/
void print(int u){
    int i, child_node;

    printf("node %d: ", u);
    printf("parent = %d, ", T[u].parent);
    printf("sibling = %d, ", getSibling(u));
    printf("degree = %d, ", getdeg(u));
    printf("depth = %d, ", D[u]);
    printf("height = %d, ", H[u]);

    /*ノードが根、葉、内部節点かどうかの判別*/
    if(T[u].parent == NIL){
        printf("root, "); /*親がいなければ根*/
    }
    else if(T[u].left_child == NIL){
        printf("leaf, ");/*子がいなければ葉*/
    }
    else{
        printf("internal node, ");/*根でも葉でもなければ内部節点*/
    }

}

/*再帰的に深さを求める*/
void recursive(int node_point, int depth){
    D[node_point] = depth;

    /*右の兄弟に同じ深さを設定*/
    if (T[node_point].right_bro != NIL)
    recursive(T[node_point].right_bro, depth);

    /* 最も左の子に自分の深さ+1を設定 */
    if (T[node_point].left_child != NIL)
    recursive(T[node_point].left_child, depth + 1);
}

int setHeight(int node_point){
    int h1, h2;
    h1=0;
    h2=0;

    if(T[node_point].left_child != NIL){
        h1 = setHeight(T[node_point].left_child)+1;
    }

    if(T[node_point].right_bro != NIL){
        h2 = setHeight(T[node_point].right_bro)+1;
    }
    
    if(h1 > h2){
        return H[node_point] = h1;
    }
    else{
        return H[node_point] = h2;
    }
}

int getSibling(int node_point){
    if(T[node_point].parent == NIL){return NIL;}
    if(T[T[node_point].parent].left_child != node_point && T[T[node_point].parent].left_child != NIL ){
        return T[T[node_point].parent].left_child;
        }
    if(T[T[node_point].parent].right_bro != node_point && T[T[node_point].parent].right_bro != NIL ){
        return T[T[node_point].parent].right_bro;
        }
    
    return NIL;
}

int getdeg(int node_point){
    int k=0;

    if(T[node_point].left_child != NIL){
        k++;
    }
    if(T[node_point].right_bro != NIL){
        k++;
    }

    return k;
}


int main(void){
    int i, j, node_num, left_child, child_num, root;

    scanf("%d", &n); /*要素数の入力*/

    /*ツリーの初期化*/

    for(i=0; i<n; i++){
        T[i].parent = NIL;
        T[i].left_child = NIL;
        T[i].right_bro = NIL;
    }

    /*ここから値の格納を行っていく*/

    for(i=0; i<n; i++){

        /*ノード番号と持つ子の数*/
        scanf("%d", &node_num);

            /*子の関係を格納する*/
        for(j=0; j<2; j++){

            scanf("%d", &child_num);

            /*最初の子ノードはleft_childに格納し、次からはその兄弟となるのでbroに格納*/

            if(j==0){
                T[node_num].left_child = child_num;
            }
            else{
                T[node_num].right_bro = child_num;
            }

            /*親ノードの番号を入れる*/
            left_child = child_num;
            T[child_num].parent = node_num;
        }
    }

    /*rootノードを見つける*/
    for(i=0;i<n;i++){
        if(T[i].parent == NIL){
            root = i;
        }
    }

    /*深さDに格納*/
    recursive(root, 0);

    setHeight(root);

    for(i=0;i<n;i++){
        print(i);
    }

    return 0;
}
