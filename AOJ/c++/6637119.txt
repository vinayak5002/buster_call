#include <bits/stdc++.h>
using std::cin;
using std::getline;
using std::cout;
using std::endl;
using std::string;
using std::bitset;
using std::vector;
using std::array;
using std::stack;
using std::queue;
using std::set;
using std::map;
using std::pair;
using llong = long long;
template<typename T>
using nlimits = std::numeric_limits<T>;
#define REP(i, n) for (int i = 0; i < static_cast<int>(n); ++i)
#define RREP(i, n) for (int i = static_cast<int>(n) - 1; i >= 0; --i)
#define FOR(i, a, b) for (int i = static_cast<int>(a); i < static_cast<int>(b); ++i)
#define RFOR(i, a, b) for (int i = static_cast<int>(a) - 1; i >= static_cast<int>(b); --i)


template<typename T>
void printArray(const T* a, const size_t n);


int N;
array<int, 100000> A{};

int Partition(int p, int r) {
    auto x = A[r];
    auto i = p - 1;
    FOR(j, p, r) {
        if (A[j] <= x) {
            ++i;
            std::swap(A[i], A[j]);
        }
    }
    std::swap(A[i + 1], A[r]);
    return i + 1;
}


int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> N;
    REP(i, N) cin >> A[i];
    int idx = Partition(0, N-1);
    
    REP(i, N) {
        if (i == 0) cout << A[0];
        if (i == idx) cout << " [" << A[idx] << "]";
        else cout << " " << A[i];
    }
    cout << endl;
}


template<typename T>
void printArray(const T* a, const size_t n) {
    string s = std::to_string(a[0]);
    FOR(i, 1, n) s += " " + std::to_string(a[i]);
    cout << s + "\n";
}

