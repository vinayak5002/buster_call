#include <bits/stdc++.h>

#ifdef _MSC_VER
#  include <intrin.h>
#else
#  include <x86intrin.h>
#endif

#include <limits>
#include <type_traits>

namespace suisen {
// ! utility
template <typename ...Types>
using constraints_t = std::enable_if_t<std::conjunction_v<Types...>, std::nullptr_t>;
template <bool cond_v, typename Then, typename OrElse>
constexpr decltype(auto) constexpr_if(Then&& then, OrElse&& or_else) {
	if constexpr (cond_v) {
		return std::forward<Then>(then);
	} else {
		return std::forward<OrElse>(or_else);
	}
}

// ! function
template <typename ReturnType, typename Callable, typename ...Args>
using is_same_as_invoke_result = std::is_same<std::invoke_result_t<Callable, Args...>, ReturnType>;
template <typename F, typename T>
using is_uni_op = is_same_as_invoke_result<T, F, T>;
template <typename F, typename T>
using is_bin_op = is_same_as_invoke_result<T, F, T, T>;

template <typename Comparator, typename T>
using is_comparator = std::is_same<std::invoke_result_t<Comparator, T, T>, bool>;

// ! integral
template <typename T, typename = constraints_t<std::is_integral<T>>>
constexpr int bit_num = std::numeric_limits<std::make_unsigned_t<T>>::digits;
template <typename T, unsigned int n>
struct is_nbit { static constexpr bool value = bit_num<T> == n; };
template <typename T, unsigned int n>
static constexpr bool is_nbit_v = is_nbit<T, n>::value;

// ?
template <typename T>
struct safely_multipliable {};
template <>
struct safely_multipliable<int> { using type = long long; };
template <>
struct safely_multipliable<long long> { using type = __int128_t; };
template <>
struct safely_multipliable<unsigned int> { using type = unsigned long long; };
template <>
struct safely_multipliable<unsigned long int> { using type = __uint128_t; };
template <>
struct safely_multipliable<unsigned long long> { using type = __uint128_t; };
template <>
struct safely_multipliable<float> { using type = float; };
template <>
struct safely_multipliable<double> { using type = double; };
template <>
struct safely_multipliable<long double> { using type = long double; };
template <typename T>
using safely_multipliable_t = typename safely_multipliable<T>::type;

template <typename T, typename = void>
struct rec_value_type {
	using type = T;
};
template <typename T>
struct rec_value_type<T, std::void_t<typename T::value_type>> {
	using type = typename rec_value_type<typename T::value_type>::type;
};
template <typename T>
using rec_value_type_t = typename rec_value_type<T>::type;

} // namespace suisen

// ! type aliases
using i128 = __int128_t;
using u128 = __uint128_t;

template <typename T>
using pq_greater = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <typename T, typename U>
using umap = std::unordered_map<T, U>;

// ! macros (capital: internal macro)
#define OVERLOAD2(_1,_2,name,...) name
#define OVERLOAD3(_1,_2,_3,name,...) name
#define OVERLOAD4(_1,_2,_3,_4,name,...) name

#define REP4(i,l,r,s)  for(std::remove_reference_t<std::remove_const_t<decltype(r)>>i=(l);i<(r);i+=(s))
#define REP3(i,l,r)	REP4(i,l,r,1)
#define REP2(i,n)	  REP3(i,0,n)
#define REPINF3(i,l,s) for(std::remove_reference_t<std::remove_const_t<decltype(l)>>i=(l);;i+=(s))
#define REPINF2(i,l)   REPINF3(i,l,1)
#define REPINF1(i)	 REPINF2(i,0)
#define RREP4(i,l,r,s) for(std::remove_reference_t<std::remove_const_t<decltype(r)>>i=(l)+fld((r)-(l)-1,s)*(s);i>=(l);i-=(s))
#define RREP3(i,l,r)   RREP4(i,l,r,1)
#define RREP2(i,n)	 RREP3(i,0,n)

#define rep(...)	OVERLOAD4(__VA_ARGS__, REP4   , REP3   , REP2   )(__VA_ARGS__)
#define rrep(...)   OVERLOAD4(__VA_ARGS__, RREP4  , RREP3  , RREP2  )(__VA_ARGS__)
#define repinf(...) OVERLOAD3(__VA_ARGS__, REPINF3, REPINF2, REPINF1)(__VA_ARGS__)

#define CAT_I(a, b) a##b
#define CAT(a, b) CAT_I(a, b)
#define UNIQVAR(tag) CAT(tag, __LINE__)
#define loop(n) for (std::remove_reference_t<std::remove_const_t<decltype(n)>> UNIQVAR(loop_variable) = n; UNIQVAR(loop_variable) --> 0;)

#define all(iterable) std::begin(iterable), std::end(iterable)
#define input(type, ...) type __VA_ARGS__; read(__VA_ARGS__)

#ifdef LOCAL
#  define debug(...) debug_internal(#__VA_ARGS__, __VA_ARGS__)

template <class T, class... Args>
void debug_internal(const char* s, T&& first, Args&&... args) {
	constexpr const char* prefix = "[\033[32mDEBUG\033[m] ";
	constexpr const char* open_brakets = sizeof...(args) == 0 ? "" : "(";
	constexpr const char* close_brakets = sizeof...(args) == 0 ? "" : ")";
	std::cerr << prefix << open_brakets << s << close_brakets << ": " << open_brakets << std::forward<T>(first);
	((std::cerr << ", " << std::forward<Args>(args)), ...);
	std::cerr << close_brakets << "\n";
}

#else
#  define debug(...) void(0)
#endif

// ! I/O utilities

// __int128_t
std::ostream& operator<<(std::ostream& dest, __int128_t value) {
	std::ostream::sentry s(dest);
	if (s) {
		__uint128_t tmp = value < 0 ? -value : value;
		char buffer[128];
		char* d = std::end(buffer);
		do {
			--d;
			*d = "0123456789"[tmp % 10];
			tmp /= 10;
		} while (tmp != 0);
		if (value < 0) {
			--d;
			*d = '-';
		}
		int len = std::end(buffer) - d;
		if (dest.rdbuf()->sputn(d, len) != len) {
			dest.setstate(std::ios_base::badbit);
		}
	}
	return dest;
}
// __uint128_t
std::ostream& operator<<(std::ostream& dest, __uint128_t value) {
	std::ostream::sentry s(dest);
	if (s) {
		char buffer[128];
		char* d = std::end(buffer);
		do {
			--d;
			*d = "0123456789"[value % 10];
			value /= 10;
		} while (value != 0);
		int len = std::end(buffer) - d;
		if (dest.rdbuf()->sputn(d, len) != len) {
			dest.setstate(std::ios_base::badbit);
		}
	}
	return dest;
}

// pair
template <typename T, typename U>
std::ostream& operator<<(std::ostream& out, const std::pair<T, U>& a) {
	return out << a.first << ' ' << a.second;
}
// tuple
template <unsigned int N = 0, typename ...Args>
std::ostream& operator<<(std::ostream& out, const std::tuple<Args...>& a) {
	if constexpr (N >= std::tuple_size_v<std::tuple<Args...>>) {
		return out;
	} else {
		out << std::get<N>(a);
		if constexpr (N + 1 < std::tuple_size_v<std::tuple<Args...>>) {
			out << ' ';
		}
		return operator<<<N + 1>(out, a);
	}
}
// vector
template <typename T>
std::ostream& operator<<(std::ostream& out, const std::vector<T>& a) {
	for (auto it = a.begin(); it != a.end();) {
		out << *it;
		if (++it != a.end()) out << ' ';
	}
	return out;
}
// array
template <typename T, size_t N>
std::ostream& operator<<(std::ostream& out, const std::array<T, N>& a) {
	for (auto it = a.begin(); it != a.end();) {
		out << *it;
		if (++it != a.end()) out << ' ';
	}
	return out;
}
inline void print() { std::cout << '\n'; }
template <typename Head, typename... Tail>
inline void print(const Head& head, const Tail &...tails) {
	std::cout << head;
	if (sizeof...(tails)) std::cout << ' ';
	print(tails...);
}
template <typename Iterable>
auto print_all(const Iterable& v, std::string sep = " ", std::string end = "\n") -> decltype(std::cout << *v.begin(), void()) {
	for (auto it = v.begin(); it != v.end();) {
		std::cout << *it;
		if (++it != v.end()) std::cout << sep;
	}
	std::cout << end;
}

__int128_t parse_i128(std::string& s) {
	__int128_t ret = 0;
	for (int i = 0; i < int(s.size()); i++) if ('0' <= s[i] and s[i] <= '9') ret = 10 * ret + s[i] - '0';
	if (s[0] == '-') ret = -ret;
	return ret;
}
__uint128_t parse_u128(std::string& s) {
	__uint128_t ret = 0;
	for (int i = 0; i < int(s.size()); i++) if ('0' <= s[i] and s[i] <= '9') ret = 10 * ret + s[i] - '0';
	return ret;
}
// __int128_t
std::istream& operator>>(std::istream& in, __int128_t& v) {
	std::string s;
	in >> s;
	v = parse_i128(s);
	return in;
}
// __uint128_t
std::istream& operator>>(std::istream& in, __uint128_t& v) {
	std::string s;
	in >> s;
	v = parse_u128(s);
	return in;
}
// pair
template <typename T, typename U>
std::istream& operator>>(std::istream& in, std::pair<T, U>& a) {
	return in >> a.first >> a.second;
}
// tuple
template <unsigned int N = 0, typename ...Args>
std::istream& operator>>(std::istream& in, std::tuple<Args...>& a) {
	if constexpr (N >= std::tuple_size_v<std::tuple<Args...>>) {
		return in;
	} else {
		return operator>><N + 1>(in >> std::get<N>(a), a);
	}
}
// vector
template <typename T>
std::istream& operator>>(std::istream& in, std::vector<T>& a) {
	for (auto it = a.begin(); it != a.end(); ++it) in >> *it;
	return in;
}
// array
template <typename T, size_t N>
std::istream& operator>>(std::istream& in, std::array<T, N>& a) {
	for (auto it = a.begin(); it != a.end(); ++it) in >> *it;
	return in;
}
template <typename ...Args>
void read(Args &...args) {
	(std::cin >> ... >> args);
}

// ! integral utilities

// Returns pow(-1, n)
template <typename T>
constexpr inline int pow_m1(T n) {
	return -(n & 1) | 1;
}
// Returns pow(-1, n)
template <>
constexpr inline int pow_m1<bool>(bool n) {
	return -int(n) | 1;
}

// Returns floor(x / y)
template <typename T>
constexpr inline T fld(const T x, const T y) {
	return (x ^ y) >= 0 ? x / y : (x - (y + pow_m1(y >= 0))) / y;
}
template <typename T>
constexpr inline T cld(const T x, const T y) {
	return (x ^ y) <= 0 ? x / y : (x + (y + pow_m1(y >= 0))) / y;
}

template <typename T, suisen::constraints_t<suisen::is_nbit<T, 16>> = nullptr>
__attribute__((target("popcnt"))) constexpr inline int popcount(const T x) { return _mm_popcnt_u32(x); }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 32>> = nullptr>
__attribute__((target("popcnt"))) constexpr inline int popcount(const T x) { return _mm_popcnt_u32(x); }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 64>> = nullptr>
__attribute__((target("popcnt"))) constexpr inline int popcount(const T x) { return _mm_popcnt_u64(x); }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 16>> = nullptr>
constexpr inline int count_lz(const T x) { return x ? __builtin_clz(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 32>> = nullptr>
constexpr inline int count_lz(const T x) { return x ? __builtin_clz(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 64>> = nullptr>
constexpr inline int count_lz(const T x) { return x ? __builtin_clzll(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 16>> = nullptr>
constexpr inline int count_tz(const T x) { return x ? __builtin_ctz(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 32>> = nullptr>
constexpr inline int count_tz(const T x) { return x ? __builtin_ctz(x) : suisen::bit_num<T>; }
template <typename T, suisen::constraints_t<suisen::is_nbit<T, 64>> = nullptr>
constexpr inline int count_tz(const T x) { return x ? __builtin_ctzll(x) : suisen::bit_num<T>; }
template <typename T>
constexpr inline int floor_log2(const T x) { return suisen::bit_num<T> -1 - count_lz(x); }
template <typename T>
constexpr inline int ceil_log2(const T x) { return floor_log2(x) + ((x & -x) != x); }
template <typename T>
constexpr inline int kth_bit(const T x, const unsigned int k) { return (x >> k) & 1; }
template <typename T>
constexpr inline int parity(const T x) { return popcount(x) & 1; }

// ! container

template <typename T, typename Comparator, suisen::constraints_t<suisen::is_comparator<Comparator, T>> = nullptr>
auto priqueue_comp(const Comparator comparator) {
	return std::priority_queue<T, std::vector<T>, Comparator>(comparator);
}

template <typename Iterable>
auto isize(const Iterable& iterable) -> decltype(int(iterable.size())) {
	return iterable.size();
}

template <typename T, typename Gen, suisen::constraints_t<suisen::is_same_as_invoke_result<T, Gen, int>> = nullptr>
auto generate_vector(int n, Gen generator) {
	std::vector<T> v(n);
	for (int i = 0; i < n; ++i) v[i] = generator(i);
	return v;
}
template <typename T>
auto generate_range_vector(T l, T r) {
	return generate_vector(r - l, [l](int i) { return l + i; });
}
template <typename T>
auto generate_range_vector(T n) {
	return generate_range_vector(0, n);
}

template <typename T>
void sort_unique_erase(std::vector<T>& a) {
	std::sort(a.begin(), a.end());
	a.erase(std::unique(a.begin(), a.end()), a.end());
}

template <typename InputIterator, typename BiConsumer>
auto foreach_adjacent_values(InputIterator first, InputIterator last, BiConsumer f) -> decltype(f(*first++, *last), void()) {
	if (first != last) for (auto itr = first, itl = itr++; itr != last; itl = itr++) f(*itl, *itr);
}
template <typename Container, typename BiConsumer>
auto foreach_adjacent_values(Container c, BiConsumer f) -> decltype(c.begin(), c.end(), void()) {
	foreach_adjacent_values(c.begin(), c.end(), f);
}

// ! other utilities

// x <- min(x, y). returns true iff `x` has chenged.
template <typename T>
inline bool chmin(T& x, const T& y) {
	if (y >= x) return false;
	x = y;
	return true;
}
// x <- max(x, y). returns true iff `x` has chenged.
template <typename T>
inline bool chmax(T& x, const T& y) {
	if (y <= x) return false;
	x = y;
	return true;
}

template <typename T, std::enable_if_t<std::is_integral_v<T>, std::nullptr_t> = nullptr>
std::string bin(T val, int bit_num = -1) {
	std::string res;
	if (bit_num >= 0) {
		for (int bit = bit_num; bit-- > 0;) res += '0' + ((val >> bit) & 1);
	} else {
		for (; val; val >>= 1) res += '0' + (val & 1);
		std::reverse(res.begin(), res.end());
	}
	return res;
}

template <typename T, std::enable_if_t<std::is_integral_v<T>, std::nullptr_t> = nullptr>
std::vector<T> digits_low_to_high(T val, T base = 10) {
	std::vector<T> res;
	for (; val; val /= base) res.push_back(val % base);
	if (res.empty()) res.push_back(T{ 0 });
	return res;
}
template <typename T, std::enable_if_t<std::is_integral_v<T>, std::nullptr_t> = nullptr>
std::vector<T> digits_high_to_low(T val, T base = 10) {
	auto res = digits_low_to_high(val, base);
	std::reverse(res.begin(), res.end());
	return res;
}

template <typename T>
std::string join(const std::vector<T>& v, const std::string& sep, const std::string& end) {
	std::ostringstream ss;
	for (auto it = v.begin(); it != v.end();) {
		ss << *it;
		if (++it != v.end()) ss << sep;
	}
	ss << end;
	return ss.str();
}

namespace suisen {}
using namespace suisen;
using namespace std;

struct io_setup {
	io_setup(int precision = 20) {
		std::ios::sync_with_stdio(false);
		std::cin.tie(nullptr);
		std::cout << std::fixed << std::setprecision(precision);
	}
} io_setup_ {};

// ! code from here

#include <cassert>
#include <vector>

namespace suisen {
	struct LowLink {
		int _n, _m;
		// list of edges
		std::vector<std::pair<int, int>> _edges;
		// vertex -> list of (adjacent vertex, edge id)
		std::vector<std::vector<std::pair<int, int>>> _g;
		// vertex -> pre order
		std::vector<int> _pre_order;
		std::vector<int> _low_link;
		// list of ids of bridges
		std::vector<int> _bridges;
		std::vector<int> _articulation_points;

		std::vector<int> _par;

		bool _built;

		LowLink() : LowLink(0) {}
		LowLink(const int n) : _n(n), _m(0), _g(n), _pre_order(n, -1), _low_link(n), _par(n, -1), _built(false) {}
		LowLink(const int n, const std::vector<std::pair<int, int>> &edges) : LowLink(n) {
			for (const auto &[u, v] : edges) add_edge(u, v);
			build();
		}
		
		int add_edge(int u, int v) {
			_built = false;
			_edges.emplace_back(u, v);
			_g[u].emplace_back(v, _m);
			_g[v].emplace_back(u, _m);
			return _m++;
		}

		void build() {
			dfs_for_all_connected_components();
			_built = true;
		}

		int vertex_num() const { return _n; }
		int edge_num()   const { return _m; }

		const std::pair<int, int>& edge(int edge_id) const { return _edges[edge_id]; }
		const std::vector<std::pair<int, int>>& edges() const { return _edges; }
		
		int pre_order(int v) const {
			assert(_built);
			return _pre_order[v];
		}
		int low_link(int v) const {
			assert(_built);
			return _low_link[v];
		}

		const std::vector<int>& bridge_ids() const {
			assert(_built);
			return _bridges;
		}
		const std::vector<int>& articulation_points() const {
			assert(_built);
			return _articulation_points;
		}

	private:
		void dfs(int u, int id, int& ord) {
			bool is_root = id < 0;
			bool is_articulation_point = false;
			int ch_cnt = 0;
			_pre_order[u] = _low_link[u] = ord++;
			for (const auto& [v, id2] : _g[u]) {
				if (id == id2) continue;
				if (_pre_order[v] < 0) {
					++ch_cnt;
					_par[v] = u;
					dfs(v, id2, ord);
					_low_link[u] = std::min(_low_link[u], _low_link[v]);
					if (_pre_order[u] <= _low_link[v]) {
						is_articulation_point = not is_root;
						if (_pre_order[u] != _low_link[v]) _bridges.push_back(id2);
					}
				} else {
					_low_link[u] = std::min(_low_link[u], _pre_order[v]);
				}
			}
			if (is_articulation_point or (is_root and ch_cnt > 1)) _articulation_points.push_back(u);
		}

		void dfs_for_all_connected_components() {
			for (int i = 0, ord = 0; i < _n; ++i) {
				if (_pre_order[i] < 0) dfs(i, -1, ord);
			}
		}
	};
} // namespace suisen

namespace suisen {
	struct TwoEdgeConnectedComponents : public LowLink {
		TwoEdgeConnectedComponents()
			: TwoEdgeConnectedComponents(0) {}
		TwoEdgeConnectedComponents(const int n)
			: LowLink(n), _comp_id(_n, -1), _comp_num(0) {}
		TwoEdgeConnectedComponents(const int n, const std::vector<std::pair<int, int>> &edges)
			: LowLink(n, edges), _comp_id(_n, -1), _comp_num(0) {
			dfs_for_all_connected_components();
		}

		void build() {
			LowLink::build();
			dfs_for_all_connected_components();
		}

		int component_num() const {
			assert(_built);
			return _comp_num;
		}

		int operator[](int v) const {
			assert(_built);
			return _comp_id[v];
		}
		
		std::vector<std::vector<int>> groups() const {
			assert(_built);
			std::vector<std::vector<int>> res(component_num());
			for (int i = 0; i < _n; ++i) res[_comp_id[i]].push_back(i);
			return res;
		}

		// v -> list of (adjacent_vertex, edge_id)
		std::vector<std::vector<std::pair<int, int>>> reduced_forest() const {
			assert(_built);
			std::vector<std::vector<std::pair<int, int>>> reduced(_comp_num);
			for (int u = 0; u < _n; ++u) {
				for (const auto &[v, edge_id] : _g[u]) {
					const int comp_u = (*this)[u], comp_v = (*this)[v];
					if (comp_u != comp_v) reduced[comp_u].emplace_back(comp_v, edge_id);
				}
			}
			return reduced;
		}

	private:
		std::vector<int> _comp_id;
		int _comp_num;

		void dfs(int u, int p) {
			if (p >= 0 and _low_link[u] <= _pre_order[p]) {
				_comp_id[u] = _comp_id[p];
			} else {
				_comp_id[u] = _comp_num++;
			}
			for (const auto &e : _g[u]) {
				const int v = e.first;
				if (_comp_id[v] < 0) dfs(v, u);
			}
		}
		void dfs_for_all_connected_components() {
			_comp_num = 0;
			for (int i = 0; i < _n; ++i) {
				if (_comp_id[i] < 0) dfs(i, -1);
			}
		}
	};
} // namespace suisen

#include <limits>
#include <type_traits>

#include <vector>

namespace suisen {
class HeavyLightDecomposition {
	public:
		template <typename Q>
		using is_point_update_query = std::is_invocable<Q, int>;
		template <typename Q>
		using is_range_update_query = std::is_invocable<Q, int, int>;
		template <typename Q, typename T>
		using is_point_get_query  = std::is_same<std::invoke_result_t<Q, int>, T>;
		template <typename Q, typename T>
		using is_range_fold_query = std::is_same<std::invoke_result_t<Q, int, int>, T>;

		using Graph = std::vector<std::vector<int>>;

		HeavyLightDecomposition() = default;
		HeavyLightDecomposition(Graph &g) : n(g.size()), visit(n), leave(n), head(n), ord(n), siz(n), par(n, -1), dep(n, 0) {
			for (int i = 0; i < n; ++i) if (par[i] < 0) dfs(g, i, -1);
			int time = 0;
			for (int i = 0; i < n; ++i) if (par[i] < 0) hld(g, i, -1, time);
		}
		int size() const {
			return n;
		}
		int lca(int u, int v) const {
			for (;; v = par[head[v]]) {
				if (visit[u] > visit[v]) std::swap(u, v);
				if (head[u] == head[v]) return u;
			}
		}
		int la(int u, int k, int default_value = -1) const {
			if (k < 0) return default_value;
			while (u >= 0) {
				int h = head[u];
				if (visit[u] - k >= visit[h]) return ord[visit[u] - k];
				k -= visit[u] - visit[h] + 1;
				u = par[h];
			}
			return default_value;
		}
		int move_to(int u, int v, int d, int default_value = -1) const {
			if (d < 0) return default_value;
			const int w = lca(u, v);
			int uw = dep[u] - dep[w];
			if (d <= uw) return la(u, d);
			int vw = dep[v] - dep[w];
			return d <= uw + vw ? la(v, (uw + vw) - d) : default_value;
		}
		int dist(int u, int v) const {
			return dep[u] + dep[v] - 2 * dep[lca(u, v)];
		}
		template <typename T, typename Q, typename F, constraints_t<is_range_fold_query<Q, T>, is_bin_op<F, T>> = nullptr>
		T fold_path(int u, int v, T identity, F bin_op, Q fold_query, bool is_edge_query = false) const {
			T res = identity;
			for (;; v = par[head[v]]) {
				if (visit[u] > visit[v]) std::swap(u, v);
				if (head[u] == head[v]) break;
				res = bin_op(fold_query(visit[head[v]], visit[v] + 1), res);
			}
			return bin_op(fold_query(visit[u] + is_edge_query, visit[v] + 1), res);
		}
		template <
			typename T, typename Q1, typename Q2, typename F,
			constraints_t<is_range_fold_query<Q1, T>, is_range_fold_query<Q2, T>, is_bin_op<F, T>> = nullptr
		>
		T fold_path_noncommutative(int u, int v, T identity, F bin_op, Q1 fold_query, Q2 fold_query_rev, bool is_edge_query = false) const {
			T res_u = identity, res_v = identity;
			// a := lca(u, v)
			// res = fold(u -> a) + fold(a -> v)
			while (head[u] != head[v]) {
				if (visit[u] < visit[v]) { // a -> v
					res_v = bin_op(fold_query(visit[head[v]], visit[v] + 1), res_v);
					v = par[head[v]];
				} else { // u -> a
					res_u = bin_op(res_u, fold_query_rev(visit[head[u]], visit[u] + 1));
					u = par[head[u]];
				}
			}
			if (visit[u] < visit[v]) { // a = u
				res_v = bin_op(fold_query(visit[u] + is_edge_query, visit[v] + 1), res_v);
			} else { // a = v
				res_u = bin_op(res_u, fold_query_rev(visit[v] + is_edge_query, visit[u] + 1));
			}
			return bin_op(res_u, res_v);
		}
		template <typename Q, constraints_t<is_range_update_query<Q>> = nullptr>
		void update_path(int u, int v, Q update_query, bool is_edge_query = false) const {
			for (;; v = par[head[v]]) {
				if (visit[u] > visit[v]) std::swap(u, v);
				if (head[u] == head[v]) break;
				update_query(visit[head[v]], visit[v] + 1);
			}
			update_query(visit[u] + is_edge_query, visit[v] + 1);
		}
		template <typename T, typename Q, constraints_t<is_range_fold_query<Q, T>> = nullptr>
		T fold_subtree(int u, Q fold_query, bool is_edge_query = false) const {
			return fold_query(visit[u] + is_edge_query, leave[u]);
		}
		template <typename Q, constraints_t<is_range_update_query<Q>> = nullptr>
		void update_subtree(int u, Q update_query, bool is_edge_query = false) const {
			update_query(visit[u] + is_edge_query, leave[u]);
		}
		template <typename T, typename Q, constraints_t<is_point_get_query<Q, T>> = nullptr>
		T get_point(int u, Q get_query) const {
			return get_query(visit[u]);
		}
		template <typename Q, constraints_t<is_point_update_query<Q>> = nullptr>
		void update_point(int u, Q update_query) const {
			update_query(visit[u]);
		}
		std::vector<int> inv_ids() const {
			std::vector<int> inv(n);
			for (int i = 0; i < n; ++i) inv[visit[i]] = i;
			return inv;
		}
		int get_visit_time(int u) const {
			return visit[u];
		}
		int get_leave_time(int u) const {
			return leave[u];
		}
		int get_head(int u) const {
			return head[u];
		}
		int get_kth_visited(int k) const {
			return ord[k];
		}
		int get_subtree_size(int u) const {
			return siz[u];
		}
		int get_parent(int u) const {
			return par[u];
		}
		int get_depth(int u) const {
			return dep[u];
		}
		std::vector<int> get_roots() const {
			std::vector<int> res;
			for (int i = 0; i < n; ++i) if (par[i] < 0) res.push_back(i);
			return res;
		}
	private:
		int n;
		std::vector<int> visit, leave, head, ord, siz, par, dep;
		int dfs(Graph &g, int u, int p) {
			par[u] = p;
			siz[u] = 1;
			int max_size = 0;
			for (int &v : g[u]) {
				if (v == p) continue;
				dep[v] = dep[u] + 1;
				siz[u] += dfs(g, v, u);
				if (max_size < siz[v]) {
					max_size = siz[v];
					std::swap(g[u].front(), v);
				}
			}
			return siz[u];
		}
		void hld(Graph &g, int u, int p, int &time) {
			visit[u] = time, ord[time] = u, ++time;
			head[u] = p >= 0 and g[p].front() == u ? head[p] : u;
			for (int v : g[u]) {
				if (v != p) hld(g, v, u, time);
			}
			leave[u] = time;
		}
};
} // namespace suisen

int main() {
	input(int, n, m);

	vector<pair<int, int>> edges(m);
	read(edges);

	TwoEdgeConnectedComponents tcc(n);
	for (auto &[u, v] : edges) {
		--u, --v;
		tcc.add_edge(u, v);
	}
	tcc.build();

	for (auto &[u, v] : edges) {
		if (tcc[u] == tcc[v]) {
			if (tcc._pre_order[u] > tcc._pre_order[v]) {
				swap(u, v);
			}
			if (tcc._par[v] != u) {
				swap(u, v);
			}
		}
	}

	auto g = tcc.reduced_forest();
	const int c = g.size();

	vector<int> par(c, -1);
	auto dfs = [&](auto dfs, int u, int p) -> void {
		for (auto [v, eid] : g[u]) if (v != p) {
			par[v] = eid;
			dfs(dfs, v, u);
		}
	};
	dfs(dfs, 0, -1);

	vector<vector<int>> tmp_g(c);
	rep(i, c) for (auto [j, eid] : g[i]) {
		tmp_g[i].push_back(j);
	}
	HeavyLightDecomposition hld(tmp_g);

	vector<int> imos1(c + 1), imos2(c + 1);

	input(int, k);
	loop(k) {
		input(int, u, v);
		--u, --v;
		u = tcc[u], v = tcc[v];
		const int a = hld.lca(u, v);
		hld.update_path(u, a, [&](int l, int r) { ++imos1[l], --imos1[r]; }, true);
		hld.update_path(v, a, [&](int l, int r) { ++imos2[l], --imos2[r]; }, true);
	}

	partial_sum(all(imos1), imos1.begin());
	partial_sum(all(imos2), imos2.begin());

	auto inv_ids = hld.inv_ids();

	rep(i, 1, c) {
		if (imos1[i] and imos2[i]) {
			print("No");
			return 0;
		}
		int ch = inv_ids[i];
		if (imos1[i]) {
			int p = hld.get_parent(ch);
			auto &[u, v] = edges[par[ch]];
			if (tcc[u] == p) {
				swap(u, v);
			}
		} else {
			int p = hld.get_parent(ch);
			auto &[u, v] = edges[par[ch]];
			if (tcc[v] == p) {
				swap(u, v);
			}
		}
	}

	for (auto &[u, v] : edges) {
		++u, ++v;
	}
	print("Yes");
	print_all(edges, "\n");

	return 0;
}


