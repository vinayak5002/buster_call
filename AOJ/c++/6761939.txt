#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define N_MAX 100000 //max number intergers(n) in has table
#define Q_MAX 50000 //max number intergers(q) in has table

int main()
{
    int set_s[N_MAX];
    int set_t[Q_MAX];

    int n; //number of n intergers
    scanf("%d", &n);
    for(int i = 0; i<n; i++)
    {
        scanf("%d", &set_s[i]);
    }

    int q; //number of q intergers
    int count = 0; //count common numbers in set s and q
    scanf("%d", &q);
    for(int i = 0; i<q; i++)
    {
        scanf("%d", &set_t[i]);
        //printf("T: %d ", set_t[i]);
    }

    //selection sorting set_s before binary
    // for (int i = 0; i<n; i++)
    // {
    //     int min = i;
    //     for (int j = i; j < n ; j++)
    //     {
    //         if (set_s[j] < set_s[min]) //swap
    //         {
    //             min = j;
    //         }
    //     }
    //     if (set_s[i] != set_s[min]) //swap
    //     {
    //         int temp = set_s[min];
    //         set_s[min] = set_s[i];
    //         set_s[i] = temp;
    //     }
    //     //printf("S: %d ", set_s[i]);
    // }

    //algorithm == binary search algo


    //printf("%d N and %d Q\n", n, q);
    for(int i=0; i<q; i++)
    {
        int left = 0;
        int right = n;
        int mid_s;
        while(left <= right)
        {
            mid_s = (left+right)/2;
            if(set_t[i] == set_s[mid_s])
            {
                count++;
                break;
            }
            else if (set_t[i] > set_s[mid_s])
            {
                left = mid_s + 1;
            }
            else
            {
                right = mid_s-1;
            }
        }
    }

    printf("%d\n", count);
}







