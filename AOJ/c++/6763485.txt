#include <bits/stdc++.h>
#include <time.h>

using namespace std;
typedef long long ll;
typedef vector<int> VI;
typedef vector<long long> Vll;
typedef vector<char> VC;
typedef vector<double> VD;
ll mm=1000000000;ll MM=mm+7;
ll MM1=998244353;
#define rep(i, n) for(int i=0;i<n;i++)
#define REP(i,j,n) for(ll i=j;i<n;i++)
#define PI 3.141592653589793
#define inf 1e18

ll binarypow(ll a, ll n/*, ll mod*/){
    ll res =1;
    while(n>0){
        if(n & 1){
            res *=a;
            // res %= mod;
        }
        a*=a;
        // a %=mod;
        n >>=1;
    }
  return res;
}

struct UnionFind{
        vector<ll> par;         // par[自分]=親
        UnionFind(ll N) :par(N){
            rep(i,N) par[i]=i;
        }
    int root(ll x){ //データxの木の根を得る
        if(par[x] ==x)return x;
        return par[x]=root(par[x]);
    }
    void unite(ll x,ll y){ // xとyの木を併合
        ll rx=root(x);
        ll ry=root(y);
        if(rx==ry)return;
        par[rx]=ry;
    }

    bool same(ll x,ll y){ //x,yの木の根が同じならtrueを返す
        ll rx=root(x);
        ll ry=root(y);
        return rx==ry;
    }
};

ll modinv(ll a,ll m){
  ll b=m,u=1,v=0;
  while(b){
    ll t=a/b;
    a-=t*b; swap(a,b);
    u-=t*v; swap(u,v);
  }
  u%=m;
  if(u<0) u+=m;
  return u;
};

int main(){
    Vll ans;
    rep(itr,100){
       ll an=0;
       ll n;
       cin >> n;
       if(n==0)break;
       Vll b(n);
       ll sum=0;
       rep(i,n){
           cin >> b[i];
           sum+=b[i];
       }
       vector<vector<vector<bool>>>  dp(n,vector<vector<bool>>(sum+1,vector<bool>(sum+1,false)));
       dp[0][b[0]][0]=true;
       dp[0][0][b[0]]=true;
       dp[0][0][0]=true;
       ll lim=b[0];
       rep(i,n-1){
           rep(x,lim+1){
               rep(y,lim+1){
                   if(dp[i][x][y]){
                       dp[i+1][x][y]=true;
                       dp[i+1][x+b[i+1]][y]=true;
                       dp[i+1][x][y+b[i+1]]=true;
                   }
               }
           }
           lim+=b[i+1];
       }
       rep(x,sum){
           rep(y,sum){
               if(dp[n-1][x][y]){
                   ll z=sum-x-y;
                   ll an_mn=min(x,y);
                   an_mn=min(an_mn,z);
                   an=max(an,an_mn);
               }
           }
       }
        ans.emplace_back(an);
    }
    rep(i,ans.size())cout << ans[i] << endl;
}


