#include<cstdio>
#include<algorithm>
#include<queue>
#include<vector>
#include<map>
#include<iostream>
using namespace std;

struct edge {int to,cost;};
typedef pair<int,int>P;
int V,E;
const int INF=29292929;
vector<edge>G[202020];
int D[202020];
void dijkstra(int s){
    priority_queue<P,vector<P>,greater<P>>que;
    fill(D,D+V,INF);
    D[s]=0;
    que.push(P(0,s));
    while(que.size()){
        P p=que.top();
        que.pop();
        int v=p.second;
        if(D[v]<p.first)continue;
        for(int i=0;i<(int)G[v].size();i++){
            edge e=G[v][i];
            if(D[e.to]>D[v]+e.cost){
                D[e.to]=D[v]+e.cost;
                que.push(P(D[e.to],e.to));
            }
        }
    }
}
int main(){
    cin>>V>>E;
    int R;
    cin>>R;
    for(int i=0;i<E;i++){
        int A,B,C;
        cin>>A>>B>>C;
        G[A].push_back({B,C});
        G[B].push_back({A,C});

    }
    dijkstra(R);
    for(int i=0;i<V;i++){
        if(D[i]==INF)cout<<"INF"<<endl;
        else cout<<D[i]<<endl;
    }

}

