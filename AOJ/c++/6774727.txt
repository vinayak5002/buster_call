#include<bits/stdc++.h>
using namespace std;
vector<int> ans;

int main(){
  while(true){
    int n, m, t, p;
    cin >> n >> m >> t >> p;
    if(n == 0 && m == 0 && t == 0 && p == 0) break;
    vector<int> d(t), c(t), x(p), y(p);
    for(int i = 0; i < t; i++){
      cin >> d[i] >> c[i];
    }
    for(int i = 0; i < p; i++){
      cin >> x[i] >> y[i];
    }
    
    vector<vector<int>> paper(32, vector<int>(32, 1));
    vector<vector<int>> npaper(32, vector<int>(32, 0));
    
    for(int i = 0; i < t; i++){
      int nm = m, nn = n;
      if(d[i] == 1) nn = max(n - c[i], c[i]);
      else nm = max(m - c[i], c[i]);
      for(int i = 0; i < nm; i++){
        for(int j = 0; j < nn; j++){
          npaper[i][j] = 0;
        }
      }
      if(d[i] == 1){
        if(c[i] <= n/2){
          for(int j = 0; j < nm; j++){
            for(int k = 0; k < nn; k++){
              if(k < c[i]) npaper[j][k] = paper[j][c[i]-1-k] + paper[j][c[i]+k];
              else npaper[j][k] = paper[j][c[i]+k];
            }
          }
        }
        else{
          int res = n - c[i];
          for(int j = 0; j < nm; j++){
            for(int k = 0; k < nn; k++){
              if(k < res) npaper[j][k] = paper[j][c[i]-1-k] + paper[j][c[i]+k];
              else npaper[j][k] = paper[j][c[i]-1-k];
            }
          }
        }
      }
      else{
        if(c[i] <= m/2){
          for(int j = 0; j < nn; j++){
            for(int k = 0; k < nm; k++){
              if(k < c[i]) npaper[k][j] = paper[c[i]-1-k][j] + paper[c[i]+k][j];
              else npaper[k][j] = paper[c[i]+k][j];
            }
          }
        }
        else{
          int res = m - c[i];
          for(int j = 0; j < nn; j++){
            for(int k = 0; k < nm; k++){
              if(k < res) npaper[k][j] = paper[c[i]-1-k][j] + paper[c[i]+k][j];
              else npaper[k][j] = paper[c[i]-1-k][j];
            }
          }
        }
      }
      swap(paper, npaper);
      swap(nm, m);
      swap(nn, n);
    }
    for(int i = 0; i < p; i++){
      cout << paper[y[i]][x[i]] << endl;
    }
  }
  return 0;
}
