#include <bits/stdc++.h>
using namespace std ;
#define MAX 1000000
#define NIL -2000000002
#define INF 2000000002
#define MAXN 50
int n;
int t = NIL;

/* 二分探索木　union find木 */
struct UnionFind {
    //やっぱりツリー全体を1つのstructにするのは常識のようで。。
    vector<int> par; // 親ノード
    vector<int> rank; // ランク

    UnionFind(int n) {
        init(n);
    }

    void init(int n) {
        par.resize(n); rank.resize(n);
        for (int i = 0; i < n; i++) par[i] = i, rank[i] = 0;
    }

    int root(int x) {
        if (par[x] == x) {
            return x;
        }
        else {
            int r = root(par[x]);
            return par[x] = r;
        }
    }

    int issame(int x, int y) {
        //cout << "issame  x= " << x << ",  y= " << y <<"\n" ;
        //cout << "issame  Rx= " << root(x) << ",  Ry= " << root(y) <<"\n" ;

        if (root(x) == root(y)) {return 1; }
        else {return 0; }
    }

    bool merge(int x, int y) {
        x = root(x); y = root(y);
        if (x == y) return false;
        if (rank[x] < rank[y]) swap(x, y);
        if (rank[x] == rank[y]) ++rank[x];
        par[y] = x;
        return true;
    }
};

int main() {
    int q = 0;
    cin >> n >> q ;
    // nは登場人物の人数、qはクエリ（命令）の個数
    // この時点でn個のノードが成立している。
    UnionFind tree(n);
    
    for (int i = 0 ; i < q ; i++ ) {
        int a , b, c ;
        cin >> c >> a >> b ; // cはcommmand
        //  cout << c << "  " << a << "  " << b << endl;
        if (c==0) { tree.merge(a,b);  }  // unite
        else if (c==1)  { cout << tree.issame(a,b) << endl ; } // same?
    }
        
	return 0 ;
}

