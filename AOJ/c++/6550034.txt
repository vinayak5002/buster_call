#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <vector>
#include <numeric>
#include <algorithm>
#include <queue>
#include <string>
#include <random>
#include <array>
#include <climits>
#include <map>
#include <cassert>
#include <stack>
#include <iomanip>
#include <cfloat>
#include <bitset>
#include <fstream>
#include <chrono>
#include <memory>

using namespace std;
constexpr int MOD = 1'000'000'007;
void update_min(vector<long long int>& min_distance, vector<int>& source, const vector<bool>& confirmed, const vector<vector<pair<int, int>>> &taxi_graph, const vector<vector<pair<int, int>>> &walk_graph) {
	const auto comparator = [](const auto a, const auto b) {return a.second > b.second; };
	priority_queue<pair<int, long long int>, vector<pair<int, long long int>>, decltype(comparator)> queue(comparator);
	for (const auto& s : source) {
		for (const auto [next, diff] : taxi_graph[s]) {
			if (confirmed[next]) continue;
			if (min_distance[next] > min_distance[s] + diff) {
				min_distance[next] = min_distance[s] + diff;
				queue.emplace(next, min_distance[s] + diff);
			}
		}
	}
	vector<int> updated;
	while (!queue.empty()) {
		const auto [front, cost] = queue.top(); queue.pop();
		if (min_distance[front] < cost) continue;
		updated.push_back(front);
		for (const auto [next, diff] : taxi_graph[front]) {
			if (confirmed[next]) continue;
			if (min_distance[next] > cost + diff) {
				min_distance[next] = cost + diff;
				queue.emplace(next, cost + diff);
			}
		}
	}
	for (const auto& s : source) {
		for (const auto [next, diff] : walk_graph[s]) {
			if (confirmed[next]) continue;
			if (min_distance[next] > min_distance[s] + diff) {
				min_distance[next] = min_distance[s] + diff;
				queue.emplace(next, min_distance[s] + diff);
			}
		}
	}
	while (!queue.empty()) {
		const auto [front, cost] = queue.top(); queue.pop();
		if (min_distance[front] < cost) continue;
		updated.push_back(front);
		for (const auto [next, diff] : walk_graph[front]) {
			if (confirmed[next]) continue;
			if (min_distance[next] > cost + diff) {
				min_distance[next] = cost + diff;
				queue.emplace(next, cost + diff);
			}
		}
	}
	swap(updated, source);
}
int solve(const int n, const vector<tuple<int, int, int>> walk, const vector<tuple<int, int, int>> taxi) {
	constexpr int max_taxi = 40;
	vector<vector<pair<int, int>>> walk_graph(n), taxi_graph(n);
	for (const auto [u, v, c] : walk) {
		walk_graph[u].emplace_back(v, c);
		walk_graph[v].emplace_back(u, c);
	}
	vector<long long int> min_time(n, LLONG_MAX);
	min_time[0] = 0;
	vector<int> source{ 0 };
	vector<bool> confirmed(n, false);
	update_min(min_time, source, confirmed, taxi_graph, walk_graph); source.push_back(0);
	for (const auto [u, v, c] : taxi) {
		taxi_graph[u].emplace_back(v, c);
		taxi_graph[v].emplace_back(u, c);
	}
	long long int taxi_cost{ 0 };
	long long int result{ min_time[n - 1] };
	for (auto taxi_count = 0; taxi_count < max_taxi; ++taxi_count) {
		update_min(min_time, source, confirmed, taxi_graph, walk_graph);
		taxi_cost = (taxi_cost << 1) + 1;
		if (min_time[n - 1] != LLONG_MAX) {
			result = min(result, min_time[n - 1] + taxi_cost);
		}
	}
	if (result != LLONG_MAX) return result % MOD;
	while (!source.empty()) {
		update_min(min_time, source, confirmed, taxi_graph, walk_graph);
		taxi_cost = ((taxi_cost << 1) + 1) % MOD;
		if (min_time[n - 1] != LLONG_MAX) {
			return (min_time[n - 1] + taxi_cost) % MOD;
		}
		for (const auto s : source) {
			confirmed[s] = true;
		}
	}
	return -1;
}
int main() {
	while (true) {
		int n, p, q; cin >> n >> p >> q;
		if (n == 0 && p == 0 && q == 0) break;
		vector<tuple<int, int, int>> walk(p), taxi(q);
		for (auto& [u, v, c] : walk) {
			cin >> u >> v >> c; --u; --v;
		}
		for (auto& [u, v, c] : taxi) {
			cin >> u >> v >> c; --u; --v;
		}
		const auto result = solve(n, walk, taxi);
		cout << result << '\n';
	}
}
