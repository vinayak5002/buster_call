# 確認が必要な点
# 辞書型を使うメリット
# クラス内が何をしているのか分からない
# 関数？の行末に＼を使っている部分があるが、なぜ？調べても分からなかった


###クラスDice を定義 classとはオブジェクトを生成するための型？ 鯛焼きの型のようなもの？（岡崎先輩談）
class Dice:

### __init__ を書くことでインスタンスはクラス名を書くことで生成出来る （自動的に呼び出せるので便利？）
  
    def __init__(self, face_vals):      ###selfはインスタンス自身を表す？

        ### dect()で辞書を作成できる 辞書葉キーと値を対応づけるデータのこと
        self.faces = dict(zip(['top', 'front', 'right', 'left', 'back', 'bottom'], face_vals))
    
    def roll(self, direction):
        if direction == 'N':
            self.faces['top'], self.faces['front'], self.faces['front'], self.face['bottom'],\
            self.faces['back'] = self.faces['front'], self.faces['bottom'], \
            self.faces['back'], self.faces['top']
        elif direction == 'S':
            self.faces['top'], self.faces['front'], self.faces['bottom'], \
            self.faces['back'] = self.faces['back'], self.faces['top'], \
            self.faces['front'], self.faces['bottom']
        elif direction == 'E':
            self.faces['top'], self.faces['right'], self.faces['bottom'], \
            self.faces['left'] = self.faces['left'], self.faces['top'], \
            self.faces['right'], self.faces['bottom']
        else:
            self.faces['top'], self.faces['right'], self.faces['bottom'], \
            self.faces['left'] = self.faces['right'], self.faces['bottom'], \
            self.faces['left'], self.faces['top']


face_vals = input().split()     ###ここで最初の行の入力を代入

dice = Dice(face_vals)          ###クラスDiceを呼び出して、変数diceに代入してる？

####以下はバリューエラーが出てしまう 関数で渡すvalueの型が違う？

# for i in input():
#     dice.roll(i)

# print(dice.faces['top'])
