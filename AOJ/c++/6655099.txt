#include<stdio.h>
#define MAX 10000
#define NIL -1


typedef struct{
	int p;//parent
	int l;//left
	int r;//right
}Node;

Node T[MAX];//Tree
int n;
int D[MAX];//Depth
int H[MAX];//Height

void setDepth(int u, int d){
	
	if( u == NIL ){
		return;
	}
	D[u] = d;
	setDepth( T[u].l, d + 1 );
	setDepth( T[u].r, d + 1 );
	
}

int setHeight(int u){
	
	int h1 = 0;
	int h2 = 0;
	
	if( T[u].l != NIL ){
		h1 = setHeight(T[u].l) + 1;
	}
	if( T[u].r != NIL ){
		h2 = setHeight(T[u].r) + 1;
	}
	H[u] = ( h1 > h2 ? h1 : h2 );
	
	return H[u];
	
}

int getSibling(int u){
	
	if( T[u].p == NIL ){
		return NIL;
	}
	if( T[T[u].p].l != u && T[T[u].p].l != NIL ){
		return T[T[u].p].l;
	}
	if( T[T[u].p].r != u && T[T[u].p].r != NIL ){
		return T[T[u].p].r;
	}
	return NIL;
	
}


void print(int u){
	
	printf("node %d: ",u );
	printf("parent = %d, ", T[u].p);
	printf("sibling = %d, ", getSibling(u));
	
	int degree = 0;
	
	if( T[u].l == NIL ){
		degree++;
	}
	if( T[u].r == NIL ){
		degree++;
	}
	printf("degree = %d, ",degree);
	printf("depth = %d, ", D[u]);
	printf("height = %d, ", H[u]);
	
	if( T[u].p == NIL ){
		printf("root\n");
	}
	else if( T[u].l == NIL && T[u].r == NIL ){
		printf("leaf\n");
	}
	else{
		printf("internal node\n");
	}
}

int main(void){
	
	int i;
	int id, left, right;
	int root = 0;
	
	scanf("%d", &n);
	
	for( i = 0 ; i < n ; i++ ){
		T[i].p = NIL;
	}
	
	for( i = 0 ; i < n ; i++ ){
		scanf("%d %d,%d", &id, &left, &right);
		
		T[id].l = left;
		T[id].r = right;
		
		if( left != NIL ){
			T[left].p = id;
		}
		if( right != NIL ){
			T[right].p = id;
		}
	}
	
	for( i = 0 ; i < n ; i++ ){
		if( T[i].p == NIL ){
			root = i;
		}
	}
	
	setDepth(root,0);
	setHeight(root);
	
	for( i = 0 ; i < n ; i++ ){
		print(i);
	}
	
	return 0;
	
}


