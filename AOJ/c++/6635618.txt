#include <stdio.h>
#include <vector>
#include <map>
using namespace std;

int color[40960];
const int dxy[4][2] = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} };
vector<pair<int, int>> ed[40960];
map<pair<int, int>, int> mp;

void coloring(int x, int c) {
    color[x] = c;
    for (auto& i : ed[x]) {
        if (color[i.first] < 0) {
            coloring(i.first, c ^ i.second);
        }
    }
}

int main(void) {
    int n, x, y, res;
    char d;
    while (1) {
        scanf("%d", &n);
        if (n == 0) break;
        for (int i = 0; i < n; i++) {
            scanf("%d %d %c", &x, &y, &d);
            mp.insert({ {x, y}, i * 2 });
            for (int j = 0; j < 4; j++) {
                if (mp.find({ x + dxy[j][0], y + dxy[j][1] }) != mp.end()) {
                    ed[i * 2].push_back({ mp[{ x + dxy[j][0], y + dxy[j][1] }], 0 });
                    ed[mp[{ x + dxy[j][0], y + dxy[j][1] }]].push_back({ i * 2, 0 });
                }
            }
            if (d == 'x') x++;
            else y++;
            ed[i * 2].push_back({ i * 2 + 1, 1 });
            ed[i * 2 + 1].push_back({ i * 2, 1 });
            mp.insert({ {x, y}, i * 2 + 1 });
            for (int j = 0; j < 4; j++) {
                if (mp.find({ x + dxy[j][0], y + dxy[j][1] }) != mp.end()) {
                    if (mp[{ x + dxy[j][0], y + dxy[j][1] }] == i * 2) continue;
                    ed[i * 2 + 1].push_back({ mp[{ x + dxy[j][0], y + dxy[j][1] }], 0 });
                    ed[mp[{ x + dxy[j][0], y + dxy[j][1] }]].push_back({ i * 2 + 1, 0 });
                }
            }
        }

        for (int i = 0; i < n * 2; i++) color[i] = -1;
        for (int i = 0; i < n * 2; i++) {
            if (color[i] < 0) {
                coloring(i, 0);
            }
        }
        res = 1;
        for (int i = 0; i < n * 2; i++) {
            for (auto& j : ed[i]) {
                if ((color[i] ^ j.second) != color[j.first]) res = 0;
            }
        }
        printf("%s\n", res ? "Yes" : "No");
        for (int i = 0; i < n * 2; i++) ed[i].clear();
        mp.clear();
    }
    return 0;
}
