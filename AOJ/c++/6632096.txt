#include <iostream>
#include <cmath>
#include <iomanip>
#include <utility>
#include <vector>
#include <algorithm>
using namespace std;

struct Point {
    double x,y;
    Point() {}
    Point(double x,double y) : x(x),y(y) {}
    inline bool operator< (const Point& u) const {
        if(x==u.x) return y<u.y; return x<u.x;
    }
};

struct Circle {
    double x,y,r;
    Circle() {}
    Circle(const Point& pos,double r) : x(pos.x),y(pos.y),r(r) {}
};

struct Vector {
    double x,y;
    Vector() {}
    Vector(const Point& a,const Point& b) : x(b.x-a.x),y(b.y-a.y) {}
    inline double length() const {
        return sqrt(x*x+y*y);
    }
    inline double operator^(const Vector& a) const {
        return x*a.y - y*a.x;
    }
    inline double operator*(const Vector& a) const {
        return x*a.x + y*a.y;
    }
};

#define eps (1e-7)
inline int cmp(double x) {
    if(fabs(x)<eps) return 0;
    return x>eps?1:-1;
}

#define dis(a,b) (sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y)))

inline pair<Point,Point> getOutTangent(Circle& a,Circle& b,double f=1) {
    Point u = Point(a.x,a.y), v = Point(b.x,b.y); Vector vec(v,u),vec2;
    if(a.r>b.r) vec.x *= -1,vec.y *= -1;
    double d = dis(u,v), w = sqrt(d*d-(a.r-b.r)*(a.r-b.r)); 
    double cos_ = w/d,sin_ = sqrt(1-cos_*cos_),cur1 = sin_/d, cur2 = cos_/d;
    u.x += vec.x*cur1*a.r, u.y += vec.y*cur1*a.r; v.x += vec.x*cur1*b.r, v.y += vec.y*cur1*b.r;
    vec2.x = -vec.y*f; vec2.y = vec.x*f;
    u.x += vec2.x*cur2*a.r, u.y += vec2.y*cur2*a.r; v.x += vec2.x*cur2*b.r, v.y += vec2.y*cur2*b.r;
    u.x = !cmp(u.x)?0:u.x; u.y = !cmp(u.y)?0:u.y; v.x = !cmp(v.x)?0:v.x; v.y = !cmp(v.y)?0:v.y; 
    return make_pair(u,v);
}

inline pair<Point,Point> getInTangent(Circle& a,Circle& b,double f=1) {
    Point u = Point(a.x,a.y), v = Point(b.x,b.y); Vector vec(u,v),vec2; //u,v
    double d = dis(u,v), w = sqrt(d*d-(a.r+b.r)*(a.r+b.r)); //+
    double cos_ = w/d,sin_ = sqrt(1-cos_*cos_),cur1 = sin_/d, cur2 = cos_/d;
    u.x += vec.x*cur1*a.r, u.y += vec.y*cur1*a.r; v.x -= vec.x*cur1*b.r, v.y -= vec.y*cur1*b.r;//-
    vec2.x = vec2.x = -vec.y*f; vec2.y = vec.x*f;
    u.x += vec2.x*cur2*a.r, u.y += vec2.y*cur2*a.r; v.x -= vec2.x*cur2*b.r, v.y -= vec2.y*cur2*b.r;//-
    u.x = !cmp(u.x)?0:u.x; u.y = !cmp(u.y)?0:u.y; v.x = !cmp(v.x)?0:v.x; v.y = !cmp(v.y)?0:v.y; 
    return make_pair(u,v);
} 

inline vector<Point> tangent_Point(Circle& a,Circle& b) {
    vector<Point> vec;
    double dist = dis(Point(a.x,a.y),Point(b.x,b.y));
    if(cmp(dist-fabs(a.r-b.r))>=0) vec.push_back(getOutTangent(a,b,1).first);
    if(cmp(dist-fabs(a.r-b.r))>0) vec.push_back(getOutTangent(a,b,-1).first);
    if(cmp(dist-a.r-b.r)>=0) vec.push_back(getInTangent(a,b,1).first);
    if(cmp(dist-a.r-b.r)>0) vec.push_back(getInTangent(a,b,-1).first);
    return vec;
}

int main() {

    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    Circle a,b; cin >> a.x >> a.y >> a.r; cin >> b.x >> b.y >> b.r;
    vector<Point> vec = tangent_Point(a,b);
    sort(vec.begin(),vec.end());

    for(int i=0;i<vec.size();++i) cout << fixed << setprecision(9) << vec[i].x << " " << vec[i].y << "\n";
    return 0;
}



