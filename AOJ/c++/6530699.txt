#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct dice{
	int top;
	int front;
	int right;
	int left;
	int back;
	int bottom;			
}dice;

void N(dice *p);
void E(dice *p);
void W(dice *p);
void S(dice *p);
int check(dice *p,dice*q);

int main(void){
	
	int n,flag=0,i,j,k;
	int top,front,right,left,back,bottom;
	dice *p[100]={0};
	
	scanf("%d",&n);
	
	for(i=0;i<n;i++){
		
		p[i]=(dice*)malloc(sizeof(dice));
	
		scanf("%d%d%d%d%d%d",&top,&front,&right,&left,&back,&bottom);
		p[i]->top=top;
		p[i]->front=front;
		p[i]->right=right;
		p[i]->left=left;
		p[i]->back=back;
		p[i]->bottom=bottom;
	
	}
	
	for(j=0;j<n-1;j++){
		if(flag==1) break;
		for(k=0;k<n-1;k++){
			flag=check(p[j],p[k+j+1]);
			if(flag==1) break;
		}
	}
	
	if(flag==1) printf("No\n");
	else printf("Yes\n");
	
	return 0;
}

void N(dice *p){
	
	int temp;
	
	temp=p->top;
	p->top=p->front;
	p->front=p->bottom;
	p->bottom=p->back;
	p->back=temp;
}

void E(dice *p){
	
	int temp;
	
	temp=p->top;
	p->top=p->left;
	p->left=p->bottom;
	p->bottom=p->right;
	p->right=temp;
}

void W(dice *p){
	
	int temp;
	
	temp=p->top;
	p->top=p->right;
	p->right=p->bottom;
	p->bottom=p->left;
	p->left=temp;
}

void S(dice *p){
	
	int temp;
	
	temp=p->top;
	p->top=p->back;
	p->back=p->bottom;
	p->bottom=p->front;
	p->front=temp;
}

int check(dice *p,dice*q){
	
	int flag=0;
	int j,k,m,n;
	
	for(j=0;j<4;j++){
		N(p);
		if(p->top==q->top&&p->front==q->front&&p->right==q->right){
			flag=1;
			break;		
		} 
		for(k=0;k<4;k++){
			E(p);
			if(p->top==q->top&&p->front==q->front&&p->right==q->right){
				flag=1;
				break;
			}
			for(m=0;m<4;m++){
				W(p);
				if(p->top==q->top&&p->front==q->front&&p->right==q->right){
					flag=1;
					break;
				}
				for(n=0;n<4;n++){
					S(p);
					if(p->top==q->top&&p->front==q->front&&p->right==q->right){
					flag=1;
					break;
					}
				}
			}
		}
	}
	if(flag==1) return 1;
	else return 0;
}
