#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <ctime>
#include <cassert>
#include <complex>
#include <string>
#include <cstring>
#include <chrono>
#include <random>
#include <queue>
#include <bitset>
#include <stack>
#include <functional>

// AtCoder
// #include <atcoder/all>
// using namespace atcoder;

#ifdef LOCAL
    #define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
    #define eprintf(...)
#endif

#define rep_(i, a_, b_, a, b, ...) for (int i = (a), i##_len = (b); i < i##_len; ++i)
#define rep(i, ...) rep_(i, __VA_ARGS__, __VA_ARGS__, 0, __VA_ARGS__)
#define reprev_(i, a_, b_, a, b, ...) for (int i = (b)-1, i##_min = (a); i >= i##_min; --i)
#define reprev(i, ...) reprev_(i, __VA_ARGS__, __VA_ARGS__, 0, __VA_ARGS__)
#define all(x) (x).begin(), (x).end()
template <class T> bool chmax(T &a, const T &b) { if (a < b) { a = b; return 1; } return 0; }
template <class T> bool chmin(T &a, const T &b) { if (b < a) { a = b; return 1; } return 0; }
#define fls(x) (64 - __builtin_clzll(x))
#define pcnt(x) __builtin_popcountll(x)
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair <int,int> P;
typedef long double ld;

int main (void)
{
    cin.tie(0);
    ios::sync_with_stdio(false);
    int n, m;
    while (true) {
        cin >> n >> m;
        if (n == 0) break;
        vector<int> a(n), b(n);
        rep (i, n) cin >> a[i];
        rep (i, n) {
            cin >> b[i];
            b[i] = (b[i] - a[i] + m) % m;
        }
        constexpr ll INF = 1e18;
        vector<vector<ll>> dp(n, vector<ll>(n, INF));
        dp[0][0] = b[0];
        rep (i, 1, n) {
            rep (j, n) {
                if (j > 0) dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + m + b[i] - b[i - 1]);
                dp[i][j] = min(dp[i][j], dp[i - 1][j] + max(0, b[i] - b[i - 1]));
                if (j + 1 < n) dp[i][j] = min(dp[i][j], dp[i - 1][j + 1]);
            }
        }
        cout << *min_element(dp.back().begin(), dp.back().end()) << endl;
    }

    return 0;
}
