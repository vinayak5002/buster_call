#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, s, t) for (int i = (int)(s); i < (int)(t); ++i)
#define revrep(i, t, s) for (int i = (int)(t)-1; i >= (int)(s); --i)
#define all(x) begin(x), end(x)
template <typename T> bool chmax(T& a, const T& b) { return a < b ? (a = b, 1) : 0; }
template <typename T> bool chmin(T& a, const T& b) { return a > b ? (a = b, 1) : 0; }

template <typename T>
ostream& operator<<(ostream& os, const vector<T>& v) {
    for (int i = 0; i < (int) v.size(); ++i) os << v[i] << " ";
    return os;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);

    while (true) {
        int n;
        cin >> n;
        if (n == 0) break;
        vector<vector<int>> times(n, vector<int>(3));
        rep(i,0,n) {
            rep(j,0,3) cin >> times[i][j];
        }

        auto diff = [&](auto& t1, auto& t2) {
            int x1 = t1[0]/12*3600 + t1[1]*60 + t1[2];
            int x2 = t2[0]/12*3600 + t2[1]*60 + t2[2];
            int dt = x2 - x1;
            if (dt < 0) dt += 60*60*60;
            return dt;
        };

        auto rotate = [&](auto t, int d) {
            rep(j,0,3) t[j] = (t[j] + d) % 60;
            if (t[0]%5 != t[1]/12) return vector<int>();
            return t;
        };

        auto print = [&](auto& t1, auto& t2) {
            printf("%02d:%02d:%02d %02d:%02d:%02d\n", t1[0]/5, t1[1], t1[2], t2[0]/5, t2[1], t2[2]);
        };

        int dt = 1e9;
        vector<int> ans1(3), ans2(3);
        // fix the earliest time
        rep(i,0,n) {
            // fix the order of hands
            vector<int> ord = {0, 1, 2};
            do {
                vector<int> timei0(3);
                rep(j,0,3) timei0[j] = times[i][ord[j]];
                rep(d,0,60) {
                    auto timei1 = rotate(timei0, d);
                    if (timei1.empty()) continue;

                    vector<int> timei2 = timei1;

                    // get the time right after the timei1
                    rep(k,0,n) {
                        if (i == k) continue;
                        vector<int> after = {10000, 10000, 10000};

                        vector<int> ord2 = {0, 1, 2};
                        do {
                            vector<int> timek0(3);
                            rep(j,0,3) timek0[j] = times[k][ord2[j]];
                            rep(d2,0,60) {
                                vector<int> timek1 = rotate(timek0, d2);
                                if (!timek1.empty() && timei1 <= timek1) {
                                    chmin(after, timek1);
                                }
                            }
                        } while (next_permutation(all(ord2)));
                        chmax(timei2, after);
                    }
                    int ndt = diff(timei1, timei2);
                    if (ndt < dt || (ndt == dt && timei1 < ans1)) {
                        dt = ndt;
                        ans1 = timei1;
                        ans2 = timei2;
                    }
                }
            } while (next_permutation(all(ord)));
        }
        print(ans1, ans2);
    }
}
