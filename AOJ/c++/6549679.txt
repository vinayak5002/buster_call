#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#if 1
#define gc() getchar_unlocked()
#define pc(c) putchar_unlocked(c)
#else
#define gc() getchar()
#define pc(c) putchar(c)
#endif
int in()
{
	int n = 0, c = gc();
	while (isspace(c)) c = gc();
	if (c == '-') {
		c = gc();
		do n = 10 * n + (c & 0xf), c = gc(); while (c >= '0');
		return -n;
	}
	do n = 10 * n + (c & 0xf), c = gc(); while (c >= '0');
	return n;
}

void out(int n)
{
	int i;
	char ob[30];

	if (!n) pc('0');
	else {
		if (n < 0) pc('-'), n = -n;
		i = 0; while (n) ob[i++] = n % 10 + '0', n /= 10;
		while (i--) pc(ob[i]);
	}
}

typedef struct { int x, nxt; } T;
T tbl[200000002]; int sz = 1;
int top[1010], end[1010]; int ava[1010];

int main()
{
	int n, q, c, s, t, f;

	n = in(), q = in();
	while (q--) {
		c = gc() & 0xf, gc();
		if (c == 0) {    // insert(t, x)
			t = in(), tbl[sz].x = in();
			if (ava[t] == 0) top[t] = sz;
			else tbl[end[t]].nxt = sz;
			ava[t] = 1;
			end[t] = sz++;
		}
		else if (c == 1) { // dump(t)
			t = in();
			if (ava[t]) {
				f = 0, s = top[t];
				while (s >= 0) {
					if (f) pc(' ');
					else f = 1;
					out(tbl[s].x);
					if (s == end[t]) break;
					s = tbl[s].nxt;
				}
			}
			pc('\n');
		}
		else {   // splice(s, t)
			s = in(), t = in();
			if (ava[s]) {
				if (!ava[t]) top[t] = top[s], ava[t] = 1;
				else tbl[end[t]].nxt = top[s];
				end[t] = end[s];
				end[s] = 0, ava[s] = 0;
			}
		}
	}
	return 0;
}
