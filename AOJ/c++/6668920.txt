#include <bits/stdc++.h>
//#include <atcoder/all>
//using namespace atcoder;
using namespace std;
using ll = long long;
using vll = vector<ll>;
using vvll = vector<vll>;
using vvvll = vector<vvll>;
#define all(A) A.begin(),A.end()
#define rep(i, n) for (ll i = 0; i < (ll) (n); i++)
using pqr = priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>>;

template<class T>
bool chmax(T& p, T q) {
    if (p < q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}
template<class T>
bool chmin(T& p, T q) {
    if (p > q) {
        p = q;
        return 1;
    }
    else {
        return 0;
    }
}

ll gcd(ll(a), ll(b)) {
    ll c = a;
    while (a % b != 0) {
        c = a % b;
        a = b;
        b = c;
    }
    return b;
}


struct dsu {
public:
    dsu() : _n(0) {}
    dsu(int n) : _n(n), parent_or_size(n, -1) {}

    int merge(int a, int b) {

        int x = leader(a), y = leader(b);
        if (x == y) return x;
        if (-parent_or_size[x] < -parent_or_size[y]) std::swap(x, y);
        parent_or_size[x] += parent_or_size[y];
        parent_or_size[y] = x;
        return x;
    }

    bool same(int a, int b) {

        return leader(a) == leader(b);
    }

    int leader(int a) {
        if (parent_or_size[a] < 0) return a;
        return parent_or_size[a] = leader(parent_or_size[a]);
    }

    int size(int a) {
        return -parent_or_size[leader(a)];
    }

    std::vector<std::vector<int>> groups() {
        std::vector<int> leader_buf(_n), group_size(_n);
        for (int i = 0; i < _n; i++) {
            leader_buf[i] = leader(i);
            group_size[leader_buf[i]]++;
        }
        std::vector<std::vector<int>> result(_n);
        for (int i = 0; i < _n; i++) {
            result[i].reserve(group_size[i]);
        }
        for (int i = 0; i < _n; i++) {
            result[leader_buf[i]].push_back(i);
        }
        result.erase(
            std::remove_if(result.begin(), result.end(),
                [&](const std::vector<int>& v) { return v.empty(); }),
            result.end());
        return result;
    }

private:
    int _n;
    // root node: -1 * component size
    // otherwise: parent
    std::vector<int> parent_or_size;
};


ll mod = 1e9 + 7;
int main() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    while (1) {
        string S;
        cin >> S;
        if (S == "#")return 0;

        ll N = S.size();
        ll H = 1, W = 0;
        rep(i, N) {
            if (S[i] == '/')H++;
            if (H == 1) {
                if (S[i] == 'b')W++;
                else {
                    W += S[i] - '0';
                }
            }
        }
        vvll B(H, vll(W));
        ll P, Q, X, Y;
        cin >> P >> Q >> X >> Y;
        //cout<<H<<" "<<W<<endl;
        ll h = 0, w = 0;
        rep(i, N) {
            if (S[i] == '/') {
                h++;
                w = 0;
            }
            else if (S[i] == 'b') {
                B[h][w] = 1;
                w++;
            }
            else {
                w += S[i] - '0';
            }
        }
        //rep(h, H)rep(w, W)cout << B[h][w] << (w == W - 1 ? "\n" : " ");
        B[P - 1][Q - 1] = 0;
        B[X - 1][Y - 1] = 1;
        rep(h, H) {
            ll k = 0;
            rep(w, W) {
                if (B[h][w] == 1) {
                    if (k != 0) {
                        cout << k;
                        cout << "b";
                        k = 0;
                    }
                    else cout << "b";
                }
                else k++;

            }
            if (k != 0)cout << k;
            if (h != H - 1)cout << "/";
        }
        cout << endl;
    }
}
