#include <iostream>
#include <vector>
#include <array>
#include <algorithm>
#include <math.h>
#include <iomanip>
#include <map>
#include <unordered_map>
#include <queue>
#include <climits>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;

ull gcd (ull a, ull b) {
  if(b == 0) return a;

  return gcd(b, a % b);
}

ull lcm (ull a, ull b){
  // バッファ溢れを抑えるために順番大事！！！
  return a / gcd(a, b) * b;
}

ull calcDigitLength(ull n, int count) {
  if(n < 10) return count + 1;

  return calcDigitLength(n/10, count+1);
}

bool isPrime (ull a) {
  if(a == 0 || a == 1) return false;
  if(a == 2) return true;
  if(a == 3) return true;

  for(ull i = 2; i * i <= a; i++) {
    if(a % i == 0) {
      return false;
    }
  }

  return true;
}


const int MAX = 510000;
const int MOD = 1000000007;

long long fac[MAX], finv[MAX], inv[MAX];

// テーブルを作る前処理
void COMinit() {
    fac[0] = fac[1] = 1;
    finv[0] = finv[1] = 1;
    inv[1] = 1;
    for (int i = 2; i < MAX; i++){
        fac[i] = fac[i - 1] * i % MOD;
        inv[i] = MOD - inv[MOD%i] * (MOD / i) % MOD;
        finv[i] = finv[i - 1] * inv[i] % MOD;
    }
}

// 二項係数計算
long long COM(int n, int k){
    // COMinit();

    if (n < k) return 0;
    if (n < 0 || k < 0) return 0;
    return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;
}


int main () {
  int n, m;
  cin >> n >> m;

  vector<int> vec;
  vector<int> res_vec(n+1);
  for(int i = 0; i < res_vec.size(); i++)res_vec[i] = -1;
  res_vec[0] = 0;
  for(int i = 0; i < m; i++) {
    int c;
    cin >> c;
    vec.push_back(c);
    res_vec[c] = 1;
  }

  for(int i = 0; i < res_vec.size(); i++) {
    if(res_vec[i] != -1) {
      for(int j = 0; j < vec.size(); j++) {
        if(i + vec[j] <= n && (res_vec[i + vec[j]] == -1 || res_vec[i] + 1 < res_vec[i + vec[j]])) res_vec[i + vec[j]] = res_vec[i] + 1;
      }
    }

    // for(int j = 0; j < res_vec.size(); j++) cout << res_vec[j] << " ";
    // cout << endl;
  }

  cout << res_vec[n] << endl;
}
