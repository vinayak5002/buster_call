#include <bits/stdc++.h>
using namespace std;

struct Item{
    long long int value;
    long long int weight;
    double ratio ;
};

 bool comparetworatios(Item i1, Item i2) {
         return (i1.ratio >= i2.ratio); 
      }
class Solution
{
    public:
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    { long long int sumofweights = 0;
      double sumofvalues = 0;
        int count = 0;
     
      for(int i =0;i<n;i++){
         sumofweights += arr[i].weight ;
      }
      if(sumofweights <= W)
      {  for(int i=0;i<n;i++)
           {sumofvalues += (double)arr[i].value; }
      }
      else 
       {  sort(arr,arr+n,comparetworatios);
        
        
          while( W > 0 ) // W = 50;
          { W = W - arr[count].weight;
             if( W >= 0)
                {sumofvalues += (double) arr[count].value ;
                count = count + 1;  } 

          }
          if(W < 0)
          { W = W + arr[count].weight;
            sumofvalues += (double) ( W * arr[count].value)/arr[count].weight ;
            }
          
           
       }
       return sumofvalues;
        // Your code here
    }
        
};


int main()
{
    int t = 1;
    // cin >> t;
    // cout << setprecision(2) << fixed;
    while(t--)
    {int n;
    long long int W;
     cin >> n >> W;
     Item arr[n];
     for(int i=0;i<n;i++)
     { cin >> arr[i].value >> arr[i].weight ;
      arr[i].ratio =  (double)arr[i].value/(double)arr[i].weight ;}
       
     Solution ob;
     cout << ob.fractionalKnapsack(W,arr,n) << endl; 
    // for(int i =0;i<n;i++)
     //{
      //   cout << arr[i].weight << ' ' << arr[i].value << " " << arr[i].ratio << endl;
     //}
    
        }
    return 0;
}
