#include <iostream>
#include <string>
#include <algorithm>
#include <functional>
#include <vector>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cmath>
#include <cassert>
#include <queue>
#include <map>
#include <set>
using namespace std;
using Int = int64_t;
const Int INF = 1 << 30;
const Int MOD = (Int)1e9 + 7;
const Int MAX_N = (Int)1e5 + 5;
#define debug(x) cout << #x << ": " << x << endl
#define debug2(x, y) cout << #x << ": " << x << ", " << #y << ": " << y << endl;
template <typename T1, typename T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &p)
{
    os << p.first << " " << p.second;
    return os;
}
template <typename T>
ostream &operator<<(ostream &os, const vector<T> &v)
{
    for (int i = 0; i < (int)v.size(); i++)
        os << v[i] << (i + 1 != v.size() ? " " : "");
    return os;
}

using P = pair<int, int>;

class WeightedUnionFind
{
public:
    vector<int> parent;
    vector<int> root_diff;

    WeightedUnionFind(int size) : parent(size), root_diff(size)
    {
        for (int i = 0; i < size; i++)
        {
            parent[i] = i;
            root_diff[i] = 0;
        }
    }

    int root(int x)
    {
        int parent_x = parent[x];
        if (parent_x == x)
        {
            return x;
        }
        else
        {
            int root_x = root(parent_x); // 再帰を使ってルートを求める
            // 親は常に自身よりも大きいため、親とルートの差を使って現在のノードとルートの差を更新できる
            root_diff[x] += root_diff[parent_x];
            return parent[x] = root_x;
        }
    }

    void relate(int x, int y, int z)
    {
        int root_x = root(x);
        int root_y = root(y);

        if (root_x == root_y)
            return;

        parent[root_y] = root_x;

        // 経路圧縮のため木の深さは１以下かつ、a_yが根である
        // ただしroot()でroot_diffを更新していることに注意
        z = (z + root_diff[x]) - root_diff[y];
        root_diff[root_y] = z;
    }

    int diff(int x, int y)
    {
        return root(x) == root(y) ? root_diff[y] - root_diff[x] : INF;
    }
};

void solve()
{
    int N, Q;
    cin >> N >> Q;

    WeightedUnionFind uf(N);
    vector<int> ans;
    for (int i = 0; i < Q; i++)
    {
        int query;
        cin >> query;
        if (query)
        {
            int x, y;
            cin >> x >> y;
            ans.push_back(uf.diff(x, y));
        }
        else
        {
            int x, y, z;
            cin >> x >> y >> z;
            uf.relate(x, y, z);
        }
    }
    for (int a : ans)
    {
        if (a == INF)
            cout << "?" << endl;
        else
            cout << a << endl;
    }
}

signed main()
{
    cin.tie(0);
    ios::sync_with_stdio(false);
    solve();
    return 0;
}

