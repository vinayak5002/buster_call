#include<iostream>
#include<vector>

class Graph {
public:
	Graph(const int num_nodes) : num_nodes(num_nodes) {
		edges.assign(num_nodes, std::vector<int>(num_nodes, 0));
	}

	~Graph() {
		edges.clear();
	}

	void addEdge(const int n, const int v) {
		edges[n][v] = 1;
	}

	void printMatrix() {
		for (int i = 0; i < num_nodes; i++) {
			for (int j = 0; j < num_nodes; j++) {
				std::cout << edges[i][j];
				if (j != num_nodes - 1) {
					std::cout << " ";
				}
			}
			if (i != num_nodes - 1) {
				std::cout << std::endl;
			}
		}
	}

private:
	std::vector<std::vector<int>> edges;
	int num_nodes;
};

int main() {
	int num_nodes;
	std::cin >> num_nodes;
	Graph graph(num_nodes);
	// read edge
	for (int i = 0; i < num_nodes; i++) {
		int n, k;
		std::cin >> n >> k;
		for (int j = 0; j < k; j++) {
			int v;
			std::cin >> v;
			graph.addEdge(n-1, v-1);
		}
	}
	graph.printMatrix();
}
