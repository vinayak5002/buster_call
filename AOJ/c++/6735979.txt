#include <iostream>
#include <string>
#include <algorithm>
#include <functional>
#include <vector>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cmath>
#include <cassert>
#include <queue>
#include <map>
#include <set>
using namespace std;
using Int = int64_t;
using P = pair<Int, Int>;
const Int INF = 1 << 30;
const Int MOD = (Int)1e9 + 7;
const Int MAX_N = (Int)1e5 + 5;
#define debug(x) cout << #x << ": " << x << endl
#define debug2(x, y) cout << #x << ": " << x << ", " << #y << ": " << y << endl;
template <typename T1, typename T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &p)
{
    os << p.first << " " << p.second;
    return os;
}
template <typename T>
ostream &operator<<(ostream &os, const vector<T> &v)
{
    for (int i = 0; i < (int)v.size(); i++)
        os << v[i] << (i + 1 != v.size() ? " " : "");
    return os;
}

void reconstruct(queue<int> &pre_order, vector<int> in_order, vector<int> &post_order)
{
    int sub_root = pre_order.front();
    pre_order.pop();

    int sub_root_index = find(in_order.begin(), in_order.end(), sub_root) - in_order.begin();
    vector<int> sub_left_nodes, sub_right_nodes;
    for (int i = 0; i < (int)in_order.size(); i++)
    {
        if (i < sub_root_index)
            sub_left_nodes.push_back(in_order[i]);
        else if (i > sub_root_index)
            sub_right_nodes.push_back(in_order[i]);
    }

    if (not pre_order.empty())
    {
        if (sub_left_nodes.size() == 1)
            post_order.push_back(sub_left_nodes[0]);
        else if (sub_left_nodes.size() > 1)
            reconstruct(pre_order, sub_left_nodes, post_order);

        if (sub_right_nodes.size() == 1)
            post_order.push_back(sub_right_nodes[0]);
        else if (sub_right_nodes.size() > 1)
            reconstruct(pre_order, sub_right_nodes, post_order);

        post_order.push_back(sub_root);
    }
}

void solve()
{
    int N;
    cin >> N;

    queue<int> pre_order;
    vector<int> in_order, post_order;
    for (int i = 0; i < N; i++)
    {
        int node;
        cin >> node;
        pre_order.push(node);
    }

    for (int i = 0; i < N; i++)
    {
        int node;
        cin >> node;
        in_order.push_back(node);
    }

    reconstruct(pre_order, in_order, post_order);

    for (int i = 0; i < N; i++)
    {
        if (i)
            cout << " ";
        cout << post_order[i];
    }
    cout << endl;
}

signed main()
{
    cin.tie(0);
    ios::sync_with_stdio(false);
    solve();
    return 0;
}
