#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, s, t) for (int i = (int)(s); i < (int)(t); ++i)
#define revrep(i, t, s) for (int i = (int)(t)-1; i >= (int)(s); --i)
#define all(x) begin(x), end(x)
template <typename T> bool chmax(T& a, const T& b) { return a < b ? (a = b, 1) : 0; }
template <typename T> bool chmin(T& a, const T& b) { return a > b ? (a = b, 1) : 0; }

template <int mod>
class Modint {
    using mint = Modint;
    static_assert(mod > 0, "Modulus must be positive");

public:
    static constexpr int get_mod() noexcept { return mod; }

    constexpr Modint(long long y = 0) noexcept : x(y >= 0 ? y % mod : (y % mod + mod) % mod) {}

    constexpr int value() const noexcept { return x; }

    constexpr mint& operator+=(const mint& r) noexcept { if ((x += r.x) >= mod) x -= mod; return *this; }
    constexpr mint& operator-=(const mint& r) noexcept { if ((x += mod - r.x) >= mod) x -= mod; return *this; }
    constexpr mint& operator*=(const mint& r) noexcept { x = static_cast<int>(1LL * x * r.x % mod); return *this; }
    constexpr mint& operator/=(const mint& r) noexcept { *this *= r.inv(); return *this; }

    constexpr mint operator-() const noexcept { return mint(-x); }

    constexpr mint operator+(const mint& r) const noexcept { return mint(*this) += r; }
    constexpr mint operator-(const mint& r) const noexcept { return mint(*this) -= r; }
    constexpr mint operator*(const mint& r) const noexcept { return mint(*this) *= r; }
    constexpr mint operator/(const mint& r) const noexcept { return mint(*this) /= r; }

    constexpr bool operator==(const mint& r) const noexcept { return x == r.x; }
    constexpr bool operator!=(const mint& r) const noexcept { return x != r.x; }

    constexpr mint inv() const noexcept {
        int a = x, b = mod, u = 1, v = 0;
        while (b > 0) {
            int t = a / b;
            std::swap(a -= t * b, b);
            std::swap(u -= t * v, v);
        }
        return mint(u);
    }

    constexpr mint pow(long long n) const noexcept {
        mint ret(1), mul(x);
        while (n > 0) {
            if (n & 1) ret *= mul;
            mul *= mul;
            n >>= 1;
        }
        return ret;
    }

    friend std::ostream& operator<<(std::ostream& os, const mint& r) {
        return os << r.x;
    }

    friend std::istream& operator>>(std::istream& is, mint& r) {
        long long t;
        is >> t;
        r = mint(t);
        return is;
    }

private:
    int x;
};

using mint = Modint<(int) 1e9+7>;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);

    int n, m;
    cin >> n >> m;
    vector<int> s(n);
    for (auto& x : s) cin >> x;

    vector<pair<int, int>> mk(n, {1e9, -1});
    rep(i,0,n) rep(j,i,n) chmin(mk[i], {s[j], j});

    map<tuple<int, int, int, int, int>, mint> memo;

    auto dfs = [&](auto& dfs, int l, int a, int b, int cnta, int cntb) -> mint {
        if (a > b) swap(a, b), swap(cnta, cntb);
        if (cnta > m || cntb > m) return 0;
        if (l == n) return 1;
        if (memo.count({l, a, b, cnta, cntb})) return memo[{l, a, b, cnta, cntb}];
        auto [m, k] = mk[l];
        if (k == l) {
            mint ret = 0;
            if (a < m) ret += dfs(dfs, k+1, m, b, cnta+1, cntb);
            if (b < m) ret += dfs(dfs, k+1, a, m, cnta, cntb+1);
            return memo[{l, a, b, cnta, cntb}] = ret;
        }
        rep(i,l,k-1) {
            if (s[i] > s[i+1]) {
                return memo[{l, a, b, cnta, cntb}] = 0;
            }
        }
        mint ret = 0;
        if (a < m && b < s[l]) ret += dfs(dfs, k+1, m, s[k-1], cnta+1, cntb+k-l);
        if (a < s[l] && b < m) ret += dfs(dfs, k+1, s[k-1], m, cnta+k-l, cntb+1);
        return memo[{l, a, b, cnta, cntb}] = ret;
    };

    cout << dfs(dfs, 0, 0, 0, 0, 0) << endl;
}
