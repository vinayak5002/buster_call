#include <bits/stdc++.h>
using namespace std;

#ifdef _RUTHEN
#include "debug.hpp"
#else
#define show(...) true
#endif

using ll = long long;
#define rep(i, n) for (int i = 0; i < (n); i++)
template <class T> using V = vector<T>;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int N;
    cin >> N;
    V<V<int>> G(N);
    for (int i = 0; i < N - 1; i++) {
        int s, t;
        cin >> s >> t;
        s--, t--;
        G[s].push_back(t);
        G[t].push_back(s);
    }
    V<ll> dp1(N, 0);  // 0を根とする根付き木のiを根とする部分木の答え
    auto dfs = [&](auto f, int cur, int par) -> void {
        for (auto &nex : G[cur]) {
            if (nex == par) continue;
            f(f, nex, cur);
            dp1[cur] = max(dp1[cur], dp1[nex] + 1);
        }
        return;
    };
    dfs(dfs, 0, -1);
    V<ll> dp2(N);  // iを根とする根付き木のiを根とする部分木の答え
    auto rerooting = [&](auto g, int cur, int par, ll dp1_par) -> void {
        V<pair<ll, int>> dp1_cld;    // {dp1[id], id}
        dp1_cld.push_back({0, -1});  // 番兵
        for (auto &nex : G[cur]) {
            if (nex == par) {
                dp1_cld.push_back({dp1_par + 1, par});  // curを根と見たときのparを根とする部分木に対するdp1を伝播させておく
            } else {
                dp1_cld.push_back({dp1[nex] + 1, nex});  // curを根と見たときのnexを根とする部分木に対するdp1は求められている
            }
        }
        sort(dp1_cld.rbegin(), dp1_cld.rend());
        dp2[cur] = dp1_cld[0].first;
        for (auto &nex : G[cur]) {
            if (nex == par) continue;
            if (nex == dp1_cld[0].second) {  // 適切にdp1_parとして伝播させる値を選択する
                g(g, nex, cur, dp1_cld[1].first);
            } else {
                g(g, nex, cur, dp1_cld[0].first);
            }
        }
        return;
    };
    rerooting(rerooting, 0, -1, 0);
    rep(i, N) cout << 2 * (N - 1) - dp2[i] << '\n';
    return 0;
}

