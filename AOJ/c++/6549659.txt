#include<stdio.h>
#include<stdlib.h>
int size[100000];
void merge_sort(int **Q, int left, int right, int t) {
	int a, b, c, mid;
	int work[100000];
	if (left < right){
		mid = (left + right) / 2;
		merge_sort(Q, left, mid, t);
		merge_sort(Q, mid + 1, right, t);
		for (a = mid; a >= left; a--){
			work[a] = Q[t][a];
		}
		for (b = mid; b <= right; b++){
			if (b == 0){
				work[b] = Q[t][b];
			}
			else{
				work[right - (b - (mid + 1))] = Q[t][b];
			}
		}
		a = left;
		b = right;
		for (c = left; c <= right; c++){
			if (work[a] < work[b]){
				Q[t][c] = work[a++];
			}
			else{
				Q[t][c] = work[b--];
			}
		}
	}
}

int main(void){
	int i, j, l, n, q, t, x, query, max;
	int **Q;
	scanf("%d %d", &n, &q);
	Q = (int**)malloc(sizeof(int*)*n);
	for (i = 0; i < n; i++){
		Q[i] = (int*)malloc(sizeof(int)*q);
	}
	for (i = 0; i < q; i++){
		scanf("%d", &query);
		switch (query){
		case 0:
			scanf("%d %d", &t, &x);
			Q[t][size[t]++] = x;
			merge_sort(Q, 0, size[t] - 1, t);
			break;
		case 1:
			scanf("%d", &t);
			if (size[t] != 0){
				printf("%d\n", Q[t][size[t] - 1]);
			}
			break;
		case 2:
			scanf("%d", &t);
			if (size[t] != 0){
				size[t]--;
			}
			break;
		}
	}
	return 0;
}
