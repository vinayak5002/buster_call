#include <bits/stdc++.h>
using namespace std;

#ifdef _RUTHEN
#include "debug.hpp"
#else
#define show(...) true
#endif

using ll = long long;
#define rep(i, n) for (int i = 0; i < (n); i++)
template <class T> using V = vector<T>;

void solve(int N) {
    V<tuple<int, int, int>> LRW(N);
    rep(i, N) {
        int l, r, w;
        cin >> l >> r >> w;
        l--;
        LRW[i] = {l, r, w};
    }
    sort(LRW.begin(), LRW.end());
    int M = 365;
    V<V<ll>> dp(M + 1, V<ll>(M + 1, 0));
    // 蟻本p221のグラフを2次元に拡張し、DAGの最長路を計算
    // ->これだと同じ区間を2回使ってしまう(例えばsample1で[1,2][3,3]を2回ずつ使って40など)
    // ->3次元に拡張
    // 同一の高さでは平面的な遷移(np[i1 + 1][i2] = max(np[i1 + 1][i2], np[i1][i2])など)
    // 高さが+1するところで区間を使った遷移をする(これによって同じ区間を使うことはなくなる)
    // このとき、解を復元することを考えると、区間は始点ソートしておけば、解として選ばれた任意の同一ホールでの区間について
    // 後日の区間がより前の日の区間より先に来ることはないので、最適解を求められる
    rep(i, N) {
        auto [l, r, w] = LRW[i];
        V<V<ll>> np = dp;
        rep(i1, M + 1) {
            rep(i2, M + 1) {
                if (i1 == l) {
                    np[r][i2] = max(np[r][i2], dp[i1][i2] + w);
                }
                if (i2 == l) {
                    np[i1][r] = max(np[i1][r], dp[i1][i2] + w);
                }
                if (i1 + 1 <= M) np[i1 + 1][i2] = max(np[i1 + 1][i2], np[i1][i2]);
                if (i2 + 1 <= M) np[i1][i2 + 1] = max(np[i1][i2 + 1], np[i1][i2]);
            }
        }
        dp = np;
    }
    cout << dp[M][M] << '\n';
    return;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int N;
    while (cin >> N, N != 0) solve(N);
    return 0;
}
