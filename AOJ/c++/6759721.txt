#include<bits/stdc++.h>
using namespace std;
#define MOD 1000000007
//#define MOD 998244353
#define INF 1e18 + 10
#define EPS 1e-9
#define F first
#define S second

#define debug(x) cout<<x<<endl;
#define repi(i,x,n) for(int i=x;i<n;i++)
#define rep(i,n) repi(i,0,n)
#define lp(i,n) repi(i,0,n)
#define repn(i,n) for(int i=n;i>=0;i--)
#define int long long
#define endl "\n"

typedef pair<int,int> PII;
typedef pair<int,string> PIS;
typedef pair<string,int> PSI;

template <typename T>
bool chmax(T &a, const T& b) {
  if (a < b) {
    a = b; 
    return true;
  }
  return false;
}

template <typename T>
bool chmin(T &a, const T& b) {
  if (a > b) {
    a = b;
    return true;
  }
  return false;
}


template <typename T, typename O = T>
struct Lazysegtree{
  using F = function< T (T, T) >;
  using G = function< T (T,O)>;
  using H = function< O(O,O)>;
  int size,height;
  vector<T> seg;
  vector<O> lazy;
  const F f;
  const G g;
  const H h;
  const T M1;
  const O Op;
  Lazysegtree(int n,const F f,const G g,const H h,const T &M1, const O Op) : f(f), g(g),h(h),M1(M1),Op(Op) {
    size = 1;
    height = 0;
    while(size < n) size<<=1,height++;
    seg.assign(2*size,M1);
    lazy.assign(2*size,Op);
  }

  void set(int k,const T &x){
    seg[k+size]=x;
  }
    
  
  void build(){
    for(int k=size-1;k>0;k--){
      seg[k]=f(seg[2*k + 0],seg[2*k + 1]);
    }
  }

  inline void propagate(int k){
    if(lazy[k] != Op){
      lazy[2*k + 0] = h(lazy[2*k + 0],lazy[k]);
      lazy[2*k + 1] = h(lazy[2*k + 1],lazy[k]);
      seg[k]=reflect(k);
      lazy[k]=Op;
    }
  }

  inline T reflect(int k){
    return lazy[k]==Op?seg[k]:g(seg[k],lazy[k]);
  }

  inline void recalc(int k){
    while(k>>=1) seg[k]=f(reflect(2*k + 0),reflect(2*k + 1));
  }

  inline void thrust(int k){
    for(int i=height;i>0;i--) propagate(k>>i);
  }
      

  void update(int a,int b,const O &x){
    thrust(a+=size);
    thrust(b+=(size-1));
    for(int l=a,r=(b+1);l<r;l>>=1,r>>=1){
      if(l&1) lazy[l]=h(lazy[l],x),++l;
      if(r&1) --r,lazy[r]=h(lazy[r], x);
    }
    recalc(a);
    recalc(b);
  }

  T query(int a,int b){
   thrust(a+=size);
   thrust(b+=(size-1));
   T L=M1,R=M1;
   for(int l=a,r=(b+1);l<r;l>>=1,r>>=1){
     if(l&1) L = f(L,reflect(l++));
     if(r&1) R = f(reflect(--r),R);
    }
    return f(L,R);
  }

  T operator[](const int &k) const{
    return query(k,k+1);
  }

  
  template< typename C >
  int find_subtree(int a, const C &check, T &M, bool type) {
    while(a < size) {
      propagate(a);
      T nxt = type ? f(reflect(2 * a + type), M) : f(M, reflect(2 * a + type));
      if(check(nxt)) a = 2 * a + type;
      else M = nxt, a = 2 * a + 1 - type;
    }
    return a - size;
  }


  template< typename C >
  int find_first(int a, const C &check) {
    T L = M1;
    if(a <= 0) {
      if(check(f(L, reflect(1)))) return find_subtree(1, check, L, false);
      return -1;
    }
    thrust(a+size);
    int b = size;
    for(a += size, b += size; a < b; a >>= 1, b >>= 1) {
      if(a & 1) {
        T nxt = f(L, reflect(a));
        if(check(nxt)) return find_subtree(a, check, L, false);
        L = nxt;
        ++a;
      }
    }
    return -1;
  }

  template< typename C >
  int find_last(int b, const C &check) {
    T R = M1;
    if(b >= size) {
      if(check(f(reflect(1), R))) return find_subtree(1, check, R, true);
      return -1;
    }
    thrust(b+size-1);
    int a = size;
    for(b += size; a < b; a >>= 1, b >>= 1) {
      if(b & 1) {
        T nxt = f(reflect(--b), R);
        if(check(nxt)) return find_subtree(b, check, R, true);
        R = nxt;
      }
    }
    return -1;
  }
};
      

signed main(){
  cin.tie(0);	
  ios::sync_with_stdio(false);
  int n,q;
  cin>>n>>q;
  Lazysegtree<int> seg(n,[](int a,int b){return min(a,b);},[](int a,int b){return b;},[](int a,int b){return b;},2147483647,-1);
  seg.build();
  rep(i,q){
    int t,a,b,c;
    cin>>t>>a>>b;
    
    if(t==0){
      cin>>c;
      seg.update(a,b+1,c);
    }
    else cout<<seg.query(a,b+1)<<endl;
  }


  


  return 0;
}

