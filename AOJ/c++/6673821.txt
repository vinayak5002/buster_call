#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <map>
#include <queue>
#include <bitset>
#include <vector>
#include <stack>
#include <cmath>
#include <set>
#include <cstdlib>
#include <unordered_map>
#include <random>
#include <chrono>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/hash_policy.hpp>
using namespace __gnu_pbds;
#define mp make_pair
#define lson tr[now].ls
#define rson tr[now].rs
#define pb push_back
#define debug() cout<<"qwq"<<endl
#define mem(i,a) memset(i,a,sizeof(i))
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ldb;
#define i128 __int128
#define pii pair<int,int>
const db eps=1e-9;
const ll INF = 0x3f3f3f3f;
const int siev =1000000+5;
const int inf = 0x3f3f3f3f;
const int DMAX = 1000000 + 100;
const ll MOD = 32768;
const ll LMOD = 1000000007;
const int hmod = 202010923;
const double PI=acos(-1.0);
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
template<class T> inline void print(T x){
    if(x<0){
        putchar('-');
        x=-x;
    }
    int a[20];
    int cnt=0;
    do{
        a[++cnt]=x%10;
        x/=10;
    }while(x>0);
    for(int i=cnt;i>=1;i--){
        putchar(a[i]+'0');
    }
    putchar('\n');
    // puts("");
}
template<class T> inline void read(T &x){
    x=0;
    T f=1;
    char ch=getchar();
    while(ch<'0' || ch>'9'){
        if(ch=='-'){
            f=-1;
        }
        ch=getchar();
    }
    while(ch<='9' && ch>='0'){
        x=x*10+(ch-'0');
        ch=getchar();
    }
    x*=f;
}
struct Point{
    double x,y;
    Point(){}
    Point(double x,double y): x(x),y(y){}
    Point operator +(Point P){
        return Point(x+P.x,y+P.y);
    }
    Point operator -(Point P){
        return Point(x-P.x,y-P.y);
    }
    Point operator *(double k){
        return Point(x*k,y*k);
    }
    Point operator /(double k){
        return Point(x/k,y/k);
    }
    bool operator ==(Point P){
        return (x==P.x) && (y==P.y);
    }
};
struct Line{
    Point A,B;
    Line(){}
    Line(Point A,Point B): A(A),B(B){}
};
struct Circle{
    Point O;
    double r;
    Circle(){}
    Circle(Point O,double r): O(O),r(r){}
};
Point vec(Line L){
    return L.B-L.A;
}
double abs1(Point P){
    return P.x*P.x+P.y*P.y;
}
double abs(Point P){
    return sqrt(P.x*P.x+P.y*P.y);
}  
double dot(Point A,Point B){
    return A.x*B.x+A.y*B.y;
} 
double cross(Point A,Point B){
    return A.x*B.y-A.y*B.x;
}
Point projection(Point P,Line L){
    return L.A+vec(L)/abs(vec(L))*dot(P-L.A,vec(L))/abs(vec(L));
}
Point reflection(Point P,Line L){
    Point H=projection(P,L);
    Point R;
    R=Point(2*H.x-P.x,2*H.y-P.y);
    return R;
}
bool Parallel(Line L1,Line L2){
    if(cross(vec(L1),vec(L2))==0){
        return 1;
    }
    return 0;
}
bool Orthogonal(Line L1,Line L2){
    if(dot(vec(L1),vec(L2))==0){
        return 1;
    }
    return 0;
}
bool OnSegment(Point P,Line L){
    double dist1=abs(P-L.A),dist2=abs(P-L.B),dist3=abs(vec(L));
    if(abs(dist3-dist1-dist2)<eps){
        return 1;
    }
    return 0;
}
bool Intersection(double l1,double r1,double l2,double r2){
    if(l1>r1){
        swap(l1,r1);
    }
    if(l2>r2){
        swap(l2,r2);
    }
    if(max(l1,l2)<=min(r1,r2)){
        return 1;
    }
    return 0;
}
bool Intersection(Line L1,Line L2){ // Segment L1 and Segment L2
    if(Intersection(L1.A.x,L1.B.x,L2.A.x,L2.B.x) && 
        Intersection(L1.A.y,L1.B.y,L2.A.y,L2.B.y) &&
        cross(vec(L1),L2.A-L1.A)*cross(vec(L1),L2.B-L1.A)<=eps &&
        cross(vec(L2),L1.A-L2.A)*cross(vec(L2),L1.B-L2.A)<=eps){
        return 1;
    }
    return 0;
}
Point IntersectPoint(Line L1,Line L2){  //Segment L1 and Segment L2
    if(L1.B.x==L1.A.x){
        double k2=(L2.B.y-L2.A.y)/(L2.B.x-L2.A.x);
        double b2=L2.A.y-L2.A.x*k2;
        return Point(L1.B.x,k2*L1.B.x+b2);
    }
    if(L2.B.x==L2.A.x){
        double k1=(L1.B.y-L1.A.y)/(L1.B.x-L1.A.x);
        double b1=L1.A.y-L1.A.x*k1;
        return Point(L2.A.x,k1*L2.A.x+b1);
    }
    double k1=(L1.B.y-L1.A.y)/(L1.B.x-L1.A.x);
    double k2=(L2.B.y-L2.A.y)/(L2.B.x-L2.A.x);
    double b1=L1.A.y-L1.A.x*k1;
    double b2=L2.A.y-L2.A.x*k2;
    Point P;
    P.x=(b1-b2)/(k2-k1);
    P.y=k1*P.x+b1;
    return P;
}
double PointLineMinDist(Point P,Line L){ // Point P and Segment L
    Point H=projection(P,L);
    double dist1=abs(H-L.A),dist2=abs(H-L.B),dist3=abs(vec(L));
    if(fabs(dist1+dist2-dist3)<eps){
        return abs(P-H);
    }
    if(dist1>=dist2){
        return abs(P-L.B);
    }
    return abs(P-L.A);
}
double LineLineMinDist(Line L1,Line L2){  //Segment L1 and Segment L2  
    if(Intersection(L1,L2)){
        return 0;
    }
    return min(min(PointLineMinDist(L1.A,L2),PointLineMinDist(L1.B,L2)),min(PointLineMinDist(L2.A,L1),PointLineMinDist(L2.B,L1)));
}
double PolyArea(vector<Point> vp){
    Point O=Point(0,0);
    double area=0.0;
    int n=(int)vp.size();
    vp.pb(vp[0]);
    for(int i=0;i<n;i++){
        area+=cross(vp[i]-O,vp[i+1]-O)/2.0;
    }
    return area;
}
double PolyCircum(vector<Point> vp){
    int n=(int)vp.size();
    vp.pb(vp[0]);
    double circum=0;
    for(int i=0;i<n;i++){
        circum+=abs(vp[i+1]-vp[i]);
    }
    return circum;
}
bool IsConvex(vector<Point> vp){
    int n=(int)vp.size();
    vp.pb(vp[0]);
    for(int i=0;i<n;i++){
        Point P1,P2,P3;
        if(i==0){
            P1=vp[n-1];
        }
        else{
            P1=vp[i-1];
        }
        P2=vp[i],P3=vp[i+1];
        if(cross(P1-P2,P3-P2)>0){
            return 0;
        }
    }
    return 1;
}
int PolyPointContain(Point P,vector<Point> vp){ // 0:P is not in the Poly  1: P is on the Poly 2:P is in the Poly
    Point I=Point(1000000.00,P.y);
    Line L=Line(P,I);
    int n=(int)vp.size();
    vp.pb(vp[0]);
    int cnt=0;
    for(int i=0;i<n;i++){
        Point P1=vp[i],P2=vp[i+1];
        Line L1=Line(P1,P2);
        if(OnSegment(P,L1)){
            return 1;
        }
        if(Parallel(L,L1)){
            continue;
        }
        if(OnSegment(P1,L)){
            if(P1.y>P2.y){
                cnt++;
            }
        }
        if(OnSegment(P2,L)){
            if(P1.y<P2.y){
                cnt++;
            }
        }
        if(Intersection(L1,L)){
            cnt++;
        }
    }
    if(cnt & 1){
        return 2;
    }
    return 0;
}
bool hori(Point A,Point B){ // 标准序排序
    return A.x<B.x || (A.x==B.x && A.y<B.y);
}
vector<Point> GetConvex(vector<Point> vp){ 
    vector<Point> convex;
    sort(vp.begin(),vp.end(),hori);
    vector<Point> st;
    st.pb(Point(0,0));
    int siz=0;
    int n=(int)vp.size();
    for(int i=0;i<n;i++){
        while(siz>=2 && cross(vp[i]-st[siz-1],st[siz]-st[siz-1])>=0){ 
            // >= 只会取拐点上的点  > 会取到每条边上的所有经过点   下同
            st.pop_back();
            siz--;
        }
        siz++;
        st.pb(vp[i]);
    }
    for(int i=1;i<=siz;i++){
        convex.pb(st[i]);
    }
    st.clear();
    st.pb(Point(0,0));
    siz=0;
    for(int i=n-1;i>=0;i--){
        while(siz>=2 && cross(st[siz]-st[siz-1],vp[i]-st[siz-1])<=0){
            st.pop_back();
            siz--;
        }
        siz++;
        st.pb(vp[i]);
    }
    for(int i=1;i<=siz;i++){
        if(st[i]==vp[0] || st[i]==vp[n-1]){
            continue;
        }
        convex.pb(st[i]);
    }
    return convex;
}
double ConvexDiameter(vector<Point> vp){
    int n=(int)vp.size();
    if(n==2){
        return abs(vp[1]-vp[0]);
    }
    vp.pb(vp[0]);
    int now=2;
    double dist=0;
    for(int i=0;i<n;i++){
        Line L=Line(vp[i],vp[i+1]);
        while(PointLineMinDist(vp[now],L)<PointLineMinDist(vp[now+1],L)){
            now=(now+1)%n;
        }
        dist=max(dist,max(abs(vp[now]-vp[i]),abs(vp[now]-vp[i+1])));
    }
    return dist;
}
double ConvexCut(vector<Point> vp,Line L){
    vector<Point> dots;
    int n=(int)vp.size();
    vp.pb(vp[0]);
    for(int i=0;i<n;i++){
        if(cross(vec(L),vp[i]-L.A)>=0 && cross(vec(L),vp[i+1]-L.A)>=0){
            dots.pb(vp[i]);
            dots.pb(vp[i+1]);
            continue;
        }
        if(cross(vec(L),vp[i]-L.A)*cross(vec(L),vp[i+1]-L.A)<0){
            if(cross(vec(L),vp[i]-L.A)>=0){
                dots.pb(vp[i]);
            }
            if(cross(vec(L),vp[i+1]-L.A)>=0){
                dots.pb(vp[i+1]);
            }
            dots.pb(IntersectPoint(L,Line(vp[i],vp[i+1])));
            continue;
        }
    }
    if(dots.empty()){
        return 0;
    }
    vector<Point> ans=GetConvex(dots);
    return PolyArea(ans);
}
pair<Point,Point> IntersectCircleLine(Circle C,Line L){
    Point H=projection(C.O,L);
    double dist=abs(C.O-H);
    if(fabs(dist-C.r)<eps){
        return mp(H,H);
    }
    double dist1=sqrt(C.r*C.r-dist*dist);
    Point P1=H+vec(L)/abs(vec(L))*dist1,P2=H-vec(L)/abs(vec(L))*dist1;
    if(P1.x>P2.x || (P1.x==P2.x && P1.y>P2.y)){
        swap(P1,P2);
    }
    return mp(P1,P2);   
}
int q;
int main(){
    Circle C;
    cin>>C.O.x>>C.O.y>>C.r;
    read(q);
    while(q--){
        Line L;
        cin>>L.A.x>>L.A.y>>L.B.x>>L.B.y;
        pair<Point,Point> ans=IntersectCircleLine(C,L);
        printf("%.9lf %.9lf %.9lf %.9lf\n",ans.first.x,ans.first.y,ans.second.x,ans.second.y );
    }
    return 0;
}
