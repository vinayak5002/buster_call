#include <bits/stdc++.h>

#define rep(i, n) for (int i = 0; i < (n); i++)
#define all(a) (a).begin(), (a).end()
using namespace std;

typedef long long ll;
typedef pair<int, int> P;
typedef pair<ll, ll> Pll;
template <typename T>
using min_priority_queue = priority_queue<T, vector<T>, greater<T>>;
const double PI = 3.14159265358979323846;
int ddx[] = {1, -1, 0, 0, 1, 1, -1, -1};
int ddy[] = {0, 0, 1, -1, 1, -1, 1, -1};
int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

void cans(bool f) {
    if (f)
        cout << "Yes" << endl;
    else
        cout << "No" << endl;
}

template <typename T>
T gcd(T a, T b) {
    if (b == 0)
        return a;
    else
        return gcd(b, a % b);
}

bool compare1(pair<ll, ll> a, pair<ll, ll> b) { return a.first < b.first; }
bool compare2(pair<ll, ll> a, pair<ll, ll> b) { return a.second < b.second; }

long long modpow(long long a, long long n, long long mod = 998244353) {
    long long res = 1;
    while (n > 0) {
        if (n & 1) res = res * a % mod;
        a = a * a % mod;
        n >>= 1;
    }
    return res;
}

template <typename T>
bool chmax(T& a, const T& b) {
    if (a < b) {
        a = b;  // aをbで更新
        return true;
    }
    return false;
}
template <typename T>
bool chmin(T& a, const T& b) {
    if (a > b) {
        a = b;  // aをbで更新
        return true;
    }
    return false;
}

using mint = modint;

struct edge {
    ll to;
    ll cost;
};

vector<vector<edge>> G;
vector<ll> dist;
ll INF = 1e18;
priority_queue<Pll, vector<Pll>, greater<Pll>> pq;

void dfs(int v) {
    dist[v] = 0;
    pq.push({0, v});

    while (!pq.empty()) {
        auto [cost, v] = pq.top();
        pq.pop();

        if (dist[v] < cost) continue;
        for (auto itr : G[v]) {
            if (chmin(dist[itr.to], dist[v] + itr.cost)) {
                pq.push({dist[itr.to], itr.to});
            }
        }
    }
}

int main() {
    ll V, E, r;
    cin >> V >> E >> r;
    G.resize(V);
    dist.resize(V, INF);
    rep(i, E) {
        ll s, t, d;
        cin >> s >> t >> d;
        G[s].push_back({t, d});
    }
    dfs(r);
    rep(i, V) {
        if (dist[i] == INF) {
            cout << "INF" << endl;
        } else {
            cout << dist[i] << endl;
        }
    }
}
