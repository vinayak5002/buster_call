#include<iostream>
#include<vector>
#include<string.h>
using namespace std;
const int mx = 1e5 + 10;
vector<int>son[mx];
int s[mx], e[mx];
int cnt = 1;
void dfs(int k) {
	s[k] = cnt++;
	for (auto x : son[k]) {
		dfs(x);
	}
	e[k] = cnt - 1;
}
struct node {
	int l, r;
	int sum[11] = { 0 }, lazy[11] = { 0 };
	bool is_lazy = 0;
}tree[mx * 4];
void add(int k) {
	for (int i = 0; i < 10; i++) {
		tree[k].sum[i] = tree[k << 1].sum[i] + tree[k << 1 | 1].sum[i];
	}
}
void build(int k, int l, int r) {
	tree[k].l = l, tree[k].r = r, tree[k].is_lazy = 0;
	for (int i = 0; i < 10; i++)tree[k].lazy[i] = i, tree[k].sum[i] = 0;
	if (l == r) {
		tree[k].sum[0] = 1;
		return;
	}
	int mid = (l + r) / 2;
	build(k << 1, l, mid);
	build(k << 1 | 1, mid + 1, r);
	add(k);
}
void pushdown(int k) {
	if (tree[k].l == tree[k].r) {
		for (int i = 0; i < 10; i++)tree[k].lazy[i] = i;
		tree[k].is_lazy = 0;
		return;
	}
	int lazy[11], sum[11];
	memset(lazy, 0, sizeof(lazy));
	memset(sum, 0, sizeof(sum));
	for (int i = 0; i < 10; i++) {
		int x = i, y = tree[k].lazy[i];
		sum[y] += tree[k << 1].sum[x];
		for (int j = 0; j < 10; j++) {
			if (tree[k << 1].lazy[j] == x) {
				lazy[j] = y;
			}
		}
	}
	for (int i = 0; i < 10; i++) {
		tree[k << 1].sum[i] = sum[i];
		tree[k << 1].lazy[i] = lazy[i];
	}
	memset(lazy, 0, sizeof(lazy));
	memset(sum, 0, sizeof(sum));
	for (int i = 0; i < 10; i++) {
		int x = i, y = tree[k].lazy[i];
		sum[y] += tree[k << 1|1].sum[x];
		for (int j = 0; j < 10; j++) {
			if (tree[k << 1|1].lazy[j] == x) {
				lazy[j] = y;
			}
		}
	}
	for (int i = 0; i < 10; i++) {
		tree[k << 1|1].sum[i] = sum[i];
		tree[k << 1|1].lazy[i] = lazy[i];
	}
	for (int i = 0; i < 10; i++) {
		tree[i].lazy[i] = i;
	}
	tree[k].is_lazy = 0;
	tree[k << 1].is_lazy = tree[k << 1 | 1].is_lazy = 1;
	return;
	for (int i = 0; i < 10; i++) {
		if (tree[k].lazy[i] != i) {
			tree[k << 1].sum[tree[k].lazy[i]] += tree[k << 1].sum[i];
			tree[k << 1].sum[i] = 0;
			tree[k << 1 | 1].sum[tree[k].lazy[i]] += tree[k << 1 | 1].sum[i];
			tree[k << 1 | 1].sum[i] = 0;
		}
		tree[k << 1].lazy[i] = tree[k << 1 | 1].lazy[i] = tree[k].lazy[i];
		tree[k].lazy[i] = i;
	}
	tree[k].is_lazy = 0;
	tree[k << 1].is_lazy = tree[k << 1 | 1].is_lazy = 1;
}
void change(int k, int l, int r, int x, int y) {
	if ((!tree[k].sum[x]) || (x == y))return;
	if (tree[k].l >= l && tree[k].r <= r) {
		tree[k].sum[y] += tree[k].sum[x];
		tree[k].sum[x] = 0;
		for (int i = 0; i < 10; i++) {
			if (tree[k].lazy[i] == x) {
				tree[k].lazy[i] = y;
			}
		}
		tree[k].is_lazy = 1;
		return;
	}
	pushdown(k);
	int mid = (tree[k].l + tree[k].r) / 2;
	if (r <= mid)change(k << 1, l, r, x, y);
	else if (l > mid)change(k << 1 | 1, l, r, x, y);
	else {
		change(k << 1, l, mid, x, y);
		change(k << 1 | 1, mid + 1, r, x, y);
	}
	add(k);
}
int query(int k, int l, int r, int x, int y) {
	if (y < x)return 0;
	int ans = 0;
	if (tree[k].l >= l && tree[k].r <= r) {
		for (int i = x; i <= y; i++) {
			ans += tree[k].sum[i];
		}
		return ans;
	}
	pushdown(k);
	int mid = (tree[k].l + tree[k].r) / 2;
	if (r <= mid)ans += query(k << 1, l, r, x, y);
	else if (l > mid)ans += query(k << 1 | 1, l, r, x, y);
	else {
		ans = ans + query(k << 1, l, mid, x, y) + query(k << 1 | 1, mid + 1, r, x, y);
	}
	add(k);
	return ans;
}
int read() {
	int f = 1, k = 0;
	char c = getchar();
	while (!isdigit(c)) {
		if (c == '-')f = -1;
		c = getchar();
	}
	while (isdigit(c)) {
		k = k * 10 + (c - '0');
		c = getchar();
	}
	return k * f;
}
int main() {
	int n, q, t, r, x, y;
	n = read(), q = read();
	build(1, 1, n);
	for (int i = 1; i < n; i++) {
		x = read(), y = read();
		son[x].push_back(y);
	}
	dfs(0);
	while (q--) {
		t = read(), r = read(), x = read(), y = read();
		if (t == 2)change(1, s[r], e[r], x, y);
		else printf("%d\n", query(1, s[r], e[r], x, y));
	}
}
