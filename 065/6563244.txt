class HashingLinkedList:
    class Node:
        prev = None
        next = None
        keychain_prev = None
        keychain_next = None
        value = None

        def __init__(self, value):
            self.value = value

        def init_as_root(self):
            self.next = self
            self.prev = self
            return self

        def init_as_keychain_root(self):
            self.keychain_next = self
            self.keychain_prev = self
            return self

    root = Node(None)
    keychain_root_for = {}
    def __init__(self):
        self.root.init_as_root()

    def appendleft(self, key):
        node = self.Node(key)
        root = self.root
        next = root.next
        root.next = node
        node.prev = root
        node.next = next
        next.prev = node

        if not key in self.keychain_root_for:
            self.keychain_root_for[key] = self.Node(None).init_as_keychain_root()
        kc_root = self.keychain_root_for[key]
        next = kc_root.keychain_next
        kc_root.keychain_next = node
        node.keychain_prev = kc_root
        node.keychain_next = next
        next.keychain_prev = node

    def remove(self, key):
        if not key in self.keychain_root_for:
            raise ValueError("No such element. key: {}".format(key))
        kc_root = self.keychain_root_for[key]
        if kc_root.keychain_next is kc_root:
            del self.keychain_root_for[key]
            raise ValueError("No such element. key: {}".format(key))

        target = kc_root.keychain_next
        next = target.next
        prev = target.prev
        prev.next = next
        next.prev = prev
        kc_root.keychain_next = target.keychain_next
        target.keychain_next.keychain_prev = kc_root

    def popleft(self):
        head = self.root.next
        self.remove(head.value)
        return head.value

    def remove_from_tail(self, key):
        if not key in self.keychain_root_for:
            raise ValueError("No such element. key: {}".format(key))
        kc_root = self.keychain_root_for[key]
        if kc_root.keychain_next is kc_root:
            del self.keychain_root_for[key]
            raise ValueError("No such element. key: {}".format(key))

        target = kc_root.keychain_prev
        next = target.next
        prev = target.prev
        prev.next = next
        next.prev = prev
        kc_root.keychain_prev = target.keychain_prev
        target.keychain_prev.keychain_next = kc_root

    def pop(self):
        tail = self.root.prev
        self.remove_from_tail(tail.value)
        return tail.value

    def __iter__(self):
        node = self.root.next
        while node is not self.root:
            yield node.value
            node = node.next

n = int(input())
queue = HashingLinkedList()
for i in range(n):
    line = input()
    command = None
    key = None
    if ' ' in line:
        command,x = line.split()
        key = int(x)
    else:
        command = line.rstrip()

    if 'insert' == command:
        queue.appendleft(key)
        continue
    if 'delete' == command:
        try:
            queue.remove(key)
        except ValueError:
            pass
        continue
    if 'deleteFirst' == command:
        queue.popleft()
        continue
    if 'deleteLast' == command:
        queue.pop()
        continue

    print('Error')
    break
print(' '.join([str(x) for x in queue]))

