#line 1 "main.cpp"
#include <bits/stdc++.h>
#line 1 "/home/anqooqie/.proconlib/tools/unordered_map.hpp"



#line 6 "/home/anqooqie/.proconlib/tools/unordered_map.hpp"
#include <type_traits>
#include <ext/pb_ds/assoc_container.hpp>

namespace tools {

  template <typename Key, typename T, typename Hash = ::std::hash<Key>>
  class unordered_map : public ::__gnu_pbds::gp_hash_table<Key, T, Hash> {
  public:
    using ::__gnu_pbds::gp_hash_table<Key, T, Hash>::gp_hash_table;

    template <typename... Args>
    auto emplace(Args&&... args) {
      return this->insert(::std::make_pair(::std::forward<Args>(args)...));
    }

    template <typename M>
    auto insert_or_assign(const Key& k, M&& obj) {
      if (auto it = this->find(k); it != this->end()) {
        it->second = obj;
        return ::std::make_pair(it, false);
      } else {
        return this->emplace(k, obj);
      }
    }
  };
}


#line 1 "/home/anqooqie/.proconlib/tools/ssize.hpp"



#line 6 "/home/anqooqie/.proconlib/tools/ssize.hpp"

namespace tools {

  template <typename C>
  constexpr auto ssize(const C& c) -> ::std::common_type_t<::std::ptrdiff_t, ::std::make_signed_t<decltype(c.size())>> {
    return c.size();
  }
}


#line 1 "/home/anqooqie/.proconlib/tools/chmin.hpp"



#line 5 "/home/anqooqie/.proconlib/tools/chmin.hpp"

namespace tools {

  template <typename M, typename N>
  bool chmin(M& lhs, const N& rhs) {
    const bool updated = lhs > rhs;
    if (updated) lhs = rhs;
    return updated;
  }
}


#line 5 "main.cpp"

using i64 = std::int_fast64_t;

int main() {
  std::cin.tie(nullptr);
  std::ios_base::sync_with_stdio(false);

  i64 N, K;
  std::cin >> N >> K;
  std::vector<i64> a;
  std::copy_n(std::istream_iterator<i64>(std::cin), K, std::back_inserter(a));

  tools::unordered_map<i64, i64> rightmost;
  i64 r = 0;
  i64 answer = std::numeric_limits<i64>::max();
  for (i64 l = 0; l < N; ++l) {
    for (; r < N && (K < a[r] || rightmost.find(a[r]) != rightmost.end() || tools::ssize(rightmost) + 1 < K); ++r) {
      rightmost[a[r]] = r;
    }

    if (r < N && a[r] <= K && rightmost.find(a[r]) == rightmost.end() && tools::ssize(rightmost) + 1 == K) {
      tools::chmin(answer, r + 1 - l);
    }

    if (l == r) {
      ++r;
    } else {
      if (rightmost[a[l]] == l) {
        rightmost.erase(a[l]);
      }
    }
  }

  std::cout << (answer == std::numeric_limits<i64>::max() ? 0 : answer) << '\n';
  return 0;
}
