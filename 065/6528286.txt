using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _20220424_AOJ
{
    internal class ITP2_8C
    {
        static int ReadInt() { return int.Parse(Console.ReadLine()); }
        static double ReadDouble() { return double.Parse(Console.ReadLine()); }
        static int[] ReadIntArr(char dlm = ' ') { return Console.ReadLine().Split(dlm).Select(x => int.Parse(x)).ToArray(); }
        static double[] ReadDoubleArr(char dlm = ' ') { return Console.ReadLine().Split(dlm).Select(x => double.Parse(x)).ToArray(); }
        static string[] ReadStringArr(char dlm = ' ') { return Console.ReadLine().Split(dlm).ToArray(); }

        static void Main(string[] args)
        {
            string line = Console.ReadLine();
            int q = int.Parse(line);
            SortedDictionary<string, int> map = new SortedDictionary<string, int>();
            SortedSet<string> unSorted = new SortedSet<string>();
            string[] arr = new string[1];
            bool modified = false;
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < q; i++)
            {
                string[] query = ReadStringArr();
                int command = int.Parse(query[0]);
                string key = query[1];
                if (command == 0)
                {
                    int value = int.Parse(query[2]);
                    if (map.ContainsKey(key))
                    {
                        map[key] = value;
                    }
                    else
                    {
                        map.Add(key, value);
                        if(!unSorted.Add(key)) unSorted.Remove(key);
                        modified = true;
                    }
                }
                else if (command == 1)
                {
                    if (map.ContainsKey(key))
                    {
                        sb.AppendLine(map[key].ToString());
                    }
                    else
                    {
                        sb.AppendLine("0");
                    }
                }
                else if (command == 2)
                {
                    map.Remove(key);
                    if(!unSorted.Add(key)) unSorted.Remove(key);
                    modified = true;
                }
                else
                {
                    if (map.Count > 0)
                    {
                        string L = query[1];
                        string R = query[2];
                        if (modified)
                        {
                            if (unSorted.Any(x => L.CompareTo(x) <= 0 && x.CompareTo(R) <= 0 ))
                            {
                                arr = map.Keys.ToArray();
                                unSorted.Clear();
                                modified = false;
                            }
                        }
                        int lb = LowerBound(arr, L, 0, arr.Length - 1);
                        int ub = UpperBound(arr, R, Math.Max(0, lb - 1), arr.Length - 1);
                        for (int j = lb; j < ub; j++)
                        {
                            sb.AppendLine(string.Format("{0} {1}", arr[j], map[arr[j]]));
                        }
                    }
                }
            }
            Console.Write(sb);
        }

        static int LowerBound<T>(T[] arr, T k, int b, int e) where T : IComparable<T>
        {
            int rv = -1;
            if (b == e)
            {
                if (k.CompareTo(arr[b]) <= 0)
                {
                    rv = b;
                }
                else
                {
                    rv = b + 1;
                }
            }
            else
            {
                int h = (b + e) / 2;
                if (k.CompareTo(arr[h]) <= 0)
                {
                    rv = LowerBound(arr, k, b, h);
                }
                else
                {
                    rv = LowerBound(arr, k, h + 1, e);
                }
            }

            return rv;
        }

        static int UpperBound<T>(T[] arr, T k, int b, int e) where T : IComparable<T>
        {
            int rv = -1;
            if (b == e)
            {
                if (k.CompareTo(arr[b]) < 0)
                {
                    rv = b;
                }
                else
                {
                    rv = b + 1;
                }
            }
            else
            {
                int h = (b + e) / 2;
                if (k.CompareTo(arr[h]) >= 0)
                {
                    rv = UpperBound(arr, k, h + 1, e);
                }
                else
                {
                    rv = UpperBound(arr, k, b, h);
                }
            }

            return rv;
        }
    }
}

