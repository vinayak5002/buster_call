#include<iostream>
#include<algorithm>
#include<cmath>
#include<cstdio>
#include<vector>
using namespace std;

// -------------------- 通用基本常数 --------------------

const double eps = 1e-5;
const double pi = acos(-1.0);
static const int COUNTER_CLOCKWISE = 1;
static const int CLOCKWISE = -1;
static const int ONLINE_BACK = 2;
static const int ONLINE_FRONT = -2;
static const int ON_SEGMENT = 0;

// -------------------- 二维点（向量）类 --------------------

struct Point {
    double x, y;
    Point() {}
    Point(double x, double y) : x(x), y(y) {}
    // 输入一个点
    void input() {
        scanf("%lf%lf", &x, &y);
    }
    double norm() {
    	return x*x + y*y;
    }
    double abs() {
    	return sqrt(norm());
    }
    friend Point operator + (const Point& a, const Point& b) {
        return Point(a.x + b.x, a.y + b.y);
    }
    friend Point operator - (const Point& a, const Point& b) {
        return Point(a.x - b.x, a.y - b.y);
    }
    friend Point operator * (const Point& a, const double& b) {
        return Point(a.x * b, a.y * b);
    }
    friend Point operator * (const double& a, const Point& b) {
        return Point(a * b.x, a * b.y);
    }
    friend Point operator / (const Point& a, const double& b) {
        return Point(a.x / b, a.y / b);
    }
};

// -------------------- 向量与向量运算 --------------------

// 计算两个向量的叉积
double det(const Point& a, const Point& b) {
    return a.x * b.y - a.y * b.x;
}

// 计算两个向量的点积
double dot(const Point& a, const Point& b) {
    return a.x * b.x + a.y * b.y;
}

bool ccw(Point p0,Point p1, Point p2) {
	Point a = p1-p0;
	Point b = p2-p0;

	if(det(a, b) < -eps) return false;
	return true;
}

bool cmp(Point a, Point b) {
	if(a.x == b.x)
		return a.y < b.y;
	return a.x < b.x;
}


// -------------------- 线段（直线）类 --------------------

struct Line
{
    Point a, b;
    Line() {};
    Line(Point _a, Point _b)
        :a(_a), b(_b) {};
};

vector<Point> andrewScan(vector<Point> s) {
	vector<Point> u,l;
	if(s.size() < 3) return s;
	sort(s.begin(), s.end(), cmp);
	u.push_back(s[0]);
	u.push_back(s[1]);

	l.push_back(s[s.size() - 1]);
	l.push_back(s[s.size() - 2]);

	for(int i=2;i<s.size();i++) {
		for(int n = u.size();n>=2 && ccw(u[n-2], u[n-1],s[i]) == false; n--) 
			u.pop_back();
		u.push_back(s[i]);
	}


	for(int i=s.size()-3;i>=0;i--) {
		for(int n = l.size();n>=2 && ccw(l[n-2], l[n-1],s[i]) == false; n--) 
			l.pop_back();
		l.push_back(s[i]);
	}

	reverse(l.begin(), l.end());
	for(int i=l.size()-2;i >= 1; i--)u.push_back(l[i]);
	return u;
}



int main() {
	int n;
	cin>>n;
	vector<Point>s;
	for(int i=0;i<n;i++) {
		Point a;
		a.input();
		s.push_back(a);
	}
	vector<Point>ans = andrewScan(s);
	cout<<ans.size()<<endl;
	for(int i=0;i<ans.size();i++)
		cout<<ans[i].x<<" "<<ans[i].y<<endl;
}
