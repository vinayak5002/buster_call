def DFS(x, y, H, W):    
    if x < 0 or x >= W:
        return

    if y < 0 or y >= H:
        return

    if not maze[y][x]:
        return

    maze[y][x] = 0
    DFS(x+1, y, H, W)
    DFS(x, y+1, H, W)
    DFS(x-1, y, H, W)
    DFS(x, y-1, H, W)
    DFS(x+1, y+1, H, W)
    DFS(x+1, y-1, H, W)
    DFS(x-1, y+1, H, W)
    DFS(x-1, y-1, H, W)

while True:
    W, H = map(int, input().split())
    
    if W == 0 and H == 0:
        break
    maze = []
    for _ in range(H):
        maze.append(list(map(int, input().split())))
    
    ans = 0
    for i in range(H):
        for j in range(W):
            if not maze[i][j]:
                continue
            DFS(j, i, H, W)
            ans += 1
    print(ans)
