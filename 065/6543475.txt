
import java.util.*;

public class Main {

    static int MaxDis = 2100000;
    static class Edge
    {
        int weight;
        int v;
        public Edge(int v ,int weight)
        {
            this.v = v;
            this.weight = weight;
        }

    }

    static class Node
    {
        ArrayList<Edge> NodeArray = new ArrayList<>();
    }

    static class disNode
    {
        int dis;
        int v;

        public disNode(int v , int dis)
        {
            this.v = v;
            this.dis =dis;
        }


    }


    public static void main(String[] args) {

        Scanner scan = new Scanner(System.in);
        int v = scan.nextInt();
        int e = scan.nextInt();
        int r = scan.nextInt();

   //     ArrayList<Edge>[] Lgraph = new ArrayList[v];

        Node[] Lgraph = new Node[v];

        for(int i = 0 ; i < v ; i++)
        {
            Lgraph[i] = new Node();
        }



        for(int i = 0 ; i<e ;i ++)
        {
            int s = scan.nextInt();
            int t = scan.nextInt();
            int d = scan.nextInt();

            Edge temp = new Edge(t,d);
            Lgraph[s].NodeArray.add(temp);
        }

        scan.close();
        //-----------------------------------------------
        //Dijistra
        int[] dis = new int[v];
        boolean[] collected = new boolean[v];
        //-------------
        disNode[] disnode = new disNode[v];

        for(int i = 0 ; i < v ; i++)
        {
            collected[i] = false;

            if(r == i) {
                disnode[i] = new disNode(i, 0);
                dis[i] = 0;
            }else {
                disnode[i] = new disNode(i, MaxDis);
                dis[i] = MaxDis;
            }
        }

        disNode[] heap = makeheap(disnode);
        int[] sizeofheap = new int[1];
        sizeofheap[0] = heap.length;


        while(true)
        {

            if( sizeofheap[0]==1)
                break;

            disNode pollqueue = pickandrebuilt(heap,sizeofheap);
            int vertex = pollqueue.v;
            collected[vertex] = true;


            for(int i = 0 ; i< Lgraph[vertex].NodeArray.size();i++)
            {
                int w = Lgraph[vertex].NodeArray.get(i).v;
                int weightofw = Lgraph[vertex].NodeArray.get(i).weight;




                if(!collected[w])
                {
                    if(dis[vertex]+ weightofw < dis[w] )
                    {
                        dis[w] = dis[vertex] + weightofw;
                        for(int j = 0 ; j< sizeofheap[0]; j++)
                        {
                            if(heap[j].v == w){
                                heap[j].dis = dis[w];
                                rebuilt(heap,sizeofheap,j);
                                break;
                            }

                        }
                    }
                }


            }

        }
        for (int i = 0; i < v; i++) {
            if (dis[i] != MaxDis)
                System.out.println(dis[i]);
            else
                System.out.println("INF");
        }
    }


    static disNode[] makeheap(disNode[] disNode)
    {
        disNode[] heap =new disNode[disNode.length+1];
        heap[0] = new disNode(-1,-100);
        for(int i =1 ; i< heap.length ; i++)
        {
            heap[i] = disNode[i-1];
        }

        for(int i = (heap.length-1)/2; i> 0 ; i--)
        {
            rebuilt(heap , i , new int[]{heap.length});
        }
        return heap;

    }

    static public void rebuilt(disNode[] heap , int  root , int[] size)
    {
        int son;
        int father;
        disNode temproot = heap[root];


        for(father = root; father<<1 < size[0] ; father =son)
        {
            son = father<<1;
            if( son+1 < size[0] && heap[son+1].dis < heap[son].dis )
                son++;
            if(temproot.dis <= heap[son].dis)
                break;
            else
                heap[father] = heap[son];
        }

        heap[father] = temproot;
    }

    static public void rebuilt(disNode[] heap , int[] size , int j)
    {

        rebuilt(heap,j, size);

        disNode tempNode = heap[j];
        int son ;
        int father;
        for(son = j; son>>1 > 0 ; son = father)
        {
            father = son>>1;
            if(heap[father].dis > tempNode.dis)
                heap[son] = heap[father];
            else
                break;

        }
        heap[son] = tempNode;

    }

    static public disNode pickandrebuilt(disNode[] heap , int[] size)
    {
        disNode res = heap[1];
        size[0] = size[0]-1;
        heap[1] = heap[size[0]];
        rebuilt(heap,1, size);

        return res;
    }

}

