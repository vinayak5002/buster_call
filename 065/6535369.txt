const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
    let n = si[0];
    let nums = [];
    // 1.前の順列, 2.与えられた数列, 3.次の順列, の3つを出力する.

    for (let i = 0; i < n; i++) {
        // 入力された内容から数列を作る.
        let inp = si[1].split(" ");
        nums[i] = Number(inp[i]);
    }
    let givenSeq = nums.slice();// 2.与えられた数列.


    // 順列一覧を作成し, 与えられた数列の前後を取得する.
    nums.sort((a, b) => a - b);
    // 数列を昇順にしてから, 順列一覧を作成する.
    let perms = getPerm_enum(nums, n);

    /* memo: 番地の異なる配列同士を比べることはできないので, 
    文字列に変換してから比較する.
    console.log(givenSeq) // expected output: [2, 1, 3]
    console.log(perms[2]) // expected output: [2, 1, 3]
    console.log(perms[2] == givenSeq) // expected output: false
    console.log(perms.indexOf(givenSeq)) // expected output: -1
    */

    // 配列を文字列に変換し, 与えられた数列の位置を取得する.
    givenSeq = arr_to_str(givenSeq);
    for (let i = 0; i < perms.length; i++) {
        perms[i] = arr_to_str(perms[i]);
    }
    let prevPerm = perms[perms.indexOf(givenSeq) - 1];// 1.前の順列
    let nextPerm = perms[perms.indexOf(givenSeq) + 1];// 3.次の順列

    if (prevPerm) {
        so.write(prevPerm);
    }
    so.write(givenSeq);
    if (nextPerm) {
        so.write(nextPerm);
    }
}

function getPerm_enum(array, rec) {
    // 順列を列挙する.
    // 参考: https://qiita.com/hinaqiita/items/3cc8a2951b0da6b08fce
    let result = [];

    if (rec === 1) {// 残った1つの要素を別々の配列に分ける
        for (let i = 0; i < array.length; i++) {
            result[i] = array[i];
        }
        return result;
    }

    for (let i = 0; i < array.length; i++) {
        let parts = array.slice();
        parts.splice(i, 1)// 要素を1つ除く.
        let tmp = getPerm_enum(parts, rec - 1);// 再帰: 残り2個になるまで要素を除く操作を繰り返す.
        for (let j = 0; j < tmp.length; j++) {
            result.push([array[i]].concat(tmp[j]));// 配列resultに格納.
        }
    }

    return result;
};

function arr_to_str(array) {
    // 配列から文字列へと変換（非破壊的）
    let str = "";

    for (let i = 0; i < array.length; i++) {
        str += array[i];
        if (i < array.length - 1) {
            str += " ";
        }
    }
    str += "\n"

    return str;
}

