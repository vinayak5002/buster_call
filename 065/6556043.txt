import java.util.Scanner;

public class Main {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        int n = getInt();
        BinaryTree bt = new BinaryTree();
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < n; i++) {
            String com = sc.next();
            if (com.equals("insert")) {
                bt.insert(getInt());
            }
            if (com.equals("find")) {
                res.append(bt.find(getInt()) != null ? "yes\n" : "no\n");
            }
            if (com.equals("delete")) {
                bt.delete(getInt());
            }
            if (com.equals("print")) {
                bt.walk(bt.root, res, 1);
                res.append('\n');
                bt.walk(bt.root, res, 0);
                res.append('\n');
            }
        }
        System.out.print(res);
    }

    static int getInt() {
        return Integer.parseInt(sc.next());
    }

    static class BinaryTree {
        Node root;

        void insert(int key) {
            Node node = new Node(key);
            if (root == null) {
                root = node;
                return;
            }

            Node parent = null;
            Node current = root;

            while (current != null) {
                parent = current;
                if (node.key < current.key) {
                    current = current.left;
                } else {
                    current = current.right;
                }
            }

            if (node.key < parent.key) {
                parent.left = node;
            } else {
                parent.right = node;
            }
            node.parent = parent;
        }

        Node find(int key) {
            Node current = root;
            while (current != null) {
                if (key == current.key) {
                    return current;
                }
                if (key < current.key) {
                    current = current.left;
                } else {
                    current = current.right;
                }
            }
            return null;
        }

        void delete(int key) {
            Node node = find(key);
            if (node == null) {
                return;
            }
            if (node.left == null && node.right == null) {
                if (node.parent == null) {
                    root = null;
                    return;
                }
                boolean isLeft = node.parent.left != null && node.parent.left.key == node.key;
                if (isLeft) {
                    node.parent.left = null;
                } else {
                    node.parent.right = null;
                }
                return;
            }
            if (node.left != null && node.right != null) {
                Node min = getMinChild(node.right);
                delete(min.key);
                node.key = min.key;
                return;
            }
            if (node.left != null) {
                if (node.parent == null) {
                    root = node.left;
                    root.parent = null;
                    return;
                }
                boolean isLeft = node.parent.left != null && node.parent.left.key == node.key;
                if (isLeft) {
                    node.parent.left = node.left;
                } else {
                    node.parent.right = node.left;
                }
                node.left.parent = node.parent;
                return;
            }
            if (node.right != null) {
                if (node.parent == null) {
                    root = node.right;
                    root.parent = null;
                    return;
                }
                boolean isLeft = node.parent.left != null && node.parent.left.key == node.key;
                if (isLeft) {
                    node.parent.left = node.right;
                } else {
                    node.parent.right = node.right;
                }
                node.right.parent = node.parent;
                return;
            }
        }
        void walk(Node node, StringBuilder res, int order) {
            if (node == null) {
                return;
            }
            if (order == 0) {
                res.append(' ').append(node.key);
            }
            walk(node.left, res, order);
            if (order == 1) {
                res.append(' ').append(node.key);
            }
            walk(node.right, res, order);
        }

        Node getMinChild(Node node) {
            Node current = node;
            while (current.left != null) {
                current = current.left;
            }
            return current;
        }
    }

    static class Node {
        int key;
        Node left;
        Node right;
        Node parent;

        Node(int key) {
            this.key = key;
        }
    }
}

