#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#define _GLIBCXX_DEBUG
using namespace std;
using std::cout;
using std::cin;
using std::endl;
using ll=long long;
using ld=long double;
ll ILL=2167167167167167167;
const int INF=2100000000;
const ll mod=1e9+7;
#define rep(i,a) for (ll i=0;i<a;i++)
#define all(p) p.begin(),p.end()
template<class T> using _pq = priority_queue<T, vector<T>, greater<T>>;
template<class T> ll LB(vector<T> &v,T a){return lower_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> ll UB(vector<T> &v,T a){return upper_bound(v.begin(),v.end(),a)-v.begin();}
template<class T> bool chmin(T &a,const T &b){if(a>b){a=b;return 1;}else return 0;}
template<class T> bool chmax(T &a,const T &b){if(a<b){a=b;return 1;}else return 0;}
template<class T> void So(vector<T> &v) {sort(v.begin(),v.end());}
template<class T> void Sore(vector<T> &v) {sort(v.begin(),v.end(),[](T x,T y){return x>y;});}
void yneos(bool a){if(a) cout<<"Yes\n"; else cout<<"No\n";}
template<class T> void vec_out(vector<T> &p){for(int i=0;i<(int)(p.size());i++){if(i) cout<<" ";cout<<p[i];}cout<<"\n";}



void solve();
// oddloop
int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	
	solve();
}

void solve(){
	int N;
	cin>>N;
	vector<ll> fact(N+1,1),fact_rev(N+1,1);
	auto rev=[&](ll a)->ll{
		int x=mod-2;
		ll tmp=1;
		while(x){
			if(x&1) tmp=(tmp*a)%mod;
			x>>=1;
			a=(a*a)%mod;
		}
		return tmp;
	};
	rep(i,N){
		fact[i+1]=(fact[i]*(i+1))%mod;
		fact_rev[i+1]=rev(fact[i+1]);
	}
	auto f=[&](vector<ll> l,vector<ll> r)->vector<ll>{
		int n=l.size(),m=r.size();
		vector<ll> ans(n+m-1);
		rep(i,n) rep(j,m){
			ll tmp=(l[i]*r[j])%mod;
			rep(k,min(i,j)+1){
				ll D=(fact[i+j-k]*fact_rev[k])%mod;
				D=(D*((fact_rev[i-k]*fact_rev[j-k])%mod))%mod;
				ans[i+j-k]=(ans[i+j-k]+(D*tmp)%mod)%mod;
			}
		}
		return ans;
	};
	vector<vector<ll>> dp(N,{1});
	vector<ll> p(N),pare(N,-1);
	rep(i,N-1){
		int a,b; 
		cin>>a>>b; 
		pare[b]=a;
		p[a]++;
	}
	vector<int> order;
	rep(i,N) if(p[i]==0) order.push_back(i);
	rep(i,N){
		int a=order[i];
		dp[a].insert(dp[a].begin(),0);
		//vec_out(dp[a]);
		if(i==N-1){
			ll ans=0;
			for(auto x:dp[a]) ans=(ans+x)%mod;
			cout<<ans<<"\n";
			return;
		}
		dp[pare[a]]=f(dp[pare[a]],dp[a]);
		p[pare[a]]--;
		if(p[pare[a]]==0) order.push_back(pare[a]);
	}
}

