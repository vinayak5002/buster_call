# -*- coding: utf-8 -*-

import sys

def input(): return sys.stdin.readline().strip()
def list2d(a, b, c): return [[c] * b for i in range(a)]
def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]
def list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]
def ceil(x, y=1): return int(-(-x // y))
def INT(): return int(input())
def MAP(): return map(int, input().split())
def LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]
def Yes(): print('Yes')
def No(): print('No')
def YES(): print('YES')
def NO(): print('NO')

INF = 2 ** 31 - 1
MOD = 10 ** 9 + 7

class SegTreeLazy:
    """ 遅延評価セグメント木 """


    def __init__(self, size, func, I):
        n = 1
        while n < size+1:
            n <<= 1
        self.size = n =seg_len = 1<<19 
        self.func = func
        self.I = I
        self.node = [I] * (2 * self.size)
        self.lazy = [None] * (2 * self.size)

    # 伝搬される区間のインデックス(1-indexed)を全て列挙するgenerator
    def gindex(self, l, r):
        l += self.size;
        r += self.size
        lm = (l // (l & -l)) >> 1
        rm = (r // (r & -r)) >> 1
        ids = []
        while l < r:
            if r <= rm: ids.append(r)
            if l <= lm: ids.append(l)
            l >>= 1;
            r >>= 1
        while l:
            ids.append(l)
            l >>= 1
        return ids


    # 遅延評価の伝搬処理
    def propagates(self, ids):

        # 1-indexedで単調増加のインデックスリスト
        for i in reversed(ids):
            if i == 0: continue
            v = self.lazy[i]
            if not v: continue
            # RAQ
            self.node[2 * i] = v//2
            self.node[2 * i + 1] = v//2
            self.lazy[2 * i] = v//2
            self. lazy[2 * i + 1] = v//2
            self.lazy[i] = None

    def update(self, l, r, x):

        ids = self.gindex(l, r)
        self.propagates(ids)

        l += self.size
        r += self.size
        xx = x
        while l < r:
            if l & 1:
                self.node[l] = xx;
                self.lazy[l] = xx
                l += 1
            if r & 1:
                r -= 1
                self.node[r] = xx;
                self.lazy[r] = xx

            l >>= 1;
            r >>= 1
            xx*=2

        for i in ids:
            self.node[i] = self.func(self.node[2 * i] ,self.node[2 * i + 1] )

    def query(self, l, r):
        """ 区間[l,r)の最小値を取得 """
        ids = self.gindex(l, r)
        self.propagates(ids)


        # 1. トップダウンにlazyの値を伝搬

        l += self.size
        r += self.size
        res=0
        while l < r:
            if l & 1:
                res+=self.node[l]
                l += 1
            if r & 1:
                r -= 1
                res+=self.node[r]

            l >>= 1
            r >>= 1
        return res


N, Q = MAP()
stl = SegTreeLazy(N+1, lambda x,y:x+y,0)

ans = []
for i in range(Q):
    cmd, *arg = MAP()
    if cmd == 0:
        s, t, x = arg
        stl.update(s, t+1, x)
    else:
        s, t = arg
        print((stl.query(s, t+1)))



