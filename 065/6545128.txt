#include <bits/stdc++.h>
using namespace std;

using Graph = vector<vector<int>>;
vector<bool> check;
vector<int> arrive_time, set_time;

void dfs(vector<vector<int>> Graph, int start_point, int& time) {

    check.at(start_point) = true;
    arrive_time.at(start_point) = time;

    for(auto next_point : Graph.at(start_point)) {
        if(check.at(next_point))
        continue;
        else {
            time++;
            dfs(Graph, next_point, time);
        }
    }
    set_time.at(start_point) = ++time;
}

int main() {

    int n, time = 1;
    cin >> n;
    Graph G(n + 1);
    for(int i = 0; i < n; i++) {
        int vertex, edges;
        cin >> vertex >> edges;
        for(int j = 0; j < edges; j++) {
            int x;
            cin >> x;
            G.at(vertex).push_back(x);
            G.at(x).push_back(vertex);
        }
    }

    check.assign(n + 1, false);
    arrive_time.resize(n + 1);
    set_time.resize(n + 1);

    dfs(G, 1, time);

    for(int i = 1; i <= n; i++) {
        cout << i  << " " << arrive_time.at(i) << " " << set_time.at(i) << endl;
    }
}
