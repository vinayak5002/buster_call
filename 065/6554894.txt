#line 1 "convex_hull.test.cpp"
#define PROBLEM "http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=CGL_4_A"
#include <iomanip>
#include <iostream>

#line 2 "/home/kite/competition/SPJ-Library/geometry/geometry.hpp"
#include <algorithm>
#include <cassert>
#include <cmath>
#include <complex>
#include <vector>

using R = long double;
using point = std::complex<R>;
using arrow = point;
const R EPS(1e-10), PI(acosl(-1));

inline bool eq(const R &a, const R &b) { return fabsl(b - a) < EPS; }
inline bool same_point(const point &a, const point &b) { return abs(b - a) < EPS; }
/*
	sign of x
	-1: x < 0
	 0: x == 0
	 1: x > 0
*/
inline int sgn(const R &x) { return fabsl(x) < EPS ? 0 : (x < 0 ? -1 : 1); }
/*
	sign of (a-b)
	-1: a < b
	 0: a == b
	 1: a > b
*/
inline int compare(const R &a, const R &b) { return eq(a, b) ? 0 : a < b ? -1 : 1; }

std::istream &operator>>(std::istream &is, point &p) {
	R a, b;
	is >> a >> b;
	p = point(a, b);
	return is;
}
std::ostream &operator<<(std::ostream &os, point &p) { return os << '(' << p.real() << ", " << p.imag() << ')'; }

// rotate point 'p' for counter clockwise direction
point rotate(const point &p, const R &theta) {
	return point(cosl(theta) * p.real() - sinl(theta) * p.imag(), sinl(theta) * p.real() + cosl(theta) * p.imag());
}

R radian_to_degree(const R &r) { return (r * 180.0 / PI); }
R degree_to_radian(const R &d) { return (d * PI / 180.0); }

// get angle a-b-c (<pi)
R get_angle(const point &a, const point &b, const point &c) {
	const point v(a - b), w(c - b);
	R theta = fabsl(atan2l(w.imag(), w.real()) - atan2l(v.imag(), v.real()));
	return std::min(theta, 2 * PI - theta);
}

namespace std {
bool operator<(const point &a, const point &b) { return a.real() != b.real() ? a.real() < b.real() : a.imag() < b.imag(); }
}  // namespace std

struct segment;
struct line {
	point a, b;
	line() = default;
	line(const point &a, const point &b) : a(a), b(b) {}
	// Ax + By + C = 0
	line(const R &A, const R &B, const R &C) {
		if(eq(A, 0)) {
			assert(!eq(B, 0));
			a = point(0, -C / B), b = point(1, -(A + C) / B);
		} else {
			a = point(-C / A, 0), b = point(-(B + C) / A, 1);
		}
	}
	explicit line(const segment &seg);
	friend std::ostream &operator<<(std::ostream &os, line &ln) { return os << '(' << ln.a << " -- " << ln.b << ')'; }
	friend std::istream &operator>>(std::istream &is, line &a) { return is >> a.a >> a.b; }
};
struct segment {
	point a, b;
	segment() = default;
	segment(const point &a, const point &b) : a(a), b(b) {}
	explicit segment(const line &ln) : a(ln.a), b(ln.b) {}
	friend std::ostream &operator<<(std::ostream &os, segment &seg) { return os << '[' << seg.a << " -- " << seg.b << ']'; }
	friend std::istream &operator>>(std::istream &is, segment &a) { return is >> a.a >> a.b; }
};
line::line(const segment &seg) : a(seg.a), b(seg.b) {}

struct circle {
	point center;
	R radius;
	circle() = default;
	circle(const point &center, const R &radius) : center(center), radius(radius) {}
};

using points = std::vector<point>;
using polygon = std::vector<point>;
using segments = std::vector<segment>;
using lines = std::vector<line>;
using circles = std::vector<circle>;

R cross(const point &a, const point &b) { return real(a) * imag(b) - imag(a) * real(b); }
R dot(const point &a, const point &b) { return real(a) * real(b) + imag(a) * imag(b); }

enum CCW {
	ONLINE_FRONT = -2,
	CLOCKWISE = -1,
	ON_SEGMENT = 0,
	COUNTER_CLOCKWISE = 1,
	ONLINE_BACK = 2,
};
int ccw(const point &a, point b, point c) {
	b -= a, c -= a;
	const R crs_b_c = cross(b, c);
	if(crs_b_c > EPS) return CCW::COUNTER_CLOCKWISE;
	if(crs_b_c < -EPS) return CCW::CLOCKWISE;
	if(dot(b, c) < -EPS) return CCW::ONLINE_BACK;
	if(norm(b) + EPS < norm(c)) return CCW::ONLINE_FRONT;
	return CCW::ON_SEGMENT;
}

bool parallel(const arrow &a, const arrow &b) { return eq(cross(a, b), R(0)); }
bool parallel(const line &a, const line &b) { return parallel(a.b - a.a, b.b - b.a); }
bool parallel(const line &a, const segment &b) { return parallel(a.b - a.a, b.b - b.a); }
bool parallel(const segment &a, const line &b) { return parallel(a.b - a.a, b.b - b.a); }
bool parallel(const segment &a, const segment &b) { return parallel(a.b - a.a, b.b - b.a); }

bool orthogonal(const arrow &a, const arrow &b) { return eq(dot(a, b), R(0)); }
bool orthogonal(const line &a, const line &b) { return orthogonal(a.b - a.a, b.b - b.a); }
bool orthogonal(const line &a, const segment &b) { return orthogonal(a.b - a.a, b.b - b.a); }
bool orthogonal(const segment &a, const line &b) { return orthogonal(a.b - a.a, b.b - b.a); }
bool orthogonal(const segment &a, const segment &b) { return orthogonal(a.b - a.a, b.b - b.a); }

point projection(const line &l, const point &p) { return l.a + (l.a - l.b) * dot(p - l.a, l.a - l.b) / norm(l.a - l.b); }
point projection(const segment &s, const point &p) { return projection(line(s), p); }

point reflection(const line &l, const point &p) { return projection(l, p) * R(2) - p; }
point reflection(const segment &s, const point &p) { return projection(line(s), p); }

R distance(const point &p, const point &q);
R distance(const line &l, const point &p);
int number_of_common_tangents(const circle &c1, const circle &c2) {
	const R r1 = std::min(c1.radius, c2.radius), r2 = std::max(c1.radius, c2.radius), d = distance(c1.center, c2.center);
	int com = compare(r1 + r2, d);
	return com == 1 ? compare(d + r1, r2) + 1 : 3 - com;
}

// number of common points (-1: infinite)
int intersect(const line &l, const point &p) { return int(abs(ccw(l.a, l.b, p)) != 1); }
int intersect(const point &p, const line &l) { return intersect(l, p); }
int intersect(const line &l, const line &m) {
	if(intersect(l, m.a) && intersect(l, m.b)) return -1;
	return int(!parallel(l, m));
}
int intersect(const segment &s, const point &p) { return int(ccw(s.a, s.b, p) == CCW::ON_SEGMENT); }
int intersect(const point &p, const segment &s) { return intersect(s, p); }
int intersect(const line &l, const segment &s) {
	if(intersect(l, s.a) && intersect(l, s.b)) return -1;
	return ccw(l.a, l.b, s.a) * ccw(l.a, l.b, s.b) != 1;
}
int intersect(const segment &s, const line &l) { return intersect(l, s); }
int intersect(const circle &c, const line &l) {
	R d = c.radius - distance(l, c.center);
	return fabsl(d) < EPS ? 1 : d > 0. ? 2 : 0;
}
int intersect(const line &l, const circle &c) { return intersect(c, l); }
int intersect(const circle &c, const point &p) { return int(eq(c.radius, distance(c.center, p))); }
int intersect(const point &p, const circle &c) { return intersect(c, p); }
int intersect(const segment &s, const segment &t) {
	if(same_point(s.a, s.b)) return intersect(t, s.a);
	if(intersect(line(s), t.a) && intersect(line(s), t.b) &&
	   std::max(std::min(s.a, s.b), std::min(t.a, t.b)) < std::min(std::max(s.a, s.b), std::max(t.a, t.b)))
		return -1;
	return int(ccw(s.a, s.b, t.a) * ccw(s.a, s.b, t.b) <= 0 && ccw(t.a, t.b, s.a) * ccw(t.a, t.b, s.b) <= 0);
}
int intersect(const circle &c, const segment &s) {
	const point h = projection(s, c.center);
	const int c0 = compare(distance(h, c.center), c.radius);
	if(c0 == 1) return 0;
	if(c0 == 0) return intersect(s, h);
	const int c1 = compare(distance(c.center, s.a), c.radius), c2 = compare(distance(c.center, s.b), c.radius);
	if(std::min(c1, c2) == -1) return int(std::max(c1, c2) >= 0);
	return intersect(s, h) ? 2 : 0;
}
int intersect(const segment &s, const circle &c) { return intersect(c, s); }
int intersect(const circle &c1, const circle &c2) { return 2 - abs(2 - number_of_common_tangents(c1, c2)); }

// distance of two shaps
R distance(const point &a, const point &b) { return fabs(a - b); }
R distance(const line &l, const point &p) { return distance(p, projection(l, p)); }
R distance(const point &p, const line &l) { return distance(l, p); }
R distance(const line &l, const line &m) { return parallel(l, m) ? distance(l, m.a) : 0; }
R distance(const segment &s, const point &p) {
	const point r = projection(s, p);
	return intersect(s, r) ? distance(r, p) : std::min(distance(s.a, p), distance(s.b, p));
}
R distance(const point &p, const segment &s) { return distance(s, p); }
R distance(const segment &a, const segment &b) {
	if(intersect(a, b)) return R(0);
	return std::min({distance(a, b.a), distance(a, b.b), distance(b, a.a), distance(b, a.b)});
}
R distance(const line &l, const segment &s) {
	if(intersect(l, s)) return 0;
	return std::min(distance(l, s.a), distance(l, s.b));
}
R distance(const segment &s, const line &l) { return distance(l, s); }
R distance(const circle &c, const point &p) { return fabsl(distance(c.center, p) - c.radius); }
R distance(const point &p, const circle &c) { return distance(c, p); }
R distance(const circle &c, const line &l) { return std::max(R(0), distance(l, c.center) - c.radius); }
R distance(const line &l, const circle &c) { return distance(c, l); }
R distance(const circle &c1, const circle &c2) {
	const R d = distance(c1.center, c2.center);
	if(d > c1.radius + c2.radius) return d - c1.radius - c2.radius;
	if(d < fabsl(c1.radius - c2.radius)) return fabsl(c1.radius - c2.radius) - d;
	return R(0);
}
R distance(const circle &c, const segment &s) {
	const point p = projection(s, c.center);
	const R dist_min = intersect(s, p) ? distance(c.center, p) : std::min(distance(c.center, s.a), distance(c.center, s.b));
	if(dist_min > c.radius) return dist_min - c.radius;
	const R dist_max = std::max(distance(c.center, s.a), distance(c.center, s.b));
	return dist_max < c.radius ? c.radius - dist_max : R(0);
}
R distance(const segment &s, const circle &c) { return distance(c, s); }

point crosspoint(const line &l, const line &m) {
	R A = cross(l.b - l.a, m.b - m.a);
	R B = cross(l.b - l.a, l.b - m.a);
	if(eq(A, 0.)) return m.a;
	return m.a + (m.b - m.a) * B / A;
}
point crosspoint(const segment &s, const segment &t) { return crosspoint(line(s), line(t)); }
point crosspoint(const segment &s, const line &l) { return crosspoint(line(s), l); }
point crosspoint(const line &l, const segment &s) { return crosspoint(l, line(s)); }
points crosspoints(const circle &c, const line &l) {
	const point pr = projection(l, c.center);
	const R square = c.radius * c.radius - norm(pr - c.center);
	switch(sgn(square)) {
		case 0:
			return points{pr};
		case -1:
			return points(0);
	}
	const arrow v = (l.b - l.a) / abs(l.b - l.a) * sqrtl(square);
	return points{pr - v, pr + v};
}
points crosspoints(const line &l, const circle &c) { return crosspoints(c, l); }
points crosspoints(const circle &c, const segment &s) {
	points ret;
	for(const auto &pt : crosspoints(c, line(s)))
		if(intersect(s, pt)) ret.push_back(pt);
	return ret;
}
points crosspoints(const segment &s, const circle &c) { return crosspoints(c, s); }
points crosspoints(const circle &c1, const circle &c2) {
	R d = abs(c1.center - c2.center);
	if(compare(d, c1.radius + c2.radius) == 1) return points(0);
	if(compare(d, fabsl(c1.radius - c2.radius)) == -1) return points(0);
	bool one_crosspoint = false;
	if(eq(d, c1.radius + c2.radius) || eq(d, fabsl(c1.radius - c2.radius))) one_crosspoint = true;
	const R alpha = acosl((c1.radius * c1.radius + d * d - c2.radius * c2.radius) / (2 * c1.radius * d));  // cosine theorem
	const R beta = std::arg(c2.center - c1.center);
	if(one_crosspoint) return points{c1.center + std::polar(c1.radius, beta + alpha)};
	return points{c1.center + std::polar(c1.radius, beta + alpha), c1.center + std::polar(c1.radius, beta - alpha)};
}

points tangent_points(const circle &c, const point &p) {
	const R square = norm(c.center - p) - c.radius * c.radius;
	switch(sgn(square)) {
		case 0:
			return points{p};
		case -1:
			return points{};
	}
	return crosspoints(c, circle(p, sqrtl(square)));
}

// common tangents of two circles
lines tangents(circle c1, circle c2) {
	lines ret;
	if(c1.radius < c2.radius) std::swap(c1, c2);
	const R g = distance(c1.center, c2.center);
	if(!sgn(g)) return ret;
	const arrow u = (c2.center - c1.center) / g;
	const arrow v = rotate(u, PI * 0.5);
	for(const int &s : {-1, 1}) {
		const R h = (c1.radius + s * c2.radius) / g;
		if(eq(1 - h * h, 0)) {
			ret.emplace_back(c1.center + u * c1.radius, c1.center + (u + v) * c1.radius);
		} else if(1 - h * h > 0) {
			const point uu = u * h, vv = v * sqrtl(1 - h * h);
			ret.emplace_back(c1.center + (uu + vv) * c1.radius, c2.center - (uu + vv) * c2.radius * R(s));
			ret.emplace_back(c1.center + (uu - vv) * c1.radius, c2.center - (uu - vv) * c2.radius * R(s));
		}
	}
	return ret;
}
#line 2 "/home/kite/competition/SPJ-Library/geometry/convex.hpp"

bool is_convex(const polygon &p, bool pi_is_ok = true) {
	int n = (int)p.size();
	if(pi_is_ok) {
		for(int i = 0; i < n; i++)
			if(ccw(p[i], p[(i + 1) % n], p[(i + 2) % n]) == -1) return false;
	} else {
		for(int i = 0; i < n; i++)
			if(ccw(p[i], p[(i + 1) % n], p[(i + 2) % n]) != 1) return false;
	}
	return true;
}

polygon convex_hull(polygon &p, bool vertices_on_edge_remain = true) {
	int n = (int)p.size(), k = 0;
	if(n <= 2) return p;
	sort(p.begin(), p.end());
	points ch(2 * n);
	if(vertices_on_edge_remain) {
		for(int i = 0; i < n; ch[k++] = p[i++])
			while(k >= 2 && ccw(ch[k - 2], ch[k - 1], p[i]) == -1) --k;
		for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--])
			while(k >= t && ccw(ch[k - 2], ch[k - 1], p[i]) == -1) --k;
	} else {
		for(int i = 0; i < n; ch[k++] = p[i++])
			while(k >= 2 && ccw(ch[k - 2], ch[k - 1], p[i]) != 1) --k;
		for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--])
			while(k >= t && ccw(ch[k - 2], ch[k - 1], p[i]) != 1) --k;
	}
	ch.resize(k - 1);
	return ch;
}

// cut the convex polygon 'U' with line 'a'-'b', then return the leftside polygon
// (i.e. forall p \in (returned polygon), ccw(a, b, p) != -1)
// only 0~2 points may be returned
polygon convex_cut(const polygon &U, const point &a, const point &b) {
	polygon ret;
	const line l(a, b);
	for(int i = 0; i < U.size(); i++) {
		const point &now = U[i], &nxt = U[(i + 1) % U.size()];
		if(ccw(l.a, l.b, now) != -1) ret.push_back(now);
		if(ccw(l.a, l.b, now) * ccw(l.a, l.b, nxt) == -1) ret.push_back(crosspoint(line(now, nxt), l));
	}
	return ret;
}
#line 1 "/home/kite/competition/SPJ-Library/geometry/convex_integer.hpp"
#include <tuple>
#line 3 "/home/kite/competition/SPJ-Library/geometry/convex_integer.hpp"

namespace integer_geometry {
using ll = long long;
template <typename int_type = ll>
using pt = std::pair<int_type, int_type>;
template <typename int_type = ll>
using pts = std::vector<pt<int_type>>;

enum CCW_INT { CLOCKWISE = -1, ONLINE = 0, COUNTER_CLOCKWISE = 1 };
template <typename int_type = ll>
int ccw_integer(const pt<int_type>& a, const pt<int_type>& b, const pt<int_type>& c) {
	ll area = ll(b.first - a.first) * ll(c.second - a.second) - ll(b.second - a.second) * ll(c.first - a.first);
	return area ? (area > 0 ? CCW_INT::COUNTER_CLOCKWISE : CCW_INT::CLOCKWISE) : CCW_INT::ONLINE;
}

template <typename int_type = ll>
bool is_convex_integer(const pts<int_type>& p, bool pi_is_ok = true) {
	int n = (int)p.size();
	if(pi_is_ok) {
		for(int i = 0; i < n; i++)
			if(ccw_integer(p[i], p[(i + 1) % n], p[(i + 2) % n]) == CCW_INT::CLOCKWISE) return false;
	} else {
		for(int i = 0; i < n; i++)
			if(ccw_integer(p[i], p[(i + 1) % n], p[(i + 2) % n]) != CCW_INT::COUNTER_CLOCKWISE) return false;
	}
	return true;
}

template <typename int_type = ll>
pts<int_type> convex_hull_integer(pts<int_type>& p, bool vertices_on_edge_remain = true) {
	int n = (int)p.size(), k = 0;
	if(n <= 2) return p;
	sort(p.begin(), p.end());
	pts<int_type> ch(2 * n);
	if(vertices_on_edge_remain) {
		for(int i = 0; i < n; ch[k++] = p[i++])
			while(k >= 2 && ccw_integer(ch[k - 2], ch[k - 1], p[i]) == CCW_INT::CLOCKWISE) --k;
		for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--])
			while(k >= t && ccw_integer(ch[k - 2], ch[k - 1], p[i]) == CCW_INT::CLOCKWISE) --k;
	} else {
		for(int i = 0; i < n; ch[k++] = p[i++])
			while(k >= 2 && ccw_integer(ch[k - 2], ch[k - 1], p[i]) != CCW_INT::COUNTER_CLOCKWISE) --k;
		for(int i = n - 2, t = k + 1; i >= 0; ch[k++] = p[i--])
			while(k >= t && ccw_integer(ch[k - 2], ch[k - 1], p[i]) != CCW_INT::COUNTER_CLOCKWISE) --k;
	}
	ch.resize(k - 1);
	return ch;
}

}  // namespace integer_geometry
#line 7 "convex_hull.test.cpp"

using namespace std;
using ll = long long;

void rotate_answer(vector<pair<ll, ll>>& ans) {
	int start_id = 0;
	for(int i = 1; i < int(ans.size()); i++) {
		auto& smallest = ans[start_id];
		auto& nxt = ans[i];
		if(nxt.second < smallest.second || (nxt.second == smallest.second && nxt.first < smallest.first)) {
			start_id = i;
		}
	}
	rotate(ans.begin(), ans.begin() + start_id, ans.end());
}

int main() {
	cout << fixed << setprecision(10);
	int n;
	cin >> n;
	integer_geometry::pts<integer_geometry::ll> p_int(n);
	for(auto& q : p_int) cin >> q.first >> q.second;
	points p(n);
	for(int i = 0; i < n; i++) p[i] = point(p_int[i].first, p_int[i].second);
	p = convex_hull(p, true);
	vector<pair<ll, ll>> ans;
	for(auto& q : p) ans.emplace_back(ll(q.real()), ll(q.imag()));
	rotate_answer(ans);
	cout << ans.size() << '\n';
	vector<pair<ll, ll>> ans_int = integer_geometry::convex_hull_integer(p_int, true);
	rotate_answer(ans_int);
	assert(ans == ans_int);
	for(auto& [a, b] : ans) cout << a << ' ' << b << '\n';
}

