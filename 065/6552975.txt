#include <bits/stdc++.h>
using namespace std;
#define rep(i,n) for (int i = 0; i < (n); ++i)
bool solve() {
    int H;
    cin >> H;
    if (H == 0) return false;

    vector<vector<int>> p(5, vector<int>(H));
    rep(i,H) rep(j,5) cin >> p[j][i];
    rep(j,5) reverse(p[j].begin(), p[j].end());
    
    vector<queue<int>> qs(5);
    rep(j,5) rep(i,H) qs[j].push(p[j][i]);
    int score = 0;

    while (1) {
        bool changed = false;
        vector<queue<int>> nqs(5);
        while (1) {
            if (qs[2].empty()) break;
            int target = qs[2].front();
            int cnt = 1;
            if (!qs[1].empty() && qs[1].front() == target) {
                cnt++;
                if (!qs[0].empty() && qs[0].front() == target) {
                    cnt++;
                }
            }
            if (!qs[3].empty() && qs[3].front() == target) {
                cnt++;
                if (!qs[4].empty() && qs[4].front() == target) {
                    cnt++;
                }
            }
            if (cnt >= 3) {
                changed = true;
                score += target;
                if (qs[1].empty() || qs[1].front() != target) {
                    nqs[1].push(qs[1].front());
                    nqs[0].push(qs[0].front());
                } else if (qs[0].empty() || qs[0].front() != target) {
                    nqs[0].push(qs[0].front());
                    score += target;
                } else {
                    score += target * 2;
                }
                if (qs[3].empty() || qs[3].front() != target) {
                    nqs[3].push(qs[3].front());
                    nqs[4].push(qs[4].front());
                } else if (qs[4].empty() || qs[4].front() != target) {
                    nqs[4].push(qs[4].front());
                    score += target;
                } else {
                    score += target * 2;
                }
            } else {
                rep(j,5) if (!qs[j].empty()) nqs[j].push(qs[j].front());
            }
            rep(j,5) qs[j].pop();
        }
        qs = nqs;
        if (!changed) break;
    }

    cout << score << endl;
    return true;
}

int main(){
    while(solve()){}
} 
