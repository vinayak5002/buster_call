#include <iostream>
#include <vector>
#include <utility>

using namespace std;
using ul=unsigned long int;

struct card{
    char type;
    ul num;
    ul index;
};
ul partition(vector<card>& A, ul p, ul r){
    auto x=A[r].num;
    auto i=p-1;
    for(ul j=p;j<r;++j){
        if(A[j].num<=x){
            i+=1;
            swap(A[i], A[j]);
        }
    }
    swap(A[i+1], A[r]);
    return i+1;
}
void quick_sort(vector<card>& A, ul p, ul r){
    if(p<r){
        auto q = partition(A, p, r);
        quick_sort(A, p, q-1);
        quick_sort(A, q+1, r);
    }
}
bool check(vector<card>& vec){
    for(ul i=0; i<vec.size()-1; ++i){
        if(vec[i].num==vec[i+1].num){
            if(vec[i].index>vec[i+1].index)return false;
        }
    }
    return true;
}
int main(){
    ul n;
    cin>>n;
    vector<card> vec(n);
    ul num;
    char type;
    ul index;
    for(ul i=0; i<n; ++i){
        cin>>vec[i].type>>vec[i].num;
        vec[i].index=i;
    }
    quick_sort(vec, 0, vec.size()-1);
    auto stable=check(vec);
    cout<<(stable ? "Stable":"Not Stable")<<endl;
    for(auto x : vec){
        cout<<x.type<<" "<<x.num<<endl;
    }
}
