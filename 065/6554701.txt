import sys

# READ_FROM_FILE = True
READ_FROM_FILE = False


def make_pixel_hist_grid(h, w, num_pixels, image):
    pixel_hist_grid = [[[0] * num_pixels for _ in range(w)] for _ in range(h)]
    pixel_hist_grid[0][0][image[0][0]] += 1
    for x in range(1, w):
        pixel_hist_grid[0][x] = pixel_hist_grid[0][x - 1][:]
        pixel_hist_grid[0][x][image[0][x]] += 1

    for y in range(1, h):
        tmp_pixel_hist = [0] * num_pixels
        for x in range(w):
            tmp_pixel_hist[image[y][x]] += 1
            pixel_hist_grid[y][x] = [i + j for i, j in zip(tmp_pixel_hist, pixel_hist_grid[y - 1][x])]

    # for y in range(1, h):
    #     pixel_hist_grid[y][0] = pixel_hist_grid[y - 1][0][:]
    #     pixel_hist_grid[y][0][image[y][0]] += 1
    #     for x in range(1, w):
    #         pixel_hist_grid[y][x] = [i + j - k for i, j, k in zip(pixel_hist_grid[y][x - 1],
    #                                                               pixel_hist_grid[y - 1][x],
    #                                                               pixel_hist_grid[y - 1][x - 1])]
    #         pixel_hist_grid[y][x][image[y][x]] += 1

    return pixel_hist_grid


def calc_min_num_pixels(h, w, s, pixel_hist_grid):
    all_pixel_hist = pixel_hist_grid[h - 1][w - 1]
    max_hh = max(2, min(h + 1, s + 1))
    min_hh = min(max(1, s // w), max_hh - 1)
    min_num_pixels = sum([1 for i in all_pixel_hist if i > 0])
    max_ww = min(w, s)
    for hh in range(min_hh, max_hh):
        for ww in range(max_ww, 0, -1):
            if ww * hh > s:
                continue

            for y in range(h - hh + 1):
                by = y - 1
                ey = y + hh - 1
                for x in range(w - ww + 1):
                    bx = x - 1
                    ex = x + ww - 1
                    cur_pixel_hist = pixel_hist_grid[ey][ex]
                    if bx >= 0:
                        dif_x_pixel_hist = pixel_hist_grid[ey][bx]
                        cur_pixel_hist = [i - j for i, j in zip(cur_pixel_hist, dif_x_pixel_hist)]
                    if by >= 0:
                        dif_y_pixel_hist = pixel_hist_grid[by][ex]
                        cur_pixel_hist = [i - j for i, j in zip(cur_pixel_hist, dif_y_pixel_hist)]

                    if bx >= 0 and by >= 0:
                        dif_xy_pixel_hist = pixel_hist_grid[by][bx]
                        cur_pixel_hist = [i + j for i, j in zip(cur_pixel_hist, dif_xy_pixel_hist)]

                    # remaining_pixel_hist = [i - j for i, j in zip(all_pixel_hist, cur_pixel_hist)]
                    # num_remaining_pixels = sum(1 for i in remaining_pixel_hist if i > 0)

                    num_remaining_pixels = sum(1 for i, j in zip(all_pixel_hist, cur_pixel_hist) if i > j)
                    min_num_pixels = min(min_num_pixels, num_remaining_pixels)

                    # for yy in range(h):
                    #     for xx in range(w):
                    #         if not (x <= xx <= ex and y <= yy <= ey):
                    #             print('.', end='')
                    #         else:
                    #             print('*', end='')
                    #     print()
                    # print()

            break
    return min_num_pixels


def main():
    if READ_FROM_FILE:
        f = open('test1.txt', 'r')
    else:
        f = sys.stdin

    h, w, s = map(int, f.readline().split())
    image = []
    for _ in range(h):
        image.append([i - 1 for i in list(map(int, f.readline().split()))])

    if s >= h * w:
        print(0)
    else:
        num_pixels = 256
        if s == 1:
            all_pixel_hist = [0] * num_pixels
            for y in range(h):
                for x in range(w):
                    all_pixel_hist[image[y][x]] += 1
            not_zero_bins = [i for i in all_pixel_hist if i > 0]
            min_num_pixels = len(not_zero_bins) if min(not_zero_bins) > 1 else len(not_zero_bins) - 1
        else:
            pixel_hist_grid = make_pixel_hist_grid(h, w, num_pixels, image)
            min_num_pixels = calc_min_num_pixels(h, w, s, pixel_hist_grid)

        print(min_num_pixels)

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

