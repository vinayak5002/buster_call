// Building a Space Station
// 2022 04 29
#include <bits/stdc++.h>
using namespace std;
#define rep(i,n) for (int i = 0; i < (n); ++i)

struct UnionFind {
    vector<int> par; // 各要素の親要素
    UnionFind(int n) {
        par.resize(n);
        for (int i = 0; i < n; i++) par[i] = i;
    }
    int root(int x) {
        if (par[x] == x) return x;
        else return par[x] = root(par[x]);
    }
    bool same(int x, int y) {
        return root(x) == root(y);
    }
    void unite(int x, int y) {
        x = root(x);
        y = root(y);
        if (x == y) return;
        par[x] = y;
    }
};

struct edge {int u, v; double cost; };
bool comp(edge &e1, edge &e2) {
    return e1.cost < e2.cost;
}

vector<double> x, y, z, r;

double dist(int i, int j) {
    double dx = x[i] - x[j];
    double dy = y[i] - y[j];
    double dz = z[i] - z[j];
    return max(0.0, sqrt(dx*dx + dy*dy + dz*dz) - r[i] - r[j]);
}

bool solve(){
    int n;
    cin >> n;
    if (n == 0) return false;
    x.resize(n);
    y.resize(n);
    z.resize(n);
    r.resize(n);
    rep(i,n) cin >> x[i] >> y[i] >> z[i] >> r[i];

    vector<edge> es;
    rep(i,n) rep(j,i) {
        es.push_back(edge{i, j, dist(i, j)});
    }
    sort(es.begin(), es.end(), comp);
    UnionFind uf = UnionFind(n);

    double ans = 0;
    for (edge &e : es) {
        if (!uf.same(e.u, e.v)) {
            uf.unite(e.u, e.v);
            ans += e.cost;
        }
    }
    cout << fixed << setprecision(3);
    cout << ans << endl;

    return true;
} 

int main() {
    while (solve());
}

