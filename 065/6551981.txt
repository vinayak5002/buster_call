#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <vector>
#include <numeric>
#include <algorithm>
#include <queue>
#include <string>
#include <random>
#include <array>
#include <climits>
#include <map>
#include <cassert>
#include <stack>
#include <iomanip>
#include <cfloat>
#include <bitset>
#include <fstream>
#include <chrono>
#include <memory>

using namespace std;
class Dinic {
	struct Edge {
		int to, pair; bool flow;
	};
	int n, m, start, goal;
	vector<vector<Edge>> graph;
	vector<int> indices, depth;
	queue<int> que;
	void bfs(const int start) {
		fill(depth.begin(), depth.end(), -1);
		depth[start] = 0;
		que.push(start);
		while (!que.empty()) {
			const auto front = que.front(); que.pop();
			for (const auto [to, _, flow] : graph[front]) {
				if (!flow) continue;
				if (depth[to] >= 0) continue;
				depth[to] = depth[front] + 1;
				que.push(to);
			}
		}
	}
	bool dfs(const int current) {
		if (current == goal) return true;
		while (indices[current] < graph[current].size()) {
			const auto [next, pair, has_flow] = graph[current][indices[current]++];
			if (!has_flow || depth[current] >= depth[next]) continue;
			if (dfs(next)) {
				graph[current][indices[current] - 1].flow = false;
				graph[next][pair].flow = true;
				return true;
			}
		}
		return false;
	}
	void _add_edge(const int from, const int to) {
		graph[from].push_back(Edge{ to, (int)graph[to].size(), true });
		graph[to].push_back(Edge{ from, (int)graph[from].size() - 1, false });
	}
public:
	Dinic(const int n, const int m) : n{ n }, m{ m }, start{ n + m }, goal{ n + m + 1 }, graph(n + m + 2), indices(n + m + 2), depth(n + m + 2) 
	{
		for (auto i = 0; i < n; ++i) {
			_add_edge(start, i);
		}
		for (auto i = 0; i < m; ++i) {
			_add_edge(i + n, goal);
		}
	};
	void add_edge(const int from, const int to) {
		_add_edge(from, to + n);
	}
	vector<int> calc_matching() {
		const int start = n + m;
		const int goal = start + 1;
		bool has_flow = true;
		while (has_flow) {
			has_flow = false;
			bfs(start);
			fill(indices.begin(), indices.end(), 0);
			while (dfs(start)) {
				has_flow = true;
			}
		}
		vector<int> result(n, -1);
		for (auto i = 0; i < n; ++i) {
			for (const auto [to, _, has_flow] : graph[i]) {
				if (!has_flow && to != start) {
					result[i] = to - n;
				}
			}
		}
		return result;
	}
};
vector<int> initial_matching(const int n, const vector<pair<int, int>>& edges) {
	Dinic dinic(n, n);
	for (const auto [u, v] : edges) {
		dinic.add_edge(u, v);
	}
	return dinic.calc_matching();
}

std::vector<int> scc(const std::vector<std::vector<int>>& nodes) {
	const int n = nodes.size();
	std::stack<int> stack, search_stack;
	std::vector<int> order(n, -1), low(n, -1), indices(n, 0);
	int count{ 0 }, group{ 0 };
	for (auto i = 0; i < n; ++i) {
		if (order[i] >= 0) continue;
		stack.push(i);
		while (!stack.empty()) {
			const auto top = stack.top(); stack.pop();
			if (indices[top] == 0) {
				order[top] = ++count;
				search_stack.push(top);
			}
			if (indices[top] == nodes[top].size()) {
				int current_low{ order[top] };
				for (const auto next : nodes[top]) {
					if (indices[next] < 0) continue;
					if (order[next] < order[top]) {
						current_low = std::min(current_low, order[next]);
					}
					else {
						current_low = std::min(current_low, low[next]);
					}
				}
				low[top] = current_low;
				if (current_low == order[top]) {
					indices[top] = --group;
					while (search_stack.top() != top) {
						indices[search_stack.top()] = group;
						search_stack.pop();
					}
					search_stack.pop();
				}
			}
			else {
				stack.push(top);
				int index = indices[top];
				while (index < nodes[top].size() && order[nodes[top][index]] >= 0) {
					++index;
				}
				if (index < nodes[top].size()) {
					stack.push(nodes[top][index++]);
				}
				indices[top] = index;
			}
		}
	}
	for (auto& i : indices) {
		i -= group;
	}
	return indices;
}
vector<bool> can_reach(const int start, const vector<vector<int>>& graph) {
	queue<int> queue; queue.push(start);
	vector<bool> visit(graph.size(), false); visit[start] = true;
	while (!queue.empty()) {
		const auto front = queue.front(); queue.pop();
		for (const auto next : graph[front]) {
			if (visit[next]) continue;
			visit[next] = true;
			queue.push(next);
		}
	}
	return visit;
}

vector<pair<int, int>> solve(const int n, const int m, const vector<pair<int, int>> edges) {
	const auto initial_pair = initial_matching(n, edges);
	vector<vector<int>> graph(n * 2);
	for (const auto [u, v] : edges) {
		graph[u].push_back(v + n);
		if (initial_pair[u] == v) {
			graph[v + n].push_back(u);
		}
	}
	const auto group = scc(graph);
	const auto dag_size = (*max_element(group.begin(), group.end())) + 1;
	vector<vector<int>> dag(dag_size);
	vector<int> in_degree(dag_size);
	for (const auto [u, v] : edges) {
		if (group[u] == group[v + n]) continue;
		dag[group[u]].push_back(group[v + n]);
		in_degree[group[v + n]] += 1;
	}
	vector<int> first(dag_size), second(dag_size);
	for (auto i = 0; i < n; ++i) {
		first[group[i]] = i + 1;
		second[group[i + n]] = i + 1;
	}
	vector<int> source, sink;
	for (auto i = 0; i < dag_size; ++i) {
		if (dag[i].empty() && in_degree[i] == 0) continue;
		if (dag[i].empty()) {
			sink.push_back(i);
		}
		else if (in_degree[i] == 0) {
			source.push_back(i);
		}
	}
	Dinic dinic(source.size(), sink.size());
	for (auto i = 0; i < source.size(); ++i) {
		const auto visit = can_reach(source[i], dag);
		for (auto j = 0; j < sink.size(); ++j) {
			if (visit[sink[j]]) {
				dinic.add_edge(i, j);
			}
		}
	}
	const auto dag_matching = dinic.calc_matching();
	vector<int> rev_matching(sink.size(), -1);
	for (auto i = 0; i < dag_matching.size(); ++i) {
		if (dag_matching[i] == -1) continue;
		rev_matching[dag_matching[i]] = i;
	}
	vector<pair<int, int>> matching;
	for (auto i = 0; i < dag_matching.size(); ++i) {
		if (dag_matching[i] == -1) continue;
		matching.emplace_back(i, dag_matching[i]);
	}
	vector<int> free_source, free_sink;
	for (auto i = 0; i < dag_matching.size(); ++i) {
		if (dag_matching[i] == -1) {
			free_source.push_back(i);
		}
	}
	for (auto i = 0; i < rev_matching.size(); ++i) {
		if (rev_matching[i] == -1) {
			free_sink.push_back(i);
		}
	}
	vector<pair<int, int>> result;
	for (auto i = 0; i < matching.size(); ++i) {
		const auto start = source[matching[i].first];
		const auto goal = sink[matching[(i + 1) % matching.size()].second];
		result.emplace_back(first[goal], second[start]);
	}
	if (!free_source.empty() || !free_sink.empty()) {
		if (free_source.empty()) {
			free_source.push_back(source.front());
		}
		if (free_sink.empty()) {
			free_sink.push_back(sink.front());
		}
		for (auto i = 0; i < max(free_source.size(), free_sink.size()); ++i) {
			const auto start = source[free_source[i % free_source.size()]];
			const auto goal = sink[free_sink[i % free_sink.size()]];
			result.emplace_back(first[goal], second[start]);
		}
	}
	return result;
}
int main() {
	while (true) {
		int n, m; cin >> n >> m;
		if (n == 0 && m == 0) break;
		vector<pair<int, int>> edges(m);
		for (auto &[u, v] : edges) {
			cin >> u >> v; --u; --v;
		}
		const auto result = solve(n, m, edges);
		cout << result.size() << '\n';
		for (const auto [u, v] : result) {
			cout << u << ' ' << v << '\n';
		}
	}
}

