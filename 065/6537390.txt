#include <bits/stdc++.h>
using namespace std;
class extension {
//イテレーター省略
#define all(v) v.begin(),v.end()
//配列の読み取り
#define loadVector(n,v) for (int i = 0;i < n;i++) cin >> v[i]
//pair型配列の読み取り
#define loadVectors(n,v) for (int i = 0;i < n;i++) cin >> v[i].first >> v[i].second
//逆ソート
#define r_sort(v) sort(v.rbegin(),v.rend())
//long long省略
#define ll long long
//指定したkeyがmapに存在するかどうか
#define mapFind(m,x) m.find(x) != end(m)
//long doubleの省略
#define ld long double
//unsigned long longの省略
#define ull unsigned long long

//nをbase_number進数に変換する
public:string To_oct(int n, int base_number) {
    string s;
    while (n) {
        s = to_string(n % base_number) + s;
        n /= base_number;
    }
    return s;
}

//エラトステネスの篩
vector<int> Eratosthenes(int N) {
    vector<bool> is_prime(N + 1);
    for (int i = 0; i <= N; i++) is_prime[i] = true;
    vector<int> P;
    for (int i = 2; i <= N; i++)
    {
        if (is_prime[i])
        {
            for (int j = 2 * i; j <= N; j += i)
            {
                is_prime[j] = false;
            }
            P.emplace_back(i);
        }
    }
    return P;
}

//文字列を分割する
vector<string> Split(const string& str, char sep) {
    vector<string> v;
    stringstream ss(str);
    string buffer;
    while(getline(ss, buffer, sep)) {
        v.push_back(buffer);
    }
    return v;
}

//約数全列挙
vector<ll> Divisor(ll n) {
    vector<ll> result;
    set<ll> s;
    for (ll i = 1; i <= sqrt(n); i++) {
        if (n % i == 0) {
            s.insert(i);
            s.insert(n / i);
        }
    }

    for (int x : s) {
        result.push_back(x);
    }
    return result;
}

//連立方程式を解く
pair<int,int> SimultaneousEquations(int a,int b,int c,int d,int e,int f) {
    double matrix;
	matrix = a * e - b*d;

	double x, y;
	if (matrix == 0) {
		cout << "連立方程式の解はありません\n";
		return make_pair(-1,-1);
	}
	else {
		x = (c * e - b * f) / matrix;
		y = (a * f - c * d) / matrix;
		
		if (floor(x) != x || floor(y) != y) return make_pair(-1,-1);
		return make_pair(x,y);
	}
}

//コンビネーション(nCr)
unsigned long long Combination(int n, int r)
{
    if (n < 0 || r < 0 || r > n) cout << "無効な値です" << endl;

    if (n - r < r) r = n - r;
    if (r == 0) return 1;
    if (r == 1) return n;

    vector<int> numerator(r);
    vector<int> denominator(r);

    for (int k = 0; k < r; k++)
    {
        numerator[k] = n - r + k + 1;
        denominator[k] = k + 1;
    }

    for (int p = 2; p <= r; p++)
    {
        int pivot = denominator[p - 1];
        if (pivot > 1)
        {
            int offset = (n - r) % p;
            for (int k = p - 1; k < r; k += p)
            {
                numerator[k - offset] /= pivot;
                denominator[k] /= pivot;
            }
        }
    }

    unsigned long long result = 1;
    for (int k = 0; k < r; k++)
    {
        if (numerator[k] > 1) result *= numerator[k];
    }

    return result;
}

//二分探索
int Binary_Search(vector<int> _x,int key) {
    int left = -1,right = _x.size();
    
    while (right - left > 1) {
        int mid = (left+right) / 2;
        
        if (_x[mid] >= key) right = mid;
        else left = mid;
    }
    
    return right;
}

// 第一引数と第二引数を比較し、第一引数(a)をより大きい/小さい値に上書き
template <typename T> inline bool chmin(T& a, const T& b) {bool compare = a > b; if (a > b) a = b; return compare;}
template <typename T> inline bool chmax(T& a, const T& b) {bool compare = a < b; if (a < b) a = b; return compare;}

//配列の出力
template <typename T> inline void print(const vector<T>& v, string s = " ")
    {for (int i = 0;i < v.size();i++) cout << v[i] << (i != (ll)v.size() - 1 ? s : "\n");}
//pairの出力
template <typename T, typename S> inline void print(const pair<T, S>& p)
    {cout << p.first << " " << p.second << endl;}
//普通の出力
template <typename T> inline void print(const T& x) {cout << x << "\n";}
//pair型配列の出力
template <typename T, typename S> inline void print(const vector<pair<T, S>>& v)
    {for (auto&& p : v) print(p);}
};

int main(void) {
    // Your code here!
    cin.tie(nullptr);
    ios::sync_with_stdio(false);

    //拡張クラスのインスタンス化
    extension ex = extension();
    
    ////////ここから処理内容記述/////////////
    int d;
    cin >> d;
    
    ex.print(d/4);
}
