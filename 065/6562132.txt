import sys
from math import inf, isinf
from heapq import heappush, heappop

def main(ioi):
    rxs = lambda: map(int, ioi.readline().split())
    nV, nE = rxs()
    Es = [[inf] * nV for _ in range(nV)]

    for s, t, d in (rxs() for _ in range(nE)):
        Es[s][t] = d

    dp = [[None]*nV for _ in range(1<<nV)]
    dp[(1<<nV)-2][0] = 0
    
    # dp[S][v] = min(dp[S|(1<<v)][k] + Es[v][k] for k in range(nV) if not S & (1<<k))
    # dp[(1<<nV)-1][0] = 0

    def solve(S, v):
        if dp[S][v] == None:
            x = [solve(S|(1<<v), k) + Es[v][k] for k in range(nV) if not S&(1<<k) and k != v]
            dp[S][v] = min(x) if x else inf
        # print(f"({bin(S), v}) => {dp[S][v]}")
        return dp[S][v]
        
    return min(solve(0, k) + Es[0][k] for k in range(1, nV))

DBG = False
if not DBG: print(main(sys.stdin))
else:
    import io
    print(main(io.StringIO("""4 6
0 1 2
1 2 3
1 3 9
2 0 1
2 3 6
3 2 4""")))

