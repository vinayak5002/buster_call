#include <bits/stdc++.h>
using namespace std;

void dfs(int i, int &t, vector<deque<int>> &G, vector<int> &discover, vector<int> &finish)
{
    int c;
    t += 1;
    discover[i] = t;
    for (int j = 0; j < G[i].size(); j++)
    {
        c = G[i][j];
        if (discover[c] == -1)
        {
            dfs(c, t, G, discover, finish);
        }

        
    }
        t += 1;
        finish[i] = t;
        return;

}

int main()
{
    int n, k, v, p,t;
    cin >> n;
t=0;
    vector<deque<int>> G(n + 1);
    vector<int> discover(n + 1, -1);
    vector<int> finish(n + 1);

    for (int i = 1; i < n + 1; i++)
    {
        cin >> p >> k;
        for (int j = 0; j < k; j++)
        {
            cin >> v;
            G[p].push_back(v);
        }
    }

    dfs(1, t, G, discover, finish);

    for (int i = 1; i < n + 1; i++)
    {
        cout << i << ' ' << discover[i] << ' ' << finish[i] << endl;
    }

    return 0;
}
