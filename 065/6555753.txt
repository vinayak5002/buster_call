#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <math.h>
#include <iomanip>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <list>
#include <iomanip>
#include <numeric>
using namespace std;
using ll = long long;
using P = pair<int,int>;
using PL = pair<ll,ll>;
using V = vector<int>;
using VL = vector<ll>;
using VD = vector<double>;
using VC = vector<char>;
using VP = vector<P>;
using VS = vector<string>;
using VV = vector<V>;
using VVL = vector<VL>;
using VVD = vector<VD>;
using VVC = vector<VC>;
using VVP = vector<VP>;
using VVS = vector<VS>;
const int INF  = 1001001001;
const ll INFL = 1001001001001001001;
const ll MOD = 1000000007;
const ll MOD_ = 998244353;
const V DH = {0,1,0,-1};
const V DW = {1,0,-1,0};
#define rep(i, j, n) for(int i = (ll)(j); i < (ll)(n); i++)
#define repb(i, j, n) for(int i = (ll)(n-1); i >= (ll)(j); i--)
#define reps(i, j, n) for(int i = (ll)(j); i <= (ll)(n); i++)
#define repsb(i, j, n) for(int i = (ll)(n); i >= (ll)(j); i--)
#define all(a) (a).begin(),(a).end()

template<typename T>
ostream &operator<<(ostream &os, const vector< T > &v) {
    for(int i=0; i<(int)v.size(); i++){
        os << v[i] << (i+1 != (int)v.size() ? " " : "");
    }
    return os;
}

template<typename T>
istream &operator>>(istream &is, vector<T> &v){
    for(T &in : v) is >> in;
    return is;
}

template<typename T1, typename T2>
ostream &operator<<(ostream &os, const pair<T1, T2>& p) {
  os << p.first << " " << p.second;
  return os;
}

template<typename T1, typename T2>
istream &operator>>(istream &is, pair<T1, T2> &p) {
  is >> p.first >> p.second;
  return is;
}

template<class T>
vector<int> compress(vector<T> &v, int a = 0){
    vector<T> w = v;
    vector<int> ret(v.size());
    sort(w.begin(), w.end());
    w.erase(unique(w.begin(), w.end()), w.end());
    for(int i=0; i<v.size(); i++){
        ret[i] = lower_bound(w.begin(), w.end(), v[i]) - w.begin() + a;
    }
    return ret;
}

void Yes(bool a){
    if(a) cout << "Yes" << endl;
    else cout << "No" << endl;
}

template<class T> bool chmin(T& a, T b){
    if(a > b){
        a = b;
        return true;
    }
    return false;
}

template<class T> bool chmax(T& a, T b){
    if(a < b){
        a = b;
        return false;
    }
    return true;
}

template<class T> T power(T x, ll n) {
    T ret = 1;
    while (n > 0) {
        if (n & 1) ret = ret * x/* % MOD*/;
        x = x * x/* % MOD*/;
        n >>= 1;
    }
    return ret;
}

ll round_up(ll a, ll b){
    return (a + b - 1) / b;
}

ll GCD(ll a, ll b){
    if(a % b == 0){
        return(b);
    }else{
        return(GCD(b, a % b));
    }
}

ll LCM(ll a, ll b){
    return a / GCD(a, b) * b ;
}

struct SegmentTree{
    private:
        ll n;
        const ll e = 1;//単位元

    public:
        VL node;

        ll func(ll a, ll b){//子→親に渡す演算
            //if(b == e) return a;//単位元を便宜的に設定したときの処理
            return LCM(a, b);
        }

        SegmentTree(VL vec){
            ll sz = vec.size();
            n = 1; while(n < sz) n *= 2;
            node.resize(2*n-1,e);
            for(ll i=0; i<sz; i++) node[i+n-1] = vec[i];
            for(ll i=n-2; i>=0; i--) node[i] = func(node[2*i+1], node[2*i+2]);
        }

        void update(ll x, ll val){
            x += n - 1;
            node[x] = val;
            while(x > 0){
                x = (x - 1) / 2;
                node[x] = func(node[2*x+1], node[2*x+2]);
            }
        }

        //[a, b) 
        ll get(ll a, ll b, ll k=0, ll l = 0, ll r = -1){
            if(r < 0) r = n;
            if(r <= a || b <= l) return e;
            if(a <= l && r <= b) return node[k];
            ll vl = get(a, b, 2*k+1, l, (l+r)/2);
            ll vr = get(a, b, 2*k+2, (l+r)/2, r);
            return func(vl, vr);
        }
};



int main(void){
	
    //input

    int N;
    cin >> N;
    VL A(N), B(N);
    //cin >> A >> B;
    cin >> A;
    //calculate

    SegmentTree seg = A;
    /*ll lt = seg.get(0, N);
    cout<< lt << endl;
    bool ok = true;
    rep(i,0,N){
        if(A[i] * (B[i]-1) < lt) ok = false;
    }
    Yes(ok);*/
    cout << seg.get(0,N) << endl;



}
