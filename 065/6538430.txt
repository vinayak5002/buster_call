#include<bits/stdc++.h>
using namespace std;
typedef int64_t ll;

typedef long double ld;
const ll MOD=1000000007;
const ll MODA=998244353;
ll vx[4]={0,1,0,-1};
ll vy[4]={1,0,-1,0};
#define rep(i,n) for(ll i=0;i<(ll)(n);i++)
long long gcd(long long a,long long b){
    a=abs(a);
    b=abs(b);
    ll gcdmax=max(a,b);
    ll gcdmin=min(a,b);
    if(gcdmin==0)return gcdmax;
    while(true){
        if(gcdmax%gcdmin==0)break;
        else gcdmax%=gcdmin;
        swap(gcdmin,gcdmax);
    }
    return gcdmin;
}
ll pow(ll N,ll P,ll M){
    if(P==0)return 1;
    else if(P%2==0){
        ll t=pow(N,P/2,M);
        return t*t%M;
    }
    else return N*pow(N,P-1,M)%M;
}
ll pow(ll N,ll P){
    if(P==0)return 1;
    else if(P%2==0){
        ll t=pow(N,P/2);
        return t*t;
    }
    else return N*pow(N,P-1);
}

vector<ll> fac;
vector<ll> finv;
vector<ll> inv;
void COMinit(ll N,ll P){
    rep(i,N+1){
        if(i==0){
            fac.push_back(1);
            finv.push_back(1);
            inv.push_back(1);
        }
        else if(i==1){
            fac.push_back(1);
            finv.push_back(1);
            inv.push_back(1);
        }
        else{
            fac.push_back(fac.at(i-1)*i%P);
            inv.push_back(P-inv.at(P%i)*(P/i)%P);
            finv.push_back(finv.at(i-1)*inv.at(i)%P);
        }
    }
}

ll COM(ll n,ll k,ll P){
    if(n<k)return 0;
    if(n<0||k<0)return 0;
    return fac.at(n)*(finv.at(k)*finv.at(n-k)%P)%P;
}


struct UnionFind {
    vector<ll> par; // par[i]:iの親の番号　(例) par[3] = 2 : 3の親が2

    UnionFind(ll N) : par(N) { //最初は全てが根であるとして初期化
        for(ll i = 0; i < N; i++) par[i] = i;
    }

    ll root(ll x) { // データxが属する木の根を再帰で得る：root(x) = {xの木の根}
        if (par[x] == x) return x;
        return par[x] = root(par[x]);
    }

    void unite(ll x, ll y) { // xとyの木を併合
        ll rx = root(x); //xの根をrx
        ll ry = root(y); //yの根をry
        if (rx == ry) return; //xとyの根が同じ(=同じ木にある)時はそのまま
        par[rx] = ry; //xとyの根が同じでない(=同じ木にない)時：xの根rxをyの根ryにつける
    }

    bool same(ll x, ll y) { // 2つのデータx, yが属する木が同じならtrueを返す
        ll rx = root(x);
        ll ry = root(y);
        return rx == ry;
    }
};

int main(){
    vector<ll> Ans;
    while(true){
        ll N;
        cin>>N;
        if(N==0)break;
        vector<ll> A(N);
        rep(i,N){
            cin>>A.at(i);
        }
        vector<vector<ll>> dp(N,vector<ll>(N));
        rep(i,N){
            rep(j,N-i){
                if(i==0)dp[j][j+i]=0;
                else if(i==1){
                    if(abs(A[j]-A[j+i])<=1)dp[j][j+i]=2;
                }
                else{
                    for(ll k=j;k<j+i;k++){
                        dp[j][j+i]=max(dp[j][k]+dp[k+1][j+i],dp[j][j+i]);
                    }
                    for(ll k=j;k<j+i;k++){
                        if(dp[k+1][j+i-1]==j+i-k-1){
                            if(abs(A[k]-A[j+i])<=1&&k>0)dp[j][j+i]=max(dp[k+1][j+i-1]+2+dp[j][k-1],dp[j][j+i]);
                            else if(k>0) dp[j][j+i]=max(dp[k+1][j+i-1]+dp[j][k-1],dp[j][j+i]);
                            else if(abs(A[k]-A[j+i])<=1&&k==0)dp[j][j+i]=max(dp[k+1][j+i-1]+2,dp[j][j+i]);
                            else if(k==0)dp[j][j+i]=max(dp[k+1][j+i-1],dp[j][j+i]);
                        }
                    }
                }
            }
        }
        /*rep(i,N){
            rep(j,N){
                cout<<"["<<i<<","<<j<<"]:"<<dp[i][j]<<endl;
            }
        }*/
        Ans.push_back(dp[0][N-1]);
    }
    for(ll x:Ans)cout<<x<<endl;
}
