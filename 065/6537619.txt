#include <iostream>
#include <string>
#include <vector>
#include <bitset>
#include <cmath>
#include <iomanip>
#include <iterator>
#include <numeric>
#include <set>
#include <list>
#include <functional>
#include <utility>
#include <queue>
#include <map>
#include <algorithm>
using namespace std;
typedef long long ll;

class OddNumber
{
};

class EvenNumber
{
};

bool operator==(OddNumber oddNumber, long long n)
{
    return n % 2 == 1;
}

bool operator==(EvenNumber evenNumber, long long n)
{
    return n % 2 == 0;
}

bool operator==(long long n, OddNumber oddNumber)
{
    return oddNumber == n;
}

bool operator==(long long n, EvenNumber evenNumber)
{
    return evenNumber == n;
}

#define llV(name, size)                     \
    std::vector<long long> name(size);      \
    for (unsigned int i = 0; i < size; i++) \
    cin >> name[i]

OddNumber Odd;
EvenNumber Even;

#define INF (1ll) << 60
#define rep(i, n) for (long long i = 0; i < n; i++)
#define yes cout << "yes" << endl
#define no cout << "no" << endl
#define Yes cout << "Yes" << endl
#define No cout << "No" << endl
#define all(v) v.begin(), v.end()
#define ld long double

// uint64_t combinations2(uint64_t n, uint64_t k)
// {
//     uint64_t r = 1;
//     for (uint64_t d = 1; d <= k; ++d)
//     {
//         r *= n--;
//         r /= d;
//     }
//     return r;
// }

vector<ll> Z_algorithm(string S)
{
    ll c = 0, n = S.size();
    vector<ll> Z(n, 0);
    for (ll i = 1; i < n; i++)
    {
        ll l = i - c;
        if (i + Z[l] < c + Z[c])
        {
            Z[i] = Z[l];
        }
        else
        {
            ll j = max(0ll, c + Z[c] - i);
            while (i + j < n && S[j] == S[i + j])
                j++;

            Z[i] = j;
            c = i;
        }
    }

    Z[0] = n;
    return Z;
}
const int MAX = 5100000;
const int MOD = 1000000007;

long long fac[MAX], finv[MAX], inv[MAX];

// テーブルを作る前処理
void COMinit()
{
    fac[0] = fac[1] = 1;
    finv[0] = finv[1] = 1;
    inv[1] = 1;
    for (int i = 2; i < MAX; i++)
    {
        fac[i] = fac[i - 1] * i % MOD;
        inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;
        finv[i] = finv[i - 1] * inv[i] % MOD;
    }
}

// 二項係数計算
long long COM(int n, int k)
{
    if (n < k)
        return 0;
    if (n < 0 || k < 0)
        return 0;
    return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;
}

void chmax(ll &a, ll b)
{
    if (a < b)
        a = b;
}
void chmin(ll &a, ll b)
{
    if (a > b)
    {
        a = b;
    }
}
template <int MOD>
struct ModInt
{
    static const int Mod = MOD;
    unsigned x;
    ModInt() : x(0) {}
    ModInt(signed sig) { x = sig < 0 ? sig % MOD + MOD : sig % MOD; }
    ModInt(signed long long sig) { x = sig < 0 ? sig % MOD + MOD : sig % MOD; }
    int get() const { return (int)x; }
    ModInt &operator+=(ModInt that)
    {
        if ((x += that.x) >= MOD)
            x -= MOD;
        return *this;
    }
    ModInt &operator-=(ModInt that)
    {
        if ((x += MOD - that.x) >= MOD)
            x -= MOD;
        return *this;
    }
    ModInt &operator*=(ModInt that)
    {
        x = (unsigned long long)x * that.x % MOD;
        return *this;
    }
    ModInt &operator/=(ModInt that) { return *this *= that.inverse(); }
    ModInt operator+(ModInt that) const { return ModInt(*this) += that; }
    ModInt operator-(ModInt that) const { return ModInt(*this) -= that; }
    ModInt operator*(ModInt that) const { return ModInt(*this) *= that; }
    ModInt operator/(ModInt that) const { return ModInt(*this) /= that; }
    ModInt inverse() const
    {
        long long a = x, b = MOD, u = 1, v = 0;
        while (b)
        {
            long long t = a / b;
            a -= t * b;
            std::swap(a, b);
            u -= t * v;
            std::swap(u, v);
        }
        return ModInt(u);
    }
    bool operator==(ModInt that) const { return x == that.x; }
    bool operator!=(ModInt that) const { return x != that.x; }
    ModInt operator-() const
    {
        ModInt t;
        t.x = x == 0 ? 0 : Mod - x;
        return t;
    }
};
template <int MOD>
ostream &operator<<(ostream &st, const ModInt<MOD> a)
{
    st << a.get();
    return st;
};
template <int MOD>
ModInt<MOD> operator^(ModInt<MOD> a, unsigned long long k)
{
    ModInt<MOD> r = 1;
    while (k)
    {
        if (k & 1)
            r *= a;
        a *= a;
        k >>= 1;
    }
    return r;
}

typedef ModInt<1000000000 + 7> mint;
const double PI = 3.1415926535897932384626433832795028841971;

bool solve()
{
    ll n;
    cin >> n;
    if (n == 0)
        return false;
    llV(p, n);
    vector<vector<pair<ll, ll>>> dp(n + 1, vector<pair<ll, ll>>(500 * n, pair<ll, ll>(0ll, INF)));
    rep(i, 500 * n) dp[0][0] = {0, 0};
    auto comp = [](pair<ll, ll> l, pair<ll, ll> r)
    {
        if (l.first < r.first)
        {
            return true;
        }
        else if (l.first == r.first)
        {
            if (l.second >= r.second)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    };
    rep(i, n)
    {
        rep(j, 500 * n)
        {
            if (dp[i][j] == make_pair(0ll, INF))
            {
                continue;
            }
            ll hundred = p[i] % 1000;
            if (500 >= hundred &&hundred!=0 && 500 - hundred + j < 500 * n)
            {
                dp[i + 1][1000 - hundred - 500 + j] = max(dp[i + 1][1000 - hundred - 500 + j], {dp[i][j].first + 1, dp[i][j].second + p[i]}, comp);
            }
            else
            {
                dp[i + 1][j] = max(dp[i + 1][j], dp[i][j], comp);
                if (1000 - hundred + j < n * 500 && hundred!=0)
                    dp[i + 1][1000 - hundred + j] = max(dp[i + 1][1000 - hundred + j], {dp[i][j].first, dp[i][j].second + p[i]}, comp);

                ll cost = (p[i] + 500) %1000;
                if (j - cost >= 0 ){
                    dp[i + 1][j - cost] = max(dp[i + 1][j - cost], {dp[i][j].first + 1, dp[i][j].second + p[i]}, comp);
                    // cout<<i<<endl;
                }
            }
        }
    }
    pair<ll, ll> res = {0, INF};
    rep(i, 500 * n)
    {
        if (dp[n][i].second == INF)
            continue;
        res = max(res, dp[n][i], comp);
    }
    cout << res.first << " " << res.second << endl;
    return true;
}

int main()
{
    while (solve())
        ;
}
