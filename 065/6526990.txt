#include <bits/stdc++.h>
#define rep(i, n) for (int i = 0; i < (n); i++)
using namespace std;
using pii = pair<int, int>;
using ll = long long;

template <typename T> struct LazySegmentTree {
	int n;
	vector<T> node, lazy;
	LazySegmentTree(int n_) {
		n = 1;
		while (n < n_) n *= 2;
		node.resize(2 * n - 1);
		lazy.resize(2 * n - 1);
	}

	void eval(int k) {
		if (lazy[k]) {
			node[k] += lazy[k];
			if (k < n - 1) {
				lazy[2 * k + 1] += lazy[k] / 2;
				lazy[2 * k + 2] += lazy[k] / 2;
			}
			lazy[k] = 0;
		}
	}

	void update(int a, int b, T x, int k = 0, int l = 0, int r = -1) {
		eval(k);
		if (r < 0) r = n;
		if (r <= a || b <= l) return;
		else if (a <= l && r <= b) {
			lazy[k] += x * (r - l);
			eval(k);
		}
		else {
			update(a, b, x, 2 * k + 1, l, (l + r) / 2);
			update(a, b, x, 2 * k + 2, (l + r) / 2, r);
			node[k] = node[2 * k + 1] + node[2 * k + 2];
		}
	}

	T get(int a, int b, int k = 0, int l = 0, int r = -1) {
		eval(k);
		if (r < 0) r = n;
		if (r <= a || b <= l) return 0;
		else if (a <= l && r <= b) return node[k];
		else {
			T vl = get(a, b, 2 * k + 1, l, (l + r) / 2);
			T vr = get(a, b, 2 * k + 2, (l + r) / 2, r);
			return vl + vr;
		}
	}
};

int main() {
	int n, q;
	cin >> n >> q;
	
	LazySegmentTree<ll> seg(n);
	rep(i, q) {
		int a, b, c;
		cin >> a >> b >> c;
		if (a == 0) {
			int d;
			cin >> d;
			seg.update(b - 1, c, d);
		}
		else {
			cout << seg.get(b - 1, c) << endl;
		}
	}
	return 0;
}
