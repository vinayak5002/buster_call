#include<bits/stdc++.h>
#define int ll
#define rep(i, N) for(int i = 0; i < (int)N; ++i)
#define rep1(i, N) for(int i = 1; i <= (int)N; ++i)
#define per(i, N) for(int i = N-1; i >= 0; --i)
#define per1(i, N) for(int i = N; i >= 1; --i)
#define FOR(i, f, t) for(int i = f; i < (int)t; ++i)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define bit(n) (1 << (n))
#define pcnt(n) (__builtin_popcount(n))
#define TakAo(ans) ans ? cout << "Takahashi\n" : cout << "Aoki\n"
#define YesNo(ans) ans ? cout << "Yes\n" : cout << "No\n"
#define endl '\n'
#define fi first
#define se second
#define mkpr make_pair
#define mktpl make_tuple
#define eb emplace_back

using namespace std;
using ll = int64_t;
using ull = uint64_t;
using ld = long double;
template<class T> using max_heap = priority_queue<T>;
template<class T> using min_heap = priority_queue<T, vector<T>, greater<T>>;
template<class T> using vec = vector<T>;
template<class T> using vvec = vec<vec<T>>;
template<class T> using vvvec = vec<vec<vec<T>>>;
template<class T> using vvvvec = vec<vec<vec<vec<T>>>>;

constexpr ld EPS = 1e-10;
constexpr int INF = 1001001001;
constexpr ll LINF = 1001001001001001001ll;
//constexpr int MOD = 1e9+7;
constexpr ll MOD = 998244353;
constexpr int div2 = (MOD + 1) >> 1;
constexpr int NIL = -1;
constexpr int pm[2] = {1, -1};
constexpr int dy[4] = {0, 1, 0, -1};
constexpr int dx[4] = {1, 0, -1, 0};

ll cel(ll a, ll b){ return (a + b - 1) / b;}
ll Gcd(ll a, ll b){ return b ? Gcd(b, a % b) : a;}
ll powi(ll x, ll exp){
    return exp > 0 ? (exp & 1 ? x : 1) * powi(x * x, exp >> 1) : 1;
}
ll modpow(ll x, ll exp, ll mod){
    x %= mod;
    return exp > 0 ? (exp & 1 ? x : 1) * modpow(x * x, exp >> 1, mod) % mod : 1;
}
template<class T> bool chmin(T &a, T b){ return a > b ? (a = b, true) : 0;}
template<class T> bool chmax(T &a, T b){ return a < b ? (a = b, true) : 0;}

using P = pair<ll, ll>;
using Tpl = tuple<int, int, int, int>;

class Bellman_Ford{
    public:

    int N;
    vector<vector<pair<int, ll>>> G;
    vector<ll> dist;

    Bellman_Ford(int N_) : N(N_), G(N), dist(N_, LINF) {}

    void add_edge(int u, int v, ll w){
        G[u].eb(mkpr(v, w));
    }

    bool solve(int s){
        dist[s] = 0;
        int T = N;
        bool update;

        while(T--){
            update = false;
            for(int u = 0; u < N; u++){
                for(auto v : G[u]){
                    if(dist[v.fi] > dist[u] + v.se && dist[u] != LINF){
                        update = true;
                        dist[v.fi] = dist[u] + v.se;
                    }
                }
            }
            if(!update) break;
        }

        return !update;
    }
};

void Main(){
    int N, M, R; cin >> N >> M >> R;
    Bellman_Ford bf(N);

    rep(i, M){
        int a, b, w; cin >> a >> b >> w;
        bf.add_edge(a, b, w);
    }

    if(!bf.solve(R)){
        cout << "NEGATIVE CYCLE!" << endl;
        return;
    }
    rep(i, N){
        if(bf.dist[i] != LINF) cout << bf.dist[i] << endl;
        else cout << "INF" << endl;
    }
}

signed main(){
    cin.tie(nullptr);
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    Main();
    return 0;
}
