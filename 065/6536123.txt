#include <bits/stdc++.h>

#include <boost/multiprecision/cpp_int.hpp>

#include <iostream>
#include <vector>

namespace rklib {

namespace geo2d_rational {

template <class T>
int sgn(T x) {
    if (x < 0) return -1;
    if (x > 0) return 1;
    return 0;
}

template <class T>
struct Point {
    T x, y;

    Point(T x = 0, T y = 0) : x(x), y(y) {}

    bool operator==(const Point& rhs) { return x == rhs.x && y == rhs.y; }
    bool operator<(const Point& rhs) const {
        if (x == rhs.x) return y < rhs.y;
        return x < rhs.x;
    }

    Point& operator+=(const Point& rhs) {
        this->x += rhs.x;
        this->y += rhs.y;
        return *this;
    }
    Point& operator-=(const Point& rhs) {
        this->x -= rhs.x;
        this->y -= rhs.y;
        return *this;
    }
    Point& operator*=(const T& rhs) {
        this->x *= rhs;
        this->y *= rhs;
        return *this;
    }
    Point& operator/=(const T& rhs) {
        this->x /= rhs;
        this->y /= rhs;
        return *this;
    }

    friend Point operator+(const Point& lhs, const Point& rhs) {
        return Point(lhs) += rhs;
    }
    friend Point operator-(const Point& lhs, const Point& rhs) {
        return Point(lhs) -= rhs;
    }
    friend Point operator*(const Point& lhs, const T& rhs) {
        return Point(lhs) *= rhs;
    }
    friend Point operator*(const T& lhs, const Point& rhs) {
        return Point(rhs) *= lhs;
    }
    friend Point operator/(const Point& lhs, const T& rhs) {
        return Point(lhs) /= rhs;
    }
    friend T operator*(const Point& lhs, const Point& rhs) {
        return lhs.x * rhs.x + lhs.y * rhs.y;
    }
    friend T operator^(const Point& lhs, const Point& rhs) {
        return lhs.x * rhs.y - lhs.y * rhs.x;
    }

    friend std::istream& operator>>(std::istream& is, Point& p) {
        is >> p.x >> p.y;
        return is;
    }
};

template <class T>
using Vec = Point<T>;
template <class T>
using Points = std::vector<Point<T>>;
template <class T>
using Polygon = Points<T>;

template <class T>
struct Line {
    Point<T> a;
    Vec<T> v;

    Line() {}
    Line(Point<T> a, Vec<T> v) : a(a), v(v) {}
};

template <class T>
struct Segment {
    Point<T> a, b;

    Segment() {}
    Segment(Point<T> a, Point<T> b) : a(a), b(b) {}
};

template <class T>
T norm(Point<T> p) {
    return p.x * p.x + p.y * p.y;
}

template <class T>
T abs_sqared(Point<T> p) {
    return norm(p);
}

template <class T>
Point<T> projection(Line<T> l, Point<T> p) {
    auto [a, v] = l;
    T t = v * (p - a) / norm(v);
    return a + v * t;
}

template <class T>
Point<T> reflection(Line<T> l, Point<T> p) {
    return projection(l, p) * 2 - p;
}

constexpr int CCW_COUNTER_CLOCKWISE = 1;
constexpr int CCW_CLOCKWISE = -1;
constexpr int CCW_ONLINE_BACK = -2;  // C->A->B
constexpr int CCW_ONLINE_FRONT = 2;  // A->B->C
constexpr int CCW_ON_SEGMENT = 0;    // A->C->B

template <class T>
int ccw(Point<T> a, Point<T> b, Point<T> c) {
    Vec<T> v = b - a, w = c - a;
    if ((v ^ w) > 0) return CCW_COUNTER_CLOCKWISE;
    if ((v ^ w) < 0) return CCW_CLOCKWISE;
    if (v * w < 0) return CCW_ONLINE_BACK;
    if ((a - b) * (c - b) < 0) return CCW_ONLINE_FRONT;
    return CCW_ON_SEGMENT;
}

template <class T>
bool is_parallel(Vec<T> v, Vec<T> w) {
    return (v ^ w) == 0;
}

template <class T>
bool is_orthogonal(Vec<T> v, Vec<T> w) {
    return v * w == 0;
}

template <class T>
bool has_intersection(Line<T> l, Segment<T> s) {
    auto [p, v] = l;
    auto [a, b] = s;
    return sgn(v ^ (a - p)) * sgn(v ^ (b - p)) <= 0;
}

template <class T>
bool has_intersection(Segment<T> s1, Segment<T> s2) {
    auto [a, b] = s1;
    auto [c, d] = s2;
    return ccw(a, b, c) * ccw(a, b, d) <= 0 && ccw(c, d, a) * ccw(c, d, b) <= 0;
}

template <class T>
Point<T> intersection(Line<T> l1, Line<T> l2) {
    auto [a, v] = l1;
    auto [b, w] = l2;
    T t = ((b - a) ^ w) / (v ^ w);
    return a + v * t;
}

template <class T>
Point<T> intersection(Segment<T> s1, Segment<T> s2) {
    auto [a, b] = s1;
    auto [c, d] = s2;
    return intersection(Line(a, b - a), Line(c, d - c));
}

}  // namespace geo2d_rational

}  // namespace rklib


#include <algorithm>
#include <cassert>
#include <vector>

namespace rklib {

template <class T>
bool chmax(T &a, const T &b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
bool chmin(T &a, const T &b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template <class T>
T div_floor(T a, T b) {
    if (b < 0) a *= -1, b *= -1;
    return a >= 0 ? a / b : (a + 1) / b - 1;
}

template <class T>
T div_ceil(T a, T b) {
    if (b < 0) a *= -1, b *= -1;
    return a > 0 ? (a - 1) / b + 1 : a / b;
}

}  // namespace rklib


#define For(i, a, b) for (int i = (int)(a); (i) < (int)(b); ++(i))
#define rFor(i, a, b) for (int i = (int)(a)-1; (i) >= (int)(b); --(i))
#define rep(i, n) For(i, 0, n)
#define rrep(i, n) rFor(i, n, 0)
#define fi first
#define se second

using namespace std;
using namespace rklib;

using lint = long long;
using pii = pair<int, int>;
using pll = pair<lint, lint>;

using namespace geo2d_rational;
using namespace boost::multiprecision;

int main() {
    int q;
    scanf("%d", &q);
    rep(qq, q) {
        Segment<cpp_rational> s1, s2;
        cin >> s1.a >> s1.b >> s2.a >> s2.b;
        auto p = intersection(s1, s2);
        printf("%.10Lf %.10Lf\n", (long double)p.x, (long double)p.y);
    }
}

