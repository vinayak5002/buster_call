#include <iostream>
using namespace std;

#define INFTY  1000000001

void cp_infty(int *to, int *from, int n)
{
  for (int i = 0; i < n; i++)
    to[i] = from[i];
  to[n] = INFTY;
}

void print_ln(int A[], int n)
{
  for (int i = 0; i < n - 1; i++) 
    cout << A[i] << " ";
  cout << A[n-1] << endl;
}

int merge(int A[], int left, int mid, int right)
{
  int n1 = mid - left;
  int n2 = right - mid;
#ifdef DBG
  cout << "(left, mid, right) = (" << left << ", " << mid << ", " << right << ")" << endl;
  cout << "n1 = " << n1 << endl;
  cout << "n2 = " << n2 << endl;
#endif
  int L[n1 + 1];
  int R[n2 + 1];
  cp_infty(L, A + left, n1);
#ifdef DBG
  cout << "L: ";  print_ln(L, n1);
#endif
  cp_infty(R, A + mid, n2);
#ifdef DBG
  cout << "R: ";  print_ln(R, n2);
#endif
  int i = 0;
  int j = 0;
  for (int k = left; k < right; ++k) {
    if (L[i] <= R[j]) {
      A[k] = L[i];
      i++;
    } else {
      A[k] = R[j];
      j++;
    }
  }
#ifdef DBG
  cout << "A: ";  print_ln(A, n1 + n2);
#endif  
  return right - left;
}

int mergeSort(int A[], int left, int right)
{
  if (left + 1 == right)
    return 0;

  int mid = (left + right) / 2;
  int cnt1 = mergeSort(A, left, mid);
  int cnt2 = mergeSort(A, mid, right);
  int cnt3 = merge(A, left, mid, right);

  return cnt1 + cnt2 + cnt3;
}

int main()
{
  int n; 
  cin >> n;
  int A[n];
  for (int i = 0; i < n; i++)
    cin >> A[i];

  int cnt = mergeSort(A, 0, n);
  print_ln(A, n);
  cout << cnt << endl;
  return 0;
}

