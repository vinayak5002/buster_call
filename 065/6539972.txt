#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int V,E;
int INF=0x3f3f3f3f;
struct edge{
	int to,cost,val;
	edge(){}
	edge(int a,int b,int c){to=a,cost=b,val=c;}
};
typedef pair<int,int> P;
vector<edge> G[10000];
int d[10000],val[10000];
void dijkstra(int s){
	priority_queue<P,vector<P>,greater<P> > que;
	fill(d,d+V,INF);
	fill(val,val+V,INF);
	d[s]=0;
	val[s]=0;
	que.push(P(0,s));
	while(!que.empty()){
		P p=que.top();que.pop();
		int v=p.second;
		if(d[v]<p.first) continue;
		for(int i=0;i<G[v].size();i++){
			edge e=G[v][i];
			if(d[e.to]>d[v]+e.cost){
				d[e.to]=d[v]+e.cost;
				val[e.to]=e.val;
				que.push(P(d[e.to],e.to));
			}else if(d[e.to]==d[v]+e.cost){
				val[e.to]=min(val[e.to],e.val);
			}
		}
	}
}
int main(){
	while(scanf("%d%d",&V,&E),V&&E){
		int a1,a2,a3,a4;
		for(int i=0;i<V;i++) G[i].clear();
		for(int i=0;i<E;i++){
			scanf("%d%d%d%d",&a1,&a2,&a3,&a4);
			G[a1-1].push_back(edge(a2-1,a3,a4));
			G[a2-1].push_back(edge(a1-1,a3,a4));
		}
		dijkstra(0);
		int ans=0;
		for(int i=1;i<V;i++) ans+=val[i];
		printf("%d\n",ans);
		
	}
	return 0;
}
