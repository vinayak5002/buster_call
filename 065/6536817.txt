const { findSourceMap } = require('module');

const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
    let n = si[0];
    // 入力された内容を数列に変換する.
    let nums = [];
    let imp = si[1].split(" ");
    for (let i = 0; i < n; i++) {
        nums[i] = Number(imp[i]);
    }
    let seq = new BinarySearch(nums);//

    // 入力された内容を一つ一つ検証する.
    let q = si[2];
    for (let i = 0; i < q; i++) {
        console.log(seq.lowerBound(Number(si[i + 3])));
    }

}

class BinarySearch {
    constructor(array) {
        this.seq = array.slice();
        this.length = array.length;
        this.head = 0
        this.tail = this.length - 1;
        this.center = Math.floor((this.tail - this.head) / 2) + this.head;
    }

    lowerBound(x) {// sequence内でx以上の値が初めて現れる位置を返す. 存在しない場合はthis.lengthを返す.
        let left = this.head;
        let right = this.tail;

        if (x > this.seq[right]) {
            return this.length;
        }
        
        while (left <= right) {
            let middle = Math.floor((left + right) / 2);
           // console.log("middle is " + middle)
            if (x < this.seq[middle] && x > this.seq[middle - 1]) {
                return middle;
            }
            if (x > this.seq[middle]) {
                left = middle + 1;
            } else if (x < this.seq[middle]) {
                right = middle - 1;
            } else {
                for (let i = middle; i >= 0; i--) {
                    if (x > this.seq[i]) {
                        return i + 1;
                    }
                }
            }
        }
    }

}
