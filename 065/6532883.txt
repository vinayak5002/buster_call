#include <iostream>
#include<string.h>
using namespace std;

typedef long long int64;
const int MAX_T=1000000;
const int MAX_P=10000;
bool valid_shift[MAX_T];
char T[MAX_T+1],P[MAX_P+1];

const int SGM = 10+26+26;
int char2num[128];
void InitChar2Num(){
    int t=0;
    for(int i=0;i<10;i++){
        char2num['0'+i]=t++;
    }
    for(int i=0;i<26;i++){
        char2num['a'+i]=t++;
    }
    for(int i=0;i<26;i++){
        char2num['A'+i]=t++;
    }
}

void RabinKarpMatcher(char T[],char P[],int d,int q){
    int T_len=strlen(T);
    int P_len=strlen(P);
    int64 h=1;
    for(int i=0;i<P_len;i++){
        h=h*d%q;
    }
    int64 p=0;
    int64 t0=0;
    for(int i=0;i<P_len;i++){
        p=(d*p+char2num[P[i]])%q;
        t0=(d*t0+char2num[T[i]])%q;
    }
    int64 ts=t0;
    for(int s=0;s+P_len<=T_len;s++){
        if(p==ts){
            valid_shift[s]=true;
        }
        ts=(d*ts%q-char2num[T[s]]*h%q+char2num[T[s+P_len]]%q);
        ts=(ts+q)%q;
    }
}

int main()
{
    cin>>T;
    cin>>P;
    InitChar2Num();
    RabinKarpMatcher(T,P,SGM,1000000007);
    for(int i=0;i<strlen(T);i++){
        if(valid_shift[i]){
            cout<<i<<endl;
        }
    }
}
