#include <bits/stdc++.h>
using namespace std;

const double eps = 1e-8;
int sign(double x) {
    if(fabs(x) < eps) return 0;
    return x > 0 ? 1 : -1;
}

struct Point {
    double x, y;
};
using Vector = Point;
Vector operator + (Vector A, Vector B) { return Vector{A.x+B.x, A.y+B.y};}
Vector operator - (Point A, Point B) { return Vector{A.x-B.x, A.y-B.y};}
Vector operator * (Vector A, double p) { return Vector{A.x*p, A.y*p};}
Vector operator / (Vector A, double p) { return Vector{A.x/p, A.y/p};}
bool operator < (Vector a, Vector b) {return a.x < b.x || a.x == b.x && a.y < b.y; }

double dot(Vector a, Vector b) {
    return a.x * b.x + a.y * b.y;
}

double cross(Vector a, Vector b) {
    return a.x * b.y - b.x * a.y;
}

vector<Point> andrew(vector<Point> &s) {
    sort(s.begin(), s.end());
    vector<Point> ret(s.size() * 2);
    int sz = 0;
    for(int i = 0; i < s.size(); i++) {
        while(sz > 1 && sign(cross(ret[sz - 1] - ret[sz - 2], s[i] - ret[sz - 2])) < 0) sz--;
        ret[sz++] = s[i];
    }
    int k = sz;
    for(int i = s.size() - 2; i >= 0; i--) {
        while(sz > k && sign(cross(ret[sz - 1] - ret[sz - 2], s[i] - ret[sz - 2])) < 0) sz--;
        ret[sz++] = s[i];
    }
    ret.resize(sz - (s.size() > 1));
    return ret;
}

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n; cin >> n;
    vector<Point> v(n);
    for(int i = 0; i<n; i++) cin >> v[i].x >> v[i].y;

    vector<Point> ret = andrew(v);
    
    int pos = -1;

    for(int i = 0; i<ret.size(); i++) {
        if(pos == -1 || ret[i].y < ret[pos].y || ret[i].y == ret[pos].y && ret[i].x < ret[pos].x) pos = i;
    }

    for(int i = pos; i<ret.size(); i++) {
        Point& p = ret[i];
        cout << p.x << " " << p.y << "\n";
    }

    for(int i = 0; i<pos; i++) {
        Point& p = ret[i];
        cout << p.x << " " << p.y << "\n";
    }


    return 0;
}
