import java.io.*;
import java.util.*;
import java.math.BigDecimal;
import java.lang.Object;
import java.util.function.*;

public class Main {
  public static int n,m,w,p,q,h,s=0,t,ans=0,mx,mn,sum,cnt,now;
  public static String[] str=new String[200];
  public static HashMap<String,Integer> hs= new HashMap<String,Integer>();
  public static char[] c= new char[200];
  public static void main(String[] args){
    int[] a=new int[200],b=new int[8];
    
    int[] dx={0,1,0,-1},dy={1,0,-1,0};
    boolean flag;
    Scanner scanner =new Scanner(System.in);
    ArrayList<Integer>vec=new ArrayList<Integer>();
    while(true){
      hs= new HashMap<String,Integer>();
      m=Integer.parseInt(scanner.next());
      n=Integer.parseInt(scanner.next());
      if(m==0&&n==0)break;
      for(int i=0;i<n;i++){
        str[i]=scanner.next();
        a[i]=i;
      }
      ans=dfs(a,n,0);
      System.out.println(ans);
      hs=null;
    }
    
  }
    public static int dfs(int[] id,int id_size,int mask){
      int ret=100,cnt=0;
      if(id_size==1)return 0;
      int id_num=0;
      String s;
      for(int i=0;i<n;i++){
        if(id_num<id_size&&i==id[id_num]){
          c[i]='1';
          id_num++;
        }
        else c[i]='0';
      }
      s=String.valueOf(c);
      if(hs.containsKey(s)){
        return hs.get(s);
      }
      for(int i=0;i<m;i++)
        if((mask&(1<<m))==0)cnt++;
      if(id_size>(1<<cnt))return 100;

      for(int i=0;i<m;i++){
        if((mask&(1<<m))==0){
          int[] L=new int[id_size],R=new int[id_size];
          int L_size=0,R_size=0;
          for(int j=0;j<id_size;j++){
            if(str[id[j]].charAt(i)=='0'){
              L[L_size]=id[j];
              L_size++;
            }
            else{
              R[R_size]=id[j];
              R_size++;
            }
          }
          if(L_size==id_size||L_size==0)continue;
          ret=Math.min(ret,Math.max(dfs(L,L_size,mask+(1<<i)), dfs(R,R_size,mask+(1<<i))));
          L=null;R=null;
        }
      }
      if(ret==100)return 100;
      ret++;
      hs.put(s, ret);
      return ret;
    }
  public interface Compare<T>{
	  public boolean func(T x,T y);
  }
  static String swap(String str, int i, int j){
      char ch[] = str.toCharArray();
      char tempo = ch[i];
      ch[i] = ch[j];
      ch[j] = tempo;
      return new String(ch);
  }
static class Pair<T,E>{
    T first;
    E second;
    public Pair(T a,E b){
      first=a;
      second=b;
    }
    public Pair(Pair<T,E>x){
      first=x.first;
      second=x.second;
    }
    public Pair(){}
    void print(){
      System.out.println("first:"+first+" second:"+second);
    }
  }
  public static <T> ArrayList<T> sort(ArrayList<T> x, Compare<T> comp,int l,int r){
    //[l,r)
    ArrayList<T>ret=new ArrayList<T>();
    if(l-r==2){
      if(comp.func(x.get(l),x.get(l+1))==false){
        ret.add(x.get(l+1));
        ret.add(x.get(l));
        return ret;
      }
      ret.add(x.get(l));
      ret.add(x.get(l+1));
      return ret;
    }
    if(r-l==1){
      ret.add(x.get(l));
      return ret;
    }
    ArrayList<T> A=sort(x,comp,l,(l+r)/2);
    ArrayList<T> B=sort(x,comp,(l+r)/2,r);
    int a=0,b=0;
    while(a<A.size()&&b<B.size()){
      if(comp.func(A.get(a),B.get(b))==true){
        ret.add(A.get(a));
        a++;
      }
      else{
        ret.add(B.get(b));
        b++;
      }
    }
    while(a<A.size()){
        ret.add(A.get(a));
        a++;
    }
     while(b<B.size()){
        ret.add(B.get(b));
        b++;
    }
    return ret;
  }
static class Query{
    int P,T,id;
    double ans=0.0;
    public Query(){}
    public Query(int x,int y,int z){
      P=x;T=y;id=z;
    }
    public Query(int x,int y,int z,double w){
      P=x;T=y;id=z;ans=w;
    }
 }
 static class Node{
  int H,W;
  double Wt=0.0;
  public Node(){}
  public Node(int x,int y){
    H=x;W=y;
  }
 }
}

