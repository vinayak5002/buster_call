using System;
using static System.Console;
using System.Collections.Generic;

class Program {

    static void Main (string[] args) {
        int t = int.Parse(ReadLine());
        for (int _i = 0; _i < t; _i++) {
            var tmp = ReadLine().Split(' ');
            int n = int.Parse(tmp[0]);
            int k = int.Parse(tmp[1]);

            tmp = ReadLine().Split(' ');
            var diffx = new long[n - 1];

            long befx = long.Parse(tmp[0]);
            for (int i = 0; i < n - 1; i++) {
                diffx[i] = long.Parse(tmp[i + 1]) - befx;
                befx = long.Parse(tmp[i + 1]);
            }

            QuickSortB2S(diffx);
            long ans = 0;
            for (int i = k - 1; i < n - 1; i++) {
                ans += diffx[i];
            }
            
            WriteLine(ans);
        }

    }


    static void QuickSortB2S (long[] a) {
        QuickSortB2S (a, 0, a.Length - 1);
    }

    static void QuickSortB2S (long[] a, int left, int right) {
        if (left < right) {
            int i = left;
            int j = right;
            long tmp;
            long pivot = med3 (a[i], a[i + (j - i) / 2], a[j]);
            while (true) {
                while (a[i] > pivot) i++;
                while (pivot > a[j]) j--;
                if (i >= j) break;
                tmp = a[i];
                a[i] = a[j];
                a[j] = tmp;
                i++;
                j--;
            }
            QuickSortB2S (a, left, i - 1);
            QuickSortB2S (a, j + 1, right);
        }
    }


    static long med3 (long x, long y, long z) {
        if (x < y) {
            if (y < z) {
                return y;
            } else if (z < x) {
                return x;
            } else {
                return z;
            }
        } else {
            if (z < y) {
                return y;
            } else if (x < z) {
                return x;
            } else {
                return z;
            }
        }
    }
}
//dotnet run --project test
