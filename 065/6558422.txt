import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class Main {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        StringBuilder res = new StringBuilder();
        Heap heap = new Heap();
        while (true) {
            String com = sc.next();
            if (com.equals("insert")) {
                heap.insert(getInt());
            }
            if (com.equals("extract")) {
                res.append(heap.extract()).append('\n');
            }
            if (com.equals("end")) {
                break;
            }
        }
        System.out.print(res);
    }

    static int getInt() {
        return Integer.parseInt(sc.next());
    }

    static class Heap {
        List<Integer> heap;
        Heap() {
            heap = new ArrayList<>();
            heap.add(-1);
        }
        void maxHeapify(int i) {
            int l = left(i);
            int r = right(i);
            int largest = i;
            if (l != -1 && heap.get(l) > heap.get(largest)) {
                largest = l;
            }
            if (r != -1 && heap.get(r) > heap.get(largest)) {
                largest = r;
            }
            if (largest != i) {
                Collections.swap(heap, i, largest);
                maxHeapify(largest);
            }
        }
        void insert(int key) {
            heap.add(key);
            int i = heap.size()-1;
            while (i > 1 && heap.get(parent(i)) < heap.get(i)) {
                Collections.swap(heap, parent(i), i);
                i = parent(i);
            }
        }
        int extract() {
            int res = heap.get(1);
            Collections.swap(heap, 1, heap.size()-1);
            heap.remove(heap.size()-1);
            maxHeapify(1);
            return res;
        }
        int parent(int i) {
            return i / 2;
        }
        int left(int i) {
            int res = i * 2;
            if (res >= heap.size()) {
                return -1;
            }
            return res;
        }
        int right(int i) {
            int res = i * 2 + 1;
            if (res >= heap.size()) {
                return -1;
            }
            return res;
        }
    }
}

