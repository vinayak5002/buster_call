#include <iostream>
#include <algorithm>
#include <vector>
#include <numeric>
#include <limits>

using namespace std;

long signed int max_profit(vector<long int> &a, int begin, int end) {
    if (begin == end) {
        return a[begin];
    } else {
        int mid = (begin + end) / 2;

        long signed int sum_tmp = numeric_limits<long int>::min();
        long signed int right_sum_max = 0;
        long signed int left_sum_max = 0;

        for (int i = mid; i >= begin; i--) {
            left_sum_max = max(left_sum_max, sum_tmp + a[i]);
        }

        sum_tmp = numeric_limits<long int>::min();

        for (int i = mid + 1; i <= end; i++) {
            right_sum_max = max(right_sum_max, sum_tmp + a[i]);
        }

        return max(max(max_profit(a, begin, mid), max_profit(a, mid + 1, end)),
            right_sum_max + left_sum_max);
    }
}

int main() {
    long int n = 0; cin >> n;
    vector<long int> a(n);
    for (int i = 0; i < n; i++) cin >> a[i];
    vector<long int> b(n-1);
    for (int i = 1; i < n; i++) b[i-1] = a[i] - a[i-1];

    for (auto e : b) cerr << e << ' ';
    cerr << endl;

    cout <<  max_profit(b, 0, n-2) << endl;
}
