import java.util.*;
import java.util.stream.Collectors;

public class Main {
    static Scanner sc = new Scanner(System.in);
    public static void main(String[] args) {
        int n = getInt();
        BinaryTree bt = new BinaryTree(n);
        for (int i = 0; i < n; i++) {
            int id = getInt();
            int left = getInt();
            int right = getInt();
            bt.add(id, left, right);
            bt.add(left, bt.nodes[id], right);
            bt.add(right, bt.nodes[id], left);
        }
        bt.setting();
        System.out.println(bt);
    }
    static int getInt() {
        return Integer.parseInt(sc.next());
    }
}

class BinaryTree {
    int size;
    Node[] nodes;
    Node root;

    BinaryTree(int size) {
        this.size = size;
        nodes = new Node[size];
        Arrays.setAll(nodes, dm -> new Node());
    }

    void add(int id, int leftId, int rightId) {
        Node node = nodes[id];
        node.id = id;
        node.leftId = leftId;
        node.rightId = rightId;
        node.setDegree();
        if (node.degree == 0) {
            node.type = "leaf";
        } else {
            node.type = "internal node";
        }
    }

    void add(int id, Node parent, int siblingId) {
        if (id == -1) return;
        Node node = nodes[id];
        node.parentId = parent.id;
        node.siblingId = siblingId;
    }

    void setting() {
        root = Arrays.stream(nodes).filter(node -> node.parentId == -1).findFirst().get();
        root.type = "root";
        root.depth = 0;
        setDepth(root);
        List<Node> leafs = Arrays.stream(nodes).filter(node -> node.type.equals("leaf")).collect(Collectors.toList());
        leafs.forEach(leaf -> leaf.height = 0);
        leafs.forEach(this::setHeight);
    }

    void setDepth(Node parent) {
        if (parent.leftId != -1) {
            Node child = nodes[parent.leftId];
            child.depth = parent.depth + 1;
            setDepth(child);
        }
        if (parent.rightId != -1) {
            Node child = nodes[parent.rightId];
            child.depth = parent.depth + 1;
            setDepth(child);
        }
    }

    void setHeight(Node child) {
        Node parent = nodes[child.parentId];
        parent.height = Math.max(parent.height, child.height + 1);
        if (parent.parentId == -1) {
            return;
        }
        setHeight(parent);
    }

    @Override
    public String toString() {
        StringBuilder res = new StringBuilder();
        Arrays.stream(nodes).forEach(node -> res.append(node.toString()).append('\n'));
        res.deleteCharAt(res.length()-1);
        return res.toString();
    }
}

class Node {
    int id;
    int parentId = -1;
    int siblingId;
    int leftId;
    int rightId;
    int degree;
    int depth;
    int height;
    String type;

    void setDegree() {
        if (leftId != -1) degree++;
        if (rightId != -1) degree++;
    }

    @Override
    public String toString() {
        return String.format("node %d: parent = %d, sibling = %d, degree = %d, depth = %d, height = %d, %s",
                id,
                parentId,
                siblingId,
                degree,
                depth,
                height,
                type);
    }
}
import java.util.*;
import java.util.stream.Collectors;

public class Main {
    static Scanner sc = new Scanner(System.in);
    public static void main(String[] args) {
        int n = getInt();
        BinaryTree bt = new BinaryTree(n);
        for (int i = 0; i < n; i++) {
            int id = getInt();
            int left = getInt();
            int right = getInt();
            bt.add(id, left, right);
            bt.add(left, bt.nodes[id], right);
            bt.add(right, bt.nodes[id], left);
        }
        bt.setting();
        System.out.println(bt);
    }
    static int getInt() {
        return Integer.parseInt(sc.next());
    }
}

class BinaryTree {
    int size;
    Node[] nodes;
    Node root;

    BinaryTree(int size) {
        this.size = size;
        nodes = new Node[size];
        Arrays.setAll(nodes, dm -> new Node());
    }

    void add(int id, int leftId, int rightId) {
        Node node = nodes[id];
        node.id = id;
        node.leftId = leftId;
        node.rightId = rightId;
        node.setDegree();
        if (node.degree == 0) {
            node.type = "leaf";
        } else {
            node.type = "internal node";
        }
    }

    void add(int id, Node parent, int siblingId) {
        if (id == -1) return;
        Node node = nodes[id];
        node.parentId = parent.id;
        node.siblingId = siblingId;
    }

    void setting() {
        root = Arrays.stream(nodes).filter(node -> node.parentId == -1).findFirst().get();
        root.type = "root";
        root.depth = 0;
        setDepth(root);
        List<Node> leafs = Arrays.stream(nodes).filter(node -> node.type.equals("leaf")).collect(Collectors.toList());
        leafs.forEach(leaf -> leaf.height = 0);
        leafs.forEach(this::setHeight);
    }

    void setDepth(Node parent) {
        if (parent.leftId != -1) {
            Node child = nodes[parent.leftId];
            child.depth = parent.depth + 1;
            setDepth(child);
        }
        if (parent.rightId != -1) {
            Node child = nodes[parent.rightId];
            child.depth = parent.depth + 1;
            setDepth(child);
        }
    }

    void setHeight(Node child) {
        Node parent = nodes[child.parentId];
        parent.height = Math.max(parent.height, child.height + 1);
        if (parent.parentId == -1) {
            return;
        }
        setHeight(parent);
    }

    @Override
    public String toString() {
        StringBuilder res = new StringBuilder();
        Arrays.stream(nodes).forEach(node -> res.append(node.toString()).append('\n'));
        res.deleteCharAt(res.length()-1);
        return res.toString();
    }
}

class Node {
    int id;
    int parentId = -1;
    int siblingId;
    int leftId;
    int rightId;
    int degree;
    int depth;
    int height;
    String type;

    void setDegree() {
        if (leftId != -1) degree++;
        if (rightId != -1) degree++;
    }

    @Override
    public String toString() {
        return String.format("node %d: parent = %d, sibling = %d, degree = %d, depth = %d, height = %d, %s",
                id,
                parentId,
                siblingId,
                degree,
                depth,
                height,
                type);
    }
}

