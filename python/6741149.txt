

#[allow(unused_imports)]
use std::collections::HashMap;
#[allow(unused_imports)]
use std::collections::{VecDeque, BinaryHeap};
#[allow(unused_imports)]
use std::hash::Hash;
#[allow(unused_imports)]
use std::io::{BufWriter, Write};
#[allow(unused_imports)]
use std::iter::Sum;
#[allow(unused_imports)]
use std::ops::{Add, Div, Deref};
#[allow(unused_imports)]
use std::ops::Index;
#[allow(unused_imports)]
use std::ops::Mul;
#[allow(unused_imports)]
use std::ops::Sub;
#[allow(unused_imports)]
use std::ptr::NonNull;
#[allow(unused_imports)]
use std::str::FromStr;
#[allow(unused_imports)]
use std::{collections::BTreeMap, collections::BTreeSet, fs::read, ops::AddAssign, ops::Neg, ops::RangeInclusive, rc::Rc, vec};
#[allow(unused_imports)]
use std::cmp::{Ordering, Reverse};
#[allow(unused_imports)]
use std::fmt::Debug;
/*
use rand::{SeedableRng, Rng};
use rand::prelude::{StdRng, IteratorRandom};
*/

const PARSE_ERROR: &str = "Can't Parse";
const EOF_ERROR: &str = "No Line";
#[allow(unused_macros)]
macro_rules! freeze {
    ($($id:ident), *) => {
        $(let $id = $id;)*
    };
}
#[allow(unused_macros)]
macro_rules! read_line {
    () => {
        {
            let mut buffer = String::new();
            std::io::stdin().read_line(&mut buffer).expect(EOF_ERROR);
            buffer.trim().to_owned()
        }
    };
    (&mut $buffer: ident) => {
        {
            std::io::stdin().read_line(&mut $buffer).expect(EOF_ERROR);
            $buffer.trim().to_owned()
        }
    };
}
#[allow(unused_macros)]
macro_rules! show {
    () => {};
    ($tt:expr) => {
        println!("{} {} => {:?}", line!(), stringify!($tt), $tt);
    };
    ($tt:tt) => {
        println!("{} {} => {:?}", line!(), stringify!($tt), $tt);
    };
    ($head:expr, $($tail:expr)*) => {
        show!($head);
        show!($($tail)*);
    };
}
#[allow(unused_macros)]
macro_rules! read {
    () => {
        read_line!()
    };
    ([[char]; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!([char])).collect::<Vec<_>>()
    };
    ([[usize1]; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!([usize1])).collect::<Vec<_>>()
    };
    ([[$ty:ty]; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!([$ty])).collect::<Vec<_>>()
    };
    ([usize1; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!(usize1)).collect::<Vec<_>>()
    };
    ([$ty:ty; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!($ty)).collect::<Vec<_>>()
    };
    ([$block: block; $size: expr]) => {
        (0 .. $size).into_iter().map(|_| read!($block)).collect::<Vec<_>>()
    };
    
    ([f64] ASC) => {
        {
            read!(mut vec: [f64]);
            vec.sort_by(|a, b| a.partial_cmp(b).unwrap());
            vec
        }
    };
    ([f64; $len: expr] ASC) => {
        {
            read!(mut vec: [f64; $len]);
            vec.sort_by(|a, b| a.partial_cmp(b).unwrap());
            vec
        }
    };
    ([$($tt: tt)*] ASC) => {
        {
            read!(mut vec: [$($tt)*]);
            vec.sort();
            vec
        }
    };
    ([f64] DESC) => {
        {
            read!(mut vec: [f64]);
            vec.sort_by(|a, b| a.partial_cmp(b).unwrap().reverse());
            vec
        }
    };
    ([f64; $len: expr] DESC) => {
        {
            read!(mut vec: [f64; $len]);
            vec.sort_by(|a, b| a.partial_cmp(b).unwrap().reverse());
            vec
        }
    };
    ([$($tt: tt)*] DESC) => {
        {
            read!(mut vec: [$($tt)*]);
            vec.sort_by_key(|&v| Reverse(v));
            vec
        }
    };
    ([char]) => {
        read_line!().chars().collect::<Vec<_>>()
    };
    ([String]) => {
        read_line!().split_whitespace().map(|s| s.to_owned()).collect::<Vec<String>>()
    };
    ([usize1]) => {
        read_line!().split_whitespace().map(|x| x.parse::<usize>().ok().expect(PARSE_ERROR) - 1).collect::<Vec<usize>>()
    };
    ([$ty: ty]) => {
        read_line!().split_whitespace().map(|x| x.parse().ok().expect(PARSE_ERROR)).collect::<Vec<$ty>>()
    };
    (usize1) => {
        read_line!().parse::<usize>().ok().expect(PARSE_ERROR) - 1
    };
    ($ty: ty) => {
        read_line!().parse::<$ty>().ok().expect(PARSE_ERROR)
    };
    ($block: block) => {
        $block
    };
    ($ident: ident: [$($tt:tt)*]) => {
        let $ident = read!([$($tt)*]);
    };
    (mut $ident: ident: [$($tt:tt)*]) => {
        let mut $ident = read!([$($tt)*]);
    };
    ($ident: ident: [$($tt:tt)*] ASC) => {
        let $ident = read!([$($tt)*] ASC);
    };
    ($ident: ident: [$($tt:tt)*] DESC) => {
        let $ident = read!([$($tt)*] DESC);
    };
    ($ident: ident: String) => {
        let $ident = read!();
    };
    (mut $ident: ident: String) => {
        let mut $ident = read!();
    };
    ($ident: ident: $ty: ty) => {
        let $ident = read_line!().parse::<$ty>().unwrap();
    };
    (mut $ident: ident: $ty: ty) => {
        let mut $ident = read_line!().parse::<$ty>().unwrap();
    };
    ($($token: tt)*) => {
        let line = read_line!();
        let mut iter = line.split_whitespace().into_iter();
        read_from_iter!(iter; $($token)*);
    };
}
#[allow(unused_macros)]
macro_rules! read_from_iter {
    ($iter:expr; mut $ident:ident:usize1, $($rest:tt)*) => {
        let mut $ident = $iter.next().unwrap().parse::<usize>().expect(PARSE_ERROR) - 1;
        read_from_iter!($iter; $($rest)*);
    };
    ($iter:expr; mut $ident:ident:$ty:ty, $($rest:tt)*) => {
        let mut $ident = $iter.next().unwrap().parse::<$ty>().expect(PARSE_ERROR);
        read_from_iter!($iter; $($rest)*);
    };
    ($iter:expr; $ident:ident:usize1, $($rest:tt)*) => {
        let $ident = $iter.next().unwrap().parse::<usize>().expect(PARSE_ERROR) - 1;
        read_from_iter!($iter; $($rest)*);
    };
    ($iter:expr; $ident:ident:$ty:ty, $($rest:tt)*) => {
        let $ident = $iter.next().unwrap().parse::<$ty>().expect(PARSE_ERROR);
        read_from_iter!($iter; $($rest)*);
    };
    ($iter:expr; mut $ident:ident:usize1) => {
        let mut $ident = $iter.next().unwrap().parse::<usize>().expect(PARSE_ERROR) - 1;
    };
    ($iter:expr; mut $ident:ident:$ty:ty) => {
        let mut $ident = $iter.next().unwrap().parse::<$ty>().expect(PARSE_ERROR);
    };
    ($iter:expr; $ident:ident:usize1) => {
        let $ident = $iter.next().unwrap().parse::<usize>().expect(PARSE_ERROR) - 1;
    };
    ($iter:expr; $ident:ident:$ty:ty) => {
        let $ident = $iter.next().unwrap().parse::<$ty>().expect(PARSE_ERROR);
    };
    ($iter: expr; ) => {};
}

fn main() {
    read!(height: usize, width: usize);
    read!(state: [[char]; height]);
    let conveyor = ['U', 'R', 'D', 'L'];
    let direction = [(-1, 0), (0, 1), (1, 0), (0, -1)];
    let mut min_step = vec![vec![-1; width]; height];
    let mut queue = VecDeque::new();
    let (gh, gw) = (0 .. height).flat_map(|h| (0 .. width).map(move |w| (h, w))).find(|&(h, w)| state[h][w] == 'G').unwrap();
    min_step[gh][gw] = 0;
    queue.push_back((gh, gw));
    while let Some((h, w)) = queue.pop_front() {
        let current_step = min_step[h][w];
        for d in 0 .. 4 {
            let (dh, dw) = direction[d];
            let nh = h as i32 + dh;
            let nw = w as i32 + dw;
            if nh < 0 || height as i32 <= nh || nw < 0 || width as i32 <= nw {continue;}
            let nh = nh as usize;
            let nw = nw as usize;
            if min_step[nh][nw] >= 0 {continue;}
            let s = state[nh][nw];
            if s == 'S' || s == '.' {
                min_step[nh][nw] = current_step + 1;
                queue.push_back((nh, nw));
            }else if s == conveyor[(d + 2) & 3] {
                min_step[nh][nw] = current_step;
                queue.push_front((nh, nw));
            }
        }
    }
    let (sh, sw) = (0 .. height).flat_map(|h| (0 .. width).map(move |w| (h, w))).find(|&(h, w)| state[h][w] == 'S').unwrap();
    println!("{}", min_step[sh][sw]);
}
