// use proconio::input;
use std::cmp::Reverse;
use std::collections::{BinaryHeap, HashMap};

const INF: usize = 1e18 as usize;

macro_rules! input {
    (source = $s:expr, $($r:tt)*) => {
        let mut iter = $s.split_whitespace();
        let mut next = || { iter.next().unwrap() };
        input_inner!{next, $($r)*}
    };
    ($($r:tt)*) => {
        let stdin = std::io::stdin();
        let mut bytes = std::io::Read::bytes(std::io::BufReader::new(stdin.lock()));
        let mut next = move || -> String{
            bytes
                .by_ref()
                .map(|r|r.unwrap() as char)
                .skip_while(|c|c.is_whitespace())
                .take_while(|c|!c.is_whitespace())
                .collect()
        };
        input_inner!{next, $($r)*}
    };
}

macro_rules! input_inner {
    ($next:expr) => {};
    ($next:expr, ) => {};

    ($next:expr, $var:ident : $t:tt $($r:tt)*) => {
        let $var = read_value!($next, $t);
        input_inner!{$next $($r)*}
    };
}

macro_rules! read_value {
    ($next:expr, ( $($t:tt),* )) => {
        ( $(read_value!($next, $t)),* )
    };

    ($next:expr, [ $t:tt ; $len:expr ]) => {
        (0..$len).map(|_| read_value!($next, $t)).collect::<Vec<_>>()
    };

    ($next:expr, chars) => {
        read_value!($next, String).chars().collect::<Vec<char>>()
    };

    ($next:expr, usize1) => {
        read_value!($next, usize) - 1
    };

    ($next:expr, $t:ty) => {
        $next().parse::<$t>().expect("Parse error")
    };
}

fn main() {
    let graph = Graph::new();
    let distances = graph.dijkstra(graph.root);
    for i in 0..graph.n {
        if distances[i] == INF {
            println!("INF");
        } else {
            println!("{}", distances[i]);
        }
    }
}

struct Graph {
    n: usize,
    root: usize,
    adj: HashMap<usize, Vec<(usize, usize)>>,
}

impl Graph {
    fn new() -> Self {
        input! {
            v: usize,
            e: usize,
            r: usize,
            edges: [(usize, usize, usize); e],
        }
        let mut adj: HashMap<usize, Vec<(usize, usize)>> = HashMap::new();
        adj.entry(0).or_insert(vec![]);
        for &(a, b, c) in &edges {
            adj.entry(a).or_default().push((b, c));
            adj.entry(b).or_insert(vec![]);
        }
        Self {
            n: v,
            root: r,
            adj: adj,
        }
    }

    fn dijkstra(&self, start: usize) -> Vec<usize> {
        let mut dists = vec![INF; self.n];
        dists[start] = 0;
        let mut heapq = BinaryHeap::new();
        heapq.push((Reverse(0), start));
        while let Some((Reverse(dist), pos)) = heapq.pop() {
            for &(next, cost) in &self.adj[&pos] {
                let next_dist = dist + cost;
                if next_dist < dists[next] {
                    heapq.push((Reverse(next_dist), next));
                    dists[next] = next_dist;
                }
            }
        }
        dists
    }
}

