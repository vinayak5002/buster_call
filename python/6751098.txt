import sys
sys.setrecursionlimit(10 ** 6)
input = sys.stdin.readline


class TreeNode:
    def __init__(self, key=0, left=None, right=None):
        self.key = key
        self.left = left
        self.right = right

    def preorder(self):
        ret = [self.key]
        if self.left:
            ret += self.left.preorder()
        if self.right:
            ret += self.right.preorder()
        return ret

    def inorder(self):
        ret = []
        if self.left:
            ret += self.left.inorder()
        ret += [self.key]
        if self.right:
            ret += self.right.inorder()
        return ret


class BinarySearchTree:
    def __init__(self):
        self.root = None

    def insert(self, key):
        if self.root is None:
            self.root = TreeNode(key)
            return
        z = TreeNode(key)
        y = None
        x = self.root
        while x:
            y = x
            if z.key < x.key:
                x = x.left
            else:
                x = x.right
        z.parent = y
        if y is None:
            self.root = z
        elif z.key < y.key:
            y.left = z
        else:
            y.right = z

    def preorder_traversal(self, node, order):
        order.append(node.key)
        if node.left is not None:
            self.preorder_traversal(node.left, order)
        if node.right is not None:
            self.preorder_traversal(node.right, order)

    def inorder_traversal(self, node, order):
        if node is None:
            return
        if node.left is not None:
            self.inorder_traversal(node.left, order)
        order.append(node.key)
        if node.right is not None:
            self.inorder_traversal(node.right, order)

    def print(self):
        print('', ' '.join(map(str, self.root.inorder())))
        print('', ' '.join(map(str, self.root.preorder())))


m = int(input())
bst = BinarySearchTree()
for _ in range(m):
    operation = input().split()
    if operation[0] == 'print':
        # bst.print()
        in_order, pre_order = [], []
        bst.inorder_traversal(bst.root, in_order)
        print("", *in_order)
        bst.preorder_traversal(bst.root, pre_order)
        print("", *pre_order)
    if operation[0] == 'insert':
        key = int(operation[1])
        bst.insert(key)
