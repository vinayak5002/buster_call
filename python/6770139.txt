using namespace std;
#include <bits/stdc++.h>
const int MOD = 998244353;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<bool> vb;
typedef vector<vi> vvi;
typedef vector<vll> vvll;
typedef pair<ll, ll> pll;
#define REP(i, n) for (int i = 0; i < (n); i++)
#define FOR(i, N, n) for (int i = N; i < (n); i++)
#define SZ(x) (int)(x).size() // size_t
#define ALL(s) (s).begin(), (s).end()
#define so(V) sort(ALL(V))
#define rev(V) reverse(ALL(V))

const ll INF = 1LL << 60;

int main()
{
    ll N = 64;
    //{右,下,左,上}
    vll dx = {1, 0, -1, 0};
    vll dy = {0, 1, 0, -1};
    while (1)
    {
        ll W, H, ans;
        vector<vector<vb>> road(N, vector<vb>(N, vb(4)));
        vvll dist(N, vll(N));
        queue<pll> que;
        cin >> W >> H;
        ans = 0;
        if (W == 0 && H == 0)
        {
            break;
        }
        REP(i, N)
        {
            REP(j, N)
            {
                REP(k, 4)
                {
                    road[i][j][k] = true;
                }
            }
        }
        REP(i, H)
        {
            road[i][W - 1][0] = false;
        }
        REP(i, W)
        {
            road[H - 1][i][1] = false;
        }
        REP(i, H)
        {
            road[i][0][2] = false;
        }
        REP(i, W)
        {
            road[0][i][3] = false;
        }

        REP(i, N)
        {
            REP(j, N)
            {
                dist[i][j] = INF;
            }
        }

        REP(i, H * 2 - 1)
        {
            ll wall;
            if (i % 2 == 0)
            {
                REP(j, W - 1)
                {
                    cin >> wall;
                    if (wall == 1)
                    {
                        //縦壁
                        //右
                        road[i / 2][j][0] = false;
                        //左
                        road[i / 2][j + 1][2] = false;
                    }
                }
            }
            else
            {
                REP(j, W)
                {
                    cin >> wall;
                    if (wall == 1)
                    {
                        //横壁
                        //下
                        road[i / 2][j][1] = false;
                        //上
                        road[i / 2 + 1][j][3] = false;
                    }
                }
            }
        }

        // bfs
        dist[0][0] = 1;
        que.push(pll(0, 0));

        while (!que.empty())
        {
            pair<ll, ll> p;
            p = que.front();
            que.pop();
            REP(i, 4)
            {
                ll x, y, nx, ny;
                x = p.first;
                y = p.second;
                if (!road[y][x][i])
                {
                    continue;
                }
                nx = x + dx[i];
                ny = y + dy[i];
                if (dist[ny][nx] > dist[y][x] + 1)
                {
                    dist[ny][nx] = dist[y][x] + 1;
                    que.push(pll(nx, ny));
                }
            }
        }

        if (dist[H - 1][W - 1] == INF)
        {
            cout << 0 << endl;
        }
        else
        {
            cout << dist[H - 1][W - 1] << endl;
        }
    }

    return 0;
}
