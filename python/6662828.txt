/**
    ==============================
    **Bismillahir Rahmanir Rahim**
    ==============================
    @Author:   Alve Rahman
    @DateTime: Sat May 28 18:00:18 2022
    ==============================
*/
#include<bits/stdc++.h>
#define db1(x) cout<<#x<<"="<<x<<'\n'
#define db2(x,y) cout<<#x<<"="<<x<<","<<#y<<"="<<y<<'\n'
#define db3(x,y,z) cout<<#x<<"="<<x<<","<<#y<<"="<<y<<","<<#z<<"="<<z<<'\n'
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define mod 1000000007
#define PI 3.14159265
#define EPS 1e-9
using namespace std;
using ll=long long;
const ll inf=1e15;
 
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// #define ordered_set tree<ll, null_type,less_equal<ll>, rb_tree_tag,tree_order_statistics_node_update>
 
const int N=1e5+7;
 
int n,m,par[N],sz[N];
string s;

struct Edge{
    int u,v,w;
    bool operator < (const Edge &e)const{
        if(w!=e.w) return w<e.w;
        return u<=e.u;
    }
};

Edge edges[N];

int find_set(int v){
    if(par[v]==v) return v;
    return par[v]=find_set(par[v]);
}

void merge_set(int u,int v){
    int pu=find_set(u);
    int pv=find_set(v);
    if(pu!=pv){
        if(sz[pu]<sz[pv])
            swap(pu,pv);
        par[pv]=pu;
        sz[pu]+=sz[pv];
    }
    return;
}

void solve(){
    
    cin>>n>>m;
    rep(i,0,n) par[i]=i,sz[i]=1;
    rep(i,0,m){
        cin>>edges[i].u>>edges[i].v>>edges[i].w;
    }
    sort(edges,edges+m);
    int cost=0;
    for(ll i=0;i<m;i++){
        Edge edge = edges[i];
        if(find_set(edge.u)!=find_set(edge.v)){
            merge_set(edge.u,edge.v);
            cost+=edge.w;
        }
    }
    cout<<cost<<'\n';
    return;
}


int main(){
 
    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
    // srand(time(NULL));
    ll t=1,cnt=1;
    // cin>>t;
    while(t--){
        // cout<<"Case #"<<cnt++<<": ";
        solve();
    }
    cerr<<"time taken : "<<(float)clock()/CLOCKS_PER_SEC<<" secs"<<'\n';
    return 0;
}
