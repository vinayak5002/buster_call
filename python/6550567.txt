
import java.util.*;

public class Main {

    static int MaxDis = Integer.MAX_VALUE/2;
    static class Edge
    {
        int weight;
        int v;
        public Edge(int v ,int weight)
        {
            this.v = v;
            this.weight = weight;
        }

    }

    static class Node
    {
        ArrayList<Edge> NodeArray = new ArrayList<>();
    }

    static class disNode
    {
        int dis;
        int v;

        public disNode(int v , int dis)
        {
            this.v = v;
            this.dis =dis;
        }


    }


    public static void main(String[] args) {

        Scanner scan = new Scanner(System.in);
        int v = scan.nextInt();
        int e = scan.nextInt();
        int r = scan.nextInt();

   //     ArrayList<Edge>[] Lgraph = new ArrayList[v];

        Node[] Lgraph = new Node[v];

        for(int i = 0 ; i < v ; i++)
        {
            Lgraph[i] = new Node();
        }



        for(int i = 0 ; i<e ;i ++)
        {
            int s = scan.nextInt();
            int t = scan.nextInt();
            int d = scan.nextInt();

            Edge temp = new Edge(t,d);
            Lgraph[s].NodeArray.add(temp);
        }

        scan.close();
        //-----------------------------------------------
        //Dijistra
        int[] dis = new int[v];
        boolean[] collected = new boolean[v];
        Arrays.fill(dis , MaxDis);
        Arrays.fill(collected,false);
        //-------------


        disNode[] heap = new disNode[100000];
        heap[0] = new disNode(-1,-100);
        int[] sizeofheap = new int[]{1};
        insert(heap, new disNode(r,0),sizeofheap);
        dis[r]=0;


        while(true)
        {

            if( sizeofheap[0]==1)
                break;

            disNode pollqueue = pickandrebuilt(heap,sizeofheap);
            int vertex = pollqueue.v;
            if(pollqueue.dis > dis[vertex])
                continue;

            collected[vertex] = true;

            for(Edge edge : Lgraph[vertex].NodeArray)
            {
                int w = edge.v;
                int weightofw = edge.weight;

                if(dis[vertex]+ weightofw < dis[w] &&!collected[w])
                {
                    dis[w] = dis[vertex] + weightofw;
                    insert(heap,new disNode(w,dis[w]), sizeofheap);
                }
            }




        }
        for (int i = 0; i < v; i++) {
            if (dis[i] != MaxDis)
                System.out.println(dis[i]);
            else
                System.out.println("INF");
        }
    }
    

    static public void rebuilt(disNode[] heap , int  root , int[] size)
    {
        int son;
        int father;
        disNode temproot = heap[root];


        for(father = root; father<<1 < size[0] ; father =son)
        {
            son = father<<1;
            if( son+1 < size[0] && heap[son+1].dis < heap[son].dis )
                son++;
            if(temproot.dis <= heap[son].dis)
                break;
            else
                heap[father] = heap[son];
        }

        heap[father] = temproot;
    }



    static public void insert(disNode[] heap , disNode node , int[] size)
    {
        heap[size[0]] = node;
        size[0]++;
        int son ;
        int father;
        disNode temp = heap[size[0]-1];

        for(son = size[0]-1 ; son > 0 ; son = father)
        {
            father = son>>1;
            if(temp.dis < heap[father].dis)
                heap[son] = heap[father];
            else
                break;


        }
        heap[son] = temp;
    }

    static public disNode pickandrebuilt(disNode[] heap , int[] size)
    {



        disNode res = heap[1];
        if(size[0]==2)
        {
            heap[1] = null;
            size[0]--;
            return res;
        }
        size[0] --;
        heap[1] = heap[size[0]];
        rebuilt(heap,1, size);

        return res;
    }

}

