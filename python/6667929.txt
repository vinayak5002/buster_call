import copy
import heapq

class Node:
    def __init__(self, state, g, h, parent):
        self.st = state
        self.g = g
        self.h = h
        self.parent = parent
        
    def cost(self):
        return self.g + self.h
    
    def __lt__(self, other):
        if (self.g + self.h) < (other.g + other.h):
            return True
        elif (self.g + self.h) == (other.g + other.h):
            return self.h < other.h
        else:
            return False
        
class State2:
    def __init__(self, pos):
        self.pos = pos
    
    def __str__(self):
        string = ""
        for i in range(4):
            for j in range(4):
                string += ' '*(3-len(str(self.pos[i][j]))) +str(self.pos[i][j])
            string += '\n'
        return string

    def __eq__(self, other):
        return self.pos == other.pos
    
    def get_position(self, num):
        for i in range(4):
            for j in range(4):
                if self.pos[i][j] == num:
                    return (i, j)
        # should throw exception
        print(str(self.pos),num)
        return None
    
class Puzzle2:
    def __init__(self, init_pos):
        self.start = State2(init_pos)
        self.goal = State2([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 0]])


class AStar:
    def __init__(self, puzzle):
        self.puzzle = puzzle
        self.closed_list = { }
        self.expcnt = 0

    def solution_path(self, goal):
        solution = []
        node = goal
        while True:
            solution = [str(node.state)] + solution
            if node.parent.pos[0][0] < 0:
                break
            node = self.closed_list[str(node.parent)]
        sol_str = 'len: ' + str(goal.g) + '\n'
        sol_str += 'expand = ' + str(self.expcnt) + '\n'
        sol_str += 'closed_list: ' + str(len(self.closed_list)) + '\n'
        for pos in solution:
                sol_str += pos + '\n'
        return sol_str
        
    def heuristic(self, state):
        # 0以外のパネルのマンハッタン距離の和
        h_value = 0
        for i in range(3):
            for j in range(3):
                if(state.pos[i][j] > 0):
                    h_value += abs((state.pos[i][j]-1)%3 -j)+abs((state.pos[i][j]-1)//3 -i)
        return h_value
    
    def expand(self, node):
        children = []
        for i in range(3):
            for j in range(3):
                if(node.state.pos[i][j] == 0):
                    x,y = i,j
                    break
        if(x>0):
            self.expcnt += 1
            cstate = copy.deepcopy(node.state.pos)
            cstate[x-1][y],cstate[x][y] = cstate[x][y],cstate[x-1][y]
            children.append(Node(State(cstate),node.g+1,self.heuristic(State(cstate)),node.state))
        if(y>0):
            self.expcnt += 1
            cstate = copy.deepcopy(node.state.pos)
            cstate[x][y-1],cstate[x][y] = cstate[x][y],cstate[x][y-1]
            children.append(Node(State(cstate),node.g+1,self.heuristic(State(cstate)),node.state))
        if(x<2):
            self.expcnt += 1
            cstate = copy.deepcopy(node.state.pos)
            cstate[x+1][y],cstate[x][y] = cstate[x][y],cstate[x+1][y]
            children.append(Node(State(cstate),node.g+1,self.heuristic(State(cstate)),node.state))
        if(y<2):
            self.expcnt += 1
            cstate = copy.deepcopy(node.state.pos)
            cstate[x][y+1],cstate[x][y] = cstate[x][y],cstate[x][y+1]
            children.append(Node(State(cstate),node.g+1,self.heuristic(State(cstate)),node.state))
        return children

    def search(self):
        start_state = self.puzzle.start
        dummy_state = State2([[-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1]])
        start_node = Node(start_state, 0, self.heuristic(start_state), dummy_state)
        
        # open_list の初期化
        open_queue = [start_node]
        heapq.heapify(open_queue)
        
        # ハッシュ表の初期化。ここではハッシュ表のキーとしてStateの文字列を使っている
        self.closed_list = { }
        self.closed_list[str(start_state)] = start_node
        
        if str(start_state) == str(self.puzzle.goal):
            return self.solution_path(start_node)
        
        while len(open_queue) != 0:
            n = heapq.heappop(open_queue)
            if n.state == self.puzzle.goal:
                return 0

            child_nodes = self.expand(n)
            for c in child_nodes:
                if str(c.state) not in self.closed_list or c < self.closed_list[str(c.state)]:
                    self.closed_list[str(c.state)] = c
                    heapq.heappush(open_queue, c)
        return None

pzl = Puzzle([list(map(int,input().split())) for i in range(4)])
solver = IDAStar2(pzl)
solution = solver.search()
print(solution)
