use std::{
    io::{stdin, BufReader, Read},
    str::FromStr,
};

fn scan<T>(r: &mut impl Read) -> Option<T>
where
    T: FromStr,
{
    r.bytes()
        .map(|b| b.unwrap() as char)
        .skip_while(|c| c.is_whitespace())
        .take_while(|c| !c.is_whitespace())
        .collect::<String>()
        .parse::<T>()
        .ok()
}

#[derive(Default, Clone)]
pub struct FenwickTree {
    vec: Vec<i64>,
}

#[inline]
const fn lsb_usize(x: usize) -> usize {
    x & !(x - 1)
}

impl FenwickTree {
    pub fn with_zeros(len: usize) -> Self {
        let vec = vec![0; len + 1];
        Self { vec }
    }

    pub fn add(&mut self, index: usize, value: i64) {
        let mut index = index;

        while index < self.vec.len() {
            self.vec[index] += value;
            index += lsb_usize(index + 1);
        }
    }

    pub fn range_sum(&self, start: usize, end: usize) -> i64 {
        let mut sum = 0;
        let mut start = start;
        let mut end = end + 1;

        while end > start {
            sum += self.vec[end as usize - 1];
            end -= lsb_usize(end);
        }

        while start > end {
            sum -= self.vec[start as usize - 1];
            start -= lsb_usize(start);
        }

        sum
    }
}

fn main() {
    let stdin = stdin();
    let stdin = stdin.lock();
    let mut input = BufReader::new(stdin);

    let n: usize = scan(&mut input).unwrap();
    let q: usize = scan(&mut input).unwrap();

    let mut fenwick = FenwickTree::with_zeros(n);

    for _ in 0..q {
        let qt: usize = scan(&mut input).unwrap();

        match qt {
            0 => {
                let s: usize = scan(&mut input).unwrap();
                let t: usize = scan(&mut input).unwrap();
                let x: i64 = scan(&mut input).unwrap();

                fenwick.add(s - 1, x);
                fenwick.add(t, -x);
            }
            1 => {
                let i: usize = scan(&mut input).unwrap();

                let sum = fenwick.range_sum(0, i - 1);
                println!("{}", sum);
            }
            _ => unreachable!(),
        }
    }
}

