
import java.util.Scanner;

public class Main {
    static int Maxdis = 10001;
    public static void main(String[] args) {
        Main main = new Main();

        //creat graph
        Scanner scan = new Scanner(System.in);
        int v = scan.nextInt();
        int e = scan.nextInt();
        int r = scan.nextInt();

        int[][] Mgraph = new int[v][v];
        int[] five = new int[v];
        for(int i = 0 ; i <v ;i++)
            for(int j = 0 ; j<v ;j++)
                Mgraph[i][j] =-1;

        //insert edge
        for(int i = 0 ; i < e ; i++)
        {
            int s = scan.nextInt();
            int t = scan.nextInt();
            int d = scan.nextInt();
            Mgraph[s][t] = d;
        }
        scan.close();
        //Dijkstra

        int[] dis = main.Dijkstra(Mgraph , r , v );

        for(int i = 0 ; i< v ;i++)
        {
            if (dis[i] != Maxdis)
                System.out.println(dis[i]);
            else
                System.out.println("INF");
        }





    }

    public int[] Dijkstra(int[][] Mgraph , int r , int v )
    {



            int[] dis = new int[v];
            boolean[] collected = new boolean[v];

            for(int i = 0 ; i <v ;i++)
            {
                dis[i] = Maxdis;
                collected[i] = false;
            }
            dis[r] = 0;
            //------------
        while(true)
        {
            int vertex = min_uncollected( dis,collected);

            if(vertex == -1)
                break;

            for(int i = 0 ; i< v ;i++)
            {
                if(Mgraph[vertex][i] != -1 && dis[vertex]+Mgraph[vertex][i]< dis[i] && !collected[i])
                {
                    dis[i] = dis[vertex]+Mgraph[vertex][i];
                }
            }

        }
        return dis;


    }

    public int min_uncollected(int[] dis,boolean[] collected)
    {
        int temp = Maxdis;
        int res = -1;
        int i ;
        boolean flag = false;
        for(i = 0 ; i< dis.length;i++)
        {

            if(dis[i]< temp && !collected[i] )
            {
                temp = dis[i];
                res = i;
                flag = true;

            }
        }
        if(flag) {
            collected[res] = true;
            return res;
        }
        else
            return -1;


    }



}

