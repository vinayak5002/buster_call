from collections import deque
n = int(input())
arr = deque([])
def ins(que, s):#arrに入れて並べ替え
    flag = False
    for i in range(len(que)):
        if que[i] > s and flag == False:
            que.insert(i,s)
            flag = True
        else:
            pass
    if flag == False:
        que.append(s)
        

def binalys(str, arr):
    left = 0; right = len(arr)
    mid = int((left + right)/2)
    while right-left > 5:
        if str >= arr[mid]:
            left = mid
            mid = int((left + right)/2)
        else:
            right = mid
            mid = int((left + right)/2)
    if str in arr:
        print("yes")
    else:
        print("no")

def DtoN(s):
    num = len(s)
    retnum= 0
    for i in range(len(s)):
        if s[i] == "A":
            retnum += 0 * 4**i
        elif s[i] == "C":
            retnum += 1 * 4**i
        elif s[i] == "G":
            retnum += 2 * 4**i
        elif s[i] == "T":
            retnum += 3 * 4**i
    return str(num) + " " + str(retnum)
    
def NtoD(nums):
    l = int(nums.split()[0])#桁数
    num = int(nums.split()[1])#数
    rets = ""
    for i in range(l):
        shou = int(num/4**(l-1-i))
        num %= 4**(l-1-i)
        if shou==0:
            rets = "A" + rets
        elif shou==1:
            rets = "C" + rets
        elif shou==2:
            rets = "G" + rets
        elif shou==3:
            rets = "T" + rets
    return rets
for i in range(n):
    l = input().split()
    if l[0][0] == "i":
        ins(arr,l[1])
    elif l[0][0] == "f":
        binalys(l[1],arr)
