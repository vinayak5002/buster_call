/*AOJ 2015 Square Route (https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2015)

//所要時間：授業中の演習時間+バグ探しで1時間前後
学んだこと：累積和、ソート＆二分探索は計算量を減らすために便利なことを改めて実感 */


#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main(){
    while (true) {
    //入力の受け取り
    int N,M; cin >> N >> M;
    if (N == 0 & M == 0) return 0;
    vector<int> H(2000),W(2000);
    for (int i=0; i<N; i++) cin >> H[i];
    for (int i=0; i<M; i++) cin >> W[i];

    //有り得る辺の長さを全列挙するための下準備として「累積和」を求めてる
    vector<long long> Hcum(2000,0),Wcum(2000,0);
    for (int i=1; i<N+1; i++) Hcum[i] = Hcum[i-1] + H[i-1];
    for (int i=1; i<M+1; i++) Wcum[i] = Wcum[i-1] + W[i-1];

    //「累積和の差」を用いて有り得る辺の長さ全列挙（計算量を減らせてる）
    vector<long long> Htot(0), Wtot(0);
    for (int i=1;i<N+1;i++)
        for (int j=i;j<N+1;j++)
            Htot.push_back(Hcum[j] - Hcum[i-1]);
    for (int i=1;i<M+1;i++)
        for (int j=i;j<M+1;j++)
            Wtot.push_back(Wcum[j] - Wcum[i-1]);
    
    //「二分探索」を適用できるように片方をソート
    sort(Wtot.begin(), Wtot.end());

    //一致する要素の個数を求める「二分探索」を線形時間繰り返して答えを求める
    int ans = 0;
    for (int i=0; i<Htot.size(); i++){
        long long now = Htot[i];
        ans += upper_bound(Wtot.begin(), Wtot.end(), now) - lower_bound(Wtot.begin(), Wtot.end(), now);
    }

    //答えを出力
    cout << ans << endl;
    }
}
