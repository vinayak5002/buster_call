// #include<bits/stdc++.h>
#include <iostream>
#include <set>
#include <map>
#include <list>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <vector>
#include <string>
#include <bitset>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <utility>
#include <numeric>
#include <complex>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cassert>
#include <iterator>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <string>

using namespace std;

typedef long long ll;
#define rep(i, n) for(int i = 0; i < (n); i++)
#define pb push_back
const int maxn = 10000;
const int INF32 = 1050000000; // 1'050'000'000
const long long INF64 = 4000000000000000000; // 4'000'000'000'000'000'000
const int MOD7 = 1000000007; // 1'000'000'007
const int MOD9 = 1000000009; // 1'000'000'009
const int mod = MOD7;
const double EPS = 1e-9;

void ERROR(int num) { cout << "ERROR" << num << endl; }
ll gcd(ll a, ll b) { return b ? gcd(b, a%b) : a; }
int dx[8]={-1,0,1,0,1,1,-1,-1};
int dy[8]={0,-1,0,1,1,-1,1,-1};
//std::setprecision

bool is_prime(long long N) {
    if (N == 1) return false;
    for (long long i = 2; i * i <= N; ++i) {
        if (N % i == 0) return false;
    }
    return true;
}


vector<vector<bool>> G(8, vector<bool>(8,0));
set<pair<int, int>> inputS, otherS;


vector<int> a = {1, 14, 32, 51, 51, 51, 243, 419, 750, 910};


bool binary_search(int num, vector<int>& S){
    int left = -1;
    int right = S.size();

    bool ok = true;
    while(right > left + 1){
        int mid = left + (right - left) / 2;
        if(num > S[mid]){
            left = mid;
        } else{
            right = mid;
        }
    }

    if(S[right] == num) return true;
    else return false;
}


int main(){
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    //===============================
    
    int n;
    cin >> n;
    vector<int> S(n);
    for(int i = 0; i < n; i++) cin >> S[i];
    int q;
    cin >> q;
    vector<int> T(q);
    for(int i = 0; i < q; i++) cin >> T[i];

    int cnt = 0;
    for(auto t : T){
        if(binary_search(t, S)) cnt++;
    }

    cout << cnt << endl;




}


