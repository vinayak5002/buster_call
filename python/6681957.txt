from collections import defaultdict
import heapq


INF = 10 ** 18
V, E, r = map(int, input().split())
G = defaultdict(list)
for _ in range(E):
    _s, _t, _d = map(int, input().split())
    G[_s].append((_t, _d))
nodes = [INF] * V
nodes[r] = 0
q = [(0, r)]
while q:
    c, r = heapq.heappop(q)
    if c > nodes[r]:
        continue
    for t, d in G[r]:
        cost = nodes[r] + d
        if cost < nodes[t]:
            nodes[t] = cost
            heapq.heappush(q, (cost, t))

for p in nodes:
    print(p if p != INF else "INF")

