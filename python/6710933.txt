// use upper_bound, binary search
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int *list;
int size;

int bs(int x){
    int l,m,r;
    if(size==0) return 0;
    l = 0; r = size;
    while(l < r){
        m = (l+r)/2;
        if(list[m] == x){
            return m;
        }else if(list[m] < x){
            l = m+1;
        }else if(x < list[m]){
            r = m-1;
        }
    }
    while((list[l] < x) && (l < size)){
        l++;
    }
    return l;
}

int main(void){
    // Your code here!
    int q, x, op, idx;
    scanf("%d", &q);
    list = (int*)malloc(sizeof(int)*q);
    
    while(q--){
        scanf("%d %d", &op, &x);
        if(op==0){
            //insert
            // puts("insert");
            idx = bs(x);
            size++;
            // printf("idx:%d\n", idx);
            memmove(list+idx+1, list+idx, (size-idx)*sizeof(int));
            list[idx] = x;
            printf("%d\n", size);
        }else if(op==1){
            // puts("find");
            printf("%c\n", (list[bs(x)] == x) ? '1' : '0' );
        }else{
            //delete
            // puts("delete");
            idx = bs(x);
            size--;
            // printf("idx:%d\n", idx);
            memmove(list+idx, list+idx+1, (size-idx)*sizeof(int));
        }
        // for(int i = 0; i < size; i++){printf("%d%c", list[i], (i==size-1)?'\n':' ');}
    }
}

