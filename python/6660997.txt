import sys
import math

# READ_FROM_FILE = True
READ_FROM_FILE = False


class RangeAddMinQuery:
    def __init__(self, n, init_val):
        self._n = 1
        while self._n < n:
            self._n <<= 1
        n2 = 2 * self._n - 1
        self._add_data = [init_val] * n2
        self._min_data = [init_val] * n2
        return

    def _add_sub(self, s, t, x, k, left, right):
        if right <= s or t <= left:
            return
        if s <= left and right <= t:
            self._add_data[k] += x
            return

        mid = (left + right) // 2
        k2 = 2 * k
        l_idx = k2 + 1
        r_idx = k2 + 2
        self._add_sub(s, t, x, l_idx, left, mid)
        self._add_sub(s, t, x, r_idx, mid, right)
        self._min_data[k] = min(self._min_data[l_idx] + self._add_data[l_idx],
                                self._min_data[r_idx] + self._add_data[r_idx])
        return

    def _query_sub(self, s, t, k, left, right):
        if right <= s or t <= left:
            return math.inf
        if s <= left and right <= t:
            return self._min_data[k] + self._add_data[k]

        mid = (left + right) // 2
        k2 = 2 * k
        l_val = self._query_sub(s, t, k2 + 1, left, mid)
        r_val = self._query_sub(s, t, k2 + 2, mid, right)
        return min(l_val, r_val) + self._add_data[k]

    """[s, t), zero-based"""
    def add(self, s, t, x):
        self._add_sub(s, t, x, 0, 0, self._n)
        return

    """[s, t), zero-based"""
    def find(self, s, t):
        return self._query_sub(s, t, 0, 0, self._n)


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    n, q = map(int, f.readline().split())
    ram_q = RangeAddMinQuery(n, 0)
    for _ in range(q):
        query_list = list(map(int, f.readline().split()))
        s = query_list[1]
        t = query_list[2] + 1
        if query_list[0] == 0:
            x = query_list[3]
            ram_q.add(s, t, x)
        else:
            print(ram_q.find(s, t))

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

