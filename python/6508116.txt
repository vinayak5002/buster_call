rxs = lambda: map(int, input().split())
N, Q = rxs()
Qs = [tuple(rxs()) for _ in range(Q)]

m = 1
while m < N:
    m *= 2

tree = [None] * (2*m-1)
tree[0] = (1<<31)-1

def add(s, t, x, node=0, lft=0, rht=m):
    if rht <= s or t <= lft: return
    if s <= lft and rht <= t:
        tree[node] += x
        return
    mid = (lft+rht)//2
    if tree[node] != None:
        add(lft, mid, tree[node], 2*node+1, lft, mid)
        add(mid, rht, tree[node], 2*node+2, mid, rht)
        tree[node] = None
    add(s, t, x, 2*node+1, lft, mid)
    add(s, t, x, 2*node+2, mid, rht)
    return

def get(s, node=0, lft=0, rht=m):
    if s < lft or rht <= s: return None
    if s+1 == lft+1 == rht: return tree[node]
    mid = (lft+rht)//2
    a = get(s, node*2+1, lft, mid)
    b = get(s, node*2+2, mid, rht)
    assert a == b == None, f"{(s, node, lft, rht)}"
    return (a if a != None else b) + (tree[node] if tree[node] is None else 0)

for q in Qs:
    if q[0] == 0: add(q[1], q[2]+1, q[3])
    else: print(get(q[1]))


