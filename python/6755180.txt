import sys
readline = sys.stdin.readline
write = sys.stdout.write

def scc(N, G, RG):
    order = []
    used = [0]*N
    group = [None]*N
    def dfs(s):
        used[s] = 1
        for t in G[s]:
            if not used[t]:
                dfs(t)
        order.append(s)
    def rdfs(s, col):
        group[s] = col
        used[s] = 1
        for t in RG[s]:
            if not used[t]:
                rdfs(t, col)
    for i in range(N):
        if not used[i]:
            dfs(i)
    used = [0]*N
    label = 0
    for s in reversed(order):
        if not used[s]:
            rdfs(s, label)
            label += 1
    return label, group

def construct(N, G, label, group):
    G0 = [set() for i in range(label)]
    GP = [[] for i in range(label)]
    for v in range(N):
        lbs = group[v]
        for w in G[v]:
            lbt = group[w]
            if lbs == lbt:
                continue
            G0[lbs].add(lbt)
        GP[lbs].append(v)
    return G0, GP

def solve():
    N, D = map(int, readline().split())
    if N == D == 0:
        return False
    P = []
    def dist2(p1, p2):
        x1, y1 = p1
        x2, y2 = p2
        return (x1 - x2)**2 + (y1 - y2)**2
    def dot2(p1, p2):
        x1, y1 = p1
        x2, y2 = p2
        return x1*x2 + y1*y2
    def cross2(p1, p2):
        x1, y1 = p1
        x2, y2 = p2
        return x1*y2 - x2*y1
    def dot3(p1, p2, p3):
        x1, y1 = p1
        x2, y2 = p2
        x3, y3 = p3
        return (x2 - x1)*(y2 - y1) + (x3 - x1)*(y3 - y1)
    def cross3(p1, p2, p3):
        x1, y1 = p1
        x2, y2 = p2
        x3, y3 = p3
        return (x2 - x1)*(y3 - y1) - (x3 - x1)*(y2 - y1)
    def inside_convex_polygon(p0, qs):
        L = len(qs)
        D = [cross3(qs[i-1], p0, qs[i]) for i in range(L)]
        return all(e >= 0 for e in D) or all(e <= 0 for e in D)

    P = []
    for i in range(N):
        x1, y1, x2, y2, x3, y3 = map(int, readline().split())
        p = [(x1, y1), (x2, y2), (x3, y3)]
        for k in range(3):
            if dist2(p[1], p[2]) <= dist2(p[0], p[1]) >= dist2(p[2], p[0]):
                break
            p = p[1:] + p[:1]
        if cross3(*p) < 0:
            p[0], p[1] = p[1], p[0]
        P.append(p)
    def is_intersection(p0, p1, q0, q1):
        C0 = cross3(p0, p1, q0)
        C1 = cross3(p0, p1, q1)
        D0 = cross3(q0, q1, p0)
        D1 = cross3(q0, q1, p1)
        if C0 == C1 == 0:
            E0 = dot3(p0, p1, q0)
            E1 = dot3(p0, p1, q1)
            if not E0 < E1:
                E0, E1 = E1, E0
            return E0 <= dist2(p0, p1) and 0 <= E1
        return C0 * C1 <= 0 and D0 * D1 <= 0
    def segment_line_dist(x, p0, p1):
        z0 = (p1[0] - p0[0], p1[1] - p0[1])
        z1 = (x[0] - p0[0], x[1] - p0[1])
        if 0 <= dot2(z0, z1) <= dist2(p0, p1):
            return abs(cross2(z0, z1)) / dist2(p0, p1)**.5
        return min(dist2(x, p0), dist2(x, p1))**.5
    def check_cross(ps, qs):
        for p in ps:
            if inside_convex_polygon(p, qs):
                return 1
        for q in qs:
            if inside_convex_polygon(q, ps):
                return 1
        PL = len(ps); QL = len(qs)
        for i in range(PL):
            p0 = ps[i]; p1 = ps[i-PL+1]
            for j in range(QL):
                q0 = qs[j]; q1 = qs[j-QL+1]
                if is_intersection(p0, p1, q0, q1):
                    return 1
                if segment_line_dist(p0, q0, q1) - 0.01 < 1e-9:
                    return 1
                if segment_line_dist(q0, p0, p1) - 0.01 < 1e-9:
                    return 1
        return 0

    G = [[] for i in range(N)]
    RG = [[] for i in range(N)]
    for i in range(N):
        p1, p2, p3 = P[i]
        x1, y1 = p1
        x2, y2 = p2
        r = D / dist2(p1, p2)**.5
        q1 = (x1 - r * (y2 - y1), y1 + r * (x2 - x1))
        q2 = (x2 - r * (y2 - y1), y2 + r * (x2 - x1))
        vs = [p1, p2, q2, q1]
        for j in range(N):
            if i == j:
                continue
            if check_cross(vs, P[j]):
                G[i].append(j)
                RG[j].append(i)
    L, grp = scc(N, G, RG)
    G0, GP = construct(N, G, L, grp)
    deg = [0]*L
    for v in range(L):
        for w in G0[v]:
            deg[w] += 1
    ans = 0
    for i in range(L):
        if deg[i] == 0:
            ans += 1
    write("%d\n" % ans)
    return True
while solve():
    ...

