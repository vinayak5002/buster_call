'''input

'''
import sys
import math
from bisect import bisect_right, bisect_left
from itertools import *
from collections import *
from heapq import heapify, heappush, heappop
inf = float('inf')
# mod = 1000000007
# mod = 998244353
input = lambda: sys.stdin.readline().rstrip()
def error(*args, end='\n'):
  print(*args, end=end, file=sys.stderr)
# sys.setrecursionlimit(10**6)

from collections import defaultdict
class UnionFind():
  def __init__(self, n):
    self.n = n
    self.parents = [-1] * n

  def find(self, x):
    if self.parents[x] < 0:
      return x
    else:
      self.parents[x] = self.find(self.parents[x])
      return self.parents[x]

  def unite(self, x, y):
    x = self.find(x)
    y = self.find(y)
    if x == y:
      return
    if self.parents[x] > self.parents[y]:
      x, y = y, x
    self.parents[x] += self.parents[y]
    self.parents[y] = x

  def size(self, x):
      return -self.parents[self.find(x)]

  def same(self, x, y):
      return self.find(x) == self.find(y)

  def members(self, x):
      root = self.find(x)
      return [i for i in range(self.n) if self.find(i) == root]

  def roots(self):
      return [i for i, x in enumerate(self.parents) if x < 0]

  def group_count(self):
      return len(self.roots())

  def all_group_members(self):
    group_members = defaultdict(list)
    for member in range(self.n):
      group_members[self.find(member)].append(member)
    return group_members

  def __str__(self):
    return '\n'.join(f'{r}: {m}' for r, m in self.all_group_members().items())

##################
while True:
  n, m = map(int, input().split())
  if n == 0 and m == 0:
    break
  E = []
  for _ in range(m):
    s, t, c = map(int, input().split())
    s -= 1
    t -= 1
    E.append((s, t, c))
    E.append((t, s, c))
  E.sort(key=lambda x:x[2])
  uf = UnionFind(n)

  cost = []
  for s,t,c in E:
    if not uf.same(s,t):
      uf.unite(s,t)
      cost.append(c)
  print(cost[len(cost)//2])



