import java.util.Scanner;

public class Main {
    private static final int MAX_STEPS = 10;

    private static int h;
    private static int w;

    private static int simulate(int[][] map, int startY, int startX, int choice) {
        int nowY = startY;
        int nowX = startX;

        int prevX, prevY;

        for (int i = 1; i <= MAX_STEPS; i++) {
            int direction = (choice % 4);
            choice /= 4;

            prevX = nowX;
            prevY = nowY;

            if (direction == 0) {
                // Up
                while (nowY > 0 && (map[nowY - 1][nowX] == 0 || map[nowY - 1][nowX] == 2)) {
                    nowY--;
                }

                if (nowY == 0) {
                    return Integer.MAX_VALUE;
                }
                else {
                    if (map[nowY - 1][nowX] == 3) {
                        return i;
                    }
                    else {
                        if (prevY == nowY) return Integer.MAX_VALUE;

                        if (map[nowY - 1][nowX] == 1) {
                            map[nowY - 1][nowX] = 0;
                        }
                    }
                }
            }
            else if (direction == 1) {
                // Down
                while (nowY < h-1 && (map[nowY + 1][nowX] == 0 || map[nowY + 1][nowX] == 2)) {
                    nowY++;
                }

                if (nowY == h-1) {
                    return Integer.MAX_VALUE;
                }
                else {
                    if (map[nowY + 1][nowX] == 3) {
                        return i;
                    }
                    else {
                        if (prevY == nowY) return Integer.MAX_VALUE;

                        if (map[nowY + 1][nowX] == 1) {
                            map[nowY + 1][nowX] = 0;
                        }
                    }
                }
            }
            else if (direction == 2) {
                // Left
                while (nowX > 0 && (map[nowY][nowX - 1] == 0 || map[nowY][nowX - 1] == 2)) {
                    nowX--;
                }

                if (nowX == 0) {
                    return Integer.MAX_VALUE;
                }
                else {
                    if (map[nowY][nowX - 1] == 3) {
                        return i;
                    }
                    else {
                        if (prevX == nowX) return Integer.MAX_VALUE;

                        if (map[nowY][nowX - 1] == 1) {
                            map[nowY][nowX - 1] = 0;
                        }
                    }
                }
            }
            else if (direction == 3) {
                // Right
                while (nowX+1 < w && (map[nowY][nowX + 1] == 0 || map[nowY][nowX + 1] == 2)) {
                    nowX++;
                }

                if (nowX == w-1) {
                    return Integer.MAX_VALUE;
                }
                else {
                    if (map[nowY][nowX + 1] == 3) {
                        return i;
                    }
                    else {
                        if (prevX == nowX) return Integer.MAX_VALUE;

                        if (map[nowY][nowX + 1] == 1) {
                            map[nowY][nowX + 1] = 0;
                        }
                    }
                }
            }
        }

        return Integer.MAX_VALUE;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            h = scanner.nextInt();
            w = scanner.nextInt();

            if (h == 0 && w == 0) break;

            int[][] map = new int[h][];
            for (int i = 0; i < h; i++) map[i] = new int[w];
            int sy = -1, sx = -1;

            for (int i = 0; i < h; i++) {
                for (int j = 0; j < w; j++) {
                    map[i][j] = scanner.nextInt();
                    if (map[i][j] == 2) {
                        sy = i;
                        sx = j;
                    }
                }
            }

            // System.out.println(map[0][0]);

            int minStep = Integer.MAX_VALUE;

            int[][] mapClone;
            for (int i = 0; i < (1 << 2 * MAX_STEPS); i++) {
                mapClone = new int[h][];
                for (int j = 0; j < h; j++) mapClone[j] = map[j].clone();

                // if (i == 0) System.out.println(mapClone[0][0]);

                int step = simulate(mapClone, sy, sx, i);
                minStep = Math.min(minStep, step);
            }

            System.out.println(minStep != Integer.MAX_VALUE ? minStep : -1);
        }

        scanner.close();
    }
}
