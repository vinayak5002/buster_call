using S = System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

namespace _220619
{
public class ProblemB
{
  public class DirectedGraph 
  {
    public Dictionary<int, HashSet<int>> edges = new Dictionary<int, HashSet<int>>();

    public void connect(int from, int to)
    {
      if (!edges.ContainsKey(from)) edges[from] = new HashSet<int>();
      var set = edges[from];
      set.Add(to);
    }

    public IEnumerable<int> dests(int v) 
    {
      if (!edges.ContainsKey(v)) edges[v] = new HashSet<int>();
      return edges[v];
    }
  }

  public static bool search(DirectedGraph g, HashSet<int> passed, int v)
  {
    passed.Add(v);
    foreach (var d in g.dests(v))
    {
      if (passed.Contains(d)) return true;
      if (search(g, passed, d)) return true;
    }
    passed.Remove(v);
    return false;
  }

  public static bool hasClosed(DirectedGraph g, (int, int) es)
  {
    var passed = new HashSet<int>();

    var v1 = es.Item1;
    var v2 = es.Item2;
    g.connect(v1, v2);
    return search(g, passed, v2);
  }
  
  public static bool checkClosed(List<(int, int)> es)
  {
    var g = new DirectedGraph();
    foreach (var e in es)
    {
      if (hasClosed(g, e)) return true;
    }
    return false;
  }

  public static ((int gn, int en), List<(int, int)>) ReadInput()
  {
    var ge = S.Console.ReadLine().Split(' ').Select(s => int.Parse(s)).ToArray();
    var gn = ge[0];
    var en = ge[1];
    var es = new List<(int, int)>();
    for (int i = 0; i < en; i++)
    {
      var ea = S.Console.ReadLine().Split(' ').Select(s => int.Parse(s)).ToArray();
      es.Add((ea[0], ea[1]));
    }
    return ((gn, en), es);
  }

  public static void Main(string[] args)
  {
    var input = ReadInput();
    var gn = input.Item1.Item1;
    var en = input.Item1.Item2;
    var es = input.Item2;
    var b = checkClosed(es);
    S.Console.WriteLine(b ? 1 : 0);
  }
}
}


