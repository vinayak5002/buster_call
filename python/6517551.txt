require('readline')
  .createInterface({ input: process.stdin })
  .on('line', (line) => main(line, process.stdout))
// .on('close', () => main(stdin, process.stdout))

/**
 * @param {number} num 
 * @returns {string} 32bit padded string
 */
function numToPaddedBits(num) {
  return (num.toString(2) + '0'.repeat(32)).slice(-32)
}

/**
 * @param {number} num 
 */
function numToBuf(num) {
  const buf = new Uint8Array(4)
  for(let i = 0; num != 0; i++) {
    buf[i] = num & 0xFF
    num <<= 8
  }
  return buf
}

/**
 * @param {Uint8Array} buf 
 */
 function bufToNum(buf) {
  return buf.reduce((p, c, i) => p + c << (i * 8), 0)
}

/**
 * 
 * @param {string} line 
 * @param {NodeJS.WriteStream} so 
 */
function main(line, so) {

  const [a, b] = line.split(' ').map(s => {
    const buf = new Uint8Array(4)
    let num = Number(s)
    for(let i = 0; num != 0; i++) {
      buf[i] = num & 0xFF
      num <<= 8
    }
    return buf
  })

  const band = a.map((_, i) => a[i] & b[i])
  const bor = a.map((_, i) => a[i] | b[i])
  const bxor = a.map((_, i) => a[i] ^ b[i])

  so.write(padStart32(bufToNum(band).toString(2)) + '\n');
  so.write(padStart32(bufToNum(bor).toString(2)) + '\n');
  so.write(padStart32(bufToNum(bxor).toString(2)) + '\n');
}

