class UnionFind:
    def __init__(self,n):
        self.n = n
        self.par = [-1] * n
    
    def find(self, x):
        if self.par[x] < 0:
            return x
        # 座標圧縮
        self.par[x] = self.find(self.par[x])
        return self.par[x]
    
    # 同じグループに属しているか
    def same(self, x, y):
        return self.find(x) == self.find(y)
    
    # 2つの要素が属するグループを結合
    def union(self,x,y):
        x = self.find(x)
        y = self.find(y)
        # 同じグループか
        if x == y:
            return
        # 結合する際は要素が少ないものを多いものに属するようにさせる
        if self.par[x] > self.par[y]:
            x,y = y,x
        self.par[x] += self.par[y]
        self.par[y] = x

n,q = map(int,input().split())
uni = UnionFind(n+2)
for i in range(q):
    a,x,y = map(int,input().split())
    x -= 1
    y -= 1
    if a == 0:
        uni.union(x,y)
    else:
        ans = 0
        if uni.same(x,y) == True:
            ans += 1
        print(ans)
