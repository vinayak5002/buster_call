fun main() {
    val n = readInt() // num cards
    val suits = Suit.values() // listOf<String>("S", "H", "C", "D")
    val ranks = 1..13

    val allCards = suits.flatMap { suit -> ranks.map { rank -> Card(suit, rank) } }
    val foundCards = mutableListOf<Card>()

    repeat(n) {
        val (suitValue, rankString) = readStrList()
        foundCards.add(Card(Suit.valueOf(suitValue), rankString.toInt()))
    }

    val lostCards = allCards.subtract(foundCards.toSet())
    lostCards.forEach { card -> println(card) }
}

enum class Suit { S, H, C, D }


data class Card(val suit: Suit, val rank: Int) : Comparable<Card> {
    override fun compareTo(other: Card): Int {
        if (suit == other.suit) return rank.compareTo(other.rank)
        return suit.compareTo(other.suit)
    }

    override fun toString(): String = "$suit $rank"
}

fun readInt(): Int = readLine()!!.toInt()

fun readDouble(): Double = readLine()!!.toDouble()

fun readInts(): List<Int> = readLine()!!.split(" ").map { it.toInt() }

fun readLongs(): List<Long> = readLine()!!.split(" ").map { it.toLong() }

fun readStrList(): List<String> = readLine()!!.split(" ")

fun Double.decimalFormat(decimalCount: Int): String = String.format("%.${decimalCount}f", this)
