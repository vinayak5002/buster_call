from typing import (
    List,
    Tuple,
    Deque,
    Set,
    Dict,
    TypeVar,
    Callable,
    Generic,
    Iterable,
    Iterator,
    Union,
    Sequence,
)
import sys
import collections
import itertools
import bisect
import math


sys.setrecursionlimit(1000000)
input = sys.stdin.readline

T = TypeVar("T", int, Tuple)


class SortedSet(Generic[T]):
    def __init__(self, a: Iterable[T] = []) -> None:
        a = list(a)
        if not all(i < j for i, j in zip(a[0:-1], a[1:])):
            a = sorted(set(a))

        self.BUCKET_RATIO: int = 50
        self.REBUILD_RATIO: int = 170

        self.size: int = len(a)
        self._build(a)

    def _build(self, a: Iterable[T] = None) -> None:
        if a is None:
            a = list(self)
        else:
            a = list(a)

        size: int = len(a)
        bucket_size: int = int(math.ceil(math.sqrt(size / self.BUCKET_RATIO)))
        self.A: List[List[T]] = [
            a[size * i // bucket_size : size * (i + 1) // bucket_size]
            for i in range(bucket_size)
        ]

    def __iter__(self) -> Iterator[T]:
        for i in self.A:
            for j in i:
                yield j

    def __reversed__(self) -> Iterator[T]:
        for i in reversed(self.A):
            for j in reversed(i):
                yield j

    def __len__(self) -> int:
        return self.size

    def __repr__(self) -> str:
        return "SortedSet" + str(self.A)

    def __str__(self) -> str:
        s = str(list(self))
        return "{" + s[1 : len(s) - 1] + "}"

    def _find_bucket(self, x: T) -> List[T]:
        for a in self.A:
            if x <= a[-1]:
                return a
        return a

    def __contains__(self, x: T) -> bool:
        if self.size == 0:
            return False

        a = self._find_bucket(x)
        i = bisect.bisect_left(a, x)
        return i != len(a) and a[i] == x

    def add(self, x: T) -> bool:
        if self.size == 0:
            self.A = [[x]]
            self.size = 1
            return True

        a = self._find_bucket(x)
        i = bisect.bisect_left(a, x)
        if i != len(a) and a[i] == x:
            return False

        a.insert(i, x)
        self.size += 1
        if len(a) > len(self.A) * self.REBUILD_RATIO:
            self._build()

        return True

    def discard(self, x: T) -> bool:
        if self.size == 0:
            return False

        a = self._find_bucket(x)
        i = bisect.bisect_left(a, x)

        if i == len(a) and a[i] != x:
            return False

        a.pop(i)
        self.size -= 1
        if len(a) == 0:
            self._build()

        return True

    def lt(self, x: T) -> Union[T, None]:
        for a in reversed(self.A):
            if a[0] < x:
                return a[bisect.bisect_left(a, x) - 1]
        return None

    def le(self, x: T) -> Union[T, None]:
        for a in reversed(self.A):
            if a[0] <= x:
                return a[bisect.bisect_left(a, x) - 1]
        return None

    def gt(self, x: T) -> Union[T, None]:
        for a in self.A:
            if a[-1] > x:
                return a[bisect.bisect_right(a, x)]
        return None

    def ge(self, x: T) -> Union[T, None]:
        for a in self.A:
            if a[-1] >= x:
                return a[bisect.bisect_right(a, x)]

        return None

    def __getitem__(self, x: int) -> T:
        if x < 0:
            x += self.size

        if x < 0:
            raise IndexError

        for a in self.A:
            if x < len(a):
                return a[x]
            x -= len(a)
        raise IndexError

    def index(self, x: T) -> int:
        result: int = 0
        for a in self.A:
            if a[-1] >= x:
                return result + bisect.bisect_left(a, x)
            result += len(a)

        return result

    def index_right(self, x: T) -> int:
        result: int = 0
        for a in self.A:
            if a[-1] > x:
                return result + bisect.bisect_right(a, x)
            result += len(a)

        return result


def main():
    Q: int = int(input())
    query: List[List[int]] = [list(map(int, input().split())) for i in range(Q)]

    S = SortedSet[int]([])

    for q in query:
        t, x = q

        if t == 0:
            S.add(x)
            print(len(S))
        else:
            print(1 if x in S else 0)


if __name__ == "__main__":
    main()

