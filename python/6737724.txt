// ALDS1_5_B
#include <bits/stdc++.h>
#include <cstdint>
using namespace std;

#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

struct Fast {
  Fast() {
    std::cin.tie(0);
    ios::sync_with_stdio(false);
  }
} fast;

namespace local {
uint32_t count;
}

void merge(vector<int> &A, uint32_t left, uint32_t mid, uint32_t right) {
  uint32_t n1 = mid - left;
  uint32_t n2 = right - mid;
  vector<int> L(n1 + 1), R(n2 + 1);
  for (int i = 0; i < n1; i++) {
    L[i] = A[left + i];
  }
  for (int i = 0; i < n2; i++) {
    R[i] = A[mid + i];
  }
  L[n1] = 0x7fffffff;
  R[n2] = 0x7fffffff;
  uint32_t i = 0;
  uint32_t j = 0;
  for (int k = left; k < right; k++) {
    if (L[i] <= R[j]) {
      A[k] = L[i];
      i++;
    } else {
      A[k] = R[j];
      j++;
    }
    local::count++;
  }
}

void mergeSort(vector<int> &A, uint32_t left, uint32_t right) {
  if ((left + 1) < right) {
    uint32_t mid = (left + right) / 2;
    mergeSort(A, left, mid);
    mergeSort(A, mid, right);
    merge(A, left, mid, right);
  }
}

int main() {
  uint32_t n;
  scanf("%d", &n);
  vector<int> A(n);
  for (int i = 0; i < n; i++) {
    scanf("%d", &A[i]);
  }

  local::count = 0;
  mergeSort(A, 0, n);

  for (int i = 0; i < n; i++) {
    printf("%d", A[i]);
    if (i == (n - 1)) {
      printf("\n");
    } else {
      printf(" ");
    }
  }
  printf("%d\n", local::count);

  return 0;
}

