import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

public class Main {
	
	static class Deck{
		void removeCard(Mark mark,int num) {
			Set<Integer> set;
			set = hm.get(mark);
			set.remove(num);
//			switch(mark) {
//			case S:
//				treeS.remove(num);
//				break;
//			case H:
//				treeH.remove(num);
//				break;
//			case C:
//				treeC.remove(num);
//				break;
//			case D:
//				treeD.remove(num);
//				break;
//			}
		}
		
		void getSet(Mark mark) {
			
			hm.put(mark,insert.get(mark));
			
//			switch(mark) {
//			case S:
//				hm.put(mark,treeS);
//				break;
//			case H:
//				hm.put(mark,treeH);
//				break;
//			case C:
//				hm.put(mark,treeC);
//				break;
//			case D:
//				hm.put(mark,treeD);
//				break;
//			}
		
		}
	}
	
	
	static enum Mark{
		S,
		H,
		C,
		D;
	}
	
	
	static class Card implements Comparable<Card>{
		int num;
		Mark mark;;
		
		Card(int num,Mark mark){
			this.num = num;
			this.mark = mark;
		}

		@Override
		public int compareTo(Card o) {
			if(this.num > o.num) {
				return 1;
			}
			if(this.num < o.num) {
				return -1;
			}
			return 0;
		}
		
	}
	
	static Set<Integer> treeS = new TreeSet<>();
	static Set<Integer> treeH = new TreeSet<>();
	static Set<Integer> treeC = new TreeSet<>();
	static Set<Integer> treeD = new TreeSet<>();
	static HashMap<Mark,Set<Integer>> hm = new HashMap<>();
	static HashMap<Mark, Set<Integer>> insert = new HashMap<Mark,Set<Integer>>();
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int n = sc.nextInt();
		Deck dc = new Deck();
		Mark mark = Mark.S;
		
		for(int i=1;i<=13;i++) {
			treeS.add(i);
			treeH.add(i);
			treeC.add(i);
			treeD.add(i);
		}
		
		insert.put(Mark.S,treeS);
		insert.put(Mark.H,treeH);
		insert.put(Mark.C,treeC);
		insert.put(Mark.D,treeD);
		
		for(Mark mark1 : Mark.values()) {
			dc.getSet(mark1);
		}
		
		for(int i=0;i<n;i++) {
			mark = Mark.valueOf(sc.next());
//			switch(sc.next()) {
//			case "S":
//				mark = Mark.S;
//				break;
//			case "H":
//				mark = Mark.H;
//				break;
//			case "C":
//				mark = Mark.C;
//				break;
//			case "D":
//				mark = Mark.D;
//				break;
//			}
			dc.removeCard(mark,sc.nextInt());
		}
		
//		System.out.println(treeS);
//		System.out.println();
//		System.out.println(treeH);
//		System.out.println();
//		System.out.println(treeC);
//		System.out.println();
//		System.out.println(treeD);
//		System.out.println();
		
		for(Mark mark1 : Mark.values()) {
			dc.getSet(mark1);
		}
		
//		System.out.println("HashMap");
//		System.out.println(hm);
		print();
	}
	
	static void print() {
		
		for(Mark mark : Mark.values()) {
//		Mark mark = Mark.S;
//		for(int i=0;i<4;i++) {
//			switch(i) {
//			case 0:
//				mark = Mark.S;
//				break;
//			case 1:
//				mark = Mark.H;
//				break;
//			case 2:
//				mark = Mark.C;
//				break;
//			case 3:
//				mark = Mark.D;
//				break;
//			}
			Set<Integer> set = hm.get(mark);
//			System.out.println(set);
			for(int j=1;j<=13;j++) {
				if(set.contains(j)) {
					System.out.println(mark.toString() + " " + j);
//				}else if(set.contains(j)) {
//					System.out.println("H " + j);
//				}else if(set.contains(j) && i == 2) {
//					System.out.println("C " + j);
//				}else if(set.contains(j) && i == 3) {
//					System.out.println("D " + j);
				}
			}
		}
	}
}

