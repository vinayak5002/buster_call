// #define _GLIBCXX_DEBUG
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define rep2(i, k, n) for (decltype(n) i = k; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i--)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i--)
#define repr2(i, k, n) for (decltype(n) i = n; i >= k; i--)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret;};
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret;};
template<typename T> using pq_inv = priority_queue<T, vector<T>, greater<T>>;



struct Solver{
    vector<vector<int>> graph;
    vector<int> seen;
    
    void bfs(int v, vector<int>& dist){
        seen.assign(dist.size(),0);
        queue<pair<int,int>> q;
        q.push({0,v});
        seen[v]=1;
        while(!q.empty()){
            auto [d,u] = q.front();
            q.pop();
            dist[u]=d;
            for(auto&& e:graph[u]){
                if(seen[e]==1)continue;
                q.push({dist[u]+1,e});
                seen[e]=1;
            }
        }
    }
    
    void solve(){
      int n;
      cin >> n;  
      graph.resize(n);
      rep(i,n){
          int u,k;
          cin >> u >> k;
          u--;
          rep(j,k){
              int v;
              cin >> v;
              v--;
              graph[u].push_back(v);
          }
      }
      vector<int>dist(n,1<<30);
      bfs(0,dist);
      rep(i,n){
          cout << i+1 << ' ' << (dist[i]!=1<<30?dist[i]:-1) << endl;
      }
      cout << endl;
    
    };
};

int main() {
    std::cin.tie(nullptr);
    Solver solver;
    solver.solve();
    return 0;
}


