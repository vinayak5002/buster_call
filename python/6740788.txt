from itertools import accumulate
import itertools
import sys
sys.setrecursionlimit(10**9)
import math
import heapq
import bisect
from collections import deque, Counter, defaultdict, OrderedDict
from sys import stdin
import copy
from decimal import Decimal
from operator import mul
from functools import reduce


MOD = 10 ** 9 + 7
int1 = lambda x: int(x) - 1
stinput = lambda: stdin.readline()[:-1]
ii = lambda: int(stinput())  # int input
mi = lambda: map(int, stdin.readline().split())  # map input (int)
li = lambda: list(mi())  # list input (int)
mi1 = lambda: map(int1, stdin.readline().split())  # map input (int)-1
li1 = lambda: list(mi1())  # list input (int)-1
mis = lambda: map(str, stdin.readline().split())  # map input (string)
lis = lambda: list(mis())  # list input (string)
def my_lcm(x, y):
    return (x * y) // math.gcd(x, y)
def combnations_count(n, r):
    return math.factorial(n) // (math.factorial(n-r) * math.factorial(r))

while True:
    x, y, s = mi()
    ans = 0
    if x == 0:
        break
    cnt = 0
    for i in range(1,1001):
        if s < math.floor((i * (100+x))/100):
            break
        for j in range(1,1001):
            cnt = math.floor((i * (100+x))/100) + math.floor((j * (100 + x))/100)
            if cnt > s:
                break
            if cnt == s:
                tmp = math.floor((i * (100+y))/100) + math.floor((j * (100 + y))/100)
                if tmp > ans:
                    ans = tmp
    print(ans)




