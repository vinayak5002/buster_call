class Tree:
    def __init__(self,length):
        self.length = length
        self.nodes = [Node()]*length
    def AddNode(self,node):
        self.nodes[node.id] = node

    def CreateTree(self):
        for node in self.nodes:
            for child in node.children:
                self.nodes[child].parent = node.id

        for node in self.nodes:
            if(node.parent == -1):
                node.status = 0
                self.searchNode(root=node.id,searchDepth=0)
                break
        
    def searchNode(self,root,searchDepth):
        self.nodes[root].depth = searchDepth
        if(self.nodes[root].children == []): self.nodes[root].status = 2 #status = leaf
        for child in self.nodes[root].children:
            if(self.nodes[root].parent != -1): self.nodes[root].status = 1 #status = internal node
            self.searchNode(child,searchDepth+1)  


    def ShowNodeInfo(self,id):
        node = self.nodes[id]
        if(node.status == 0):
            statusName = "root"
        if(node.status == 1):
            statusName = "internal node"
        if(node.status == 2):
            statusName = "leaf"
        if(node.status == -1):
            statusName = "undefined"
        print("node "+str(node.id)+": parent = "+str(node.parent)+", depth = "+str(node.depth)+", "+statusName+", "+str(node.children))
class Node:
    def __init__(self,id=0,parent=-1,depth=0,status=-1,children=[]):
        self.id = id
        self.parent=parent
        self.depth=depth
        self.status=status
        self.children=children

n = int(input())
tree = Tree(n)
for i in range(0,n):
    inp = input().split()
    id = int(inp[0])
    childLength = int(inp[1])
    children = list(map(int,inp[2:]))
    tree.AddNode(Node(id=id,children=children))

tree.CreateTree()

for i in range(0,n):
    tree.ShowNodeInfo(i)


