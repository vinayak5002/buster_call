/// 入力を取得するマクロ
/// https://qiita.com/tanakh/items/0ba42c7ca36cd29d0ac8
macro_rules! input {
    (source = $s:expr, $($r:tt)*) => {
        let mut iter = $s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
    ($($r:tt)*) => {
        let s = stdin!();
        let mut iter = s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
}

macro_rules! input_inner {
    ($iter:expr) => {};
    ($iter:expr, ) => {};

    ($iter:expr, $var:ident : $t:tt $($r:tt)*) => {
        let $var = read_value!($iter, $t);
        input_inner!{$iter $($r)*}
};
}

macro_rules! read_value {
    ($iter:expr, ( $($t:tt),* )) => {
        ( $(read_value!($iter, $t)),* )
    };

    ($iter:expr, [ $t:tt ; $len:expr ]) => {
        (0..$len).map(|_| read_value!($iter, $t)).collect::<Vec<_>>()
    };

    ($iter:expr, chars) => {
        read_value!($iter, String).chars().collect::<Vec<char>>()
    };

    ($iter:expr, usize1) => {
        read_value!($iter, usize) - 1
    };

    ($iter:expr, $t:ty) => {
        $iter.next().unwrap().parse::<$t>().expect("Parse error")
    };
}

macro_rules! stdin {
    () => {{
        use std::io::Read;
        let mut s = String::new();
        std::io::stdin().read_to_string(&mut s).unwrap();
        s
    }};
}

macro_rules! stdout {
    ($out:expr) => {{
        use std::io::Write;
        let out = std::io::stdout();
        let mut out = std::io::BufWriter::new(out.lock());
        writeln!(out, "{}", $out).unwrap();
    }};
}

macro_rules! join {
    ($input:expr) => {
        join!($input, " ")
    };

    ($input:expr, $separator:expr) => {
        $input
            .iter()
            .map(|a| a.to_string())
            .collect::<Vec<String>>()
            .join($separator)
    };
}
use std::collections::VecDeque;

#[allow(dead_code)]
fn main() {
    stdout!(solve(&stdin!()))
}

fn solve(src: &str) -> String {
    let mut down_stack = VecDeque::<usize>::with_capacity(src.len());
    let mut area_stack = VecDeque::<(usize, usize)>::new();
    for (idx, s) in src.chars().enumerate() {
        match s {
            '\\' => {
                down_stack.push_back(idx + 1);
            },
            '_' => {
                // nop
            },
            '/' => {
                if let Some(down_idx) = down_stack.pop_back() {
                    let current_area = (down_idx, (idx + 1) - down_idx);
                    if area_stack.is_empty() {
                        // 初回
                        area_stack.push_back(current_area);
                        continue;
                    }

                    let mut sums = current_area;
                    while let Some((prev_down_idx, prev_area)) = area_stack.pop_back() {
                        if prev_down_idx > down_idx {
                            // 内側に水たまりがあるので今回の水たまりに足す
                            sums.1 += prev_area;
                        } else {
                            // popした要素を元に戻す
                            area_stack.push_back((prev_down_idx, prev_area));
                            break;
                        }
                    }
                    area_stack.push_back(sums);
                }
            },
            _ => panic!()
        }
    }

    let sum: i64 = area_stack.iter().map(|(_idx, area)| *area as i64).sum();
    let areas = area_stack.iter().map(|(_idx, area)| area.to_string()).collect::<Vec<String>>().join(" ");

    format!("{}\n{} {}", sum, area_stack.len(), areas)
}


