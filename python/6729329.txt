import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.Double;
import java.lang.Integer;
import java.util.ArrayList;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) throws IOException {

        Scanner sc = new Scanner(System.in);
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String test = br.readLine();
        String[] list = test.split(" ");
        int totalNode = Integer.valueOf(list[0]);
        int totalEdge = Integer.valueOf(list[1]);

        ArrayList<Graph> graphs = new ArrayList<>();

        for (int i = 0; i < totalEdge; i++) {

            String line = br.readLine();

            String[] tempList = line.split(" ");

            String currenNode = tempList[0];
            String currenEdge = tempList[1];

            // 若已存在该顶点则添加在该顶点下
            if (graphs.size() != 0) {
                boolean founded = false;
                for (Graph exsitedGraph : graphs) {
                    if (currenNode.equals(exsitedGraph.getNode())) {
                        exsitedGraph.getEdges().add(currenEdge);
                        founded = true;
                        break;
                    }
                }
                // 遍历完若没有的话则添加新的
                if (!founded) {
                    Graph graph = new Graph();
                    graph.setNode(currenNode);
                    graph.setNewEdges(currenEdge);
                    graphs.add(graph);
                }

            } else {
                Graph graph = new Graph();
                graph.setNode(currenNode);
                graph.setNewEdges(currenEdge);
                graphs.add(graph);
            }
        }
        System.out.println("123");
    }



    public static boolean DFS(){




        return true;
    }


}

class Graph {
    private String Node;
    private ArrayList<String> edges;

    public String getNode() {
        return Node;
    }

    public void setNode(String node) {
        Node = node;
    }

    public ArrayList<String> getEdges() {
        return edges;
    }

    public void setEdges(ArrayList<String> edges) {
        this.edges = edges;
    }

    public void setNewEdges(String edge) {
        ArrayList<String> edges = new ArrayList<>();
        edges.add(edge);
        this.edges = edges;
    }
}
