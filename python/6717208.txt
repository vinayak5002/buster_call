import java.io.BufferedReader
import java.io.PrintWriter
import kotlin.math.sqrt

fun main() {
    val re = System.`in`.bufferedReader()
    val pw = PrintWriter(System.out)

    val n = re.readInt()
    val an = List(n) { re.readInt() }
    val L = mutableListOf(an[0]) // dp[i-1]は、長さがiであるような増加部分列の最後の要素の最小値とする配列
    // an でループ、 ai に対して
    // (dpの末尾,, 今計算している最長の長さで、最後の要素の最小値) < an なら dpの末尾にanを足す
    // そうでないなら anで書き換えられる binary search で
    // dp[0] = 1
    (0..(n - 1)).forEach { i ->
        if (L.last() < an[i]) {
            L.add(an[i])
        } else {
            val result = L.binarySearch(an[i])
            val index = when {
                result >= 0 -> result
                else -> (-result - 1)
            }
            L[index] = an[i]
        }
    }

    pw.println(L.count())

    pw.flush()
    re.close()
}

inline fun <T, R : Comparable<R>> Iterable<T>.maxOf(selector: (T) -> R): R {
    val iterator = iterator()
    if (!iterator.hasNext()) throw NoSuchElementException()
    var maxValue = selector(iterator.next())
    while (iterator.hasNext()) {
        val v = selector(iterator.next())
        if (maxValue < v) {
            maxValue = v
        }
    }
    return maxValue
}

fun Int.isEven(): Boolean = this % 2 == 0

fun Int.isOdd(): Boolean = !isEven()

fun Int.factorial() = (1..this).reduce { a, b -> a * b }

fun Int.permutation(k: Int = 1) = (k..this).reduce { a, b -> a * b }

fun <T> List<T>.permutations(): Set<List<T>> {
    val source = this
    val permutations = mutableSetOf<List<T>>()
    fun permutation(source: List<T>, perm: List<T>) {
        if (source.size <= 1) {
            permutations += perm + source
        } else {
            repeat(source.size) {
                permutation(source.take(it) + source.drop(it + 1), perm + source[it])
            }
        }
    }
    permutation(source, emptyList())
    return permutations
}

fun Int.combination(k: Int = 1) = permutation(k) / k.factorial()

// digitToIntが1.5からなので自前で定義
fun Char.digitToInt(): Int {
    @Suppress("DEPRECATION") return Character.digit(this.toInt(), 10).also {
        if (it < 0) throw IllegalArgumentException("Char $this is not a decimal digit")
    }
}


operator fun Regex.contains(text: CharSequence): Boolean = this.matches(text)

fun divisor(value: Long): List<Long> {
    return (1..(sqrt(value.toDouble()).toLong() + 1)).filter { value % it == 0L }.flatMap {
        if (value / it == it) listOf(it) else listOf(
            it, value / it
        )
    }//.also { println("value: $value, divisors $it") }
}

fun primeFactor(value: Long): List<Long> {
    if (value == 1L) return listOf(1)
    val max = Math.sqrt(value.toDouble()).toLong()
    return prime(2, max).filter { value % it == 0L }.also { println("value: $value, primeFactor $it") }
}

// 範囲内の素数を取得
// fromだけ指定すると戻り値の個数で素数判定ができる
fun prime(from: Long, to: Long = from): List<Long> {
    return (from..to).filter { i ->
        val max = Math.sqrt(i.toDouble()).toLong()
        (2..max).all { j -> i % j != 0L }
    }
}


fun BufferedReader.readInt(): Int = this.readLine()!!.toInt()

fun BufferedReader.readLong(): Long = this.readLine()!!.toLong()

fun BufferedReader.readDouble(): Double = this.readLine()!!.toDouble()

fun BufferedReader.readInts(): List<Int> = readLine()!!.split(" ").map { it.toInt() }


fun readLongs(reader: BufferedReader): List<Long> = reader.readLine()!!.split(" ").map { it.toLong() }

fun readDoubles(reader: BufferedReader): List<Double> = reader.readLine()!!.split(" ").map { it.toDouble() }


fun Double.decimalFormat(decimalCount: Int): String = String.format("%.${decimalCount}f", this)
