import java.util.LinkedList;
import java.util.Scanner;

public class Main {
    static final int[] dx = { 1, 0, -1, 0 };
    static final int[] dy = { 0, 1, 0, -1 };
    static int w;
    static int h;
    static int[][] map;

    public static void main(String[] args) throws CloneNotSupportedException {
        Scanner sc = new Scanner(System.in);
        while (true) {
            w = sc.nextInt();
            h = sc.nextInt();
            if (w == 0 && h == 0)
                break;
            map = new int[h][w];
            int start = 0, goal = 0;
            for (int i = 0; i < h; i++) {
                for (int j = 0; j < w; j++) {
                    int input = sc.nextInt();
                    map[i][j] = input;
                    if (input == 2) {
                        start = encord(i, j);
                    } else if (input == 3) {
                        goal = encord(i, j);
                    }
                }
            }
            int ans = explore(start, goal);
            System.out.println(ans == Integer.MAX_VALUE ? -1 : ans);
        }
        sc.close();
    }

    static int explore(int start, int goal) throws CloneNotSupportedException {
        int min = Integer.MAX_VALUE; // 最小の手数
        LinkedList<Board> queue = new LinkedList<Board>();
        Main tmpIst = new Main();
        queue.offer(tmpIst.new Board(0, start, map));
        while (queue.size() > 0) {
            Board current = queue.poll();
            Outer: for (int i = 0; i < 4; i++) {
                int x = decortX(current.stone) + dx[i];
                int y = decortY(current.stone) + dy[i];
                try {
                    if (current.map[y][x] == 1)
                        continue; // 隣が障害物ならその方向は無効

                    Board next = current.clone();
                    next.count++;

                    /* 隣に障害物がないのでその方向(x,y)に進む */
                    while (current.map[y][x] != 1) {
                        next.stone = encord(y, x);

                        /* ゴールを通過したら最小手数を更新 */
                        if (next.stone == goal) {
                            min = Math.min(next.count, min);
                            break Outer;
                        }
                        x += dx[i];
                        y += dy[i];
                    }
                    /* いまマス(x,y)には障害物があるので1を0にして消す */
                    next.map[y][x] = 0;

                    if (next.count == 10)
                        continue;
                    queue.offer(next);
                } catch (ArrayIndexOutOfBoundsException e) {
                    // 場外に行ったら無効
                    continue;
                }
            }
        }
        return min;
    }

    class Board implements Cloneable {
        int count; // 手数
        int stone; // 石の位置
        int[][] map; // 盤面

        public Board(int count, int stone, int[][] map) {
            this.count = count;
            this.stone = stone;
            this.map = new int[h][w];
            for (int i = 0; i < h; i++) {
                for (int j = 0; j < w; j++) {
                    this.map[i][j] = map[i][j];
                }
            }
        }

        @Override
        public Board clone() throws CloneNotSupportedException {
            Board clone = (Board) super.clone();
            clone.map = new int[h][w];
            for (int i = 0; i < h; i++) {
                for (int j = 0; j < w; j++) {
                    clone.map[i][j] = this.map[i][j];
                }
            }
            return clone;
        }
    }

    static int decortX(int n) {
        return n % w;
    }

    static int decortY(int n) {
        return n / w;
    }

    static int encord(int _h, int _w) {
        return _h * w + _w;
    }
}

