use std::io;
use std::io::Read;

fn main() {
    let mut buf = String::new();
    io::stdin().read_to_string(&mut buf).unwrap();
    let mut iter = buf.split_whitespace();
    loop {
        let n: usize = iter.next().unwrap().parse().unwrap();
        let m: usize = iter.next().unwrap().parse().unwrap();

        if n == 0 && m == 0 {
            break;
        }
        let mut h: Vec<i32> = Vec::with_capacity(n);
        let mut w: Vec<i32> = Vec::with_capacity(m);

        for _ in 0..n {
            let h_i: i32 = iter.next().unwrap().parse().unwrap();
            h.push(h_i);
        }

        for _ in 0..m {
            let w_i: i32 = iter.next().unwrap().parse().unwrap();
            w.push(w_i);
        }

        let h_sub = subsum(h, n);
        let w_sub = subsum(w, m);

        let mut ans: i32 = 0;

        for i in h_sub.iter() {
            for j in w_sub.iter() {
                if *i == *j {
                    ans += 1;
                } else if *i < *j {
                    break;
                }
            }
        }

        println!("{}", ans);
    }
}

fn subsum(h: Vec<i32>, n: usize) -> Vec<i32> {
    let mut s: Vec<i32> = Vec::with_capacity(n * n);

    for i in 0..n {
        for j in i..n {
            let s_i = vecsum(&h[i..j + 1]);
            s.push(s_i);
        }
    }

    s.sort();

    return s;
}

fn vecsum(slice: &[i32]) -> i32 {
    let mut sum: i32 = 0;

    for i in slice {
        sum += i;
    }
    return sum;
}

