/*
    Single Source Shortest Path
    2022 04 23
*/

#include <bits/stdc++.h>
using namespace std;
#define rep(i,n) for (int i = 0; i < (n); ++i)
const int INF = 1001001001;

struct edge{int v, w; };

int main(){
    int n, m, s;
    cin >> n >> m >> s;
    vector<vector<edge> > to(n);
    rep(i,m) {
        int u, v, w;
        cin >> u >> v >> w;
        to[u].push_back(edge{v, w});
    }

    vector<int> dist(n, INF);
    priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > q;
    dist[s] = 0;
    q.push({dist[s], s});
    while (!q.empty()) {
        pair<int, int> p = q.top(); q.pop();
        int u = p.second;

        if (dist[u] < p.first) continue;

        for (edge &e : to[u]) {
            if (dist[e.v] > dist[u] + e.w) {
                dist[e.v] = dist[u] + e.w;
                q.push({dist[e.v], e.v});
            }
        }
    }

    rep(i,n) {
        if (dist[i] < INF) cout << dist[i] << endl;
        else cout << "INF" << endl;
    }
} 
