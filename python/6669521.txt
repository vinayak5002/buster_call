from collections import deque
from collections import defaultdict
import sys
sys.setrecursionlimit(15000)

def read_graph():
    V, E = [int(v) for v in input().split()]
    G = defaultdict(list)
    for i in range(V):
        G[i] = []
    for e in range(E):
        s, t = [int(v) for v in input().split()]
        G[s].append(t)
        if t not in G:
            G[t] = []
    return G

def topo(G, ind=None, Q=None):
    if Q is None:
        Q = [4]
    if ind is None:
        ind = [0] * (len(G) + 1)  # SInce oth Index is ignored
        for u in G:
            for v in G[u]:
                ind[v] += 1
        Q = deque()
        for i in G:
            if ind[i] == 0:
                Q.append(i)
    if len(Q) == 0:
        return
    v = Q.popleft()
    print(v)
    for w in G[v]:
        ind[w] -= 1
        if ind[w] == 0:
            Q.append(w)
    topo(G, ind, Q)


topo(read_graph())
