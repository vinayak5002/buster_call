import collections

class Vertex(object):
    def __init__(self, id):
        self.id = id
        self.adjacent = {}
        self.visited = False
        self.in_degree = 0
        self.permanent = False
        self.temporary = False

    def add_neighbor(self, neighbor, weight=0):
        self.adjacent[neighbor] = weight
    
    def get_neighbors(self):
        return self.adjacent

    def get_connections(self):
        return self.adjacent.keys()  

    def get_vertex_id(self):
        return self.id

    def get_weight(self, neighbor):
        return self.adjacent[neighbor]

    def set_visited(self):
        self.visited = True
    
    def unset_visited(self):
        self.visited = False
    
    def set_indegree(self, num):
        self.in_degree = num

    def get_indegree(self):
        return self.in_degree


class Graph(object):
    def __init__(self):
        self.vertex_dict = {}
        self.num_vertex = 0
    
    def __iter__(self):
        return iter(self.vertex_dict.values())

    def add_vertex(self, id):
        self.num_vertex = self.num_vertex + 1
        new_vertex = Vertex(id)
        self.vertex_dict[id] = new_vertex
        return new_vertex

    def get_vertex(self, id):
        if id in self.vertex_dict:
            return self.vertex_dict[id]
        else:
            return None

    def add_edge(self, frm, to, weight=0):
        if frm not in self.vertex_dict:
            self.add_vertex(frm)
        if to not in self.vertex_dict:
            self.add_vertex(to)
        self.vertex_dict[frm].add_neighbor(self.vertex_dict[to], weight)
        # 入力辺を増やす
        self.vertex_dict[to].in_degree += 1

    def get_vertices(self):
        return self.vertex_dict.keys()

    def get_edges(self):
        edges = []
        for v in self.vertex_dict.values():
            for w in v.get_connections():
                vid = v.get_vertex_id()
                wid = w.get_vertex_id()
                edges.append((vid, wid, v.get_weight(w)))
        return edges


class GraphTopologicalError(Exception):
        pass        

def topological_sort_dfs(graph):
    topological_reverse_sorted_list = []
    try:
        for current_vertex in graph:
            if not(current_vertex.permanent):
                topological_sort_dfs_visit(current_vertex, topological_reverse_sorted_list)
    except GraphTopologicalError:
        print(1)
    else:
        print(0)

def topological_sort_dfs_visit(vertex, topological_sorted_list):
    if vertex.permanent:
        return
    if vertex.temporary:
        raise GraphTopologicalError(topological_sorted_list)
    vertex.temporary = True
    for neighbor in vertex.get_connections():
        topological_sort_dfs_visit(neighbor, topological_sorted_list)
    vertex.temprary = False
    vertex.permanent = True
    topological_sorted_list.append(vertex.get_vertex_id())


if __name__ == '__main__':

    V, E = map(int, input().split())
    graph = Graph()
    for i in range(V):
        graph.add_vertex(str(i))
    for i in range(E):
        s, t = map(int, input().split())
        graph.add_edge(str(s), str(t), 1)

    topological_sort_dfs(graph)

