use std::io;


fn get_inputline() -> String{
    let mut indata = String::new();
    
    io::stdin()
        .read_line(&mut indata)
        .expect("Failed to read line");
    
    indata
}

fn get_inputline_to_vec<T: std::str::FromStr>() -> Vec<T>{
    let indata = get_inputline();
    let datalist:Vec<T> = indata.split_whitespace().map(|word| word.trim().parse::<T>().ok().unwrap()).collect();

    datalist
}


fn main() {
    let tmpstring = get_inputline();
    let fstline = tmpstring.trim().as_bytes();

    let tmpstring = get_inputline();
    let sndline = tmpstring.trim().as_bytes();

    let mut checkflag = false;
    //println!("fst.len:{}, snd.len:{}", fstline.len(), sndline.len());
    for a in 0..(fstline.len()) {
        if fstline[a] == sndline[0] {
            let mut check2flag = true;
            for i in 1..(sndline.len()) {
                //println!("1st[{}] = {}, 2nd = {}", a+i, fstline[(a+i)%fstline.len()], sndline[i]);
                if fstline[(a+i)%fstline.len()] != sndline[i] {
                    check2flag = false;
                    break;
                }
            }
            if check2flag {
                checkflag = true;
                break;
            }
        }
    }

    println!("{}", if checkflag {"Yes"} else {"No"})
}

