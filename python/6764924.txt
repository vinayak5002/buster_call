import java.util.*;

/**
 *
 * @author mpc-tlj
 */
public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
    ColaDePrioridad<Integer> cola = new ColaDePrioridad<Integer>();
         Scanner sc = new Scanner(System.in);
         while(true){ 
         String operation = null;
          operation = sc.nextLine();
          String[] arr = operation.split(" ");
          if("insertar".equals(arr[0])) {
              cola.adicionar(Integer.parseInt(arr[1]));
              continue;
                } 
          if("extracto".equals(arr[0])){
             System.out.println(cola.extraer());
             continue;
              }
          
          else {
             
              break; 
                }
         }
    }
}


 class ColaDePrioridad<T extends Comparable<T>> {
    protected T[] heap;
    protected int size;
    
    public ColaDePrioridad(){
        heap = (T[]) new Comparable[100];
        size = 0;
    }
    
    public boolean esVacia(){
        return size == 0;
    }
    
    public void adicionar(T x){
        if(size == heap.length) resize(); 
        int pos = size;
        while(pos != 0 && heap[(pos - 1) / 2].compareTo(x) < 0){
            heap[pos] = heap[(pos - 1) / 2];
            pos = (pos - 1) / 2;
        }
        
        heap[pos] = x;
        size++;
    }
    
    public T extraer(){
        T x = heap[0];
        heap[0] = heap[size - 1];
        --size;
        Heapify(0);
        return x;
    }
    
    private void Heapify(int i){
       int largo = i;
       if(2 * i + 1 < size && heap[largo].compareTo(heap[2 * i + 1]) < 0)
           largo = 2 * i + 1;
       if(2 * i + 2 < size && heap[largo].compareTo(heap[2 * i + 2]) < 0)
           largo = 2 * i + 2;
       if(largo != i){
           T temp = heap[largo];
           heap[largo] = heap[i];
           heap[i] = temp;
           Heapify(largo);
       }
    }
 private void resize(){
        T[] nuevo = (T[]) new Comparable[heap.length + 100];
        for(int i = 0; i < size; ++i)
            nuevo[i] = heap[i];
        heap = nuevo;
    }
}
