// #define _GLIBCXX_DEBUG
#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define rep2(i, k, n) for (decltype(n) i = k; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i--)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i--)
#define repr2(i, k, n) for (decltype(n) i = n; i >= k; i--)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret; };
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret; };
template <typename T>
using pq_inv = priority_queue<T, vector<T>, greater<T>>;

struct Solver {
    int score(int l, int r, vector<int>& W) {
        return abs(W[l] - W[r]) <= 1 ? 2 : 0;
    }
    bool solve() {
        int N;
        cin >> N;
        if(N==0) return false;
        vector<int> W(N);
        rep(i, N) cin >> W[i];
        vector<vector<int>> dp(N, vector<int>(N));
        for (int w = 1; w < N; w++) {
            for (int l = 0; l < N; l++) {
                int r = l + w;
                if (r >= N) break;
                for (int k = l; k + 1 <= r; k++) chmax(dp[l][r], dp[l][k] + dp[k + 1][r]);

                if (l + 1 == r)
                    chmax(dp[l][r], score(l, r, W));
                else if (l + 1 < r - 1 && dp[l + 1][r - 1] == (r-1) - (l+1) + 1)
                    chmax(dp[l][r], dp[l + 1][r - 1] + score(l, r, W));
            }
        }
        cout << dp[0][N - 1] << endl;
        return true;
    };
};

int main() {
    std::cin.tie(nullptr);
    while (true) {
        Solver solver;
        if(!solver.solve()) break;
    }
    return 0;
}


