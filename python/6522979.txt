from math import inf
from itertools import count, islice

rxs = lambda: map(int, input().split())
N, Q = rxs()
Qs = [tuple(rxs()) for _ in range(Q)]
m = 1
while m < N: m*=2;
u_tree = [0] * (2*m-1)
f_tree = [0] * (2*m-1)

def update(s, t, x, node=0, lft=0, rht=m):
    if t <= lft or  rht <= s: return
    if s <= lft and rht <= t:
        u_tree[node] += x
        return
    f_tree[node] += x*(min(rht, t) - max(lft, s))
    mid = (lft+rht)//2
    update(s, t, x, 2*node+1, lft, mid)
    update(s, t, x, 2*node+2, mid, rht)

def find(s, t, node=0, lft=0, rht=m):
    if t <= lft or  rht <= s: return 0
    u_sum = u_tree[node] * (min(rht, t) - max(lft, s))
    if s <= lft and rht <= t:
        return f_tree[node] + u_sum
    mid = (lft+rht)//2
    return sum([
        u_sum,
        find(s, t, node*2+1, lft, mid),
        find(s, t, node*2+2, mid, rht),
    ])

ans = []
for q in Qs:
    if q[0] == 0:
        update(q[1]-1, q[2], q[3])
    else:
        ans.append(find(q[1]-1, q[2]))

print("\n".join(ans))


