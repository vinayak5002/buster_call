// ALDS1_2_D
#include <bits/stdc++.h>
using namespace std;

#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

struct Fast {
  Fast() {
    std::cin.tie(0);
    ios::sync_with_stdio(false);
  }
} fast;

void pv(vector<int> &a) {
  for (int i = 0; i < a.size() - 1; i++) {
    cout << a[i] << " ";
  }
  cout << a.back() << endl;
  ;
}

void insertionSort(vector<int> &a, const int n, const int g, int &cnt) {
  for (int i = g; i < n; i++) {
    const int v = a[i];
    int j = i - g;
    while (j >= 0 && a[j] > v) {
      a[j + g] = a[j];
      j = j - g;
      cnt++;
    }
    a[j + g] = v;
  }
}

int shellSort(vector<int> &a, const int n) {
  int cnt = 0;
  const int m = 2;
  vector<int> G(m);
  G[0] = 4;
  G[1] = 1;

  cout << m << endl;
  pv(G);
  for (int i = 0; i < m; i++) {
    insertionSort(a, n, G[i], cnt);
  }
  return cnt;
}

int main() {
  int n;
  cin >> n;
  vector<int> a(n);
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  const int cnt = shellSort(a, n);

  cout << cnt << endl;

  for (const auto &_ : a) {
    cout << _ << endl;
  }

  return 0;
}

