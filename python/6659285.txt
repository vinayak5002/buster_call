//
// Created by 杨健祺 on 2022/05/23.
//
#include<iostream>
#include<tuple>
#include<utility>
#include<vector>
//
#include<bits/stdc++.h>
using namespace std;
//
// const int inf = 0x3f3f3f3f;
int P[10010];
void init (int N) {
    for (int i = 0; i < N; i++) P[i] = i;
}
int root(int a) {
    if (P[a] == a) return a;
    return (P[a] = root(P[a]));
}
bool is_same_set (int a,int b) {
    return ( root(a) == root(b));
}
void unite (int a,int b) {
    P[root(a)] = root(b);
}

struct edge{
    int s, t, w;

    bool operator<(const edge R) const{
        return w < R.w;
    }
};

int main(){
    // int n;
    // int ans = 0;
    // cin >> n;
    // vector<vector<int> > a[n*n];
    // tuple<int, int, int> array[n*n];
    // for (int i = 0; i < n; ++i){
    //     for (int j = 0; j < n; ++j) {
    //         cin >> a[i][j];
    //         if(a[i][j]==-1) a[i][j]=inf;
    //         tuple<int, int, int> b = {a[i][j], i, j};
    //         for (int k = 0; k < n*n; ++i) array[k] = {b};
    //     }

    //     sort(array, array + n*n);
    //         for (int k = 0; k < n; k++){

    //             while (is_same_set (get<1>(array[k]),get<2>(array[k]))==0) {
    //                 unite(get<1>(array[k]), get<2>(array[k]));
    //                 ans += get<0>(array[k]);
    //             }

    //         }
    //     }
    // cout << ans;

    int N;
    int ans = 0;
    cin >> N;
    auto a = vector(N, vector(N, 0));
    for(auto && b : a)for(auto && c : b)cin >> c;
    init(N);
    vector<edge> edges;
    for(int i = 0; i < N - 1; ++i){
        for(int j = i + 1; j < N; ++j){
            if(a[i][j] != -1)edges.push_back({i, j, a[i][j]});
        }
    }
    sort(edges.begin(), edges.end());
    for(auto [s, t, w]: edges){
        if(is_same_set(s, t))continue;
        ans += w;
        unite(s, t);
    }
    cout << ans << '\n';
  
    }


