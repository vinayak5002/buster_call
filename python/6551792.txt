import sys



import bisect
import array
import heapq
from collections import deque, defaultdict
import math
import copy
from itertools import permutations

sys.setrecursionlimit(10**9)
INF = float("inf")
mod = 998244353

n = int(input())
#N = input()
#N,Q = map(int,input().split())
#A = list(map(int,input().split()))
p = [[] for _ in range(n)]
for _ in range(n):
    ukv = list(map(int,input().split()))
    u = ukv[0]
    k = ukv[1]
    for i in range(k):
        p[u-1].append(ukv[2+i]-1)

def dijkstra(s):
    d = [INF]*n
    d[s] = 0
    cnt = [0]*n
    cnt[s] = 1
    q = []
    heapq.heappush(q,(0,s))
    while q:
        (cost,node) = heapq.heappop(q)
        if cost > d[node]:
            continue
        for nxt in p[node]:
            if d[nxt] > d[node] + 1:
                d[nxt] = d[node] + 1
                heapq.heappush(q,(d[nxt],nxt))
                cnt[nxt] = cnt[node]
            elif d[nxt] == d[node] + 1:
                cnt[nxt] += cnt[node]
    return d,cnt
ans,_ = dijkstra(0)
for i in range(n):
    print(i+1,ans[i])
