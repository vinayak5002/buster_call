const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
    console.time("whole")
    const q = si[0];
    const map = new Map();
    let str = "";
    for (let i = 0; i < q; i++) {
        let inp = si[i + 1].split(" ");
        let leftN = Number(inp[0]);
        let middleN = String(inp[1]);
        let rightN = String(inp[2]);
        //console.log("leftN = " + leftN + ", middleN = " + middleN + ", rightN = " + rightN);// forDebug
        switch (leftN) {
            case 0:// キーがmiddleNで値がrightNである要素を挿入する
                map.set(middleN, rightN);// setメソッドはキーの重複時に値を上書きする.
                break;

            case 1:// キーがmiddleNである値を出力する. そのような要素がない場合は0を出力する.
                if (map.has(middleN)) {
                    str += map.get(middleN) + "\n"
                } else {
                    str += 0 + "\n";
                }
                break;

            case 2:// キーがmiddleNである要素を削除する.
                map.delete(middleN);
                break;

            case 3: // キーが辞書式順でmiddleN以上rightN以下である要素の, キーと値の組を順番に出力する.
                const iter = map.keys();
                let array = Array.from(iter);
                array.sort();
                for (let key of array) {
                    if (rightN < key) {
                        break;
                    } else if (middleN <= key && key <= rightN){
                        str += key + " " + map.get(key) + "\n";
                    }// middleN未満のときはなにもしない.
                }   
                break;
        }
        //console.log(map); // forDebug
    }
    so.write(str);
   // console.timeEnd('whole')
}

