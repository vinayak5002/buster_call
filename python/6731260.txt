import heapq
from collections import deque, defaultdict
import math
import copy
from itertools import cycle, permutations

INF = float("inf")
mod = 10**9+7
    
#N = int(input())
#S = input()
#V,E = map(int,input().split())
#w = list(map(int,input().split()))
# path = [[(0,0)]*V for _ in range(V)]
# for _ in range(E):
#     s,t,d,time = map(int,input().split())
#     path[s-1][t-1] = (d,time)
#     path[t-1][s-1] = (d,time)
N,M,s = map(int,input().split())
#Q = int(input())

p = [[] for _ in range(N)]
for i in range(M):
    A,B,C = map(int,input().split())
    p[A].append((B,C))

###グラフ構造
def dijkstra(s):
    d = [INF]*N
    d[s] = 0
    q = []
    heapq.heappush(q,(0,s))
    while q:
        (cost,node) = heapq.heappop(q)
        if cost > d[node]:
            continue
        for n,c in p[node]:
            if d[n] > d[node] + c:
                d[n] = d[node] + c
                heapq.heappush(q,(d[n],n))
    return d
ans = dijkstra(s)
for a in ans:
    if a == INF:
        print("INF")
    else:
        print(a)
