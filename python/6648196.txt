//Codeforcesで128bit整数を使いたいとき
//→__int128_tを使う&GNU C++17 (64)で提出する

//インクルードなど
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

//イテレーション
#define REP(i,n) for(ll i=0;i<ll(n);i++)
#define REPD(i,n) for(ll i=n-1;i>=0;i--)
#define FOR(i,a,b) for(ll i=a;i<=ll(b);i++)
#define FORD(i,a,b) for(ll i=a;i>=ll(b);i--)
#define FORA(i,I) for(const auto& i:I)
//x:コンテナ
#define ALL(x) x.begin(),x.end() 
#define SIZE(x) ll(x.size()) 
//定数
#define INF32 2147483647 //2.147483647×10^{9}:32bit整数のinf
#define INF64 9223372036854775807 //9.223372036854775807×10^{18}:64bit整数のinf
#define MOD 1000000007 //問題による
//略記
#define F first
#define S second
//出力(空白区切りで昇順に)
#define coutALL(x) for(auto i=x.begin();i!=--x.end();i++)cout<<*i<<" ";cout<<*--x.end()<<endl;

//aをbで割る時の繰上げ,繰り下げ
ll myceil(ll a,ll b){return (a+(b-1))/b;}
ll myfloor(ll a,ll b){return a/b;}

int timestamp=0;
std::map<int, int> seen,time_d,time_f;

void dfs(int u, std::vector<std::vector<int> > Vs) {
    // cout<<"dfsStart"<<u<<endl;
    timestamp++;
    seen[u]++;
    time_d[u]=timestamp;
    for(int i=0;i<Vs[u].size();i++){
        // cout<<"Vs[u]の中身"<<Vs[u][i]<<endl;
        if(seen[Vs[u][i]]>0){continue;}
        dfs(Vs[u][i],Vs);
    }
    timestamp++;
    time_f[u]=timestamp;
}

signed main(){
    int n;
    cin>>n;
    std::vector<std::vector<int> > Vs(n);
    for (int i = 0; i < n; ++i)
    {
        int u,k;
        cin>>u>>k;
        for (int i = 0; i < k; ++i)
        {
            int v;
            cin>>v;
            Vs[u-1].push_back(v-1);
        }
    }
    for (int i = 0; i < n; ++i)
    {
        if(seen[i]==0)dfs(i,Vs);
    }

    for (int i = 0; i < n; ++i)
    {
        cout<<i+1<<" "<<time_d[i]<<" "<<time_f[i]<<endl;
    }
}
