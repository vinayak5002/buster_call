// common part begin
#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfenv>
#include <cfloat>
#include <chrono>
#include <cinttypes>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <fstream>
#include <functional>
#include <initializer_list>
#include <iomanip>
#include <ios>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <streambuf>
#include <string>
#include <tuple>
#include <type_traits>
#include <typeinfo>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;
#define INF (1ll) << 60
#define rep(i, n) for (long long i = 0; i < n; i++)
#define all(v) v.begin(), v.end()
typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
void chmax(ll &a, ll b)
{
  if (a < b)
    a = b;
}
void chmin(ll &a, ll b)
{
  if (a > b)
  {
    a = b;
  }
}
// common part end
#define hi_ cout << "hi" << endl;
#define yes cout << "yes" << endl
#define no cout << "no" << endl
#define Yes cout << "Yes" << endl
#define No cout << "No" << endl
#define llV(name, size)                   \
  std::vector<long long> name(size);      \
  for (unsigned int i = 0; i < size; i++) \
  cin >> name[i]
#define die(x)       \
  cout << x << endl; \
  return 0;
class Print
{
public:
  Print() {}
};

void operator<<(Print p, vector<ll> v)
{
  for (auto i : v)
    cout << i << " ";
  cout << endl;
}

void operator<<(Print p, vector<vector<ll>> v)
{
  for (auto i : v)
  {
    for (auto j : i)
    {
      cout << j << " ";
    }
    cout << endl;
  }
}

void operator<<(Print p, ull x)
{
  cout << x << endl;
}
void operator<<(Print p, vector<ull> v)
{
  for (auto i : v)
    cout << i << " ";
  cout << endl;
}

void operator<<(Print p, vector<vector<ull>> v)
{
  for (auto i : v)
  {
    for (auto j : i)
    {
      cout << j << " ";
    }
    cout << endl;
  }
}

void operator<<(Print p, ll x)
{
  cout << x << endl;
}

void operator<<(Print p, string s)
{
  cout << s << endl;
}
void operator<<(Print p, vector<string> s)
{
  for (auto i : s)
    cout << i << endl;
}

void operator<<(Print p, vector<pair<pair<ll, ll>, ll>> v)
{
  for (auto i : v)
  {
    cout << i.first.first << " " << i.first.second << " " << i.second << endl;
  }
}
void operator<<(Print p, vector<pair<ll, pair<ll, ll>>> v)
{
  for (auto i : v)
  {
    cout << i.first << " " << i.second.first << " " << i.second.second << endl;
  }
}
void operator<<(Print p, pair<ll, ll> v)
{
  cout << v.first << " " << v.second << endl;
}



Print print;
class SCC
{
public:
  vector<ll> used;
  vector<ll> rused;
  vector<vector<ll>> G;
  vector<vector<ll>> rG;
  vector<ll> vs;
  vector<ll> cmp;
  vector<vector<ll>> groups; // groupごとの要素を記録。
  ll N;
  SCC(ll N_, vector<vector<ll>> G_) : N(N_), used(N_), rused(N_), G(G_), rG(N_), cmp(N_, -1),groups(N_)
  {
    rep(i, N)
    {
      for (auto e : G[i])
      {
        rG[e].push_back(i);
      }
    }
  }
  void dfs(ll now)
  {
    used[now] = 1;
    for (auto e : G[now])
    {
      if (used[e])
        continue;
      dfs(e);
    }
    vs.push_back(now);
  }
  void rdfs(ll now, ll k)
  {
    rused[now] = 1;
    cmp[now] = k;
    groups[k].push_back(now);
    for (auto e : rG[now])
    {
      if (rused[e])
        continue;
      rdfs(e, k);
    }
  }
  ll scc()
  {
    ll k = 0;
    rep(i, N)
    {
      if (!used[i])
        dfs(i);
    }
    for (ll i = vs.size() - 1; i >= 0; i--)
    {
      if (!rused[vs[i]])
      {
        rdfs(vs[i], k);
        k++;
      }
    }
    return k;
  }
};
struct strongly_connected_components{
  vector<vector<int>> scc;
  vector<int> c;
  void dfs1(vector<vector<int>> &E, vector<bool> &used, vector<int> &t, int v){
    for (int w : E[v]){
      if (!used[w]){
        used[w] = true;
        dfs1(E, used, t, w);
      }
    }
    t.push_back(v);
  }
  void dfs2(vector<vector<int>> &E, vector<bool> &used, int v){
    scc.back().push_back(v);
    for (int w : E[v]){
      if (!used[w]){
        used[w] = true;
        dfs2(E, used, w);
      }
    }
  }
  strongly_connected_components(vector<vector<int>> G){
    int V = G.size();
    vector<vector<int>> E1(V), E2(V);
    for (int i = 0; i < V; i++){
      for (int j : G[i]){
        E1[i].push_back(j);
        E2[j].push_back(i);
      }
    }
    vector<bool> used(V, false);
    vector<int> t;
    for (int i = 0; i < V; i++){
      if (!used[i]){
        used[i] = true;
        dfs1(E1, used, t, i);
      }
    }
    reverse(t.begin(), t.end());
    vector<bool> used2(V, false);
    for (int i = 0; i < V; i++){
      if (!used2[t[i]]){
        used2[t[i]] = true;
        scc.push_back(vector<int>());
        dfs2(E2, used2, t[i]);
      }
    }
    c = vector<int>(V);
    int sz = scc.size();
    for (int i = 0; i < sz; i++){
      for (int j : scc[i]){
        c[j] = i;
      }
    }
  }
  int size(){
    return scc.size();
  }
  int operator [](int k){
    return c[k];
  }
};
// vector<ll> topological_sort(vector<vector<ll>> &G){
//   ll N=G.size();
//   vector<ll> indegree(N);
//   rep(i,N){
//     for(auto e:G[i])indegree[e]++;
//   }
//   vector<ll> res;
//   priority_queue<ll,vector<ll>,greater<ll>> q;
//   rep(i,N){
//     if(indegree[i]==0)q.push(i);
//   }
//   while(!q.empty()){
//     ll now=q.top();q.pop();
//     for(auto e:G[now]){
//       indegree[e]--;
//       if(indegree[e]==0)q.push(e);
//     }
//     res.push_back(now);
//   }
//   return res;
// }


int main()
{cout<<fixed<<setprecision(9);
  while (true)
  {
    ll N;
    cin >> N;
    if (N == 0)
      break;
    vector<vector<int>> G(N);
    vector<ld> P(N);
    rep(i, N)
    {
      ll m;
      ld p;
      cin >> p >> m;
      P[i] = p;
      rep(j, m)
      {
        ll a;
        cin >> a;
        G[i].push_back(a - 1);
      }
    }
    ld res=1;
    strongly_connected_components S(G);
    ll k=S.size();
    vector<ll> ok(k,1);
    vector<ld> Pk(k,1.0);
    rep(i,N){
      for(auto j:G[i]){
        if(S[j]!=S[i])ok[S[j]]=0;
      }
        Pk[S[i]]*=P[i];
    }

    rep(i,k){
      if(ok[i])res*=(1.0-Pk[i]);
    }
    // rep(i,k){
    //   bool flag=true;
    //   ld p=1;

    //   for(auto e:S.groups[i]){
    //     p*=P[e];

    //     for(auto j:S.rG[e]){
    //       flag&=(S.cmp[j]==S.cmp[e]);
    //     }
    //   }
    //   if(flag)res*=(1-p);
    // }

    cout <<res << endl;
  }
}
