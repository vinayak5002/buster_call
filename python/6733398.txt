import sys
import math
import heapq
from collections import deque, Counter, defaultdict
from sys import stdin


INF = 10 ** 7
int1 = lambda x: int(x) - 1
stinput = lambda: stdin.readline()[:-1]
ii = lambda: int(stinput())  # int input
mi = lambda: map(int, stdin.readline().split())  # map input (int)
li = lambda: list(mi())  # list input (int)
mi1 = lambda: map(int1, stdin.readline().split())  # map input (int)-1
li1 = lambda: list(mi1())  # list input (int)-1
mis = lambda: map(str, stdin.readline().split())  # map input (string)
lis = lambda: list(mis())  # list input (string)
MAX = 7368791

def eratosthenes_like(begin, limit, nCnt):
    cnt = 0
    prime = 0
    is_prime = [True] * (limit + 1)
    # for i in range(begin):
    #     is_prime[i] = False

    for p in range (begin, limit + 1):
        if not is_prime[p]:
            continue
        prime = p
        cnt += 1
        if cnt > nCnt:
            return prime
        for i in range(p*2, limit + 1, p):
            is_prime[i] = False
        
while 1:
    M, N = mi()
    if M == 0: break
    ans = eratosthenes_like(M, MAX, N)
    print(ans)
