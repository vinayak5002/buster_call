import sys
import math

# READ_FROM_FILE = True
READ_FROM_FILE = False


def cross_product2d(v0, v1):
    return v0[0] * v1[1] - v0[1] * v1[0]


def calc_length(v):
    length = 0
    for element in v:
        length += element ** 2
    return math.sqrt(length)


def normalize(v):
    length = calc_length(v)
    nv = []
    for element in v:
        nv.append(element / length)
    return nv


def v_diff(v0, v1):
    dif = []
    for i in range(len(v0)):
        dif.append(v1[i] - v0[i])
    return dif


def inner_product(v0, v1):
    ip = 0
    for i in range(len(v0)):
        ip += v0[i] * v1[i]
    return ip


"""v01: normalized"""
def calc_projection_point(p0, v01, p2):
    v0p = v_diff(p0, p2)
    ip = inner_product(v01, v0p)
    projection_p = []
    for i in range(len(v01)):
        projection_p.append(p0[i] + v01[i] * ip)
    return projection_p


def calc_intersection(circle, p0, p1):
    v01 = normalize(v_diff(p0, p1))
    pl = calc_projection_point(p0, v01, circle)
    r = circle[2]
    d2 = (pl[0] - circle[0])**2 + (pl[1] - circle[1])**2
    if d2 == r**2:
        return pl, pl

    t = math.sqrt(r**2 - d2)
    x0 = pl[0] + v01[0] * t
    y0 = pl[1] + v01[1] * t
    x1 = pl[0] - v01[0] * t
    y1 = pl[1] - v01[1] * t
    ip_list = [(x0, y0), (x1, y1)]
    ip_list.sort()

    return ip_list


def calc_circle_segment_intersection(circle, p0, p1):
    ip_list = calc_intersection(circle, p0, p1)
    vi0 = v_diff(p0, ip_list[0])
    v01 = v_diff(p0, p1)
    if inner_product(vi0, v01) > 0:
        ip = ip_list[0]
    else:
        ip = ip_list[1]

    return ip


def calc_area_of_circle_and_polygon(circle, n, p_list):
    r = circle[2]
    po = (0, 0)
    r2 = r * r
    if circle[0] != 0 or circle[1] != 0:
        dx = -circle[0]
        dy = -circle[1]
        circle = (circle[0] + dx, circle[1] + dy, r)
        for p in p_list:
            p[0] += dx
            p[1] += dy

    area = 0
    for i in range(n):
        p0 = p_list[i - 1]
        p1 = p_list[i]

        d0 = calc_length(p0)
        d1 = calc_length(p1)

        is_swapped = False
        if d0 > d1:
            p0, p1 = p1, p0
            d0, d1 = d1, d0
            is_swapped = True

        if d0 <= r and d1 <= r:
            a = cross_product2d(p0, p1) * 0.5
            area += (a if not is_swapped else -a)
        elif d0 > r and d1 > r:
            pi0 = calc_circle_segment_intersection(circle, po, p0)
            pi1 = calc_circle_segment_intersection(circle, po, p1)

            theta = math.acos(inner_product(pi0, pi1) / r2)
            a = r2 * theta * 0.5
            area += (a if not is_swapped else -a)
        else:
            pi = calc_circle_segment_intersection(circle, p0, p1)
            a0 = cross_product2d(p0, pi) * 0.5
            pi1 = calc_circle_segment_intersection(circle, po, p1)

            cos_theta = inner_product(pi, pi1) / r2
            cos_theta = max(-1.0, min(1.0, cos_theta))
            theta = math.acos(cos_theta)
            a1 = r2 * theta * 0.5
            area += (a0 + a1 if not is_swapped else -a0 + a1)

    return area


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    n, r = map(int, f.readline().split())
    circle = (0, 0, r)
    p_list = [tuple(map(int, f.readline().split())) for _ in range(n)]

    area = calc_area_of_circle_and_polygon(circle, n, p_list)
    print(f'{area:5f}')

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

