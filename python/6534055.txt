import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.NoSuchElementException;
import java.util.zip.ZipEntry;

public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	
	static boolean[][] isVisited;
	static int[][] grid;
	public static void main (String args[]) throws Exception{
		while(true) {
			String[] s = br.readLine().split(" ");
			int w = Integer.parseInt(s[0]);
			int h = Integer.parseInt(s[1]);
			if(w == 0 && h == 0) break;
			grid = new int[h][w];
			isVisited = new boolean[h][w];
			for(int i = 0; i < h; ++i) {
				String[] ss = br.readLine().split(" ");
				for(int j = 0; j < w; ++j) {
					grid[i][j] = Integer.parseInt(ss[j]);
				}
			}
			
			int cnt = 0;
			for(int i = 0; i < h; ++i) {
				for(int j = 0; j < w; ++j) {
					if(isVisited[i][j] || grid[i][j] == 0) continue;
					dfs(i, j);
					cnt++;
				}
			}
			System.out.println(cnt);
		}
	}
	
	static void dfs(int h, int w) {
		if(h < 0 || h >= grid.length || w < 0 || w >= grid[h].length) return;
		if(grid[h][w] == 0 || isVisited[h][w]) return;
		
		isVisited[h][w] = true;
		dfs(h-1, w);
		dfs(h+1, w);
		dfs(h, w-1);
		dfs(h, w+1);
		dfs(h+1, w+1);
		dfs(h+1, w-1);
		dfs(h-1, w-1);
		dfs(h-1, w+1);
	}
}

