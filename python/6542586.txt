class Node:
  def __init__(self):
    self.parent = -1
    self.children = None
    self.depth = 0

def searchType(node):
  if node.parent == -1:
    return "root"
  else:
    if node.children:
      return "internal node"
    return "leaf"

def searchDepth(id, depth):
  nodes[id].depth = depth
  if nodes[id].children:
    for child in nodes[id].children:
      searchDepth(child, depth + 1)


n = int(input())
nodes = [Node() for _ in range(n)]
for _ in range(n):
  id, _, *c = list(map(int, input().split()))
  nodes[id].children = c
  if c:
    for child in c:
      nodes[child].parent = id
  nodes[id].kind = searchType(nodes[id])
  print(nodes[id].parent, nodes[id].kind, nodes[id].children)

for id in range(n):
  if nodes[id].parent == -1:
    searchDepth(id, 0)
    break

for id, node in enumerate(nodes):
  print(f"node {id}: parent = {node.parent}, depth = {node.depth}, {node.kind}, {node.children}")
