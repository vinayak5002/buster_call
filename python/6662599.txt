import sys
import math

# READ_FROM_FILE = True
READ_FROM_FILE = False

ON_SEGMENT = 0
ONLINE_BACK = 1
ONLINE_FRONT = 2
COUNTER_CLOCKWISE = 3
CLOCKWISE = 4

EPS = 1e-10


def calc_length(v):
    length = 0
    for element in v:
        length += element ** 2
    return math.sqrt(length)


def normalize(v):
    length = calc_length(v)
    nv = []
    for element in v:
        nv.append(element / length)
    return nv


def v_diff(v0, v1):
    dif = []
    for i in range(len(v0)):
        dif.append(v1[i] - v0[i])
    return dif


def inner_product(v0, v1):
    ip = 0
    for i in range(len(v0)):
        ip += v0[i] * v1[i]
    return ip


def cross_product2d(v0, v1):
    return v0[0] * v1[1] - v0[1] * v1[0]


def _is_intersect_vertical(p0, p1, p2, p3):
    # if p0[0] == p1[0]:
    x0 = p0[0]
    min_y0 = min(p0[1], p1[1])
    max_y0 = max(p0[1], p1[1])
    min_x2 = min(p2[0], p3[0])
    max_x2 = max(p2[0], p3[0])
    min_y2 = min(p2[1], p3[1])
    max_y2 = max(p2[1], p3[1])

    if p2[0] == p3[0]:
        if x0 == p2[0]:
            if max_y0 < min_y2 or max_y2 < min_y0:
                return False
            else:
                return True
    elif p2[1] == p3[1]:
        p2y = p2[1]
        if min_y0 <= p2y <= max_y0 and min_x2 <= x0 <= max_x2:
            return True
        else:
            return False
    elif min_x2 <= x0 <= max_x2:
        v2 = v_diff(p2, p3)
        a = v2[1] / v2[0]
        b = p2[1] - a * p2[0]
        iy = a * p0[0] + b

        if iy < min_y2 or max_y2 < iy:
            return False
        if min_y0 <= iy <= max_y0:
            return True
        else:
            return False
    else:
        return False


def _is_intersect_horizontal(p0, p1, p2, p3):
    # if p0[1] == p1[1]:
    y0 = p0[1]
    min_x0 = min(p0[0], p1[0])
    max_x0 = max(p0[0], p1[0])
    min_x2 = min(p2[0], p3[0])
    max_x2 = max(p2[0], p3[0])
    min_y2 = min(p2[1], p3[1])
    max_y2 = max(p2[1], p3[1])

    if p2[1] == p3[1]:
        if y0 == p2[1]:
            if max_x0 < min_x2 or max_x2 < min_x0:
                return False
            else:
                return True
    elif p2[0] == p3[0]:
        p2x = p2[0]
        if min_x0 <= p2x <= max_x0 and min_y2 <= y0 <= max_y2:
            return True
        else:
            return False
    elif min_y2 <= y0 <= max_y2:
        v2 = v_diff(p2, p3)
        a = v2[1] / v2[0]
        b = p2[1] - a * p2[0]
        ix = (y0 - b) / a

        if ix < min_x2 or max_x2 < ix:
            return False
        if min_x0 <= ix <= max_x0:
            return True
        else:
            return False
    else:
        return False


def _is_intersect_other(p0, p1, p2, p3):
    min_x0 = min(p0[0], p1[0])
    max_x0 = max(p0[0], p1[0])
    min_y0 = min(p0[1], p1[1])
    max_y0 = max(p0[1], p1[1])
    min_x2 = min(p2[0], p3[0])
    max_x2 = max(p2[0], p3[0])
    min_y2 = min(p2[1], p3[1])
    max_y2 = max(p2[1], p3[1])

    v0 = v_diff(p0, p1)
    a0 = v0[1] / v0[0]
    b0 = p0[1] - a0 * p0[0]

    v2 = v_diff(p2, p3)
    a2 = v2[1] / v2[0]
    b2 = p2[1] - a2 * p2[0]

    if a0 == a2:
        if b0 != b2:
            return False
        elif max_x0 < min_x2 or max_x2 < min_x0:
            return False
        else:
            return True

    ix = (b0 - b2) / (a2 - a0)
    iy = a0 * ix + b0

    if min_x0 <= ix <= max_x0 and min_y0 <= iy <= max_y0 and \
            min_x2 <= ix <= max_x2 and min_y2 <= iy <= max_y2:
        return True
    else:
        return False


def is_intersect(p0, p1, p2, p3):
    if p0[0] == p1[0]:
        if _is_intersect_vertical(p0, p1, p2, p3):
            return True
        else:
            return False
    elif p2[0] == p3[0]:
        if _is_intersect_vertical(p2, p3, p0, p1):
            return True
        else:
            return False
    elif p0[1] == p1[1]:
        if _is_intersect_horizontal(p0, p1, p2, p3):
            return True
        else:
            return False
    elif p2[1] == p3[1]:
        if _is_intersect_horizontal(p2, p3, p0, p1):
            return True
        else:
            return False
    elif _is_intersect_other(p0, p1, p2, p3):
        return True
    else:
        return False


"""v01: normalized"""
def calc_projection_point(p0, v01, p2):
    v0p = v_diff(p0, p2)
    ip = inner_product(v01, v0p)
    projection_p = []
    for i in range(len(v01)):
        projection_p.append(p0[i] + v01[i] * ip)
    return projection_p


"""v0, v1: not normalized"""
def calc_3points_positional_relation(p0, v01, p1, v1, p2):
    if p0[0] == p1[0] == p2[0]:
        if p0[1] <= p2[1] <= p1[1] or p1[1] <= p2[1] <= p0[1]:
            return ON_SEGMENT
        elif p2[1] < p0[1] < p1[1] or p2[1] > p0[1] > p1[1]:
            return ONLINE_BACK
        else:
            return ONLINE_FRONT
    elif p0[1] == p1[1] == p2[1]:
        if p0[0] <= p2[0] <= p1[0] or p1[0] <= p2[0] <= p0[0]:
            return ON_SEGMENT
        elif p2[0] < p0[0] < p1[0] or p2[0] > p0[0] > p1[0]:
            return ONLINE_BACK
        else:
            return ONLINE_FRONT
    else:
        cp = cross_product2d(v01, v1)
        if cp > EPS:
            return COUNTER_CLOCKWISE
        elif cp < -EPS:
            return CLOCKWISE
        else:
            ip = inner_product(v01, v1)
            l0 = calc_length(v01)
            l1 = calc_length(v1)

            if abs(ip) < EPS:
                return ON_SEGMENT
            elif ip > EPS:
                return ONLINE_FRONT
            else:
                if l0 < l1:
                    return ONLINE_BACK
                else:
                    return ON_SEGMENT


def calc_distance(p0, p1, p2, p3):
    if is_intersect(p0, p1, p2, p3):
        return 0
    else:
        dist = math.inf

        v01 = v_diff(p0, p1)
        nv01 = normalize(v01)
        pp2 = calc_projection_point(p0, nv01, p2)
        v1p2 = v_diff(p1, pp2)
        if calc_3points_positional_relation(p0, v01, p1, v1p2, p2) == ON_SEGMENT:
            v2 = v_diff(p2, pp2)
            d = calc_length(v2)
            dist = d

        pp3 = calc_projection_point(p0, nv01, p3)
        v1p3 = v_diff(p1, pp3)
        if calc_3points_positional_relation(p0, v01, p1, v1p3, pp3) == ON_SEGMENT:
            v3 = v_diff(p3, pp3)
            d = calc_length(v3)
            dist = min(dist, d)

        v23 = v_diff(p2, p3)
        nv23 = normalize(v23)
        pp0 = calc_projection_point(p2, nv23, p0)
        v3p0 = v_diff(p3, pp0)
        if calc_3points_positional_relation(p2, v23, p3, v3p0, pp0) == ON_SEGMENT:
            v0 = v_diff(p0, pp0)
            d = calc_length(v0)
            dist = min(dist, d)

        pp1 = calc_projection_point(p2, nv23, p1)
        v3p1 = v_diff(p3, pp1)
        if calc_3points_positional_relation(p2, v23, p3, v3p1, pp1) == ON_SEGMENT:
            v1 = v_diff(p1, pp1)
            d = calc_length(v1)
            dist = min(dist, d)

        v02 = v_diff(p0, p2)
        dist = min(dist, calc_length(v02))

        v03 = v_diff(p0, p3)
        dist = min(dist, calc_length(v03))

        v12 = v_diff(p1, p2)
        dist = min(dist, calc_length(v12))

        v13 = v_diff(p1, p3)
        dist = min(dist, calc_length(v13))
    return dist


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    q = int(f.readline())
    for _ in range(q):
        coord_list = list(map(int, f.readline().split()))
        p0 = (coord_list[0], coord_list[1])
        p1 = (coord_list[2], coord_list[3])
        p2 = (coord_list[4], coord_list[5])
        p3 = (coord_list[6], coord_list[7])

        dist = calc_distance(p0, p1, p2, p3)
        print(f'{dist:.8f}')

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

