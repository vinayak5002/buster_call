// https://qiita.com/DaikiSuyama/items/9dba963ba74396b9b7fd
// https://luling.hatenablog.com/entry/2018/12/01/212805
// https://zenn.dev/antyuntyun/articles/atcoder-cpp-template
//
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

// rep macro
#define reps(i, a, n) for (ll i = (a); i < (ll)(n); ++i)
#define rreps(i, a, n) for (ll i = (a); i > (ll)(n); --i)
#define rep(i, n) reps(i, 0, n)
#define rrep(i, n) reps(i, 1, n + 1)
#define repd(i,n) for(ll i=n-1;i>=0;i--)
#define rrepd(i,n) for(ll i=n;i>=1;i--)

#define optimize_cin() cin.tie(0); ios::sync_with_stdio(false)

#define pb push_back
#define mp make_pair
#define all(obj) (obj).begin(), (obj).end()
#define YESNO(bool) if(bool){cout<<"YES"<<endl;}else{cout<<"NO"<<endl;}
#define yesno(bool) if(bool){cout<<"yes"<<endl;}else{cout<<"no"<<endl;}
#define YesNo(bool) if(bool){cout<<"Yes"<<endl;}else{cout<<"No"<<endl;}

//定数
#define INF32 2147483647           // 2.147483647 x 10^{9}:32bit整数のinf
#define INF64 9223372036854775807  // 9.22337203685477580 x 10^{18}:64bit整数のinf
#define MOD 1000000007             //問題による
#define PI 3.14159265359           // 円周率

//略記
#define F first
#define S second

//出力(空白区切りで昇順に)
#define dump(x)                                                 \
  for (auto i = x.begin(); i != --x.end(); i++) cout << *i << " "; \
  cout << *--x.end() << endl;

#define echo(x) cout << (x) << endl;

#define dumpArray(ms, row, col) \
  for (auto i = 0; i < row; i++) { \
    for (auto j = 0; j < col; j++) { \
      if (j != 0) cout << " "; \
      cout << ms[i][j]; \
    } \
    cout << endl; \
  }

// aをbで割る時の繰上げ,繰り下げ
ll _ceil(ll a, ll b) { return (a + (b - 1)) / b; }
ll _floor(ll a, ll b) { return a / b; }

// 大きい方、小さい方を残す
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }

// 参考 ://qiita.com/ikamirin/items/5ddbe04cb4d4ce6ed6af 
//

// 行列をABCDEとした場合のDPの中身
// 以下のように連鎖行列積の値が入っている
//   dp[1][2] はA(=1)からB(=2)までの値
//   dp[1][3] はA(=1)からC(=3)までの値となる
// ここでABCの積を計算する際に(AB)C, A(BC)の2種類がある
//   dp[1][3] = min((AB)C, A(BC))
//     A(BC) = dp[1][1](= A) + dp[2][3](= BC) x ms[0] x ms[2] x ms[3]
//     (AB)C = dp[1][2](= AB) + dp[3][3](= C) x ms[0] x ms[1] x ms[3]
// こんな感じで進めていく、ABCDとなると、A(BCD), (AB)(CD), A(BCD)となり考慮するパターンが増えていく
// |0|1|2 |3  |4   |5    |6|
// |-|-|--|---|----|-----|-|
// |0| |  |   |    |     | |
// |1| |AB|ABC|ABCD|ABCDE| |
// |2| |  |BC |BCD |BCDE | |
// |3| |  |   |CD  |CDE  | |
// |4| |  |   |    |DE   | |
// |5| |  |   |    |     | |
// |6| |  |   |    |     | |

#define MAX 100
int dp[MAX][MAX]; // DP[開始位置][終了位置]

signed main() {
  memset(dp, 0, sizeof(dp));
  int n;
  cin >> n;
  vector<int> ms(n + 1);
  rep(i, n) {
    int row, column;
    cin >> row;
    cin >> column;
    ms[i] = row;
    if (i == n - 1) {
      ms[i + 1] = column;
    }
  }
  ///
  reps(length, 2, n + 1) {
    reps(i, 1, n - length + 2) {
      int j = i + length - 1;
      dp[i][j] = 1000000;
      reps(k, i, j) {
        int tmp = dp[i][k] + dp[k + 1][j] + ms[i - 1] * ms[k] * ms[j];
        dp[i][j] = min(dp[i][j], tmp);
      }
    }
  }
  echo(dp[1][n]);
  //dumpArray(dp, n+1, n+1);
}

