from curses.ascii import NUL


class segmentT:
    def __init__(self,n_):
        self.n = 1
        self.inf = 2**31 - 1
        while self.n<n_:
            self.n *= 2
        self.D = [self.inf] * (2*self.n-1)
        self.lazy = [self.inf] * (2*self.n-1)
        


    def lazy_evaluate(self,k):
        if self.lazy[k] == NUL:
            return
        self.D[k] = self.lazy[k]

        if k<n-1:
            self.lazy[2*k+1] = self.lazy[k]
            self.lazy[2*k+2] = self.lazy[k]
        self.lazy[k] = NUL

    def update(self,a,b,x,k,l,r):
        self.lazy_evaluate(k)
        if a <= l and r<= b:
            self.lazy[k] = x
            self.lazy_evaluate(k)
        elif a < r and l < b:
            self.update(a,b,x,k*2+1,l,(l+r)/2)
            self.update(a,b,x,k*2+2,(l+r)/2,r)
            self.D[k] = min(self.D[k*2+1],self.D[k*2+2])

        

    
    def query(self,a,b,k,l,r):
        self.lazy_evaluate(k)
        if r<= a or b <= l:
            return self.inf
        if a <= l and r<= b:
            return self.D[k]
        
        vl = self.query(a,b,k*2+1,l,(l+r)/2)
        vr = self.query(a,b, k*2+2,(l+r)/2,r)

        return min(vl,vr)



    def findmin(self,a,b):
        return self.query(a,b+1,0,0,self.n)
    def RUQ(self,s,t,x):
        return self.update(s,t+1,x,0,0,self.n)


        


n,q = map(int,input().split())
seg = segmentT(n)

for _ in range(q):
    com = input()

    if com[0] == "0":
        _,s,t,x = map(int,com.split())
        seg.RUQ(s,t,x)
        

    elif com[0] == "1":
        _,i = map(int,com.split())
        print(seg.findmin(i,i))



