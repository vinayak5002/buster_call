using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _20220424_AOJ
{
    internal class ITP2_7C
    {
        static int ReadInt() { return int.Parse(Console.ReadLine()); }
        static double ReadDouble() { return double.Parse(Console.ReadLine()); }
        static int[] ReadIntArr(char dlm = ' ') { return Console.ReadLine().Split(dlm).Select(x => int.Parse(x)).ToArray(); }
        static double[] ReadDoubleArr(char dlm = ' ') { return Console.ReadLine().Split(dlm).Select(x => double.Parse(x)).ToArray(); }
        static string[] ReadStringArr(char dlm = ' ') { return Console.ReadLine().Split(dlm).ToArray(); }

        static void Main(string[] args)
        {
            string line = Console.ReadLine();
            int q = int.Parse(line);
            HashSet<int> S = new HashSet<int>();
            
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < q; i++)
            {
                int[] query = ReadIntArr();
                int command = query[0]; ;
                int x = query[1];
                if (command == 0)
                {
                    S.Add(x);
                    sb.AppendLine(S.Count.ToString());
                }
                else if(command == 1)
                {
                    int exists = S.Contains(x) ? 1 : 0;
                    sb.AppendLine(exists.ToString());
                }
                else if (command == 2)
                {
                    S.Remove(x);
                }
                else
                {
                    int L = x;
                    int R = query[2];
                    List<int> vs = new List<int>();
                    foreach(var v in S)
                    {
                        if (v >= L && v <= R)
                        {
                            vs.Add(v);
                        }
                    }
                    vs.Sort();
                    foreach (int v in vs)
                    {
                        sb.AppendLine(v.ToString());
                    }
                }
            }
            Console.Write(sb);
        }
    }
}

