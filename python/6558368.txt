// https://qiita.com/DaikiSuyama/items/9dba963ba74396b9b7fd
// https://luling.hatenablog.com/entry/2018/12/01/212805
// https://zenn.dev/antyuntyun/articles/atcoder-cpp-template
//
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

// rep macro
#define reps(i, a, n) for (ll i = (a); i < (ll)(n); ++i)
#define rep(i, n) reps(i, 0, n)
#define rrep(i, n) reps(i, 1, n + 1)
#define repd(i,n) for(ll i=n-1;i>=0;i--)
#define rrepd(i,n) for(ll i=n;i>=1;i--)

#define optimize_cin() cin.tie(0); ios::sync_with_stdio(false)

#define pb push_back
#define mp make_pair
#define all(obj) (obj).begin(), (obj).end()
#define YESNO(bool) if(bool){cout<<"YES"<<endl;}else{cout<<"NO"<<endl;}
#define yesno(bool) if(bool){cout<<"yes"<<endl;}else{cout<<"no"<<endl;}
#define YesNo(bool) if(bool){cout<<"Yes"<<endl;}else{cout<<"No"<<endl;}

//定数
#define INF32 2147483647           // 2.147483647 x 10^{9}:32bit整数のinf
#define INF64 9223372036854775807  // 9.22337203685477580 x 10^{18}:64bit整数のinf
#define MOD 1000000007             //問題による
#define PI 3.14159265359           // 円周率

//略記
#define F first
#define S second

//出力(空白区切りで昇順に)
#define dump(x)                                                 \
  for (auto i = x.begin(); i != --x.end(); i++) cout << *i << " "; \
  cout << *--x.end() << endl;
#define echo(x) cout << (x) << endl;

// aをbで割る時の繰上げ,繰り下げ
ll _ceil(ll a, ll b) { return (a + (b - 1)) / b; }
ll _floor(ll a, ll b) { return a / b; }

// 大きい方、小さい方を残す
template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }

/* https://algo-logic.info/binary-indexed-tree/
 * BIT: 区間和の更新や計算を行う構造体
 *
 * 初期値は a_1 = a_2 = ... = a_n = 0
 * ・add(i,x): a_i += x とする
 * ・sum(i): a_1 + a_2 + ... + a_i を計算する
 * 計算量は全て O(logn)
 */
template <typename T>
struct BIT {
  int n;          // 配列の要素数(数列の要素数+1)
  vector<T> bit;  // データの格納先
  BIT(int n_) : n(n_ + 1), bit(n, 0) {}

  // 1-indexed
  void add(int i, T x) {
    // i = 2 の場合 2, 4, 8, 16...を更新していく
    // x & -x は最下位ビットを求める(2 => 2, 3 => 1, 4 => 4, 5 => 1)
    for (int idx = i; idx < n; idx += (idx & -idx)) {
      bit[idx] += x;
    }
  }

  T sum(int i) {
    T s(0);
    for (int idx = i; idx > 0; idx -= (idx & -idx)) {
      s += bit[idx];
    }
    return s;
  }

  // 0-indexed
  void add0(int i, T x) {
    return add(i + 1, x);
  }

  T sum0(int i) {
    return sum(i + 1);
  }
};

vector<int> calcAfterSortIndexes(vector<int> xs) {
  int n = xs.size();
  vector<pair<int, int>> withIndexes(n);
  rep(i, n) withIndexes[i] = mp(xs[i], i);
  sort(all(withIndexes));
  vector<int> res(n);
  rep(i, n) res[withIndexes[i].S] = i;
  return res;
}

int solve(vector<int> &as) {
  //
  int n = as.size();
  int count = 0;
  vector<int> indexes = calcAfterSortIndexes(as);
  BIT<int> bits(n);
  rep(i, n) {
    count += i - bits.sum0(indexes[i]);
    bits.add0(indexes[i], 1);
  }
  return count;
}

signed main() {
  // Read Parameters
  int n;
  cin >> n;
  vector<int> as(n);
  rep(i, n) cin >> as[i];
  // Solve
  echo(solve(as));
}

