import heapq
from collections import defaultdict


def dijkstra(num_of_vertex, start_vertex, graph):
    D = [float('INF') for _ in range(num_of_vertex + 1)]
    D[start_vertex] = 0
    visited = [0] * (num_of_vertex + 1)
    min_heap = []
    heapq.heappush(min_heap, (0, start_vertex))

    while min_heap:
        (dist, current_vertex) = heapq.heappop(min_heap)
        visited[current_vertex] = 1
        for neighbor, distance in graph[current_vertex]:
            if visited[neighbor] == 0:
                old_cost = D[neighbor]
                new_cost = D[current_vertex] + distance
                if new_cost < old_cost:
                    heapq.heappush(min_heap, (new_cost, neighbor))
                    D[neighbor] = new_cost
    return D


def to_str(e):
    if e == float('INF'):
        return 'INF'
    else:
        return str(e)


n, m, s = list(map(int, input().split()))
graph = defaultdict(list)
for _ in range(m):
    u, v, w = list(map(int, input().split()))
    graph[u].append((v, w))
    # graph[v].append((u, w))

D = dijkstra(n, s, graph)
print(" ".join(map(to_str, D[:-1])))
