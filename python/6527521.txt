import java.util.*;
import java.util.stream.IntStream;

public class Main {
    static Scanner sc = new Scanner(System.in);
    public static void main(String[] args) {
        int n = getInt();
        int[] W = new int[n];
        Arrays.setAll(W, num -> getInt());
        System.out.println(calcCost(W));
    }
    static int getInt() {
        return Integer.parseInt(sc.next());
    }
    static int calcCost(int[] W) {
        int res = 0;
        int min = Arrays.stream(W).min().getAsInt();
        int[] ranks = new int[Arrays.stream(W).max().getAsInt() + 1];
        Arrays.fill(ranks, -1);
        for (int w : W) {
            ranks[w] = 0;
        }
        int r = 0;
        for (int i = 0; i < ranks.length; i++) {
            if (ranks[i] == 0) ranks[i] = r++;
        }
        List<List<Integer>> grps = makeGrps(W, ranks);

        for (List<Integer> grp : grps) {
            if (grp.size() == 1) {
                continue;
            }
            int gmin = grp.stream().mapToInt(Integer::intValue).min().getAsInt();
            res += grp.stream().mapToInt(Integer::intValue).sum() + Math.min((grp.size()-2) * gmin, gmin + (grp.size() + 1) * min);
        }

        return res;
    }
    static List<List<Integer>> makeGrps(int[] W, int[] ranks) {
        List<List<Integer>> res = new ArrayList<>();
        boolean[] flgs = new boolean[W.length];
        for (int i = 0; i < W.length; i++) {
            List<Integer> grp = new ArrayList<>();
            int ci = i;
            while (!flgs[ci]) {
                grp.add(W[ci]);
                flgs[ci] = true;
                ci = ranks[W[ci]];
            }
            if (!grp.isEmpty()) {
                res.add(grp);
            }
        }
        return res;
    }
}

