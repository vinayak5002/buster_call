def serch_island(l,w,h):
    #l上の陸地を見つけてdfsして海に変える、を繰り返して全部海にする。
    ans=0
    for _ in range(2500):
        if depth_serch(l,w,h):
            return ans
        ans+=1

def get_near(l,cp,v_l):
    near_l=[]
    for i in range(-1,2):
        for j in range(-1,2):
            if l[cp[0]+i][cp[1]+j]==1:
                if (cp[0]+i,cp[1]+j) not in v_l:
                    return (cp[0]+i,cp[1]+j)
    return None
                
def depth_serch(l,w,h):
    #lの陸地cpを探す、無いならtrue
    #地図lのcpと繋がってる陸を全て海に変える。
    for ww in range(w):
        for hh in range(h):
            if l[hh+1][ww+1]:
                v_l=[]
                stack=[(hh+1,ww+1)]
                while stack:
                    cp=stack.pop()
                    if cp not in v_l:
                        v_l.append(cp)
                    next=get_near(l,cp,v_l)
                    if next:
                        stack.append(cp)
                        stack.append(next)
                        continue
                    l[cp[0]][cp[1]]=0
                return None
    return 1#終わり

def main():
    import sys
    readline=sys.stdin.readline
    for _ in range(1000):
        w,h=map(int,readline().split())
        if w==0 and h==0:
            break
        l=[[0]*(w+2)]
        for _ in range(h):
            l.append([0]+list(map(int,readline().split()))+[0])
        l.append([0]*(w+2))
        print(serch_island(l,w,h))
if __name__=="__main__":
    main()
