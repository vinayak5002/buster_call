/// 入力を取得するマクロ
/// https://qiita.com/tanakh/items/0ba42c7ca36cd29d0ac8
macro_rules! input {
    (source = $s:expr, $($r:tt)*) => {
        let mut iter = $s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
    ($($r:tt)*) => {
        let s = stdin!();
        let mut iter = s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
}

macro_rules! input_inner {
    ($iter:expr) => {};
    ($iter:expr, ) => {};

    ($iter:expr, $var:ident : $t:tt $($r:tt)*) => {
        let $var = read_value!($iter, $t);
        input_inner!{$iter $($r)*}
};
}

macro_rules! read_value {
    ($iter:expr, ( $($t:tt),* )) => {
        ( $(read_value!($iter, $t)),* )
    };

    ($iter:expr, [ $t:tt ; $len:expr ]) => {
        (0..$len).map(|_| read_value!($iter, $t)).collect::<Vec<_>>()
    };

    ($iter:expr, chars) => {
        read_value!($iter, String).chars().collect::<Vec<char>>()
    };

    ($iter:expr, usize1) => {
        read_value!($iter, usize) - 1
    };

    ($iter:expr, $t:ty) => {
        $iter.next().unwrap().parse::<$t>().expect("Parse error")
    };
}

macro_rules! stdin {
    () => {{
        use std::io::Read;
        let mut s = String::new();
        std::io::stdin().read_to_string(&mut s).unwrap();
        s
    }};
}

macro_rules! stdout {
    ($out:expr) => {{
        use std::io::Write;
        let out = std::io::stdout();
        let mut out = std::io::BufWriter::new(out.lock());
        writeln!(out, "{}", $out).unwrap();
    }};
}

macro_rules! join {
    ($input:expr) => {
        join!($input, " ")
    };

    ($input:expr, $separator:expr) => {
        $input
            .iter()
            .map(|a| a.to_string())
            .collect::<Vec<String>>()
            .join($separator)
    };
} #[allow(dead_code)]
fn main() {
    stdout!(solve(&stdin!()))
}

fn solve(src: &str) -> String {
    input! {
        source = src,
        n: i64,
    };


    let points = koch_curve(Point(0.0, 0.0), Point(100.0, 0.0), n);
    let mut result = vec![Point(0.0, 0.0)];
    result.extend(points);
    result.push(Point(100.0, 0.0));

    result
        .iter()
        .map(|p| format!("{} {}", p.x(), p.y()))
        .collect::<Vec<_>>()
        .join("\n")
}

#[derive(Debug, Clone, Copy)]
struct Point(f64, f64);
impl Point {
    fn x(&self) -> f64 { self.0 }
    fn y(&self) -> f64 { self.1 }
}

fn koch_curve(p1: Point, p2: Point, depth: i64) -> Vec<Point> {
    if depth == 0 {
        return vec![p1, p2];
    }

    let cos60: f64 = 60.0_f64.to_radians().cos();
    let sin60: f64 = 60.0_f64.to_radians().sin();

    let s = Point((p1.x() * 2.0 + p2.x()) / 3.0, (p1.y() * 2.0 + p2.y()) / 3.0);
    let t = Point((p1.x() + p2.x() * 2.0) / 3.0, (p1.y() + p2.y() * 2.0) / 3.0);
    // s->tを60度回転させた座標がuになる
    let st = Point(t.x() - s.x(), t.y() - s.y());
    let su = Point(st.x() * cos60 - st.y() * sin60, st.x() * sin60 + st.y() * cos60);
    let u = Point(s.x() + su.x(), s.y() + su.y());
    let next_depth = depth - 1;
    let mut points_1 = koch_curve(p1, s, next_depth);
    points_1.remove(0);
    // println!("{:?} :: {:?}", depth, s);
    let mut points_2 = koch_curve(s, u, next_depth);
    points_2.remove(0);
    // println!("{:?} :: {:?}", depth, u);
    let mut points_3 = koch_curve(u, t, next_depth);
    points_3.remove(0);
    // println!("{:?} :: {:?}", depth, t);
    let mut points_4 = koch_curve(t, p2, next_depth);
    points_4.remove(0);

    points_1.extend(points_2);
    points_1.extend(points_3);
    points_1.extend(points_4);
    points_1
}

