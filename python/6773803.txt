from math import cos,sin,tan,acos,asin,atan2,pi

class Pt:
    def __init__(self,pt):
        self.pt = pt
    
    def __getitem__(self,k):
        return self.pt[k]
    
    def __add__(self,other):
        x,y = self.pt
        u,v = other.pt
        return self.__class__((x+u,y+v))
    
    def __sub__(self,other):
        x,y = self.pt
        u,v = other.pt
        return self.__class__((x-u,y-v))
    
    def __mul__(self,other):
        x,y = self.pt
        if type(other) == float:
            return self.__class__((x*other,y*other))
        u,v = other.pt
        return self.__class__((x*u-y*v,x*v+y*u))
    
    def __rmul__(self,other):
        x,y = self.pt
        if type(other) == float:
            return self.__class__((x*other,y*other))
        u,v = other.pt
        return self.__class__((x*u-y*v,x*v+y*u))
    
    def __div__(self,other):
        x,y = self.pt
        return self.__class__((x/other,y/other))

    
    def dot(self,pt):
        x,y = self.pt
        u,v = pt.pt
        return x*u+y*v
        
    def det(self,pt):
        x,y = self.pt
        u,v = pt.pt
        return x*v-y*u
    
    def abs(self):
        x,y = self.pt
        return (x*x+y*y)**.5
    
    def rotate(self,theta):
        x,y = self.pt
        return self.__class__((x*cos(theta)-y*sin(theta),x*sin(theta)+y*cos(theta)))
    
    def unit(self):
        x,y = self.pt
        d = (x*x+y*y)**.5
        return self.__class__((x/d,y/d))
    
    def __str__(self):
        x,y = self.pt
        return "({}, {})".format(x,y)


eps = 10**-9

def sgn(a):
    if a < -eps:
        return -1
    if eps < a:
        return 1
    return 0

def dot(pt0,pt1):
    x,y = pt0; u,v = pt1
    return x*u+y*v

def det(pt0,pt1):
    x,y = pt0; u,v = pt1
    return x*v-y*u

def iSP(a,b,c):
    """
    点の進行方向を返す
    左に曲がる場合：1
    右に曲がる場合：-1
    まっすぐでa-b-cの場合：0
    まっすぐでa-c-bの場合：2
    まっすぐでc-a-bの場合：-2
    """
    t = (b-a).det(c-a)

    if sgn(t) == 1:
        return 1
    elif sgn(t) == -1:
        return -1
    else:
        if sgn((b-a).dot(c-a)) == -1:
            return -2

        if sgn((a-b).dot(c-b)) == -1:
            return 2
        
        return 0

def intersection_line(a,b,c,d):
    if sgn((b-a).det(c-d)):
        return True
    return False

def intersection_ls(a,b,c,d):
    return iSP(a,b,c)*iSP(a,b,d) <= 0 and iSP(c,d,a)*iSP(c,d,b) <= 0
    
def crosspt_line(a,b,c,d):
    return a + (b-a)*(((c-a).det(d-c)) / ((b-a).det(d-c)))

def dist_line_pt(a,b,c):
    return abs((c-a).det(b-a)/(b-a).abs())

def dist_linesegment_pt(a,b,c):
    if sgn((b-a).dot(c-a)) == -1:
        return (c-a).abs()
    if sgn((a-b).dot(c-b)) == -1:
        return (c-b).abs()
    return dist_line_pt(a,b,c)


px,py,qx,qy = map(float,input().split())
p,q = Pt((px,py)),Pt((qx,qy))
h = (q-p).rotate(pi/2)

for _ in range(int(input())):
    x,y = map(float,input().split())
    x = Pt((x,y))
    y = x + h
    
    res = crosspt_line(p,q,x,y)
    a,b = res
    if abs(a) < eps:
        a = 0
    if abs(b) < eps:
        b = 0
    print(a,b)




