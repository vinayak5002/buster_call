//https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_5_A&lang=en

#pragma GCC optimize("Ofast")
#pragma GCC optimization ("unroll-loops")
//#pragma GCC/ target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx2,tune=native") // Auto-Vectorisation
#include<iostream>
#include<math.h>
#include<algorithm>
#include<stdint.h>
#include<vector>
#include<deque>
#include<stack>
#include<functional>
#include<string>
#include<cstring>
#include<array>
#include<fstream>
#include<iomanip>
#include<list>
#include<set>
#include<map>
#include<unordered_map>
#include<unordered_set>
#include<bitset>
#include<queue>
//
using namespace std;
// 
using ll = long long;
using ld = long double;
using db = double; 
using str = string; 
using pi = pair<int,int>;
using pl = pair<ll,ll>;
using pd = pair<db,db>;
using vi = vector<int>;
using vvi = vector<vector<int>>;
using vb = vector<bool>;
using vl = vector<ll>;
using vd = vector<db>; 
using vs = vector<str>;
using vpi = vector<pi>;
using vpl = vector<pl>; 
using vpd = vector<pd>;
// loops
#define FOR(i,a,b) for (int i = (a); i < (b); ++i)
#define F0R(i,a) FOR(i,0,a)
#define ROF(i,a,b) for (int i = (a); i > (b); --i)
#define R0F(i,a) ROF(i,a,0)
#define trav(a,x) for (auto& a: x)
//pri
#define PRI(s) cout << s << endl
#define PRIS(s) cout << s << " "
// vectors
#define sz(x) (int)(x).size()
#define all(x) begin(x), end(x)
#define rall(x) (x).rbegin(), (x).rend() 
#define sor(x) sort(all(x)) 
#define rsz resize
#define ins insert 
#define ft front() 
#define bk back()
#define pf push_front 
#define pb push_back
#define eb emplace_back 
#define lb lower_bound 
#define ub upper_bound 
//math
#define gcd(a,b)	__gcd(a,b)
#define lcm(a,b)	__detail::__lcm(a,b)
template<class T> bool ckmin(T&a, T&b) { bool B = a > b; a = min(a,b); return B; }
template<class T> bool ckmax(T&a, T&b) { bool B = a < b; a = max(a,b); return B; }
//const
const int MOD = 998244353;
const int MX = 3e5+5;
const ll INF = 1e18; // not too close to LLONG_MAX
const ld PI = acos((ld)-1);
const int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1}; // for every grid problem!!

int cal(int x,  int n)
{
    if( n == 0)
        return 1;
    if (n % 2 == 0)
     return cal( x,n/2)*cal( x, n/2);
    else
     return x * cal( x, n/2)*cal( x, n/2);
}
//
long long ncr(long long n,long long r){
if(r==0 || n==r) {
    return 1;
}
return ncr(n-1,r)+ncr(n-1,r-1);
}
bool isPrime(int n){
    if(n%2==0){
        return false;
    }
    for(int i=3;i*i<=n;i+=2){
        if(n%i==0){
            return false;
        }
    }
    return true;
}
ll getDSum(ll x){
    ll sm=0;
    while(x>0) {
     sm+=x%10;
     x/=10;
    }
    return sm;
}

void bitwiseSubset(int n){
for(int i=0;i < (1<<n); i++ ){//2^n number

for(int j=0;j<n;j++){//n pos  of i ppe check ke liye
if(i && (1<<j))  {///100 010 001 etc for n=3(i<<j) 

    }
   }
 }
 
 }


/*
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠑⡔⠈⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠰⡏⠉⠢⣀⠸⡎⠉⣦⠤⠤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣦⣄⠀⠀⠀⠀⠀⠈⠢⢄⠈⠣⠽⠀⣸⣠⡤⡏⠀⣳⠀⠀⠀⠘⠢⡙⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠑⡄⠀⢪⠞⢫⠁⡷⠖⣟⣇⠀⠀⠀⠀⠱⡌⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⢸⠚⢁⣠⡾⢖⡗⠚⠋⢹⡄⠀⠀⠀⠀⠇⠘⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⣶⣶⣾⣿⣿⣷⣶⣦⣄⡀⠀⠀⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⢠⠀⠈⢦⠉⠹⠀⠈⠇⠀⠀⠘⣷⣆⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣹⣿⣿⣿⣿⣿⣿⡀⠀⣇⠘⡄⠀⠈⠳⣄⣀⠀⠀⢠⣄⣴⣿⣿⣷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠘⢆⠈⠂⠀⠀⠀⠀⢱⣴⣾⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢺⣇⣴⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣄⠑⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⡿⠃⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠈⣿⠋⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⡿⠋⠑⢄⠀⠀⠈⠣⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠸⠇⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⡿⢛⣭⣾⣼⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠉⢻⠀⠀⠀⠈⢧⠀⠀⠀⢹⡄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣄⣿⡿⠁⠠⢫⢏⣈⣿⡿⢹⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⠀⠘⣇⠀⠀⠀⠘⢇⠀⠀⠀⡿⣄⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠶⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠈⡡⢬⠻⠁⠀⠀⠈⠁⢸⢿⠁⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠉⠀⠀⢈⣲⣄⡀⠀⠈⠀⠀⢸⡄⠘⢆⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⢿⣿⣿⣿⣿⣿⣿⣰⠁⠀⣤⠀⠀⣶⠀⠀⠀⢈⡆⢠⡿⣿⡿⡿⣿⣿⣿⣿⣭⣤⣀⣀⢀⡴⠛⠉⠀⠀⢨⠁⠀⠀⠀⠀⠁⣠⡞⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⢿⣿⣿⣿⢸⠀⠀⠉⠀⠀⠀⠀⣤⡶⠾⠓⠋⣼⡿⠱⣿⢸⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⣠⠞⠉⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠘⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣶⣾⣿⣿⣿⣸⠶⠴⣮⡅⠀⢀⡤⢦⠀⠀⠀⠘⠁⢀⡼⣣⣿⡿⠟⠉⡼⠋⡿⠀⠀⠀⠀⠀⠀⣠⠏⠀⠀⠀⣰⠃⠀⠀⢀⡄⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⢻⡇⠀⠀⢠⠖⠒⡡⠔⢺⠀⠀⠀⠀⢠⠯⣾⣿⣿⠀⠀⡸⠀⠀⡇⠀⠀⠀⠀⠀⡴⠃⢠⡆⠀⣰⠃⠀⠀⢀⣿⣧⣤⣤⣤⣀
⠀⠀⠀⠀⠀⠀⠀⠈⠁⢸⣾⡇⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⡀⠀⠘⢭⡤⠤⠖⠋⠀⠀⠀⡀⠋⢀⡜⡉⡇⠀⠀⠁⠀⠀⡇⠀⠀⠀⣠⡞⠁⠀⢸⣥⠞⠁⠀⠀⠀⣾⡿⠉⢉⣽⣿⠟
⠀⠀⢀⡀⠀⠀⠀⠀⠀⠘⠇⢱⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢤⡀⠀⠀⠀⢀⣠⣴⣿⠀⣠⢎⠜⡇⡇⠀⠀⡀⠀⡼⠁⠤⠶⠛⠉⠀⠀⢀⡞⠀⠀⠀⠀⠀⠀⠈⠀⣠⣿⠟⠁⠀
⠀⠀⠀⠀⠑⡀⠀⠀⠀⠀⠀⣼⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡓⠒⢾⣿⢟⡟⠁⡴⢣⠎⠀⡇⡇⠀⠀⠃⣰⠃⠀⠀⠀⢀⣠⡴⠖⠋⠀⠀⠀⠀⠀⠀⠀⢀⣾⠟⠁⠀⠀⠀
⠀⠀⠀⠀⠀⢣⠀⠀⡀⠀⠀⠙⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⡇⠀⠈⣴⣫⢴⡞⣱⠃⠀⠀⢸⡇⠀⠀⢸⠃⠀⢀⡠⠞⡏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠉⠁⠀⠡⠠⢄⠀⠀⠀⠀⠀⢀⣀⣀⣤⡤⠤⠤⢴⣾⣷⣿⣽⠇⠁⣠⠾⠋⣠⠏⡔⣁⣴⡆⠀⢸⠇⢸⠀⢸⠀⠐⠉⠀⡼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢱⠀⠀⢰⠟⠋⠉⠀⠀⠀⢠⠶⣿⣾⣿⣿⡯⠤⠞⠁⢀⡼⢡⣾⣿⡽⠟⣿⠀⠸⠀⢸⠀⢸⡀⠀⠀⢠⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⠃⠀⠀⢀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⠀⢀⣾⡀⠀⢀⠀⠀⠀⡏⠀⣏⠋⠁⠀⢀⠀⠀⢠⠏⢠⠋⣿⣿⠀⣠⡿⠀⠀⠀⣿⠀⠈⡇⠀⣠⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠃⠀⠀⢠⠏⢳⡀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⢁⡏⠘⡇⠀⣸⡄⠀⠀⢱⠀⢸⠀⠀⠀⡜⠀⡰⠃⢠⠃⠀⠻⠟⠛⠋⠁⠀⠀⠀⢸⠀⠀⢳⣾⣿⡼⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⢃⡀⣀⠀⡇⠀⠀⢸⠀⢀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡎⠀⢸⠁⠀⣇⠀⢹⡇⠀⠀⠈⡇⠀⢧⠀⢀⠇⡼⠁⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠸⣯⠇⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡾⣿⠟⠀⣿⢐⡗⣾⢀⠃
⠁⣹⡇⠀⠀⠀⠀⠀⠀⡔⠉⠀⠀⢸⠀⢀⣹⠀⢸⡇⠀⠀⠀⠹⡀⠘⡆⢸⡞⠁⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠀⠀⠀⣩⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣥⣿⠟⢱⣿⢸⡇⣿⠉⠀
⠉⠛⠓⠮⠭⢭⠉⢀⣀⣀⠀⢀⣴⡿⠋⠉⠉⡆⢸⡇⠀⠀⠀⠀⢣⠀⢘⡞⠀⢠⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⠡⠒⠂⠐⠢⡀⡠⠒⠐⠒⠄⠐⠛⠉⠀⠀⢸⣽⠘⡇⣿⠀⢀
⠉⠉⠒⢻⣷⠄⠀⠠⠤⢄⢰⢯⠞⠀⠀⠀⠀⢣⣸⠀⠀⠀⠀⠀⠘⣆⡞⠀⢀⠃⠀⠀⠀⠀⠀⣀⠄⠀⠀⠀⠀⠀⠀⠠⢾⡿⢋⠀⠀⠀⠀⠀⠈⣁⣀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣶⢠⡇⣿⡆⠁
⠉⠁⠲⢺⣿⢒⣦⠴⠤⢀⣿⡏⠀⠀⠀⠀⠀⣸⡇⠀⠀⠀⠀⠀⠀⡜⠀⠀⠊⠀⠀⠀⢀⡴⠊⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⡇⠁⠀⠀⠀⠀⠀⠀⠀⠈⢃⠀⢀⠀⠀⠀⠀⠀⢸⣿⠨⡅⣿⡇⠀
⠒⠒⠒⢺⠛⢺⣿⡥⠄⣼⢹⣀⣀⣠⣤⣀⣰⣿⠁⠀⠀⠀⠀⠀⡸⠀⠀⡄⠀⠀⣠⠔⠉⠀⠀⠀⠀⠀⠀⠀⢀⠔⠋⠀⠀⡇⢀⣀⡀⠀⠈⢹⢦⠀⠀⠀⢀⣀⡈⠒⡦⠤⠀⢸⡙⢰⡇⣿⡇⠀
⠀⠀⠀⢸⣄⣈⣋⡀⡼⠓⠉⠁⠀⠀⠀⠈⠙⢷⡀⠐⡄⠀⠀⢰⠃⠀⡜⠀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢁⣠⠄⢀⡠⠇⠀⠆⠤⠭⣍⣙⣛⣶⣤⠤⠤⠤⢈⣉⣉⠉⠉⢹⣛⢰⡧⣿⡇⠀
⠀⠀⠀⠀⠀⢸⠟⠀⡇⠀⢹⡄⣠⣴⣶⣶⣤⣼⠷⡀⠘⣆⢀⠇⠀⢰⡧⠚⠁⠀⠀⠀⠀⠀⠀⠀⠀⣠⡴⠚⠉⣠⣶⠫⣀⣉⣑⠆⠐⠒⠿⣿⣿⠽⠿⣉⣀⡒⠒⠒⠂⠭⠭⡗⠿⢸⡗⢻⣇⣒
⠀⠀⠀⠀⠀⠈⠀⣰⢷⡄⢈⣿⣿⣿⣿⣿⣿⣇⠀⣙⣤⣬⣿⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣶⣯⠕⠫⠤⠤⣀⣀⣈⣉⣉⣉⡉⠉⠒⠒⠒⠠⠬⠥⣬⣁⣍⣀⡇⠿⠘⡇⠸⣧⠤
⠀⠀⠀⠀⠀⠀⠀⠻⢜⠁⣼⣿⣿⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠐⠒⠀⠤⠶⠤⠤⠤⠤⠀⣈⣉⣉⣉⠓⠒⠒⠒⣿⣿⡶⠄⡇⠀⢀⡆⢠⣿⠭


*/

int main() {
cin.tie(nullptr);
ios::sync_with_stdio(false); 
int n,m;
cin>>n;
vector<int> lis(n);
F0R(i,n){
    cin>>lis[i];
}
cin>>m;
int x;
map<int,bool> ispos;
vector<int> lis22;
F0R(i,m) {
    cin>>x;
    lis22.push_back(x);
    ispos[x]=false;
}


for(int i=0;i < (1<<n); i++ ) {//2^n number
int sm=0;
for(int j=0;j<n;j++) {//n pos  of i ppe check ke liye
if(i & (1<<j))  {///100 010 001 etc for n=3(i<<j) 
sm+=lis[j];
    }
}
if(ispos[sm]==false){
ispos[sm]=true;   
     }
 }
 
for(int i=0;i < m; i++ ){
    if(ispos[lis22[i]]){
cout<<"yes\n";
        }
else cout<<"no\n";
}
return 0;
}


