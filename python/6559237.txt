import java.util.Arrays;
import java.util.List;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            int w = sc.nextInt(), h = sc.nextInt();
            if (h == 0 && w == 0)
                break;
            List<List<Integer>> cantmove = new ArrayList<>();
            for (int i = 0; i < h * w; ++i)
                cantmove.add(new ArrayList<>());
            for (int i = 0; i < 2 * h - 1; ++i) {
                if (i % 2 == 0) {
                    for (int x = 0; x < w - 1; ++x) {
                        int in = sc.nextInt();
                        if (in == 1) {
                            int pos = (i / 2) * w + x;
                            cantmove.get(pos).add(pos + 1);
                            cantmove.get(pos + 1).add(pos);
                        }
                    }
                } else {
                    for (int x = 0; x < w; ++x) {
                        int in = sc.nextInt();
                        if (in == 1) {
                            int pos = (i / 2) * w + x;
                            cantmove.get(pos).add(pos + w);
                            cantmove.get(pos + w).add(pos);
                        }
                    }
                }
            }
            Queue<Integer> q = new ArrayDeque<>();
            q.add(0);
            int[] res = new int[h * w];
            for (int i = 0; i < h * w; ++i)
                res[i] = 0;
            res[0] = 1;
            while (!q.isEmpty()) {
                int pos = q.poll();
                if (pos - 1 > 0 && pos % w != 0 && !cantmove.get(pos).contains(pos - 1) && res[pos - 1] == 0) {
                    res[pos - 1] = res[pos] + 1;
                    q.add(pos - 1);
                }
                if (pos - w > 0 && !cantmove.get(pos).contains(pos - w) && res[pos - w] == 0) {
                    res[pos - w] = res[pos] + 1;
                    q.add(pos - w);
                }
                if (pos + 1 < h * w && pos % w != w - 1 && !cantmove.get(pos).contains(pos + 1) && res[pos + 1] == 0) {
                    res[pos + 1] = res[pos] + 1;
                    q.add(pos + 1);
                }
                if (pos + w < h * w && !cantmove.get(pos).contains(pos + w) && res[pos + w] == 0) {
                    res[pos + w] = res[pos] + 1;
                    q.add(pos + w);
                }
            }
            System.out.println(res[h * w - 1]);
        }
        sc.close();
    }
}
