/**
 *    author:  gary
 *    created: 28.04.2022 09:54:53
**/
#include<bits/stdc++.h>
#define rb(a,b,c) for(int a=b;a<=c;++a)
#define rl(a,b,c) for(int a=b;a>=c;--a)
#define rep(a,b) for(int a=0;a<b;++a)
#define LL long long
#define PB push_back
#define POB pop_back
#define II(a,b) make_pair(a,b)
#define FIR first
#define SEC second
#define SRAND mt19937 rng(chrono::steady_clock::now().time_since_epoch().count())
#define random(a) rng()%a
#define ALL(a) a.begin(),a.end()
#define check_min(a,b) a=min(a,b)
#define check_max(a,b) a=max(a,b)
using namespace std;
const int INF=0x3f3f3f3f;
typedef pair<int,int> mp;
struct Node{
    int note,x,v,o,d;
    Node(){}
    Node(int _,int __,int ___,int ____,int _____){note=_,x=__,v=___,o=____,d=_____;}
    void Debug(){
        cout<<"{\n";
        cout<<"Note="<<note<<endl;
        cout<<"x="<<x<<endl;
        cout<<"v="<<v<<endl;
        cout<<"o="<<o<<endl;
        cout<<"d="<<d<<endl;
        cout<<"}\n";
    }
};
map<string,int> NOTE={
{"C",1},
{"C+",2},
{"D-",2},
{"D",3},
{"D+",4},
{"E-",4},
{"F-",5},
{"E",5},
{"E+",6},
{"F",6},
{"F+",7},
{"G-",7},
{"G",8},
{"G+",9},
{"A-",9},
{"A",10},
{"A+",11},
{"B-",11},
{"B",12}
};
int NOTE_LEN[13],X_LEN[8]={1,1,1,1,2,2,2,3};
string NOTE2[13];
int getnote(string s){
    return NOTE[s];
}
int getx(int x){
    return floor(log2(x)+0.4);
}
const int MAXN=1e5+10;
int n;
Node dat[MAXN];
int getnum(string &s,int &i){
    int x=0;
    while (i<s.length()&&isdigit(s[i])){
        x*=10;
        x+=s[i]-'0';
        i++;
    }
    return x;
}
void Get(string Note,int x,int V,int O,int d){
    // cout<<Note<<" "<<x<<" "<<V<<" "<<O<<' '<<d<<endl;
    if(Note=="C-") Note="B",O--;
    if(Note=="B+") Note="C",O++;
    if(Note=="R"){
        x=128/x;
        int s=x;
        while (d){
            d--;
            x>>=1;
            s+=x;
        }
        if(n&&dat[n].note==0) dat[n].x+=s;
        else dat[++n]=Node(0,s,0,0,0);
    }
    else{
        dat[++n]=Node(getnote(Note),getx(x),V,O-1,d);
    }
}
void process(string &s){
    int i=0;
    int V=100,O=4,L=4;
    while (i<s.length()){
        if(s[i]=='C'||s[i]=='D'||s[i]=='E'||s[i]=='F'||s[i]=='G'||s[i]=='A'||s[i]=='B'||s[i]=='R'){
            string Note;Note.PB(s[i]);
            if(i+1<s.length()&&(s[i+1]=='+'||s[i+1]=='-')) Note.PB(s[i+1]),i++;
            int x=L;
            i++;
            if(i<s.length()&&isdigit(s[i])) x=getnum(s,i);
            else x=L;
            int d=0;
            while (i<s.length()&&s[i]=='.'){
                i++;
                d++;
            }
            Get(Note,x,V,O,d);
        }
        else if(s[i]=='O'||s[i]=='<'||s[i]=='>'){
            if(s[i]=='O'){
                i++;
                int x=getnum(s,i);
                O=x;
            }
            else if(s[i]=='>'){
                O++;
                i++;
            }
            else O--,i++;
        }
        else if(s[i]=='L'){
            i++;
            int x=getnum(s,i);
            L=x;
        }
        else{
            assert(s[i]=='V');
            i++;
            int x=getnum(s,i);
            V=x;
        }
    }
}
const int B=1024;
int dp[MAXN][8][8];
mp from[MAXN][8][8];// L O
string f[B+1][8][8];
bool upd(string& A,string B){
    if(B.length()<A.length()||A=="EMPTY") {A=B;return 1;}
    return 0;
}
string Num(int x){
    string rest="";
    while (x)
    {
        rest.PB('0'+x%10);
        x/=10;
    }
    reverse(ALL(rest));
    return rest;
}
string Lx(int fx,int tx){
    if(fx==tx) return "";
    return "L"+Num(1<<tx);
}
string Vx(int tx){
    string ans="V";
    ans+=Num(tx);
    return ans;
}
string Ox(int fx,int tx){
    if(fx==tx) return "";
    if(fx==tx-1) return ">";
    else if(fx==tx+1) return "<";
    else{
        string ans="O";
        ans.PB(char('1'+tx));
        return ans;
    }
}
string Query(int i,int j,int k){
    if(i<=B) return f[i][j][k];
    int Cnt=0;
    while (i>B)
    {
        i-=128;
        Cnt++;
    }
    string rest=Query(i,j,k);
    string Ans;
    if(j==0){
        rb(i,1,Cnt) Ans+="R";
        return Ans+rest;
    }
    rep(i,rest.length()){
        if(i>=2&&rest[i-2]=='L'&&rest[i-1]=='1'&&rest[i]!='2'&&rest[i]!='6'){
            rb(i,1,Cnt) Ans+="R";
            Cnt=0;
        }
        Ans.PB(rest[i]);
    }
    // if(Cnt){
    //     cerr<<i<<" "<<rest<<" "<<rest.length()<<j<<" "<<k<<" "<<endl;
    // }
    // assert(!Cnt);
    return Ans;
}
int Querylen(int i,int j,int k){
    if(i<=B) return f[i][j][k].length();
    int Cnt=(i-B)/128;
    i-=Cnt*128;
    while (i>B)
    {
        i-=128;
        Cnt++;
    }
    return Cnt+Querylen(i,j,k);
}
int Work(int o,int k,Node x){
    if(o==x.o){
        return NOTE_LEN[x.note]+(k==x.x? 0:Num((1<<x.x)).length())+x.d;
    }
    if(o==x.o-1&&x.note==1){
        return 2+(k==x.x? 0:Num((1<<x.x)).length())+x.d;
    }
    if(o==x.o+1&&x.note==12){
        return 2+(k==x.x? 0:Num((1<<x.x)).length())+x.d;
    }
    return INF;
}
string Works(int o,int k,Node x){
    if(o==x.o){
        string tmp= NOTE2[x.note]+(k==x.x? "":Num((1<<x.x)));
        rb(i,1,x.d) tmp.PB('.');
        return tmp;
    }
    if(o==x.o-1&&x.note==1){
        string tmp= "B+"+(k==x.x? "":Num((1<<x.x)));
        rb(i,1,x.d) tmp.PB('.');
        return tmp;
    }
    if(o==x.o+1&&x.note==12){
        string tmp= "C-"+(k==x.x? "":Num((1<<x.x)));
        rb(i,1,x.d) tmp.PB('.');
        return tmp;
    }
    return "FUCK";
}
int Recover(int i,int j,int k){
    int fj,fk;
    if(i==0) return 100;
    tie(fj,fk)=from[i][j][k];
    if(dat[i].note==0){
        int tmp=Recover(i-1,fj,fk);
        cout<<Query(dat[i].x,fj,j);
        return tmp;
    }
    int tmp=Recover(i-1,fj,fk);
    if(tmp!=dat[i].v){
        cout<<Vx(dat[i].v);
        tmp=dat[i].v;
    }
    cout<<Lx(fj,j)<<Ox(fk,k)<<Works(k,j,dat[i]);
    return tmp;
}
int main(){
    // freopen("in.txt","r",stdin);
    // freopen("my.txt","w",stdout);
    ios::sync_with_stdio(false);
    cin.tie(0);
    for(auto it:NOTE) NOTE_LEN[it.second]=it.first.length(),NOTE2[it.second]=it.first;
    for(auto it:NOTE) NOTE_LEN[it.second]=it.first.length(),upd(NOTE2[it.second],it.first);
    rep(i,B+1) rep(j,8) rep(k,8) f[i][j][k]="EMPTY";
    rep(j,8) rep(k,8) f[0][j][k]=Lx(j,k);
    rb(i,1,B) {
        while (true){
            bool ok=0;    
            rep(j,8) rep(k,8){
                rep(l,8) if(f[i][l][k]!="EMPTY") ok|=upd(f[i][j][k],Lx(j,l)+f[i][l][k]);
                rep(g,8){
                    int t=128/((1<<g));
                    int s=0;
                    string Rest="R";
                    if(g!=j) Rest+=Num(1<<g);
                    while (t>=1){
                        if(s!=0) Rest.PB('.');
                        s+=t;
                        t>>=1;
                        if(s<=i&&f[i-s][j][k]!="EMPTY") ok|=upd(f[i][j][k],Rest+f[i-s][j][k]);
                    }
                }
            }
            if(!ok) break;
        }
    }
    // cout<<Query(310,2,0)<<endl;
    // return 0;
    int T=0;
    while (true){
        string s;
        cin>>s;
        if(s=="*") break;
        n=0;
        process(s);
        rb(i,0,n) rep(j,8) rep(k,8) dp[i][j][k]=INF;
        dp[0][2][3]=0;
        rb(i,1,n){
            if(dat[i].note==0){
                rep(j,8){
                    rep(newj,8){
                        int Klen=Querylen(dat[i].x,j,newj);
                        rep(k,8) if(dp[i-1][j][k]+Klen<dp[i][newj][k]){
                            dp[i][newj][k]=dp[i-1][j][k]+Klen;
                            from[i][newj][k]=II(j,k);
                        }
                    }
                }
            }
            else{
                rep(j,8) rep(k,8) if(dp[i-1][j][k]!=INF) 
                rep(nj,8) rep(nk,8){
                    int Klen=Lx(j,nj).length()+Ox(k,nk).length()+Work(nk,nj,dat[i]);
                    if(Klen+dp[i-1][j][k]<dp[i][nj][nk]){
                        dp[i][nj][nk]=dp[i-1][j][k]+Klen;
                        from[i][nj][nk]=II(j,k);
                    }
                }
            }
        }
        // rb(i,1,n){
            // dat[i].Debug();
        // }
        cout<<"Case "<<++T<<": ";
        int ans=INF,j=0,k=0;
        rep(x,8) rep(y,8) if(dp[n][x][y]<ans) ans=dp[n][x][y],j=x,k=y;
        Recover(n,j,k);
        cout<<endl;
    }
    return 0;
}
