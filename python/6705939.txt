cnt=0
def merge(arr, left, mid, right):
    global cnt
    n1 = mid-left
    n2 = right - mid
    # 创建临时数组
    L = [0] * (n1)
    R = [0] * (n2)
    # 拷贝数据到临时数组 arrays L[] 和 R[]
    for i in range(0, n1):
        L[i] = arr[left + i]
    for j in range(0, n2):
        R[j] = arr[mid + j]
        # 归并临时数组到 arr[l..r]
    i = 0  # 初始化第一个子数组的索引
    j = 0  # 初始化第二个子数组的索引
    k = left  # 初始归并子数组的索引
    while i < n1 and j < n2:
        if L[i] <= R[j]:
            cnt+=1
            arr[k] = L[i]
            i += 1
        else:
            cnt=cnt+1
            arr[k] = R[j]
            j += 1
        k += 1


def mergeSort(arr, left, right):
    global cnt
    if left+1 < right:
        mid = (left + right) // 2
        mergeSort(arr, left, mid)
        mergeSort(arr, mid, right)
        merge(arr, left, mid, right)

n=int(input())
a=[int(x) for x in input().split()]
n = len(a)
mergeSort(a, 0, n - 1)
print(' '.join([str(x) for x in a]))
print(cnt) #cnt是其中比较的次数
