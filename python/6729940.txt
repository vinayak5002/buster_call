import sys
import math
import heapq
from collections import deque, Counter, defaultdict
from sys import stdin


INF = 10 ** 10
int1 = lambda x: int(x) - 1
stinput = lambda: stdin.readline()[:-1]
ii = lambda: int(stinput())  # int input
mi = lambda: map(int, stdin.readline().split())  # map input (int)
li = lambda: list(mi())  # list input (int)
mi1 = lambda: map(int1, stdin.readline().split())  # map input (int)-1
li1 = lambda: list(mi1())  # list input (int)-1
mis = lambda: map(str, stdin.readline().split())  # map input (string)
lis = lambda: list(mis())  # list input (string)


while 1:
    N, M = mi()
    if N == 0: break
    C = [ii() for i in range(M)]
    X = [ii() for i in range(N)]

    # dp[n][i]: n-1サンプル目をiとしたときの最良
    dp = [[INF for i in range(256)] for n in range(N+1)]
    dp[0][128] = 0
    for n in range(1, N+1):
        for i in range(256):
            for c in C:
                ni = min(max(0, i+c), 255) # 候補値
                cost = (X[n-1] - ni) ** 2 
                dp[n][ni] = min(dp[n][ni], dp[n-1][i] + cost)
    print(min(dp[-1]))
