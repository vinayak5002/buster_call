import copy
import heapq

class Node:
    def __init__(self, state, g, h, parent):
        self.state = state
        self.g = g
        self.h = h
        self.parent = parent
        
    def cost(self):
        return self.g + self.h
    
    def __lt__(self, other):
        if (self.g + self.h) < (other.g + other.h):
            return True
        elif (self.g + self.h) == (other.g + other.h):
            return self.h < other.h
        else:
            return False
        
class State:
    def __init__(self, pos):
        self.pos = pos
    
    def __str__(self):
        string = ""
        for i in range(3):
            for j in range(3):
                string += ' ' + str(self.pos[i][j])
            string += '\n'
        return string

    def __eq__(self, other):
        return self.pos == other.pos
    
    def get_position(self, num):
        for i in range(3):
            for j in range(3):
                if self.pos[i][j] == num:
                    return (i, j)
        # should throw exception
        return None
    
class Puzzle:
    def __init__(self, init_pos):
        self.start = State(init_pos)
        self.goal = State([[1, 2, 3], [4, 5, 6], [7, 8, 0]])
        
class Make8puzzle:
    def __init__(self):
        None
        
    def make(self,n):
        state = [[1,2,3],[4,5,6],[7,8,0]]
        x,y = 2,2
        for i in range(n):
            r = random.randint(1,4)
            if(r == 1 and x > 0):
                state[x][y],state[x-1][y] = state[x-1][y],state[x][y]
                x -= 1
            elif(r == 2 and y > 0):
                state[x][y],state[x][y-1] = state[x][y-1],state[x][y]
                y -= 1
            elif(r == 3 and x < 2):
                state[x][y],state[x+1][y] = state[x+1][y],state[x][y]
                x += 1
            elif(r == 4 and y < 2):
                state[x][y],state[x][y+1] = state[x][y+1],state[x][y]
                y += 1
        return state
        
class IDAStar:
    def __init__(self, puzzle):
        self.puzzle = puzzle
        self.closed_list = { }
        self.solution = []
        self.expcnt = 0
        
    def solution_path(self):
        sol_str = ''
        for i in self.solution:
            sol_str += str(i)+'\n'
        return sol_str
        
    def heuristic(self, state):
        # 0以外のパネルのマンハッタン距離の和
        h_value = 0
        for i in range(3):
            for j in range(3):
                if(state.pos[i][j] > 0):
                    h_value += abs((state.pos[i][j]-1)%3 -j)+abs((state.pos[i][j]-1)//3 -i)
        return h_value
    
    def expand(self, node):
        children = []
        pos = node.state.get_position(0)
        x,y = pos[0],pos[1]
        if(x>0):
            self.expcnt += 1
            cstate = copy.deepcopy(node.state.pos)
            cstate[x-1][y],cstate[x][y] = cstate[x][y],cstate[x-1][y]
            children.append(Node(State(cstate),node.g+1,self.heuristic(State(cstate)),node.state))
        if(y>0):
            self.expcnt += 1
            cstate = copy.deepcopy(node.state.pos)
            cstate[x][y-1],cstate[x][y] = cstate[x][y],cstate[x][y-1]
            children.append(Node(State(cstate),node.g+1,self.heuristic(State(cstate)),node.state))
        if(x<2):
            self.expcnt += 1
            cstate = copy.deepcopy(node.state.pos)
            cstate[x+1][y],cstate[x][y] = cstate[x][y],cstate[x+1][y]
            children.append(Node(State(cstate),node.g+1,self.heuristic(State(cstate)),node.state))
        if(y<2):
            self.expcnt += 1
            cstate = copy.deepcopy(node.state.pos)
            cstate[x][y+1],cstate[x][y] = cstate[x][y],cstate[x][y+1]
            children.append(Node(State(cstate),node.g+1,self.heuristic(State(cstate)),node.state))
        return children
    
    def dls(self, node, t):
        if(node.state == self.puzzle.goal):
            return True
        
        elif(t > node.g + node.h):
            for c in self.expand(node):
                if(c.state not in self.solution):
                    self.solution.append(c.state)
                    flag = self.dls(c, t)
                    if(flag):
                        return True
                    self.solution.pop()

        return False

    def search(self):
        start_state = self.puzzle.start
        dummy_state = State([[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]])
        
        if str(start_state) == str(self.puzzle.goal):
            self.solution.append(start_state)
            return 0
        
        start_node = Node(start_state, 0, self.heuristic(start_state), dummy_state)
        t = self.heuristic(start_state)
        while(t < 50):
            if(self.dls(start_node, t)):
                # ans = 'len: ' + str(t-1) + '\n'
                # ans += 'expand = ' + str(self.expcnt) + '\n'
                # ans += self.solution_path()
                ans = t-1
                return ans
            self.solution = []
            t += 1

pzl = Puzzle([list(map(int,input().split())) for i in range(3)])
solver = IDAStar(pzl)
solution = solver.search()
print(solution)
