import sys
import threading

# READ_FROM_FILE = True
READ_FROM_FILE = False


class RangeSumQuery:
    def __init__(self, n):
        self._n = n
        self._bit = [0] * (self._n + 1)
        return

    def _query_sub(self, i):
        s = 0
        while i > 0:
            s += self._bit[i]
            i -= i & -i
        return s

    # i: one-based
    def add(self, i, x):
        while i <= self._n:
            self._bit[i] += x
            i += i & -i
        return

    # [s, t]: one-based
    def get_sum(self, s, t):
        return self._query_sub(t) - self._query_sub(s - 1)


class EulerTour:
    def __init__(self, num_nodes, children_list):
        self._children_list = children_list[:]
        self.left = [0] * num_nodes
        self.right = [0] * num_nodes
        self._tour = []
        self._dfs(0)
        return

    def _dfs(self, n):
        self.left[n] = len(self._tour)
        self._tour.append(n)
        for c in self._children_list[n]:
            self._dfs(c)
            self._tour.append(n)

        self.right[n] = len(self._tour)
        return


class RangeSumQueryTree:
    def __init__(self, num_nodes, children_list):
        self._euler_tour = EulerTour(num_nodes, children_list)
        self._rsq = RangeSumQuery(2 * num_nodes - 1)
        return

    def add(self, n, w):
        self._rsq.add(self._euler_tour.left[n] + 1, w)
        self._rsq.add(self._euler_tour.right[n] + 1, -w)
        return

    def get_sum(self, n):
        return self._rsq.get_sum(1, self._euler_tour.left[n] + 1)


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    num_nodes = int(f.readline())
    children_list = [[] for _ in range(num_nodes)]
    for i in range(num_nodes):
        children_list[i] = list(map(int, f.readline().split()))[1:]

    rsq_tree = RangeSumQueryTree(num_nodes, children_list)

    q = int(f.readline())
    for _ in range(q):
        query_list = list(map(int, f.readline().split()))
        num_nodes = query_list[1]

        if query_list[0] == 0:
            w = query_list[2]
            rsq_tree.add(num_nodes, w)
        else:
            print(rsq_tree.get_sum(num_nodes))

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    sys.setrecursionlimit(10**6)
    threading.stack_size(10**8)
    thread = threading.Thread(target=main)
    thread.start()

