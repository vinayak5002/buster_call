
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, n) for (int i = 0, i##_len = (int)(n); i < i##_len; ++i)
#define reps(i, n) for (int i = 1, i##_len = (int)(n); i <= i##_len; ++i)
#define rrep(i, n) for (int i = ((int)(n)-1); i >= 0; --i)
#define rreps(i, n) for (int i = ((int)(n)); i > 0; --i)
#define repi(i, x) \
	for (auto i = (x).begin(), i##_fin = (x).end(); i != i##_fin; ++i)
#define all(x) (x).begin(), (x).end()
#define F first
#define S second
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define eb emplace_back
using Vi  = vector<int>;
using VVi = vector<Vi>;
using Pi  = pair<int, int>;
using VPi = vector<Pi>;
using V   = vector<long long>;
using VV  = vector<V>;
using P   = pair<long long, long long>;
using VP  = vector<P>;
template <class T>
inline bool chmax(T& a, T b) {
	if (a < b) {
		a = b;
		return 1;
	}
	return 0;
}
template <class T>
inline bool chmin(T& a, T b) {
	if (a > b) {
		a = b;
		return 1;
	}
	return 0;
}
template <class T, class U>
ostream& operator<<(ostream& os, const pair<T, U>& p) {
	os << "(" << p.first << " " << p.second << ")";
	return os;
}
template <class T>
ostream& operator<<(ostream& os, const vector<T>& v) {
	rep(i, v.size()) {
		if (i) os << " ";
		os << v[i];
	}
	return os;
}
template <class T, class U>
istream& operator>>(istream& is, pair<T, U>& p) {
	is >> p.first >> p.second;
	return is;
}
template <class T>
istream& operator>>(istream& is, vector<T>& v) {
	rep(i, v.size()) { is >> v[i]; }
	return is;
}
const long long INFLL = 1LL << 60;
const int INF         = 1 << 30;
const double PI       = acos(-1);
#ifdef LOCAL
#define dbg(x) cerr << #x << ": " << (x) << '\n'
#define say(x) cerr << (x) << '\n'
#else
#define dbg(x)
#define say(x)
#endif
string solve(bool a) { return ((a) ? "Yes" : "No"); }

void init() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
#ifdef LOCAL
	if (freopen("in.txt", "r", stdin) == NULL) {
		cerr << "no inputfile found" << '\n';
	}
	if (freopen("out.txt", "w", stdout) == NULL) {
		cerr << "no outputfile found" << '\n';
	}
	if (freopen("err.txt", "w", stderr) == NULL) {
		cerr << "no errputfile found" << '\n';
	}
#endif
}

int main() {
	init();
	int v, e, r;
	cin >> v >> e >> r;
	Vi dict(v, INF);
	Vi last(v, -1);
	vector<vector<Pi>> path(v);
	int s, t, d;
	rep(i, e) {
		cin >> s >> t >> d;
		path[s].eb(t, d);
	}
	dbg(path);
	dict[r] = 0;

	auto det = [](Pi& a, Pi& b) { return a.S > b.S; };
	priority_queue<Pi, VPi, decltype(det)> q{det};
	q.emplace(r, dict[r]);
	Pi at;
	do {
		at = q.top();
		q.pop();
		if (at.S != dict[at.F]) continue;
		repi(itr, path[at.F]) {
			chmin(dict[itr->F], at.S + itr->S) &&
			    (last[itr->F] = at.F, q.emplace(itr->F, dict[itr->F]), true);
		}
	} while (!q.empty());
	dbg(dict);
	dbg(last);
	repi(itr, dict) {
		if (*itr == INF) {
			cout << "INF" << endl;
		} else {
			cout << *itr << endl;
		}
	}
}

