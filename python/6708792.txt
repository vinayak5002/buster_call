import java.math.BigInteger
import kotlin.math.min
import kotlin.math.sqrt

@kotlin.ExperimentalStdlibApi
fun main() {
    val n = readInt()
    val edges = List(n) { readInts().drop(2) }
    println("edges $edges")

    val visited = BooleanArray(n) { false }
    val maxDistance = Int.MAX_VALUE - 10
    val minDistances = IntArray(n) { maxDistance }
    val deque = ArrayDeque<Int>()
    visited[0] = true
    deque.add(0)
    minDistances[0] = 0

    while (deque.isNotEmpty()) {
        val nowNode = deque.removeFirst()
        edges[nowNode].forEach { nextN ->
            val nextNode = nextN - 1
            if (visited[nextNode]) return@forEach
            visited[nextNode] = true
            minDistances[nextNode] = min(minDistances[nextNode], minDistances[nowNode] + 1)
            deque.add(nextNode)
        }
    }
    minDistances.map { if (it == maxDistance) -1 else it }
        .forEachIndexed { i, d ->
            println("$i $d")
        }
}


fun Int.isEven(): Boolean = this % 2 == 0

fun Int.isOdd(): Boolean = !isEven()

fun Int.factorial() = (1..this).reduce { a, b -> a * b }

fun Int.permutation(k: Int = 1) = (k..this).reduce { a, b -> a * b }

fun <T> List<T>.permutations(): Set<List<T>> {
    val source = this
    val permutations = mutableSetOf<List<T>>()
    fun permutation(source: List<T>, perm: List<T>) {
        if (source.size <= 1) {
            permutations += perm + source
        } else {
            repeat(source.size) {
                permutation(source.take(it) + source.drop(it + 1), perm + source[it])
            }
        }
    }
    permutation(source, emptyList())
    return permutations
}

/*fun <T> List<T>.permutations(): List<List<T>> {
    if (this.isEmpty()) return listOf(emptyList())

    val result: MutableList<List<T>> = mutableListOf()
    for (i in this.indices) {
        (this - this[i]).permutations().forEach { item ->
            result.add(0, item + this[i])
        }
    }
    return result
}*/

fun Int.combination(k: Int = 1) = permutation(k) / k.factorial()

// digitToIntが1.5からなので自前で定義
fun Char.digitToInt(): Int {
    @Suppress("DEPRECATION")
    return Character.digit(this.toInt(), 10).also {
        if (it < 0) throw IllegalArgumentException("Char $this is not a decimal digit")
    }
}


operator fun Regex.contains(text: CharSequence): Boolean = this.matches(text)

fun divisor(value: Long): List<Long> {
    return (1..(sqrt(value.toDouble()).toLong() + 1)).filter { value % it == 0L }
        .flatMap {
            if (value / it == it) listOf(it) else listOf(
                it,
                value / it
            )
        }//.also { println("value: $value, divisors $it") }
}

fun primeFactor(value: Long): List<Long> {
    if (value == 1L) return listOf(1)
    val max = Math.sqrt(value.toDouble()).toLong()
    return prime(2, max).filter { value % it == 0L }.also { println("value: $value, primeFactor $it") }
}

// 範囲内の素数を取得
// fromだけ指定すると戻り値の個数で素数判定ができる
fun prime(from: Long, to: Long = from): List<Long> {
    return (from..to).filter { i ->
        val max = Math.sqrt(i.toDouble()).toLong()
        (2..max).all { j -> i % j != 0L }
    }
}


fun readInt(): Int = readLine()!!.toInt()

fun readLong(): Long = readLine()!!.toLong()

fun readDouble(): Double = readLine()!!.toDouble()

fun readInts(): List<Int> = readLine()!!.split(" ").map { it.toInt() }

fun readBigInts(): List<BigInteger> = readLine()!!.split(" ").map { it.toBigInteger() }

fun readLongs(): List<Long> = readLine()!!.split(" ").map { it.toLong() }

fun readDoubles(): List<Double> = readLine()!!.split(" ").map { it.toDouble() }

fun readStrList(): List<String> = readLine()!!.split(" ")

fun Double.decimalFormat(decimalCount: Int): String = String.format("%.${decimalCount}f", this)
