fn main() {
    let n: u32 = read();
    let v: Vec<(String, i32)> = read_tuple2(n);
    let pettern = ["S", "H", "C", "D"];
    for pet in pettern {
        for num in 1..=13 {
            if !v.contains(&((*pet).to_string(), num)) {
                println!("{} {}", pet, num);
            }
        }
    }
}

fn read<T: std::str::FromStr>() -> T {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).ok().unwrap();
    s.trim().parse().ok().unwrap()
}

fn read_tuple<T1: std::str::FromStr, T2: std::str::FromStr>() -> (T1, T2) {
    let mut s = String::new();
    std::io::stdin().read_line(&mut s).ok().unwrap();
    let mut it = s.trim().split_whitespace();
    let t1 = it.next().unwrap().parse::<T1>().ok().unwrap();
    let t2 = it.next().unwrap().parse::<T2>().ok().unwrap();
    (t1, t2)
}

fn read_tuple2<T1: std::str::FromStr, T2: std::str::FromStr>(n: u32) -> Vec<(T1, T2)> {
    (0..n).map(|_| read_tuple()).collect()
}

