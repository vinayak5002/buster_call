import heapq

n = 4
n_2 = n ** 2
limit = 45

board = [list(map(int, input().split())) for _ in range(n)]
initial_code = 0

#codeに x * pow(16, 4 * i + j)が加算されているとき, xが(i, j)に存在していることを表している.
#組み合わせは一意に定まる.
for i in range(n):
    for j in range(n):
        x = board[i][j]
        if x == 0:
            k0 = i * n + j
        else:
            ix, jx = (x - 1) // n, (x - 1) % n
        initial_code += x * pow(n_2, i * n + j)

location_dict = {1:(0,0), 2:(0,1), 3:(0,2), 4:(0,3), 5:(1,0), 6:(1,1), 7:(1,2), 8:(1,3), 9:(2,0), 10:(2,1), 11:(2,2), 12:(2,3), 13:(3,0), 14:(3,1), 15:(3,2), 0:(3,3)}
#mh_distance[num][i][j] : 数字numが(i,j)にある時の, ゴールまでのマンハッタン距離を前計算しておいたもの
mh_distance = [[[0]*n for _ in range(n)] for _ in range(n_2)]
for num in range(n_2):
  x,y = location_dict[num]
  for i in range(n):
    for j in range(n):
      mh_distance[num][i][j] = abs(x - i) + abs(y - j)

initial_distance = 0
for i in range(n):
  for j in range(n):
    x = board[i][j]
    initial_distance += mh_distance[x][i][j]

heap = [(0, initial_distance, 0, initial_code, k0)]
visited = set()
while heap:
    cost, cost_h, cost_g, code, k0 = heapq.heappop(heap)
    if cost_h == 0:
        exit(print(cost_g))
    if (cost > limit) or (code in visited):
        continue
    visited.add(code)
    i, j = k0 // n, k0 % n
    for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
        ni, nj = i + di, j + dj
        if ni < 0 or ni >= n or nj < 0 or nj >= n:
            continue
        k = ni * n + nj
        x = (code // pow(n_2, k)) % n_2
        new_code = code + x * (pow(n_2, k0) - pow(n_2, k))
        new_cost_h = cost_h
        new_cost_h -= mh_distance[x][ni][nj]
        new_cost_h += mh_distance[x][i][j]
        new_cost_h += mh_distance[0][ni][nj]
        new_cost_h -= mh_distance[0][i][j]
        new_cost_g = cost_g + 1
        new_cost = new_cost_h + new_cost_g
        heapq.heappush(heap, (new_cost, new_cost_h, new_cost_g, new_code, k))

