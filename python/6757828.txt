class DisjointSet:
    def __init__(self, value):
        self.parent = self
        self.rank = 0
        self.value = value
    
def union_(x, y):
    link(find_set(x), find_set(y))

def link(x, y):
    if x.rank > y.rank:
        y.parent = x
    else:
        x.parent = y
        if x.rank == y.rank:
            y.rank += 1

def find_set(x):
    if x != x.parent:
        x.parent = find_set(x.parent)
    
    return x.parent

if __name__ == "__main__":
    n_nodes, n_queries = [int(e) for e in input().split()]
    nodes = []
    for i in range(n_nodes):
        nodes.append(DisjointSet(i))

    commands = []
    for _ in range(n_queries):
        command, x, y = [int(e) for e in input().split()]
        commands.append((command, x, y))
    
    for command, x, y in commands:
        if command == 0:
            union_(nodes[x], nodes[y])
        elif command == 1:
            root_x = find_set(nodes[x])
            root_y = find_set(nodes[y])
            print(int(root_x == root_y))



