const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
	let set = new Set()
	let queryNum = si[0]
	for (let i = 1; i <= queryNum; i++) {
		let queryLine = si[i].split(" ").map(function(value){
			return Number(value)
		})
		let order = queryLine[0]
		let element = queryLine[1]
		let upper = queryLine[2]
		if (order == 0){
			set.add(element)
			so.write(set.size + "\n")
		} else if (order == 1) {
			if (set.has(element)){
				so.write("1\n")
			} else {
				so.write("0\n")
			}
		} else if (order == 2) {
			set.delete(element)
		} else if (order == 3) {
			let array = Array.from(set).sort(function(a, b){
					return a - b
			})
			let lowerIndex = BinarySearch.lowerSearch(0, array.length, element, array)
			let upperIndex = BinarySearch.upperSearch(lowerIndex, array.length, upper, array) - 1
			let ans = []
			for (let j = lowerIndex; j <= upperIndex; j++){
				ans.push(array[j])
			}
			if (ans.length){
				so.write(ans.join("\n") + "\n")
			}
		}
		
	}
}

class BinarySearch{
	
	static lowerSearch (start, end, target, array){
		do {
			let middle = Math.trunc((start + end) / 2)
			if (target < array[middle]) {
				end = middle - 1
			} else if (array[middle] < target) {
				// 配列の真ん中より目的の値が大きいとき、探索のスタートを中央の一つ右の要素にする
				start = middle + 1
			} else {
				// 配列の真ん中より目的の値が小さいとき、探索のエンドを中央の一つ左の要素にする
				end = middle - 1
			}
		}while (start <= end)
		return start
	}
	
	static upperSearch (start, end, target, array){
		do {
			let middle = Math.trunc((start + end) / 2)
			if (array[middle] <= target) {
				start = middle + 1
			} else if (array[middle] < target) {
				// 配列の真ん中より目的の値が大きいとき、探索のスタートを中央の一つ右の要素にする
				start = middle + 1
			} else {
				// 配列の真ん中より目的の値が小さいとき、探索のエンドを中央の一つ左の要素にする
				end = middle - 1
			}
		}while (start <= end)
		return start
	}
}
