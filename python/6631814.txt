from typing import Iterable, Union

RealNumber = Union[int, float]


class Point:
    """
    Point class
    """

    def __init__(self, x: RealNumber, y: RealNumber):
        """
        Initialize a point with coordinates x, y
        """
        self.x = x
        self.y = y

    def __str__(self) -> str:
        L = []
        if isinstance(self.x, int):
            L.append(f"{self.x}")
        else:
            L.append(f"{self.x:.4f}")
        if isinstance(self.y, int):
            L.append(f"{self.y}")
        else:
            L.append(f"{self.y:.4f}")
        return " ".join(L)

    def __repr__(self) -> str:
        return f"Point({self.x}, {self.y})"

    def __iter__(self) -> Iterable[RealNumber]:
        return iter((self.x, self.y))

    def __eq__(self, other: "Point") -> bool:
        return self.x == other.x and self.y == other.y

    def __hash__(self) -> int:
        return (self.x, self.y).__hash__()

    def __add__(self, other: "Point") -> "Point":
        return Point(self.x + other.x, self.y + other.y)

    def __sub__(self, other: "Point") -> "Point":
        return Point(self.x - other.x, self.y - other.y)

    def __mul__(self, other: RealNumber) -> "Point":
        return Point(self.x * other, self.y * other)

    __rmul__ = __mul__

    def __truediv__(self, other: RealNumber) -> "Point":
        assert other != 0, "Division by zero"
        return Point(self.x / other, self.y / other)

    def __floordiv__(self, other: int) -> "Point":
        assert isinstance(self.x, int) and isinstance(
            self.y, int
        ), "x and y must be integer"
        return Point(self.x // other, self.y // other)

    def __neg__(self) -> "Point":
        return Point(-self.x, -self.y)

    def __abs__(self) -> RealNumber:
        return abs(self.x + self.y * 1j)


class Line:
    """
    Line class
    """

    def __init__(self, a: RealNumber, b: RealNumber, c: RealNumber):
        """
        coefficients a, b, c such that ax + by + c = 0
        """
        assert a != 0 or b != 0, "a and b cannot both be zero"
        self._a = a
        self._b = b
        self._c = c

    @classmethod
    def initialize(cls, m: RealNumber, n: RealNumber) -> "Line":
        """
        coefficients m, n such that y = mx + n
        """
        return cls(m, -1, n)

    @classmethod
    def from_points(cls, p1: Point, p2: Point) -> "Line":
        """
        Returns the line that passes through the two points
        """
        assert p1 != p2, "The two points must not be the same"
        return Line(p2.y - p1.y, p1.x - p2.x, p2.x * p1.y - p1.x * p2.y)

    @property
    def a(self) -> RealNumber:
        return self._a

    @a.setter
    def a(self, a: RealNumber):
        assert self._a != 0, "The line is vertical"
        n, m = self.n, self.m
        self._a = a
        self._b = -a / m
        self._c = -n * a / m

    @property
    def b(self) -> RealNumber:
        return self._b

    @b.setter
    def b(self, b: RealNumber):
        assert self._b != 0, "The line is horizontal"
        n, m = self.n, self.m
        self._a = -m * b
        self._b = b
        self._c = -n * b

    @property
    def c(self) -> RealNumber:
        return self._c

    @c.setter
    def c(self, c: RealNumber):
        assert self._c != 0, "The line contacts the origin"
        n, m = self.n, self.m
        self._a = -m * c / n
        self._b = -c / n
        self._c = c

    @property
    def m(self) -> RealNumber:
        """
        Returns the intercept of the line
        """
        assert self._b != 0, "Line is not a vertical line"
        return -self.c / self._b

    @property
    def n(self) -> RealNumber:
        """
        Returns the slope of the line
        """
        assert self._b != 0, "Line is not a horizontal line"
        return -self._c / self._b

    @property
    def direction_vector(self) -> Point:
        """
        Returns the direction vector of the line
        """
        p = Point(-self._b, self._a)
        return p / abs(p)

    @property
    def normal_vector(self) -> Point:
        """
        Returns the normal vector of the line
        """
        p = Point(self._a, self._b)
        return p / abs(p)

    def __str__(self) -> str:
        def _first_term_format(x: RealNumber) -> str:
            if x == 1:
                return ""
            elif x == -1:
                return "-"
            if isinstance(x, int):
                return str(x)
            return f"{x:.4f}"

        def _term_format(x: RealNumber) -> str:
            if x == 1:
                return "+ "
            elif x == -1:
                return "- "
            if x > 0:
                if isinstance(x, int):
                    return f"+ {x}"
                return f"+ {x:.4f}"
            else:
                if isinstance(x, int):
                    return f"- {-x}"
                return f"- {-x:.4f}"

        L = []
        if self._a != 0:
            L.append(_first_term_format(self._a) + "x")
        if self._b != 0:
            if L:
                L.append(_term_format(self._b) + "y")
            else:
                L.append(_first_term_format(self._b) + "y")
        if self._c != 0:
            if L:
                L.append(_term_format(self._c))
            else:
                L.append(_first_term_format(self._c))
        L.append("= 0")
        return " ".join(L)

    def __repr__(self) -> str:
        return "Line(%s, %s, %s)" % (self._a, self._b, self._c)


def inner_product(p1: Point, p2: Point) -> RealNumber:
    return p1.x * p2.x + p1.y * p2.y


def outer_product(p1: Point, p2: Point) -> RealNumber:
    return p1.x * p2.y - p1.y * p2.x


def is_vertical(l1: Line, l2: Line) -> bool:
    return inner_product(l1.direction_vector, l2.direction_vector) == 0


def is_parrallel(l1: Line, l2: Line) -> bool:
    return outer_product(l1.direction_vector, l2.direction_vector) == 0


def distance(p: Point, l: Line) -> RealNumber:
    return l.a * p.x + l.b * p.y + l.c / (l.a**2 + l.b**2) ** 0.5


def projection(p: Point, l: Line) -> Point:
    """
    Returns the projection of p on l
    """
    if l.b != 0:
        p0 = Point(0, -l.c / l.b)
    else:
        p0 = Point(-l.c / l.a, 0)
    v = l.direction_vector
    return p0 + inner_product(p - p0, v) * v


def intersection(l1: Line, l2: Line) -> Point:
    """
    Returns the intersection point of two lines
    """
    t = l1.a * l2.b - l1.b * l2.a
    assert t != 0, "The lines are parallel"
    return Point(-l1.c * l2.b + l2.c * l1.b / t, l1.c * l2.a - l2.c * l1.a / t)


q = int(input())
for _ in range(q):
    x0, y0, x1, y1, x2, y2, x3, y3 = map(int, input().split())
    l1 = Line.from_points(Point(x0, y0), Point(x1, y1))
    l2 = Line.from_points(Point(x2, y2), Point(x3, y3))
    if is_vertical(l1, l2):
        print(1)
    elif is_parrallel(l1, l2):
        print(2)
    else:
        print(0)

