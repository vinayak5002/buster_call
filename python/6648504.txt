const int maskSize = (1 << 16);

int v, e;
ll dist[15][15];
ll dp[maskSize][15];

void reset() {
  FOR(i, 0, (1 << v) - 1) FOR(j, 0, v - 1) dp[i][j] = -1;
  FOR(i, 0, v - 1) FOR(j, 0, v - 1) dist[i][j] = 15000;
}
ll solve(int s, int mask) {
  if (s < 0 || s >= v) return 15000;
  if (mask == (1 << v) - 1) return dist[s][0];
  if (dp[mask][s] != -1) return dp[mask][s];
  ll sol = 15000;
  FOR(i, 0, v - 1) {
    if (mask & (1 << i)) continue;
    if (dist[s][i] == 15000) continue;
    sol = min(sol, solve(i, mask | (1 << i)) + dist[s][i]);
  }
  return dp[mask][s] = sol;
}

int main(int argc, char const *argv[]) {
  int a, b, d;
  while (cin >> v >> e) {
    reset();
    FOR(i, 0, e) {
      cin >> a >> b >> d;
      dist[a][b] = d;
    }
    ll sol = solve(0, 1);
    if (sol >= 15000)
      cout << -1 << endl;
    else
      cout << sol << endl;
  }
  return 0;
}
