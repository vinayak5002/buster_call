using System;
using System.Collections.Generic;

class A
{
	static void Main()
	{
		var es = Console.ReadLine().Split();
		var s = new LStack<int>();

		foreach (var e in es)
		{
			switch (e)
			{
				case "+":
					s.Add(s.Pop() + s.Pop());
					break;
				case "-":
					s.Add(-s.Pop() + s.Pop());
					break;
				case "*":
					s.Add(s.Pop() * s.Pop());
					break;
				default:
					s.Add(int.Parse(e));
					break;
			}
		}
		Console.WriteLine(s.Pop());
	}
}

// singly linked list
[System.Diagnostics.DebuggerDisplay(@"Count = {Count}")]
public class LStack<T> : IEnumerable<T>
{
	[System.Diagnostics.DebuggerDisplay(@"\{{Item}\}")]
	class Node
	{
		public T Item;
		public Node Next;
	}

	Node Root;
	public int Count { get; private set; }

	public T Top => Root != null ? Root.Item : throw new InvalidOperationException("There are no items.");

	public void Add(T item)
	{
		Root = new Node { Item = item, Next = Root };
		++Count;
	}

	public T Pop()
	{
		var item = Top;
		Root = Root.Next;
		--Count;
		return item;
	}

	System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
	public IEnumerator<T> GetEnumerator() { for (var n = Root; n != null; n = n.Next) yield return n.Item; }
}

