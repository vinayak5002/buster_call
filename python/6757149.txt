// #include "atcoder/all"
#include <iostream> // cout, endl, cin
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <cstdio> // printf
#include <map> // map
#include <queue> // queue, priority_queue
#include <set> // set
#include <stack> // stack
#include <deque> // deque
#include <unordered_map> // unordered_map
#include <unordered_set> // unordered_set
#include <bitset> // bitset
#include <cctype> // isupper, islower, isdigit, toupper, tolower
#include <iomanip> // setprecision
#include <complex> // complex
#include <math.h>
#include <functional>
#include <cassert>
using namespace std;
// using namespace atcoder;
using ll = long long;
using P = pair<ll,ll>;
constexpr ll INF = 1e18;
constexpr ll LLMAX = 9223372036854775807;
constexpr int inf = 1e9;
// constexpr ll mod = 1000000007;
constexpr ll mod = 998244353;
// 右下左上
const int dx[8] = {1, 0, -1, 0,1,1,-1,-1};
const int dy[8] = {0, 1, 0, -1,1,-1,1,-1};
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
ll gcd(ll a,ll b){if(b==0){return a;}else{return gcd(b,a%b);}};
#define eb emplace_back
#define pb pop_back
#define eol endl
// ---------------------------------------------------------------------------


bool solve(){
    string S;
    cin >> S;
    if(S == "#") return false;
    queue<pair<string,string>> que;
    que.emplace(string(26,'0'),"");
    for(int i=0; i<S.size(); i++){
        queue<pair<string,string>> nque;
        set<pair<string,string>> ext;
        while(que.size()){
            // bit立ってるところは使用済み
            string bit = que.front().first;
            string res = que.front().second;
            que.pop();
            if(ext.count(pair<string,string>(bit,res))) continue;
            ext.emplace(bit,res);
            // 変化前
            ll d = S[i]-'a'+1;
            if(S[i]=='z' && bit[25]=='0') continue;
            // cout << d << endl;
            if(S[i] == 'a'){
                string nbit = bit;
                string nres = res;
                nres += 'a';
                nque.emplace(nbit,nres);
            }
            if(d < 26){
                if(bit[d] == '0'){
                    string nbit = bit;
                    nbit[d] = '1';
                    string nres = res;
                    nres += d + 'a';
                    nque.emplace(nbit,nres);
                }
                // else{
                //     string nbit = bit;
                //     string nres = res;
                //     nres += (d-1)+'a';
                //     nque.emplace(nbit,nres);
                // }
            }
            if(bit[S[i]-'a'] == '1'){
                string nbit = bit;
                string nres = res;
                nres += S[i];
                nque.emplace(nbit,nres);
            }
        }
        // cout << nque.size() << endl;
        que = nque;
    }
    vector<string> res;
    set<string> ext;
    while(que.size()){
        // cout << que.front().first << " " << que.front().second << endl;
        if(!ext.count(que.front().second)) res.emplace_back(que.front().second);
        ext.emplace(que.front().second);
        que.pop();
    }
    sort(res.begin(),res.end());
    cout << res.size() << endl;
    if(res.size() > 10){
        vector<string> ans;
        for(int i=0; i<5; i++){
            ans.emplace_back(res[i]);
            ans.emplace_back(res.back());
            res.pop_back();
        }
        sort(ans.begin(),ans.end());
        for(int i=0; i<ans.size(); i++){
            cout << ans[i] << endl;
        }
    }else{
        for(int i=0; i<res.size(); i++){
            cout << res[i] << endl;
        }
    }
    return true;
}


int main(){
    while(solve());
    return 0;
}
