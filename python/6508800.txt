const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {

	const q = parseInt(si[0].split("\n"));
	let s = new Set();
	let ans = '';
	
	for (let i = 1; i < q + 1; i++) {
		let order = si[i].split(" ");
		let x = parseInt(order[1]);
		switch (order[0]) {
			case '0':
				s.add(x);
				ans += s.size + '\n'
				break;

			case '1':
				let key_check = s.has(x);
				if (key_check) {
					ans += '1\n'
				} else {
					ans += '0\n'
				}
				break;
				
			case '2':
				s.delete(x);
				break;
				
			case '3':
				let l = parseInt(order[1]);
				let r = parseInt(order[2]);
				
				let arr = Array.from(s.values());
				arr.sort(function(a, b) {
					return a -b;
				});
				
		//----------------------------------------		
				let min = 0;
				let max = arr.length;
				let n = arr.length;
				let check = 0;
				for ( ; ; ) {
					let mid = min + Math.floor((max - min) / 2);
					if (min >= max) {
						if (mid === arr.length) {
							check = n;
							break;
						}
						
						if (arr[mid] > l) {
							check = mid
						} else if (arr[mid] < l) {
							if (mid + 1 >= arr.length) {
								check = n;
							} else {
								check = mid + 1;
							}
							
						} else {
							check = mid;
						}
						break;
					}
					
					if (arr[mid] < l) {
						min = mid + 1;
					} else {
						max = mid;
					}
				}
				
				//------------------------------------		
				if (check < arr.length) {
					for (let i = check; i < arr.length; i++) {
						if (arr[i] >= l && arr[i] <= r) {
							ans += arr[i] + '\n';
						} else if (arr[i] > r) {
							break;
						}
					}
				}
				break;
		}

	}
	so.write(ans);

}
