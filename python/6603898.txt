from collections import defaultdict, deque, Counter
from re import L
import sys
import heapq
import bisect
import math
import itertools
import string
import queue
import copy
import time
from fractions import gcd
import numpy as np
from heapq import *
#input = sys.stdin.readline
# if turned on, input() will leave \n at the end of the linej
sys.setrecursionlimit(10**8)
INF = float('inf')
MOD = 10**9+7
EPS = 10**-7
def inp(): return int(sys.stdin.readline())
def inpl(): return list(map(int, sys.stdin.readline().split()))
def inpl_str(): return list(sys.stdin.readline().split())


v, e, r = map(int, input().split())
graph = [[] for _ in range(v)]
for _ in range(e):
    s, t, d = map(int, input().split())
    graph[s].append((t, d))

dis = [INF]*v
dis[r] = 0

hq = []
heappush(hq, (dis[r], r))
while hq:
    curr = heappop(hq)
    curr_v = curr[1]
    curr_dis = curr[0]
    for nex in graph[curr_v]:
        nex_v = nex[0]
        nex_dis = curr_dis + nex[1]
        if nex_dis < dis[nex_v]:
            dis[nex_v] = nex_dis
            heappush(hq, (dis[nex_v], nex_v))

for i in range(v):
    if dis[i] == INF:
        print('INF')
    else:
        print(dis[i])




