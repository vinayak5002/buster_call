// #define _GLIBCXX_DEBUG

#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define rep2(i, k, n) for (decltype(n) i = k; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i--)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i--)
#define repr2(i, k, n) for (decltype(n) i = n; i >= k; i--)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret;};
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret;};
template<typename T> using pq_inv = priority_queue<T, vector<T>, greater<T>>;



struct Solver{
    int rtn(int n){
        return (n*(n+1)*(n+2))/6;
    }
    vector<int> gen(const int n){
        vector<int> ret;
        int i=1;
        while(true){
            int tmp=rtn(i++);
            if(tmp>n)break;
            ret.push_back(tmp);
        }
        return ret;
    }
    void solve(){
        int K=1000000;
        vector<int> V = gen(K);
        vector<int> dp1(K+1,1<<30);
        vector<int> dp2(K+1,1<<30);
        cout << V.size() << endl;
        dp1[0]=dp2[0]=0;
        for(int i=1;i<=K; i++){
            for(auto&& v:V) if(i-v>=0) dp1[i] = min(dp1[i],dp1[i-v]+1);
            for(auto&& v:V) if(i-v>=0&&v%2==1) dp2[i] = min(dp2[i],dp2[i-v]+1);
        }
        while(true){
            int x;cin>>x;
            if(x==0)return;
            cout << dp1[x] << ' ' << dp2[x] << endl;
        }
        
    };
};

int main() {
    std::cin.tie(nullptr);
    Solver solver;
    solver.solve();
    return 0;
}


