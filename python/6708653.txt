package main

import (
	"bufio"
	"fmt"
	"os"
)

const N_MAX int = 100000
const Q_MAX int = 50000

// func explorer(S [N_MAX]int32, left int, right int, target int32) bool {
// 	if left > right {
// 		return false
// 	}
// 	middle := (left + right) / 2
// 	middle_value := S[middle]
// 	if middle_value == target {
// 		return true
// 	} else if middle_value > target {
// 		return explorer(S, left, middle, target)
// 	} else {
// 		return explorer(S, middle+1, right, target)
// 	}
// }

func explorer(S [N_MAX]int, left int, right int, target int) bool {
	for left < right {
		middle := (left + right) / 2
		if target == S[middle] {
			return true
		}
		if target > S[middle] {
			left = middle + 1
		} else if target < S[middle] {
			right = middle
		}
	}
	return false
}

func main() {
	in := bufio.NewReader(os.Stdin)
	out := bufio.NewWriter(os.Stdout)

	var n, q int
	var S [N_MAX]int
	var T [Q_MAX]int

	fmt.Fscan(in, &n)
	for i := 0; i < n; i++ {
		fmt.Fscan(in, &S[i])
	}

	fmt.Fscan(in, &q)
	for i := 0; i < q; i++ {
		fmt.Fscan(in, &T[i])
	}

	num := 0
	for i := 0; i < q; i++ {
		if explorer(S, 0, n, T[i]) {
			num++
		}
	}

	fmt.Fprintf(out, "%d\n", num)
}

// func main() {
// 	var n, q int
// 	var S [N_MAX]int
// 	var T [Q_MAX]int

// 	fmt.Scan(&n)
// 	for i := 0; i < n; i++ {
// 		fmt.Scan(&S[i])
// 	}
// 	fmt.Scan(&q)
// 	for i := 0; i < q; i++ {
// 		fmt.Scan(&T[i])
// 	}

// 	num := 0
// 	for i := 0; i < q; i++ {
// 		if explorer(S, 0, n, T[i]) {
// 			num++
// 		}
// 	}

// 	fmt.Printf("%d\n", num)

// }

