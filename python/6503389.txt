const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {

	const n = parseInt(si[0].split("\n"));
	let array = si[1].split(" ");
	let input_array = '';
	let before_array = '';
	let after_array = '';
	let tbd_num = si[1].split(" ");
	let tbd_array = '';
	
	for (let i = 0; i < n; i++) {
		input_array += array[i];
		if (i < n - 1) {
			input_array += ' ';
		}
	}
	
	if (n > 1) {
		tbd_num[n - 1] = array[n - 2];
		tbd_num[n - 2] = array[n - 1];
		
		for (let i = 0; i < n; i++) {
			tbd_array += tbd_num[i] ;
			
			if (i < n - 1) {
				tbd_array += ' ';
			}
			
		}
		
		if (tbd_array < input_array) {
			before_array += tbd_array;
		} else {
			after_array += tbd_array;
		}
		
		tbd_array = '';
		
		if (n > 2) {
			if (!before_array) {
				if (tbd_num[n - 3] > tbd_num[n - 2] || tbd_num[n - 3] > tbd_num[n - 1]) {
					if (tbd_num[n - 3] > tbd_num[n - 2] && tbd_num[n - 3] > tbd_num[n - 1]) {
						let big = Math.max(tbd_num[n - 2],tbd_num[n - 1]);
						let small = Math.min(tbd_num[n - 2],tbd_num[n - 1]);
						tbd_num[n - 1] = small;
						tbd_num[n - 2] = array[n - 3];
						tbd_num[n - 3] = big;
					} else if (tbd_num[n - 3] > tbd_num[n - 2] && tbd_num[n - 3] < tbd_num[n - 1]) {
						tbd_num[n - 3] = tbd_num[n - 2];
						tbd_num[n - 2] = tbd_num[n - 1];
						tbd_num[n - 1] = array[n - 3];
					} else if (tbd_num[n - 3] < tbd_num[n - 2] && tbd_num[n - 3] > tbd_num[n - 1]) {
						tbd_num[n - 3] = tbd_num[n - 1];
						tbd_num[n - 2] = tbd_num[n - 2];
						tbd_num[n - 1] = array[n - 3];
					}
					for (let i = 0; i < n; i++) {
						tbd_array += tbd_num[i] ;
						
						if (i < n - 1) {
							tbd_array += ' ';
						}
						
					}
					before_array += tbd_array;
				}
					
			} else {
				if (tbd_num[n - 3] < tbd_num[n - 2] || tbd_num[n - 3] < tbd_num[n - 1]) {
					if (tbd_num[n - 3] < tbd_num[n - 2] && tbd_num[n - 3] < tbd_num[n - 1]) {
						let big = Math.max(tbd_num[n - 2],tbd_num[n - 1]);
						let small = Math.min(tbd_num[n - 2],tbd_num[n - 1]);
						tbd_num[n - 1] = big;
						tbd_num[n - 2] = array[n - 3];
						tbd_num[n - 3] = small;
					} else if (tbd_num[n - 3] > tbd_num[n - 2] && tbd_num[n - 3] < tbd_num[n - 1]) {
						tbd_num[n - 3] = tbd_num[n - 1];
						tbd_num[n - 2] = tbd_num[n - 2];
						tbd_num[n - 1] = array[n - 3];
					} else if (tbd_num[n - 3] < tbd_num[n - 2] && tbd_num[n - 3] > tbd_num[n - 1]) {
						tbd_num[n - 3] = tbd_num[n - 2];
						tbd_num[n - 2] = tbd_num[n - 1];
						tbd_num[n - 1] = array[n - 3];
					}
					for (let i = 0; i < n; i++) {
						tbd_array += tbd_num[i];
						
						if (i < n - 1) {
							tbd_array += ' ';
						}
						
					}
					after_array += tbd_array;
				}
			}
		}
	}
	let ans = '';
	if (before_array) {
		ans += before_array + '\n';
	}
	ans += input_array + '\n';
	if (after_array) {
		ans += after_array + '\n';
	}
	
	so.write(ans);
}
