// id: ALDS1_9_D
// Time: 00:32 s, Memory: 6268 KB
#include <algorithm>
#include <cstdio>
#include <vector>
#include <queue>

using std::vector;
using std::sort;
using std::queue;

struct heap_node
{
    int key;
    queue<int> src;
    bool alloc;

    heap_node(): key(0), src(), alloc(false) { }
};

int main()
{
    int n;
    int cur, parent;

    scanf("%d", &n);
    vector<int> seq(n);
    vector<heap_node> hp(n + 1);

    for (int i = 0; i < n; ++i)
        scanf("%d", &seq[i]);
    sort(seq.begin(), seq.end());

    hp[1].key = seq[n - 1];
    hp[1].alloc = true;
    hp[n].key = seq[0];
    hp[n].alloc = true;

    for (int i = n - 1; i >= 2; --i) {
        cur = i;
        parent = cur / 2;

        if (parent > 1) {
            cur = parent;
            parent = cur / 2;
        }
        while (!hp[cur].alloc && parent > 1) {
            cur = parent;
            parent = cur / 2;
        }

        while (hp[cur].alloc) {
            parent = cur;
            cur = hp[cur].src.front();
            hp[parent].src.pop();
        }

        hp[cur].key = seq[i - 1];
        hp[cur].alloc = true;

        cur = i;
        parent = cur / 2;
        while (parent > 1) {
            hp[parent].src.push(cur);
            cur = parent;
            parent = cur / 2;
        }
    }

    printf("%d", hp[1].key);
    for (int i = 2; i <= n; ++i)
        printf(" %d", hp[i].key);
    printf("\n");

    return 0;
}

