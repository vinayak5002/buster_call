import itertools
import sys
import math
import heapq
from collections import deque, Counter, defaultdict
from sys import stdin
import copy
import bisect
from decimal import Decimal, ROUND_HALF_UP
# from atcoder.dsu import DSU

MOD = 10 ** 9 + 7
int1 = lambda x: int(x) - 1
stinput = lambda: stdin.readline()[:-1]
ii = lambda: int(stinput())  # int input
mi = lambda: map(int, stdin.readline().split())  # map input (int)
li = lambda: list(mi())  # list input (int)
mi1 = lambda: map(int1, stdin.readline().split())  # map input (int)-1
li1 = lambda: list(mi1())  # list input (int)-1
mis = lambda: map(str, stdin.readline().split())  # map input (string)
lis = lambda: list(mis())  # list input (string)

while True:
    N, M = mi()
    if N == 0:
        break
    ans = 0
    cnt = 0
    che_li = []
    for i in range(N):
        d, p = mi()
        che_li.append([d, p])
    che_li = sorted(che_li, reverse=True, key=lambda x: x[1])
    for li in che_li:
        tmp = li[0]
        if tmp <= M:
            M -= tmp
        else:
            ans += (tmp - M) * li[1]
            M = 0
    print(ans)


