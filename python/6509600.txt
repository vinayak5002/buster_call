const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
	let pair = si[0].split(" ");
	let n = Number(pair[0]);
	let q = Number(pair[1]);

	let ll = new Array(n);
	for (let i = 0; i < n; i++) {//双方向連結リストをn個作成
		ll[i] = new LinkedList;
	}
	
	for (let i = 0; i < q; i++) {
		pair = si[i + 1].split(" ");
		let leftN = Number(pair[0]);
		let midN = Number(pair[1]);
		let rightN = Number(pair[2]);
		
		switch (leftN) {
			case 0:
				ll[midN].push(rightN);				
				//ll[midN].printList();// forDebug
				break;

			case 1:
				//console.log("at line " + (i + 2) + " [" + ll[midN] + "] length = " + ll[midN].length)// forDebug
				ll[midN].printList();
				break;

			case 2:
				//console.log("at line " + (i + 2) + " " + ll[midN] + " length = " + array[midN].length)// forDebug
				ll[midN].splice(ll[rightN]);
				ll[midN].reset();
				//console.log("at line " + (i + 2) + " " + ll[rightN] + " length = " + array[midN].length)// forDebug
				break;
		}
	}
}


class Node {
	constructor(data) {
		this.data = data;
		this.next = null;
		this.prev = null;
	}
}

class LinkedList {
	constructor() {
		this.length = 0;
		this.head = new Node(null);
		this.end = new Node(null);
		this.end.prev = this.head;
		this.head.next = this.end;
		//this.cur = this.end
	}
	
	push(x) {// 末尾に整数xを挿入する.
		let node = new Node(x);
		node.next = this.end;// 挿入された要素からのリンク
		node.prev = this.end.prev;
		this.end.prev.next = node;// 挿入された要素へのリンク
		this.end.prev = node;
		this.length++;
	}
	
	splice(spl) {// リストsplに後続させる
		let list = spl;
		this.head.next.prev = list.end.prev;
		this.end.prev.next = list.end;
		list.end.prev.next = this.head.next;
		list.end.prev = this.end.prev;
		list.length = 0;
	}
	
	reset() {// リスト内ノードを一括削除
		this.head.next = this.end;
		this.end.prev = this.head;
	}
	
	
	
// Helper Methods
	indexOf(data) {// 要素の番地を返す. 見つからなかった場合, -1を返す.
		let count = 0;
		let current = this.head;
		while (current != null) {// 末端まで要素を探索する.
			if (current.data === data) {
				return count;
			}
			count++;
			current = current.next;
		}
		return -1;
	}
	endPrev() {// 末尾の要素を返す
		console.log(this.end.prev.data)
	}

	isEmpty() {// 要素が空の時。trueを返す
		return this.length == 0;
	}

	printList() {// 要素一覧を出力する
		let current = this.head.next;
		let str = "";
		while (current != this.end) {
			str += current.data + " ";
			current = current.next;
		}
		console.log(str);
	}
}

