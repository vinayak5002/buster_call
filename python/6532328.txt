using System;
using static System.Console;
using System.Collections.Generic;

class Program {

    static void Main (string[] args) {
        while (true) {
            var tmp = ReadLine().Split(' ');
            int N = int.Parse(tmp[0]);
            int M = int.Parse(tmp[1]);
            if (N == 0 && M == 0) {
                break;
            }
            var harr = new int[N + 1];
            var warr = new int[M + 1];

            harr[1] = int.Parse(ReadLine());
            for (int i = 1; i < N; i++) {
                harr[i + 1] = harr[i] + int.Parse(ReadLine());
            }
            warr[1] = int.Parse(ReadLine());
            for (int i = 1; i < M; i++) {
                warr[i + 1] = warr[i] + int.Parse(ReadLine());
            }

            var hdict = new Dictionary<int, int>();
            var wdict = new Dictionary<int, int>();

            for (int i = 0; i < N; i++) {
                for (int j = i + 1; j < N + 1; j++) {
                    int len = harr[j] - harr[i];
                    if (hdict.ContainsKey(len)) {
                        hdict[len] = hdict[len] + 1;
                    } else {
                        hdict.Add(len, 1);
                    }
                }
            }

            for (int i = 0; i < M; i++) {
                for (int j = i + 1; j < M + 1; j++) {
                    int len = warr[j] - warr[i];
                    if (wdict.ContainsKey(len)) {
                        wdict[len] = wdict[len] + 1;
                    } else {
                        wdict.Add(len, 1);
                    }
                }
            }

            long ans = 0;
            foreach (KeyValuePair<int, int> kvp in hdict) {
                if (wdict.ContainsKey(kvp.Key)) {
                    ans += kvp.Value * wdict[kvp.Key];
                }
            }
            
            WriteLine(ans);
        }

    }
}
//dotnet run --project test
