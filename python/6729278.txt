use std::collections::HashMap;
use std::io;

fn parse_index_to_card_mark(n: usize) -> &'static str {
    if n == 0 {
        return "S";
    } else if n == 1 {
        return "H";
    } else if n == 2 {
        return "C";
    } else {
        return "D";
    }
}

fn main() {
    let CARD_IS_EXISTS = 1;
    let mut s = String::new();
    io::stdin().read_line(&mut s).expect("Error");
    let n: usize = s.trim().parse().unwrap_or(0);

    let mut card_list = vec![];
    for i in 0..13 {
        card_list.push(0)
    }

    let mut type_card_list = vec![];

    // 0: S
    // 1: H
    // 2: C
    // 3: D
    for i in 0..4 {
        type_card_list.push(card_list.clone());
    }

    let mut mark_hash = HashMap::new();
    mark_hash.insert("S".to_owned(), 0);
    mark_hash.insert("H".to_owned(), 1);
    mark_hash.insert("C".to_owned(), 2);
    mark_hash.insert("D".to_owned(), 3);

    for i in 0..n {
        let mut s = String::new();
        io::stdin().read_line(&mut s).expect("Error");
        let card_str: Vec<&str> = s.split_whitespace().collect();
        let card_mark = card_str[0];
        let card_number: usize = card_str[1].parse().unwrap_or(0);
        type_card_list[mark_hash[card_mark]][card_number - 1] = CARD_IS_EXISTS;
    }

    for i in 0..4 {
        for j in 0..13 {
            if type_card_list[i][j] != CARD_IS_EXISTS {
                let mark = parse_index_to_card_mark(i);
                println!("{} {}", mark, j + 1);
            }
        }
    }
}

