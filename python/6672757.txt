
#include <iostream>
#include <math.h>
#include <vector>
#include <string>
#include <iomanip>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
//#include <unordered_set>
//#include <unordered_map>
using namespace std;

#undef SHRT_MIN
#undef SHRT_MAX
#undef USHRT_MAX
#undef INT_MIN
#undef UINT_MAX
#undef LONG_MIN
#undef LONG_MAX
#undef ULONG_MAX
#undef LLONG_MAX
#undef LLONG_MIN
#undef ULLONG_MAX
#define SHRT_MIN    (-32768)
#define SHRT_MAX      32767
#define USHRT_MAX     0xffff
#define INT_MIN     (-2147483647 - 1)
#define INT_MAX       2147483647
#define UINT_MAX      0xffffffff
#define LONG_MIN    (-2147483647L - 1)
#define LONG_MAX      2147483647L
#define ULONG_MAX     0xffffffffUL
#define LLONG_MAX     9223372036854775807
#define LLONG_MIN   (-9223372036854775807 - 1)
#define ULLONG_MAX    0xffffffffffffffffu

#define vecALL(vec) (vec).begin() , (vec).end() 

#define vecSORT(vec) sort(vecALL(vec))
#define vecrSORT(vec) sort(vec.rbegin(), vec.rend())

#define coutALL(vec) for(size_t dklj=0;dklj<vec.size();dklj++){cout<<vec[dklj]<<" ";}

typedef long long llong;
typedef unsigned long long ullong;

//オーバーフロー対策
#define int llong
#define uint ullong
vector<vector<int> >dp;//dp[l][r]->区間[l,r)で取り除くことが出来るブロックの数
vector<int>w;
int KukanDP(int l, int r) {
	if (dp[l][r] != -1) {//計算済み
		return dp[l][r];
	}
	if (abs(l - r) <= 1)return 0;//これ以上取り除けない
	int ret = 0;

	//パターン1(lとr-1のブロックがそれぞれ対になれる)
	//[l][......][r]の内、[......]が弾きだせ、[l][r]も弾きだせる
	if (abs(w[l] - w[r - 1]) <= 1 && KukanDP(l + 1, r - 1) == r - l - 2) {
		ret = r - l;//[l,r)を弾きだせる
	}
	
	for (int mid = l + 1; mid <= r - 1; mid++) {
		ret = max(ret, KukanDP(l, mid) + KukanDP(mid, r));
	}

	return dp[l][r] = ret;
}
signed main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	vector<int>Anss;
	while (true) {
		int N; cin >> N;
		if (N == 0)break;
		w.clear();
		dp.clear();
		w = vector<int>(N);
		for (int i = 0; i < N; i++)cin >> w[i];
		dp = vector<vector<int> >(N + 1, vector<int>(N + 1, -1));
		Anss.emplace_back(KukanDP(0, N));
	}
	for (int i = 0; i < Anss.size(); i++) {
		cout << Anss[i] << endl;
	}
	return 0;
}
