class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

class bst:#binary search tree

    def __init__(self, value):
        self.root = Node(value)

    def insert(self, value):
        node = self.root
        if node == None:
            self.root = Node(value)
            return
        else:
            while True:
                if node.value > value:
                    if node.left == None:
                        node.left = Node(value)
                        return
                    node = node.left
                elif node.value < value:
                    if node.right == None:
                        node.right = Node(value)
                        return

                else:
                    node.value = value
                    return


def pre_order(self, tree):#先行
    if tree != None:
        print('',node,end='')
        pre_order(tree.left)
        pre_order(tree.right)

def in_order(self, tree):
    if tree != None:
        in_order(tree.left)
        print('',node,end='')
        in_order(tree.right)


            

N = int(input())


for i in range(N):
    ope = input()
    if ope == 'insert':
        node = int(input())
        tree = bst(node)
    elif ope == 'print':
        tree.in_order(tree.root)
        tree.pre_order(tree.root)
    
    

