// #include "atcoder/all"
#include <iostream> // cout, endl, cin
#include <string> // string, to_string, stoi
#include <vector> // vector
#include <algorithm> // min, max, swap, sort, reverse, lower_bound, upper_bound
#include <utility> // pair, make_pair
#include <tuple> // tuple, make_tuple
#include <cstdint> // int64_t, int*_t
#include <cstdio> // printf
#include <map> // map
#include <queue> // queue, priority_queue
#include <set> // set
#include <stack> // stack
#include <deque> // deque
#include <unordered_map> // unordered_map
#include <unordered_set> // unordered_set
#include <bitset> // bitset
#include <cctype> // isupper, islower, isdigit, toupper, tolower
#include <iomanip> // setprecision
#include <complex> // complex
#include <math.h>
#include <functional>
#include <cassert>
using namespace std;
// using namespace atcoder;
using ll = long long;
using P = pair<ll,ll>;
constexpr ll INF = 1e18;
constexpr ll LLMAX = 9223372036854775807;
constexpr int inf = 1e9;
// constexpr ll mod = 1000000007;
constexpr ll mod = 998244353;
// 右下左上
const int dx[8] = {1, 0, -1, 0,1,1,-1,-1};
const int dy[8] = {0, 1, 0, -1,1,-1,1,-1};
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
ll gcd(ll a,ll b){if(b==0){return a;}else{return gcd(b,a%b);}};
#define eb emplace_back
#define pb pop_back
#define eol endl
// ---------------------------------------------------------------------------

bool solve(){
    ll N;
    cin >> N;
    if(N == 0) return false;
    vector<ll> W(N);
    for(int i=0; i<N; i++) cin >> W[i];
    vector<vector<ll>> dp(N+1,vector<ll>(N+1,0));
    for(int k=2; k<=N; k++){
        for(int l=0; l<N; l++){
            int r = l+k;
            if(r > N) break;
            if(abs(W[l]-W[r-1]) <= 1 && dp[l+1][r-1]==(r-1)-(l+1)){
                chmax(dp[l][r],dp[l+1][r-1]+2);
            }
            for(int m=l; m<r; m++){
                chmax(dp[l][r],dp[l][m]+dp[m][r]);
                // if(dp[l][m] && dp[m][r]){
                //     // cout << l <<" " << m << " " << r << endl;
                //     dp[l][r] = true;
                // }
            }
        }
    }
    // for(int i=0; i<=N; i++){
    //     for(int j=0; j<=N; j++){
    //         cout << dp[i][j] << " \n"[j==N];
    //     }
    // }
    cout << dp[0][N] << endl;
    return true;
}


int main(){
    while(solve());
    return 0;
}
