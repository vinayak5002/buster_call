import java.io.*;
import java.util.*;

public class Main {

	private static Scanner sc;
	private static Printer pr;

	// AOJ GRL_4_B Topological Sort
	private static void solve() {
		int v = sc.nextInt();
		int e = sc.nextInt();

		Graph g = Graph.newInstance(v);

		for (int i = 0; i < e; i++) {
			int s = sc.nextInt();
			int t = sc.nextInt();

			g.addEdge(s, t);
		}

		for (int i = 0; i < v; i++) {
			if (g.used[i] != 0) {
				continue;
			}

			g.dfs(i);
		}

		Collections.reverse(g.ts);

		for (int ee : g.ts) {
			pr.println(ee);
		}
	}

	static class Graph {
		int n;
		List<List<Integer>> edges;

		int[] used;
		int[] d;
		int[] f;
		int[] p;
		int[] low;
		int clock;
		boolean DAG;
		List<Integer> ts;

		private Graph(List<List<Integer>> edges) {
			n = edges.size();
			this.edges = edges;

			used = new int[n]; // 0:White, 1-:Gray, -1:Black
			d = new int[n]; // 発見時刻
			f = new int[n]; // 終了時刻
			p = new int[n]; // 親
			low = new int[n]; // lowlink
			clock = 0;
			DAG = true;
			ts = new ArrayList<>(n); // 終了時刻順
		}

		static Graph newInstance(int n) {
			List<List<Integer>> edges = new ArrayList<>(n);
			for (int i = 0; i < n; i++) {
				edges.add(new ArrayList<>());
			}

			return new Graph(edges);
		}

		static Graph newInstance(List<List<Integer>> edges) {
			return new Graph(edges);
		}

		void addEdge(int i, int j) {
			edges.get(i).add(j);
		}

		void addUndirectedEdge(int i, int j) {
			edges.get(i).add(j);
			edges.get(j).add(i);
		}

		void dfs(int s) {
			Deque<Integer> st = new ArrayDeque<>();
			st.push(s);
			p[s] = -1;
			while (!st.isEmpty()) {
				int e = st.peek();

				if (used[e] == 0) {
					// preorder
					d[e] = ++clock;
					used[e]++;
					low[e] = d[e];
				}

				List<Integer> ee = edges.get(e);
				if (used[e] <= ee.size()) {
					int next = ee.get(used[e]++ - 1);
					if (used[next] == 0) {
						// 木辺
						st.push(next);
						p[next] = e;
					} else if (used[next] > 0) {
						// 後退辺
						DAG = false;
						low[e] = Math.min(low[e], d[next]);
					} else {
						// 前進辺または横断辺
					}
				} else {
					// postorder
					used[e] = -1;
					f[e] = ++clock;
					if (p[e] >= 0) {
						low[p[e]] = Math.min(low[p[e]], low[e]);
					}
					ts.add(e);
					st.pop();
				}
			}
		}
	}

	// ---------------------------------------------------
	public static void main(String[] args) {
		sc = new Scanner(System.in);
		pr = new Printer(System.out);

		solve();

		pr.close();
		sc.close();
	}

	static class Scanner {
		private BufferedReader br;

		Scanner (InputStream in) {
			br = new BufferedReader(new InputStreamReader(in));
		}

		private boolean isPrintable(int ch) {
			return ch >= '!' && ch <= '~';
		}

		private boolean isCRLF(int ch) {
			return ch == '\n' || ch == '\r' || ch == -1;
		}

		private int nextPrintable() {
			try {
				int ch;
				while (!isPrintable(ch = br.read())) {
					if (ch == -1) {
						throw new NoSuchElementException();
					}
				}

				return ch;
			} catch (IOException e) {
				throw new NoSuchElementException();
			}
		}

		String next() {
			try {
				int ch = nextPrintable();
				StringBuilder sb = new StringBuilder();
				do {
					sb.appendCodePoint(ch);
				} while (isPrintable(ch = br.read()));

				return sb.toString();
			} catch (IOException e) {
				throw new NoSuchElementException();
			}
		}

		int nextInt() {
			try {
				// parseInt from Integer.parseInt()
				boolean negative = false;
				int res = 0;
				int limit = -Integer.MAX_VALUE;
				int radix = 10;

				int fc = nextPrintable();
				if (fc < '0') {
					if (fc == '-') {
						negative = true;
						limit = Integer.MIN_VALUE;
					} else if (fc != '+') {
						throw new NumberFormatException();
					}
					fc = br.read();
				}
				int multmin = limit / radix;

				int ch = fc;
				do {
					int digit = ch - '0';
					if (digit < 0 || digit >= radix) {
						throw new NumberFormatException();
					}
					if (res < multmin) {
						throw new NumberFormatException();
					}
					res *= radix;
					if (res < limit + digit) {
						throw new NumberFormatException();
					}
					res -= digit;

				} while (isPrintable(ch = br.read()));

				return negative ? res : -res;
			} catch (IOException e) {
				throw new NoSuchElementException();
			}
		}

		long nextLong() {
			try {
				// parseLong from Long.parseLong()
				boolean negative = false;
				long res = 0;
				long limit = -Long.MAX_VALUE;
				int radix = 10;

				int fc = nextPrintable();
				if (fc < '0') {
					if (fc == '-') {
						negative = true;
						limit = Long.MIN_VALUE;
					} else if (fc != '+') {
						throw new NumberFormatException();
					}
					fc = br.read();
				}
				long multmin = limit / radix;

				int ch = fc;
				do {
					int digit = ch - '0';
					if (digit < 0 || digit >= radix) {
						throw new NumberFormatException();
					}
					if (res < multmin) {
						throw new NumberFormatException();
					}
					res *= radix;
					if (res < limit + digit) {
						throw new NumberFormatException();
					}
					res -= digit;

				} while (isPrintable(ch = br.read()));

				return negative ? res : -res;
			} catch (IOException e) {
				throw new NoSuchElementException();
			}
		}

		float nextFloat() {
			return Float.parseFloat(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			try {
				int ch;
				while (isCRLF(ch = br.read())) {
					if (ch == -1) {
						throw new NoSuchElementException();
					}
				}
				StringBuilder sb = new StringBuilder();
				do {
					sb.appendCodePoint(ch);
				} while (!isCRLF(ch = br.read()));

				return sb.toString();
			} catch (IOException e) {
				throw new NoSuchElementException();
			}
		}

		int[] nextIntArray(int n) {
			int[] ret = new int[n];
			for (int i = 0; i < n; i++) {
				ret[i] = sc.nextInt();
			}

			return ret;
		}

		long[] nextLongArray(int n) {
			long[] ret = new long[n];
			for (int i = 0; i < n; i++) {
				ret[i] = sc.nextLong();
			}

			return ret;
		}

		/**
		 * n行m列のデータをa[m][n]の配列に読み込む
		 */
		int[][] nextIntArrays(int m, int n) {
			int[][] ret = new int[m][n];
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < m; j++) {
					ret[j][i] = sc.nextInt();
				}
			}

			return ret;
		}

		void close() {
			try {
				br.close();
			} catch (IOException e) {
//				throw new NoSuchElementException();
			}
		}
	}

	static class Printer extends PrintWriter {
		Printer(PrintStream out) {
//			super(new BufferedWriter(new OutputStreamWriter(out)), true);
			super(new BufferedWriter(new OutputStreamWriter(out)));
//			super(out);
		}

		void printInts(int... a) {
			StringBuilder sb = new StringBuilder(32);
			for (int i = 0, size = a.length; i < size; i++) {
				if (i > 0) {
					sb.append(' ');
				}
				sb.append(a[i]);
			}

			println(sb);
		}

		void printLongs(long... a) {
			StringBuilder sb = new StringBuilder(64);
			for (int i = 0, size = a.length; i < size; i++) {
				if (i > 0) {
					sb.append(' ');
				}
				sb.append(a[i]);
			}

			println(sb);
		}

		void printStrings(String... a) {
			StringBuilder sb = new StringBuilder(32);
			for (int i = 0, size = a.length; i < size; i++) {
				if (i > 0) {
					sb.append(' ');
				}
				sb.append(a[i]);
			}

			println(sb);
		}
	}
}

