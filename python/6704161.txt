//#define _GLIBCXX_DEBUG
#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
using namespace std;
#if __has_include(<atcoder/all>)
#include <atcoder/all>
using namespace atcoder;
using mint = modint1000000007;
#endif
using ll = long long;
using ld = long double;
using vi = vector<int>;
using vll = vector<ll>;
using vvi = vector<vector<int>>; 
using vvll = vector<vector<ll>>;
const ll INF = 1ll<<60;
const ld EPS = 1.0/1e9;
#define endl "\n"
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define rrep(i,a,b) for(ll i=a;i>=b;i--)
#define fore(i,a) for(auto &i:a)
#define repi(itr, ds) for (auto itr = ds.begin(); itr != ds.end(); itr++)
#define all(x) (x).begin(),(x).end()
#define del(x) sort(all(x)); x.erase(unique(all(x)),x.end());

#define DEBUG_

template <typename T>
istream &operator>>(istream &is, vector<T> &vec) {
    for (T &x : vec) is >> x;
    return is;
}
template<typename T>
ostream& operator << (ostream &os, vector<T>& vec){
  os << "{";
  for(int i=0;i<vec.size();i++){
    os << vec[i] << (i+1==vec.size() ? "" : ", ");
  }
  os << "}";
  return os;
}
template <typename T, typename U>
ostream &operator<<(ostream &os, pair<T, U> &pair_var) {
    os << "(" << pair_var.first << ", " << pair_var.second << ")";
    return os;
}
template <typename T, typename U>
ostream &operator<<(ostream &os, map<T, U> &map_var) {
    os << "{";
    repi(itr, map_var) {
        os << *itr;
        itr++;
        if (itr != map_var.end()) os << ", ";
        itr--;
    }
    os << "}";
    return os;
}
template <typename T>
ostream &operator<<(ostream &os, set<T> &set_var) {
    os << "{";
    repi(itr, set_var) {
        os << *itr;
        itr++;
        if (itr != set_var.end()) os << ", ";
        itr--;
    }
    os << "}";
    return os;
}

#define DUMPOUT cerr

void dump_func() {
    DUMPOUT << endl;
}
template <class Head, class... Tail>
void dump_func(Head &&head, Tail &&... tail) {
    DUMPOUT << head;
    if (sizeof...(Tail) > 0) {
        DUMPOUT << ", ";
    }
    dump_func(std::move(tail)...);
}
#ifdef DEBUG_
#define DEB
#define dump(...)                                                              \
    DUMPOUT << "  " << string(#__VA_ARGS__) << ": "                            \
            << "[" << to_string(__LINE__) << ":" << __FUNCTION__ << "]"        \
            << endl                                                            \
            << "    ",                                                         \
        dump_func(__VA_ARGS__)
#else
#define DEB if (false)
#define dump(...)
#endif

struct Edge{
    long long to; 
};

using Graph = vector<vector<Edge>>;

struct LCA{
    vector<vector<int>>parent;
    vector<int>dist;
    LCA(const Graph &G,int root=0){
        init(G,root);
    }
    void init(const Graph &G,int root){
        int n = G.size();
        int logk = 1;
        while((1<<logk)<n) logk++;
        parent.assign(logk,vector<int>(n,-1));
        dist.assign(n,-1);
        dfs(G,root,-1,0);
        for(int k=0;k<logk-1;k++){
            for(int v=0;v<n;v++){
                if(parent[k][v]<0){
                    parent[k+1][v]=-1;
                }
                else{
                    parent[k+1][v]=parent[k][parent[k][v]];
                }
            }
        }
    }
    void dfs(const Graph &G,int v,int p,int d){
        parent[0][v]=p;
        dist[v]=d;
        for(auto e:G[v]) if(e.to!=p){
            dfs(G,e.to,v,d+1);
        }
    }

    int query(int u,int v){
        if(dist[u]<dist[v]) swap(u,v);
        int logk=parent.size();
        for(int k=0;k<logk;k++){
            if((dist[u]-dist[v])>>k&1){
                u = parent[k][u];
            }
        }
        if(u==v) return u;
        for(int k=logk-1;k>=0;k--){
            if(parent[k][u]!=parent[k][v]){
                u = parent[k][u];
                v = parent[k][v];
            }
        }
        return parent[0][u];
    }
};

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll n;  cin >> n;
    Graph G(n);
    rep(i,0,n){
        ll k; cin >> k;
        rep(_,0,k){
            ll c; cin >> c;
            G[i].push_back({c});
            G[c].push_back({i});
        }
    }
    LCA lca(G,0);
    ll q; cin >> q;
    while(q--){
        ll u,v; cin >> u >> v;
        cout << lca.query(u,v) << endl;
    }
}
