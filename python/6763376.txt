def sadia():

    if s_tag[x] == -1:
        s_tag[x] = 'jim_node'
    if s_tag[y] == -1:
        s_tag[y] = 'jim_node'

    x_tmp, y_tmp, Sx, Sy = jim()

    if x_tmp == y_tmp:
        pass
    elif Sx >= Sy:
        s_tag[y_tmp] = x_tmp
    else:
        s_tag[x_tmp] = y_tmp



def same():

    x_tmp, y_tmp, Sx, Sy = jim()

    if (s_tag[x] != 'jim_node' or s_tag[y] != 'jim_node') and x_tmp == y_tmp:
        rslt[k] = 1
    else:
        rslt[k] = 0



def jim():

    Sx, Sy = 0, 0
    x_tmp, y_tmp = x, y

    while s_tag[x_tmp] != 'jim_node' and s_tag[x_tmp] != -1:
        x_tmp = s_tag[x_tmp]
        Sx += 1

    while s_tag[y_tmp] != 'jim_node' and s_tag[y_tmp] != -1:
        y_tmp = s_tag[y_tmp]
        Sy += 1

    return x_tmp, y_tmp, Sx, Sy



def print_rslt():

    for i in range(k):
        print(rslt[i])



#main
n, q = list(map(int,input().split()))
s_tag = [-1] * (n+1)
rslt = [0] * q
k = 0

for i in range(q):
    qry, x, y= list(map(int,input().split()))

    if qry == 0:
        sadia()
    if qry == 1:
        same()
        k += 1

print_rslt()


