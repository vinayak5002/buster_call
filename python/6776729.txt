using System;
using System.Collections.Generic;
using System.Linq;
using CoderLib8.DataTrees.SBTs;
using CoderLib8.Graphs.Arrays;

class CBT
{
	static int[] Read() => Array.ConvertAll(Console.ReadLine().Split(), int.Parse);
	static void Main() => Console.WriteLine(Solve());
	static object Solve()
	{
		var n = Read()[0];
		var map = Array.ConvertAll(new bool[n], _ => Read().Skip(1).ToList());
		var qc = Read()[0];
		var qs = Array.ConvertAll(new bool[qc], _ => Read());

		var tree = new Tree(n, 0, map);
		var st = new MergeSBT<int>(tree.Tour.Count, new Monoid<int>((x, y) => tree.Depths[x] <= tree.Depths[y] ? x : y), tree.Tour);

		return string.Join("\n", qs.Select(q =>
		{
			var (u, v) = (q[0], q[1]);
			if (tree.TourMap[u][0] > tree.TourMap[v][0]) { var t = u; u = v; v = t; }
			if (tree.TourMap[u].Last() > tree.TourMap[v].Last()) return u;
			return st[tree.TourMap[u].Last(), tree.TourMap[v][0]];
		}));
	}
}

namespace CoderLib8.Graphs.Arrays
{
	public class Tree
	{
		static List<int>[] ToMap(int n, int[][] es, bool directed)
		{
			var map = Array.ConvertAll(new bool[n], _ => new List<int>());
			foreach (var e in es)
			{
				map[e[0]].Add(e[1]);
				if (!directed) map[e[1]].Add(e[0]);
			}
			return map;
		}

		public int Count { get; }
		public int Root { get; }
		public List<int>[] Map { get; }
		public int[] Depths { get; }
		public int[] Parents { get; }

		// この Euler Tour では方向を記録しません。
		// order -> vertex
		public List<int> Tour { get; }
		// vertex -> orders
		public List<int>[] TourMap { get; }

		public Tree(int n, int root, int[][] ues) : this(n, root, ToMap(n, ues, false)) { }
		public Tree(int n, int root, List<int>[] map)
		{
			Count = n;
			Root = root;
			Map = map;
			Depths = Array.ConvertAll(Map, _ => -1);
			Parents = Array.ConvertAll(Map, _ => -1);

			Tour = new List<int>();
			TourMap = Array.ConvertAll(Map, _ => new List<int>());

			Depths[root] = 0;
			Dfs(root, -1);
		}

		void Dfs(int v, int pv)
		{
			TourMap[v].Add(Tour.Count);
			Tour.Add(v);

			foreach (var nv in Map[v])
			{
				if (nv == pv) continue;
				Depths[nv] = Depths[v] + 1;
				Parents[nv] = v;
				Dfs(nv, v);

				TourMap[v].Add(Tour.Count);
				Tour.Add(v);
			}
		}
	}
}

namespace CoderLib8.DataTrees.SBTs
{
	public static class Monoid
	{
		public static Monoid<int> Int32_Add { get; } = new Monoid<int>((x, y) => x + y);
		public static Monoid<long> Int64_Add { get; } = new Monoid<long>((x, y) => x + y);
		public static Monoid<int> Int32_Min { get; } = new Monoid<int>((x, y) => x <= y ? x : y, int.MaxValue);
		public static Monoid<int> Int32_Max { get; } = new Monoid<int>((x, y) => x >= y ? x : y, int.MinValue);

		public static Monoid<int> Int32_ArgMin(int[] a) => new Monoid<int>((x, y) => a[x] <= a[y] ? x : y);

		public static Monoid<int> Int32_Update { get; } = new Monoid<int>((x, y) => x != -1 ? x : y, -1);
	}

	public struct Monoid<T>
	{
		public Func<T, T, T> Op;
		public T Id;
		public Monoid(Func<T, T, T> op, T id = default(T)) { Op = op; Id = id; }
	}

	// leaves-to-root segment binary tree
	[System.Diagnostics.DebuggerDisplay(@"Count = {Count}")]
	public class MergeSBT<TValue>
	{
		[System.Diagnostics.DebuggerDisplay(@"\{{Value}, Count = {Count}\}")]
		public class Node
		{
			public TValue Value;
			public int Count = 1;
			public Node Parent, Left, Right;
		}

		public Monoid<TValue> Merge { get; }
		Node[] Leaves;
		public int Count => Leaves.Length;
		Node Root;

		public MergeSBT(int n, Monoid<TValue> merge, IEnumerable<TValue> items = null)
		{
			Merge = merge;
			var a = items as TValue[] ?? items?.ToArray();
			if (a?.Length < n) throw new ArgumentException("", nameof(items));
			Leaves = new Node[n];
			for (int i = 0; i < n; ++i) Leaves[i] = new Node { Value = a != null ? a[i] : merge.Id };
			Root = CreateSubtree(0, n);
		}

		Node CreateSubtree(int l, int r)
		{
			if (r - l == 1) return Leaves[l];
			var m = (l + r) >> 1;
			var n = new Node
			{
				Count = r - l,
				Left = CreateSubtree(l, m),
				Right = CreateSubtree(m, r),
			};
			n.Left.Parent = n.Right.Parent = n;
			n.Value = Merge.Op(n.Left.Value, n.Right.Value);
			return n;
		}

		public TValue this[int index]
		{
			get => Leaves[index].Value;
			set
			{
				Leaves[index].Value = value;
				for (var n = Leaves[index].Parent; n != null; n = n.Parent)
					n.Value = Merge.Op(n.Left.Value, n.Right.Value);
			}
		}

		public TValue this[int left, int right] => left < right ? GetRange(Root, left, right) : Merge.Id;

		TValue GetRange(Node n, int l, int r)
		{
			if (l <= 0 && n.Count <= r) return n.Value;
			var lc = n.Left.Count;
			if (r <= lc) return GetRange(n.Left, l, r);
			if (lc <= l) return GetRange(n.Right, l - lc, r - lc);
			return Merge.Op(GetRange(n.Left, l, lc), GetRange(n.Right, 0, r - lc));
		}
	}
}

