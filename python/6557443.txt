{-# LANGUAGE Strict #-}
import Data.List (unfoldr)
import qualified Data.ByteString.Char8 as BS

solve :: [Int] -> Int
solve xs = (\(_,a,_) -> a) $ divide 1 0 xs

divide :: Int -> Int -> [Int] -> (Int,Int,[Int])
divide size count xs
  | n < 2     = (size,count,xs)
  | otherwise = conq (divide size count xl) (divide size count xr)
  where
    n = length xs
    (xl,xr) = splitAt (n `div` 2) xs

conq :: (Int,Int,[Int]) -> (Int,Int,[Int]) -> (Int,Int,[Int])
conq (s1,c1,[]) (s2,c2,ys) = (s1+s2,c1+c2,ys)
conq (s1,c1,xs) (s2,c2,[]) = (s1+s2,c1+c2,xs)
conq (s1,c1,x:xs) (s2,c2,y:ys)
  | y < x     = f x $ conq (s1-1,c1+s2,xs) (s2,c2,y:ys)
  | otherwise = f y $ conq (s1,c1,x:xs)    (s2-1,c2,ys)
  where
    f a (b,c,d) = (b+1,c,a:d)

main :: IO ()
main = getLine >> BS.getLine >>=
  print . solve . unfoldr (BS.readInt . BS.dropWhile (' ' ==))
