package main

import (
	"bufio"
	"container/heap"
	"fmt"
	"os"
	"strconv"
	"strings"
)

type intHeap []int

func (h intHeap) Len() int           { return len(h) }
func (h intHeap) Less(i, j int) bool { return h[i] > h[j] }
func (h intHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }
func (h *intHeap) Push(x interface{}) {
	*h = append(*h, x.(int))
}
func (h *intHeap) Pop() interface{} {
	old := *h
	n := len(old)
	x := old[n-1]
	*h = old[0 : n-1]
	return x
}

func (h *intHeap) isEmpty() bool {
	return len(*h) == 0
}

func main() {
	var s string
	sc := bufio.NewScanner(os.Stdin)

	q := &intHeap{}
	heap.Init(q)

	var ans []int
	for s != "end" {
		fmt.Println(q)
		sc.Scan()
		s = sc.Text()

		if s == "extract" {
			if q.isEmpty() {
				return
			}
			pop := heap.Pop(q)
			ans = append(ans, pop.(int))
		}
		values := strings.Split(s, " ")

		if values[0] == "insert" {
			t, _ := strconv.Atoi(values[1])
			heap.Push(q, int(t))
		}

	}

	for _, v := range ans {
		fmt.Println(v)
	}
}

