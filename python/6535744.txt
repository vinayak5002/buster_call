const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {
	const n = parseInt(si[0].split('\n'));
	let mask = new Array(n);
	for (let i = 1; i < n + 1; i++) {
		let order = si[i].split(" ");
		let k = Number(order[0]);
		mask[i - 1] = new Array(k);
		for (let j = 0; j < k; j++) {
			mask[i - 1][j] = Number(order[j + 1]);
		}
	}
	//console.log(mask);
	const q = parseInt(si[n + 1].split("\n"));
	const BIT_NUM = 64;
	const ON = Array(BIT_NUM).fill('1');
	const OFF = Array(BIT_NUM).fill('0');
	let flag = Array(BIT_NUM).fill('0');
	let ans = '';
	
	for (let i = n + 2; i < n + q + 2; i++) {
		let order = si[i].split(" ");
		let check = '1';
		switch (order[0]) {
			case '0':	//test
				ans += flag[order[1]] + '\n';
				break;
				
			case '1':	//set
				for (let j = 0; j < mask[order[1]].length;j++) {
					flag[mask[order[1]][j]] = '1'; 
				}
				break;
				
			case '2':	//clear
				for (let j = 0; j < mask[order[1]].length;j++) {
					flag[mask[order[1]][j]] = '0'; 
				}
				break;
				
			case '3':	//flip
				for (let j = 0; j < mask[order[1]].length;j++) {
					if (flag[mask[order[1]][j]] === '1') {
						flag[mask[order[1]][j]] = '0';
					} else {
						flag[mask[order[1]][j]] = '1';
					}
				}
				break;
				
			case '4':	//all
				for (let j = 0; j < mask[order[1]].length;j++) {
					if (flag[mask[order[1]][j]] !== '1') {
						check = '0';
						break;
					}
				}
				ans += check + '\n';
				break;
				
			case '5':	//any
				check = '0';
				for (let j = 0; j < mask[order[1]].length;j++) {
					if (flag[mask[order[1]][j]] === '1') {
						check = '1';
						break;
					}
				}
				ans += check + '\n';
				break;
				
			case '6':	//none
				for (let j = 0; j < mask[order[1]].length;j++) {
					if (flag[mask[order[1]][j]] !== '0') {
						check = '0';
						break;
					}
				}
				ans += check + '\n';
				break;
				
			case '7':	//count
				let count = 0;
				for (let j = 0; j < mask[order[1]].length;j++) {
					count += Number(flag[mask[order[1]][j]]);
				}
				ans += count + '\n';
				break;
				
			case '8':	//val
			let num = [];
			let tail = 0;
			for (let j = mask[order[1]].length - 1; j >= 0;j--) {
				num += flag[mask[order[1]][j]];
				if (flag[mask[order[1]][j]] === '1') {
					tail += Ruijo(mask[order[1]][j]);
				}
			}

			num = parseInt(num, 2)
			
			tail = String(tail).slice(-7);
			num = String(num).slice(0, -tail.length);
			if (num === '0') {
				num = String(tail)
			} else {
				num += String(tail)
			}
			ans += num + '\n';
				break;
		}

		//so.write(flag + '\n');
	}

	so.write(ans);

}

function Ruijo(num) {
	if (num === 0) {
		return 1;
	}
	let data = 2;

	for (let i = 1; i < num; i++) {
		data *= 2;
		data %= 10000000;
	}

	return data;
}
