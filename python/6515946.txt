from math import inf

rxs = lambda: map(int, input().split())
N, Q = rxs()
Qs = [tuple(rxs()) for _ in range(Q)]

m = 1
while m < N:
    m *= 2

u_tree = [None] * (2*m-1)
f_tree = [(1<<31)-1] * (2*m-1)

def update(s, t, x, node=0, lft=0, rht=m):
    if t <= lft or  rht <= s: return f_tree[node]
    if s <= lft and rht <= t:
        u_tree[node] = f_tree[node] = x
        # print(f"u[{node}]=f[{node}]={x}")
        # print(f"u={u_tree}")
        # print(f"f={f_tree}")
        return x
    mid = (lft+rht)//2
    if u_tree[node] != None:
        z, u_tree[node] = u_tree[node], None
        # print(f"u[{node}]=None")
        # print(f"u={u_tree}")
        # print(f"f={f_tree}")
        update(lft, mid, z, 2*node+1, lft, mid)
        update(mid, rht, z, 2*node+2, mid, rht)
    a = update(s, t, x, 2*node+1, lft, mid)
    b = update(s, t, x, 2*node+2, mid, rht)
    f_tree[node] = min(a, b)
    # print(f"f[{node}]={f_tree[node]}")
    # print(f"u={u_tree}")
    # print(f"f={f_tree}")
    return f_tree[node]

def find(s, t, node=0, lft=0, rht=m):
    if t <= lft or  rht <= s: return inf
    if s <= lft and rht <= t: return f_tree[node]
    mid = (lft+rht)//2
    return min(
        find(s, t, node*2+1, lft, mid),
        find(s, t, node*2+2, mid, rht),
    )

for q in Qs:
    if q[0] == 0:
        # print(f"update({q[1]}, {q[2]+1}, {q[3]})")
        update(q[1], q[2]+1, q[3])
    else:
        # print(f"u={u_tree}")
        # print(f"f={f_tree}")
        print(find(q[1], q[2]+1))


