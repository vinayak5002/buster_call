require('readline')
  .createInterface({ input: process.stdin })
  .on('line', (line) => main(line, process.stdout))
// .on('close', () => main(stdin, process.stdout))

/**
 * 
 * @param {string} str 
 * @returns {string} padded string
 */
function padStart32(str) {
  return (str + '0'.repeat(32)).slice(-32)
}

/**
 * 
 * @param {string} line 
 * @param {NodeJS.WriteStream} so 
 */
function main(line, so) {

  const [a, b] = line.split(' ').map(s => {
    const buf = new Uint8Array(4)
    let num = Number(s)
    for(let i = 0; num != 0; i++) {
      buf[i] = num & 0xFF
      num <<= 8
    }
    return buf
  })

  const band = Buffer.from(a.map((_, i) => a[i] & b[i]))
  const bor = Buffer.from(a.map((_, i) => a[i] | b[i]))
  const bxor = Buffer.from(a.map((_, i) => a[i] ^ b[i]))

  so.write(padStart32(band.readUint32BE().toString(2)) + '\n');
  so.write(padStart32(bor.readUint32BE().toString(2)) + '\n');
  so.write(padStart32(bxor.readUint32BE().toString(2)) + '\n');
}

