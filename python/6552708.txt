typedef long long ll;
#include <bits/stdc++.h>

using namespace std;

template < typename T > std::string to_string( const T& n )
    {
        std::ostringstream stm ;
        stm << n ;
        return stm.str() ;
    }

struct Node {
    int parent;
    int child_len;
    vector<int> child;
    Node(){
		parent = -1;
		child_len = 0;
	}
};

int main(){
    int n;
    cin >> n;
    vector<Node> tree(n);
    for(int i = 0; i < n; i++){
        Node node;
        tree.at(i) = node;
    }
    for(int i = 0; i < n; i++){
        int id, k;
        cin >> id >> k;
        tree.at(id).child_len = k;
        for(int j = 0; j < k; j++){
            int c;
            cin >> c;
            tree.at(id).child.push_back(c);
            tree.at(c).parent = id;
        }
    }
    for(int i = 0; i < n; i++){
        cout << "node " << i << ": parent = ";
        string child = "";
        for(int j = 0; j < tree.at(i).child_len; j++){
            child = child + to_string(tree.at(i).child.at(j)) + ", ";
        }
        if(child != ""){
            child.erase(int(child.size()) - 2);
        }
        int parent = tree.at(i).parent;
        int depth = 0;
        while(parent != -1){
            depth++;
            parent = tree.at(parent).parent;
        }
        cout << tree.at(i).parent << ", depth = " << depth << ", ";
        if(child == "" && tree.at(i).parent != -1){
            cout << "leaf, []" << endl;
        }else{
            if(tree.at(i).parent == -1){
                cout << "root, [" + child + "]" << endl;
            }else{
                cout << "internal node, [" + child + "]" << endl;
            }
        }
    }
    return 0;
}

