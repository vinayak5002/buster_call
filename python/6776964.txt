//C program for Merge Sort 
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
//global declare for global variable counter;
int counter = 0;
void merge(int array[], int l, int m, int r)
  {  
	  int i, j, k,NUM1 = r - m , NUM2 = m - l + 1;
	  int RightArray[NUM1], LeftArray[NUM2];
	  for (i = 0; i < NUM2; i++)
      {
        LeftArray[i] = array[l + i];
      }
	  for (j = 0; j < NUM1; j++)
      {
        RightArray[j] = array[m + 1 + j];
      }
	  k = l;
	  j = 0;
    i = 0;
	  while (i < NUM2 && j < NUM1) 
      {
		    if (LeftArray[i] <= RightArray[j]) 
          {
			      array[k] = LeftArray[i];
			      i++;
		      }
		    else 
          {
			      array[k] = RightArray[j];
			      j++;
		      }
        counter++;
		    k++;
	    }
	  while (j < NUM1) 
      {
		    array[k] = RightArray[j];
		    j++;
        counter++;
        k++;
	    }
	  while (i < NUM2) 
      {
		    array[k] = LeftArray[i];
		    i++;
        counter++;
        k++;
	    }
  }
//main sorting function
void sorting(int array[], int r, int l)
  {
	  if (l < r) 
      {
		    int m = l + (r - l) / 2;
		    sorting(array,r ,m + 1);
        sorting(array, m, l);
		    merge(array, l, m, r);
	    }
  }
// main function data range check
int main()
  {
    int num_Array;
    scanf("%d",&num_Array);
    if (num_Array < 0 || num_Array >= 500001)
      {
        printf("Too much input \n ");
        return EXIT_FAILURE;      
      }
    int Main[num_Array];
    for(int i = 0; i < num_Array; i++)
      {
        int value_read = scanf("%d",&Main[i]);
        if (value_read != 1)
          {
            printf("Input error %d \n ", i);
            return EXIT_FAILURE;
          }
        if (Main[i] < 0 || Main[i] > pow(10,9))
          {
            printf("input exceed range from 0-10^9");
            return EXIT_FAILURE;
          }
      }
	  sorting(Main,num_Array - 1,0);
    for (int i = 0; i < num_Array; i++)
      {
        if (i == num_Array-1)
          {
            printf("%d",Main[i]);
          }
        else if (i != num_Array-1)
          {
            printf("%d ",Main[i]);
          }
      }
    printf("\n");
    printf("%d",counter);
    printf("\n");
	  return EXIT_SUCCESS;
  }
