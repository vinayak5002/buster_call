class UnionFind(object):
    def __init__(self, size):
        self.parent = [-1] * size

    def union(self, x, y):
        x, y = self.root(x), self.root(y)
        if x == y:
            return False
        if self.parent[x] > self.parent[y]:
            x, y = y, x
        self.parent[x] += self.parent[y]
        self.parent[y] = x
        return True

    def root(self, x):
        if self.parent[x] < 0:
            return x
        self.parent[x] = self.root(self.parent[x])
        return self.parent[x]

    def same(self, x, y):
        return self.root(x) == self.root(y)

    def size(self, x):
        return - self.parent[self.root(x)]

    def group_count(self):
        return [p < 0 for p in self.parent].count(True)


def solve(w, h):
    uf = UnionFind(w * h)
    for _ in range(w + h - 1):
        x, y, n = map(int, input().split())
        x, y = x-1, y-1
        uf.union(x, w+y)
    if uf.size(0) == (w + h):
        return True
    return False

def main():
    result = []
    while True:
        w, h = map(int, input().split())
        if w == h == 0:
            break
        result.append(solve(w, h))
    for res in result:
        print("YES" if res else "NO")

if __name__ == '__main__':
    main()
