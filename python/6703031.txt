using System;
using System.Collections.Generic;

class B2
{
	static void Main()
	{
		int n = int.Parse(Console.ReadLine());

		var r = new List<int>();
		var dq = new Deque<int>();

		for (int k = n; k > 0; k--)
		{
			var q = Array.ConvertAll(Console.ReadLine().Split(), int.Parse);
			if (q[0] == 0)
			{
				if (q[1] == 0) dq.PushFirst(q[2]);
				else dq.PushLast(q[2]);
			}
			else if (q[0] == 1)
			{
				r.Add(dq[q[1]]);
			}
			else
			{
				if (q[1] == 0) dq.PopFirst();
				else dq.PopLast();
			}
		}
		Console.WriteLine(string.Join("\n", r));
	}
}

public class Deque<T>
{
	static int ToPowerOf2(int n) { for (var p = 1; ; p <<= 1) if (p >= n) return p; }

	T[] a;
	int size, fi, li;
	public int Count => li - fi;
	int Mod(int i) => i & (size - 1);

	public Deque(int size = 8)
	{
		a = new T[this.size = ToPowerOf2(size)];
	}

	public T First => a[Mod(fi)];
	public T Last => a[Mod(li - 1)];
	public T this[int index]
	{
		get => a[Mod(fi + index)];
		set => a[Mod(fi + index)] = value;
	}

	public void PushFirst(T item)
	{
		if (Count == size) Expand();
		if (fi == 0) li += fi = size;
		a[Mod(--fi)] = item;
	}
	public void PushLast(T item)
	{
		if (Count == size) Expand();
		a[Mod(li++)] = item;
	}

	public T PopFirst() => a[Mod(fi++)];
	public T PopLast() => a[Mod(--li)];

	void Expand()
	{
		var c = Mod(fi);
		Array.Resize(ref a, size <<= 1);
		Array.Copy(a, 0, a, size >> 1, c);
	}
}

