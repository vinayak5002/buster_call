const input = 1 ? process.stdin : require('fs').createReadStream('./inp.txt')
const stdin = []
require('readline').createInterface({ input }).on('line', (line) => stdin.push(line)).on('close', () => main(stdin, process.stdout))
// 以下 main 内に処理を追加
function main(si, so) {

	const line = si[0].split(" ");
	let n = parseInt(line[0]);
	let q = parseInt(line[1]);
	let list = new List(n);
	

	for (let i = 1; i <= q; i++) {
		let order = si[i].split(" ");
		let values = [];
		let length = [];
		switch (order[0]) {
			case '0':
				list.insertLast(order[2],order[1]);
				break;
				
			case '1':
				values = list.getValue_all(order[1]);
				length = list.getLength(order[1]);
				let ans = "";
				for (let j = 0; j < length; j++) {
					ans += values[j];
					if (j < length - 1) {
						ans += ' ';
					}
				}
				ans += '\n';
				so.write(ans);
				break;
				
			case '2':
				s = parseInt(order[1]);
				t = parseInt(order[2]);
				list.moveNode(order[1], order[2]);
				break;
		}
	}
}


class Node {
	constructor(value) {
		this.data = value;
		this.prev = null;
		this.next = null;
	}

	getData() {
		return this.data;
	}
	
	getPrev() {
		return this.prev;
	}

	setPrev(node) {
		this.prev = node;
	}

	getNext() {
		return this.next;
	}

	setNext(node) {
		this.next = node;
	}
}

class List {
	constructor(num) {
		this.dummy = new Array(num);
		this.end = new Array(num);
		this.cursor = new Array(num);
		this.length = new Array(num);
		for (let i = 0; i < num; i++) {
			this.dummy[i] = new Node(null);
			this.end[i] = new Node(null);
			this.dummy[i].setNext(this.end);
			this.end[i].setPrev(this.dummy);
			this.cursor[i] = this.end[i];
			this.length[i] = 0;
		}
		
	}

	insertLast(vol, t) {
		let node = new Node(vol);
		node.setPrev(this.end[t].getPrev());
		node.setNext(this.end[t]);
		if (this.length[t] === 0) {
			this.dummy[t].setNext(node);
			this.end[t].setPrev(node);
		} else {
			this.end[t].prev.setNext(node);
			this.end[t].setPrev(node);
		}
		this.length[t]++;
		
	}
	
	deleteAll(t) {
		if (this.length[t] === 0) {
			return;
		}
		this.dummy[t].setNext(this.end[t]);
		this.end[t].setPrev(this.dummy[t]);
		this.length[t] = 0;
	}


	getValue_all(t) {
		if (this.length[t] === 0) {
			return;
		}

		let point = this.dummy[t];
		let values = [];
		for (let i = 0; i < this.length[t]; i++) {
			point = point.getNext();
			let data = point.getData();
			values.push(data);
		}
		return values;
	}
	
	moveNode(s, t) {
		if (this.length[s] === 0) {
			return;
		}
		if (this.length[t] === 0) {
			this.dummy[t].setNext(this.dummy[s].getNext());
			this.dummy[s].next.setPrev(this.dummy[t]);
			this.end[t].setPrev(this.end[s].getPrev());
			this.end[s].prev.setNext(this.end[t]);
		} else {
			this.end[t].prev.setNext(this.dummy[s].getNext());
			this.dummy[s].next.setPrev(this.end[t].getPrev());
			this.end[s].prev.setNext(this.end[t]);
			this.end[t].setPrev(this.end[s].getPrev());
		}
		
		this.dummy[s].setNext(this.end[s]);
		this.end[s].setPrev(this.dummy[s]);
		this.length[t] += this.length[s];
		this.length[s] = 0;
		
	}

	getLength(t) {
		return this.length[t];
	}
}
