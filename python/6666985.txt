import sys
import math
import bisect
from heapq import heapify, heappop, heappush
from collections import deque, defaultdict, Counter
from functools import lru_cache
from itertools import accumulate, combinations, permutations

sys.setrecursionlimit(1000000)
MOD = 10 ** 9 + 7
MOD99 = 998244353

input = lambda: sys.stdin.readline().strip()
NI = lambda: int(input())
NMI = lambda: map(int, input().split())
NLI = lambda: list(NMI())
SI = lambda: input()
SMI = lambda: input().split()
SLI = lambda: list(SMI())



def main():
    N, Q = NMI()

    INF = (1<<31) - 1

    b = len(bin(N-1)[2:])
    size = 1 << b

    tree = [INF] * size * 2

    def update(i, x):
        i += size
        l, r = i, i+1
        a = x
        while l > 0:
            tree[l] = a
            if l % 2:
                a = min(a, tree[l-1])
                l -= 1
            if r % 2:
                a = min(a, tree[r])
                r += 1
            l >>= 1
            r >>= 1


    def find(l, r):
        l += size
        r += size
        a = INF
        while l < r:
            if l % 2:
                a = min(a, tree[l])
                l += 1
            if r % 2:
                a = min(a, tree[r-1])
                r -= 1
            l >>= 1
            r >>= 1
        return a


    for _ in range(Q):
        c, x, y = NMI()
        if c == 0:
            update(x, y)
        else:
            y += 1
            print(find(x, y))



if __name__ == "__main__":
    main()

