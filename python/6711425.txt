// #define _GLIBCXX_DEBUG
#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define LLMAX numeric_limits<ll>::max()
#define LLMIN numeric_limits<ll>::min()
#define INTMAX numeric_limits<int>::max()
#define INTMIN numeric_limits<int>::min()
#define rep(i, n) for (decltype(n) i = 0; i < (n); i++)
#define rep1(i, n) for (decltype(n) i = 1; i <= (n); i++)
#define rep2(i, k, n) for (decltype(n) i = k; i <= (n); i++)
#define repr(i, n) for (decltype(n) i = (n)-1; i >= 0; i--)
#define repr1(i, n) for (decltype(n) i = (n); i > 0; i--)
#define repr2(i, k, n) for (decltype(n) i = n; i >= k; i--)
auto chmax = [](auto& a, auto b) {bool ret=a<b; if(ret)a=b; return ret; };
auto chmin = [](auto& a, auto b) {bool ret=a>b; if(ret)a=b; return ret; };
template <typename T> using pq_inv = priority_queue<T, vector<T>, greater<T>>;
vector<int> dd4={1, 0, -1, 0, 1};  // 4方位 rep(i,4) nh=h+dd4[i]; nw=w+dd4[i+1];
vector<int> dd8={1, 0, -1, 0, 1, 1,-1, -1, 1};  // 8方位 rep(i,8) nh=h+dd8[i]; nw=w+dd8[i+1];

struct Solver {
    void solve(int n){
        vector<int> S(60*60*23+59*60+59+1);
        rep(i,n){
            int h1,m1,s1,h2,m2,s2;
            scanf("%d:%d:%d %d:%d:%d",&h1,&m1,&s1,&h2,&m2,&s2);
            S[h1*24*60+m1*60+s1]++;
            S[h2*24*60+m2*60+s2]--;
        }
        rep1(i,S.size()-1) S[i] += S[i-1];
        cout << *max_element(S.begin(), S.end()) << endl;

    };
};

int main() {
    std::cin.tie(nullptr);
    // int T;
    // cin >> T;
    // T=1;
    for(;;){
        int i;
        cin >> i;
        if(i==0) return 0;
        Solver solver;
        solver.solve(i);
    }
    return 0;
}


