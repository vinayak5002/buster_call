/// 入力を取得するマクロ
/// https://qiita.com/tanakh/items/0ba42c7ca36cd29d0ac8
macro_rules! input {
    (source = $s:expr, $($r:tt)*) => {
        let mut iter = $s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
    ($($r:tt)*) => {
        let s = stdin!();
        let mut iter = s.split_whitespace();
        input_inner!{iter, $($r)*}
    };
}

macro_rules! input_inner {
    ($iter:expr) => {};
    ($iter:expr, ) => {};

    ($iter:expr, $var:ident : $t:tt $($r:tt)*) => {
        let $var = read_value!($iter, $t);
        input_inner!{$iter $($r)*}
};
}

macro_rules! read_value {
    ($iter:expr, ( $($t:tt),* )) => {
        ( $(read_value!($iter, $t)),* )
    };

    ($iter:expr, [ $t:tt ; $len:expr ]) => {
        (0..$len).map(|_| read_value!($iter, $t)).collect::<Vec<_>>()
    };

    ($iter:expr, chars) => {
        read_value!($iter, String).chars().collect::<Vec<char>>()
    };

    ($iter:expr, usize1) => {
        read_value!($iter, usize) - 1
    };

    ($iter:expr, $t:ty) => {
        $iter.next().unwrap().parse::<$t>().expect("Parse error")
    };
}

macro_rules! stdin {
    () => {{
        use std::io::Read;
        let mut s = String::new();
        std::io::stdin().read_to_string(&mut s).unwrap();
        s
    }};
}

macro_rules! stdout {
    ($out:expr) => {{
        use std::io::Write;
        let out = std::io::stdout();
        let mut out = std::io::BufWriter::new(out.lock());
        writeln!(out, "{}", $out).unwrap();
    }};
}

macro_rules! join {
    ($input:expr) => {
        join!($input, " ")
    };

    ($input:expr, $separator:expr) => {
        $input
            .iter()
            .map(|a| a.to_string())
            .collect::<Vec<String>>()
            .join($separator)
    };
} #[allow(dead_code)]
fn main() {
    stdout!(solve(&stdin!()))
}

fn solve(src: &str) -> i32 {
    input!(source = src, n: usize, s: [i32; n], q: usize, t: [i32; q]);

    let count = t.into_iter().filter(|t| s.contains(t)).count();
    count as i32
}

