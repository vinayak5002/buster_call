import math


class Node:
    def __init__(self, x, y):
        self.x = x
        self.y = y


def koch(n, p1, p2):

    if n == 0:
        return

    sx = (2 * p1.x + p2.x) / 3
    sy = (2 * p1.y + p2.y) / 3
    s = Node(sx, sy)

    tx = (p1.x + 2 * p2.x) / 3
    ty = (p1.y + 2 * p2.y) / 3
    t = Node(tx, ty)

    ux = (t.x - s.x) * math.cos(math.radians(60)) - (t.y - s.y) * math.sin(math.radians(60)) + s.x
    uy = (t.x - s.x) * math.sin(math.radians(60)) + (t.y - s.y) * math.cos(math.radians(60)) + s.y
    u = Node(ux, uy)

    koch(n - 1, p1, s)
    print(s.x, s.y)

    koch(n - 1, s, u)
    print(u.x, u.y)

    koch(n - 1, u, t)
    print(t.x, t.y)

    koch(n - 1, t, p2)
    
n = int(input())
p1 = Node(0, 0)
p2 = Node(100, 0)

print(p1.x, p1.y)
koch(n, p1, p2)
print(p2.x, p2.y)
