using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _20220416_AOJ
{
    class ITP2_5A
    {
        static int ReadInt() { return int.Parse(Console.ReadLine()); }
        static double ReadDouble() { return double.Parse(Console.ReadLine()); }
        static int[] ReadIntArr(char dlm = ' ') { return Console.ReadLine().Split(dlm).Select(x => int.Parse(x)).ToArray(); }
        static double[] ReadDoubleArr(char dlm = ' ') { return Console.ReadLine().Split(dlm).Select(x => double.Parse(x)).ToArray(); }
        static string[] ReadStringArr(char dlm = ' ') { return Console.ReadLine().Split(dlm).ToArray(); }


        static void Main(string[] args)
        {
            string line = Console.ReadLine();
            int n = int.Parse(line);

            Vertex[] vertices = new Vertex[n];
            for(int i=0;i<n;i++)
            {
                int[] xy = ReadIntArr();
                int x = xy[0];
                int y = xy[1];
                vertices[i] = new Vertex(x, y);
            }

            Array.Sort(vertices);

            StringBuilder sb = new StringBuilder();
            foreach(var v in vertices)
            {
                sb.AppendLine(string.Format("{0} {1}", v.X, v.Y));
            }

            Console.Write(sb);
        }
    }

    class Vertex : IComparable<Vertex>
    {
        public int X { get; set; }
        public int Y { get; set; }
        public Vertex(int _x, int _y)
        {
            X = _x;
            Y = _y;
        }

        public int CompareTo(Vertex t)
        {
            int rv = this.X.CompareTo(t.X);
            if(rv==0)
            {
                rv = this.Y.CompareTo(t.Y);
            }

            return rv;
        }
    }
}

