
fn main() {
    let (n, q) : (usize, usize) = input_t();

    def_map_monoid!(M,
        i64,
        i64,
        std::i64::MAX,
        |&a:&Self::Type, &b:&Self::Type| a.min(b),
        |&a:&Self::F,&b:&Self::F| b,
        |&(a,i):&(Self::Type,usize), &b:&Self::F| b
    );

    let mut seg = LazySegmentTree::<M>::from(&vec![(1<<31) - 1; n]);

    for _ in 0..q {
        let query = input_vec::<i64>();

        let s = query[1] as usize;
        let t = query[2] as usize;

        match query[0] {
            0 => seg.update(s..=t, query[3]),
            1 => println!("{}", seg.fold(s..=t)),
            _ => unreachable!()
        }
    }
}

#[allow(dead_code)] fn input<T: std::str::FromStr>() -> T { let mut s = String::new(); std::io::stdin().read_line(&mut s).ok(); s.trim().parse().ok().unwrap() } #[allow(dead_code)] fn input_t<T: std::str::FromStr, U: std::str::FromStr>() -> (T, U) { let mut s = String::new(); std::io::stdin().read_line(&mut s).ok(); let s = s.trim().split_whitespace().collect::<Vec<&str>>(); (s[0].parse().ok().unwrap(), s[1].parse().ok().unwrap()) } #[allow(dead_code)] fn input_t3<T1: std::str::FromStr, T2: std::str::FromStr, T3: std::str::FromStr>() -> (T1, T2, T3) { let mut s = String::new(); std::io::stdin().read_line(&mut s).ok(); let s = s.trim().split_whitespace().collect::<Vec<&str>>(); (s[0].parse().ok().unwrap(), s[1].parse().ok().unwrap(), s[2].parse().ok().unwrap()) } #[allow(dead_code)] fn input_t4<T1: std::str::FromStr, T2: std::str::FromStr, T3: std::str::FromStr, T4: std::str::FromStr>() -> (T1, T2, T3, T4) { let mut s = String::new(); std::io::stdin().read_line(&mut s).ok(); let s = s.trim().split_whitespace().collect::<Vec<&str>>(); (s[0].parse().ok().unwrap(), s[1].parse().ok().unwrap(), s[2].parse().ok().unwrap(), s[3].parse().ok().unwrap()) } #[allow(dead_code)] fn input_t5<T1: std::str::FromStr, T2: std::str::FromStr, T3: std::str::FromStr, T4: std::str::FromStr, T5: std::str::FromStr>() -> (T1, T2, T3, T4, T5) { let mut s = String::new(); std::io::stdin().read_line(&mut s).ok(); let s = s.trim().split_whitespace().collect::<Vec<&str>>(); (s[0].parse().ok().unwrap(), s[1].parse().ok().unwrap(), s[2].parse().ok().unwrap(), s[3].parse().ok().unwrap(), s[4].parse().ok().unwrap()) } #[allow(dead_code)] fn input_vec<T: std::str::FromStr>() -> Vec<T> { let mut s = String::new(); std::io::stdin().read_line(&mut s).ok(); s.trim().split_whitespace().map(|s| s.parse().ok().unwrap()).collect() }

#[macro_export]
macro_rules! def_map_monoid {
    ($m:ident, $t1:ty, $t2:ty, $id:expr, $op:expr, $merge:expr, $eval:expr) => {
        pub struct $m;
        impl MapMonoid for $m {
            type Type = $t1;
            type F = $t2;
            fn identity() -> Self::Type { $id }
            fn operator(x:&Self::Type, y:&Self::Type) -> Self::Type { $op(x, y) }
            fn merge(x:&Option<Self::F>, y:&Option<Self::F>) -> Option<Self::F> {
                match (x, y) {
                    (None, None) => None,
                    (Some(x), Some(y)) => Some($merge(x, y)),
                    (&x, None) => x,
                    (None, &y) => y
                }
            }
            fn eval(x:&(Self::Type, usize), y:&Self::F) -> Self::Type {
                $eval(x, y)
            }
        }
    };
}

pub trait MapMonoid {
    type Type: Copy + Clone + std::fmt::Debug;
    type F: Copy + Clone + std::fmt::Debug;
    fn identity() -> Self::Type;
    fn operator(a: &Self::Type, b: &Self::Type) -> Self::Type;
    fn merge(a: &Option<Self::F>, b: &Option<Self::F>) -> Option<Self::F>;
    fn eval(a: &(Self::Type, usize), b: &Self::F) -> Self::Type;
}

struct LazySegmentTree<T: MapMonoid> {
    n: usize,
    seg: Vec<(T::Type, usize)>,
    lazy: Vec<Option<T::F>>,
}

#[allow(unused)]
impl<T: MapMonoid> LazySegmentTree<T> {
    pub fn new(n: usize) -> Self {
        let mut seg = vec![(T::identity(), 1); 2*n+1];
        for i in (1..n).rev() { seg[i].1 = seg[2*i].1 + seg[2*i+1].1; }
        Self { n, seg: seg, lazy: vec![None; 2 * n + 1] }
    }

    pub fn from(s: &[T::Type]) -> Self {
        let n = s.len();
        let mut seg = vec![(T::identity(), 1); 2 * n + 1];
        for (i, &si) in s.iter().enumerate() { seg[i + n].0 = si; }
        for i in (1..n).rev() {
            seg[i].0 = T::operator(&seg[2 * i].0, &seg[2 * i + 1].0);
            seg[i].1 = &seg[2 * i].1 + &seg[2 * i + 1].1;
        }
        LazySegmentTree { n, seg, lazy: vec![None; 2 * n + 1] }
    }

    fn eval(&mut self, i: usize) -> T::Type {
        if let Some(x) = self.lazy[i] {
            T::eval(&self.seg[i], &x)
        } else {
            self.seg[i].0
        }
    }

    fn propagate_at(&mut self, i: usize) {
        self.seg[i] = (self.eval(i), self.seg[i].1);
        self.lazy[i*2] = T::merge(&self.lazy[i * 2], &self.lazy[i]);
        self.lazy[i*2 + 1] = T::merge(&self.lazy[i * 2 + 1], &self.lazy[i]);
        self.lazy[i] = None;
    }

    fn propagate_above(&mut self, i: usize) {
        let height = 63u32.saturating_sub(i.leading_zeros());
        for h in (1..=height).rev() {
            self.propagate_at(i >> h);
        }
    }

    fn recalc_above(&mut self, mut i: usize) {
        while i > 0 {
            i /= 2;
            let left = self.eval(i * 2);
            let right = self.eval(i * 2 + 1);
            self.seg[i].0 = T::operator(&left, &right);
        }
    }

    fn _update(&mut self, mut l: usize, mut r: usize, x: T::F) {
        let l0 = l / (l & l.wrapping_neg());
        let r0 = r / (r & r.wrapping_neg()) - 1;
        self.propagate_above(l0);
        self.propagate_above(r0);

        while l < r {
            if l % 2 == 1 {
                self.lazy[l] = T::merge(&self.lazy[l], &Some(x));
                l += 1;
            }
            if r % 2 == 1 {
                r -= 1;
                self.lazy[r] = T::merge(&self.lazy[r], &Some(x));
            }
            l /= 2;
            r /= 2;
        }

        self.recalc_above(l0);
        self.recalc_above(r0);
    }

    pub fn update<R: std::ops::RangeBounds<usize>>(&mut self, range: R, x: T::F) {
        let l = self.n + match range.start_bound() {
            std::ops::Bound::Unbounded => 0,
            std::ops::Bound::Included(&l) => l,
            _ => unreachable!()
        };
        let r = self.n + match range.end_bound() {
            std::ops::Bound::Unbounded => self.n,
            std::ops::Bound::Included(&x) => x + 1,
            std::ops::Bound::Excluded(&x) => x,
        };
        self._update(l, r, x)
    }

    fn _fold(&mut self, mut l: usize, mut r: usize) -> T::Type {
        let mut left = T::identity();
        let mut right = T::identity();

        self.propagate_above(l / (l & l.wrapping_neg()));
        self.propagate_above(r / (r & r.wrapping_neg()) - 1);

        while l < r {
            if l % 2 == 1 {
                left = T::operator(&left, &self.eval(l));
                l += 1;
            }
            if r % 2 == 1 {
                r -= 1;
                right = T::operator(&self.eval(r), &right);
            }
            l /= 2;
            r /= 2;
        }
        T::operator(&left, &right)
    }

    pub fn fold<R: std::ops::RangeBounds<usize>>(&mut self, range: R) -> T::Type {
        let l = self.n + match range.start_bound() {
            std::ops::Bound::Unbounded => 0,
            std::ops::Bound::Included(&l) => l,
            _ => unreachable!()
        };
        let r = self.n + match range.end_bound() {
            std::ops::Bound::Unbounded => self.n,
            std::ops::Bound::Included(&x) => x + 1,
            std::ops::Bound::Excluded(&x) => x,
        };
        self._fold(l, r)
    }

    pub fn get(&mut self, index: usize) -> T::Type { self.fold(index..=index) }
}

#[test]
fn test_lazy_segment_tree_range_affine_range_sum() {
    const MOD : usize = 998_244_353;
    def_map_monoid!(
        M,
        (usize, usize),
        (usize, usize),
        (0, 0),
        |&a:&Self::Type, &b:&Self::Type| {
            ((a.0 + b.0) % MOD , (a.1 + b.1))
        },
        |&a:&Self::F, &b:&Self::F| {
            (
                a.0 * b.0 % MOD,
                a.1 * b.0 % MOD + b.1,
            )
        },
        |&(a, _):&(Self::Type, usize), &b:&Self::F| {
            ((a.0*b.0 + a.1*b.1) % MOD, a.1)
        }
    );

    let a : Vec<usize> = vec![1, 2, 3, 4, 5];
    let b = a.into_iter().map(|a| (a, 1)).collect_vec();
    let mut seg = LazySegmentTree::<M>::from(&b);

    assert_eq!(15, seg.fold(0..5).0);

    seg.update(2..4, (100, 101));
    eprintln!("{:?}", (0..5).map(|i| seg.get(i)).collect_vec());
    assert_eq!(404, seg.fold(0..3).0);

    seg.update(1..3, (102, 103));
    eprintln!("{:?}", (0..5).map(|i| seg.get(i)).collect_vec());
    assert_eq!(41511, seg.fold(2..5).0);

    seg.update(2..5, (104, 105));
    eprintln!("{:?}", (0..5).map(|i| seg.get(i)).collect_vec());

    assert_eq!(4317767, seg.fold(0..5).0);
}
