import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Set;

public class Main {
    static int[][] map, memo;

    static void dfs(int x, int y, int h, int w) {
        memo[x][y] = 1;
        if (x < h - 1 && memo[x + 1][y] == 0 && map[x + 1][y] == 1) {
            dfs(x + 1, y, h, w);
        }
        if (x > 0 && memo[x - 1][y] == 0 && map[x - 1][y] == 1)
            dfs(x - 1, y, h, w);
        if (y < w - 1 && memo[x][y + 1] == 0 && map[x][y + 1] == 1)
            dfs(x, y + 1, h, w);
        if (y > 0 && memo[x][y - 1] == 0 && map[x][y - 1] == 1)
            dfs(x, y - 1, h, w);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            int ct = 0;
            int w = sc.nextInt(), h = sc.nextInt();
            map = new int[h][w];
            memo = new int[h][w];
            if (w == 0 && h == 0)
                break;
            for (int i = 0; i < h; ++i)
                for (int j = 0; j < w; ++j)
                    map[i][j] = sc.nextInt();
            for (int i = 0; i < h; ++i)
                for (int j = 0; j < w; ++j)
                    if (memo[i][j] == 0 && map[i][j] == 1) {
                        dfs(i, j, h, w);
                        ++ct;
                    }
            System.out.println(ct);
        }
        sc.close();
    }
}
